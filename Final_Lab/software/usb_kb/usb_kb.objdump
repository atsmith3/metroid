
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00014f8c memsz 0x00014f8c flags r-x
    LOAD off    0x00015fac vaddr 0x10014fac paddr 0x10016a98 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00018584 vaddr 0x10018584 paddr 0x10018584 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012944  100001bc  100001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000024ac  10012b00  10012b00  00013b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  10014fac  10016a98  00015fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  10018584  10018584  00018584  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00017a98  2**0
                  CONTENTS
  7 .sdram        00000000  100186e4  100186e4  00017a98  2**0
                  CONTENTS
  8 .comment      00000046  00000000  00000000  00017a98  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000de8  00000000  00000000  00017ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00024483  00000000  00000000  000188c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009629  00000000  00000000  0003cd4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b8eb  00000000  00000000  00046374  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000023e0  00000000  00000000  00051c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003614  00000000  00000000  00054040  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000182d5  00000000  00000000  00057654  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006f92c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001650  00000000  00000000  0006f970  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000744b2  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000744b5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000744c1  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000744c2  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000744c3  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000744c7  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000744cb  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000744cf  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000744da  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000744e5  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000744f0  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001b  00000000  00000000  000744fb  2**0
                  CONTENTS, READONLY
 30 .jdi          00004442  00000000  00000000  00074516  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0016a1e3  00000000  00000000  00078958  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001bc l    d  .text	00000000 .text
10012b00 l    d  .rodata	00000000 .rodata
10014fac l    d  .rwdata	00000000 .rwdata
10018584 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
100186e4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
100001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
10018584 l     O .bss	00000002 ctl_reg.3318
10018586 l     O .bss	00000002 no_device.3319
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
10002f54 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10014df2 l     O .rodata	00000010 zeroes.4181
10014e02 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
100068e8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10008490 l     F .text	00000008 __fp_lock
10008498 l     F .text	00000008 __fp_unlock
100084ac l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10014fac l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
100153f0 l     O .rwdata	00000020 lc_ctype_charset
100153d0 l     O .rwdata	00000020 lc_message_charset
10015410 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10014e34 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000b8a4 l     F .text	000000fc __sprint_r.part.0
10014f68 l     O .rodata	00000010 blanks.4125
10014f58 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
100102a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
100103cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
100103f8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10010500 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
100105fc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
100106e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
100108d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10016a88 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
10010b88 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10010cd8 l     F .text	00000038 alt_dev_reg
100159f8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10010fb4 l     F .text	00000204 altera_avalon_jtag_uart_irq
100111b8 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10011a8c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10011f2c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10012084 l     F .text	00000050 alt_get_errno
100120d4 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
1000aee4 g     F .text	00000074 _mprec_log10
1000afd0 g     F .text	0000008c __any_on
1000d2d0 g     F .text	00000054 _isatty_r
10014e40 g     O .rodata	00000028 __mprec_tinytens
10010814 g     F .text	00000078 alt_main
10004534 g     F .text	000000b8 _puts_r
100185e4 g     O .bss	00000100 alt_irq
1000d324 g     F .text	0000005c _lseek_r
10016a98 g       *ABS*	00000000 __flash_rwdata_start
1000ed28 g     F .text	00000084 .hidden __eqdf2
100186e4 g       *ABS*	00000000 __alt_heap_start
100044f8 g     F .text	0000003c printf
1000d54c g     F .text	0000009c _wcrtomb_r
1000b79c g     F .text	0000005c __sseek
100087f4 g     F .text	00000010 __sinit
1000d3dc g     F .text	00000154 __swbuf_r
1000926c g     F .text	0000007c _setlocale_r
1000864c g     F .text	00000078 __sfmoreglue
100108b0 g     F .text	00000024 __malloc_unlock
10002e58 g     F .text	00000080 UsbGetRetryCnt
10009d94 g     F .text	0000015c memmove
100001f8 g     F .text	00000050 IO_init
100087dc g     F .text	00000018 _cleanup
1000a014 g     F .text	000000a8 _Balloc
10003640 g     F .text	00000078 .hidden __fixsfsi
1000edac g     F .text	000000e0 .hidden __gtdf2
100124c4 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000d278 g     F .text	00000058 _fstat_r
100185a0 g     O .bss	00000004 errno
1000b718 g     F .text	00000008 __seofread
100185a8 g     O .bss	00000004 alt_argv
1001ea58 g       *ABS*	00000000 _gp
10010b58 g     F .text	00000030 usleep
10015878 g     O .rwdata	00000180 alt_fd_list
100124e4 g     F .text	00000090 alt_find_dev
10004394 g     F .text	00000138 memcpy
100084a0 g     F .text	0000000c _cleanup_r
10010130 g     F .text	000000d0 .hidden __floatsidf
1001200c g     F .text	00000078 alt_io_redirect
1000ee8c g     F .text	000000e0 .hidden __ltdf2
10012b00 g       *ABS*	00000000 __DTOR_END__
100045ec g     F .text	00000014 puts
1000b5fc g     F .text	00000074 __fpclassifyd
1000ae40 g     F .text	000000a4 __ratio
1000cddc g     F .text	00000024 __vfiprintf_internal
100113b4 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
100044cc g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10003070 g     F .text	00000008 .hidden __udivsi3
10010550 g     F .text	000000ac isatty
10014e90 g     O .rodata	000000c8 __mprec_tens
100092e8 g     F .text	0000000c __locale_charset
1001859c g     O .bss	00000004 __malloc_top_pad
100024f8 g     F .text	00000264 UsbGetConfigDesc2
10016a60 g     O .rwdata	00000004 __mb_cur_max
10009318 g     F .text	0000000c _localeconv_r
1000a43c g     F .text	0000003c __i2b
10008c58 g     F .text	000004a4 __sfvwrite_r
1000b670 g     F .text	00000054 _sbrk_r
1000d380 g     F .text	0000005c _read_r
10016a80 g     O .rwdata	00000004 alt_max_fd
1000cf88 g     F .text	00000100 _fclose_r
10008460 g     F .text	00000030 fflush
10018598 g     O .bss	00000004 __malloc_max_sbrked_mem
10004088 g     F .text	00000110 .hidden __extendsfdf2
100037ec g     F .text	0000089c .hidden __adddf3
1000abe8 g     F .text	0000011c __b2d
1000dd8c g     F .text	0000061c .hidden __umoddi3
10010738 g     F .text	000000dc lseek
10016a58 g     O .rwdata	00000004 _global_impure_ptr
1000b05c g     F .text	000005a0 _realloc_r
100186e4 g       *ABS*	00000000 __bss_end
10011e3c g     F .text	000000f0 alt_iic_isr_register
100123c0 g     F .text	00000104 alt_tick
1000d74c g     F .text	00000640 .hidden __udivdi3
1000d09c g     F .text	00000184 _fputwc_r
10014e68 g     O .rodata	00000028 __mprec_bigtens
1000a220 g     F .text	00000104 __s2b
10010200 g     F .text	000000a4 .hidden __floatunsidf
1000a990 g     F .text	00000060 __mcmp
10001f58 g     F .text	000000fc UsbSetAddress
10008814 g     F .text	00000018 __fp_lock_all
10011df0 g     F .text	0000004c alt_ic_irq_enabled
10012328 g     F .text	00000098 alt_alarm_stop
100185b0 g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000d0 alt_irq_handler
10015850 g     O .rwdata	00000028 alt_dev_null
10011a70 g     F .text	0000001c alt_dcache_flush_all
1000a324 g     F .text	00000068 __hi0bits
100002c0 g     F .text	00000074 IO_read
100100a8 g     F .text	00000088 .hidden __fixdfsi
10016a98 g       *ABS*	00000000 __ram_rwdata_end
10016a78 g     O .rwdata	00000008 alt_dev_list
10010bd8 g     F .text	00000100 write
10003588 g     F .text	000000b8 .hidden __gtsf2
10014fac g       *ABS*	00000000 __ram_rodata_end
10010448 g     F .text	000000b8 fstat
1000ee8c g     F .text	000000e0 .hidden __ledf2
10002ed8 g     F .text	0000007c UsbPrintMem
1000a708 g     F .text	00000140 __pow5mult
1000b9b8 g     F .text	00001424 ___vfiprintf_internal_r
10018590 g     O .bss	00000004 __nlocale_changed
10003078 g     F .text	00000008 .hidden __umodsi3
100186e4 g       *ABS*	00000000 end
10010ef0 g     F .text	000000c4 altera_avalon_jtag_uart_init
10012b00 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10004330 g     F .text	00000064 .hidden __clzsi2
100115c0 g     F .text	00000218 altera_avalon_jtag_uart_write
10008804 g     F .text	00000004 __sfp_lock_acquire
10009cac g     F .text	000000e8 memchr
10004698 g     F .text	000020fc ___vfprintf_internal_r
10002858 g     F .text	000000fc UsbClassRequest
10008968 g     F .text	000002f0 _free_r
100092f4 g     F .text	00000010 __locale_mb_cur_max
10012938 g     F .text	00000194 __call_exitprocs
1001858c g     O .bss	00000004 __mlocale_changed
10016a64 g     O .rwdata	00000004 __malloc_sbrk_base
100001bc g     F .text	0000003c _start
100185b4 g     O .bss	00000004 _alt_tick_rate
1000a848 g     F .text	00000148 __lshift
100185b8 g     O .bss	00000004 _alt_nticks
10010924 g     F .text	00000104 read
10010d44 g     F .text	00000048 alt_sys_init
100036b8 g     F .text	00000134 .hidden __floatsisf
10012824 g     F .text	00000114 __register_exitproc
1000a478 g     F .text	00000290 __multiply
10011260 g     F .text	00000068 altera_avalon_jtag_uart_close
10003080 g     F .text	00000028 .hidden __mulsi3
10014fac g       *ABS*	00000000 __ram_rwdata_start
10012b00 g       *ABS*	00000000 __ram_rodata_start
100185bc g     O .bss	00000028 __malloc_current_mallinfo
1000ad04 g     F .text	0000013c __d2b
10002054 g     F .text	00000144 UsbGetDeviceDesc1
10010d8c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10012688 g     F .text	000000d4 alt_get_fd
10011918 g     F .text	00000158 alt_busy_sleep
1000ce5c g     F .text	00000054 _close_r
100127a8 g     F .text	0000007c memcmp
10010e4c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
100186e4 g       *ABS*	00000000 __alt_stack_base
10010e9c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
100067b8 g     F .text	00000130 __swsetup_r
1000e3a8 g     F .text	00000980 .hidden __divdf3
100086c4 g     F .text	00000118 __sfp
1000af58 g     F .text	00000078 __copybits
10015448 g     O .rwdata	00000408 __malloc_av_
10008810 g     F .text	00000004 __sinit_lock_release
1000ef6c g     F .text	0000086c .hidden __muldf3
1000b6c4 g     F .text	00000054 __sread
10002dd4 g     F .text	00000084 UsbWaitTDListDone
10012574 g     F .text	00000114 alt_find_file
10011adc g     F .text	000000a4 alt_dev_llist_insert
1001088c g     F .text	00000024 __malloc_lock
10010aa8 g     F .text	000000b0 sbrk
10008238 g     F .text	00000228 _fflush_r
1000ceb0 g     F .text	000000d8 _calloc_r
10018584 g       *ABS*	00000000 __bss_start
10009ef0 g     F .text	00000124 memset
10000334 g     F .text	00001adc main
100185ac g     O .bss	00000004 alt_envp
10018594 g     O .bss	00000004 __malloc_max_total_mem
10010dec g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1000275c g     F .text	000000fc UsbSetConfig
1000d530 g     F .text	0000001c __swbuf
1000b7f8 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000d088 g     F .text	00000014 fclose
10004198 g     F .text	00000198 .hidden __truncdfsf2
10006b10 g     F .text	00001728 _dtoa_r
10009504 g     F .text	000007a8 _malloc_r
1000d6c0 g     F .text	00000030 __ascii_wctomb
10016a84 g     O .rwdata	00000004 alt_errno
100090fc g     F .text	000000b8 _fwalk
10002fc0 g     F .text	00000054 .hidden __divsi3
10008844 g     F .text	00000124 _malloc_trim_r
10002954 g     F .text	00000144 UsbGetHidDesc
10012b00 g       *ABS*	00000000 __CTOR_END__
1000b800 g     F .text	000000a4 strcmp
10012b00 g       *ABS*	00000000 __flash_rodata_start
10012b00 g       *ABS*	00000000 __DTOR_LIST__
1000ed28 g     F .text	00000084 .hidden __nedf2
10001e64 g     F .text	00000044 UsbRead
10010d10 g     F .text	00000034 alt_irq_init
10010a28 g     F .text	00000080 alt_release_fd
10014cac g     O .rodata	00000100 .hidden __clz_tab
10018588 g     O .bss	00000004 _PathLocale
1001275c g     F .text	00000014 atexit
10003588 g     F .text	000000b8 .hidden __gesf2
1000ce00 g     F .text	0000005c _write_r
10009324 g     F .text	0000001c setlocale
10016a5c g     O .rwdata	00000004 _impure_ptr
100185a4 g     O .bss	00000004 alt_argc
10011be0 g     F .text	00000060 _do_dtors
10009310 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
1000ab88 g     F .text	00000060 __ulp
1000882c g     F .text	00000018 __fp_unlock_all
10016a70 g     O .rwdata	00000008 alt_fs_list
10002a98 g     F .text	0000033c UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
10009340 g     F .text	0000000c localeconv
10011c5c g     F .text	00000050 alt_ic_isr_register
10016a98 g       *ABS*	00000000 _edata
100186e4 g       *ABS*	00000000 _end
10001e10 g     F .text	00000054 UsbWrite
100001bc g       *ABS*	00000000 __ram_exceptions_end
100112c8 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10011d4c g     F .text	000000a4 alt_ic_irq_disable
1000b720 g     F .text	0000007c __swrite
10016a68 g     O .rwdata	00000004 __malloc_trim_threshold
10009304 g     F .text	0000000c __locale_msgcharset
10012770 g     F .text	00000038 exit
100091b4 g     F .text	000000b8 _fwalk_reent
1000a9f0 g     F .text	00000198 __mdiff
10003014 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10008808 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10000248 g     F .text	00000078 IO_write
10012acc g     F .text	00000034 _exit
100117d8 g     F .text	00000140 alt_alarm_start
1000934c g     F .text	000001b8 __smakebuf_r
10004600 g     F .text	00000098 strlen
100121c8 g     F .text	00000160 open
1000edac g     F .text	000000e0 .hidden __gedf2
10016a6c g     O .rwdata	00000004 __wctomb
1000b9a0 g     F .text	00000018 __sprint_r
10011c40 g     F .text	0000001c alt_icache_flush_all
10016a8c g     O .rwdata	00000004 alt_priority_mask
10011cac g     F .text	000000a0 alt_ic_irq_enable
10006794 g     F .text	00000024 __vfprintf_internal
1000d6f0 g     F .text	0000005c _wctomb_r
1000f7d8 g     F .text	000008d0 .hidden __subdf3
1000a38c g     F .text	000000b0 __lo0bits
1000236c g     F .text	0000018c UsbGetConfigDesc1
10016a90 g     O .rwdata	00000008 alt_alarm_list
10011b80 g     F .text	00000060 _do_ctors
10001ea8 g     F .text	000000b0 UsbSoftReset
1000d5e8 g     F .text	000000d8 wcrtomb
100102f4 g     F .text	000000d8 close
100030a8 g     F .text	000004e0 .hidden __addsf3
10002198 g     F .text	000001d4 UsbGetDeviceDesc2
10010664 g     F .text	00000084 alt_load
1000d220 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
1000880c g     F .text	00000004 __sinit_lock_acquire
1000a0e4 g     F .text	0000013c __multadd
1000a0bc g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406f14 	ori	at,at,444
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001426 	beq	r2,zero,1000017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	008400b4 	movhi	r2,4098
10000130:	10a17904 	addi	r2,r2,-31260
10000134:	e0fffd17 	ldw	r3,-12(fp)
10000138:	180690fa 	slli	r3,r3,3
1000013c:	10c5883a 	add	r2,r2,r3
10000140:	10c00017 	ldw	r3,0(r2)
10000144:	008400b4 	movhi	r2,4098
10000148:	10a17904 	addi	r2,r2,-31260
1000014c:	e13ffd17 	ldw	r4,-12(fp)
10000150:	200890fa 	slli	r4,r4,3
10000154:	1105883a 	add	r2,r2,r4
10000158:	10800104 	addi	r2,r2,4
1000015c:	10800017 	ldw	r2,0(r2)
10000160:	1009883a 	mov	r4,r2
10000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
10000178:	00000706 	br	10000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000017c:	e0bffc17 	ldw	r2,-16(fp)
10000180:	1085883a 	add	r2,r2,r2
10000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000188:	e0bffd17 	ldw	r2,-12(fp)
1000018c:	10800044 	addi	r2,r2,1
10000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
10000194:	003fe106 	br	1000011c <__alt_data_end+0xf800011c>

    active = alt_irq_pending ();
10000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000019c:	e0bffb17 	ldw	r2,-20(fp)
100001a0:	103fdb1e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	e037883a 	mov	sp,fp
100001ac:	dfc00117 	ldw	ra,4(sp)
100001b0:	df000017 	ldw	fp,0(sp)
100001b4:	dec00204 	addi	sp,sp,8
100001b8:	f800283a 	ret

Disassembly of section .text:

100001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001bc:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c4:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
100001c8:	d6ba9614 	ori	gp,gp,59992
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001cc:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001d0:	10a16114 	ori	r2,r2,34180

    movhi r3, %hi(__bss_end)
100001d4:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001d8:	18e1b914 	ori	r3,r3,34532

    beq r2, r3, 1f
100001dc:	10c00326 	beq	r2,r3,100001ec <_start+0x30>

0:
    stw zero, (r2)
100001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e8:	10fffd36 	bltu	r2,r3,100001e0 <__alt_data_end+0xf80001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001ec:	00106640 	call	10010664 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001f0:	00108140 	call	10010814 <alt_main>

100001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f4:	003fff06 	br	100001f4 <__alt_data_end+0xf80001f4>

100001f8 <IO_init>:
#define otg_hpi_cs			(volatile char*)	OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*)	OTG_HPI_W_BASE


void IO_init(void)
{
100001f8:	deffff04 	addi	sp,sp,-4
100001fc:	df000015 	stw	fp,0(sp)
10000200:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 1;
10000204:	0080a804 	movi	r2,672
10000208:	00c00044 	movi	r3,1
1000020c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10000210:	0080b004 	movi	r2,704
10000214:	00c00044 	movi	r3,1
10000218:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
1000021c:	0080ac04 	movi	r2,688
10000220:	00c00044 	movi	r3,1
10000224:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
10000228:	0080b804 	movi	r2,736
1000022c:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
10000230:	0080b404 	movi	r2,720
10000234:	10000015 	stw	zero,0(r2)
}
10000238:	e037883a 	mov	sp,fp
1000023c:	df000017 	ldw	fp,0(sp)
10000240:	dec00104 	addi	sp,sp,4
10000244:	f800283a 	ret

10000248 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
10000248:	defffd04 	addi	sp,sp,-12
1000024c:	df000215 	stw	fp,8(sp)
10000250:	df000204 	addi	fp,sp,8
10000254:	2007883a 	mov	r3,r4
10000258:	2805883a 	mov	r2,r5
1000025c:	e0fffe05 	stb	r3,-8(fp)
10000260:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
10000264:	0080b804 	movi	r2,736
10000268:	e0fffe03 	ldbu	r3,-8(fp)
1000026c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
10000270:	0080b404 	movi	r2,720
10000274:	e0ffff0b 	ldhu	r3,-4(fp)
10000278:	10c00015 	stw	r3,0(r2)
	
	*otg_hpi_r = 1;
1000027c:	0080b004 	movi	r2,704
10000280:	00c00044 	movi	r3,1
10000284:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 0;
10000288:	0080a804 	movi	r2,672
1000028c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10000290:	0080ac04 	movi	r2,688
10000294:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
10000298:	0080ac04 	movi	r2,688
1000029c:	00c00044 	movi	r3,1
100002a0:	10c00005 	stb	r3,0(r2)
	
	*otg_hpi_cs = 1;
100002a4:	0080a804 	movi	r2,672
100002a8:	00c00044 	movi	r3,1
100002ac:	10c00005 	stb	r3,0(r2)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
}
100002b0:	e037883a 	mov	sp,fp
100002b4:	df000017 	ldw	fp,0(sp)
100002b8:	dec00104 	addi	sp,sp,4
100002bc:	f800283a 	ret

100002c0 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
100002c0:	defffd04 	addi	sp,sp,-12
100002c4:	df000215 	stw	fp,8(sp)
100002c8:	df000204 	addi	fp,sp,8
100002cc:	2005883a 	mov	r2,r4
100002d0:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	
	*otg_hpi_address = Address;
100002d4:	0080b804 	movi	r2,736
100002d8:	e0ffff03 	ldbu	r3,-4(fp)
100002dc:	10c00015 	stw	r3,0(r2)
		
	*otg_hpi_w = 1;
100002e0:	0080ac04 	movi	r2,688
100002e4:	00c00044 	movi	r3,1
100002e8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 0;
100002ec:	0080a804 	movi	r2,672
100002f0:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
100002f4:	0080b004 	movi	r2,704
100002f8:	10000005 	stb	zero,0(r2)
	
	temp = *otg_hpi_data;
100002fc:	0080b404 	movi	r2,720
10000300:	10800017 	ldw	r2,0(r2)
10000304:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
10000308:	0080b004 	movi	r2,704
1000030c:	00c00044 	movi	r3,1
10000310:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000314:	0080a804 	movi	r2,672
10000318:	00c00044 	movi	r3,1
1000031c:	10c00005 	stb	r3,0(r2)
	
	return temp;
10000320:	e0bffe0b 	ldhu	r2,-8(fp)
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	//printf("%x\n",temp);
	return temp;
}
10000324:	e037883a 	mov	sp,fp
10000328:	df000017 	ldw	fp,0(sp)
1000032c:	dec00104 	addi	sp,sp,4
10000330:	f800283a 	ret

10000334 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
10000334:	def94b04 	addi	sp,sp,-6868
10000338:	dfc6b415 	stw	ra,6864(sp)
1000033c:	df06b315 	stw	fp,6860(sp)
10000340:	dc86b215 	stw	r18,6856(sp)
10000344:	dc46b115 	stw	r17,6852(sp)
10000348:	dc06b015 	stw	r16,6848(sp)
1000034c:	df06b304 	addi	fp,sp,6860
	IO_init();
10000350:	00001f80 	call	100001f8 <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
10000354:	e039590d 	sth	zero,-6812(fp)
	long keycode = 0;
10000358:	e0395a15 	stw	zero,-6808(fp)
	alt_u8 toggle = 0;
1000035c:	e0394d85 	stb	zero,-6858(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
10000360:	01040074 	movhi	r4,4097
10000364:	210ac004 	addi	r4,r4,11008
10000368:	00045ec0 	call	100045ec <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
1000036c:	0001ea80 	call	10001ea8 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10000370:	01005104 	movi	r4,324
10000374:	000b883a 	mov	r5,zero
10000378:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
1000037c:	01302414 	movui	r4,49296
10000380:	017fffd4 	movui	r5,65535
10000384:	0001e100 	call	10001e10 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10000388:	01006d04 	movi	r4,436
1000038c:	01409604 	movi	r5,600
10000390:	0001e100 	call	10001e10 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10000394:	00811004 	movi	r2,1088
10000398:	e0b94d0d 	sth	r2,-6860(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
1000039c:	e0b94d0b 	ldhu	r2,-6860(fp)
100003a0:	01005084 	movi	r4,322
100003a4:	100b883a 	mov	r5,r2
100003a8:	0001e100 	call	10001e10 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
100003ac:	00808404 	movi	r2,528
100003b0:	e0b95b0d 	sth	r2,-6804(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
100003b4:	e0b95b0b 	ldhu	r2,-6804(fp)
100003b8:	01302314 	movui	r4,49292
100003bc:	100b883a 	mov	r5,r2
100003c0:	0001e100 	call	10001e10 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
100003c4:	01007104 	movi	r4,452
100003c8:	000b883a 	mov	r5,zero
100003cc:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100003d0:	01007184 	movi	r4,454
100003d4:	000b883a 	mov	r5,zero
100003d8:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
100003dc:	01007204 	movi	r4,456
100003e0:	000b883a 	mov	r5,zero
100003e4:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
100003e8:	01007284 	movi	r4,458
100003ec:	000b883a 	mov	r5,zero
100003f0:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
100003f4:	01007304 	movi	r4,460
100003f8:	000b883a 	mov	r5,zero
100003fc:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000400:	01007384 	movi	r4,462
10000404:	000b883a 	mov	r5,zero
10000408:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
1000040c:	01007404 	movi	r4,464
10000410:	000b883a 	mov	r5,zero
10000414:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10000418:	01007484 	movi	r4,466
1000041c:	000b883a 	mov	r5,zero
10000420:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000424:	01007504 	movi	r4,468
10000428:	000b883a 	mov	r5,zero
1000042c:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10000430:	01007584 	movi	r4,470
10000434:	000b883a 	mov	r5,zero
10000438:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
1000043c:	01007604 	movi	r4,472
10000440:	000b883a 	mov	r5,zero
10000444:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10000448:	01007684 	movi	r4,474
1000044c:	000b883a 	mov	r5,zero
10000450:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000454:	01007704 	movi	r4,476
10000458:	000b883a 	mov	r5,zero
1000045c:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10000460:	01007784 	movi	r4,478
10000464:	000b883a 	mov	r5,zero
10000468:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
1000046c:	01007084 	movi	r4,450
10000470:	01401c84 	movi	r5,114
10000474:	0001e100 	call	10001e10 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000478:	01000044 	movi	r4,1
1000047c:	01738054 	movui	r5,52737
10000480:	00002480 	call	10000248 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10000484:	0001883a 	nop
10000488:	010000c4 	movi	r4,3
1000048c:	00002c00 	call	100002c0 <IO_read>
10000490:	10bfffcc 	andi	r2,r2,65535
10000494:	103ffc26 	beq	r2,zero,10000488 <__alt_data_end+0xf8000488>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000498:	0001883a 	nop
1000049c:	01000044 	movi	r4,1
100004a0:	00002c00 	call	100002c0 <IO_read>
100004a4:	10bfffcc 	andi	r2,r2,65535
100004a8:	1083fb58 	cmpnei	r2,r2,4077
100004ac:	10000826 	beq	r2,zero,100004d0 <main+0x19c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100004b0:	01000044 	movi	r4,1
100004b4:	00002c00 	call	100002c0 <IO_read>
100004b8:	10bfffcc 	andi	r2,r2,65535
100004bc:	01040074 	movhi	r4,4097
100004c0:	210ac604 	addi	r4,r4,11032
100004c4:	100b883a 	mov	r5,r2
100004c8:	00044f80 	call	100044f8 <printf>
		goto USB_HOT_PLUG;
100004cc:	003fa706 	br	1000036c <__alt_data_end+0xf800036c>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
100004d0:	01040074 	movhi	r4,4097
100004d4:	210acf04 	addi	r4,r4,11068
100004d8:	00044f80 	call	100044f8 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
100004dc:	01007084 	movi	r4,450
100004e0:	01401d04 	movi	r5,116
100004e4:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
100004e8:	01007104 	movi	r4,452
100004ec:	01400f04 	movi	r5,60
100004f0:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100004f4:	01007184 	movi	r4,454
100004f8:	000b883a 	mov	r5,zero
100004fc:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000500:	01007204 	movi	r4,456
10000504:	000b883a 	mov	r5,zero
10000508:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
1000050c:	01007284 	movi	r4,458
10000510:	000b883a 	mov	r5,zero
10000514:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10000518:	01007304 	movi	r4,460
1000051c:	000b883a 	mov	r5,zero
10000520:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000524:	01007384 	movi	r4,462
10000528:	000b883a 	mov	r5,zero
1000052c:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000530:	01007404 	movi	r4,464
10000534:	000b883a 	mov	r5,zero
10000538:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
1000053c:	01007484 	movi	r4,466
10000540:	000b883a 	mov	r5,zero
10000544:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000548:	01007504 	movi	r4,468
1000054c:	000b883a 	mov	r5,zero
10000550:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10000554:	01007584 	movi	r4,470
10000558:	000b883a 	mov	r5,zero
1000055c:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10000560:	01007604 	movi	r4,472
10000564:	000b883a 	mov	r5,zero
10000568:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
1000056c:	01007684 	movi	r4,474
10000570:	000b883a 	mov	r5,zero
10000574:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000578:	01007704 	movi	r4,476
1000057c:	000b883a 	mov	r5,zero
10000580:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10000584:	01007784 	movi	r4,478
10000588:	000b883a 	mov	r5,zero
1000058c:	0001e100 	call	10001e10 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000590:	01000044 	movi	r4,1
10000594:	01738054 	movui	r5,52737
10000598:	00002480 	call	10000248 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
1000059c:	0001883a 	nop
100005a0:	01000044 	movi	r4,1
100005a4:	00002c00 	call	100002c0 <IO_read>
100005a8:	10bfffcc 	andi	r2,r2,65535
100005ac:	1083fb58 	cmpnei	r2,r2,4077
100005b0:	10000826 	beq	r2,zero,100005d4 <main+0x2a0>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100005b4:	01000044 	movi	r4,1
100005b8:	00002c00 	call	100002c0 <IO_read>
100005bc:	10bfffcc 	andi	r2,r2,65535
100005c0:	01040074 	movhi	r4,4097
100005c4:	210ac604 	addi	r4,r4,11032
100005c8:	100b883a 	mov	r5,r2
100005cc:	00044f80 	call	100044f8 <printf>
		goto USB_HOT_PLUG;
100005d0:	003f6606 	br	1000036c <__alt_data_end+0xf800036c>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
100005d4:	00b02284 	movi	r2,-16246
100005d8:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
100005dc:	008c0004 	movi	r2,12288
100005e0:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
100005e4:	00880004 	movi	r2,8192
100005e8:	e0b9590d 	sth	r2,-6812(fp)
	usb_ctl_val = UsbRead(ctl_reg);
100005ec:	d0a6cb0b 	ldhu	r2,-25812(gp)
100005f0:	10bfffcc 	andi	r2,r2,65535
100005f4:	1009883a 	mov	r4,r2
100005f8:	0001e640 	call	10001e64 <UsbRead>
100005fc:	e0b94d0d 	sth	r2,-6860(fp)

	if (!(usb_ctl_val & no_device))
10000600:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000604:	e0f94d0b 	ldhu	r3,-6860(fp)
10000608:	1884703a 	and	r2,r3,r2
1000060c:	10bfffcc 	andi	r2,r2,65535
10000610:	1000341e 	bne	r2,zero,100006e4 <main+0x3b0>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000614:	e0394dc5 	stb	zero,-6857(fp)
10000618:	00001006 	br	1000065c <main+0x328>
		{
			usleep(5*1000);
1000061c:	0104e204 	movi	r4,5000
10000620:	0010b580 	call	10010b58 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10000624:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000628:	10bfffcc 	andi	r2,r2,65535
1000062c:	1009883a 	mov	r4,r2
10000630:	0001e640 	call	10001e64 <UsbRead>
10000634:	e0b94d0d 	sth	r2,-6860(fp)
			if(usb_ctl_val & no_device) break;
10000638:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000063c:	e0f94d0b 	ldhu	r3,-6860(fp)
10000640:	1884703a 	and	r2,r3,r2
10000644:	10bfffcc 	andi	r2,r2,65535
10000648:	10000126 	beq	r2,zero,10000650 <main+0x31c>
1000064c:	00000606 	br	10000668 <main+0x334>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000650:	e0b94dc3 	ldbu	r2,-6857(fp)
10000654:	10800044 	addi	r2,r2,1
10000658:	e0b94dc5 	stb	r2,-6857(fp)
1000065c:	e0b94dc3 	ldbu	r2,-6857(fp)
10000660:	10800170 	cmpltui	r2,r2,5
10000664:	103fed1e 	bne	r2,zero,1000061c <__alt_data_end+0xf800061c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
		}
		if(!(usb_ctl_val & no_device))
10000668:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000066c:	e0f94d0b 	ldhu	r3,-6860(fp)
10000670:	1884703a 	and	r2,r3,r2
10000674:	10bfffcc 	andi	r2,r2,65535
10000678:	1000261e 	bne	r2,zero,10000714 <main+0x3e0>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
1000067c:	01040074 	movhi	r4,4097
10000680:	210ad304 	addi	r4,r4,11084
10000684:	00045ec0 	call	100045ec <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10000688:	01040074 	movhi	r4,4097
1000068c:	210add04 	addi	r4,r4,11124
10000690:	00045ec0 	call	100045ec <puts>
			while (!(usb_ctl_val & no_device))
10000694:	00000d06 	br	100006cc <main+0x398>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10000698:	d0a6cb0b 	ldhu	r2,-25812(gp)
1000069c:	10bfffcc 	andi	r2,r2,65535
100006a0:	1009883a 	mov	r4,r2
100006a4:	0001e640 	call	10001e64 <UsbRead>
100006a8:	e0b94d0d 	sth	r2,-6860(fp)
				if(usb_ctl_val & no_device)
100006ac:	d0a6cb8b 	ldhu	r2,-25810(gp)
100006b0:	e0f94d0b 	ldhu	r3,-6860(fp)
100006b4:	1884703a 	and	r2,r3,r2
100006b8:	10bfffcc 	andi	r2,r2,65535
100006bc:	10000126 	beq	r2,zero,100006c4 <main+0x390>
					goto USB_HOT_PLUG;
100006c0:	003f2a06 	br	1000036c <__alt_data_end+0xf800036c>

				usleep(2000);
100006c4:	0101f404 	movi	r4,2000
100006c8:	0010b580 	call	10010b58 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
100006cc:	d0a6cb8b 	ldhu	r2,-25810(gp)
100006d0:	e0f94d0b 	ldhu	r3,-6860(fp)
100006d4:	1884703a 	and	r2,r3,r2
100006d8:	10bfffcc 	andi	r2,r2,65535
100006dc:	103fee26 	beq	r2,zero,10000698 <__alt_data_end+0xf8000698>
100006e0:	00000c06 	br	10000714 <main+0x3e0>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
100006e4:	e0f94d0b 	ldhu	r3,-6860(fp)
100006e8:	e0b9590b 	ldhu	r2,-6812(fp)
100006ec:	1884703a 	and	r2,r3,r2
100006f0:	10bfffcc 	andi	r2,r2,65535
100006f4:	10000426 	beq	r2,zero,10000708 <main+0x3d4>
		{
			printf("[INFO]: full speed device\n");
100006f8:	01040074 	movhi	r4,4097
100006fc:	210ae904 	addi	r4,r4,11172
10000700:	00045ec0 	call	100045ec <puts>
10000704:	00000306 	br	10000714 <main+0x3e0>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10000708:	01040074 	movhi	r4,4097
1000070c:	210af004 	addi	r4,r4,11200
10000710:	00045ec0 	call	100045ec <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10000714:	0001f580 	call	10001f58 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000718:	00000306 	br	10000728 <main+0x3f4>
	{
		UsbSetAddress();
1000071c:	0001f580 	call	10001f58 <UsbSetAddress>
		usleep(10*1000);
10000720:	0109c404 	movi	r4,10000
10000724:	0010b580 	call	10010b58 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000728:	010000c4 	movi	r4,3
1000072c:	00002c00 	call	100002c0 <IO_read>
10000730:	10bfffcc 	andi	r2,r2,65535
10000734:	1080040c 	andi	r2,r2,16
10000738:	103ff826 	beq	r2,zero,1000071c <__alt_data_end+0xf800071c>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000073c:	0002dd40 	call	10002dd4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
10000740:	01000084 	movi	r4,2
10000744:	01414184 	movi	r5,1286
10000748:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000074c:	0009883a 	mov	r4,zero
10000750:	00002c00 	call	100002c0 <IO_read>
10000754:	10bfffcc 	andi	r2,r2,65535
10000758:	01040074 	movhi	r4,4097
1000075c:	210af704 	addi	r4,r4,11228
10000760:	100b883a 	mov	r5,r2
10000764:	00044f80 	call	100044f8 <printf>

	IO_write(HPI_ADDR,0x0508); // n
10000768:	01000084 	movi	r4,2
1000076c:	01414204 	movi	r5,1288
10000770:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000774:	0009883a 	mov	r4,zero
10000778:	00002c00 	call	100002c0 <IO_read>
1000077c:	e0b94d0d 	sth	r2,-6860(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10000780:	e0b94d0b 	ldhu	r2,-6860(fp)
10000784:	01040074 	movhi	r4,4097
10000788:	210b0204 	addi	r4,r4,11272
1000078c:	100b883a 	mov	r5,r2
10000790:	00044f80 	call	100044f8 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10000794:	e0b94d0b 	ldhu	r2,-6860(fp)
10000798:	108000e0 	cmpeqi	r2,r2,3
1000079c:	1000031e 	bne	r2,zero,100007ac <main+0x478>
	{
		usb_ctl_val = UsbGetRetryCnt();
100007a0:	0002e580 	call	10002e58 <UsbGetRetryCnt>
100007a4:	e0b94d0d 	sth	r2,-6860(fp)

		goto USB_HOT_PLUG;
100007a8:	003ef006 	br	1000036c <__alt_data_end+0xf800036c>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
100007ac:	01040074 	movhi	r4,4097
100007b0:	210b0e04 	addi	r4,r4,11320
100007b4:	00045ec0 	call	100045ec <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
100007b8:	00020540 	call	10002054 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007bc:	00000306 	br	100007cc <main+0x498>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
100007c0:	00020540 	call	10002054 <UsbGetDeviceDesc1>
		usleep(10*1000);
100007c4:	0109c404 	movi	r4,10000
100007c8:	0010b580 	call	10010b58 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007cc:	010000c4 	movi	r4,3
100007d0:	00002c00 	call	100002c0 <IO_read>
100007d4:	10bfffcc 	andi	r2,r2,65535
100007d8:	1080040c 	andi	r2,r2,16
100007dc:	103ff826 	beq	r2,zero,100007c0 <__alt_data_end+0xf80007c0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100007e0:	0002dd40 	call	10002dd4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100007e4:	01000084 	movi	r4,2
100007e8:	01414184 	movi	r5,1286
100007ec:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
100007f0:	0009883a 	mov	r4,zero
100007f4:	00002c00 	call	100002c0 <IO_read>
100007f8:	10bfffcc 	andi	r2,r2,65535
100007fc:	01040074 	movhi	r4,4097
10000800:	210b1d04 	addi	r4,r4,11380
10000804:	100b883a 	mov	r5,r2
10000808:	00044f80 	call	100044f8 <printf>

	IO_write(HPI_ADDR,0x0508);
1000080c:	01000084 	movi	r4,2
10000810:	01414204 	movi	r5,1288
10000814:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000818:	0009883a 	mov	r4,zero
1000081c:	00002c00 	call	100002c0 <IO_read>
10000820:	e0b94d0d 	sth	r2,-6860(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000824:	e0b94d0b 	ldhu	r2,-6860(fp)
10000828:	01040074 	movhi	r4,4097
1000082c:	210b2804 	addi	r4,r4,11424
10000830:	100b883a 	mov	r5,r2
10000834:	00044f80 	call	100044f8 <printf>
	while (usb_ctl_val != 0x03)
10000838:	00000206 	br	10000844 <main+0x510>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000083c:	0002e580 	call	10002e58 <UsbGetRetryCnt>
10000840:	e0b94d0d 	sth	r2,-6860(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000844:	e0b94d0b 	ldhu	r2,-6860(fp)
10000848:	108000d8 	cmpnei	r2,r2,3
1000084c:	103ffb1e 	bne	r2,zero,1000083c <__alt_data_end+0xf800083c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10000850:	01040074 	movhi	r4,4097
10000854:	210b3404 	addi	r4,r4,11472
10000858:	00045ec0 	call	100045ec <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
1000085c:	00021980 	call	10002198 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000860:	00000306 	br	10000870 <main+0x53c>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10000864:	00021980 	call	10002198 <UsbGetDeviceDesc2>
		usleep(10*1000);
10000868:	0109c404 	movi	r4,10000
1000086c:	0010b580 	call	10010b58 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000870:	010000c4 	movi	r4,3
10000874:	00002c00 	call	100002c0 <IO_read>
10000878:	10bfffcc 	andi	r2,r2,65535
1000087c:	1080040c 	andi	r2,r2,16
10000880:	103ff826 	beq	r2,zero,10000864 <__alt_data_end+0xf8000864>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000884:	0002dd40 	call	10002dd4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000888:	01000084 	movi	r4,2
1000088c:	01414184 	movi	r5,1286
10000890:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000894:	0009883a 	mov	r4,zero
10000898:	00002c00 	call	100002c0 <IO_read>
1000089c:	10bfffcc 	andi	r2,r2,65535
100008a0:	01040074 	movhi	r4,4097
100008a4:	210b1d04 	addi	r4,r4,11380
100008a8:	100b883a 	mov	r5,r2
100008ac:	00044f80 	call	100044f8 <printf>

	IO_write(HPI_ADDR,0x0508);
100008b0:	01000084 	movi	r4,2
100008b4:	01414204 	movi	r5,1288
100008b8:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100008bc:	0009883a 	mov	r4,zero
100008c0:	00002c00 	call	100002c0 <IO_read>
100008c4:	e0b94d0d 	sth	r2,-6860(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100008c8:	e0b94d0b 	ldhu	r2,-6860(fp)
100008cc:	01040074 	movhi	r4,4097
100008d0:	210b2804 	addi	r4,r4,11424
100008d4:	100b883a 	mov	r5,r2
100008d8:	00044f80 	call	100044f8 <printf>
	while (usb_ctl_val != 0x03)
100008dc:	00000206 	br	100008e8 <main+0x5b4>
	{
		usb_ctl_val = UsbGetRetryCnt();
100008e0:	0002e580 	call	10002e58 <UsbGetRetryCnt>
100008e4:	e0b94d0d 	sth	r2,-6860(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100008e8:	e0b94d0b 	ldhu	r2,-6860(fp)
100008ec:	108000d8 	cmpnei	r2,r2,3
100008f0:	103ffb1e 	bne	r2,zero,100008e0 <__alt_data_end+0xf80008e0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
100008f4:	01040074 	movhi	r4,4097
100008f8:	210b4804 	addi	r4,r4,11552
100008fc:	00045ec0 	call	100045ec <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
10000900:	000236c0 	call	1000236c <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000904:	00000306 	br	10000914 <main+0x5e0>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
10000908:	000236c0 	call	1000236c <UsbGetConfigDesc1>
		usleep(10*1000);
1000090c:	0109c404 	movi	r4,10000
10000910:	0010b580 	call	10010b58 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000914:	010000c4 	movi	r4,3
10000918:	00002c00 	call	100002c0 <IO_read>
1000091c:	10bfffcc 	andi	r2,r2,65535
10000920:	1080040c 	andi	r2,r2,16
10000924:	103ff826 	beq	r2,zero,10000908 <__alt_data_end+0xf8000908>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000928:	0002dd40 	call	10002dd4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000092c:	01000084 	movi	r4,2
10000930:	01414184 	movi	r5,1286
10000934:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000938:	0009883a 	mov	r4,zero
1000093c:	00002c00 	call	100002c0 <IO_read>
10000940:	10bfffcc 	andi	r2,r2,65535
10000944:	01040074 	movhi	r4,4097
10000948:	210b5a04 	addi	r4,r4,11624
1000094c:	100b883a 	mov	r5,r2
10000950:	00044f80 	call	100044f8 <printf>

	IO_write(HPI_ADDR,0x0508);
10000954:	01000084 	movi	r4,2
10000958:	01414204 	movi	r5,1288
1000095c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000960:	0009883a 	mov	r4,zero
10000964:	00002c00 	call	100002c0 <IO_read>
10000968:	e0b94d0d 	sth	r2,-6860(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
1000096c:	e0b94d0b 	ldhu	r2,-6860(fp)
10000970:	01040074 	movhi	r4,4097
10000974:	210b6504 	addi	r4,r4,11668
10000978:	100b883a 	mov	r5,r2
1000097c:	00044f80 	call	100044f8 <printf>
	while (usb_ctl_val != 0x03)
10000980:	00000206 	br	1000098c <main+0x658>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000984:	0002e580 	call	10002e58 <UsbGetRetryCnt>
10000988:	e0b94d0d 	sth	r2,-6860(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
1000098c:	e0b94d0b 	ldhu	r2,-6860(fp)
10000990:	108000d8 	cmpnei	r2,r2,3
10000994:	103ffb1e 	bne	r2,zero,10000984 <__alt_data_end+0xf8000984>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10000998:	01040074 	movhi	r4,4097
1000099c:	210b7104 	addi	r4,r4,11716
100009a0:	00045ec0 	call	100045ec <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
100009a4:	00024f80 	call	100024f8 <UsbGetConfigDesc2>

	usleep(100*1000);
100009a8:	010000b4 	movhi	r4,2
100009ac:	2121a804 	addi	r4,r4,-31072
100009b0:	0010b580 	call	10010b58 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009b4:	00000306 	br	100009c4 <main+0x690>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
100009b8:	00024f80 	call	100024f8 <UsbGetConfigDesc2>
		usleep(10*1000);
100009bc:	0109c404 	movi	r4,10000
100009c0:	0010b580 	call	10010b58 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009c4:	010000c4 	movi	r4,3
100009c8:	00002c00 	call	100002c0 <IO_read>
100009cc:	10bfffcc 	andi	r2,r2,65535
100009d0:	1080040c 	andi	r2,r2,16
100009d4:	103ff826 	beq	r2,zero,100009b8 <__alt_data_end+0xf80009b8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100009d8:	0002dd40 	call	10002dd4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100009dc:	01000084 	movi	r4,2
100009e0:	01414184 	movi	r5,1286
100009e4:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
100009e8:	0009883a 	mov	r4,zero
100009ec:	00002c00 	call	100002c0 <IO_read>
100009f0:	10bfffcc 	andi	r2,r2,65535
100009f4:	01040074 	movhi	r4,4097
100009f8:	210b8404 	addi	r4,r4,11792
100009fc:	100b883a 	mov	r5,r2
10000a00:	00044f80 	call	100044f8 <printf>

	IO_write(HPI_ADDR,0x0508);
10000a04:	01000084 	movi	r4,2
10000a08:	01414204 	movi	r5,1288
10000a0c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000a10:	0009883a 	mov	r4,zero
10000a14:	00002c00 	call	100002c0 <IO_read>
10000a18:	e0b94d0d 	sth	r2,-6860(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10000a1c:	e0b94d0b 	ldhu	r2,-6860(fp)
10000a20:	01040074 	movhi	r4,4097
10000a24:	210b8f04 	addi	r4,r4,11836
10000a28:	100b883a 	mov	r5,r2
10000a2c:	00044f80 	call	100044f8 <printf>
	while (usb_ctl_val != 0x03)
10000a30:	00000206 	br	10000a3c <main+0x708>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000a34:	0002e580 	call	10002e58 <UsbGetRetryCnt>
10000a38:	e0b94d0d 	sth	r2,-6860(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000a3c:	e0b94d0b 	ldhu	r2,-6860(fp)
10000a40:	108000d8 	cmpnei	r2,r2,3
10000a44:	103ffb1e 	bne	r2,zero,10000a34 <__alt_data_end+0xf8000a34>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000a48:	01040074 	movhi	r4,4097
10000a4c:	210b9b04 	addi	r4,r4,11884
10000a50:	00045ec0 	call	100045ec <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000a54:	01000084 	movi	r4,2
10000a58:	01415b04 	movi	r5,1388
10000a5c:	00002480 	call	10000248 <IO_write>
	code = IO_read(HPI_DATA);
10000a60:	0009883a 	mov	r4,zero
10000a64:	00002c00 	call	100002c0 <IO_read>
10000a68:	e0b95b8d 	sth	r2,-6802(fp)
	code = code & 0x003;
10000a6c:	e0b95b8b 	ldhu	r2,-6802(fp)
10000a70:	108000cc 	andi	r2,r2,3
10000a74:	e0b95b8d 	sth	r2,-6802(fp)
	printf("\ncode = %x\n", code);
10000a78:	e0b95b8b 	ldhu	r2,-6802(fp)
10000a7c:	01040074 	movhi	r4,4097
10000a80:	210bae04 	addi	r4,r4,11960
10000a84:	100b883a 	mov	r5,r2
10000a88:	00044f80 	call	100044f8 <printf>

	if (code == 0x01)
10000a8c:	e0b95b8b 	ldhu	r2,-6802(fp)
10000a90:	10800058 	cmpnei	r2,r2,1
10000a94:	1000041e 	bne	r2,zero,10000aa8 <main+0x774>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000a98:	01040074 	movhi	r4,4097
10000a9c:	210bb104 	addi	r4,r4,11972
10000aa0:	00045ec0 	call	100045ec <puts>
10000aa4:	00000306 	br	10000ab4 <main+0x780>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000aa8:	01040074 	movhi	r4,4097
10000aac:	210bc004 	addi	r4,r4,12032
10000ab0:	00045ec0 	call	100045ec <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000ab4:	01000084 	movi	r4,2
10000ab8:	01415d84 	movi	r5,1398
10000abc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x073F);
10000ac0:	0009883a 	mov	r4,zero
10000ac4:	0141cfc4 	movi	r5,1855
10000ac8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x8105);
10000acc:	0009883a 	mov	r4,zero
10000ad0:	01604154 	movui	r5,33029
10000ad4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0003);
10000ad8:	0009883a 	mov	r4,zero
10000adc:	014000c4 	movi	r5,3
10000ae0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);
10000ae4:	0009883a 	mov	r4,zero
10000ae8:	01400204 	movi	r5,8
10000aec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10000af0:	0009883a 	mov	r4,zero
10000af4:	016b0294 	movui	r5,44042
10000af8:	00002480 	call	10000248 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000afc:	01006c04 	movi	r4,432
10000b00:	01415d84 	movi	r5,1398
10000b04:	0001e100 	call	10001e10 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000b08:	01000084 	movi	r4,2
10000b0c:	01415f04 	movi	r5,1404
10000b10:	00002480 	call	10000248 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000b14:	0009883a 	mov	r4,zero
10000b18:	00002c00 	call	100002c0 <IO_read>
10000b1c:	e0b95c05 	stb	r2,-6800(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000b20:	e0b95c03 	ldbu	r2,-6800(fp)
10000b24:	01040074 	movhi	r4,4097
10000b28:	210bc904 	addi	r4,r4,12068
10000b2c:	100b883a 	mov	r5,r2
10000b30:	00044f80 	call	100044f8 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000b34:	000275c0 	call	1000275c <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b38:	00000306 	br	10000b48 <main+0x814>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000b3c:	000275c0 	call	1000275c <UsbSetConfig>
		usleep(10*1000);
10000b40:	0109c404 	movi	r4,10000
10000b44:	0010b580 	call	10010b58 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b48:	010000c4 	movi	r4,3
10000b4c:	00002c00 	call	100002c0 <IO_read>
10000b50:	10bfffcc 	andi	r2,r2,65535
10000b54:	1080040c 	andi	r2,r2,16
10000b58:	103ff826 	beq	r2,zero,10000b3c <__alt_data_end+0xf8000b3c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000b5c:	0002dd40 	call	10002dd4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000b60:	01000084 	movi	r4,2
10000b64:	01414184 	movi	r5,1286
10000b68:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000b6c:	0009883a 	mov	r4,zero
10000b70:	00002c00 	call	100002c0 <IO_read>
10000b74:	10bfffcc 	andi	r2,r2,65535
10000b78:	01040074 	movhi	r4,4097
10000b7c:	210bd304 	addi	r4,r4,12108
10000b80:	100b883a 	mov	r5,r2
10000b84:	00044f80 	call	100044f8 <printf>

	IO_write(HPI_ADDR,0x0508);
10000b88:	01000084 	movi	r4,2
10000b8c:	01414204 	movi	r5,1288
10000b90:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000b94:	0009883a 	mov	r4,zero
10000b98:	00002c00 	call	100002c0 <IO_read>
10000b9c:	e0b94d0d 	sth	r2,-6860(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000ba0:	e0b94d0b 	ldhu	r2,-6860(fp)
10000ba4:	01040074 	movhi	r4,4097
10000ba8:	210bde04 	addi	r4,r4,12152
10000bac:	100b883a 	mov	r5,r2
10000bb0:	00044f80 	call	100044f8 <printf>
	while (usb_ctl_val != 0x03)
10000bb4:	00000206 	br	10000bc0 <main+0x88c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000bb8:	0002e580 	call	10002e58 <UsbGetRetryCnt>
10000bbc:	e0b94d0d 	sth	r2,-6860(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000bc0:	e0b94d0b 	ldhu	r2,-6860(fp)
10000bc4:	108000d8 	cmpnei	r2,r2,3
10000bc8:	103ffb1e 	bne	r2,zero,10000bb8 <__alt_data_end+0xf8000bb8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000bcc:	01040074 	movhi	r4,4097
10000bd0:	210bea04 	addi	r4,r4,12200
10000bd4:	00045ec0 	call	100045ec <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000bd8:	00028580 	call	10002858 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bdc:	00000306 	br	10000bec <main+0x8b8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000be0:	00028580 	call	10002858 <UsbClassRequest>
		usleep(10*1000);
10000be4:	0109c404 	movi	r4,10000
10000be8:	0010b580 	call	10010b58 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bec:	010000c4 	movi	r4,3
10000bf0:	00002c00 	call	100002c0 <IO_read>
10000bf4:	10bfffcc 	andi	r2,r2,65535
10000bf8:	1080040c 	andi	r2,r2,16
10000bfc:	103ff826 	beq	r2,zero,10000be0 <__alt_data_end+0xf8000be0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000c00:	0002dd40 	call	10002dd4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000c04:	01000084 	movi	r4,2
10000c08:	01414184 	movi	r5,1286
10000c0c:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000c10:	0009883a 	mov	r4,zero
10000c14:	00002c00 	call	100002c0 <IO_read>
10000c18:	10bfffcc 	andi	r2,r2,65535
10000c1c:	01040074 	movhi	r4,4097
10000c20:	210bfc04 	addi	r4,r4,12272
10000c24:	100b883a 	mov	r5,r2
10000c28:	00044f80 	call	100044f8 <printf>

	IO_write(HPI_ADDR,0x0508);
10000c2c:	01000084 	movi	r4,2
10000c30:	01414204 	movi	r5,1288
10000c34:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000c38:	0009883a 	mov	r4,zero
10000c3c:	00002c00 	call	100002c0 <IO_read>
10000c40:	e0b94d0d 	sth	r2,-6860(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000c44:	e0b94d0b 	ldhu	r2,-6860(fp)
10000c48:	01040074 	movhi	r4,4097
10000c4c:	210c0704 	addi	r4,r4,12316
10000c50:	100b883a 	mov	r5,r2
10000c54:	00044f80 	call	100044f8 <printf>
	while (usb_ctl_val != 0x03)
10000c58:	00000206 	br	10000c64 <main+0x930>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000c5c:	0002e580 	call	10002e58 <UsbGetRetryCnt>
10000c60:	e0b94d0d 	sth	r2,-6860(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000c64:	e0b94d0b 	ldhu	r2,-6860(fp)
10000c68:	108000d8 	cmpnei	r2,r2,3
10000c6c:	103ffb1e 	bne	r2,zero,10000c5c <__alt_data_end+0xf8000c5c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000c70:	01040074 	movhi	r4,4097
10000c74:	210c1304 	addi	r4,r4,12364
10000c78:	00045ec0 	call	100045ec <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10000c7c:	00029540 	call	10002954 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c80:	00000306 	br	10000c90 <main+0x95c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10000c84:	00029540 	call	10002954 <UsbGetHidDesc>
		usleep(10*1000);
10000c88:	0109c404 	movi	r4,10000
10000c8c:	0010b580 	call	10010b58 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c90:	010000c4 	movi	r4,3
10000c94:	00002c00 	call	100002c0 <IO_read>
10000c98:	10bfffcc 	andi	r2,r2,65535
10000c9c:	1080040c 	andi	r2,r2,16
10000ca0:	103ff826 	beq	r2,zero,10000c84 <__alt_data_end+0xf8000c84>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000ca4:	0002dd40 	call	10002dd4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000ca8:	01000084 	movi	r4,2
10000cac:	01414184 	movi	r5,1286
10000cb0:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000cb4:	0009883a 	mov	r4,zero
10000cb8:	00002c00 	call	100002c0 <IO_read>
10000cbc:	10bfffcc 	andi	r2,r2,65535
10000cc0:	01040074 	movhi	r4,4097
10000cc4:	210bfc04 	addi	r4,r4,12272
10000cc8:	100b883a 	mov	r5,r2
10000ccc:	00044f80 	call	100044f8 <printf>

	IO_write(HPI_ADDR,0x0508);
10000cd0:	01000084 	movi	r4,2
10000cd4:	01414204 	movi	r5,1288
10000cd8:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000cdc:	0009883a 	mov	r4,zero
10000ce0:	00002c00 	call	100002c0 <IO_read>
10000ce4:	e0b94d0d 	sth	r2,-6860(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000ce8:	e0b94d0b 	ldhu	r2,-6860(fp)
10000cec:	01040074 	movhi	r4,4097
10000cf0:	210c0704 	addi	r4,r4,12316
10000cf4:	100b883a 	mov	r5,r2
10000cf8:	00044f80 	call	100044f8 <printf>
	while (usb_ctl_val != 0x03)
10000cfc:	00000206 	br	10000d08 <main+0x9d4>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d00:	0002e580 	call	10002e58 <UsbGetRetryCnt>
10000d04:	e0b94d0d 	sth	r2,-6860(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000d08:	e0b94d0b 	ldhu	r2,-6860(fp)
10000d0c:	108000d8 	cmpnei	r2,r2,3
10000d10:	103ffb1e 	bne	r2,zero,10000d00 <__alt_data_end+0xf8000d00>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10000d14:	01040074 	movhi	r4,4097
10000d18:	210c2504 	addi	r4,r4,12436
10000d1c:	00045ec0 	call	100045ec <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10000d20:	0002a980 	call	10002a98 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d24:	00000306 	br	10000d34 <main+0xa00>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10000d28:	0002a980 	call	10002a98 <UsbGetReportDesc>
		usleep(10*1000);
10000d2c:	0109c404 	movi	r4,10000
10000d30:	0010b580 	call	10010b58 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d34:	010000c4 	movi	r4,3
10000d38:	00002c00 	call	100002c0 <IO_read>
10000d3c:	10bfffcc 	andi	r2,r2,65535
10000d40:	1080040c 	andi	r2,r2,16
10000d44:	103ff826 	beq	r2,zero,10000d28 <__alt_data_end+0xf8000d28>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000d48:	0002dd40 	call	10002dd4 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000d4c:	01000084 	movi	r4,2
10000d50:	01414184 	movi	r5,1286
10000d54:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d58:	0009883a 	mov	r4,zero
10000d5c:	00002c00 	call	100002c0 <IO_read>
10000d60:	10bfffcc 	andi	r2,r2,65535
10000d64:	01040074 	movhi	r4,4097
10000d68:	210c3904 	addi	r4,r4,12516
10000d6c:	100b883a 	mov	r5,r2
10000d70:	00044f80 	call	100044f8 <printf>

	IO_write(HPI_ADDR,0x0508);
10000d74:	01000084 	movi	r4,2
10000d78:	01414204 	movi	r5,1288
10000d7c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000d80:	0009883a 	mov	r4,zero
10000d84:	00002c00 	call	100002c0 <IO_read>
10000d88:	e0b94d0d 	sth	r2,-6860(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10000d8c:	e0b94d0b 	ldhu	r2,-6860(fp)
10000d90:	01040074 	movhi	r4,4097
10000d94:	210c4504 	addi	r4,r4,12564
10000d98:	100b883a 	mov	r5,r2
10000d9c:	00044f80 	call	100044f8 <printf>
	while (usb_ctl_val != 0x03)
10000da0:	00000206 	br	10000dac <main+0xa78>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000da4:	0002e580 	call	10002e58 <UsbGetRetryCnt>
10000da8:	e0b94d0d 	sth	r2,-6860(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000dac:	e0b94d0b 	ldhu	r2,-6860(fp)
10000db0:	108000d8 	cmpnei	r2,r2,3
10000db4:	103ffb1e 	bne	r2,zero,10000da4 <__alt_data_end+0xf8000da4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10000db8:	01040074 	movhi	r4,4097
10000dbc:	210c5104 	addi	r4,r4,12612
10000dc0:	00045ec0 	call	100045ec <puts>
	 *
	 *
	 *
	 *
	 */
	int scene[5][16][21] = 	{
10000dc4:	00840074 	movhi	r2,4097
10000dc8:	108c7e04 	addi	r2,r2,12792
10000dcc:	e0f96d04 	addi	r3,fp,-6732
10000dd0:	100b883a 	mov	r5,r2
10000dd4:	00869004 	movi	r2,6720
10000dd8:	1809883a 	mov	r4,r3
10000ddc:	100d883a 	mov	r6,r2
10000de0:	00043940 	call	10004394 <memcpy>
							{3,3,3,3,3,3,3,1,1,1,3,3,0,0,0,0,0,0,0,0,1,1},
							{3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
							}
							};

	usleep(10000);
10000de4:	0109c404 	movi	r4,10000
10000de8:	0010b580 	call	10010b58 <usleep>
	*SAMUS_EN = 1;
10000dec:	00809c04 	movi	r2,624
10000df0:	00c00044 	movi	r3,1
10000df4:	10c00005 	stb	r3,0(r2)
	*SAMUS_X = 150;
10000df8:	00809804 	movi	r2,608
10000dfc:	00c02584 	movi	r3,150
10000e00:	10c00015 	stw	r3,0(r2)
	*SAMUS_Y = 400;
10000e04:	00809404 	movi	r2,592
10000e08:	00c06404 	movi	r3,400
10000e0c:	10c00015 	stw	r3,0(r2)
	int SAMUS_BOT = 70;
10000e10:	00801184 	movi	r2,70
10000e14:	e0b95d15 	stw	r2,-6796(fp)
	int SAMUS_RIGHT = 35;
10000e18:	008008c4 	movi	r2,35
10000e1c:	e0b95e15 	stw	r2,-6792(fp)
	int y_inc = 0;
10000e20:	e0394e15 	stw	zero,-6856(fp)
	float y_inc_inc = 0;
10000e24:	e0394f15 	stw	zero,-6852(fp)
	int grounded = False;
10000e28:	e0395015 	stw	zero,-6848(fp)
	int bulinc = 12;
10000e2c:	00800304 	movi	r2,12
10000e30:	e0b95f15 	stw	r2,-6788(fp)
	int bul1Left = 0;
10000e34:	e0395115 	stw	zero,-6844(fp)
	int bul1start = 0;
10000e38:	e0395215 	stw	zero,-6840(fp)
	int bul2Left = 0;
10000e3c:	e0395315 	stw	zero,-6836(fp)
	int bul2start = 0;
10000e40:	e0395415 	stw	zero,-6832(fp)
	int bul3Left = 0;
10000e44:	e0395515 	stw	zero,-6828(fp)
	int bul3start = 0;
10000e48:	e0395615 	stw	zero,-6824(fp)
	int bullet_en = True;
10000e4c:	00800044 	movi	r2,1
10000e50:	e0b95715 	stw	r2,-6820(fp)
	int sceneNum = 3;
10000e54:	008000c4 	movi	r2,3
10000e58:	e0b96015 	stw	r2,-6784(fp)
	int sceneStart = True;
10000e5c:	00800044 	movi	r2,1
10000e60:	e0b95815 	stw	r2,-6816(fp)
	int scenVictory = False;
10000e64:	e0396115 	stw	zero,-6780(fp)
	int finalVictory = False;
10000e68:	e0396215 	stw	zero,-6776(fp)
	int scene0_x = 0;
10000e6c:	e0396315 	stw	zero,-6772(fp)
	int scene0_y = 0;
10000e70:	e0396415 	stw	zero,-6768(fp)
	int scene1_x = 0;
10000e74:	e0396515 	stw	zero,-6764(fp)
	int scene1_y = 0;
10000e78:	e0396615 	stw	zero,-6760(fp)
	int scene2_x = 0;
10000e7c:	e0396715 	stw	zero,-6756(fp)
	int scene2_y = 0;
10000e80:	e0396815 	stw	zero,-6752(fp)
	int scene3_x = 10;
10000e84:	00800284 	movi	r2,10
10000e88:	e0b96915 	stw	r2,-6748(fp)
	int scene3_y = 110;
10000e8c:	00801b84 	movi	r2,110
10000e90:	e0b96a15 	stw	r2,-6744(fp)
	int scene4_x = 0;
10000e94:	e0396b15 	stw	zero,-6740(fp)
	int scene4_y = 0;
10000e98:	e0396c15 	stw	zero,-6736(fp)
	while(1)
	{
		toggle++;
10000e9c:	e0b94d83 	ldbu	r2,-6858(fp)
10000ea0:	10800044 	addi	r2,r2,1
10000ea4:	e0b94d85 	stb	r2,-6858(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10000ea8:	01000084 	movi	r4,2
10000eac:	01414004 	movi	r5,1280
10000eb0:	00002480 	call	10000248 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10000eb4:	0009883a 	mov	r4,zero
10000eb8:	01414704 	movi	r5,1308
10000ebc:	00002480 	call	10000248 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000ec0:	e0b95c03 	ldbu	r2,-6800(fp)
10000ec4:	108003cc 	andi	r2,r2,15
10000ec8:	0009883a 	mov	r4,zero
10000ecc:	100b883a 	mov	r5,r2
10000ed0:	00002480 	call	10000248 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000ed4:	0009883a 	mov	r4,zero
10000ed8:	0140a444 	movi	r5,657
10000edc:	00002480 	call	10000248 <IO_write>
		if(toggle%2)
10000ee0:	e0b94d83 	ldbu	r2,-6858(fp)
10000ee4:	1080004c 	andi	r2,r2,1
10000ee8:	10803fcc 	andi	r2,r2,255
10000eec:	10000426 	beq	r2,zero,10000f00 <main+0xbcc>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10000ef0:	0009883a 	mov	r4,zero
10000ef4:	01400044 	movi	r5,1
10000ef8:	00002480 	call	10000248 <IO_write>
10000efc:	00000306 	br	10000f0c <main+0xbd8>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10000f00:	0009883a 	mov	r4,zero
10000f04:	01401044 	movi	r5,65
10000f08:	00002480 	call	10000248 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10000f0c:	0009883a 	mov	r4,zero
10000f10:	014004c4 	movi	r5,19
10000f14:	00002480 	call	10000248 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
10000f18:	0009883a 	mov	r4,zero
10000f1c:	000b883a 	mov	r5,zero
10000f20:	00002480 	call	10000248 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000f24:	01006c04 	movi	r4,432
10000f28:	01414004 	movi	r5,1280
10000f2c:	0001e100 	call	10001e10 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000f30:	00002406 	br	10000fc4 <main+0xc90>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10000f34:	01000084 	movi	r4,2
10000f38:	01414004 	movi	r5,1280
10000f3c:	00002480 	call	10000248 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
10000f40:	0009883a 	mov	r4,zero
10000f44:	01414704 	movi	r5,1308
10000f48:	00002480 	call	10000248 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000f4c:	e0b95c03 	ldbu	r2,-6800(fp)
10000f50:	108003cc 	andi	r2,r2,15
10000f54:	0009883a 	mov	r4,zero
10000f58:	100b883a 	mov	r5,r2
10000f5c:	00002480 	call	10000248 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000f60:	0009883a 	mov	r4,zero
10000f64:	0140a444 	movi	r5,657
10000f68:	00002480 	call	10000248 <IO_write>
			if(toggle%2)
10000f6c:	e0b94d83 	ldbu	r2,-6858(fp)
10000f70:	1080004c 	andi	r2,r2,1
10000f74:	10803fcc 	andi	r2,r2,255
10000f78:	10000426 	beq	r2,zero,10000f8c <main+0xc58>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10000f7c:	0009883a 	mov	r4,zero
10000f80:	01400044 	movi	r5,1
10000f84:	00002480 	call	10000248 <IO_write>
10000f88:	00000306 	br	10000f98 <main+0xc64>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10000f8c:	0009883a 	mov	r4,zero
10000f90:	01401044 	movi	r5,65
10000f94:	00002480 	call	10000248 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10000f98:	0009883a 	mov	r4,zero
10000f9c:	014004c4 	movi	r5,19
10000fa0:	00002480 	call	10000248 <IO_write>
			IO_write(HPI_DATA,0x0000);//
10000fa4:	0009883a 	mov	r4,zero
10000fa8:	000b883a 	mov	r5,zero
10000fac:	00002480 	call	10000248 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000fb0:	01006c04 	movi	r4,432
10000fb4:	01414004 	movi	r5,1280
10000fb8:	0001e100 	call	10001e10 <UsbWrite>
			usleep(10*1000);
10000fbc:	0109c404 	movi	r4,10000
10000fc0:	0010b580 	call	10010b58 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000fc4:	010000c4 	movi	r4,3
10000fc8:	00002c00 	call	100002c0 <IO_read>
10000fcc:	10bfffcc 	andi	r2,r2,65535
10000fd0:	1080040c 	andi	r2,r2,16
10000fd4:	103fd726 	beq	r2,zero,10000f34 <__alt_data_end+0xf8000f34>
			usleep(10*1000);
		}//end while



		usb_ctl_val = UsbWaitTDListDone();
10000fd8:	0002dd40 	call	10002dd4 <UsbWaitTDListDone>
10000fdc:	e0b94d0d 	sth	r2,-6860(fp)

		// packet starts from 0x051c, reading third byte
		// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
		IO_write(HPI_ADDR,0x051e); //the start address
10000fe0:	01000084 	movi	r4,2
10000fe4:	01414784 	movi	r5,1310
10000fe8:	00002480 	call	10000248 <IO_write>
		keycode = IO_read(HPI_DATA);
10000fec:	0009883a 	mov	r4,zero
10000ff0:	00002c00 	call	100002c0 <IO_read>
10000ff4:	10bfffcc 	andi	r2,r2,65535
10000ff8:	e0b95a15 	stw	r2,-6808(fp)
		printf("\nkeycode value is %x\n",keycode);
10000ffc:	01040074 	movhi	r4,4097
10001000:	210c6504 	addi	r4,r4,12692
10001004:	e1795a17 	ldw	r5,-6808(fp)
10001008:	00044f80 	call	100044f8 <printf>
		IOWR(KEYCODE_BASE, 0, keycode & 0xff);
1000100c:	e0b95a17 	ldw	r2,-6808(fp)
10001010:	10c03fcc 	andi	r3,r2,255
10001014:	0080a404 	movi	r2,656
10001018:	10c00035 	stwio	r3,0(r2)


		usleep(200);//usleep(5000);
1000101c:	01003204 	movi	r4,200
10001020:	0010b580 	call	10010b58 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10001024:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001028:	10bfffcc 	andi	r2,r2,65535
1000102c:	1009883a 	mov	r4,r2
10001030:	0001e640 	call	10001e64 <UsbRead>
10001034:	e0b94d0d 	sth	r2,-6860(fp)

		if(!(usb_ctl_val & no_device))
10001038:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000103c:	e0f94d0b 	ldhu	r3,-6860(fp)
10001040:	1884703a 	and	r2,r3,r2
10001044:	10bfffcc 	andi	r2,r2,65535
10001048:	1000201e 	bne	r2,zero,100010cc <main+0xd98>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
1000104c:	e0394dc5 	stb	zero,-6857(fp)
10001050:	00001006 	br	10001094 <main+0xd60>
			{
				usleep(5*1000);
10001054:	0104e204 	movi	r4,5000
10001058:	0010b580 	call	10010b58 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
1000105c:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001060:	10bfffcc 	andi	r2,r2,65535
10001064:	1009883a 	mov	r4,r2
10001068:	0001e640 	call	10001e64 <UsbRead>
1000106c:	e0b94d0d 	sth	r2,-6860(fp)
				if(usb_ctl_val & no_device) break;
10001070:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001074:	e0f94d0b 	ldhu	r3,-6860(fp)
10001078:	1884703a 	and	r2,r3,r2
1000107c:	10bfffcc 	andi	r2,r2,65535
10001080:	10000126 	beq	r2,zero,10001088 <main+0xd54>
10001084:	00000606 	br	100010a0 <main+0xd6c>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10001088:	e0b94dc3 	ldbu	r2,-6857(fp)
1000108c:	10800044 	addi	r2,r2,1
10001090:	e0b94dc5 	stb	r2,-6857(fp)
10001094:	e0b94dc3 	ldbu	r2,-6857(fp)
10001098:	108001f0 	cmpltui	r2,r2,7
1000109c:	103fed1e 	bne	r2,zero,10001054 <__alt_data_end+0xf8001054>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
			}
			if(!(usb_ctl_val & no_device))
100010a0:	d0a6cb8b 	ldhu	r2,-25810(gp)
100010a4:	e0f94d0b 	ldhu	r3,-6860(fp)
100010a8:	1884703a 	and	r2,r3,r2
100010ac:	10bfffcc 	andi	r2,r2,65535
100010b0:	1000061e 	bne	r2,zero,100010cc <main+0xd98>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
100010b4:	01040074 	movhi	r4,4097
100010b8:	210c6b04 	addi	r4,r4,12716
100010bc:	00045ec0 	call	100045ec <puts>
				printf("[INFO]: please insert again!!! \n");
100010c0:	01040074 	movhi	r4,4097
100010c4:	210c7604 	addi	r4,r4,12760
100010c8:	00045ec0 	call	100045ec <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
100010cc:	00001d06 	br	10001144 <main+0xe10>
		{

			usb_ctl_val = UsbRead(ctl_reg);
100010d0:	d0a6cb0b 	ldhu	r2,-25812(gp)
100010d4:	10bfffcc 	andi	r2,r2,65535
100010d8:	1009883a 	mov	r4,r2
100010dc:	0001e640 	call	10001e64 <UsbRead>
100010e0:	e0b94d0d 	sth	r2,-6860(fp)
			usleep(5*1000);
100010e4:	0104e204 	movi	r4,5000
100010e8:	0010b580 	call	10010b58 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100010ec:	d0a6cb0b 	ldhu	r2,-25812(gp)
100010f0:	10bfffcc 	andi	r2,r2,65535
100010f4:	1009883a 	mov	r4,r2
100010f8:	0001e640 	call	10001e64 <UsbRead>
100010fc:	e0b94d0d 	sth	r2,-6860(fp)
			usleep(5*1000);
10001100:	0104e204 	movi	r4,5000
10001104:	0010b580 	call	10010b58 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001108:	d0a6cb0b 	ldhu	r2,-25812(gp)
1000110c:	10bfffcc 	andi	r2,r2,65535
10001110:	1009883a 	mov	r4,r2
10001114:	0001e640 	call	10001e64 <UsbRead>
10001118:	e0b94d0d 	sth	r2,-6860(fp)
			usleep(5*1000);
1000111c:	0104e204 	movi	r4,5000
10001120:	0010b580 	call	10010b58 <usleep>

			if(usb_ctl_val & no_device)
10001124:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001128:	e0f94d0b 	ldhu	r3,-6860(fp)
1000112c:	1884703a 	and	r2,r3,r2
10001130:	10bfffcc 	andi	r2,r2,65535
10001134:	10000126 	beq	r2,zero,1000113c <main+0xe08>
				goto USB_HOT_PLUG;
10001138:	003c8c06 	br	1000036c <__alt_data_end+0xf800036c>

			usleep(200);
1000113c:	01003204 	movi	r4,200
10001140:	0010b580 	call	10010b58 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
10001144:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001148:	e0f94d0b 	ldhu	r3,-6860(fp)
1000114c:	1884703a 	and	r2,r3,r2
10001150:	10bfffcc 	andi	r2,r2,65535
10001154:	103fde26 	beq	r2,zero,100010d0 <__alt_data_end+0xf80010d0>
#define WIN_EN (volatile int*) 0x4F

#define SCENE_SELECT (volatile int*) 0x2F
    */
	//Scene Init
	if(sceneStart == True){
10001158:	e0b95817 	ldw	r2,-6816(fp)
1000115c:	10800058 	cmpnei	r2,r2,1
10001160:	10000a1e 	bne	r2,zero,1000118c <main+0xe58>
		if(sceneNum == 3){
10001164:	e0b96017 	ldw	r2,-6784(fp)
10001168:	108000d8 	cmpnei	r2,r2,3
1000116c:	1000061e 	bne	r2,zero,10001188 <main+0xe54>
			*SAMUS_X = scene3_x;
10001170:	00809804 	movi	r2,608
10001174:	e0f96917 	ldw	r3,-6748(fp)
10001178:	10c00015 	stw	r3,0(r2)
			*SAMUS_Y = scene3_y;
1000117c:	00809404 	movi	r2,592
10001180:	e0f96a17 	ldw	r3,-6744(fp)
10001184:	10c00015 	stw	r3,0(r2)
		}
		sceneStart = False;
10001188:	e0395815 	stw	zero,-6816(fp)
	}


	*HEALTH = 3;
1000118c:	00801c04 	movi	r2,112
10001190:	00c000c4 	movi	r3,3
10001194:	10c00015 	stw	r3,0(r2)
    //SAMUS MOVEMENT
    *SCENE_SELECT = 4;
10001198:	00800804 	movi	r2,32
1000119c:	00c00104 	movi	r3,4
100011a0:	10c00015 	stw	r3,0(r2)
    *TIT_EN = 0;
100011a4:	00801804 	movi	r2,96
100011a8:	10000015 	stw	zero,0(r2)
    *SCENE_SELECT = 4;
100011ac:	00800804 	movi	r2,32
100011b0:	00c00104 	movi	r3,4
100011b4:	10c00015 	stw	r3,0(r2)
    //Move Right
    if((keycode&0x0000FF)==7 || (keycode&0x00FF00)>>8 == 7 || (keycode&0xFF0000)>>16 == 7){
100011b8:	e0b95a17 	ldw	r2,-6808(fp)
100011bc:	10803fcc 	andi	r2,r2,255
100011c0:	108001e0 	cmpeqi	r2,r2,7
100011c4:	10000a1e 	bne	r2,zero,100011f0 <main+0xebc>
100011c8:	e0b95a17 	ldw	r2,-6808(fp)
100011cc:	10bfc00c 	andi	r2,r2,65280
100011d0:	1005d23a 	srai	r2,r2,8
100011d4:	108001e0 	cmpeqi	r2,r2,7
100011d8:	1000051e 	bne	r2,zero,100011f0 <main+0xebc>
100011dc:	e0b95a17 	ldw	r2,-6808(fp)
100011e0:	10803fec 	andhi	r2,r2,255
100011e4:	1005d43a 	srai	r2,r2,16
100011e8:	108001d8 	cmpnei	r2,r2,7
100011ec:	1000881e 	bne	r2,zero,10001410 <main+0x10dc>
    	if(scene[sceneNum][(*SAMUS_Y+10)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+25)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+50)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+70)/30][(*SAMUS_X+40)/30]==0){
100011f0:	00809404 	movi	r2,592
100011f4:	10800017 	ldw	r2,0(r2)
100011f8:	10800284 	addi	r2,r2,10
100011fc:	1009883a 	mov	r4,r2
10001200:	01400784 	movi	r5,30
10001204:	0002fc00 	call	10002fc0 <__divsi3>
10001208:	1023883a 	mov	r17,r2
1000120c:	00809804 	movi	r2,608
10001210:	10800017 	ldw	r2,0(r2)
10001214:	10800a04 	addi	r2,r2,40
10001218:	1009883a 	mov	r4,r2
1000121c:	01400784 	movi	r5,30
10001220:	0002fc00 	call	10002fc0 <__divsi3>
10001224:	1021883a 	mov	r16,r2
10001228:	e4b96017 	ldw	r18,-6784(fp)
1000122c:	8809883a 	mov	r4,r17
10001230:	01400544 	movi	r5,21
10001234:	00030800 	call	10003080 <__mulsi3>
10001238:	1023883a 	mov	r17,r2
1000123c:	9009883a 	mov	r4,r18
10001240:	01405404 	movi	r5,336
10001244:	00030800 	call	10003080 <__mulsi3>
10001248:	8885883a 	add	r2,r17,r2
1000124c:	1405883a 	add	r2,r2,r16
10001250:	1085883a 	add	r2,r2,r2
10001254:	1085883a 	add	r2,r2,r2
10001258:	e0f94d04 	addi	r3,fp,-6860
1000125c:	1885883a 	add	r2,r3,r2
10001260:	10802004 	addi	r2,r2,128
10001264:	10800017 	ldw	r2,0(r2)
10001268:	1000681e 	bne	r2,zero,1000140c <main+0x10d8>
1000126c:	00809404 	movi	r2,592
10001270:	10800017 	ldw	r2,0(r2)
10001274:	10800644 	addi	r2,r2,25
10001278:	1009883a 	mov	r4,r2
1000127c:	01400784 	movi	r5,30
10001280:	0002fc00 	call	10002fc0 <__divsi3>
10001284:	1023883a 	mov	r17,r2
10001288:	00809804 	movi	r2,608
1000128c:	10800017 	ldw	r2,0(r2)
10001290:	10800a04 	addi	r2,r2,40
10001294:	1009883a 	mov	r4,r2
10001298:	01400784 	movi	r5,30
1000129c:	0002fc00 	call	10002fc0 <__divsi3>
100012a0:	1021883a 	mov	r16,r2
100012a4:	e4b96017 	ldw	r18,-6784(fp)
100012a8:	8809883a 	mov	r4,r17
100012ac:	01400544 	movi	r5,21
100012b0:	00030800 	call	10003080 <__mulsi3>
100012b4:	1023883a 	mov	r17,r2
100012b8:	9009883a 	mov	r4,r18
100012bc:	01405404 	movi	r5,336
100012c0:	00030800 	call	10003080 <__mulsi3>
100012c4:	8885883a 	add	r2,r17,r2
100012c8:	1405883a 	add	r2,r2,r16
100012cc:	1085883a 	add	r2,r2,r2
100012d0:	1085883a 	add	r2,r2,r2
100012d4:	e0f94d04 	addi	r3,fp,-6860
100012d8:	1885883a 	add	r2,r3,r2
100012dc:	10802004 	addi	r2,r2,128
100012e0:	10800017 	ldw	r2,0(r2)
100012e4:	1000491e 	bne	r2,zero,1000140c <main+0x10d8>
100012e8:	00809404 	movi	r2,592
100012ec:	10800017 	ldw	r2,0(r2)
100012f0:	10800c84 	addi	r2,r2,50
100012f4:	1009883a 	mov	r4,r2
100012f8:	01400784 	movi	r5,30
100012fc:	0002fc00 	call	10002fc0 <__divsi3>
10001300:	1023883a 	mov	r17,r2
10001304:	00809804 	movi	r2,608
10001308:	10800017 	ldw	r2,0(r2)
1000130c:	10800a04 	addi	r2,r2,40
10001310:	1009883a 	mov	r4,r2
10001314:	01400784 	movi	r5,30
10001318:	0002fc00 	call	10002fc0 <__divsi3>
1000131c:	1021883a 	mov	r16,r2
10001320:	e4b96017 	ldw	r18,-6784(fp)
10001324:	8809883a 	mov	r4,r17
10001328:	01400544 	movi	r5,21
1000132c:	00030800 	call	10003080 <__mulsi3>
10001330:	1023883a 	mov	r17,r2
10001334:	9009883a 	mov	r4,r18
10001338:	01405404 	movi	r5,336
1000133c:	00030800 	call	10003080 <__mulsi3>
10001340:	8885883a 	add	r2,r17,r2
10001344:	1405883a 	add	r2,r2,r16
10001348:	1085883a 	add	r2,r2,r2
1000134c:	1085883a 	add	r2,r2,r2
10001350:	e0f94d04 	addi	r3,fp,-6860
10001354:	1885883a 	add	r2,r3,r2
10001358:	10802004 	addi	r2,r2,128
1000135c:	10800017 	ldw	r2,0(r2)
10001360:	10002a1e 	bne	r2,zero,1000140c <main+0x10d8>
10001364:	00809404 	movi	r2,592
10001368:	10800017 	ldw	r2,0(r2)
1000136c:	10801184 	addi	r2,r2,70
10001370:	1009883a 	mov	r4,r2
10001374:	01400784 	movi	r5,30
10001378:	0002fc00 	call	10002fc0 <__divsi3>
1000137c:	1023883a 	mov	r17,r2
10001380:	00809804 	movi	r2,608
10001384:	10800017 	ldw	r2,0(r2)
10001388:	10800a04 	addi	r2,r2,40
1000138c:	1009883a 	mov	r4,r2
10001390:	01400784 	movi	r5,30
10001394:	0002fc00 	call	10002fc0 <__divsi3>
10001398:	1021883a 	mov	r16,r2
1000139c:	e4b96017 	ldw	r18,-6784(fp)
100013a0:	8809883a 	mov	r4,r17
100013a4:	01400544 	movi	r5,21
100013a8:	00030800 	call	10003080 <__mulsi3>
100013ac:	1023883a 	mov	r17,r2
100013b0:	9009883a 	mov	r4,r18
100013b4:	01405404 	movi	r5,336
100013b8:	00030800 	call	10003080 <__mulsi3>
100013bc:	8885883a 	add	r2,r17,r2
100013c0:	1405883a 	add	r2,r2,r16
100013c4:	1085883a 	add	r2,r2,r2
100013c8:	1085883a 	add	r2,r2,r2
100013cc:	e0f94d04 	addi	r3,fp,-6860
100013d0:	1885883a 	add	r2,r3,r2
100013d4:	10802004 	addi	r2,r2,128
100013d8:	10800017 	ldw	r2,0(r2)
100013dc:	10000b1e 	bne	r2,zero,1000140c <main+0x10d8>
    		*SAMUS_DIR = 0;
100013e0:	00800c04 	movi	r2,48
100013e4:	10000005 	stb	zero,0(r2)
    		*SAMUS_X+=6;
100013e8:	00809804 	movi	r2,608
100013ec:	00c09804 	movi	r3,608
100013f0:	18c00017 	ldw	r3,0(r3)
100013f4:	18c00184 	addi	r3,r3,6
100013f8:	10c00015 	stw	r3,0(r2)
    		*SAMUS_WALK = 1;
100013fc:	00809004 	movi	r2,576
10001400:	00c00044 	movi	r3,1
10001404:	10c00005 	stb	r3,0(r2)
    *SCENE_SELECT = 4;
    *TIT_EN = 0;
    *SCENE_SELECT = 4;
    //Move Right
    if((keycode&0x0000FF)==7 || (keycode&0x00FF00)>>8 == 7 || (keycode&0xFF0000)>>16 == 7){
    	if(scene[sceneNum][(*SAMUS_Y+10)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+25)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+50)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+70)/30][(*SAMUS_X+40)/30]==0){
10001408:	0000a106 	br	10001690 <main+0x135c>
1000140c:	0000a006 	br	10001690 <main+0x135c>
    		*SAMUS_X+=6;
    		*SAMUS_WALK = 1;
    	}
    }
    //Move Left
    else if((keycode&0x0000FF)==4 || (keycode&0x00FF00)>>8 == 4 || (keycode&0xFF0000)>>16 == 4){
10001410:	e0b95a17 	ldw	r2,-6808(fp)
10001414:	10803fcc 	andi	r2,r2,255
10001418:	10800120 	cmpeqi	r2,r2,4
1000141c:	10000a1e 	bne	r2,zero,10001448 <main+0x1114>
10001420:	e0b95a17 	ldw	r2,-6808(fp)
10001424:	10bfc00c 	andi	r2,r2,65280
10001428:	1005d23a 	srai	r2,r2,8
1000142c:	10800120 	cmpeqi	r2,r2,4
10001430:	1000051e 	bne	r2,zero,10001448 <main+0x1114>
10001434:	e0b95a17 	ldw	r2,-6808(fp)
10001438:	10803fec 	andhi	r2,r2,255
1000143c:	1005d43a 	srai	r2,r2,16
10001440:	10800118 	cmpnei	r2,r2,4
10001444:	1000891e 	bne	r2,zero,1000166c <main+0x1338>
    	if(scene[sceneNum][(*SAMUS_Y+10)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+25)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+50)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+70)/30][(*SAMUS_X-3)/30]==0){
10001448:	00809404 	movi	r2,592
1000144c:	10800017 	ldw	r2,0(r2)
10001450:	10800284 	addi	r2,r2,10
10001454:	1009883a 	mov	r4,r2
10001458:	01400784 	movi	r5,30
1000145c:	0002fc00 	call	10002fc0 <__divsi3>
10001460:	1023883a 	mov	r17,r2
10001464:	00809804 	movi	r2,608
10001468:	10800017 	ldw	r2,0(r2)
1000146c:	10bfff44 	addi	r2,r2,-3
10001470:	1009883a 	mov	r4,r2
10001474:	01400784 	movi	r5,30
10001478:	0002fc00 	call	10002fc0 <__divsi3>
1000147c:	1021883a 	mov	r16,r2
10001480:	e4b96017 	ldw	r18,-6784(fp)
10001484:	8809883a 	mov	r4,r17
10001488:	01400544 	movi	r5,21
1000148c:	00030800 	call	10003080 <__mulsi3>
10001490:	1023883a 	mov	r17,r2
10001494:	9009883a 	mov	r4,r18
10001498:	01405404 	movi	r5,336
1000149c:	00030800 	call	10003080 <__mulsi3>
100014a0:	8885883a 	add	r2,r17,r2
100014a4:	1405883a 	add	r2,r2,r16
100014a8:	1085883a 	add	r2,r2,r2
100014ac:	1085883a 	add	r2,r2,r2
100014b0:	e0f94d04 	addi	r3,fp,-6860
100014b4:	1885883a 	add	r2,r3,r2
100014b8:	10802004 	addi	r2,r2,128
100014bc:	10800017 	ldw	r2,0(r2)
100014c0:	1000691e 	bne	r2,zero,10001668 <main+0x1334>
100014c4:	00809404 	movi	r2,592
100014c8:	10800017 	ldw	r2,0(r2)
100014cc:	10800644 	addi	r2,r2,25
100014d0:	1009883a 	mov	r4,r2
100014d4:	01400784 	movi	r5,30
100014d8:	0002fc00 	call	10002fc0 <__divsi3>
100014dc:	1023883a 	mov	r17,r2
100014e0:	00809804 	movi	r2,608
100014e4:	10800017 	ldw	r2,0(r2)
100014e8:	10bfff44 	addi	r2,r2,-3
100014ec:	1009883a 	mov	r4,r2
100014f0:	01400784 	movi	r5,30
100014f4:	0002fc00 	call	10002fc0 <__divsi3>
100014f8:	1021883a 	mov	r16,r2
100014fc:	e4b96017 	ldw	r18,-6784(fp)
10001500:	8809883a 	mov	r4,r17
10001504:	01400544 	movi	r5,21
10001508:	00030800 	call	10003080 <__mulsi3>
1000150c:	1023883a 	mov	r17,r2
10001510:	9009883a 	mov	r4,r18
10001514:	01405404 	movi	r5,336
10001518:	00030800 	call	10003080 <__mulsi3>
1000151c:	8885883a 	add	r2,r17,r2
10001520:	1405883a 	add	r2,r2,r16
10001524:	1085883a 	add	r2,r2,r2
10001528:	1085883a 	add	r2,r2,r2
1000152c:	e0f94d04 	addi	r3,fp,-6860
10001530:	1885883a 	add	r2,r3,r2
10001534:	10802004 	addi	r2,r2,128
10001538:	10800017 	ldw	r2,0(r2)
1000153c:	10004a1e 	bne	r2,zero,10001668 <main+0x1334>
10001540:	00809404 	movi	r2,592
10001544:	10800017 	ldw	r2,0(r2)
10001548:	10800c84 	addi	r2,r2,50
1000154c:	1009883a 	mov	r4,r2
10001550:	01400784 	movi	r5,30
10001554:	0002fc00 	call	10002fc0 <__divsi3>
10001558:	1023883a 	mov	r17,r2
1000155c:	00809804 	movi	r2,608
10001560:	10800017 	ldw	r2,0(r2)
10001564:	10bfff44 	addi	r2,r2,-3
10001568:	1009883a 	mov	r4,r2
1000156c:	01400784 	movi	r5,30
10001570:	0002fc00 	call	10002fc0 <__divsi3>
10001574:	1021883a 	mov	r16,r2
10001578:	e4b96017 	ldw	r18,-6784(fp)
1000157c:	8809883a 	mov	r4,r17
10001580:	01400544 	movi	r5,21
10001584:	00030800 	call	10003080 <__mulsi3>
10001588:	1023883a 	mov	r17,r2
1000158c:	9009883a 	mov	r4,r18
10001590:	01405404 	movi	r5,336
10001594:	00030800 	call	10003080 <__mulsi3>
10001598:	8885883a 	add	r2,r17,r2
1000159c:	1405883a 	add	r2,r2,r16
100015a0:	1085883a 	add	r2,r2,r2
100015a4:	1085883a 	add	r2,r2,r2
100015a8:	e0f94d04 	addi	r3,fp,-6860
100015ac:	1885883a 	add	r2,r3,r2
100015b0:	10802004 	addi	r2,r2,128
100015b4:	10800017 	ldw	r2,0(r2)
100015b8:	10002b1e 	bne	r2,zero,10001668 <main+0x1334>
100015bc:	00809404 	movi	r2,592
100015c0:	10800017 	ldw	r2,0(r2)
100015c4:	10801184 	addi	r2,r2,70
100015c8:	1009883a 	mov	r4,r2
100015cc:	01400784 	movi	r5,30
100015d0:	0002fc00 	call	10002fc0 <__divsi3>
100015d4:	1023883a 	mov	r17,r2
100015d8:	00809804 	movi	r2,608
100015dc:	10800017 	ldw	r2,0(r2)
100015e0:	10bfff44 	addi	r2,r2,-3
100015e4:	1009883a 	mov	r4,r2
100015e8:	01400784 	movi	r5,30
100015ec:	0002fc00 	call	10002fc0 <__divsi3>
100015f0:	1021883a 	mov	r16,r2
100015f4:	e4b96017 	ldw	r18,-6784(fp)
100015f8:	8809883a 	mov	r4,r17
100015fc:	01400544 	movi	r5,21
10001600:	00030800 	call	10003080 <__mulsi3>
10001604:	1023883a 	mov	r17,r2
10001608:	9009883a 	mov	r4,r18
1000160c:	01405404 	movi	r5,336
10001610:	00030800 	call	10003080 <__mulsi3>
10001614:	8885883a 	add	r2,r17,r2
10001618:	1405883a 	add	r2,r2,r16
1000161c:	1085883a 	add	r2,r2,r2
10001620:	1085883a 	add	r2,r2,r2
10001624:	e0f94d04 	addi	r3,fp,-6860
10001628:	1885883a 	add	r2,r3,r2
1000162c:	10802004 	addi	r2,r2,128
10001630:	10800017 	ldw	r2,0(r2)
10001634:	10000c1e 	bne	r2,zero,10001668 <main+0x1334>
    		*SAMUS_DIR = 1;
10001638:	00800c04 	movi	r2,48
1000163c:	00c00044 	movi	r3,1
10001640:	10c00005 	stb	r3,0(r2)
    		*SAMUS_X-=6;
10001644:	00809804 	movi	r2,608
10001648:	00c09804 	movi	r3,608
1000164c:	18c00017 	ldw	r3,0(r3)
10001650:	18fffe84 	addi	r3,r3,-6
10001654:	10c00015 	stw	r3,0(r2)
    		*SAMUS_WALK = 1;
10001658:	00809004 	movi	r2,576
1000165c:	00c00044 	movi	r3,1
10001660:	10c00005 	stb	r3,0(r2)
    		*SAMUS_WALK = 1;
    	}
    }
    //Move Left
    else if((keycode&0x0000FF)==4 || (keycode&0x00FF00)>>8 == 4 || (keycode&0xFF0000)>>16 == 4){
    	if(scene[sceneNum][(*SAMUS_Y+10)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+25)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+50)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+70)/30][(*SAMUS_X-3)/30]==0){
10001664:	00000a06 	br	10001690 <main+0x135c>
10001668:	00000906 	br	10001690 <main+0x135c>
    		*SAMUS_DIR = 1;
    		*SAMUS_X-=6;
    		*SAMUS_WALK = 1;
    	}
    }
    else if(keycode==0x1a) *TIT_EN = 1;
1000166c:	e0b95a17 	ldw	r2,-6808(fp)
10001670:	10800698 	cmpnei	r2,r2,26
10001674:	1000041e 	bne	r2,zero,10001688 <main+0x1354>
10001678:	00801804 	movi	r2,96
1000167c:	00c00044 	movi	r3,1
10001680:	10c00015 	stw	r3,0(r2)
10001684:	00000206 	br	10001690 <main+0x135c>
    else{
        *SAMUS_WALK = 0;
10001688:	00809004 	movi	r2,576
1000168c:	10000005 	stb	zero,0(r2)
    }

    // Jump code
    if(((keycode&0x0000FF)==0x2c || (keycode&0x00FF00)>>8 == 0x2c || (keycode&0xFF0000)>>16 == 0x2c) && grounded == True){
10001690:	e0b95a17 	ldw	r2,-6808(fp)
10001694:	10803fcc 	andi	r2,r2,255
10001698:	10800b20 	cmpeqi	r2,r2,44
1000169c:	10000a1e 	bne	r2,zero,100016c8 <main+0x1394>
100016a0:	e0b95a17 	ldw	r2,-6808(fp)
100016a4:	10bfc00c 	andi	r2,r2,65280
100016a8:	1005d23a 	srai	r2,r2,8
100016ac:	10800b20 	cmpeqi	r2,r2,44
100016b0:	1000051e 	bne	r2,zero,100016c8 <main+0x1394>
100016b4:	e0b95a17 	ldw	r2,-6808(fp)
100016b8:	10803fec 	andhi	r2,r2,255
100016bc:	1005d43a 	srai	r2,r2,16
100016c0:	10800b18 	cmpnei	r2,r2,44
100016c4:	1000071e 	bne	r2,zero,100016e4 <main+0x13b0>
100016c8:	e0b95017 	ldw	r2,-6848(fp)
100016cc:	10800058 	cmpnei	r2,r2,1
100016d0:	1000041e 	bne	r2,zero,100016e4 <main+0x13b0>
    	y_inc = -17;
100016d4:	00bffbc4 	movi	r2,-17
100016d8:	e0b94e15 	stw	r2,-6856(fp)
    	grounded = False;
100016dc:	e0395015 	stw	zero,-6848(fp)
    	y_inc_inc = 0;
100016e0:	e0394f15 	stw	zero,-6852(fp)
    }
    y_inc_inc +=.13;
100016e4:	e1394f17 	ldw	r4,-6852(fp)
100016e8:	00040880 	call	10004088 <__extendsfdf2>
100016ec:	100b883a 	mov	r5,r2
100016f0:	180d883a 	mov	r6,r3
100016f4:	2809883a 	mov	r4,r5
100016f8:	300b883a 	mov	r5,r6
100016fc:	01828f74 	movhi	r6,2621
10001700:	319c2904 	addi	r6,r6,28836
10001704:	01cff074 	movhi	r7,16321
10001708:	39e8f5c4 	addi	r7,r7,-23593
1000170c:	00037ec0 	call	100037ec <__adddf3>
10001710:	1009883a 	mov	r4,r2
10001714:	180b883a 	mov	r5,r3
10001718:	2005883a 	mov	r2,r4
1000171c:	2807883a 	mov	r3,r5
10001720:	1009883a 	mov	r4,r2
10001724:	180b883a 	mov	r5,r3
10001728:	00041980 	call	10004198 <__truncdfsf2>
1000172c:	1007883a 	mov	r3,r2
10001730:	e0f94f15 	stw	r3,-6852(fp)
    y_inc += y_inc_inc;
10001734:	e1394e17 	ldw	r4,-6856(fp)
10001738:	00036b80 	call	100036b8 <__floatsisf>
1000173c:	1007883a 	mov	r3,r2
10001740:	1809883a 	mov	r4,r3
10001744:	e1794f17 	ldw	r5,-6852(fp)
10001748:	00030a80 	call	100030a8 <__addsf3>
1000174c:	1007883a 	mov	r3,r2
10001750:	1805883a 	mov	r2,r3
10001754:	1009883a 	mov	r4,r2
10001758:	00036400 	call	10003640 <__fixsfsi>
1000175c:	e0b94e15 	stw	r2,-6856(fp)

    if(grounded == 1){
10001760:	e0b95017 	ldw	r2,-6848(fp)
10001764:	10800058 	cmpnei	r2,r2,1
10001768:	1000031e 	bne	r2,zero,10001778 <main+0x1444>
    	y_inc = 0;
1000176c:	e0394e15 	stw	zero,-6856(fp)
    	y_inc_inc = 1.25;
10001770:	008fe834 	movhi	r2,16288
10001774:	e0b94f15 	stw	r2,-6852(fp)
    }
    if(y_inc > 35){
10001778:	e0b94e17 	ldw	r2,-6856(fp)
1000177c:	10800910 	cmplti	r2,r2,36
10001780:	1000021e 	bne	r2,zero,1000178c <main+0x1458>
    	y_inc = 35;
10001784:	008008c4 	movi	r2,35
10001788:	e0b94e15 	stw	r2,-6856(fp)

    }
    if(y_inc_inc > 5){
1000178c:	e1394f17 	ldw	r4,-6852(fp)
10001790:	01502834 	movhi	r5,16544
10001794:	00035880 	call	10003588 <__gesf2>
10001798:	0080020e 	bge	zero,r2,100017a4 <main+0x1470>
    	y_inc_inc = 6;
1000179c:	00903034 	movhi	r2,16576
100017a0:	e0b94f15 	stw	r2,-6852(fp)
    }

    *SAMUS_Y += y_inc;
100017a4:	00809404 	movi	r2,592
100017a8:	00c09404 	movi	r3,592
100017ac:	19000017 	ldw	r4,0(r3)
100017b0:	e0f94e17 	ldw	r3,-6856(fp)
100017b4:	20c7883a 	add	r3,r4,r3
100017b8:	10c00015 	stw	r3,0(r2)

    //bot collission detection
    if(scene[sceneNum][(*SAMUS_Y+80)/30][(*SAMUS_X+2)/30] != 0 || scene[sceneNum][(*SAMUS_Y+80)/30][(*SAMUS_X+33)/30] != 0){
100017bc:	00809404 	movi	r2,592
100017c0:	10800017 	ldw	r2,0(r2)
100017c4:	10801404 	addi	r2,r2,80
100017c8:	1009883a 	mov	r4,r2
100017cc:	01400784 	movi	r5,30
100017d0:	0002fc00 	call	10002fc0 <__divsi3>
100017d4:	1023883a 	mov	r17,r2
100017d8:	00809804 	movi	r2,608
100017dc:	10800017 	ldw	r2,0(r2)
100017e0:	10800084 	addi	r2,r2,2
100017e4:	1009883a 	mov	r4,r2
100017e8:	01400784 	movi	r5,30
100017ec:	0002fc00 	call	10002fc0 <__divsi3>
100017f0:	1021883a 	mov	r16,r2
100017f4:	e4b96017 	ldw	r18,-6784(fp)
100017f8:	8809883a 	mov	r4,r17
100017fc:	01400544 	movi	r5,21
10001800:	00030800 	call	10003080 <__mulsi3>
10001804:	1023883a 	mov	r17,r2
10001808:	9009883a 	mov	r4,r18
1000180c:	01405404 	movi	r5,336
10001810:	00030800 	call	10003080 <__mulsi3>
10001814:	8885883a 	add	r2,r17,r2
10001818:	1405883a 	add	r2,r2,r16
1000181c:	1085883a 	add	r2,r2,r2
10001820:	1085883a 	add	r2,r2,r2
10001824:	e0f94d04 	addi	r3,fp,-6860
10001828:	1885883a 	add	r2,r3,r2
1000182c:	10802004 	addi	r2,r2,128
10001830:	10800017 	ldw	r2,0(r2)
10001834:	10001f1e 	bne	r2,zero,100018b4 <main+0x1580>
10001838:	00809404 	movi	r2,592
1000183c:	10800017 	ldw	r2,0(r2)
10001840:	10801404 	addi	r2,r2,80
10001844:	1009883a 	mov	r4,r2
10001848:	01400784 	movi	r5,30
1000184c:	0002fc00 	call	10002fc0 <__divsi3>
10001850:	1023883a 	mov	r17,r2
10001854:	00809804 	movi	r2,608
10001858:	10800017 	ldw	r2,0(r2)
1000185c:	10800844 	addi	r2,r2,33
10001860:	1009883a 	mov	r4,r2
10001864:	01400784 	movi	r5,30
10001868:	0002fc00 	call	10002fc0 <__divsi3>
1000186c:	1021883a 	mov	r16,r2
10001870:	e4b96017 	ldw	r18,-6784(fp)
10001874:	8809883a 	mov	r4,r17
10001878:	01400544 	movi	r5,21
1000187c:	00030800 	call	10003080 <__mulsi3>
10001880:	1023883a 	mov	r17,r2
10001884:	9009883a 	mov	r4,r18
10001888:	01405404 	movi	r5,336
1000188c:	00030800 	call	10003080 <__mulsi3>
10001890:	8885883a 	add	r2,r17,r2
10001894:	1405883a 	add	r2,r2,r16
10001898:	1085883a 	add	r2,r2,r2
1000189c:	1085883a 	add	r2,r2,r2
100018a0:	e0f94d04 	addi	r3,fp,-6860
100018a4:	1885883a 	add	r2,r3,r2
100018a8:	10802004 	addi	r2,r2,128
100018ac:	10800017 	ldw	r2,0(r2)
100018b0:	10000e26 	beq	r2,zero,100018ec <main+0x15b8>
    	*SAMUS_Y = (*SAMUS_Y/30)*30+19;
100018b4:	04009404 	movi	r16,592
100018b8:	00809404 	movi	r2,592
100018bc:	10800017 	ldw	r2,0(r2)
100018c0:	1009883a 	mov	r4,r2
100018c4:	01400784 	movi	r5,30
100018c8:	0002fc00 	call	10002fc0 <__divsi3>
100018cc:	1009883a 	mov	r4,r2
100018d0:	01400784 	movi	r5,30
100018d4:	00030800 	call	10003080 <__mulsi3>
100018d8:	108004c4 	addi	r2,r2,19
100018dc:	80800015 	stw	r2,0(r16)
    	grounded = True;
100018e0:	00800044 	movi	r2,1
100018e4:	e0b95015 	stw	r2,-6848(fp)
100018e8:	00000106 	br	100018f0 <main+0x15bc>
    }
    else{
    	grounded = False;
100018ec:	e0395015 	stw	zero,-6848(fp)
    }

    if(grounded == False){
100018f0:	e0b95017 	ldw	r2,-6848(fp)
100018f4:	1000021e 	bne	r2,zero,10001900 <main+0x15cc>
    	*SAMUS_WALK = 0;
100018f8:	00809004 	movi	r2,576
100018fc:	10000005 	stb	zero,0(r2)
    }

    //If hits head
    if(scene[sceneNum][(*SAMUS_Y+5)/30][(*SAMUS_X+2)/30] != 0 || scene[sceneNum][(*SAMUS_Y+5)/30][(*SAMUS_X+33)/30] != 0){
10001900:	00809404 	movi	r2,592
10001904:	10800017 	ldw	r2,0(r2)
10001908:	10800144 	addi	r2,r2,5
1000190c:	1009883a 	mov	r4,r2
10001910:	01400784 	movi	r5,30
10001914:	0002fc00 	call	10002fc0 <__divsi3>
10001918:	1023883a 	mov	r17,r2
1000191c:	00809804 	movi	r2,608
10001920:	10800017 	ldw	r2,0(r2)
10001924:	10800084 	addi	r2,r2,2
10001928:	1009883a 	mov	r4,r2
1000192c:	01400784 	movi	r5,30
10001930:	0002fc00 	call	10002fc0 <__divsi3>
10001934:	1021883a 	mov	r16,r2
10001938:	e4b96017 	ldw	r18,-6784(fp)
1000193c:	8809883a 	mov	r4,r17
10001940:	01400544 	movi	r5,21
10001944:	00030800 	call	10003080 <__mulsi3>
10001948:	1023883a 	mov	r17,r2
1000194c:	9009883a 	mov	r4,r18
10001950:	01405404 	movi	r5,336
10001954:	00030800 	call	10003080 <__mulsi3>
10001958:	8885883a 	add	r2,r17,r2
1000195c:	1405883a 	add	r2,r2,r16
10001960:	1085883a 	add	r2,r2,r2
10001964:	1085883a 	add	r2,r2,r2
10001968:	e0f94d04 	addi	r3,fp,-6860
1000196c:	1885883a 	add	r2,r3,r2
10001970:	10802004 	addi	r2,r2,128
10001974:	10800017 	ldw	r2,0(r2)
10001978:	10001f1e 	bne	r2,zero,100019f8 <main+0x16c4>
1000197c:	00809404 	movi	r2,592
10001980:	10800017 	ldw	r2,0(r2)
10001984:	10800144 	addi	r2,r2,5
10001988:	1009883a 	mov	r4,r2
1000198c:	01400784 	movi	r5,30
10001990:	0002fc00 	call	10002fc0 <__divsi3>
10001994:	1023883a 	mov	r17,r2
10001998:	00809804 	movi	r2,608
1000199c:	10800017 	ldw	r2,0(r2)
100019a0:	10800844 	addi	r2,r2,33
100019a4:	1009883a 	mov	r4,r2
100019a8:	01400784 	movi	r5,30
100019ac:	0002fc00 	call	10002fc0 <__divsi3>
100019b0:	1021883a 	mov	r16,r2
100019b4:	e4b96017 	ldw	r18,-6784(fp)
100019b8:	8809883a 	mov	r4,r17
100019bc:	01400544 	movi	r5,21
100019c0:	00030800 	call	10003080 <__mulsi3>
100019c4:	1023883a 	mov	r17,r2
100019c8:	9009883a 	mov	r4,r18
100019cc:	01405404 	movi	r5,336
100019d0:	00030800 	call	10003080 <__mulsi3>
100019d4:	8885883a 	add	r2,r17,r2
100019d8:	1405883a 	add	r2,r2,r16
100019dc:	1085883a 	add	r2,r2,r2
100019e0:	1085883a 	add	r2,r2,r2
100019e4:	e0f94d04 	addi	r3,fp,-6860
100019e8:	1885883a 	add	r2,r3,r2
100019ec:	10802004 	addi	r2,r2,128
100019f0:	10800017 	ldw	r2,0(r2)
100019f4:	10000326 	beq	r2,zero,10001a04 <main+0x16d0>
    	y_inc = 0;
100019f8:	e0394e15 	stw	zero,-6856(fp)
    	y_inc_inc = 2.5;
100019fc:	00900834 	movhi	r2,16416
10001a00:	e0b94f15 	stw	r2,-6852(fp)
    }


    //Bullet code
    if(!((keycode&0x0000FF)==0x0d || (keycode&0x00FF00)>>8 == 0x0d || (keycode&0xFF0000)>>16 == 0x0d)){
10001a04:	e0b95a17 	ldw	r2,-6808(fp)
10001a08:	10803fcc 	andi	r2,r2,255
10001a0c:	10800360 	cmpeqi	r2,r2,13
10001a10:	10000c1e 	bne	r2,zero,10001a44 <main+0x1710>
10001a14:	e0b95a17 	ldw	r2,-6808(fp)
10001a18:	10bfc00c 	andi	r2,r2,65280
10001a1c:	1005d23a 	srai	r2,r2,8
10001a20:	10800360 	cmpeqi	r2,r2,13
10001a24:	1000071e 	bne	r2,zero,10001a44 <main+0x1710>
10001a28:	e0b95a17 	ldw	r2,-6808(fp)
10001a2c:	10803fec 	andhi	r2,r2,255
10001a30:	1005d43a 	srai	r2,r2,16
10001a34:	10800360 	cmpeqi	r2,r2,13
10001a38:	1000021e 	bne	r2,zero,10001a44 <main+0x1710>
    	bullet_en = True;
10001a3c:	00800044 	movi	r2,1
10001a40:	e0b95715 	stw	r2,-6820(fp)
    }
    if(((keycode&0x0000FF)==0x0d || (keycode&0x00FF00)>>8 == 0x0d || (keycode&0xFF0000)>>16 == 0x0d) && bullet_en == True){
10001a44:	e0b95a17 	ldw	r2,-6808(fp)
10001a48:	10803fcc 	andi	r2,r2,255
10001a4c:	10800360 	cmpeqi	r2,r2,13
10001a50:	10000a1e 	bne	r2,zero,10001a7c <main+0x1748>
10001a54:	e0b95a17 	ldw	r2,-6808(fp)
10001a58:	10bfc00c 	andi	r2,r2,65280
10001a5c:	1005d23a 	srai	r2,r2,8
10001a60:	10800360 	cmpeqi	r2,r2,13
10001a64:	1000051e 	bne	r2,zero,10001a7c <main+0x1748>
10001a68:	e0b95a17 	ldw	r2,-6808(fp)
10001a6c:	10803fec 	andhi	r2,r2,255
10001a70:	1005d43a 	srai	r2,r2,16
10001a74:	10800358 	cmpnei	r2,r2,13
10001a78:	10008a1e 	bne	r2,zero,10001ca4 <main+0x1970>
10001a7c:	e0b95717 	ldw	r2,-6820(fp)
10001a80:	10800058 	cmpnei	r2,r2,1
10001a84:	1000871e 	bne	r2,zero,10001ca4 <main+0x1970>
    	if(*BUL1_EN == True && *BUL2_EN == True && *BUL3_EN == False){
10001a88:	00800404 	movi	r2,16
10001a8c:	10800017 	ldw	r2,0(r2)
10001a90:	10800058 	cmpnei	r2,r2,1
10001a94:	10002d1e 	bne	r2,zero,10001b4c <main+0x1818>
10001a98:	00803404 	movi	r2,208
10001a9c:	10800017 	ldw	r2,0(r2)
10001aa0:	10800058 	cmpnei	r2,r2,1
10001aa4:	1000291e 	bne	r2,zero,10001b4c <main+0x1818>
10001aa8:	00802804 	movi	r2,160
10001aac:	10800017 	ldw	r2,0(r2)
10001ab0:	1000261e 	bne	r2,zero,10001b4c <main+0x1818>
    		if(*SAMUS_DIR == 1){
10001ab4:	00800c04 	movi	r2,48
10001ab8:	10800003 	ldbu	r2,0(r2)
10001abc:	10803fcc 	andi	r2,r2,255
10001ac0:	1080201c 	xori	r2,r2,128
10001ac4:	10bfe004 	addi	r2,r2,-128
10001ac8:	10800058 	cmpnei	r2,r2,1
10001acc:	10000f1e 	bne	r2,zero,10001b0c <main+0x17d8>
    			*BUL3_EN = True;
10001ad0:	00802804 	movi	r2,160
10001ad4:	00c00044 	movi	r3,1
10001ad8:	10c00015 	stw	r3,0(r2)
    			*BUL3_X = *SAMUS_X;
10001adc:	00802404 	movi	r2,144
10001ae0:	00c09804 	movi	r3,608
10001ae4:	18c00017 	ldw	r3,0(r3)
10001ae8:	10c00015 	stw	r3,0(r2)
    			*BUL3_Y = *SAMUS_Y+25;
10001aec:	00802004 	movi	r2,128
10001af0:	00c09404 	movi	r3,592
10001af4:	18c00017 	ldw	r3,0(r3)
10001af8:	18c00644 	addi	r3,r3,25
10001afc:	10c00015 	stw	r3,0(r2)
    			bul3Left = True;
10001b00:	00800044 	movi	r2,1
10001b04:	e0b95515 	stw	r2,-6828(fp)
10001b08:	00000e06 	br	10001b44 <main+0x1810>
    		}
    		else{
    			*BUL3_EN = True;
10001b0c:	00802804 	movi	r2,160
10001b10:	00c00044 	movi	r3,1
10001b14:	10c00015 	stw	r3,0(r2)
    			*BUL3_X = *SAMUS_X+30;
10001b18:	00802404 	movi	r2,144
10001b1c:	00c09804 	movi	r3,608
10001b20:	18c00017 	ldw	r3,0(r3)
10001b24:	18c00784 	addi	r3,r3,30
10001b28:	10c00015 	stw	r3,0(r2)
    			*BUL3_Y = *SAMUS_Y+25;
10001b2c:	00802004 	movi	r2,128
10001b30:	00c09404 	movi	r3,592
10001b34:	18c00017 	ldw	r3,0(r3)
10001b38:	18c00644 	addi	r3,r3,25
10001b3c:	10c00015 	stw	r3,0(r2)
    			bul3Left = False;
10001b40:	e0395515 	stw	zero,-6828(fp)
    		}
    		bul3start = 0;
10001b44:	e0395615 	stw	zero,-6824(fp)
10001b48:	00005506 	br	10001ca0 <main+0x196c>
    	}
    	else if(*BUL1_EN == True && *BUL2_EN == False){
10001b4c:	00800404 	movi	r2,16
10001b50:	10800017 	ldw	r2,0(r2)
10001b54:	10800058 	cmpnei	r2,r2,1
10001b58:	1000291e 	bne	r2,zero,10001c00 <main+0x18cc>
10001b5c:	00803404 	movi	r2,208
10001b60:	10800017 	ldw	r2,0(r2)
10001b64:	1000261e 	bne	r2,zero,10001c00 <main+0x18cc>
			if(*SAMUS_DIR == 1){
10001b68:	00800c04 	movi	r2,48
10001b6c:	10800003 	ldbu	r2,0(r2)
10001b70:	10803fcc 	andi	r2,r2,255
10001b74:	1080201c 	xori	r2,r2,128
10001b78:	10bfe004 	addi	r2,r2,-128
10001b7c:	10800058 	cmpnei	r2,r2,1
10001b80:	10000f1e 	bne	r2,zero,10001bc0 <main+0x188c>
				*BUL2_EN = True;
10001b84:	00803404 	movi	r2,208
10001b88:	00c00044 	movi	r3,1
10001b8c:	10c00015 	stw	r3,0(r2)
				*BUL2_X = *SAMUS_X;
10001b90:	00803004 	movi	r2,192
10001b94:	00c09804 	movi	r3,608
10001b98:	18c00017 	ldw	r3,0(r3)
10001b9c:	10c00015 	stw	r3,0(r2)
				*BUL2_Y = *SAMUS_Y+25;
10001ba0:	00802c04 	movi	r2,176
10001ba4:	00c09404 	movi	r3,592
10001ba8:	18c00017 	ldw	r3,0(r3)
10001bac:	18c00644 	addi	r3,r3,25
10001bb0:	10c00015 	stw	r3,0(r2)
				bul2Left = True;
10001bb4:	00800044 	movi	r2,1
10001bb8:	e0b95315 	stw	r2,-6836(fp)
10001bbc:	00000e06 	br	10001bf8 <main+0x18c4>
			}
			else{
				*BUL2_EN = True;
10001bc0:	00803404 	movi	r2,208
10001bc4:	00c00044 	movi	r3,1
10001bc8:	10c00015 	stw	r3,0(r2)
				*BUL2_X = *SAMUS_X+30;
10001bcc:	00803004 	movi	r2,192
10001bd0:	00c09804 	movi	r3,608
10001bd4:	18c00017 	ldw	r3,0(r3)
10001bd8:	18c00784 	addi	r3,r3,30
10001bdc:	10c00015 	stw	r3,0(r2)
				*BUL2_Y = *SAMUS_Y+25;
10001be0:	00802c04 	movi	r2,176
10001be4:	00c09404 	movi	r3,592
10001be8:	18c00017 	ldw	r3,0(r3)
10001bec:	18c00644 	addi	r3,r3,25
10001bf0:	10c00015 	stw	r3,0(r2)
				bul2Left = False;
10001bf4:	e0395315 	stw	zero,-6836(fp)
			}
			bul2start = 0;
10001bf8:	e0395415 	stw	zero,-6832(fp)
10001bfc:	00002806 	br	10001ca0 <main+0x196c>
		}
    	else if(*BUL1_EN == False){
10001c00:	00800404 	movi	r2,16
10001c04:	10800017 	ldw	r2,0(r2)
10001c08:	1000251e 	bne	r2,zero,10001ca0 <main+0x196c>
			if(*SAMUS_DIR == 1){
10001c0c:	00800c04 	movi	r2,48
10001c10:	10800003 	ldbu	r2,0(r2)
10001c14:	10803fcc 	andi	r2,r2,255
10001c18:	1080201c 	xori	r2,r2,128
10001c1c:	10bfe004 	addi	r2,r2,-128
10001c20:	10800058 	cmpnei	r2,r2,1
10001c24:	10000f1e 	bne	r2,zero,10001c64 <main+0x1930>
				*BUL1_EN = True;
10001c28:	00800404 	movi	r2,16
10001c2c:	00c00044 	movi	r3,1
10001c30:	10c00015 	stw	r3,0(r2)
				*BUL1_X = *SAMUS_X;
10001c34:	00803c04 	movi	r2,240
10001c38:	00c09804 	movi	r3,608
10001c3c:	18c00017 	ldw	r3,0(r3)
10001c40:	10c00015 	stw	r3,0(r2)
				*BUL1_Y = *SAMUS_Y+25;
10001c44:	00803804 	movi	r2,224
10001c48:	00c09404 	movi	r3,592
10001c4c:	18c00017 	ldw	r3,0(r3)
10001c50:	18c00644 	addi	r3,r3,25
10001c54:	10c00015 	stw	r3,0(r2)
				bul1Left = True;
10001c58:	00800044 	movi	r2,1
10001c5c:	e0b95115 	stw	r2,-6844(fp)
10001c60:	00000e06 	br	10001c9c <main+0x1968>
			}
			else{
				*BUL1_EN = True;
10001c64:	00800404 	movi	r2,16
10001c68:	00c00044 	movi	r3,1
10001c6c:	10c00015 	stw	r3,0(r2)
				*BUL1_X = *SAMUS_X+30;
10001c70:	00803c04 	movi	r2,240
10001c74:	00c09804 	movi	r3,608
10001c78:	18c00017 	ldw	r3,0(r3)
10001c7c:	18c00784 	addi	r3,r3,30
10001c80:	10c00015 	stw	r3,0(r2)
				*BUL1_Y = *SAMUS_Y+25;
10001c84:	00803804 	movi	r2,224
10001c88:	00c09404 	movi	r3,592
10001c8c:	18c00017 	ldw	r3,0(r3)
10001c90:	18c00644 	addi	r3,r3,25
10001c94:	10c00015 	stw	r3,0(r2)
				bul1Left = False;
10001c98:	e0395115 	stw	zero,-6844(fp)
			}
			bul1start = 0;
10001c9c:	e0395215 	stw	zero,-6840(fp)
		}
    	bullet_en = False;
10001ca0:	e0395715 	stw	zero,-6820(fp)
    }

    if(*BUL3_EN == True){
10001ca4:	00802804 	movi	r2,160
10001ca8:	10800017 	ldw	r2,0(r2)
10001cac:	10800058 	cmpnei	r2,r2,1
10001cb0:	10001a1e 	bne	r2,zero,10001d1c <main+0x19e8>
    	if(bul3start >= 90)
10001cb4:	e0b95617 	ldw	r2,-6824(fp)
10001cb8:	10801690 	cmplti	r2,r2,90
10001cbc:	1000031e 	bne	r2,zero,10001ccc <main+0x1998>
    		*BUL3_EN = False;
10001cc0:	00802804 	movi	r2,160
10001cc4:	10000015 	stw	zero,0(r2)
10001cc8:	00001406 	br	10001d1c <main+0x19e8>
    	else{
    		if(bul3Left == True){
10001ccc:	e0b95517 	ldw	r2,-6828(fp)
10001cd0:	10800058 	cmpnei	r2,r2,1
10001cd4:	1000071e 	bne	r2,zero,10001cf4 <main+0x19c0>
    			*BUL3_X -= bulinc;
10001cd8:	00802404 	movi	r2,144
10001cdc:	00c02404 	movi	r3,144
10001ce0:	19000017 	ldw	r4,0(r3)
10001ce4:	e0f95f17 	ldw	r3,-6788(fp)
10001ce8:	20c7c83a 	sub	r3,r4,r3
10001cec:	10c00015 	stw	r3,0(r2)
10001cf0:	00000606 	br	10001d0c <main+0x19d8>
    		}
    		else{
    			*BUL3_X += bulinc;
10001cf4:	00802404 	movi	r2,144
10001cf8:	00c02404 	movi	r3,144
10001cfc:	19000017 	ldw	r4,0(r3)
10001d00:	e0f95f17 	ldw	r3,-6788(fp)
10001d04:	20c7883a 	add	r3,r4,r3
10001d08:	10c00015 	stw	r3,0(r2)
    		}
    		bul3start += bulinc;
10001d0c:	e0f95617 	ldw	r3,-6824(fp)
10001d10:	e0b95f17 	ldw	r2,-6788(fp)
10001d14:	1885883a 	add	r2,r3,r2
10001d18:	e0b95615 	stw	r2,-6824(fp)
    	}
    }
    if(*BUL2_EN == True){
10001d1c:	00803404 	movi	r2,208
10001d20:	10800017 	ldw	r2,0(r2)
10001d24:	10800058 	cmpnei	r2,r2,1
10001d28:	10001a1e 	bne	r2,zero,10001d94 <main+0x1a60>
		if(bul2start >= 90)
10001d2c:	e0b95417 	ldw	r2,-6832(fp)
10001d30:	10801690 	cmplti	r2,r2,90
10001d34:	1000031e 	bne	r2,zero,10001d44 <main+0x1a10>
			*BUL2_EN = False;
10001d38:	00803404 	movi	r2,208
10001d3c:	10000015 	stw	zero,0(r2)
10001d40:	00001406 	br	10001d94 <main+0x1a60>
		else{
			if(bul2Left == True){
10001d44:	e0b95317 	ldw	r2,-6836(fp)
10001d48:	10800058 	cmpnei	r2,r2,1
10001d4c:	1000071e 	bne	r2,zero,10001d6c <main+0x1a38>
				*BUL2_X -= bulinc;
10001d50:	00803004 	movi	r2,192
10001d54:	00c03004 	movi	r3,192
10001d58:	19000017 	ldw	r4,0(r3)
10001d5c:	e0f95f17 	ldw	r3,-6788(fp)
10001d60:	20c7c83a 	sub	r3,r4,r3
10001d64:	10c00015 	stw	r3,0(r2)
10001d68:	00000606 	br	10001d84 <main+0x1a50>
			}
			else{
				*BUL2_X += bulinc;
10001d6c:	00803004 	movi	r2,192
10001d70:	00c03004 	movi	r3,192
10001d74:	19000017 	ldw	r4,0(r3)
10001d78:	e0f95f17 	ldw	r3,-6788(fp)
10001d7c:	20c7883a 	add	r3,r4,r3
10001d80:	10c00015 	stw	r3,0(r2)
			}
			bul2start += bulinc;
10001d84:	e0f95417 	ldw	r3,-6832(fp)
10001d88:	e0b95f17 	ldw	r2,-6788(fp)
10001d8c:	1885883a 	add	r2,r3,r2
10001d90:	e0b95415 	stw	r2,-6832(fp)
		}
	}
    if(*BUL1_EN == True){
10001d94:	00800404 	movi	r2,16
10001d98:	10800017 	ldw	r2,0(r2)
10001d9c:	10800058 	cmpnei	r2,r2,1
10001da0:	10001a1e 	bne	r2,zero,10001e0c <main+0x1ad8>
		if(bul1start >= 90)
10001da4:	e0b95217 	ldw	r2,-6840(fp)
10001da8:	10801690 	cmplti	r2,r2,90
10001dac:	1000031e 	bne	r2,zero,10001dbc <main+0x1a88>
			*BUL1_EN = False;
10001db0:	00800404 	movi	r2,16
10001db4:	10000015 	stw	zero,0(r2)
10001db8:	00001406 	br	10001e0c <main+0x1ad8>
		else{
			if(bul1Left == True){
10001dbc:	e0b95117 	ldw	r2,-6844(fp)
10001dc0:	10800058 	cmpnei	r2,r2,1
10001dc4:	1000071e 	bne	r2,zero,10001de4 <main+0x1ab0>
				*BUL1_X -= bulinc;
10001dc8:	00803c04 	movi	r2,240
10001dcc:	00c03c04 	movi	r3,240
10001dd0:	19000017 	ldw	r4,0(r3)
10001dd4:	e0f95f17 	ldw	r3,-6788(fp)
10001dd8:	20c7c83a 	sub	r3,r4,r3
10001ddc:	10c00015 	stw	r3,0(r2)
10001de0:	00000606 	br	10001dfc <main+0x1ac8>
			}
			else{
				*BUL1_X += bulinc;
10001de4:	00803c04 	movi	r2,240
10001de8:	00c03c04 	movi	r3,240
10001dec:	19000017 	ldw	r4,0(r3)
10001df0:	e0f95f17 	ldw	r3,-6788(fp)
10001df4:	20c7883a 	add	r3,r4,r3
10001df8:	10c00015 	stw	r3,0(r2)
			}
			bul1start += bulinc;
10001dfc:	e0f95217 	ldw	r3,-6840(fp)
10001e00:	e0b95f17 	ldw	r2,-6788(fp)
10001e04:	1885883a 	add	r2,r3,r2
10001e08:	e0b95215 	stw	r2,-6840(fp)
    //MONSTER MOVEMENT
    //COLLISSION DETECTION
    //EXTRAS


	}//end while
10001e0c:	003c2306 	br	10000e9c <__alt_data_end+0xf8000e9c>

10001e10 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
10001e10:	defffc04 	addi	sp,sp,-16
10001e14:	dfc00315 	stw	ra,12(sp)
10001e18:	df000215 	stw	fp,8(sp)
10001e1c:	df000204 	addi	fp,sp,8
10001e20:	2007883a 	mov	r3,r4
10001e24:	2805883a 	mov	r2,r5
10001e28:	e0fffe0d 	sth	r3,-8(fp)
10001e2c:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
10001e30:	e0bffe0b 	ldhu	r2,-8(fp)
10001e34:	01000084 	movi	r4,2
10001e38:	100b883a 	mov	r5,r2
10001e3c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA, Data);
10001e40:	e0bfff0b 	ldhu	r2,-4(fp)
10001e44:	0009883a 	mov	r4,zero
10001e48:	100b883a 	mov	r5,r2
10001e4c:	00002480 	call	10000248 <IO_write>
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
}
10001e50:	e037883a 	mov	sp,fp
10001e54:	dfc00117 	ldw	ra,4(sp)
10001e58:	df000017 	ldw	fp,0(sp)
10001e5c:	dec00204 	addi	sp,sp,8
10001e60:	f800283a 	ret

10001e64 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10001e64:	defffd04 	addi	sp,sp,-12
10001e68:	dfc00215 	stw	ra,8(sp)
10001e6c:	df000115 	stw	fp,4(sp)
10001e70:	df000104 	addi	fp,sp,4
10001e74:	2005883a 	mov	r2,r4
10001e78:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
10001e7c:	e0bfff0b 	ldhu	r2,-4(fp)
10001e80:	01000084 	movi	r4,2
10001e84:	100b883a 	mov	r5,r2
10001e88:	00002480 	call	10000248 <IO_write>
	return IO_read(HPI_DATA);
10001e8c:	0009883a 	mov	r4,zero
10001e90:	00002c00 	call	100002c0 <IO_read>
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
}
10001e94:	e037883a 	mov	sp,fp
10001e98:	dfc00117 	ldw	ra,4(sp)
10001e9c:	df000017 	ldw	fp,0(sp)
10001ea0:	dec00204 	addi	sp,sp,8
10001ea4:	f800283a 	ret

10001ea8 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10001ea8:	defffe04 	addi	sp,sp,-8
10001eac:	dfc00115 	stw	ra,4(sp)
10001eb0:	df000015 	stw	fp,0(sp)
10001eb4:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10001eb8:	01000044 	movi	r4,1
10001ebc:	017e9414 	movui	r5,64080
10001ec0:	00002480 	call	10000248 <IO_write>
	usleep(100000);
10001ec4:	010000b4 	movhi	r4,2
10001ec8:	2121a804 	addi	r4,r4,-31072
10001ecc:	0010b580 	call	10010b58 <usleep>
	printf("[USB INIT]:reset finished!\n");
10001ed0:	01040074 	movhi	r4,4097
10001ed4:	21130e04 	addi	r4,r4,19512
10001ed8:	00045ec0 	call	100045ec <puts>

	usleep(500000);
10001edc:	01000234 	movhi	r4,8
10001ee0:	21284804 	addi	r4,r4,-24288
10001ee4:	0010b580 	call	10010b58 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
10001ee8:	01040074 	movhi	r4,4097
10001eec:	21131504 	addi	r4,r4,19540
10001ef0:	00045ec0 	call	100045ec <puts>
	IO_read(HPI_MAILBOX);
10001ef4:	01000044 	movi	r4,1
10001ef8:	00002c00 	call	100002c0 <IO_read>
	IO_read(HPI_STATUS);
10001efc:	010000c4 	movi	r4,3
10001f00:	00002c00 	call	100002c0 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10001f04:	01005104 	movi	r4,324
10001f08:	0001e640 	call	10001e64 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10001f0c:	01005104 	movi	r4,324
10001f10:	000b883a 	mov	r5,zero
10001f14:	0001e100 	call	10001e10 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
10001f18:	01005204 	movi	r4,328
10001f1c:	0001e640 	call	10001e64 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10001f20:	01005204 	movi	r4,328
10001f24:	000b883a 	mov	r5,zero
10001f28:	0001e100 	call	10001e10 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10001f2c:	01302414 	movui	r4,49296
10001f30:	017fffd4 	movui	r5,65535
10001f34:	0001e100 	call	10001e10 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10001f38:	01302c14 	movui	r4,49328
10001f3c:	017fffd4 	movui	r5,65535
10001f40:	0001e100 	call	10001e10 <UsbWrite>
}
10001f44:	e037883a 	mov	sp,fp
10001f48:	dfc00117 	ldw	ra,4(sp)
10001f4c:	df000017 	ldw	fp,0(sp)
10001f50:	dec00204 	addi	sp,sp,8
10001f54:	f800283a 	ret

10001f58 <UsbSetAddress>:


void UsbSetAddress()
{
10001f58:	defffe04 	addi	sp,sp,-8
10001f5c:	dfc00115 	stw	ra,4(sp)
10001f60:	df000015 	stw	fp,0(sp)
10001f64:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001f68:	01000084 	movi	r4,2
10001f6c:	01414004 	movi	r5,1280
10001f70:	00002480 	call	10000248 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
10001f74:	0009883a 	mov	r4,zero
10001f78:	01414304 	movi	r5,1292
10001f7c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001f80:	0009883a 	mov	r4,zero
10001f84:	01400204 	movi	r5,8
10001f88:	00002480 	call	10000248 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
10001f8c:	0009883a 	mov	r4,zero
10001f90:	01403404 	movi	r5,208
10001f94:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001f98:	0009883a 	mov	r4,zero
10001f9c:	01400044 	movi	r5,1
10001fa0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001fa4:	0009883a 	mov	r4,zero
10001fa8:	014004c4 	movi	r5,19
10001fac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001fb0:	0009883a 	mov	r4,zero
10001fb4:	01414504 	movi	r5,1300
10001fb8:	00002480 	call	10000248 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10001fbc:	0009883a 	mov	r4,zero
10001fc0:	01414004 	movi	r5,1280
10001fc4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);
10001fc8:	0009883a 	mov	r4,zero
10001fcc:	01400084 	movi	r5,2
10001fd0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001fd4:	0009883a 	mov	r4,zero
10001fd8:	000b883a 	mov	r5,zero
10001fdc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001fe0:	0009883a 	mov	r4,zero
10001fe4:	000b883a 	mov	r5,zero
10001fe8:	00002480 	call	10000248 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10001fec:	0009883a 	mov	r4,zero
10001ff0:	000b883a 	mov	r5,zero
10001ff4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10001ff8:	0009883a 	mov	r4,zero
10001ffc:	000b883a 	mov	r5,zero
10002000:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10002004:	0009883a 	mov	r4,zero
10002008:	01402404 	movi	r5,144
1000200c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
10002010:	0009883a 	mov	r4,zero
10002014:	01401044 	movi	r5,65
10002018:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000201c:	0009883a 	mov	r4,zero
10002020:	014004c4 	movi	r5,19
10002024:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002028:	0009883a 	mov	r4,zero
1000202c:	000b883a 	mov	r5,zero
10002030:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002034:	01006c04 	movi	r4,432
10002038:	01414004 	movi	r5,1280
1000203c:	0001e100 	call	10001e10 <UsbWrite>
}
10002040:	e037883a 	mov	sp,fp
10002044:	dfc00117 	ldw	ra,4(sp)
10002048:	df000017 	ldw	fp,0(sp)
1000204c:	dec00204 	addi	sp,sp,8
10002050:	f800283a 	ret

10002054 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
10002054:	defffe04 	addi	sp,sp,-8
10002058:	dfc00115 	stw	ra,4(sp)
1000205c:	df000015 	stw	fp,0(sp)
10002060:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002064:	01000084 	movi	r4,2
10002068:	01414004 	movi	r5,1280
1000206c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002070:	0009883a 	mov	r4,zero
10002074:	01414304 	movi	r5,1292
10002078:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000207c:	0009883a 	mov	r4,zero
10002080:	01400204 	movi	r5,8
10002084:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002088:	0009883a 	mov	r4,zero
1000208c:	0140b404 	movi	r5,720
10002090:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002094:	0009883a 	mov	r4,zero
10002098:	01400044 	movi	r5,1
1000209c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
100020a0:	0009883a 	mov	r4,zero
100020a4:	014004c4 	movi	r5,19
100020a8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
100020ac:	0009883a 	mov	r4,zero
100020b0:	01414504 	movi	r5,1300
100020b4:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100020b8:	0009883a 	mov	r4,zero
100020bc:	0141a004 	movi	r5,1664
100020c0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
100020c4:	0009883a 	mov	r4,zero
100020c8:	01404004 	movi	r5,256
100020cc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
100020d0:	0009883a 	mov	r4,zero
100020d4:	000b883a 	mov	r5,zero
100020d8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);
100020dc:	0009883a 	mov	r4,zero
100020e0:	01400204 	movi	r5,8
100020e4:	00002480 	call	10000248 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
100020e8:	0009883a 	mov	r4,zero
100020ec:	01414b04 	movi	r5,1324
100020f0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//
100020f4:	0009883a 	mov	r4,zero
100020f8:	01400204 	movi	r5,8
100020fc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//
10002100:	0009883a 	mov	r4,zero
10002104:	0140a404 	movi	r5,656
10002108:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
1000210c:	0009883a 	mov	r4,zero
10002110:	01401044 	movi	r5,65
10002114:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002118:	0009883a 	mov	r4,zero
1000211c:	014004c4 	movi	r5,19
10002120:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);
10002124:	0009883a 	mov	r4,zero
10002128:	01414804 	movi	r5,1312
1000212c:	00002480 	call	10000248 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10002130:	0009883a 	mov	r4,zero
10002134:	000b883a 	mov	r5,zero
10002138:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
1000213c:	0009883a 	mov	r4,zero
10002140:	000b883a 	mov	r5,zero
10002144:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
10002148:	0009883a 	mov	r4,zero
1000214c:	01408404 	movi	r5,528
10002150:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
10002154:	0009883a 	mov	r4,zero
10002158:	01401044 	movi	r5,65
1000215c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002160:	0009883a 	mov	r4,zero
10002164:	014004c4 	movi	r5,19
10002168:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000216c:	0009883a 	mov	r4,zero
10002170:	000b883a 	mov	r5,zero
10002174:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002178:	01006c04 	movi	r4,432
1000217c:	01414004 	movi	r5,1280
10002180:	0001e100 	call	10001e10 <UsbWrite>
}
10002184:	e037883a 	mov	sp,fp
10002188:	dfc00117 	ldw	ra,4(sp)
1000218c:	df000017 	ldw	fp,0(sp)
10002190:	dec00204 	addi	sp,sp,8
10002194:	f800283a 	ret

10002198 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
10002198:	defffe04 	addi	sp,sp,-8
1000219c:	dfc00115 	stw	ra,4(sp)
100021a0:	df000015 	stw	fp,0(sp)
100021a4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100021a8:	01000084 	movi	r4,2
100021ac:	01414004 	movi	r5,1280
100021b0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100021b4:	0009883a 	mov	r4,zero
100021b8:	01414304 	movi	r5,1292
100021bc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100021c0:	0009883a 	mov	r4,zero
100021c4:	01400204 	movi	r5,8
100021c8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100021cc:	0009883a 	mov	r4,zero
100021d0:	0140b404 	movi	r5,720
100021d4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
100021d8:	0009883a 	mov	r4,zero
100021dc:	01400044 	movi	r5,1
100021e0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
100021e4:	0009883a 	mov	r4,zero
100021e8:	014004c4 	movi	r5,19
100021ec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
100021f0:	0009883a 	mov	r4,zero
100021f4:	01414504 	movi	r5,1300
100021f8:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100021fc:	0009883a 	mov	r4,zero
10002200:	0141a004 	movi	r5,1664
10002204:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
10002208:	0009883a 	mov	r4,zero
1000220c:	01404004 	movi	r5,256
10002210:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002214:	0009883a 	mov	r4,zero
10002218:	000b883a 	mov	r5,zero
1000221c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10002220:	0009883a 	mov	r4,zero
10002224:	01400484 	movi	r5,18
10002228:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
1000222c:	0009883a 	mov	r4,zero
10002230:	01415104 	movi	r5,1348
10002234:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002238:	0009883a 	mov	r4,zero
1000223c:	01400204 	movi	r5,8
10002240:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002244:	0009883a 	mov	r4,zero
10002248:	0140a404 	movi	r5,656
1000224c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002250:	0009883a 	mov	r4,zero
10002254:	01401044 	movi	r5,65
10002258:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
1000225c:	0009883a 	mov	r4,zero
10002260:	014004c4 	movi	r5,19
10002264:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002268:	0009883a 	mov	r4,zero
1000226c:	01414804 	movi	r5,1312
10002270:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10002274:	0009883a 	mov	r4,zero
10002278:	01415304 	movi	r5,1356
1000227c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002280:	0009883a 	mov	r4,zero
10002284:	01400204 	movi	r5,8
10002288:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
1000228c:	0009883a 	mov	r4,zero
10002290:	0140a404 	movi	r5,656
10002294:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
10002298:	0009883a 	mov	r4,zero
1000229c:	01400044 	movi	r5,1
100022a0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100022a4:	0009883a 	mov	r4,zero
100022a8:	014004c4 	movi	r5,19
100022ac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100022b0:	0009883a 	mov	r4,zero
100022b4:	01414b04 	movi	r5,1324
100022b8:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
100022bc:	0009883a 	mov	r4,zero
100022c0:	01415504 	movi	r5,1364
100022c4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
100022c8:	0009883a 	mov	r4,zero
100022cc:	01400084 	movi	r5,2
100022d0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100022d4:	0009883a 	mov	r4,zero
100022d8:	0140a404 	movi	r5,656
100022dc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100022e0:	0009883a 	mov	r4,zero
100022e4:	01401044 	movi	r5,65
100022e8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100022ec:	0009883a 	mov	r4,zero
100022f0:	014004c4 	movi	r5,19
100022f4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
100022f8:	0009883a 	mov	r4,zero
100022fc:	01414e04 	movi	r5,1336
10002300:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10002304:	0009883a 	mov	r4,zero
10002308:	000b883a 	mov	r5,zero
1000230c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10002310:	0009883a 	mov	r4,zero
10002314:	000b883a 	mov	r5,zero
10002318:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
1000231c:	0009883a 	mov	r4,zero
10002320:	01408404 	movi	r5,528
10002324:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10002328:	0009883a 	mov	r4,zero
1000232c:	01401044 	movi	r5,65
10002330:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10002334:	0009883a 	mov	r4,zero
10002338:	014004c4 	movi	r5,19
1000233c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10002340:	0009883a 	mov	r4,zero
10002344:	000b883a 	mov	r5,zero
10002348:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000234c:	01006c04 	movi	r4,432
10002350:	01414004 	movi	r5,1280
10002354:	0001e100 	call	10001e10 <UsbWrite>
}
10002358:	e037883a 	mov	sp,fp
1000235c:	dfc00117 	ldw	ra,4(sp)
10002360:	df000017 	ldw	fp,0(sp)
10002364:	dec00204 	addi	sp,sp,8
10002368:	f800283a 	ret

1000236c <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
1000236c:	defffe04 	addi	sp,sp,-8
10002370:	dfc00115 	stw	ra,4(sp)
10002374:	df000015 	stw	fp,0(sp)
10002378:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000237c:	01000084 	movi	r4,2
10002380:	01414004 	movi	r5,1280
10002384:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002388:	0009883a 	mov	r4,zero
1000238c:	01414304 	movi	r5,1292
10002390:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002394:	0009883a 	mov	r4,zero
10002398:	01400204 	movi	r5,8
1000239c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100023a0:	0009883a 	mov	r4,zero
100023a4:	0140b404 	movi	r5,720
100023a8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
100023ac:	0009883a 	mov	r4,zero
100023b0:	01400044 	movi	r5,1
100023b4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
100023b8:	0009883a 	mov	r4,zero
100023bc:	014004c4 	movi	r5,19
100023c0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
100023c4:	0009883a 	mov	r4,zero
100023c8:	01414504 	movi	r5,1300
100023cc:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100023d0:	0009883a 	mov	r4,zero
100023d4:	0141a004 	movi	r5,1664
100023d8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
100023dc:	0009883a 	mov	r4,zero
100023e0:	01408004 	movi	r5,512
100023e4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100023e8:	0009883a 	mov	r4,zero
100023ec:	000b883a 	mov	r5,zero
100023f0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
100023f4:	0009883a 	mov	r4,zero
100023f8:	01400244 	movi	r5,9
100023fc:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10002400:	0009883a 	mov	r4,zero
10002404:	01415104 	movi	r5,1348
10002408:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
1000240c:	0009883a 	mov	r4,zero
10002410:	01400204 	movi	r5,8
10002414:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002418:	0009883a 	mov	r4,zero
1000241c:	0140a404 	movi	r5,656
10002420:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002424:	0009883a 	mov	r4,zero
10002428:	01401044 	movi	r5,65
1000242c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002430:	0009883a 	mov	r4,zero
10002434:	014004c4 	movi	r5,19
10002438:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
1000243c:	0009883a 	mov	r4,zero
10002440:	01414804 	movi	r5,1312
10002444:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10002448:	0009883a 	mov	r4,zero
1000244c:	01415304 	movi	r5,1356
10002450:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
10002454:	0009883a 	mov	r4,zero
10002458:	01400044 	movi	r5,1
1000245c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002460:	0009883a 	mov	r4,zero
10002464:	0140a404 	movi	r5,656
10002468:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
1000246c:	0009883a 	mov	r4,zero
10002470:	01400044 	movi	r5,1
10002474:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002478:	0009883a 	mov	r4,zero
1000247c:	014004c4 	movi	r5,19
10002480:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002484:	0009883a 	mov	r4,zero
10002488:	01414b04 	movi	r5,1324
1000248c:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10002490:	0009883a 	mov	r4,zero
10002494:	000b883a 	mov	r5,zero
10002498:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
1000249c:	0009883a 	mov	r4,zero
100024a0:	000b883a 	mov	r5,zero
100024a4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
100024a8:	0009883a 	mov	r4,zero
100024ac:	01408404 	movi	r5,528
100024b0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100024b4:	0009883a 	mov	r4,zero
100024b8:	01401044 	movi	r5,65
100024bc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100024c0:	0009883a 	mov	r4,zero
100024c4:	014004c4 	movi	r5,19
100024c8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100024cc:	0009883a 	mov	r4,zero
100024d0:	000b883a 	mov	r5,zero
100024d4:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100024d8:	01006c04 	movi	r4,432
100024dc:	01414004 	movi	r5,1280
100024e0:	0001e100 	call	10001e10 <UsbWrite>
}
100024e4:	e037883a 	mov	sp,fp
100024e8:	dfc00117 	ldw	ra,4(sp)
100024ec:	df000017 	ldw	fp,0(sp)
100024f0:	dec00204 	addi	sp,sp,8
100024f4:	f800283a 	ret

100024f8 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
100024f8:	defffe04 	addi	sp,sp,-8
100024fc:	dfc00115 	stw	ra,4(sp)
10002500:	df000015 	stw	fp,0(sp)
10002504:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002508:	01000084 	movi	r4,2
1000250c:	01414004 	movi	r5,1280
10002510:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002514:	0009883a 	mov	r4,zero
10002518:	01414304 	movi	r5,1292
1000251c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002520:	0009883a 	mov	r4,zero
10002524:	01400204 	movi	r5,8
10002528:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
1000252c:	0009883a 	mov	r4,zero
10002530:	0140b404 	movi	r5,720
10002534:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002538:	0009883a 	mov	r4,zero
1000253c:	01400044 	movi	r5,1
10002540:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002544:	0009883a 	mov	r4,zero
10002548:	014004c4 	movi	r5,19
1000254c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002550:	0009883a 	mov	r4,zero
10002554:	01414504 	movi	r5,1300
10002558:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
1000255c:	0009883a 	mov	r4,zero
10002560:	0141a004 	movi	r5,1664
10002564:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10002568:	0009883a 	mov	r4,zero
1000256c:	01408004 	movi	r5,512
10002570:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002574:	0009883a 	mov	r4,zero
10002578:	000b883a 	mov	r5,zero
1000257c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
10002580:	0009883a 	mov	r4,zero
10002584:	01403fc4 	movi	r5,255
10002588:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
1000258c:	0009883a 	mov	r4,zero
10002590:	01415704 	movi	r5,1372
10002594:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002598:	0009883a 	mov	r4,zero
1000259c:	01400204 	movi	r5,8
100025a0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100025a4:	0009883a 	mov	r4,zero
100025a8:	0140a404 	movi	r5,656
100025ac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100025b0:	0009883a 	mov	r4,zero
100025b4:	01401044 	movi	r5,65
100025b8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100025bc:	0009883a 	mov	r4,zero
100025c0:	014004c4 	movi	r5,19
100025c4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100025c8:	0009883a 	mov	r4,zero
100025cc:	01414804 	movi	r5,1312
100025d0:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
100025d4:	0009883a 	mov	r4,zero
100025d8:	01415904 	movi	r5,1380
100025dc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100025e0:	0009883a 	mov	r4,zero
100025e4:	01400204 	movi	r5,8
100025e8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100025ec:	0009883a 	mov	r4,zero
100025f0:	0140a404 	movi	r5,656
100025f4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100025f8:	0009883a 	mov	r4,zero
100025fc:	01400044 	movi	r5,1
10002600:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002604:	0009883a 	mov	r4,zero
10002608:	014004c4 	movi	r5,19
1000260c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002610:	0009883a 	mov	r4,zero
10002614:	01414b04 	movi	r5,1324
10002618:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
1000261c:	0009883a 	mov	r4,zero
10002620:	01415b04 	movi	r5,1388
10002624:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002628:	0009883a 	mov	r4,zero
1000262c:	01400204 	movi	r5,8
10002630:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10002634:	0009883a 	mov	r4,zero
10002638:	0140a404 	movi	r5,656
1000263c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002640:	0009883a 	mov	r4,zero
10002644:	01401044 	movi	r5,65
10002648:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
1000264c:	0009883a 	mov	r4,zero
10002650:	014004c4 	movi	r5,19
10002654:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10002658:	0009883a 	mov	r4,zero
1000265c:	01414e04 	movi	r5,1336
10002660:	00002480 	call	10000248 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
10002664:	0009883a 	mov	r4,zero
10002668:	01415d04 	movi	r5,1396
1000266c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10002670:	0009883a 	mov	r4,zero
10002674:	01400204 	movi	r5,8
10002678:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
1000267c:	0009883a 	mov	r4,zero
10002680:	0140a404 	movi	r5,656
10002684:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002688:	0009883a 	mov	r4,zero
1000268c:	01400044 	movi	r5,1
10002690:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10002694:	0009883a 	mov	r4,zero
10002698:	014004c4 	movi	r5,19
1000269c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
100026a0:	0009883a 	mov	r4,zero
100026a4:	01415104 	movi	r5,1348
100026a8:	00002480 	call	10000248 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
100026ac:	0009883a 	mov	r4,zero
100026b0:	01415f04 	movi	r5,1404
100026b4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
100026b8:	0009883a 	mov	r4,zero
100026bc:	01400084 	movi	r5,2
100026c0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100026c4:	0009883a 	mov	r4,zero
100026c8:	0140a404 	movi	r5,656
100026cc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
100026d0:	0009883a 	mov	r4,zero
100026d4:	01401044 	movi	r5,65
100026d8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100026dc:	0009883a 	mov	r4,zero
100026e0:	014004c4 	movi	r5,19
100026e4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
100026e8:	0009883a 	mov	r4,zero
100026ec:	01415404 	movi	r5,1360
100026f0:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
100026f4:	0009883a 	mov	r4,zero
100026f8:	000b883a 	mov	r5,zero
100026fc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10002700:	0009883a 	mov	r4,zero
10002704:	000b883a 	mov	r5,zero
10002708:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
1000270c:	0009883a 	mov	r4,zero
10002710:	01408404 	movi	r5,528
10002714:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10002718:	0009883a 	mov	r4,zero
1000271c:	01401044 	movi	r5,65
10002720:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002724:	0009883a 	mov	r4,zero
10002728:	014004c4 	movi	r5,19
1000272c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10002730:	0009883a 	mov	r4,zero
10002734:	000b883a 	mov	r5,zero
10002738:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000273c:	01006c04 	movi	r4,432
10002740:	01414004 	movi	r5,1280
10002744:	0001e100 	call	10001e10 <UsbWrite>
}
10002748:	e037883a 	mov	sp,fp
1000274c:	dfc00117 	ldw	ra,4(sp)
10002750:	df000017 	ldw	fp,0(sp)
10002754:	dec00204 	addi	sp,sp,8
10002758:	f800283a 	ret

1000275c <UsbSetConfig>:

void UsbSetConfig()
{
1000275c:	defffe04 	addi	sp,sp,-8
10002760:	dfc00115 	stw	ra,4(sp)
10002764:	df000015 	stw	fp,0(sp)
10002768:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000276c:	01000084 	movi	r4,2
10002770:	01414004 	movi	r5,1280
10002774:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002778:	0009883a 	mov	r4,zero
1000277c:	01414304 	movi	r5,1292
10002780:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002784:	0009883a 	mov	r4,zero
10002788:	01400204 	movi	r5,8
1000278c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10002790:	0009883a 	mov	r4,zero
10002794:	0140b404 	movi	r5,720
10002798:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000279c:	0009883a 	mov	r4,zero
100027a0:	01400044 	movi	r5,1
100027a4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
100027a8:	0009883a 	mov	r4,zero
100027ac:	014004c4 	movi	r5,19
100027b0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
100027b4:	0009883a 	mov	r4,zero
100027b8:	01414504 	movi	r5,1300
100027bc:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
100027c0:	0009883a 	mov	r4,zero
100027c4:	01424004 	movi	r5,2304
100027c8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
100027cc:	0009883a 	mov	r4,zero
100027d0:	01400044 	movi	r5,1
100027d4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
100027d8:	0009883a 	mov	r4,zero
100027dc:	000b883a 	mov	r5,zero
100027e0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
100027e4:	0009883a 	mov	r4,zero
100027e8:	000b883a 	mov	r5,zero
100027ec:	00002480 	call	10000248 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
100027f0:	0009883a 	mov	r4,zero
100027f4:	000b883a 	mov	r5,zero
100027f8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
100027fc:	0009883a 	mov	r4,zero
10002800:	000b883a 	mov	r5,zero
10002804:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10002808:	0009883a 	mov	r4,zero
1000280c:	0140a404 	movi	r5,656
10002810:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10002814:	0009883a 	mov	r4,zero
10002818:	01401044 	movi	r5,65
1000281c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002820:	0009883a 	mov	r4,zero
10002824:	014004c4 	movi	r5,19
10002828:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000282c:	0009883a 	mov	r4,zero
10002830:	000b883a 	mov	r5,zero
10002834:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002838:	01006c04 	movi	r4,432
1000283c:	01414004 	movi	r5,1280
10002840:	0001e100 	call	10001e10 <UsbWrite>

}
10002844:	e037883a 	mov	sp,fp
10002848:	dfc00117 	ldw	ra,4(sp)
1000284c:	df000017 	ldw	fp,0(sp)
10002850:	dec00204 	addi	sp,sp,8
10002854:	f800283a 	ret

10002858 <UsbClassRequest>:

void UsbClassRequest()
{
10002858:	defffe04 	addi	sp,sp,-8
1000285c:	dfc00115 	stw	ra,4(sp)
10002860:	df000015 	stw	fp,0(sp)
10002864:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002868:	01000084 	movi	r4,2
1000286c:	01414004 	movi	r5,1280
10002870:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002874:	0009883a 	mov	r4,zero
10002878:	01414304 	movi	r5,1292
1000287c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002880:	0009883a 	mov	r4,zero
10002884:	01400204 	movi	r5,8
10002888:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
1000288c:	0009883a 	mov	r4,zero
10002890:	0140b404 	movi	r5,720
10002894:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002898:	0009883a 	mov	r4,zero
1000289c:	01400044 	movi	r5,1
100028a0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
100028a4:	0009883a 	mov	r4,zero
100028a8:	014004c4 	movi	r5,19
100028ac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
100028b0:	0009883a 	mov	r4,zero
100028b4:	01414504 	movi	r5,1300
100028b8:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
100028bc:	0009883a 	mov	r4,zero
100028c0:	01428844 	movi	r5,2593
100028c4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
100028c8:	0009883a 	mov	r4,zero
100028cc:	000b883a 	mov	r5,zero
100028d0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
100028d4:	0009883a 	mov	r4,zero
100028d8:	000b883a 	mov	r5,zero
100028dc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
100028e0:	0009883a 	mov	r4,zero
100028e4:	000b883a 	mov	r5,zero
100028e8:	00002480 	call	10000248 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
100028ec:	0009883a 	mov	r4,zero
100028f0:	000b883a 	mov	r5,zero
100028f4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
100028f8:	0009883a 	mov	r4,zero
100028fc:	000b883a 	mov	r5,zero
10002900:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10002904:	0009883a 	mov	r4,zero
10002908:	0140a404 	movi	r5,656
1000290c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10002910:	0009883a 	mov	r4,zero
10002914:	01401044 	movi	r5,65
10002918:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000291c:	0009883a 	mov	r4,zero
10002920:	014004c4 	movi	r5,19
10002924:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002928:	0009883a 	mov	r4,zero
1000292c:	000b883a 	mov	r5,zero
10002930:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002934:	01006c04 	movi	r4,432
10002938:	01414004 	movi	r5,1280
1000293c:	0001e100 	call	10001e10 <UsbWrite>
}
10002940:	e037883a 	mov	sp,fp
10002944:	dfc00117 	ldw	ra,4(sp)
10002948:	df000017 	ldw	fp,0(sp)
1000294c:	dec00204 	addi	sp,sp,8
10002950:	f800283a 	ret

10002954 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10002954:	defffe04 	addi	sp,sp,-8
10002958:	dfc00115 	stw	ra,4(sp)
1000295c:	df000015 	stw	fp,0(sp)
10002960:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002964:	01000084 	movi	r4,2
10002968:	01414004 	movi	r5,1280
1000296c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002970:	0009883a 	mov	r4,zero
10002974:	01414304 	movi	r5,1292
10002978:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000297c:	0009883a 	mov	r4,zero
10002980:	01400204 	movi	r5,8
10002984:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10002988:	0009883a 	mov	r4,zero
1000298c:	0140b404 	movi	r5,720
10002990:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002994:	0009883a 	mov	r4,zero
10002998:	01400044 	movi	r5,1
1000299c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
100029a0:	0009883a 	mov	r4,zero
100029a4:	014004c4 	movi	r5,19
100029a8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
100029ac:	0009883a 	mov	r4,zero
100029b0:	01414504 	movi	r5,1300
100029b4:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
100029b8:	0009883a 	mov	r4,zero
100029bc:	0141a044 	movi	r5,1665
100029c0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
100029c4:	0009883a 	mov	r4,zero
100029c8:	01484004 	movi	r5,8448
100029cc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100029d0:	0009883a 	mov	r4,zero
100029d4:	000b883a 	mov	r5,zero
100029d8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
100029dc:	0009883a 	mov	r4,zero
100029e0:	01401ec4 	movi	r5,123
100029e4:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
100029e8:	0009883a 	mov	r4,zero
100029ec:	01415104 	movi	r5,1348
100029f0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100029f4:	0009883a 	mov	r4,zero
100029f8:	01400204 	movi	r5,8
100029fc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002a00:	0009883a 	mov	r4,zero
10002a04:	0140a404 	movi	r5,656
10002a08:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002a0c:	0009883a 	mov	r4,zero
10002a10:	01401044 	movi	r5,65
10002a14:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002a18:	0009883a 	mov	r4,zero
10002a1c:	014004c4 	movi	r5,19
10002a20:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002a24:	0009883a 	mov	r4,zero
10002a28:	01414804 	movi	r5,1312
10002a2c:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10002a30:	0009883a 	mov	r4,zero
10002a34:	000b883a 	mov	r5,zero
10002a38:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002a3c:	0009883a 	mov	r4,zero
10002a40:	000b883a 	mov	r5,zero
10002a44:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10002a48:	0009883a 	mov	r4,zero
10002a4c:	01408404 	movi	r5,528
10002a50:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002a54:	0009883a 	mov	r4,zero
10002a58:	01401044 	movi	r5,65
10002a5c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002a60:	0009883a 	mov	r4,zero
10002a64:	014004c4 	movi	r5,19
10002a68:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002a6c:	0009883a 	mov	r4,zero
10002a70:	000b883a 	mov	r5,zero
10002a74:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002a78:	01006c04 	movi	r4,432
10002a7c:	01414004 	movi	r5,1280
10002a80:	0001e100 	call	10001e10 <UsbWrite>

}
10002a84:	e037883a 	mov	sp,fp
10002a88:	dfc00117 	ldw	ra,4(sp)
10002a8c:	df000017 	ldw	fp,0(sp)
10002a90:	dec00204 	addi	sp,sp,8
10002a94:	f800283a 	ret

10002a98 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10002a98:	defffe04 	addi	sp,sp,-8
10002a9c:	dfc00115 	stw	ra,4(sp)
10002aa0:	df000015 	stw	fp,0(sp)
10002aa4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002aa8:	01000084 	movi	r4,2
10002aac:	01414004 	movi	r5,1280
10002ab0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002ab4:	0009883a 	mov	r4,zero
10002ab8:	01414304 	movi	r5,1292
10002abc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002ac0:	0009883a 	mov	r4,zero
10002ac4:	01400204 	movi	r5,8
10002ac8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002acc:	0009883a 	mov	r4,zero
10002ad0:	0140b404 	movi	r5,720
10002ad4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002ad8:	0009883a 	mov	r4,zero
10002adc:	01400044 	movi	r5,1
10002ae0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002ae4:	0009883a 	mov	r4,zero
10002ae8:	014004c4 	movi	r5,19
10002aec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002af0:	0009883a 	mov	r4,zero
10002af4:	01414504 	movi	r5,1300
10002af8:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10002afc:	0009883a 	mov	r4,zero
10002b00:	0141a044 	movi	r5,1665
10002b04:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10002b08:	0009883a 	mov	r4,zero
10002b0c:	01488004 	movi	r5,8704
10002b10:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002b14:	0009883a 	mov	r4,zero
10002b18:	000b883a 	mov	r5,zero
10002b1c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10002b20:	0009883a 	mov	r4,zero
10002b24:	01401ec4 	movi	r5,123
10002b28:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10002b2c:	0009883a 	mov	r4,zero
10002b30:	01416004 	movi	r5,1408
10002b34:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002b38:	0009883a 	mov	r4,zero
10002b3c:	01400204 	movi	r5,8
10002b40:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002b44:	0009883a 	mov	r4,zero
10002b48:	0140a404 	movi	r5,656
10002b4c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002b50:	0009883a 	mov	r4,zero
10002b54:	01401044 	movi	r5,65
10002b58:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002b5c:	0009883a 	mov	r4,zero
10002b60:	014004c4 	movi	r5,19
10002b64:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002b68:	0009883a 	mov	r4,zero
10002b6c:	01414804 	movi	r5,1312
10002b70:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10002b74:	0009883a 	mov	r4,zero
10002b78:	01416204 	movi	r5,1416
10002b7c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002b80:	0009883a 	mov	r4,zero
10002b84:	01400204 	movi	r5,8
10002b88:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002b8c:	0009883a 	mov	r4,zero
10002b90:	0140a404 	movi	r5,656
10002b94:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002b98:	0009883a 	mov	r4,zero
10002b9c:	01400044 	movi	r5,1
10002ba0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002ba4:	0009883a 	mov	r4,zero
10002ba8:	014004c4 	movi	r5,19
10002bac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002bb0:	0009883a 	mov	r4,zero
10002bb4:	01414b04 	movi	r5,1324
10002bb8:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10002bbc:	0009883a 	mov	r4,zero
10002bc0:	01416404 	movi	r5,1424
10002bc4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002bc8:	0009883a 	mov	r4,zero
10002bcc:	01400204 	movi	r5,8
10002bd0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10002bd4:	0009883a 	mov	r4,zero
10002bd8:	0140a404 	movi	r5,656
10002bdc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002be0:	0009883a 	mov	r4,zero
10002be4:	01401044 	movi	r5,65
10002be8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002bec:	0009883a 	mov	r4,zero
10002bf0:	014004c4 	movi	r5,19
10002bf4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10002bf8:	0009883a 	mov	r4,zero
10002bfc:	01414e04 	movi	r5,1336
10002c00:	00002480 	call	10000248 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10002c04:	0009883a 	mov	r4,zero
10002c08:	01416604 	movi	r5,1432
10002c0c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10002c10:	0009883a 	mov	r4,zero
10002c14:	01400204 	movi	r5,8
10002c18:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002c1c:	0009883a 	mov	r4,zero
10002c20:	0140a404 	movi	r5,656
10002c24:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002c28:	0009883a 	mov	r4,zero
10002c2c:	01400044 	movi	r5,1
10002c30:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10002c34:	0009883a 	mov	r4,zero
10002c38:	014004c4 	movi	r5,19
10002c3c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10002c40:	0009883a 	mov	r4,zero
10002c44:	01415104 	movi	r5,1348
10002c48:	00002480 	call	10000248 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10002c4c:	0009883a 	mov	r4,zero
10002c50:	01416804 	movi	r5,1440
10002c54:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002c58:	0009883a 	mov	r4,zero
10002c5c:	01400204 	movi	r5,8
10002c60:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002c64:	0009883a 	mov	r4,zero
10002c68:	0140a404 	movi	r5,656
10002c6c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10002c70:	0009883a 	mov	r4,zero
10002c74:	01401044 	movi	r5,65
10002c78:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002c7c:	0009883a 	mov	r4,zero
10002c80:	014004c4 	movi	r5,19
10002c84:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10002c88:	0009883a 	mov	r4,zero
10002c8c:	01415404 	movi	r5,1360
10002c90:	00002480 	call	10000248 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10002c94:	0009883a 	mov	r4,zero
10002c98:	01416a04 	movi	r5,1448
10002c9c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002ca0:	0009883a 	mov	r4,zero
10002ca4:	01400204 	movi	r5,8
10002ca8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002cac:	0009883a 	mov	r4,zero
10002cb0:	0140a404 	movi	r5,656
10002cb4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002cb8:	0009883a 	mov	r4,zero
10002cbc:	01400044 	movi	r5,1
10002cc0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002cc4:	0009883a 	mov	r4,zero
10002cc8:	014004c4 	movi	r5,19
10002ccc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10002cd0:	0009883a 	mov	r4,zero
10002cd4:	01415704 	movi	r5,1372
10002cd8:	00002480 	call	10000248 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10002cdc:	0009883a 	mov	r4,zero
10002ce0:	01416c04 	movi	r5,1456
10002ce4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002ce8:	0009883a 	mov	r4,zero
10002cec:	01400204 	movi	r5,8
10002cf0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10002cf4:	0009883a 	mov	r4,zero
10002cf8:	0140a404 	movi	r5,656
10002cfc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10002d00:	0009883a 	mov	r4,zero
10002d04:	01401044 	movi	r5,65
10002d08:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002d0c:	0009883a 	mov	r4,zero
10002d10:	014004c4 	movi	r5,19
10002d14:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10002d18:	0009883a 	mov	r4,zero
10002d1c:	01415a04 	movi	r5,1384
10002d20:	00002480 	call	10000248 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10002d24:	0009883a 	mov	r4,zero
10002d28:	01416e04 	movi	r5,1464
10002d2c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10002d30:	0009883a 	mov	r4,zero
10002d34:	014000c4 	movi	r5,3
10002d38:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10002d3c:	0009883a 	mov	r4,zero
10002d40:	0140a404 	movi	r5,656
10002d44:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10002d48:	0009883a 	mov	r4,zero
10002d4c:	01400044 	movi	r5,1
10002d50:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10002d54:	0009883a 	mov	r4,zero
10002d58:	014004c4 	movi	r5,19
10002d5c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10002d60:	0009883a 	mov	r4,zero
10002d64:	01415d04 	movi	r5,1396
10002d68:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10002d6c:	0009883a 	mov	r4,zero
10002d70:	000b883a 	mov	r5,zero
10002d74:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002d78:	0009883a 	mov	r4,zero
10002d7c:	000b883a 	mov	r5,zero
10002d80:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
10002d84:	0009883a 	mov	r4,zero
10002d88:	01408404 	movi	r5,528
10002d8c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002d90:	0009883a 	mov	r4,zero
10002d94:	01401044 	movi	r5,65
10002d98:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002d9c:	0009883a 	mov	r4,zero
10002da0:	014004c4 	movi	r5,19
10002da4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002da8:	0009883a 	mov	r4,zero
10002dac:	000b883a 	mov	r5,zero
10002db0:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002db4:	01006c04 	movi	r4,432
10002db8:	01414004 	movi	r5,1280
10002dbc:	0001e100 	call	10001e10 <UsbWrite>

}
10002dc0:	e037883a 	mov	sp,fp
10002dc4:	dfc00117 	ldw	ra,4(sp)
10002dc8:	df000017 	ldw	fp,0(sp)
10002dcc:	dec00204 	addi	sp,sp,8
10002dd0:	f800283a 	ret

10002dd4 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10002dd4:	defffd04 	addi	sp,sp,-12
10002dd8:	dfc00215 	stw	ra,8(sp)
10002ddc:	df000115 	stw	fp,4(sp)
10002de0:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10002de4:	01005104 	movi	r4,324
10002de8:	0001e640 	call	10001e64 <UsbRead>
10002dec:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002df0:	01005104 	movi	r4,324
10002df4:	000b883a 	mov	r5,zero
10002df8:	0001e100 	call	10001e10 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002dfc:	00000d06 	br	10002e34 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
10002e00:	e0bfff0b 	ldhu	r2,-4(fp)
10002e04:	10000526 	beq	r2,zero,10002e1c <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
10002e08:	e0bfff0b 	ldhu	r2,-4(fp)
10002e0c:	01040074 	movhi	r4,4097
10002e10:	21131e04 	addi	r4,r4,19576
10002e14:	100b883a 	mov	r5,r2
10002e18:	00044f80 	call	100044f8 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002e1c:	01005104 	movi	r4,324
10002e20:	0001e640 	call	10001e64 <UsbRead>
10002e24:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002e28:	01005104 	movi	r4,324
10002e2c:	000b883a 	mov	r5,zero
10002e30:	0001e100 	call	10001e10 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002e34:	e0bfff0b 	ldhu	r2,-4(fp)
10002e38:	10840018 	cmpnei	r2,r2,4096
10002e3c:	103ff01e 	bne	r2,zero,10002e00 <__alt_data_end+0xf8002e00>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
10002e40:	e0bfff0b 	ldhu	r2,-4(fp)
}
10002e44:	e037883a 	mov	sp,fp
10002e48:	dfc00117 	ldw	ra,4(sp)
10002e4c:	df000017 	ldw	fp,0(sp)
10002e50:	dec00204 	addi	sp,sp,8
10002e54:	f800283a 	ret

10002e58 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10002e58:	defffd04 	addi	sp,sp,-12
10002e5c:	dfc00215 	stw	ra,8(sp)
10002e60:	df000115 	stw	fp,4(sp)
10002e64:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10002e68:	010000c4 	movi	r4,3
10002e6c:	00002c00 	call	100002c0 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10002e70:	01005104 	movi	r4,324
10002e74:	0001e640 	call	10001e64 <UsbRead>
10002e78:	10bfffcc 	andi	r2,r2,65535
10002e7c:	10840018 	cmpnei	r2,r2,4096
10002e80:	1000091e 	bne	r2,zero,10002ea8 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002e84:	01005104 	movi	r4,324
10002e88:	000b883a 	mov	r5,zero
10002e8c:	0001e100 	call	10001e10 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002e90:	0001883a 	nop
10002e94:	010000c4 	movi	r4,3
10002e98:	00002c00 	call	100002c0 <IO_read>
10002e9c:	10bfffcc 	andi	r2,r2,65535
10002ea0:	1080040c 	andi	r2,r2,16
10002ea4:	103ffb26 	beq	r2,zero,10002e94 <__alt_data_end+0xf8002e94>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10002ea8:	01000084 	movi	r4,2
10002eac:	01414204 	movi	r5,1288
10002eb0:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10002eb4:	0009883a 	mov	r4,zero
10002eb8:	00002c00 	call	100002c0 <IO_read>
10002ebc:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
10002ec0:	e0bfff0b 	ldhu	r2,-4(fp)
}
10002ec4:	e037883a 	mov	sp,fp
10002ec8:	dfc00117 	ldw	ra,4(sp)
10002ecc:	df000017 	ldw	fp,0(sp)
10002ed0:	dec00204 	addi	sp,sp,8
10002ed4:	f800283a 	ret

10002ed8 <UsbPrintMem>:


void UsbPrintMem()
{
10002ed8:	defffc04 	addi	sp,sp,-16
10002edc:	dfc00315 	stw	ra,12(sp)
10002ee0:	df000215 	stw	fp,8(sp)
10002ee4:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10002ee8:	01000084 	movi	r4,2
10002eec:	01414004 	movi	r5,1280
10002ef0:	00002480 	call	10000248 <IO_write>
	for (i = 0; i <= 200; i += 2)
10002ef4:	e03ffe15 	stw	zero,-8(fp)
10002ef8:	00000e06 	br	10002f34 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
10002efc:	0009883a 	mov	r4,zero
10002f00:	00002c00 	call	100002c0 <IO_read>
10002f04:	10bfffcc 	andi	r2,r2,65535
10002f08:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10002f0c:	e0bffe17 	ldw	r2,-8(fp)
10002f10:	10814004 	addi	r2,r2,1280
10002f14:	01040074 	movhi	r4,4097
10002f18:	21132604 	addi	r4,r4,19608
10002f1c:	100b883a 	mov	r5,r2
10002f20:	e1bfff17 	ldw	r6,-4(fp)
10002f24:	00044f80 	call	100044f8 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10002f28:	e0bffe17 	ldw	r2,-8(fp)
10002f2c:	10800084 	addi	r2,r2,2
10002f30:	e0bffe15 	stw	r2,-8(fp)
10002f34:	e0bffe17 	ldw	r2,-8(fp)
10002f38:	10803250 	cmplti	r2,r2,201
10002f3c:	103fef1e 	bne	r2,zero,10002efc <__alt_data_end+0xf8002efc>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
10002f40:	e037883a 	mov	sp,fp
10002f44:	dfc00117 	ldw	ra,4(sp)
10002f48:	df000017 	ldw	fp,0(sp)
10002f4c:	dec00204 	addi	sp,sp,8
10002f50:	f800283a 	ret

10002f54 <udivmodsi4>:
10002f54:	2900182e 	bgeu	r5,r4,10002fb8 <udivmodsi4+0x64>
10002f58:	28001716 	blt	r5,zero,10002fb8 <udivmodsi4+0x64>
10002f5c:	00800804 	movi	r2,32
10002f60:	00c00044 	movi	r3,1
10002f64:	00000206 	br	10002f70 <udivmodsi4+0x1c>
10002f68:	10001126 	beq	r2,zero,10002fb0 <udivmodsi4+0x5c>
10002f6c:	28000516 	blt	r5,zero,10002f84 <udivmodsi4+0x30>
10002f70:	294b883a 	add	r5,r5,r5
10002f74:	10bfffc4 	addi	r2,r2,-1
10002f78:	18c7883a 	add	r3,r3,r3
10002f7c:	293ffa36 	bltu	r5,r4,10002f68 <__alt_data_end+0xf8002f68>
10002f80:	18000b26 	beq	r3,zero,10002fb0 <udivmodsi4+0x5c>
10002f84:	0005883a 	mov	r2,zero
10002f88:	21400236 	bltu	r4,r5,10002f94 <udivmodsi4+0x40>
10002f8c:	2149c83a 	sub	r4,r4,r5
10002f90:	10c4b03a 	or	r2,r2,r3
10002f94:	1806d07a 	srli	r3,r3,1
10002f98:	280ad07a 	srli	r5,r5,1
10002f9c:	183ffa1e 	bne	r3,zero,10002f88 <__alt_data_end+0xf8002f88>
10002fa0:	3000011e 	bne	r6,zero,10002fa8 <udivmodsi4+0x54>
10002fa4:	f800283a 	ret
10002fa8:	2005883a 	mov	r2,r4
10002fac:	f800283a 	ret
10002fb0:	0005883a 	mov	r2,zero
10002fb4:	003ffa06 	br	10002fa0 <__alt_data_end+0xf8002fa0>
10002fb8:	00c00044 	movi	r3,1
10002fbc:	003ff106 	br	10002f84 <__alt_data_end+0xf8002f84>

10002fc0 <__divsi3>:
10002fc0:	defffe04 	addi	sp,sp,-8
10002fc4:	dfc00115 	stw	ra,4(sp)
10002fc8:	dc000015 	stw	r16,0(sp)
10002fcc:	20000b16 	blt	r4,zero,10002ffc <__divsi3+0x3c>
10002fd0:	0021883a 	mov	r16,zero
10002fd4:	28000c16 	blt	r5,zero,10003008 <__divsi3+0x48>
10002fd8:	000d883a 	mov	r6,zero
10002fdc:	0002f540 	call	10002f54 <udivmodsi4>
10002fe0:	0407c83a 	sub	r3,zero,r16
10002fe4:	1884f03a 	xor	r2,r3,r2
10002fe8:	1405883a 	add	r2,r2,r16
10002fec:	dfc00117 	ldw	ra,4(sp)
10002ff0:	dc000017 	ldw	r16,0(sp)
10002ff4:	dec00204 	addi	sp,sp,8
10002ff8:	f800283a 	ret
10002ffc:	0109c83a 	sub	r4,zero,r4
10003000:	04000044 	movi	r16,1
10003004:	283ff40e 	bge	r5,zero,10002fd8 <__alt_data_end+0xf8002fd8>
10003008:	014bc83a 	sub	r5,zero,r5
1000300c:	8400005c 	xori	r16,r16,1
10003010:	003ff106 	br	10002fd8 <__alt_data_end+0xf8002fd8>

10003014 <__modsi3>:
10003014:	defffd04 	addi	sp,sp,-12
10003018:	dfc00215 	stw	ra,8(sp)
1000301c:	dc400115 	stw	r17,4(sp)
10003020:	dc000015 	stw	r16,0(sp)
10003024:	20000c16 	blt	r4,zero,10003058 <__modsi3+0x44>
10003028:	0023883a 	mov	r17,zero
1000302c:	0021883a 	mov	r16,zero
10003030:	28000d16 	blt	r5,zero,10003068 <__modsi3+0x54>
10003034:	01800044 	movi	r6,1
10003038:	0002f540 	call	10002f54 <udivmodsi4>
1000303c:	1404f03a 	xor	r2,r2,r16
10003040:	8885883a 	add	r2,r17,r2
10003044:	dfc00217 	ldw	ra,8(sp)
10003048:	dc400117 	ldw	r17,4(sp)
1000304c:	dc000017 	ldw	r16,0(sp)
10003050:	dec00304 	addi	sp,sp,12
10003054:	f800283a 	ret
10003058:	0109c83a 	sub	r4,zero,r4
1000305c:	04400044 	movi	r17,1
10003060:	043fffc4 	movi	r16,-1
10003064:	283ff30e 	bge	r5,zero,10003034 <__alt_data_end+0xf8003034>
10003068:	014bc83a 	sub	r5,zero,r5
1000306c:	003ff106 	br	10003034 <__alt_data_end+0xf8003034>

10003070 <__udivsi3>:
10003070:	000d883a 	mov	r6,zero
10003074:	0002f541 	jmpi	10002f54 <udivmodsi4>

10003078 <__umodsi3>:
10003078:	01800044 	movi	r6,1
1000307c:	0002f541 	jmpi	10002f54 <udivmodsi4>

10003080 <__mulsi3>:
10003080:	0005883a 	mov	r2,zero
10003084:	20000726 	beq	r4,zero,100030a4 <__mulsi3+0x24>
10003088:	20c0004c 	andi	r3,r4,1
1000308c:	2008d07a 	srli	r4,r4,1
10003090:	18000126 	beq	r3,zero,10003098 <__mulsi3+0x18>
10003094:	1145883a 	add	r2,r2,r5
10003098:	294b883a 	add	r5,r5,r5
1000309c:	203ffa1e 	bne	r4,zero,10003088 <__alt_data_end+0xf8003088>
100030a0:	f800283a 	ret
100030a4:	f800283a 	ret

100030a8 <__addsf3>:
100030a8:	defffc04 	addi	sp,sp,-16
100030ac:	2004d7fa 	srli	r2,r4,31
100030b0:	280ed5fa 	srli	r7,r5,23
100030b4:	dc000015 	stw	r16,0(sp)
100030b8:	01802034 	movhi	r6,128
100030bc:	2020d5fa 	srli	r16,r4,23
100030c0:	31bfffc4 	addi	r6,r6,-1
100030c4:	2810d7fa 	srli	r8,r5,31
100030c8:	3108703a 	and	r4,r6,r4
100030cc:	dc800215 	stw	r18,8(sp)
100030d0:	314c703a 	and	r6,r6,r5
100030d4:	84003fcc 	andi	r16,r16,255
100030d8:	200690fa 	slli	r3,r4,3
100030dc:	dfc00315 	stw	ra,12(sp)
100030e0:	39003fcc 	andi	r4,r7,255
100030e4:	dc400115 	stw	r17,4(sp)
100030e8:	14803fcc 	andi	r18,r2,255
100030ec:	300c90fa 	slli	r6,r6,3
100030f0:	810bc83a 	sub	r5,r16,r4
100030f4:	92004826 	beq	r18,r8,10003218 <__addsf3+0x170>
100030f8:	01406c0e 	bge	zero,r5,100032ac <__addsf3+0x204>
100030fc:	20001e1e 	bne	r4,zero,10003178 <__addsf3+0xd0>
10003100:	3000611e 	bne	r6,zero,10003288 <__addsf3+0x1e0>
10003104:	188001cc 	andi	r2,r3,7
10003108:	10000426 	beq	r2,zero,1000311c <__addsf3+0x74>
1000310c:	190003cc 	andi	r4,r3,15
10003110:	00800104 	movi	r2,4
10003114:	20800126 	beq	r4,r2,1000311c <__addsf3+0x74>
10003118:	18c00104 	addi	r3,r3,4
1000311c:	1901002c 	andhi	r4,r3,1024
10003120:	9005883a 	mov	r2,r18
10003124:	20003426 	beq	r4,zero,100031f8 <__addsf3+0x150>
10003128:	81400044 	addi	r5,r16,1
1000312c:	01003fc4 	movi	r4,255
10003130:	29006926 	beq	r5,r4,100032d8 <__addsf3+0x230>
10003134:	180691ba 	slli	r3,r3,6
10003138:	1808d27a 	srli	r4,r3,9
1000313c:	29403fcc 	andi	r5,r5,255
10003140:	280a95fa 	slli	r5,r5,23
10003144:	10803fcc 	andi	r2,r2,255
10003148:	00c02034 	movhi	r3,128
1000314c:	100497fa 	slli	r2,r2,31
10003150:	18ffffc4 	addi	r3,r3,-1
10003154:	20c6703a 	and	r3,r4,r3
10003158:	1946b03a 	or	r3,r3,r5
1000315c:	1884b03a 	or	r2,r3,r2
10003160:	dfc00317 	ldw	ra,12(sp)
10003164:	dc800217 	ldw	r18,8(sp)
10003168:	dc400117 	ldw	r17,4(sp)
1000316c:	dc000017 	ldw	r16,0(sp)
10003170:	dec00404 	addi	sp,sp,16
10003174:	f800283a 	ret
10003178:	00803fc4 	movi	r2,255
1000317c:	80bfe126 	beq	r16,r2,10003104 <__alt_data_end+0xf8003104>
10003180:	31810034 	orhi	r6,r6,1024
10003184:	008006c4 	movi	r2,27
10003188:	11405b0e 	bge	r2,r5,100032f8 <__addsf3+0x250>
1000318c:	01400044 	movi	r5,1
10003190:	1947c83a 	sub	r3,r3,r5
10003194:	1881002c 	andhi	r2,r3,1024
10003198:	10001426 	beq	r2,zero,100031ec <__addsf3+0x144>
1000319c:	04410034 	movhi	r17,1024
100031a0:	8c7fffc4 	addi	r17,r17,-1
100031a4:	1c62703a 	and	r17,r3,r17
100031a8:	8809883a 	mov	r4,r17
100031ac:	00043300 	call	10004330 <__clzsi2>
100031b0:	10bffec4 	addi	r2,r2,-5
100031b4:	88a2983a 	sll	r17,r17,r2
100031b8:	14004a16 	blt	r2,r16,100032e4 <__addsf3+0x23c>
100031bc:	140bc83a 	sub	r5,r2,r16
100031c0:	00c007c4 	movi	r3,31
100031c4:	1947c83a 	sub	r3,r3,r5
100031c8:	88c6983a 	sll	r3,r17,r3
100031cc:	29400044 	addi	r5,r5,1
100031d0:	8962d83a 	srl	r17,r17,r5
100031d4:	1806c03a 	cmpne	r3,r3,zero
100031d8:	0021883a 	mov	r16,zero
100031dc:	1c46b03a 	or	r3,r3,r17
100031e0:	003fc806 	br	10003104 <__alt_data_end+0xf8003104>
100031e4:	1000e526 	beq	r2,zero,1000357c <__addsf3+0x4d4>
100031e8:	1007883a 	mov	r3,r2
100031ec:	188001cc 	andi	r2,r3,7
100031f0:	103fc61e 	bne	r2,zero,1000310c <__alt_data_end+0xf800310c>
100031f4:	9005883a 	mov	r2,r18
100031f8:	01003fc4 	movi	r4,255
100031fc:	1806d0fa 	srli	r3,r3,3
10003200:	81001a26 	beq	r16,r4,1000326c <__addsf3+0x1c4>
10003204:	01002034 	movhi	r4,128
10003208:	213fffc4 	addi	r4,r4,-1
1000320c:	800b883a 	mov	r5,r16
10003210:	1908703a 	and	r4,r3,r4
10003214:	003fc906 	br	1000313c <__alt_data_end+0xf800313c>
10003218:	01403e0e 	bge	zero,r5,10003314 <__addsf3+0x26c>
1000321c:	20001e26 	beq	r4,zero,10003298 <__addsf3+0x1f0>
10003220:	01003fc4 	movi	r4,255
10003224:	813fb726 	beq	r16,r4,10003104 <__alt_data_end+0xf8003104>
10003228:	31810034 	orhi	r6,r6,1024
1000322c:	010006c4 	movi	r4,27
10003230:	2140570e 	bge	r4,r5,10003390 <__addsf3+0x2e8>
10003234:	01400044 	movi	r5,1
10003238:	1947883a 	add	r3,r3,r5
1000323c:	1901002c 	andhi	r4,r3,1024
10003240:	203fea26 	beq	r4,zero,100031ec <__alt_data_end+0xf80031ec>
10003244:	84000044 	addi	r16,r16,1
10003248:	01003fc4 	movi	r4,255
1000324c:	81007526 	beq	r16,r4,10003424 <__addsf3+0x37c>
10003250:	00bf0034 	movhi	r2,64512
10003254:	10bfffc4 	addi	r2,r2,-1
10003258:	1900004c 	andi	r4,r3,1
1000325c:	1886703a 	and	r3,r3,r2
10003260:	1806d07a 	srli	r3,r3,1
10003264:	1906b03a 	or	r3,r3,r4
10003268:	003fa606 	br	10003104 <__alt_data_end+0xf8003104>
1000326c:	18001a26 	beq	r3,zero,100032d8 <__addsf3+0x230>
10003270:	19001034 	orhi	r4,r3,64
10003274:	00c02034 	movhi	r3,128
10003278:	18ffffc4 	addi	r3,r3,-1
1000327c:	017fffc4 	movi	r5,-1
10003280:	20c8703a 	and	r4,r4,r3
10003284:	003fad06 	br	1000313c <__alt_data_end+0xf800313c>
10003288:	297fffc4 	addi	r5,r5,-1
1000328c:	28002c1e 	bne	r5,zero,10003340 <__addsf3+0x298>
10003290:	1987c83a 	sub	r3,r3,r6
10003294:	003fbf06 	br	10003194 <__alt_data_end+0xf8003194>
10003298:	303f9a26 	beq	r6,zero,10003104 <__alt_data_end+0xf8003104>
1000329c:	297fffc4 	addi	r5,r5,-1
100032a0:	28004b1e 	bne	r5,zero,100033d0 <__addsf3+0x328>
100032a4:	1987883a 	add	r3,r3,r6
100032a8:	003fe406 	br	1000323c <__alt_data_end+0xf800323c>
100032ac:	2800271e 	bne	r5,zero,1000334c <__addsf3+0x2a4>
100032b0:	80800044 	addi	r2,r16,1
100032b4:	10803fcc 	andi	r2,r2,255
100032b8:	01000044 	movi	r4,1
100032bc:	2080520e 	bge	r4,r2,10003408 <__addsf3+0x360>
100032c0:	19a3c83a 	sub	r17,r3,r6
100032c4:	8881002c 	andhi	r2,r17,1024
100032c8:	10002c26 	beq	r2,zero,1000337c <__addsf3+0x2d4>
100032cc:	30e3c83a 	sub	r17,r6,r3
100032d0:	4025883a 	mov	r18,r8
100032d4:	003fb406 	br	100031a8 <__alt_data_end+0xf80031a8>
100032d8:	017fffc4 	movi	r5,-1
100032dc:	0009883a 	mov	r4,zero
100032e0:	003f9606 	br	1000313c <__alt_data_end+0xf800313c>
100032e4:	00ff0034 	movhi	r3,64512
100032e8:	18ffffc4 	addi	r3,r3,-1
100032ec:	80a1c83a 	sub	r16,r16,r2
100032f0:	88c6703a 	and	r3,r17,r3
100032f4:	003f8306 	br	10003104 <__alt_data_end+0xf8003104>
100032f8:	00800804 	movi	r2,32
100032fc:	1145c83a 	sub	r2,r2,r5
10003300:	3084983a 	sll	r2,r6,r2
10003304:	314cd83a 	srl	r6,r6,r5
10003308:	100ac03a 	cmpne	r5,r2,zero
1000330c:	298ab03a 	or	r5,r5,r6
10003310:	003f9f06 	br	10003190 <__alt_data_end+0xf8003190>
10003314:	2800451e 	bne	r5,zero,1000342c <__addsf3+0x384>
10003318:	81000044 	addi	r4,r16,1
1000331c:	21c03fcc 	andi	r7,r4,255
10003320:	01400044 	movi	r5,1
10003324:	29c02d0e 	bge	r5,r7,100033dc <__addsf3+0x334>
10003328:	01403fc4 	movi	r5,255
1000332c:	21403c26 	beq	r4,r5,10003420 <__addsf3+0x378>
10003330:	30c7883a 	add	r3,r6,r3
10003334:	1806d07a 	srli	r3,r3,1
10003338:	2021883a 	mov	r16,r4
1000333c:	003f7106 	br	10003104 <__alt_data_end+0xf8003104>
10003340:	00803fc4 	movi	r2,255
10003344:	80bf8f1e 	bne	r16,r2,10003184 <__alt_data_end+0xf8003184>
10003348:	003f6e06 	br	10003104 <__alt_data_end+0xf8003104>
1000334c:	80001726 	beq	r16,zero,100033ac <__addsf3+0x304>
10003350:	00803fc4 	movi	r2,255
10003354:	20801a26 	beq	r4,r2,100033c0 <__addsf3+0x318>
10003358:	014bc83a 	sub	r5,zero,r5
1000335c:	18c10034 	orhi	r3,r3,1024
10003360:	008006c4 	movi	r2,27
10003364:	1140430e 	bge	r2,r5,10003474 <__addsf3+0x3cc>
10003368:	00c00044 	movi	r3,1
1000336c:	30c7c83a 	sub	r3,r6,r3
10003370:	2021883a 	mov	r16,r4
10003374:	4025883a 	mov	r18,r8
10003378:	003f8606 	br	10003194 <__alt_data_end+0xf8003194>
1000337c:	883f8a1e 	bne	r17,zero,100031a8 <__alt_data_end+0xf80031a8>
10003380:	0007883a 	mov	r3,zero
10003384:	0005883a 	mov	r2,zero
10003388:	0021883a 	mov	r16,zero
1000338c:	003f9a06 	br	100031f8 <__alt_data_end+0xf80031f8>
10003390:	01000804 	movi	r4,32
10003394:	2149c83a 	sub	r4,r4,r5
10003398:	3108983a 	sll	r4,r6,r4
1000339c:	314cd83a 	srl	r6,r6,r5
100033a0:	200ac03a 	cmpne	r5,r4,zero
100033a4:	298ab03a 	or	r5,r5,r6
100033a8:	003fa306 	br	10003238 <__alt_data_end+0xf8003238>
100033ac:	18000426 	beq	r3,zero,100033c0 <__addsf3+0x318>
100033b0:	014a303a 	nor	r5,zero,r5
100033b4:	283fed26 	beq	r5,zero,1000336c <__alt_data_end+0xf800336c>
100033b8:	00803fc4 	movi	r2,255
100033bc:	20bfe81e 	bne	r4,r2,10003360 <__alt_data_end+0xf8003360>
100033c0:	3007883a 	mov	r3,r6
100033c4:	2021883a 	mov	r16,r4
100033c8:	4025883a 	mov	r18,r8
100033cc:	003f4d06 	br	10003104 <__alt_data_end+0xf8003104>
100033d0:	01003fc4 	movi	r4,255
100033d4:	813f951e 	bne	r16,r4,1000322c <__alt_data_end+0xf800322c>
100033d8:	003f4a06 	br	10003104 <__alt_data_end+0xf8003104>
100033dc:	8000471e 	bne	r16,zero,100034fc <__addsf3+0x454>
100033e0:	18006126 	beq	r3,zero,10003568 <__addsf3+0x4c0>
100033e4:	303f4726 	beq	r6,zero,10003104 <__alt_data_end+0xf8003104>
100033e8:	1987883a 	add	r3,r3,r6
100033ec:	1881002c 	andhi	r2,r3,1024
100033f0:	103f7e26 	beq	r2,zero,100031ec <__alt_data_end+0xf80031ec>
100033f4:	00bf0034 	movhi	r2,64512
100033f8:	10bfffc4 	addi	r2,r2,-1
100033fc:	2821883a 	mov	r16,r5
10003400:	1886703a 	and	r3,r3,r2
10003404:	003f3f06 	br	10003104 <__alt_data_end+0xf8003104>
10003408:	8000141e 	bne	r16,zero,1000345c <__addsf3+0x3b4>
1000340c:	1800311e 	bne	r3,zero,100034d4 <__addsf3+0x42c>
10003410:	30004626 	beq	r6,zero,1000352c <__addsf3+0x484>
10003414:	3007883a 	mov	r3,r6
10003418:	4025883a 	mov	r18,r8
1000341c:	003f3906 	br	10003104 <__alt_data_end+0xf8003104>
10003420:	2021883a 	mov	r16,r4
10003424:	0007883a 	mov	r3,zero
10003428:	003f7306 	br	100031f8 <__alt_data_end+0xf80031f8>
1000342c:	8000181e 	bne	r16,zero,10003490 <__addsf3+0x3e8>
10003430:	18002f26 	beq	r3,zero,100034f0 <__addsf3+0x448>
10003434:	014a303a 	nor	r5,zero,r5
10003438:	28000526 	beq	r5,zero,10003450 <__addsf3+0x3a8>
1000343c:	01c03fc4 	movi	r7,255
10003440:	21c02b26 	beq	r4,r7,100034f0 <__addsf3+0x448>
10003444:	01c006c4 	movi	r7,27
10003448:	3940400e 	bge	r7,r5,1000354c <__addsf3+0x4a4>
1000344c:	00c00044 	movi	r3,1
10003450:	1987883a 	add	r3,r3,r6
10003454:	2021883a 	mov	r16,r4
10003458:	003f7806 	br	1000323c <__alt_data_end+0xf800323c>
1000345c:	1800111e 	bne	r3,zero,100034a4 <__addsf3+0x3fc>
10003460:	30003526 	beq	r6,zero,10003538 <__addsf3+0x490>
10003464:	3007883a 	mov	r3,r6
10003468:	4025883a 	mov	r18,r8
1000346c:	04003fc4 	movi	r16,255
10003470:	003f2406 	br	10003104 <__alt_data_end+0xf8003104>
10003474:	00800804 	movi	r2,32
10003478:	1145c83a 	sub	r2,r2,r5
1000347c:	1884983a 	sll	r2,r3,r2
10003480:	194ad83a 	srl	r5,r3,r5
10003484:	1006c03a 	cmpne	r3,r2,zero
10003488:	1946b03a 	or	r3,r3,r5
1000348c:	003fb706 	br	1000336c <__alt_data_end+0xf800336c>
10003490:	01c03fc4 	movi	r7,255
10003494:	21c01626 	beq	r4,r7,100034f0 <__addsf3+0x448>
10003498:	014bc83a 	sub	r5,zero,r5
1000349c:	18c10034 	orhi	r3,r3,1024
100034a0:	003fe806 	br	10003444 <__alt_data_end+0xf8003444>
100034a4:	30001f26 	beq	r6,zero,10003524 <__addsf3+0x47c>
100034a8:	1806d0fa 	srli	r3,r3,3
100034ac:	1880102c 	andhi	r2,r3,64
100034b0:	10000526 	beq	r2,zero,100034c8 <__addsf3+0x420>
100034b4:	300cd0fa 	srli	r6,r6,3
100034b8:	3080102c 	andhi	r2,r6,64
100034bc:	1000021e 	bne	r2,zero,100034c8 <__addsf3+0x420>
100034c0:	3007883a 	mov	r3,r6
100034c4:	4025883a 	mov	r18,r8
100034c8:	180690fa 	slli	r3,r3,3
100034cc:	04003fc4 	movi	r16,255
100034d0:	003f0c06 	br	10003104 <__alt_data_end+0xf8003104>
100034d4:	303f0b26 	beq	r6,zero,10003104 <__alt_data_end+0xf8003104>
100034d8:	1985c83a 	sub	r2,r3,r6
100034dc:	1101002c 	andhi	r4,r2,1024
100034e0:	203f4026 	beq	r4,zero,100031e4 <__alt_data_end+0xf80031e4>
100034e4:	30c7c83a 	sub	r3,r6,r3
100034e8:	4025883a 	mov	r18,r8
100034ec:	003f0506 	br	10003104 <__alt_data_end+0xf8003104>
100034f0:	3007883a 	mov	r3,r6
100034f4:	2021883a 	mov	r16,r4
100034f8:	003f0206 	br	10003104 <__alt_data_end+0xf8003104>
100034fc:	18001c26 	beq	r3,zero,10003570 <__addsf3+0x4c8>
10003500:	30000826 	beq	r6,zero,10003524 <__addsf3+0x47c>
10003504:	1806d0fa 	srli	r3,r3,3
10003508:	1880102c 	andhi	r2,r3,64
1000350c:	103fee26 	beq	r2,zero,100034c8 <__alt_data_end+0xf80034c8>
10003510:	300cd0fa 	srli	r6,r6,3
10003514:	3080102c 	andhi	r2,r6,64
10003518:	103feb1e 	bne	r2,zero,100034c8 <__alt_data_end+0xf80034c8>
1000351c:	3007883a 	mov	r3,r6
10003520:	003fe906 	br	100034c8 <__alt_data_end+0xf80034c8>
10003524:	04003fc4 	movi	r16,255
10003528:	003ef606 	br	10003104 <__alt_data_end+0xf8003104>
1000352c:	8007883a 	mov	r3,r16
10003530:	0005883a 	mov	r2,zero
10003534:	003f3006 	br	100031f8 <__alt_data_end+0xf80031f8>
10003538:	00c10034 	movhi	r3,1024
1000353c:	0005883a 	mov	r2,zero
10003540:	18fffe04 	addi	r3,r3,-8
10003544:	04003fc4 	movi	r16,255
10003548:	003f2b06 	br	100031f8 <__alt_data_end+0xf80031f8>
1000354c:	01c00804 	movi	r7,32
10003550:	394fc83a 	sub	r7,r7,r5
10003554:	19ce983a 	sll	r7,r3,r7
10003558:	194ad83a 	srl	r5,r3,r5
1000355c:	3806c03a 	cmpne	r3,r7,zero
10003560:	1946b03a 	or	r3,r3,r5
10003564:	003fba06 	br	10003450 <__alt_data_end+0xf8003450>
10003568:	3007883a 	mov	r3,r6
1000356c:	003ee506 	br	10003104 <__alt_data_end+0xf8003104>
10003570:	3007883a 	mov	r3,r6
10003574:	04003fc4 	movi	r16,255
10003578:	003ee206 	br	10003104 <__alt_data_end+0xf8003104>
1000357c:	0007883a 	mov	r3,zero
10003580:	0005883a 	mov	r2,zero
10003584:	003f1c06 	br	100031f8 <__alt_data_end+0xf80031f8>

10003588 <__gesf2>:
10003588:	2004d5fa 	srli	r2,r4,23
1000358c:	2806d5fa 	srli	r3,r5,23
10003590:	01802034 	movhi	r6,128
10003594:	31bfffc4 	addi	r6,r6,-1
10003598:	10803fcc 	andi	r2,r2,255
1000359c:	01c03fc4 	movi	r7,255
100035a0:	3110703a 	and	r8,r6,r4
100035a4:	18c03fcc 	andi	r3,r3,255
100035a8:	314c703a 	and	r6,r6,r5
100035ac:	2008d7fa 	srli	r4,r4,31
100035b0:	280ad7fa 	srli	r5,r5,31
100035b4:	11c00926 	beq	r2,r7,100035dc <__gesf2+0x54>
100035b8:	19c01226 	beq	r3,r7,10003604 <__gesf2+0x7c>
100035bc:	1000091e 	bne	r2,zero,100035e4 <__gesf2+0x5c>
100035c0:	4013003a 	cmpeq	r9,r8,zero
100035c4:	480f883a 	mov	r7,r9
100035c8:	1800091e 	bne	r3,zero,100035f0 <__gesf2+0x68>
100035cc:	3000081e 	bne	r6,zero,100035f0 <__gesf2+0x68>
100035d0:	48001026 	beq	r9,zero,10003614 <__gesf2+0x8c>
100035d4:	0005883a 	mov	r2,zero
100035d8:	f800283a 	ret
100035dc:	4000161e 	bne	r8,zero,10003638 <__gesf2+0xb0>
100035e0:	18800826 	beq	r3,r2,10003604 <__gesf2+0x7c>
100035e4:	1800091e 	bne	r3,zero,1000360c <__gesf2+0x84>
100035e8:	000f883a 	mov	r7,zero
100035ec:	30000926 	beq	r6,zero,10003614 <__gesf2+0x8c>
100035f0:	29403fcc 	andi	r5,r5,255
100035f4:	38000626 	beq	r7,zero,10003610 <__gesf2+0x88>
100035f8:	2800071e 	bne	r5,zero,10003618 <__gesf2+0x90>
100035fc:	00bfffc4 	movi	r2,-1
10003600:	f800283a 	ret
10003604:	30000c1e 	bne	r6,zero,10003638 <__gesf2+0xb0>
10003608:	103fed26 	beq	r2,zero,100035c0 <__alt_data_end+0xf80035c0>
1000360c:	29403fcc 	andi	r5,r5,255
10003610:	21400326 	beq	r4,r5,10003620 <__gesf2+0x98>
10003614:	203ff91e 	bne	r4,zero,100035fc <__alt_data_end+0xf80035fc>
10003618:	00800044 	movi	r2,1
1000361c:	f800283a 	ret
10003620:	18bffc16 	blt	r3,r2,10003614 <__alt_data_end+0xf8003614>
10003624:	10c00216 	blt	r2,r3,10003630 <__gesf2+0xa8>
10003628:	323ffa36 	bltu	r6,r8,10003614 <__alt_data_end+0xf8003614>
1000362c:	41bfe92e 	bgeu	r8,r6,100035d4 <__alt_data_end+0xf80035d4>
10003630:	203ff226 	beq	r4,zero,100035fc <__alt_data_end+0xf80035fc>
10003634:	003ff806 	br	10003618 <__alt_data_end+0xf8003618>
10003638:	00bfff84 	movi	r2,-2
1000363c:	f800283a 	ret

10003640 <__fixsfsi>:
10003640:	2006d5fa 	srli	r3,r4,23
10003644:	00802034 	movhi	r2,128
10003648:	10bfffc4 	addi	r2,r2,-1
1000364c:	18c03fcc 	andi	r3,r3,255
10003650:	01401f84 	movi	r5,126
10003654:	1104703a 	and	r2,r2,r4
10003658:	2008d7fa 	srli	r4,r4,31
1000365c:	28c0110e 	bge	r5,r3,100036a4 <__fixsfsi+0x64>
10003660:	01402744 	movi	r5,157
10003664:	28c00b16 	blt	r5,r3,10003694 <__fixsfsi+0x54>
10003668:	01402544 	movi	r5,149
1000366c:	10802034 	orhi	r2,r2,128
10003670:	28c00e16 	blt	r5,r3,100036ac <__fixsfsi+0x6c>
10003674:	01402584 	movi	r5,150
10003678:	28c7c83a 	sub	r3,r5,r3
1000367c:	10c6d83a 	srl	r3,r2,r3
10003680:	21003fcc 	andi	r4,r4,255
10003684:	0105c83a 	sub	r2,zero,r4
10003688:	1886f03a 	xor	r3,r3,r2
1000368c:	1905883a 	add	r2,r3,r4
10003690:	f800283a 	ret
10003694:	00a00034 	movhi	r2,32768
10003698:	10bfffc4 	addi	r2,r2,-1
1000369c:	2085883a 	add	r2,r4,r2
100036a0:	f800283a 	ret
100036a4:	0005883a 	mov	r2,zero
100036a8:	f800283a 	ret
100036ac:	18ffda84 	addi	r3,r3,-150
100036b0:	10c6983a 	sll	r3,r2,r3
100036b4:	003ff206 	br	10003680 <__alt_data_end+0xf8003680>

100036b8 <__floatsisf>:
100036b8:	defffd04 	addi	sp,sp,-12
100036bc:	dc000015 	stw	r16,0(sp)
100036c0:	dfc00215 	stw	ra,8(sp)
100036c4:	dc400115 	stw	r17,4(sp)
100036c8:	2021883a 	mov	r16,r4
100036cc:	20003a26 	beq	r4,zero,100037b8 <__floatsisf+0x100>
100036d0:	2022d7fa 	srli	r17,r4,31
100036d4:	88000126 	beq	r17,zero,100036dc <__floatsisf+0x24>
100036d8:	0121c83a 	sub	r16,zero,r4
100036dc:	8009883a 	mov	r4,r16
100036e0:	00043300 	call	10004330 <__clzsi2>
100036e4:	00c02784 	movi	r3,158
100036e8:	1887c83a 	sub	r3,r3,r2
100036ec:	01802584 	movi	r6,150
100036f0:	800b883a 	mov	r5,r16
100036f4:	30c01616 	blt	r6,r3,10003750 <__floatsisf+0x98>
100036f8:	01000204 	movi	r4,8
100036fc:	2080020e 	bge	r4,r2,10003708 <__floatsisf+0x50>
10003700:	10bffe04 	addi	r2,r2,-8
10003704:	80a0983a 	sll	r16,r16,r2
10003708:	00802034 	movhi	r2,128
1000370c:	10bfffc4 	addi	r2,r2,-1
10003710:	8809883a 	mov	r4,r17
10003714:	80a0703a 	and	r16,r16,r2
10003718:	18803fcc 	andi	r2,r3,255
1000371c:	100695fa 	slli	r3,r2,23
10003720:	20803fcc 	andi	r2,r4,255
10003724:	100897fa 	slli	r4,r2,31
10003728:	00802034 	movhi	r2,128
1000372c:	10bfffc4 	addi	r2,r2,-1
10003730:	8084703a 	and	r2,r16,r2
10003734:	10c4b03a 	or	r2,r2,r3
10003738:	1104b03a 	or	r2,r2,r4
1000373c:	dfc00217 	ldw	ra,8(sp)
10003740:	dc400117 	ldw	r17,4(sp)
10003744:	dc000017 	ldw	r16,0(sp)
10003748:	dec00304 	addi	sp,sp,12
1000374c:	f800283a 	ret
10003750:	01002644 	movi	r4,153
10003754:	20c01c16 	blt	r4,r3,100037c8 <__floatsisf+0x110>
10003758:	01000144 	movi	r4,5
1000375c:	2080020e 	bge	r4,r2,10003768 <__floatsisf+0xb0>
10003760:	113ffec4 	addi	r4,r2,-5
10003764:	290a983a 	sll	r5,r5,r4
10003768:	043f0034 	movhi	r16,64512
1000376c:	843fffc4 	addi	r16,r16,-1
10003770:	298001cc 	andi	r6,r5,7
10003774:	2c20703a 	and	r16,r5,r16
10003778:	30000426 	beq	r6,zero,1000378c <__floatsisf+0xd4>
1000377c:	294003cc 	andi	r5,r5,15
10003780:	01000104 	movi	r4,4
10003784:	29000126 	beq	r5,r4,1000378c <__floatsisf+0xd4>
10003788:	8121883a 	add	r16,r16,r4
1000378c:	8101002c 	andhi	r4,r16,1024
10003790:	20000526 	beq	r4,zero,100037a8 <__floatsisf+0xf0>
10003794:	00c027c4 	movi	r3,159
10003798:	1887c83a 	sub	r3,r3,r2
1000379c:	00bf0034 	movhi	r2,64512
100037a0:	10bfffc4 	addi	r2,r2,-1
100037a4:	80a0703a 	and	r16,r16,r2
100037a8:	802091ba 	slli	r16,r16,6
100037ac:	8809883a 	mov	r4,r17
100037b0:	8020d27a 	srli	r16,r16,9
100037b4:	003fd806 	br	10003718 <__alt_data_end+0xf8003718>
100037b8:	0009883a 	mov	r4,zero
100037bc:	0007883a 	mov	r3,zero
100037c0:	0021883a 	mov	r16,zero
100037c4:	003fd406 	br	10003718 <__alt_data_end+0xf8003718>
100037c8:	01800144 	movi	r6,5
100037cc:	110006c4 	addi	r4,r2,27
100037d0:	8108983a 	sll	r4,r16,r4
100037d4:	308fc83a 	sub	r7,r6,r2
100037d8:	81cad83a 	srl	r5,r16,r7
100037dc:	2008c03a 	cmpne	r4,r4,zero
100037e0:	214ab03a 	or	r5,r4,r5
100037e4:	30bfe00e 	bge	r6,r2,10003768 <__alt_data_end+0xf8003768>
100037e8:	003fdd06 	br	10003760 <__alt_data_end+0xf8003760>

100037ec <__adddf3>:
100037ec:	02000434 	movhi	r8,16
100037f0:	423fffc4 	addi	r8,r8,-1
100037f4:	defffb04 	addi	sp,sp,-20
100037f8:	2a12703a 	and	r9,r5,r8
100037fc:	2806d7fa 	srli	r3,r5,31
10003800:	3a10703a 	and	r8,r7,r8
10003804:	3804d53a 	srli	r2,r7,20
10003808:	3014d77a 	srli	r10,r6,29
1000380c:	dc000015 	stw	r16,0(sp)
10003810:	481290fa 	slli	r9,r9,3
10003814:	2820d53a 	srli	r16,r5,20
10003818:	401090fa 	slli	r8,r8,3
1000381c:	200ad77a 	srli	r5,r4,29
10003820:	380ed7fa 	srli	r7,r7,31
10003824:	dc800215 	stw	r18,8(sp)
10003828:	dc400115 	stw	r17,4(sp)
1000382c:	dfc00415 	stw	ra,16(sp)
10003830:	dcc00315 	stw	r19,12(sp)
10003834:	1c803fcc 	andi	r18,r3,255
10003838:	8401ffcc 	andi	r16,r16,2047
1000383c:	494ab03a 	or	r5,r9,r5
10003840:	202290fa 	slli	r17,r4,3
10003844:	1081ffcc 	andi	r2,r2,2047
10003848:	4290b03a 	or	r8,r8,r10
1000384c:	300c90fa 	slli	r6,r6,3
10003850:	91c07026 	beq	r18,r7,10003a14 <__adddf3+0x228>
10003854:	8087c83a 	sub	r3,r16,r2
10003858:	00c0b30e 	bge	zero,r3,10003b28 <__adddf3+0x33c>
1000385c:	10002a1e 	bne	r2,zero,10003908 <__adddf3+0x11c>
10003860:	4184b03a 	or	r2,r8,r6
10003864:	1000991e 	bne	r2,zero,10003acc <__adddf3+0x2e0>
10003868:	888001cc 	andi	r2,r17,7
1000386c:	10005b26 	beq	r2,zero,100039dc <__adddf3+0x1f0>
10003870:	88c003cc 	andi	r3,r17,15
10003874:	00800104 	movi	r2,4
10003878:	18805826 	beq	r3,r2,100039dc <__adddf3+0x1f0>
1000387c:	89800104 	addi	r6,r17,4
10003880:	3463803a 	cmpltu	r17,r6,r17
10003884:	2c4b883a 	add	r5,r5,r17
10003888:	2880202c 	andhi	r2,r5,128
1000388c:	9007883a 	mov	r3,r18
10003890:	3023883a 	mov	r17,r6
10003894:	10005426 	beq	r2,zero,100039e8 <__adddf3+0x1fc>
10003898:	84000044 	addi	r16,r16,1
1000389c:	0081ffc4 	movi	r2,2047
100038a0:	8080c126 	beq	r16,r2,10003ba8 <__adddf3+0x3bc>
100038a4:	013fe034 	movhi	r4,65408
100038a8:	213fffc4 	addi	r4,r4,-1
100038ac:	290a703a 	and	r5,r5,r4
100038b0:	2804977a 	slli	r2,r5,29
100038b4:	280a927a 	slli	r5,r5,9
100038b8:	8822d0fa 	srli	r17,r17,3
100038bc:	8401ffcc 	andi	r16,r16,2047
100038c0:	2808d33a 	srli	r4,r5,12
100038c4:	1444b03a 	or	r2,r2,r17
100038c8:	8401ffcc 	andi	r16,r16,2047
100038cc:	800a953a 	slli	r5,r16,20
100038d0:	18c03fcc 	andi	r3,r3,255
100038d4:	04000434 	movhi	r16,16
100038d8:	180697fa 	slli	r3,r3,31
100038dc:	843fffc4 	addi	r16,r16,-1
100038e0:	2420703a 	and	r16,r4,r16
100038e4:	8160b03a 	or	r16,r16,r5
100038e8:	80c6b03a 	or	r3,r16,r3
100038ec:	dfc00417 	ldw	ra,16(sp)
100038f0:	dcc00317 	ldw	r19,12(sp)
100038f4:	dc800217 	ldw	r18,8(sp)
100038f8:	dc400117 	ldw	r17,4(sp)
100038fc:	dc000017 	ldw	r16,0(sp)
10003900:	dec00504 	addi	sp,sp,20
10003904:	f800283a 	ret
10003908:	0081ffc4 	movi	r2,2047
1000390c:	80bfd626 	beq	r16,r2,10003868 <__alt_data_end+0xf8003868>
10003910:	42002034 	orhi	r8,r8,128
10003914:	00800e04 	movi	r2,56
10003918:	10c0a616 	blt	r2,r3,10003bb4 <__adddf3+0x3c8>
1000391c:	008007c4 	movi	r2,31
10003920:	10c0c916 	blt	r2,r3,10003c48 <__adddf3+0x45c>
10003924:	00800804 	movi	r2,32
10003928:	10c5c83a 	sub	r2,r2,r3
1000392c:	408e983a 	sll	r7,r8,r2
10003930:	30c8d83a 	srl	r4,r6,r3
10003934:	3084983a 	sll	r2,r6,r2
10003938:	40c6d83a 	srl	r3,r8,r3
1000393c:	390cb03a 	or	r6,r7,r4
10003940:	1004c03a 	cmpne	r2,r2,zero
10003944:	308cb03a 	or	r6,r6,r2
10003948:	898dc83a 	sub	r6,r17,r6
1000394c:	89a3803a 	cmpltu	r17,r17,r6
10003950:	28cbc83a 	sub	r5,r5,r3
10003954:	2c4bc83a 	sub	r5,r5,r17
10003958:	3023883a 	mov	r17,r6
1000395c:	2880202c 	andhi	r2,r5,128
10003960:	10006d26 	beq	r2,zero,10003b18 <__adddf3+0x32c>
10003964:	04c02034 	movhi	r19,128
10003968:	9cffffc4 	addi	r19,r19,-1
1000396c:	2ce6703a 	and	r19,r5,r19
10003970:	98007e26 	beq	r19,zero,10003b6c <__adddf3+0x380>
10003974:	9809883a 	mov	r4,r19
10003978:	00043300 	call	10004330 <__clzsi2>
1000397c:	10fffe04 	addi	r3,r2,-8
10003980:	010007c4 	movi	r4,31
10003984:	20c07f16 	blt	r4,r3,10003b84 <__adddf3+0x398>
10003988:	01400a04 	movi	r5,40
1000398c:	2885c83a 	sub	r2,r5,r2
10003990:	888ad83a 	srl	r5,r17,r2
10003994:	98e6983a 	sll	r19,r19,r3
10003998:	88e2983a 	sll	r17,r17,r3
1000399c:	2ce6b03a 	or	r19,r5,r19
100039a0:	1c007c16 	blt	r3,r16,10003b94 <__adddf3+0x3a8>
100039a4:	1c21c83a 	sub	r16,r3,r16
100039a8:	81400044 	addi	r5,r16,1
100039ac:	00c007c4 	movi	r3,31
100039b0:	19409816 	blt	r3,r5,10003c14 <__adddf3+0x428>
100039b4:	1c21c83a 	sub	r16,r3,r16
100039b8:	8c08983a 	sll	r4,r17,r16
100039bc:	8946d83a 	srl	r3,r17,r5
100039c0:	9c20983a 	sll	r16,r19,r16
100039c4:	2008c03a 	cmpne	r4,r4,zero
100039c8:	994ad83a 	srl	r5,r19,r5
100039cc:	1c06b03a 	or	r3,r3,r16
100039d0:	1922b03a 	or	r17,r3,r4
100039d4:	0021883a 	mov	r16,zero
100039d8:	003fa306 	br	10003868 <__alt_data_end+0xf8003868>
100039dc:	2880202c 	andhi	r2,r5,128
100039e0:	9007883a 	mov	r3,r18
100039e4:	103fac1e 	bne	r2,zero,10003898 <__alt_data_end+0xf8003898>
100039e8:	2804977a 	slli	r2,r5,29
100039ec:	8822d0fa 	srli	r17,r17,3
100039f0:	0101ffc4 	movi	r4,2047
100039f4:	280ad0fa 	srli	r5,r5,3
100039f8:	1444b03a 	or	r2,r2,r17
100039fc:	81002c26 	beq	r16,r4,10003ab0 <__adddf3+0x2c4>
10003a00:	8120703a 	and	r16,r16,r4
10003a04:	01000434 	movhi	r4,16
10003a08:	213fffc4 	addi	r4,r4,-1
10003a0c:	2908703a 	and	r4,r5,r4
10003a10:	003fad06 	br	100038c8 <__alt_data_end+0xf80038c8>
10003a14:	8089c83a 	sub	r4,r16,r2
10003a18:	01006a0e 	bge	zero,r4,10003bc4 <__adddf3+0x3d8>
10003a1c:	10003326 	beq	r2,zero,10003aec <__adddf3+0x300>
10003a20:	0081ffc4 	movi	r2,2047
10003a24:	80bf9026 	beq	r16,r2,10003868 <__alt_data_end+0xf8003868>
10003a28:	42002034 	orhi	r8,r8,128
10003a2c:	00800e04 	movi	r2,56
10003a30:	1100b116 	blt	r2,r4,10003cf8 <__adddf3+0x50c>
10003a34:	008007c4 	movi	r2,31
10003a38:	1100e216 	blt	r2,r4,10003dc4 <__adddf3+0x5d8>
10003a3c:	00800804 	movi	r2,32
10003a40:	1105c83a 	sub	r2,r2,r4
10003a44:	4092983a 	sll	r9,r8,r2
10003a48:	310ed83a 	srl	r7,r6,r4
10003a4c:	3084983a 	sll	r2,r6,r2
10003a50:	4110d83a 	srl	r8,r8,r4
10003a54:	49ccb03a 	or	r6,r9,r7
10003a58:	1004c03a 	cmpne	r2,r2,zero
10003a5c:	308cb03a 	or	r6,r6,r2
10003a60:	344d883a 	add	r6,r6,r17
10003a64:	3463803a 	cmpltu	r17,r6,r17
10003a68:	414b883a 	add	r5,r8,r5
10003a6c:	2c4b883a 	add	r5,r5,r17
10003a70:	3023883a 	mov	r17,r6
10003a74:	2880202c 	andhi	r2,r5,128
10003a78:	10002726 	beq	r2,zero,10003b18 <__adddf3+0x32c>
10003a7c:	84000044 	addi	r16,r16,1
10003a80:	0081ffc4 	movi	r2,2047
10003a84:	8080ae26 	beq	r16,r2,10003d40 <__adddf3+0x554>
10003a88:	00bfe034 	movhi	r2,65408
10003a8c:	10bfffc4 	addi	r2,r2,-1
10003a90:	288a703a 	and	r5,r5,r2
10003a94:	880cd07a 	srli	r6,r17,1
10003a98:	280897fa 	slli	r4,r5,31
10003a9c:	88c0004c 	andi	r3,r17,1
10003aa0:	30e2b03a 	or	r17,r6,r3
10003aa4:	280ad07a 	srli	r5,r5,1
10003aa8:	8922b03a 	or	r17,r17,r4
10003aac:	003f6e06 	br	10003868 <__alt_data_end+0xf8003868>
10003ab0:	1148b03a 	or	r4,r2,r5
10003ab4:	20003c26 	beq	r4,zero,10003ba8 <__adddf3+0x3bc>
10003ab8:	29000234 	orhi	r4,r5,8
10003abc:	01400434 	movhi	r5,16
10003ac0:	297fffc4 	addi	r5,r5,-1
10003ac4:	2148703a 	and	r4,r4,r5
10003ac8:	003f7f06 	br	100038c8 <__alt_data_end+0xf80038c8>
10003acc:	18ffffc4 	addi	r3,r3,-1
10003ad0:	18004d1e 	bne	r3,zero,10003c08 <__adddf3+0x41c>
10003ad4:	898dc83a 	sub	r6,r17,r6
10003ad8:	89a3803a 	cmpltu	r17,r17,r6
10003adc:	2a0bc83a 	sub	r5,r5,r8
10003ae0:	2c4bc83a 	sub	r5,r5,r17
10003ae4:	3023883a 	mov	r17,r6
10003ae8:	003f9c06 	br	1000395c <__alt_data_end+0xf800395c>
10003aec:	4184b03a 	or	r2,r8,r6
10003af0:	103f5d26 	beq	r2,zero,10003868 <__alt_data_end+0xf8003868>
10003af4:	213fffc4 	addi	r4,r4,-1
10003af8:	203fd926 	beq	r4,zero,10003a60 <__alt_data_end+0xf8003a60>
10003afc:	0081ffc4 	movi	r2,2047
10003b00:	80bfca1e 	bne	r16,r2,10003a2c <__alt_data_end+0xf8003a2c>
10003b04:	003f5806 	br	10003868 <__alt_data_end+0xf8003868>
10003b08:	10c8b03a 	or	r4,r2,r3
10003b0c:	20008b26 	beq	r4,zero,10003d3c <__adddf3+0x550>
10003b10:	100b883a 	mov	r5,r2
10003b14:	1823883a 	mov	r17,r3
10003b18:	888001cc 	andi	r2,r17,7
10003b1c:	103f541e 	bne	r2,zero,10003870 <__alt_data_end+0xf8003870>
10003b20:	9007883a 	mov	r3,r18
10003b24:	003fb006 	br	100039e8 <__alt_data_end+0xf80039e8>
10003b28:	1800531e 	bne	r3,zero,10003c78 <__adddf3+0x48c>
10003b2c:	80800044 	addi	r2,r16,1
10003b30:	1081ffcc 	andi	r2,r2,2047
10003b34:	00c00044 	movi	r3,1
10003b38:	1880990e 	bge	r3,r2,10003da0 <__adddf3+0x5b4>
10003b3c:	8985c83a 	sub	r2,r17,r6
10003b40:	8887803a 	cmpltu	r3,r17,r2
10003b44:	2a27c83a 	sub	r19,r5,r8
10003b48:	98e7c83a 	sub	r19,r19,r3
10003b4c:	98c0202c 	andhi	r3,r19,128
10003b50:	18006226 	beq	r3,zero,10003cdc <__adddf3+0x4f0>
10003b54:	3463c83a 	sub	r17,r6,r17
10003b58:	4151c83a 	sub	r8,r8,r5
10003b5c:	344d803a 	cmpltu	r6,r6,r17
10003b60:	41a7c83a 	sub	r19,r8,r6
10003b64:	3825883a 	mov	r18,r7
10003b68:	983f821e 	bne	r19,zero,10003974 <__alt_data_end+0xf8003974>
10003b6c:	8809883a 	mov	r4,r17
10003b70:	00043300 	call	10004330 <__clzsi2>
10003b74:	10800804 	addi	r2,r2,32
10003b78:	10fffe04 	addi	r3,r2,-8
10003b7c:	010007c4 	movi	r4,31
10003b80:	20ff810e 	bge	r4,r3,10003988 <__alt_data_end+0xf8003988>
10003b84:	14fff604 	addi	r19,r2,-40
10003b88:	8ce6983a 	sll	r19,r17,r19
10003b8c:	0023883a 	mov	r17,zero
10003b90:	1c3f840e 	bge	r3,r16,100039a4 <__alt_data_end+0xf80039a4>
10003b94:	017fe034 	movhi	r5,65408
10003b98:	297fffc4 	addi	r5,r5,-1
10003b9c:	80e1c83a 	sub	r16,r16,r3
10003ba0:	994a703a 	and	r5,r19,r5
10003ba4:	003f3006 	br	10003868 <__alt_data_end+0xf8003868>
10003ba8:	0009883a 	mov	r4,zero
10003bac:	0005883a 	mov	r2,zero
10003bb0:	003f4506 	br	100038c8 <__alt_data_end+0xf80038c8>
10003bb4:	418cb03a 	or	r6,r8,r6
10003bb8:	300cc03a 	cmpne	r6,r6,zero
10003bbc:	0007883a 	mov	r3,zero
10003bc0:	003f6106 	br	10003948 <__alt_data_end+0xf8003948>
10003bc4:	2000921e 	bne	r4,zero,10003e10 <__adddf3+0x624>
10003bc8:	80800044 	addi	r2,r16,1
10003bcc:	11c1ffcc 	andi	r7,r2,2047
10003bd0:	01000044 	movi	r4,1
10003bd4:	21c0610e 	bge	r4,r7,10003d5c <__adddf3+0x570>
10003bd8:	0101ffc4 	movi	r4,2047
10003bdc:	1100a326 	beq	r2,r4,10003e6c <__adddf3+0x680>
10003be0:	344d883a 	add	r6,r6,r17
10003be4:	3463803a 	cmpltu	r17,r6,r17
10003be8:	414b883a 	add	r5,r8,r5
10003bec:	2c4b883a 	add	r5,r5,r17
10003bf0:	282297fa 	slli	r17,r5,31
10003bf4:	300cd07a 	srli	r6,r6,1
10003bf8:	280ad07a 	srli	r5,r5,1
10003bfc:	1021883a 	mov	r16,r2
10003c00:	89a2b03a 	or	r17,r17,r6
10003c04:	003f1806 	br	10003868 <__alt_data_end+0xf8003868>
10003c08:	0081ffc4 	movi	r2,2047
10003c0c:	80bf411e 	bne	r16,r2,10003914 <__alt_data_end+0xf8003914>
10003c10:	003f1506 	br	10003868 <__alt_data_end+0xf8003868>
10003c14:	80bff844 	addi	r2,r16,-31
10003c18:	00c00804 	movi	r3,32
10003c1c:	9884d83a 	srl	r2,r19,r2
10003c20:	28c04a26 	beq	r5,r3,10003d4c <__adddf3+0x560>
10003c24:	00c00fc4 	movi	r3,63
10003c28:	1c21c83a 	sub	r16,r3,r16
10003c2c:	9c26983a 	sll	r19,r19,r16
10003c30:	9c62b03a 	or	r17,r19,r17
10003c34:	8822c03a 	cmpne	r17,r17,zero
10003c38:	88a2b03a 	or	r17,r17,r2
10003c3c:	000b883a 	mov	r5,zero
10003c40:	0021883a 	mov	r16,zero
10003c44:	003fb406 	br	10003b18 <__alt_data_end+0xf8003b18>
10003c48:	18bff804 	addi	r2,r3,-32
10003c4c:	01000804 	movi	r4,32
10003c50:	4084d83a 	srl	r2,r8,r2
10003c54:	19003f26 	beq	r3,r4,10003d54 <__adddf3+0x568>
10003c58:	01001004 	movi	r4,64
10003c5c:	20c7c83a 	sub	r3,r4,r3
10003c60:	40d0983a 	sll	r8,r8,r3
10003c64:	418cb03a 	or	r6,r8,r6
10003c68:	300cc03a 	cmpne	r6,r6,zero
10003c6c:	308cb03a 	or	r6,r6,r2
10003c70:	0007883a 	mov	r3,zero
10003c74:	003f3406 	br	10003948 <__alt_data_end+0xf8003948>
10003c78:	80002326 	beq	r16,zero,10003d08 <__adddf3+0x51c>
10003c7c:	0101ffc4 	movi	r4,2047
10003c80:	11005e26 	beq	r2,r4,10003dfc <__adddf3+0x610>
10003c84:	00c7c83a 	sub	r3,zero,r3
10003c88:	29402034 	orhi	r5,r5,128
10003c8c:	01000e04 	movi	r4,56
10003c90:	20c07216 	blt	r4,r3,10003e5c <__adddf3+0x670>
10003c94:	010007c4 	movi	r4,31
10003c98:	20c0ce16 	blt	r4,r3,10003fd4 <__adddf3+0x7e8>
10003c9c:	01000804 	movi	r4,32
10003ca0:	20c9c83a 	sub	r4,r4,r3
10003ca4:	2914983a 	sll	r10,r5,r4
10003ca8:	88d2d83a 	srl	r9,r17,r3
10003cac:	8908983a 	sll	r4,r17,r4
10003cb0:	28c6d83a 	srl	r3,r5,r3
10003cb4:	5262b03a 	or	r17,r10,r9
10003cb8:	2008c03a 	cmpne	r4,r4,zero
10003cbc:	8922b03a 	or	r17,r17,r4
10003cc0:	3463c83a 	sub	r17,r6,r17
10003cc4:	40c7c83a 	sub	r3,r8,r3
10003cc8:	344d803a 	cmpltu	r6,r6,r17
10003ccc:	198bc83a 	sub	r5,r3,r6
10003cd0:	1021883a 	mov	r16,r2
10003cd4:	3825883a 	mov	r18,r7
10003cd8:	003f2006 	br	1000395c <__alt_data_end+0xf800395c>
10003cdc:	9886b03a 	or	r3,r19,r2
10003ce0:	1800141e 	bne	r3,zero,10003d34 <__adddf3+0x548>
10003ce4:	0007883a 	mov	r3,zero
10003ce8:	000b883a 	mov	r5,zero
10003cec:	0023883a 	mov	r17,zero
10003cf0:	0021883a 	mov	r16,zero
10003cf4:	003f3c06 	br	100039e8 <__alt_data_end+0xf80039e8>
10003cf8:	418cb03a 	or	r6,r8,r6
10003cfc:	300cc03a 	cmpne	r6,r6,zero
10003d00:	0011883a 	mov	r8,zero
10003d04:	003f5606 	br	10003a60 <__alt_data_end+0xf8003a60>
10003d08:	2c48b03a 	or	r4,r5,r17
10003d0c:	20003b26 	beq	r4,zero,10003dfc <__adddf3+0x610>
10003d10:	00c6303a 	nor	r3,zero,r3
10003d14:	1800371e 	bne	r3,zero,10003df4 <__adddf3+0x608>
10003d18:	3463c83a 	sub	r17,r6,r17
10003d1c:	414bc83a 	sub	r5,r8,r5
10003d20:	344d803a 	cmpltu	r6,r6,r17
10003d24:	298bc83a 	sub	r5,r5,r6
10003d28:	1021883a 	mov	r16,r2
10003d2c:	3825883a 	mov	r18,r7
10003d30:	003f0a06 	br	1000395c <__alt_data_end+0xf800395c>
10003d34:	1023883a 	mov	r17,r2
10003d38:	003f0d06 	br	10003970 <__alt_data_end+0xf8003970>
10003d3c:	0007883a 	mov	r3,zero
10003d40:	000b883a 	mov	r5,zero
10003d44:	0023883a 	mov	r17,zero
10003d48:	003f2706 	br	100039e8 <__alt_data_end+0xf80039e8>
10003d4c:	0027883a 	mov	r19,zero
10003d50:	003fb706 	br	10003c30 <__alt_data_end+0xf8003c30>
10003d54:	0011883a 	mov	r8,zero
10003d58:	003fc206 	br	10003c64 <__alt_data_end+0xf8003c64>
10003d5c:	2c44b03a 	or	r2,r5,r17
10003d60:	8000871e 	bne	r16,zero,10003f80 <__adddf3+0x794>
10003d64:	1000b126 	beq	r2,zero,1000402c <__adddf3+0x840>
10003d68:	4184b03a 	or	r2,r8,r6
10003d6c:	103ebe26 	beq	r2,zero,10003868 <__alt_data_end+0xf8003868>
10003d70:	3445883a 	add	r2,r6,r17
10003d74:	1463803a 	cmpltu	r17,r2,r17
10003d78:	414b883a 	add	r5,r8,r5
10003d7c:	2c4b883a 	add	r5,r5,r17
10003d80:	28c0202c 	andhi	r3,r5,128
10003d84:	1023883a 	mov	r17,r2
10003d88:	183f6326 	beq	r3,zero,10003b18 <__alt_data_end+0xf8003b18>
10003d8c:	00bfe034 	movhi	r2,65408
10003d90:	10bfffc4 	addi	r2,r2,-1
10003d94:	2021883a 	mov	r16,r4
10003d98:	288a703a 	and	r5,r5,r2
10003d9c:	003eb206 	br	10003868 <__alt_data_end+0xf8003868>
10003da0:	2c44b03a 	or	r2,r5,r17
10003da4:	8000251e 	bne	r16,zero,10003e3c <__adddf3+0x650>
10003da8:	10004b1e 	bne	r2,zero,10003ed8 <__adddf3+0x6ec>
10003dac:	4184b03a 	or	r2,r8,r6
10003db0:	103fe226 	beq	r2,zero,10003d3c <__alt_data_end+0xf8003d3c>
10003db4:	400b883a 	mov	r5,r8
10003db8:	3023883a 	mov	r17,r6
10003dbc:	3825883a 	mov	r18,r7
10003dc0:	003ea906 	br	10003868 <__alt_data_end+0xf8003868>
10003dc4:	20bff804 	addi	r2,r4,-32
10003dc8:	01c00804 	movi	r7,32
10003dcc:	4084d83a 	srl	r2,r8,r2
10003dd0:	21c07e26 	beq	r4,r7,10003fcc <__adddf3+0x7e0>
10003dd4:	01c01004 	movi	r7,64
10003dd8:	3909c83a 	sub	r4,r7,r4
10003ddc:	4110983a 	sll	r8,r8,r4
10003de0:	418cb03a 	or	r6,r8,r6
10003de4:	300cc03a 	cmpne	r6,r6,zero
10003de8:	308cb03a 	or	r6,r6,r2
10003dec:	0011883a 	mov	r8,zero
10003df0:	003f1b06 	br	10003a60 <__alt_data_end+0xf8003a60>
10003df4:	0101ffc4 	movi	r4,2047
10003df8:	113fa41e 	bne	r2,r4,10003c8c <__alt_data_end+0xf8003c8c>
10003dfc:	400b883a 	mov	r5,r8
10003e00:	3023883a 	mov	r17,r6
10003e04:	1021883a 	mov	r16,r2
10003e08:	3825883a 	mov	r18,r7
10003e0c:	003e9606 	br	10003868 <__alt_data_end+0xf8003868>
10003e10:	80001a1e 	bne	r16,zero,10003e7c <__adddf3+0x690>
10003e14:	2c4eb03a 	or	r7,r5,r17
10003e18:	38005526 	beq	r7,zero,10003f70 <__adddf3+0x784>
10003e1c:	0108303a 	nor	r4,zero,r4
10003e20:	2000511e 	bne	r4,zero,10003f68 <__adddf3+0x77c>
10003e24:	89a3883a 	add	r17,r17,r6
10003e28:	414b883a 	add	r5,r8,r5
10003e2c:	898d803a 	cmpltu	r6,r17,r6
10003e30:	298b883a 	add	r5,r5,r6
10003e34:	1021883a 	mov	r16,r2
10003e38:	003f0e06 	br	10003a74 <__alt_data_end+0xf8003a74>
10003e3c:	1000341e 	bne	r2,zero,10003f10 <__adddf3+0x724>
10003e40:	4184b03a 	or	r2,r8,r6
10003e44:	10006f26 	beq	r2,zero,10004004 <__adddf3+0x818>
10003e48:	400b883a 	mov	r5,r8
10003e4c:	3023883a 	mov	r17,r6
10003e50:	3825883a 	mov	r18,r7
10003e54:	0401ffc4 	movi	r16,2047
10003e58:	003e8306 	br	10003868 <__alt_data_end+0xf8003868>
10003e5c:	2c62b03a 	or	r17,r5,r17
10003e60:	8822c03a 	cmpne	r17,r17,zero
10003e64:	0007883a 	mov	r3,zero
10003e68:	003f9506 	br	10003cc0 <__alt_data_end+0xf8003cc0>
10003e6c:	1021883a 	mov	r16,r2
10003e70:	000b883a 	mov	r5,zero
10003e74:	0023883a 	mov	r17,zero
10003e78:	003edb06 	br	100039e8 <__alt_data_end+0xf80039e8>
10003e7c:	01c1ffc4 	movi	r7,2047
10003e80:	11c03b26 	beq	r2,r7,10003f70 <__adddf3+0x784>
10003e84:	0109c83a 	sub	r4,zero,r4
10003e88:	29402034 	orhi	r5,r5,128
10003e8c:	01c00e04 	movi	r7,56
10003e90:	39006216 	blt	r7,r4,1000401c <__adddf3+0x830>
10003e94:	01c007c4 	movi	r7,31
10003e98:	39006b16 	blt	r7,r4,10004048 <__adddf3+0x85c>
10003e9c:	01c00804 	movi	r7,32
10003ea0:	390fc83a 	sub	r7,r7,r4
10003ea4:	29d4983a 	sll	r10,r5,r7
10003ea8:	8912d83a 	srl	r9,r17,r4
10003eac:	89ce983a 	sll	r7,r17,r7
10003eb0:	2908d83a 	srl	r4,r5,r4
10003eb4:	5262b03a 	or	r17,r10,r9
10003eb8:	380ac03a 	cmpne	r5,r7,zero
10003ebc:	8962b03a 	or	r17,r17,r5
10003ec0:	89a3883a 	add	r17,r17,r6
10003ec4:	2211883a 	add	r8,r4,r8
10003ec8:	898d803a 	cmpltu	r6,r17,r6
10003ecc:	418b883a 	add	r5,r8,r6
10003ed0:	1021883a 	mov	r16,r2
10003ed4:	003ee706 	br	10003a74 <__alt_data_end+0xf8003a74>
10003ed8:	4184b03a 	or	r2,r8,r6
10003edc:	103e6226 	beq	r2,zero,10003868 <__alt_data_end+0xf8003868>
10003ee0:	8987c83a 	sub	r3,r17,r6
10003ee4:	88c9803a 	cmpltu	r4,r17,r3
10003ee8:	2a05c83a 	sub	r2,r5,r8
10003eec:	1105c83a 	sub	r2,r2,r4
10003ef0:	1100202c 	andhi	r4,r2,128
10003ef4:	203f0426 	beq	r4,zero,10003b08 <__alt_data_end+0xf8003b08>
10003ef8:	3463c83a 	sub	r17,r6,r17
10003efc:	414bc83a 	sub	r5,r8,r5
10003f00:	344d803a 	cmpltu	r6,r6,r17
10003f04:	298bc83a 	sub	r5,r5,r6
10003f08:	3825883a 	mov	r18,r7
10003f0c:	003e5606 	br	10003868 <__alt_data_end+0xf8003868>
10003f10:	4184b03a 	or	r2,r8,r6
10003f14:	10002b26 	beq	r2,zero,10003fc4 <__adddf3+0x7d8>
10003f18:	2804d0fa 	srli	r2,r5,3
10003f1c:	8822d0fa 	srli	r17,r17,3
10003f20:	280a977a 	slli	r5,r5,29
10003f24:	10c0022c 	andhi	r3,r2,8
10003f28:	2c62b03a 	or	r17,r5,r17
10003f2c:	18000826 	beq	r3,zero,10003f50 <__adddf3+0x764>
10003f30:	4008d0fa 	srli	r4,r8,3
10003f34:	20c0022c 	andhi	r3,r4,8
10003f38:	1800051e 	bne	r3,zero,10003f50 <__adddf3+0x764>
10003f3c:	300cd0fa 	srli	r6,r6,3
10003f40:	4010977a 	slli	r8,r8,29
10003f44:	2005883a 	mov	r2,r4
10003f48:	3825883a 	mov	r18,r7
10003f4c:	41a2b03a 	or	r17,r8,r6
10003f50:	880ad77a 	srli	r5,r17,29
10003f54:	100490fa 	slli	r2,r2,3
10003f58:	882290fa 	slli	r17,r17,3
10003f5c:	0401ffc4 	movi	r16,2047
10003f60:	288ab03a 	or	r5,r5,r2
10003f64:	003e4006 	br	10003868 <__alt_data_end+0xf8003868>
10003f68:	01c1ffc4 	movi	r7,2047
10003f6c:	11ffc71e 	bne	r2,r7,10003e8c <__alt_data_end+0xf8003e8c>
10003f70:	400b883a 	mov	r5,r8
10003f74:	3023883a 	mov	r17,r6
10003f78:	1021883a 	mov	r16,r2
10003f7c:	003e3a06 	br	10003868 <__alt_data_end+0xf8003868>
10003f80:	10002d26 	beq	r2,zero,10004038 <__adddf3+0x84c>
10003f84:	4184b03a 	or	r2,r8,r6
10003f88:	10000e26 	beq	r2,zero,10003fc4 <__adddf3+0x7d8>
10003f8c:	2804d0fa 	srli	r2,r5,3
10003f90:	8822d0fa 	srli	r17,r17,3
10003f94:	280a977a 	slli	r5,r5,29
10003f98:	10c0022c 	andhi	r3,r2,8
10003f9c:	2c62b03a 	or	r17,r5,r17
10003fa0:	183feb26 	beq	r3,zero,10003f50 <__alt_data_end+0xf8003f50>
10003fa4:	4008d0fa 	srli	r4,r8,3
10003fa8:	20c0022c 	andhi	r3,r4,8
10003fac:	183fe81e 	bne	r3,zero,10003f50 <__alt_data_end+0xf8003f50>
10003fb0:	300cd0fa 	srli	r6,r6,3
10003fb4:	4010977a 	slli	r8,r8,29
10003fb8:	2005883a 	mov	r2,r4
10003fbc:	41a2b03a 	or	r17,r8,r6
10003fc0:	003fe306 	br	10003f50 <__alt_data_end+0xf8003f50>
10003fc4:	0401ffc4 	movi	r16,2047
10003fc8:	003e2706 	br	10003868 <__alt_data_end+0xf8003868>
10003fcc:	0011883a 	mov	r8,zero
10003fd0:	003f8306 	br	10003de0 <__alt_data_end+0xf8003de0>
10003fd4:	193ff804 	addi	r4,r3,-32
10003fd8:	02400804 	movi	r9,32
10003fdc:	2908d83a 	srl	r4,r5,r4
10003fe0:	1a402526 	beq	r3,r9,10004078 <__adddf3+0x88c>
10003fe4:	02401004 	movi	r9,64
10003fe8:	48c7c83a 	sub	r3,r9,r3
10003fec:	28ca983a 	sll	r5,r5,r3
10003ff0:	2c62b03a 	or	r17,r5,r17
10003ff4:	8822c03a 	cmpne	r17,r17,zero
10003ff8:	8922b03a 	or	r17,r17,r4
10003ffc:	0007883a 	mov	r3,zero
10004000:	003f2f06 	br	10003cc0 <__alt_data_end+0xf8003cc0>
10004004:	01402034 	movhi	r5,128
10004008:	0007883a 	mov	r3,zero
1000400c:	297fffc4 	addi	r5,r5,-1
10004010:	047ffe04 	movi	r17,-8
10004014:	0401ffc4 	movi	r16,2047
10004018:	003e7306 	br	100039e8 <__alt_data_end+0xf80039e8>
1000401c:	2c62b03a 	or	r17,r5,r17
10004020:	8822c03a 	cmpne	r17,r17,zero
10004024:	0009883a 	mov	r4,zero
10004028:	003fa506 	br	10003ec0 <__alt_data_end+0xf8003ec0>
1000402c:	400b883a 	mov	r5,r8
10004030:	3023883a 	mov	r17,r6
10004034:	003e0c06 	br	10003868 <__alt_data_end+0xf8003868>
10004038:	400b883a 	mov	r5,r8
1000403c:	3023883a 	mov	r17,r6
10004040:	0401ffc4 	movi	r16,2047
10004044:	003e0806 	br	10003868 <__alt_data_end+0xf8003868>
10004048:	21fff804 	addi	r7,r4,-32
1000404c:	02400804 	movi	r9,32
10004050:	29ced83a 	srl	r7,r5,r7
10004054:	22400a26 	beq	r4,r9,10004080 <__adddf3+0x894>
10004058:	02401004 	movi	r9,64
1000405c:	4909c83a 	sub	r4,r9,r4
10004060:	290a983a 	sll	r5,r5,r4
10004064:	2c62b03a 	or	r17,r5,r17
10004068:	8822c03a 	cmpne	r17,r17,zero
1000406c:	89e2b03a 	or	r17,r17,r7
10004070:	0009883a 	mov	r4,zero
10004074:	003f9206 	br	10003ec0 <__alt_data_end+0xf8003ec0>
10004078:	000b883a 	mov	r5,zero
1000407c:	003fdc06 	br	10003ff0 <__alt_data_end+0xf8003ff0>
10004080:	000b883a 	mov	r5,zero
10004084:	003ff706 	br	10004064 <__alt_data_end+0xf8004064>

10004088 <__extendsfdf2>:
10004088:	200ad5fa 	srli	r5,r4,23
1000408c:	defffd04 	addi	sp,sp,-12
10004090:	dc400115 	stw	r17,4(sp)
10004094:	29403fcc 	andi	r5,r5,255
10004098:	29800044 	addi	r6,r5,1
1000409c:	04402034 	movhi	r17,128
100040a0:	dc000015 	stw	r16,0(sp)
100040a4:	8c7fffc4 	addi	r17,r17,-1
100040a8:	dfc00215 	stw	ra,8(sp)
100040ac:	31803fcc 	andi	r6,r6,255
100040b0:	00800044 	movi	r2,1
100040b4:	8922703a 	and	r17,r17,r4
100040b8:	2020d7fa 	srli	r16,r4,31
100040bc:	1180110e 	bge	r2,r6,10004104 <__extendsfdf2+0x7c>
100040c0:	880ed0fa 	srli	r7,r17,3
100040c4:	8822977a 	slli	r17,r17,29
100040c8:	2940e004 	addi	r5,r5,896
100040cc:	2941ffcc 	andi	r5,r5,2047
100040d0:	280c953a 	slli	r6,r5,20
100040d4:	01400434 	movhi	r5,16
100040d8:	800697fa 	slli	r3,r16,31
100040dc:	297fffc4 	addi	r5,r5,-1
100040e0:	394a703a 	and	r5,r7,r5
100040e4:	298ab03a 	or	r5,r5,r6
100040e8:	8805883a 	mov	r2,r17
100040ec:	28c6b03a 	or	r3,r5,r3
100040f0:	dfc00217 	ldw	ra,8(sp)
100040f4:	dc400117 	ldw	r17,4(sp)
100040f8:	dc000017 	ldw	r16,0(sp)
100040fc:	dec00304 	addi	sp,sp,12
10004100:	f800283a 	ret
10004104:	2800111e 	bne	r5,zero,1000414c <__extendsfdf2+0xc4>
10004108:	88001c26 	beq	r17,zero,1000417c <__extendsfdf2+0xf4>
1000410c:	8809883a 	mov	r4,r17
10004110:	00043300 	call	10004330 <__clzsi2>
10004114:	00c00284 	movi	r3,10
10004118:	18801b16 	blt	r3,r2,10004188 <__extendsfdf2+0x100>
1000411c:	01c002c4 	movi	r7,11
10004120:	388fc83a 	sub	r7,r7,r2
10004124:	10c00544 	addi	r3,r2,21
10004128:	89ced83a 	srl	r7,r17,r7
1000412c:	88e2983a 	sll	r17,r17,r3
10004130:	0180e244 	movi	r6,905
10004134:	308bc83a 	sub	r5,r6,r2
10004138:	01800434 	movhi	r6,16
1000413c:	31bfffc4 	addi	r6,r6,-1
10004140:	398e703a 	and	r7,r7,r6
10004144:	2941ffcc 	andi	r5,r5,2047
10004148:	003fe006 	br	100040cc <__alt_data_end+0xf80040cc>
1000414c:	88000826 	beq	r17,zero,10004170 <__extendsfdf2+0xe8>
10004150:	880ed0fa 	srli	r7,r17,3
10004154:	00800434 	movhi	r2,16
10004158:	10bfffc4 	addi	r2,r2,-1
1000415c:	39c00234 	orhi	r7,r7,8
10004160:	8822977a 	slli	r17,r17,29
10004164:	388e703a 	and	r7,r7,r2
10004168:	0141ffc4 	movi	r5,2047
1000416c:	003fd706 	br	100040cc <__alt_data_end+0xf80040cc>
10004170:	0141ffc4 	movi	r5,2047
10004174:	000f883a 	mov	r7,zero
10004178:	003fd406 	br	100040cc <__alt_data_end+0xf80040cc>
1000417c:	000b883a 	mov	r5,zero
10004180:	000f883a 	mov	r7,zero
10004184:	003fd106 	br	100040cc <__alt_data_end+0xf80040cc>
10004188:	11fffd44 	addi	r7,r2,-11
1000418c:	89ce983a 	sll	r7,r17,r7
10004190:	0023883a 	mov	r17,zero
10004194:	003fe606 	br	10004130 <__alt_data_end+0xf8004130>

10004198 <__truncdfsf2>:
10004198:	2810d53a 	srli	r8,r5,20
1000419c:	01c00434 	movhi	r7,16
100041a0:	39ffffc4 	addi	r7,r7,-1
100041a4:	29ce703a 	and	r7,r5,r7
100041a8:	380e90fa 	slli	r7,r7,3
100041ac:	4201ffcc 	andi	r8,r8,2047
100041b0:	200cd77a 	srli	r6,r4,29
100041b4:	42400044 	addi	r9,r8,1
100041b8:	4a41ffcc 	andi	r9,r9,2047
100041bc:	00800044 	movi	r2,1
100041c0:	398cb03a 	or	r6,r7,r6
100041c4:	280ad7fa 	srli	r5,r5,31
100041c8:	200e90fa 	slli	r7,r4,3
100041cc:	1240230e 	bge	r2,r9,1000425c <__truncdfsf2+0xc4>
100041d0:	40ff2004 	addi	r3,r8,-896
100041d4:	00803f84 	movi	r2,254
100041d8:	10c01516 	blt	r2,r3,10004230 <__truncdfsf2+0x98>
100041dc:	00c02d0e 	bge	zero,r3,10004294 <__truncdfsf2+0xfc>
100041e0:	200891ba 	slli	r4,r4,6
100041e4:	300c90fa 	slli	r6,r6,3
100041e8:	380ed77a 	srli	r7,r7,29
100041ec:	2008c03a 	cmpne	r4,r4,zero
100041f0:	310cb03a 	or	r6,r6,r4
100041f4:	31ccb03a 	or	r6,r6,r7
100041f8:	308001cc 	andi	r2,r6,7
100041fc:	10000426 	beq	r2,zero,10004210 <__truncdfsf2+0x78>
10004200:	310003cc 	andi	r4,r6,15
10004204:	00800104 	movi	r2,4
10004208:	20800126 	beq	r4,r2,10004210 <__truncdfsf2+0x78>
1000420c:	31800104 	addi	r6,r6,4
10004210:	3081002c 	andhi	r2,r6,1024
10004214:	10002326 	beq	r2,zero,100042a4 <__truncdfsf2+0x10c>
10004218:	18c00044 	addi	r3,r3,1
1000421c:	00803fc4 	movi	r2,255
10004220:	18800326 	beq	r3,r2,10004230 <__truncdfsf2+0x98>
10004224:	300c91ba 	slli	r6,r6,6
10004228:	300cd27a 	srli	r6,r6,9
1000422c:	00000206 	br	10004238 <__truncdfsf2+0xa0>
10004230:	00ffffc4 	movi	r3,-1
10004234:	000d883a 	mov	r6,zero
10004238:	18c03fcc 	andi	r3,r3,255
1000423c:	180895fa 	slli	r4,r3,23
10004240:	00c02034 	movhi	r3,128
10004244:	280a97fa 	slli	r5,r5,31
10004248:	18ffffc4 	addi	r3,r3,-1
1000424c:	30c6703a 	and	r3,r6,r3
10004250:	1906b03a 	or	r3,r3,r4
10004254:	1944b03a 	or	r2,r3,r5
10004258:	f800283a 	ret
1000425c:	4000071e 	bne	r8,zero,1000427c <__truncdfsf2+0xe4>
10004260:	31ccb03a 	or	r6,r6,r7
10004264:	30000d1e 	bne	r6,zero,1000429c <__truncdfsf2+0x104>
10004268:	0007883a 	mov	r3,zero
1000426c:	00802034 	movhi	r2,128
10004270:	10bfffc4 	addi	r2,r2,-1
10004274:	308c703a 	and	r6,r6,r2
10004278:	003fef06 	br	10004238 <__alt_data_end+0xf8004238>
1000427c:	31c8b03a 	or	r4,r6,r7
10004280:	203feb26 	beq	r4,zero,10004230 <__alt_data_end+0xf8004230>
10004284:	300c90fa 	slli	r6,r6,3
10004288:	00c03fc4 	movi	r3,255
1000428c:	31808034 	orhi	r6,r6,512
10004290:	003fd906 	br	100041f8 <__alt_data_end+0xf80041f8>
10004294:	00bffa44 	movi	r2,-23
10004298:	1880090e 	bge	r3,r2,100042c0 <__truncdfsf2+0x128>
1000429c:	01800144 	movi	r6,5
100042a0:	0007883a 	mov	r3,zero
100042a4:	00803fc4 	movi	r2,255
100042a8:	300cd0fa 	srli	r6,r6,3
100042ac:	18bfef1e 	bne	r3,r2,1000426c <__alt_data_end+0xf800426c>
100042b0:	303fdf26 	beq	r6,zero,10004230 <__alt_data_end+0xf8004230>
100042b4:	31801034 	orhi	r6,r6,64
100042b8:	00ffffc4 	movi	r3,-1
100042bc:	003feb06 	br	1000426c <__alt_data_end+0xf800426c>
100042c0:	0080e784 	movi	r2,926
100042c4:	1205c83a 	sub	r2,r2,r8
100042c8:	00c007c4 	movi	r3,31
100042cc:	31802034 	orhi	r6,r6,128
100042d0:	18800916 	blt	r3,r2,100042f8 <__truncdfsf2+0x160>
100042d4:	423f2084 	addi	r8,r8,-894
100042d8:	3a06983a 	sll	r3,r7,r8
100042dc:	3210983a 	sll	r8,r6,r8
100042e0:	388ed83a 	srl	r7,r7,r2
100042e4:	180cc03a 	cmpne	r6,r3,zero
100042e8:	418cb03a 	or	r6,r8,r6
100042ec:	31ccb03a 	or	r6,r6,r7
100042f0:	0007883a 	mov	r3,zero
100042f4:	003fc006 	br	100041f8 <__alt_data_end+0xf80041f8>
100042f8:	00c0df84 	movi	r3,894
100042fc:	1a07c83a 	sub	r3,r3,r8
10004300:	01000804 	movi	r4,32
10004304:	30c6d83a 	srl	r3,r6,r3
10004308:	11000726 	beq	r2,r4,10004328 <__truncdfsf2+0x190>
1000430c:	423f2884 	addi	r8,r8,-862
10004310:	3210983a 	sll	r8,r6,r8
10004314:	41ceb03a 	or	r7,r8,r7
10004318:	380ec03a 	cmpne	r7,r7,zero
1000431c:	38ccb03a 	or	r6,r7,r3
10004320:	0007883a 	mov	r3,zero
10004324:	003fb406 	br	100041f8 <__alt_data_end+0xf80041f8>
10004328:	0011883a 	mov	r8,zero
1000432c:	003ff906 	br	10004314 <__alt_data_end+0xf8004314>

10004330 <__clzsi2>:
10004330:	00bfffd4 	movui	r2,65535
10004334:	11000b36 	bltu	r2,r4,10004364 <__clzsi2+0x34>
10004338:	00803fc4 	movi	r2,255
1000433c:	1100122e 	bgeu	r2,r4,10004388 <__clzsi2+0x58>
10004340:	00c00204 	movi	r3,8
10004344:	01400604 	movi	r5,24
10004348:	20c8d83a 	srl	r4,r4,r3
1000434c:	00840074 	movhi	r2,4097
10004350:	10932b04 	addi	r2,r2,19628
10004354:	1109883a 	add	r4,r2,r4
10004358:	20800003 	ldbu	r2,0(r4)
1000435c:	2885c83a 	sub	r2,r5,r2
10004360:	f800283a 	ret
10004364:	00804034 	movhi	r2,256
10004368:	10bfffc4 	addi	r2,r2,-1
1000436c:	11000336 	bltu	r2,r4,1000437c <__clzsi2+0x4c>
10004370:	00c00404 	movi	r3,16
10004374:	180b883a 	mov	r5,r3
10004378:	003ff306 	br	10004348 <__alt_data_end+0xf8004348>
1000437c:	00c00604 	movi	r3,24
10004380:	01400204 	movi	r5,8
10004384:	003ff006 	br	10004348 <__alt_data_end+0xf8004348>
10004388:	0007883a 	mov	r3,zero
1000438c:	01400804 	movi	r5,32
10004390:	003fed06 	br	10004348 <__alt_data_end+0xf8004348>

10004394 <memcpy>:
10004394:	deffff04 	addi	sp,sp,-4
10004398:	dc000015 	stw	r16,0(sp)
1000439c:	00c003c4 	movi	r3,15
100043a0:	2005883a 	mov	r2,r4
100043a4:	1980432e 	bgeu	r3,r6,100044b4 <memcpy+0x120>
100043a8:	2146b03a 	or	r3,r4,r5
100043ac:	18c000cc 	andi	r3,r3,3
100043b0:	1800421e 	bne	r3,zero,100044bc <memcpy+0x128>
100043b4:	343ffc04 	addi	r16,r6,-16
100043b8:	8020d13a 	srli	r16,r16,4
100043bc:	28c00104 	addi	r3,r5,4
100043c0:	23400104 	addi	r13,r4,4
100043c4:	801e913a 	slli	r15,r16,4
100043c8:	2b000204 	addi	r12,r5,8
100043cc:	22c00204 	addi	r11,r4,8
100043d0:	7bc00504 	addi	r15,r15,20
100043d4:	2a800304 	addi	r10,r5,12
100043d8:	22400304 	addi	r9,r4,12
100043dc:	2bdf883a 	add	r15,r5,r15
100043e0:	2811883a 	mov	r8,r5
100043e4:	200f883a 	mov	r7,r4
100043e8:	41000017 	ldw	r4,0(r8)
100043ec:	39c00404 	addi	r7,r7,16
100043f0:	18c00404 	addi	r3,r3,16
100043f4:	393ffc15 	stw	r4,-16(r7)
100043f8:	1bbffc17 	ldw	r14,-16(r3)
100043fc:	6b400404 	addi	r13,r13,16
10004400:	5ac00404 	addi	r11,r11,16
10004404:	6bbffc15 	stw	r14,-16(r13)
10004408:	63800017 	ldw	r14,0(r12)
1000440c:	4a400404 	addi	r9,r9,16
10004410:	42000404 	addi	r8,r8,16
10004414:	5bbffc15 	stw	r14,-16(r11)
10004418:	53800017 	ldw	r14,0(r10)
1000441c:	63000404 	addi	r12,r12,16
10004420:	52800404 	addi	r10,r10,16
10004424:	4bbffc15 	stw	r14,-16(r9)
10004428:	1bffef1e 	bne	r3,r15,100043e8 <__alt_data_end+0xf80043e8>
1000442c:	81c00044 	addi	r7,r16,1
10004430:	380e913a 	slli	r7,r7,4
10004434:	310003cc 	andi	r4,r6,15
10004438:	02c000c4 	movi	r11,3
1000443c:	11c7883a 	add	r3,r2,r7
10004440:	29cb883a 	add	r5,r5,r7
10004444:	59001f2e 	bgeu	r11,r4,100044c4 <memcpy+0x130>
10004448:	1813883a 	mov	r9,r3
1000444c:	2811883a 	mov	r8,r5
10004450:	200f883a 	mov	r7,r4
10004454:	42800017 	ldw	r10,0(r8)
10004458:	4a400104 	addi	r9,r9,4
1000445c:	39ffff04 	addi	r7,r7,-4
10004460:	4abfff15 	stw	r10,-4(r9)
10004464:	42000104 	addi	r8,r8,4
10004468:	59fffa36 	bltu	r11,r7,10004454 <__alt_data_end+0xf8004454>
1000446c:	213fff04 	addi	r4,r4,-4
10004470:	2008d0ba 	srli	r4,r4,2
10004474:	318000cc 	andi	r6,r6,3
10004478:	21000044 	addi	r4,r4,1
1000447c:	2109883a 	add	r4,r4,r4
10004480:	2109883a 	add	r4,r4,r4
10004484:	1907883a 	add	r3,r3,r4
10004488:	290b883a 	add	r5,r5,r4
1000448c:	30000626 	beq	r6,zero,100044a8 <memcpy+0x114>
10004490:	198d883a 	add	r6,r3,r6
10004494:	29c00003 	ldbu	r7,0(r5)
10004498:	18c00044 	addi	r3,r3,1
1000449c:	29400044 	addi	r5,r5,1
100044a0:	19ffffc5 	stb	r7,-1(r3)
100044a4:	19bffb1e 	bne	r3,r6,10004494 <__alt_data_end+0xf8004494>
100044a8:	dc000017 	ldw	r16,0(sp)
100044ac:	dec00104 	addi	sp,sp,4
100044b0:	f800283a 	ret
100044b4:	2007883a 	mov	r3,r4
100044b8:	003ff406 	br	1000448c <__alt_data_end+0xf800448c>
100044bc:	2007883a 	mov	r3,r4
100044c0:	003ff306 	br	10004490 <__alt_data_end+0xf8004490>
100044c4:	200d883a 	mov	r6,r4
100044c8:	003ff006 	br	1000448c <__alt_data_end+0xf800448c>

100044cc <_printf_r>:
100044cc:	defffd04 	addi	sp,sp,-12
100044d0:	dfc00015 	stw	ra,0(sp)
100044d4:	d9800115 	stw	r6,4(sp)
100044d8:	d9c00215 	stw	r7,8(sp)
100044dc:	280d883a 	mov	r6,r5
100044e0:	21400217 	ldw	r5,8(r4)
100044e4:	d9c00104 	addi	r7,sp,4
100044e8:	00046980 	call	10004698 <___vfprintf_internal_r>
100044ec:	dfc00017 	ldw	ra,0(sp)
100044f0:	dec00304 	addi	sp,sp,12
100044f4:	f800283a 	ret

100044f8 <printf>:
100044f8:	defffc04 	addi	sp,sp,-16
100044fc:	dfc00015 	stw	ra,0(sp)
10004500:	d9400115 	stw	r5,4(sp)
10004504:	d9800215 	stw	r6,8(sp)
10004508:	d9c00315 	stw	r7,12(sp)
1000450c:	00840074 	movhi	r2,4097
10004510:	109a9704 	addi	r2,r2,27228
10004514:	10800017 	ldw	r2,0(r2)
10004518:	200b883a 	mov	r5,r4
1000451c:	d9800104 	addi	r6,sp,4
10004520:	11000217 	ldw	r4,8(r2)
10004524:	00067940 	call	10006794 <__vfprintf_internal>
10004528:	dfc00017 	ldw	ra,0(sp)
1000452c:	dec00404 	addi	sp,sp,16
10004530:	f800283a 	ret

10004534 <_puts_r>:
10004534:	defff604 	addi	sp,sp,-40
10004538:	dc000715 	stw	r16,28(sp)
1000453c:	2021883a 	mov	r16,r4
10004540:	2809883a 	mov	r4,r5
10004544:	dc400815 	stw	r17,32(sp)
10004548:	dfc00915 	stw	ra,36(sp)
1000454c:	2823883a 	mov	r17,r5
10004550:	00046000 	call	10004600 <strlen>
10004554:	00c40074 	movhi	r3,4097
10004558:	18da9704 	addi	r3,r3,27228
1000455c:	18c00017 	ldw	r3,0(r3)
10004560:	11000044 	addi	r4,r2,1
10004564:	d8800115 	stw	r2,4(sp)
10004568:	18c00217 	ldw	r3,8(r3)
1000456c:	01440074 	movhi	r5,4097
10004570:	29536b04 	addi	r5,r5,19884
10004574:	1880030b 	ldhu	r2,12(r3)
10004578:	d9400215 	stw	r5,8(sp)
1000457c:	d9000615 	stw	r4,24(sp)
10004580:	01400044 	movi	r5,1
10004584:	01000084 	movi	r4,2
10004588:	d9000515 	stw	r4,20(sp)
1000458c:	dc400015 	stw	r17,0(sp)
10004590:	d9400315 	stw	r5,12(sp)
10004594:	dec00415 	stw	sp,16(sp)
10004598:	1108000c 	andi	r4,r2,8192
1000459c:	2000061e 	bne	r4,zero,100045b8 <_puts_r+0x84>
100045a0:	19401917 	ldw	r5,100(r3)
100045a4:	0137ffc4 	movi	r4,-8193
100045a8:	10880014 	ori	r2,r2,8192
100045ac:	2908703a 	and	r4,r5,r4
100045b0:	1880030d 	sth	r2,12(r3)
100045b4:	19001915 	stw	r4,100(r3)
100045b8:	81400217 	ldw	r5,8(r16)
100045bc:	8009883a 	mov	r4,r16
100045c0:	d9800404 	addi	r6,sp,16
100045c4:	0008c580 	call	10008c58 <__sfvwrite_r>
100045c8:	1000061e 	bne	r2,zero,100045e4 <_puts_r+0xb0>
100045cc:	00800284 	movi	r2,10
100045d0:	dfc00917 	ldw	ra,36(sp)
100045d4:	dc400817 	ldw	r17,32(sp)
100045d8:	dc000717 	ldw	r16,28(sp)
100045dc:	dec00a04 	addi	sp,sp,40
100045e0:	f800283a 	ret
100045e4:	00bfffc4 	movi	r2,-1
100045e8:	003ff906 	br	100045d0 <__alt_data_end+0xf80045d0>

100045ec <puts>:
100045ec:	00840074 	movhi	r2,4097
100045f0:	109a9704 	addi	r2,r2,27228
100045f4:	200b883a 	mov	r5,r4
100045f8:	11000017 	ldw	r4,0(r2)
100045fc:	00045341 	jmpi	10004534 <_puts_r>

10004600 <strlen>:
10004600:	208000cc 	andi	r2,r4,3
10004604:	10002026 	beq	r2,zero,10004688 <strlen+0x88>
10004608:	20800007 	ldb	r2,0(r4)
1000460c:	10002026 	beq	r2,zero,10004690 <strlen+0x90>
10004610:	2005883a 	mov	r2,r4
10004614:	00000206 	br	10004620 <strlen+0x20>
10004618:	10c00007 	ldb	r3,0(r2)
1000461c:	18001826 	beq	r3,zero,10004680 <strlen+0x80>
10004620:	10800044 	addi	r2,r2,1
10004624:	10c000cc 	andi	r3,r2,3
10004628:	183ffb1e 	bne	r3,zero,10004618 <__alt_data_end+0xf8004618>
1000462c:	10c00017 	ldw	r3,0(r2)
10004630:	01ffbff4 	movhi	r7,65279
10004634:	39ffbfc4 	addi	r7,r7,-257
10004638:	00ca303a 	nor	r5,zero,r3
1000463c:	01a02074 	movhi	r6,32897
10004640:	19c7883a 	add	r3,r3,r7
10004644:	31a02004 	addi	r6,r6,-32640
10004648:	1946703a 	and	r3,r3,r5
1000464c:	1986703a 	and	r3,r3,r6
10004650:	1800091e 	bne	r3,zero,10004678 <strlen+0x78>
10004654:	10800104 	addi	r2,r2,4
10004658:	10c00017 	ldw	r3,0(r2)
1000465c:	19cb883a 	add	r5,r3,r7
10004660:	00c6303a 	nor	r3,zero,r3
10004664:	28c6703a 	and	r3,r5,r3
10004668:	1986703a 	and	r3,r3,r6
1000466c:	183ff926 	beq	r3,zero,10004654 <__alt_data_end+0xf8004654>
10004670:	00000106 	br	10004678 <strlen+0x78>
10004674:	10800044 	addi	r2,r2,1
10004678:	10c00007 	ldb	r3,0(r2)
1000467c:	183ffd1e 	bne	r3,zero,10004674 <__alt_data_end+0xf8004674>
10004680:	1105c83a 	sub	r2,r2,r4
10004684:	f800283a 	ret
10004688:	2005883a 	mov	r2,r4
1000468c:	003fe706 	br	1000462c <__alt_data_end+0xf800462c>
10004690:	0005883a 	mov	r2,zero
10004694:	f800283a 	ret

10004698 <___vfprintf_internal_r>:
10004698:	defeb604 	addi	sp,sp,-1320
1000469c:	dfc14915 	stw	ra,1316(sp)
100046a0:	ddc14715 	stw	r23,1308(sp)
100046a4:	dd814615 	stw	r22,1304(sp)
100046a8:	202f883a 	mov	r23,r4
100046ac:	282d883a 	mov	r22,r5
100046b0:	d9812a15 	stw	r6,1192(sp)
100046b4:	d9c12d15 	stw	r7,1204(sp)
100046b8:	df014815 	stw	fp,1312(sp)
100046bc:	dd414515 	stw	r21,1300(sp)
100046c0:	dd014415 	stw	r20,1296(sp)
100046c4:	dcc14315 	stw	r19,1292(sp)
100046c8:	dc814215 	stw	r18,1288(sp)
100046cc:	dc414115 	stw	r17,1284(sp)
100046d0:	dc014015 	stw	r16,1280(sp)
100046d4:	00093180 	call	10009318 <_localeconv_r>
100046d8:	10800017 	ldw	r2,0(r2)
100046dc:	1009883a 	mov	r4,r2
100046e0:	d8813515 	stw	r2,1236(sp)
100046e4:	00046000 	call	10004600 <strlen>
100046e8:	d8813815 	stw	r2,1248(sp)
100046ec:	b8000226 	beq	r23,zero,100046f8 <___vfprintf_internal_r+0x60>
100046f0:	b8800e17 	ldw	r2,56(r23)
100046f4:	10010526 	beq	r2,zero,10004b0c <___vfprintf_internal_r+0x474>
100046f8:	b0c0030b 	ldhu	r3,12(r22)
100046fc:	1908000c 	andi	r4,r3,8192
10004700:	1805883a 	mov	r2,r3
10004704:	2000071e 	bne	r4,zero,10004724 <___vfprintf_internal_r+0x8c>
10004708:	b1001917 	ldw	r4,100(r22)
1000470c:	18880014 	ori	r2,r3,8192
10004710:	00f7ffc4 	movi	r3,-8193
10004714:	20c8703a 	and	r4,r4,r3
10004718:	b080030d 	sth	r2,12(r22)
1000471c:	1007883a 	mov	r3,r2
10004720:	b1001915 	stw	r4,100(r22)
10004724:	1100020c 	andi	r4,r2,8
10004728:	2000a826 	beq	r4,zero,100049cc <___vfprintf_internal_r+0x334>
1000472c:	b1000417 	ldw	r4,16(r22)
10004730:	2000a626 	beq	r4,zero,100049cc <___vfprintf_internal_r+0x334>
10004734:	1080068c 	andi	r2,r2,26
10004738:	01000284 	movi	r4,10
1000473c:	1100ac26 	beq	r2,r4,100049f0 <___vfprintf_internal_r+0x358>
10004740:	d8c10e04 	addi	r3,sp,1080
10004744:	d9010dc4 	addi	r4,sp,1079
10004748:	d9400404 	addi	r5,sp,16
1000474c:	05040074 	movhi	r20,4097
10004750:	1905c83a 	sub	r2,r3,r4
10004754:	a5137c84 	addi	r20,r20,19954
10004758:	d8c12815 	stw	r3,1184(sp)
1000475c:	d9012915 	stw	r4,1188(sp)
10004760:	d9411e15 	stw	r5,1144(sp)
10004764:	d8012015 	stw	zero,1152(sp)
10004768:	d8011f15 	stw	zero,1148(sp)
1000476c:	d8013315 	stw	zero,1228(sp)
10004770:	d8013715 	stw	zero,1244(sp)
10004774:	d8013915 	stw	zero,1252(sp)
10004778:	d8013b15 	stw	zero,1260(sp)
1000477c:	d8013a15 	stw	zero,1256(sp)
10004780:	d8012f15 	stw	zero,1212(sp)
10004784:	2811883a 	mov	r8,r5
10004788:	d8813c15 	stw	r2,1264(sp)
1000478c:	d8c12a17 	ldw	r3,1192(sp)
10004790:	18800007 	ldb	r2,0(r3)
10004794:	10021326 	beq	r2,zero,10004fe4 <___vfprintf_internal_r+0x94c>
10004798:	00c00944 	movi	r3,37
1000479c:	dc012a17 	ldw	r16,1192(sp)
100047a0:	10c0021e 	bne	r2,r3,100047ac <___vfprintf_internal_r+0x114>
100047a4:	00001606 	br	10004800 <___vfprintf_internal_r+0x168>
100047a8:	10c08526 	beq	r2,r3,100049c0 <___vfprintf_internal_r+0x328>
100047ac:	84000044 	addi	r16,r16,1
100047b0:	80800007 	ldb	r2,0(r16)
100047b4:	103ffc1e 	bne	r2,zero,100047a8 <__alt_data_end+0xf80047a8>
100047b8:	d9012a17 	ldw	r4,1192(sp)
100047bc:	8123c83a 	sub	r17,r16,r4
100047c0:	88000f26 	beq	r17,zero,10004800 <___vfprintf_internal_r+0x168>
100047c4:	d8812a17 	ldw	r2,1192(sp)
100047c8:	d8c12017 	ldw	r3,1152(sp)
100047cc:	44400115 	stw	r17,4(r8)
100047d0:	40800015 	stw	r2,0(r8)
100047d4:	d8811f17 	ldw	r2,1148(sp)
100047d8:	1c47883a 	add	r3,r3,r17
100047dc:	d8c12015 	stw	r3,1152(sp)
100047e0:	10800044 	addi	r2,r2,1
100047e4:	d8811f15 	stw	r2,1148(sp)
100047e8:	00c001c4 	movi	r3,7
100047ec:	1880b516 	blt	r3,r2,10004ac4 <___vfprintf_internal_r+0x42c>
100047f0:	42000204 	addi	r8,r8,8
100047f4:	d8c12f17 	ldw	r3,1212(sp)
100047f8:	1c47883a 	add	r3,r3,r17
100047fc:	d8c12f15 	stw	r3,1212(sp)
10004800:	80800007 	ldb	r2,0(r16)
10004804:	1000b626 	beq	r2,zero,10004ae0 <___vfprintf_internal_r+0x448>
10004808:	80800044 	addi	r2,r16,1
1000480c:	84000047 	ldb	r16,1(r16)
10004810:	0027883a 	mov	r19,zero
10004814:	0039883a 	mov	fp,zero
10004818:	dcc12b05 	stb	r19,1196(sp)
1000481c:	d8012785 	stb	zero,1182(sp)
10004820:	027fffc4 	movi	r9,-1
10004824:	d8012e15 	stw	zero,1208(sp)
10004828:	04401604 	movi	r17,88
1000482c:	04800244 	movi	r18,9
10004830:	da012a15 	stw	r8,1192(sp)
10004834:	e027883a 	mov	r19,fp
10004838:	17000044 	addi	fp,r2,1
1000483c:	80bff804 	addi	r2,r16,-32
10004840:	88831236 	bltu	r17,r2,1000548c <___vfprintf_internal_r+0xdf4>
10004844:	100490ba 	slli	r2,r2,2
10004848:	01040034 	movhi	r4,4096
1000484c:	21121704 	addi	r4,r4,18524
10004850:	1105883a 	add	r2,r2,r4
10004854:	10800017 	ldw	r2,0(r2)
10004858:	1000683a 	jmp	r2
1000485c:	100053a8 	cmpgeui	zero,r2,334
10004860:	1000548c 	andi	zero,r2,338
10004864:	1000548c 	andi	zero,r2,338
10004868:	100053c4 	addi	zero,r2,335
1000486c:	1000548c 	andi	zero,r2,338
10004870:	1000548c 	andi	zero,r2,338
10004874:	1000548c 	andi	zero,r2,338
10004878:	1000548c 	andi	zero,r2,338
1000487c:	1000548c 	andi	zero,r2,338
10004880:	1000548c 	andi	zero,r2,338
10004884:	100053d4 	ori	zero,r2,335
10004888:	100053fc 	xorhi	zero,r2,335
1000488c:	1000548c 	andi	zero,r2,338
10004890:	10004b18 	cmpnei	zero,r2,300
10004894:	10004b28 	cmpgeui	zero,r2,300
10004898:	1000548c 	andi	zero,r2,338
1000489c:	10004b78 	rdprs	zero,r2,301
100048a0:	10004b88 	cmpgei	zero,r2,302
100048a4:	10004b88 	cmpgei	zero,r2,302
100048a8:	10004b88 	cmpgei	zero,r2,302
100048ac:	10004b88 	cmpgei	zero,r2,302
100048b0:	10004b88 	cmpgei	zero,r2,302
100048b4:	10004b88 	cmpgei	zero,r2,302
100048b8:	10004b88 	cmpgei	zero,r2,302
100048bc:	10004b88 	cmpgei	zero,r2,302
100048c0:	10004b88 	cmpgei	zero,r2,302
100048c4:	1000548c 	andi	zero,r2,338
100048c8:	1000548c 	andi	zero,r2,338
100048cc:	1000548c 	andi	zero,r2,338
100048d0:	1000548c 	andi	zero,r2,338
100048d4:	1000548c 	andi	zero,r2,338
100048d8:	1000548c 	andi	zero,r2,338
100048dc:	1000548c 	andi	zero,r2,338
100048e0:	1000548c 	andi	zero,r2,338
100048e4:	1000548c 	andi	zero,r2,338
100048e8:	1000548c 	andi	zero,r2,338
100048ec:	10004bcc 	andi	zero,r2,303
100048f0:	10004fec 	andhi	zero,r2,319
100048f4:	1000548c 	andi	zero,r2,338
100048f8:	10004fec 	andhi	zero,r2,319
100048fc:	1000548c 	andi	zero,r2,338
10004900:	1000548c 	andi	zero,r2,338
10004904:	1000548c 	andi	zero,r2,338
10004908:	1000548c 	andi	zero,r2,338
1000490c:	10005094 	ori	zero,r2,322
10004910:	1000548c 	andi	zero,r2,338
10004914:	1000548c 	andi	zero,r2,338
10004918:	100050a4 	muli	zero,r2,322
1000491c:	1000548c 	andi	zero,r2,338
10004920:	1000548c 	andi	zero,r2,338
10004924:	1000548c 	andi	zero,r2,338
10004928:	1000548c 	andi	zero,r2,338
1000492c:	1000548c 	andi	zero,r2,338
10004930:	100050e8 	cmpgeui	zero,r2,323
10004934:	1000548c 	andi	zero,r2,338
10004938:	1000548c 	andi	zero,r2,338
1000493c:	10005120 	cmpeqi	zero,r2,324
10004940:	1000548c 	andi	zero,r2,338
10004944:	1000548c 	andi	zero,r2,338
10004948:	1000548c 	andi	zero,r2,338
1000494c:	1000548c 	andi	zero,r2,338
10004950:	1000548c 	andi	zero,r2,338
10004954:	1000548c 	andi	zero,r2,338
10004958:	1000548c 	andi	zero,r2,338
1000495c:	1000548c 	andi	zero,r2,338
10004960:	1000548c 	andi	zero,r2,338
10004964:	1000548c 	andi	zero,r2,338
10004968:	1000535c 	xori	zero,r2,333
1000496c:	10005308 	cmpgei	zero,r2,332
10004970:	10004fec 	andhi	zero,r2,319
10004974:	10004fec 	andhi	zero,r2,319
10004978:	10004fec 	andhi	zero,r2,319
1000497c:	1000534c 	andi	zero,r2,333
10004980:	10005308 	cmpgei	zero,r2,332
10004984:	1000548c 	andi	zero,r2,338
10004988:	1000548c 	andi	zero,r2,338
1000498c:	10005224 	muli	zero,r2,328
10004990:	1000548c 	andi	zero,r2,338
10004994:	1000523c 	xorhi	zero,r2,328
10004998:	1000527c 	xorhi	zero,r2,329
1000499c:	100052bc 	xorhi	zero,r2,330
100049a0:	10005188 	cmpgei	zero,r2,326
100049a4:	1000548c 	andi	zero,r2,338
100049a8:	10005410 	cmplti	zero,r2,336
100049ac:	1000548c 	andi	zero,r2,338
100049b0:	10005198 	cmpnei	zero,r2,326
100049b4:	1000548c 	andi	zero,r2,338
100049b8:	1000548c 	andi	zero,r2,338
100049bc:	100051d8 	cmpnei	zero,r2,327
100049c0:	d9412a17 	ldw	r5,1192(sp)
100049c4:	8163c83a 	sub	r17,r16,r5
100049c8:	003f7d06 	br	100047c0 <__alt_data_end+0xf80047c0>
100049cc:	b809883a 	mov	r4,r23
100049d0:	b00b883a 	mov	r5,r22
100049d4:	00067b80 	call	100067b8 <__swsetup_r>
100049d8:	10002d1e 	bne	r2,zero,10004a90 <___vfprintf_internal_r+0x3f8>
100049dc:	b0c0030b 	ldhu	r3,12(r22)
100049e0:	01000284 	movi	r4,10
100049e4:	1805883a 	mov	r2,r3
100049e8:	1080068c 	andi	r2,r2,26
100049ec:	113f541e 	bne	r2,r4,10004740 <__alt_data_end+0xf8004740>
100049f0:	b080038b 	ldhu	r2,14(r22)
100049f4:	113fffcc 	andi	r4,r2,65535
100049f8:	2120001c 	xori	r4,r4,32768
100049fc:	21200004 	addi	r4,r4,-32768
10004a00:	203f4f16 	blt	r4,zero,10004740 <__alt_data_end+0xf8004740>
10004a04:	b2c01917 	ldw	r11,100(r22)
10004a08:	b2800717 	ldw	r10,28(r22)
10004a0c:	b2400917 	ldw	r9,36(r22)
10004a10:	d9812a17 	ldw	r6,1192(sp)
10004a14:	d9c12d17 	ldw	r7,1204(sp)
10004a18:	02010004 	movi	r8,1024
10004a1c:	18ffff4c 	andi	r3,r3,65533
10004a20:	d881078d 	sth	r2,1054(sp)
10004a24:	b809883a 	mov	r4,r23
10004a28:	d8800404 	addi	r2,sp,16
10004a2c:	d9410404 	addi	r5,sp,1040
10004a30:	d8c1070d 	sth	r3,1052(sp)
10004a34:	dac11d15 	stw	r11,1140(sp)
10004a38:	da810b15 	stw	r10,1068(sp)
10004a3c:	da410d15 	stw	r9,1076(sp)
10004a40:	d8810415 	stw	r2,1040(sp)
10004a44:	d8810815 	stw	r2,1056(sp)
10004a48:	da010615 	stw	r8,1048(sp)
10004a4c:	da010915 	stw	r8,1060(sp)
10004a50:	d8010a15 	stw	zero,1064(sp)
10004a54:	00046980 	call	10004698 <___vfprintf_internal_r>
10004a58:	1021883a 	mov	r16,r2
10004a5c:	10000416 	blt	r2,zero,10004a70 <___vfprintf_internal_r+0x3d8>
10004a60:	b809883a 	mov	r4,r23
10004a64:	d9410404 	addi	r5,sp,1040
10004a68:	00082380 	call	10008238 <_fflush_r>
10004a6c:	1007301e 	bne	r2,zero,10006730 <___vfprintf_internal_r+0x2098>
10004a70:	d881070b 	ldhu	r2,1052(sp)
10004a74:	1080100c 	andi	r2,r2,64
10004a78:	10000326 	beq	r2,zero,10004a88 <___vfprintf_internal_r+0x3f0>
10004a7c:	b080030b 	ldhu	r2,12(r22)
10004a80:	10801014 	ori	r2,r2,64
10004a84:	b080030d 	sth	r2,12(r22)
10004a88:	8005883a 	mov	r2,r16
10004a8c:	00000106 	br	10004a94 <___vfprintf_internal_r+0x3fc>
10004a90:	00bfffc4 	movi	r2,-1
10004a94:	dfc14917 	ldw	ra,1316(sp)
10004a98:	df014817 	ldw	fp,1312(sp)
10004a9c:	ddc14717 	ldw	r23,1308(sp)
10004aa0:	dd814617 	ldw	r22,1304(sp)
10004aa4:	dd414517 	ldw	r21,1300(sp)
10004aa8:	dd014417 	ldw	r20,1296(sp)
10004aac:	dcc14317 	ldw	r19,1292(sp)
10004ab0:	dc814217 	ldw	r18,1288(sp)
10004ab4:	dc414117 	ldw	r17,1284(sp)
10004ab8:	dc014017 	ldw	r16,1280(sp)
10004abc:	dec14a04 	addi	sp,sp,1320
10004ac0:	f800283a 	ret
10004ac4:	b809883a 	mov	r4,r23
10004ac8:	b00b883a 	mov	r5,r22
10004acc:	d9811e04 	addi	r6,sp,1144
10004ad0:	000b9a00 	call	1000b9a0 <__sprint_r>
10004ad4:	1000081e 	bne	r2,zero,10004af8 <___vfprintf_internal_r+0x460>
10004ad8:	da000404 	addi	r8,sp,16
10004adc:	003f4506 	br	100047f4 <__alt_data_end+0xf80047f4>
10004ae0:	d8812017 	ldw	r2,1152(sp)
10004ae4:	10000426 	beq	r2,zero,10004af8 <___vfprintf_internal_r+0x460>
10004ae8:	b809883a 	mov	r4,r23
10004aec:	b00b883a 	mov	r5,r22
10004af0:	d9811e04 	addi	r6,sp,1144
10004af4:	000b9a00 	call	1000b9a0 <__sprint_r>
10004af8:	b080030b 	ldhu	r2,12(r22)
10004afc:	1080100c 	andi	r2,r2,64
10004b00:	103fe31e 	bne	r2,zero,10004a90 <__alt_data_end+0xf8004a90>
10004b04:	d8812f17 	ldw	r2,1212(sp)
10004b08:	003fe206 	br	10004a94 <__alt_data_end+0xf8004a94>
10004b0c:	b809883a 	mov	r4,r23
10004b10:	00087f40 	call	100087f4 <__sinit>
10004b14:	003ef806 	br	100046f8 <__alt_data_end+0xf80046f8>
10004b18:	e005883a 	mov	r2,fp
10004b1c:	9cc00114 	ori	r19,r19,4
10004b20:	e4000007 	ldb	r16,0(fp)
10004b24:	003f4406 	br	10004838 <__alt_data_end+0xf8004838>
10004b28:	e4000007 	ldb	r16,0(fp)
10004b2c:	01000a84 	movi	r4,42
10004b30:	e0800044 	addi	r2,fp,1
10004b34:	8106f626 	beq	r16,r4,10006710 <___vfprintf_internal_r+0x2078>
10004b38:	857ff404 	addi	r21,r16,-48
10004b3c:	1039883a 	mov	fp,r2
10004b40:	0013883a 	mov	r9,zero
10004b44:	957f3d36 	bltu	r18,r21,1000483c <__alt_data_end+0xf800483c>
10004b48:	0009883a 	mov	r4,zero
10004b4c:	01400284 	movi	r5,10
10004b50:	00030800 	call	10003080 <__mulsi3>
10004b54:	e4000007 	ldb	r16,0(fp)
10004b58:	a889883a 	add	r4,r21,r2
10004b5c:	e7000044 	addi	fp,fp,1
10004b60:	857ff404 	addi	r21,r16,-48
10004b64:	957ff92e 	bgeu	r18,r21,10004b4c <__alt_data_end+0xf8004b4c>
10004b68:	2013883a 	mov	r9,r4
10004b6c:	203f330e 	bge	r4,zero,1000483c <__alt_data_end+0xf800483c>
10004b70:	027fffc4 	movi	r9,-1
10004b74:	003f3106 	br	1000483c <__alt_data_end+0xf800483c>
10004b78:	9cc02014 	ori	r19,r19,128
10004b7c:	e005883a 	mov	r2,fp
10004b80:	e4000007 	ldb	r16,0(fp)
10004b84:	003f2c06 	br	10004838 <__alt_data_end+0xf8004838>
10004b88:	857ff404 	addi	r21,r16,-48
10004b8c:	d8012e15 	stw	zero,1208(sp)
10004b90:	e021883a 	mov	r16,fp
10004b94:	0009883a 	mov	r4,zero
10004b98:	da412c15 	stw	r9,1200(sp)
10004b9c:	01400284 	movi	r5,10
10004ba0:	00030800 	call	10003080 <__mulsi3>
10004ba4:	81400007 	ldb	r5,0(r16)
10004ba8:	1549883a 	add	r4,r2,r21
10004bac:	e7000044 	addi	fp,fp,1
10004bb0:	2d7ff404 	addi	r21,r5,-48
10004bb4:	e021883a 	mov	r16,fp
10004bb8:	957ff82e 	bgeu	r18,r21,10004b9c <__alt_data_end+0xf8004b9c>
10004bbc:	2821883a 	mov	r16,r5
10004bc0:	d9012e15 	stw	r4,1208(sp)
10004bc4:	da412c17 	ldw	r9,1200(sp)
10004bc8:	003f1c06 	br	1000483c <__alt_data_end+0xf800483c>
10004bcc:	da012a17 	ldw	r8,1192(sp)
10004bd0:	df012a15 	stw	fp,1192(sp)
10004bd4:	9839883a 	mov	fp,r19
10004bd8:	dcc12b03 	ldbu	r19,1196(sp)
10004bdc:	e7000414 	ori	fp,fp,16
10004be0:	e080080c 	andi	r2,fp,32
10004be4:	dcc12785 	stb	r19,1182(sp)
10004be8:	d8c12d17 	ldw	r3,1204(sp)
10004bec:	1001ce26 	beq	r2,zero,10005328 <___vfprintf_internal_r+0xc90>
10004bf0:	d9012d17 	ldw	r4,1204(sp)
10004bf4:	18800117 	ldw	r2,4(r3)
10004bf8:	1c800017 	ldw	r18,0(r3)
10004bfc:	21000204 	addi	r4,r4,8
10004c00:	d9012d15 	stw	r4,1204(sp)
10004c04:	102b883a 	mov	r21,r2
10004c08:	10044916 	blt	r2,zero,10005d30 <___vfprintf_internal_r+0x1698>
10004c0c:	dcc12783 	ldbu	r19,1182(sp)
10004c10:	da413215 	stw	r9,1224(sp)
10004c14:	00800044 	movi	r2,1
10004c18:	9546b03a 	or	r3,r18,r21
10004c1c:	48000216 	blt	r9,zero,10004c28 <___vfprintf_internal_r+0x590>
10004c20:	013fdfc4 	movi	r4,-129
10004c24:	e138703a 	and	fp,fp,r4
10004c28:	1802251e 	bne	r3,zero,100054c0 <___vfprintf_internal_r+0xe28>
10004c2c:	48031726 	beq	r9,zero,1000588c <___vfprintf_internal_r+0x11f4>
10004c30:	10803fcc 	andi	r2,r2,255
10004c34:	00c00044 	movi	r3,1
10004c38:	10c24526 	beq	r2,r3,10005550 <___vfprintf_internal_r+0xeb8>
10004c3c:	00c00084 	movi	r3,2
10004c40:	10c33426 	beq	r2,r3,10005914 <___vfprintf_internal_r+0x127c>
10004c44:	d8c10e04 	addi	r3,sp,1080
10004c48:	9008d0fa 	srli	r4,r18,3
10004c4c:	a80a977a 	slli	r5,r21,29
10004c50:	a82ad0fa 	srli	r21,r21,3
10004c54:	948001cc 	andi	r18,r18,7
10004c58:	90800c04 	addi	r2,r18,48
10004c5c:	18ffffc4 	addi	r3,r3,-1
10004c60:	2924b03a 	or	r18,r5,r4
10004c64:	18800005 	stb	r2,0(r3)
10004c68:	9548b03a 	or	r4,r18,r21
10004c6c:	203ff61e 	bne	r4,zero,10004c48 <__alt_data_end+0xf8004c48>
10004c70:	e100004c 	andi	r4,fp,1
10004c74:	d8c13115 	stw	r3,1220(sp)
10004c78:	20039a1e 	bne	r4,zero,10005ae4 <___vfprintf_internal_r+0x144c>
10004c7c:	d8812817 	ldw	r2,1184(sp)
10004c80:	10e3c83a 	sub	r17,r2,r3
10004c84:	8805883a 	mov	r2,r17
10004c88:	8a40010e 	bge	r17,r9,10004c90 <___vfprintf_internal_r+0x5f8>
10004c8c:	4805883a 	mov	r2,r9
10004c90:	d8812b15 	stw	r2,1196(sp)
10004c94:	d8013415 	stw	zero,1232(sp)
10004c98:	98803fcc 	andi	r2,r19,255
10004c9c:	1080201c 	xori	r2,r2,128
10004ca0:	10bfe004 	addi	r2,r2,-128
10004ca4:	10000326 	beq	r2,zero,10004cb4 <___vfprintf_internal_r+0x61c>
10004ca8:	d8c12b17 	ldw	r3,1196(sp)
10004cac:	18c00044 	addi	r3,r3,1
10004cb0:	d8c12b15 	stw	r3,1196(sp)
10004cb4:	e0c0008c 	andi	r3,fp,2
10004cb8:	d8c12c15 	stw	r3,1200(sp)
10004cbc:	18000326 	beq	r3,zero,10004ccc <___vfprintf_internal_r+0x634>
10004cc0:	d8c12b17 	ldw	r3,1196(sp)
10004cc4:	18c00084 	addi	r3,r3,2
10004cc8:	d8c12b15 	stw	r3,1196(sp)
10004ccc:	e0c0210c 	andi	r3,fp,132
10004cd0:	d8c13015 	stw	r3,1216(sp)
10004cd4:	1801f81e 	bne	r3,zero,100054b8 <___vfprintf_internal_r+0xe20>
10004cd8:	d9012e17 	ldw	r4,1208(sp)
10004cdc:	d8c12b17 	ldw	r3,1196(sp)
10004ce0:	20ebc83a 	sub	r21,r4,r3
10004ce4:	0541f40e 	bge	zero,r21,100054b8 <___vfprintf_internal_r+0xe20>
10004ce8:	02400404 	movi	r9,16
10004cec:	d8c12017 	ldw	r3,1152(sp)
10004cf0:	d8811f17 	ldw	r2,1148(sp)
10004cf4:	4d45750e 	bge	r9,r21,100062cc <___vfprintf_internal_r+0x1c34>
10004cf8:	01440074 	movhi	r5,4097
10004cfc:	29538084 	addi	r5,r5,19970
10004d00:	d9413615 	stw	r5,1240(sp)
10004d04:	4827883a 	mov	r19,r9
10004d08:	048001c4 	movi	r18,7
10004d0c:	00000306 	br	10004d1c <___vfprintf_internal_r+0x684>
10004d10:	ad7ffc04 	addi	r21,r21,-16
10004d14:	42000204 	addi	r8,r8,8
10004d18:	9d40130e 	bge	r19,r21,10004d68 <___vfprintf_internal_r+0x6d0>
10004d1c:	01040074 	movhi	r4,4097
10004d20:	18c00404 	addi	r3,r3,16
10004d24:	10800044 	addi	r2,r2,1
10004d28:	21138084 	addi	r4,r4,19970
10004d2c:	41000015 	stw	r4,0(r8)
10004d30:	44c00115 	stw	r19,4(r8)
10004d34:	d8c12015 	stw	r3,1152(sp)
10004d38:	d8811f15 	stw	r2,1148(sp)
10004d3c:	90bff40e 	bge	r18,r2,10004d10 <__alt_data_end+0xf8004d10>
10004d40:	b809883a 	mov	r4,r23
10004d44:	b00b883a 	mov	r5,r22
10004d48:	d9811e04 	addi	r6,sp,1144
10004d4c:	000b9a00 	call	1000b9a0 <__sprint_r>
10004d50:	103f691e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
10004d54:	ad7ffc04 	addi	r21,r21,-16
10004d58:	d8c12017 	ldw	r3,1152(sp)
10004d5c:	d8811f17 	ldw	r2,1148(sp)
10004d60:	da000404 	addi	r8,sp,16
10004d64:	9d7fed16 	blt	r19,r21,10004d1c <__alt_data_end+0xf8004d1c>
10004d68:	d9413617 	ldw	r5,1240(sp)
10004d6c:	a8c7883a 	add	r3,r21,r3
10004d70:	10800044 	addi	r2,r2,1
10004d74:	41400015 	stw	r5,0(r8)
10004d78:	45400115 	stw	r21,4(r8)
10004d7c:	d8c12015 	stw	r3,1152(sp)
10004d80:	d8811f15 	stw	r2,1148(sp)
10004d84:	010001c4 	movi	r4,7
10004d88:	20832b16 	blt	r4,r2,10005a38 <___vfprintf_internal_r+0x13a0>
10004d8c:	d8812787 	ldb	r2,1182(sp)
10004d90:	42000204 	addi	r8,r8,8
10004d94:	10000c26 	beq	r2,zero,10004dc8 <___vfprintf_internal_r+0x730>
10004d98:	d8811f17 	ldw	r2,1148(sp)
10004d9c:	d9012784 	addi	r4,sp,1182
10004da0:	18c00044 	addi	r3,r3,1
10004da4:	10800044 	addi	r2,r2,1
10004da8:	41000015 	stw	r4,0(r8)
10004dac:	01000044 	movi	r4,1
10004db0:	41000115 	stw	r4,4(r8)
10004db4:	d8c12015 	stw	r3,1152(sp)
10004db8:	d8811f15 	stw	r2,1148(sp)
10004dbc:	010001c4 	movi	r4,7
10004dc0:	2082c416 	blt	r4,r2,100058d4 <___vfprintf_internal_r+0x123c>
10004dc4:	42000204 	addi	r8,r8,8
10004dc8:	d8812c17 	ldw	r2,1200(sp)
10004dcc:	10000c26 	beq	r2,zero,10004e00 <___vfprintf_internal_r+0x768>
10004dd0:	d8811f17 	ldw	r2,1148(sp)
10004dd4:	d9012704 	addi	r4,sp,1180
10004dd8:	18c00084 	addi	r3,r3,2
10004ddc:	10800044 	addi	r2,r2,1
10004de0:	41000015 	stw	r4,0(r8)
10004de4:	01000084 	movi	r4,2
10004de8:	41000115 	stw	r4,4(r8)
10004dec:	d8c12015 	stw	r3,1152(sp)
10004df0:	d8811f15 	stw	r2,1148(sp)
10004df4:	010001c4 	movi	r4,7
10004df8:	2082be16 	blt	r4,r2,100058f4 <___vfprintf_internal_r+0x125c>
10004dfc:	42000204 	addi	r8,r8,8
10004e00:	d9013017 	ldw	r4,1216(sp)
10004e04:	00802004 	movi	r2,128
10004e08:	20822026 	beq	r4,r2,1000568c <___vfprintf_internal_r+0xff4>
10004e0c:	d9413217 	ldw	r5,1224(sp)
10004e10:	2c67c83a 	sub	r19,r5,r17
10004e14:	04c0260e 	bge	zero,r19,10004eb0 <___vfprintf_internal_r+0x818>
10004e18:	05400404 	movi	r21,16
10004e1c:	d8811f17 	ldw	r2,1148(sp)
10004e20:	acc4720e 	bge	r21,r19,10005fec <___vfprintf_internal_r+0x1954>
10004e24:	01440074 	movhi	r5,4097
10004e28:	29537c84 	addi	r5,r5,19954
10004e2c:	d9412c15 	stw	r5,1200(sp)
10004e30:	048001c4 	movi	r18,7
10004e34:	00000306 	br	10004e44 <___vfprintf_internal_r+0x7ac>
10004e38:	9cfffc04 	addi	r19,r19,-16
10004e3c:	42000204 	addi	r8,r8,8
10004e40:	acc0110e 	bge	r21,r19,10004e88 <___vfprintf_internal_r+0x7f0>
10004e44:	18c00404 	addi	r3,r3,16
10004e48:	10800044 	addi	r2,r2,1
10004e4c:	45000015 	stw	r20,0(r8)
10004e50:	45400115 	stw	r21,4(r8)
10004e54:	d8c12015 	stw	r3,1152(sp)
10004e58:	d8811f15 	stw	r2,1148(sp)
10004e5c:	90bff60e 	bge	r18,r2,10004e38 <__alt_data_end+0xf8004e38>
10004e60:	b809883a 	mov	r4,r23
10004e64:	b00b883a 	mov	r5,r22
10004e68:	d9811e04 	addi	r6,sp,1144
10004e6c:	000b9a00 	call	1000b9a0 <__sprint_r>
10004e70:	103f211e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
10004e74:	9cfffc04 	addi	r19,r19,-16
10004e78:	d8c12017 	ldw	r3,1152(sp)
10004e7c:	d8811f17 	ldw	r2,1148(sp)
10004e80:	da000404 	addi	r8,sp,16
10004e84:	acffef16 	blt	r21,r19,10004e44 <__alt_data_end+0xf8004e44>
10004e88:	d9012c17 	ldw	r4,1200(sp)
10004e8c:	1cc7883a 	add	r3,r3,r19
10004e90:	10800044 	addi	r2,r2,1
10004e94:	41000015 	stw	r4,0(r8)
10004e98:	44c00115 	stw	r19,4(r8)
10004e9c:	d8c12015 	stw	r3,1152(sp)
10004ea0:	d8811f15 	stw	r2,1148(sp)
10004ea4:	010001c4 	movi	r4,7
10004ea8:	20828216 	blt	r4,r2,100058b4 <___vfprintf_internal_r+0x121c>
10004eac:	42000204 	addi	r8,r8,8
10004eb0:	e080400c 	andi	r2,fp,256
10004eb4:	1001ac1e 	bne	r2,zero,10005568 <___vfprintf_internal_r+0xed0>
10004eb8:	d8811f17 	ldw	r2,1148(sp)
10004ebc:	d9413117 	ldw	r5,1220(sp)
10004ec0:	1c47883a 	add	r3,r3,r17
10004ec4:	10800044 	addi	r2,r2,1
10004ec8:	41400015 	stw	r5,0(r8)
10004ecc:	44400115 	stw	r17,4(r8)
10004ed0:	d8c12015 	stw	r3,1152(sp)
10004ed4:	d8811f15 	stw	r2,1148(sp)
10004ed8:	010001c4 	movi	r4,7
10004edc:	20825d16 	blt	r4,r2,10005854 <___vfprintf_internal_r+0x11bc>
10004ee0:	42000204 	addi	r8,r8,8
10004ee4:	e080010c 	andi	r2,fp,4
10004ee8:	10003126 	beq	r2,zero,10004fb0 <___vfprintf_internal_r+0x918>
10004eec:	d8812e17 	ldw	r2,1208(sp)
10004ef0:	d9012b17 	ldw	r4,1196(sp)
10004ef4:	1121c83a 	sub	r16,r2,r4
10004ef8:	04002d0e 	bge	zero,r16,10004fb0 <___vfprintf_internal_r+0x918>
10004efc:	04400404 	movi	r17,16
10004f00:	d8811f17 	ldw	r2,1148(sp)
10004f04:	8c05340e 	bge	r17,r16,100063d8 <___vfprintf_internal_r+0x1d40>
10004f08:	01040074 	movhi	r4,4097
10004f0c:	21138084 	addi	r4,r4,19970
10004f10:	d9013615 	stw	r4,1240(sp)
10004f14:	048001c4 	movi	r18,7
10004f18:	00000306 	br	10004f28 <___vfprintf_internal_r+0x890>
10004f1c:	843ffc04 	addi	r16,r16,-16
10004f20:	42000204 	addi	r8,r8,8
10004f24:	8c00130e 	bge	r17,r16,10004f74 <___vfprintf_internal_r+0x8dc>
10004f28:	01440074 	movhi	r5,4097
10004f2c:	18c00404 	addi	r3,r3,16
10004f30:	10800044 	addi	r2,r2,1
10004f34:	29538084 	addi	r5,r5,19970
10004f38:	41400015 	stw	r5,0(r8)
10004f3c:	44400115 	stw	r17,4(r8)
10004f40:	d8c12015 	stw	r3,1152(sp)
10004f44:	d8811f15 	stw	r2,1148(sp)
10004f48:	90bff40e 	bge	r18,r2,10004f1c <__alt_data_end+0xf8004f1c>
10004f4c:	b809883a 	mov	r4,r23
10004f50:	b00b883a 	mov	r5,r22
10004f54:	d9811e04 	addi	r6,sp,1144
10004f58:	000b9a00 	call	1000b9a0 <__sprint_r>
10004f5c:	103ee61e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
10004f60:	843ffc04 	addi	r16,r16,-16
10004f64:	d8c12017 	ldw	r3,1152(sp)
10004f68:	d8811f17 	ldw	r2,1148(sp)
10004f6c:	da000404 	addi	r8,sp,16
10004f70:	8c3fed16 	blt	r17,r16,10004f28 <__alt_data_end+0xf8004f28>
10004f74:	d9013617 	ldw	r4,1240(sp)
10004f78:	1c07883a 	add	r3,r3,r16
10004f7c:	10800044 	addi	r2,r2,1
10004f80:	41000015 	stw	r4,0(r8)
10004f84:	44000115 	stw	r16,4(r8)
10004f88:	d8c12015 	stw	r3,1152(sp)
10004f8c:	d8811f15 	stw	r2,1148(sp)
10004f90:	010001c4 	movi	r4,7
10004f94:	2080060e 	bge	r4,r2,10004fb0 <___vfprintf_internal_r+0x918>
10004f98:	b809883a 	mov	r4,r23
10004f9c:	b00b883a 	mov	r5,r22
10004fa0:	d9811e04 	addi	r6,sp,1144
10004fa4:	000b9a00 	call	1000b9a0 <__sprint_r>
10004fa8:	103ed31e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
10004fac:	d8c12017 	ldw	r3,1152(sp)
10004fb0:	df012b17 	ldw	fp,1196(sp)
10004fb4:	d9412e17 	ldw	r5,1208(sp)
10004fb8:	e140010e 	bge	fp,r5,10004fc0 <___vfprintf_internal_r+0x928>
10004fbc:	2839883a 	mov	fp,r5
10004fc0:	d8812f17 	ldw	r2,1212(sp)
10004fc4:	1705883a 	add	r2,r2,fp
10004fc8:	d8812f15 	stw	r2,1212(sp)
10004fcc:	1802291e 	bne	r3,zero,10005874 <___vfprintf_internal_r+0x11dc>
10004fd0:	d8c12a17 	ldw	r3,1192(sp)
10004fd4:	d8011f15 	stw	zero,1148(sp)
10004fd8:	da000404 	addi	r8,sp,16
10004fdc:	18800007 	ldb	r2,0(r3)
10004fe0:	103ded1e 	bne	r2,zero,10004798 <__alt_data_end+0xf8004798>
10004fe4:	dc012a17 	ldw	r16,1192(sp)
10004fe8:	003e0506 	br	10004800 <__alt_data_end+0xf8004800>
10004fec:	d9012d17 	ldw	r4,1204(sp)
10004ff0:	d9412d17 	ldw	r5,1204(sp)
10004ff4:	da012a17 	ldw	r8,1192(sp)
10004ff8:	21000017 	ldw	r4,0(r4)
10004ffc:	29400117 	ldw	r5,4(r5)
10005000:	df012a15 	stw	fp,1192(sp)
10005004:	9839883a 	mov	fp,r19
10005008:	dcc12b03 	ldbu	r19,1196(sp)
1000500c:	d9013715 	stw	r4,1244(sp)
10005010:	d9413915 	stw	r5,1252(sp)
10005014:	da013f15 	stw	r8,1276(sp)
10005018:	da413e15 	stw	r9,1272(sp)
1000501c:	dcc12785 	stb	r19,1182(sp)
10005020:	000b5fc0 	call	1000b5fc <__fpclassifyd>
10005024:	d8c12d17 	ldw	r3,1204(sp)
10005028:	04400044 	movi	r17,1
1000502c:	da013f17 	ldw	r8,1276(sp)
10005030:	1c800204 	addi	r18,r3,8
10005034:	da413e17 	ldw	r9,1272(sp)
10005038:	d9013717 	ldw	r4,1244(sp)
1000503c:	d9413917 	ldw	r5,1252(sp)
10005040:	1443451e 	bne	r2,r17,10005d58 <___vfprintf_internal_r+0x16c0>
10005044:	000d883a 	mov	r6,zero
10005048:	000f883a 	mov	r7,zero
1000504c:	000ee8c0 	call	1000ee8c <__ledf2>
10005050:	da013f17 	ldw	r8,1276(sp)
10005054:	1004fe16 	blt	r2,zero,10006450 <___vfprintf_internal_r+0x1db8>
10005058:	dcc12783 	ldbu	r19,1182(sp)
1000505c:	008011c4 	movi	r2,71
10005060:	14045d0e 	bge	r2,r16,100061d8 <___vfprintf_internal_r+0x1b40>
10005064:	01440074 	movhi	r5,4097
10005068:	29536d04 	addi	r5,r5,19892
1000506c:	d9413115 	stw	r5,1220(sp)
10005070:	00c000c4 	movi	r3,3
10005074:	00bfdfc4 	movi	r2,-129
10005078:	d8c12b15 	stw	r3,1196(sp)
1000507c:	e0b8703a 	and	fp,fp,r2
10005080:	dc812d15 	stw	r18,1204(sp)
10005084:	1823883a 	mov	r17,r3
10005088:	d8013215 	stw	zero,1224(sp)
1000508c:	d8013415 	stw	zero,1232(sp)
10005090:	003f0106 	br	10004c98 <__alt_data_end+0xf8004c98>
10005094:	9cc00214 	ori	r19,r19,8
10005098:	e005883a 	mov	r2,fp
1000509c:	e4000007 	ldb	r16,0(fp)
100050a0:	003de506 	br	10004838 <__alt_data_end+0xf8004838>
100050a4:	da012a17 	ldw	r8,1192(sp)
100050a8:	df012a15 	stw	fp,1192(sp)
100050ac:	9f000414 	ori	fp,r19,16
100050b0:	e0c0080c 	andi	r3,fp,32
100050b4:	d8812d17 	ldw	r2,1204(sp)
100050b8:	18007626 	beq	r3,zero,10005294 <___vfprintf_internal_r+0xbfc>
100050bc:	d9412d17 	ldw	r5,1204(sp)
100050c0:	14800017 	ldw	r18,0(r2)
100050c4:	15400117 	ldw	r21,4(r2)
100050c8:	29400204 	addi	r5,r5,8
100050cc:	d9412d15 	stw	r5,1204(sp)
100050d0:	0005883a 	mov	r2,zero
100050d4:	9546b03a 	or	r3,r18,r21
100050d8:	d8012785 	stb	zero,1182(sp)
100050dc:	da413215 	stw	r9,1224(sp)
100050e0:	0027883a 	mov	r19,zero
100050e4:	003ecd06 	br	10004c1c <__alt_data_end+0xf8004c1c>
100050e8:	da012a17 	ldw	r8,1192(sp)
100050ec:	df012a15 	stw	fp,1192(sp)
100050f0:	9f000414 	ori	fp,r19,16
100050f4:	e0c0080c 	andi	r3,fp,32
100050f8:	d8812d17 	ldw	r2,1204(sp)
100050fc:	18002c26 	beq	r3,zero,100051b0 <___vfprintf_internal_r+0xb18>
10005100:	d9012d17 	ldw	r4,1204(sp)
10005104:	14800017 	ldw	r18,0(r2)
10005108:	15400117 	ldw	r21,4(r2)
1000510c:	21000204 	addi	r4,r4,8
10005110:	d9012d15 	stw	r4,1204(sp)
10005114:	00800044 	movi	r2,1
10005118:	9546b03a 	or	r3,r18,r21
1000511c:	003fee06 	br	100050d8 <__alt_data_end+0xf80050d8>
10005120:	da012a17 	ldw	r8,1192(sp)
10005124:	df012a15 	stw	fp,1192(sp)
10005128:	9839883a 	mov	fp,r19
1000512c:	dcc12b03 	ldbu	r19,1196(sp)
10005130:	01440074 	movhi	r5,4097
10005134:	29537004 	addi	r5,r5,19904
10005138:	dcc12785 	stb	r19,1182(sp)
1000513c:	d9413b15 	stw	r5,1260(sp)
10005140:	e0c0080c 	andi	r3,fp,32
10005144:	d8812d17 	ldw	r2,1204(sp)
10005148:	18002e26 	beq	r3,zero,10005204 <___vfprintf_internal_r+0xb6c>
1000514c:	d9412d17 	ldw	r5,1204(sp)
10005150:	14800017 	ldw	r18,0(r2)
10005154:	15400117 	ldw	r21,4(r2)
10005158:	29400204 	addi	r5,r5,8
1000515c:	d9412d15 	stw	r5,1204(sp)
10005160:	e080004c 	andi	r2,fp,1
10005164:	10025c26 	beq	r2,zero,10005ad8 <___vfprintf_internal_r+0x1440>
10005168:	9546b03a 	or	r3,r18,r21
1000516c:	18038f26 	beq	r3,zero,10005fac <___vfprintf_internal_r+0x1914>
10005170:	00800c04 	movi	r2,48
10005174:	d8812705 	stb	r2,1180(sp)
10005178:	dc012745 	stb	r16,1181(sp)
1000517c:	e7000094 	ori	fp,fp,2
10005180:	00800084 	movi	r2,2
10005184:	003fd406 	br	100050d8 <__alt_data_end+0xf80050d8>
10005188:	9cc00814 	ori	r19,r19,32
1000518c:	e005883a 	mov	r2,fp
10005190:	e4000007 	ldb	r16,0(fp)
10005194:	003da806 	br	10004838 <__alt_data_end+0xf8004838>
10005198:	da012a17 	ldw	r8,1192(sp)
1000519c:	df012a15 	stw	fp,1192(sp)
100051a0:	9839883a 	mov	fp,r19
100051a4:	e0c0080c 	andi	r3,fp,32
100051a8:	d8812d17 	ldw	r2,1204(sp)
100051ac:	183fd41e 	bne	r3,zero,10005100 <__alt_data_end+0xf8005100>
100051b0:	e0c0040c 	andi	r3,fp,16
100051b4:	18035f26 	beq	r3,zero,10005f34 <___vfprintf_internal_r+0x189c>
100051b8:	d9412d17 	ldw	r5,1204(sp)
100051bc:	14800017 	ldw	r18,0(r2)
100051c0:	002b883a 	mov	r21,zero
100051c4:	29400104 	addi	r5,r5,4
100051c8:	d9412d15 	stw	r5,1204(sp)
100051cc:	00800044 	movi	r2,1
100051d0:	9007883a 	mov	r3,r18
100051d4:	003fc006 	br	100050d8 <__alt_data_end+0xf80050d8>
100051d8:	da012a17 	ldw	r8,1192(sp)
100051dc:	df012a15 	stw	fp,1192(sp)
100051e0:	9839883a 	mov	fp,r19
100051e4:	dcc12b03 	ldbu	r19,1196(sp)
100051e8:	01040074 	movhi	r4,4097
100051ec:	21137504 	addi	r4,r4,19924
100051f0:	d9013b15 	stw	r4,1260(sp)
100051f4:	dcc12785 	stb	r19,1182(sp)
100051f8:	e0c0080c 	andi	r3,fp,32
100051fc:	d8812d17 	ldw	r2,1204(sp)
10005200:	183fd21e 	bne	r3,zero,1000514c <__alt_data_end+0xf800514c>
10005204:	e0c0040c 	andi	r3,fp,16
10005208:	18035426 	beq	r3,zero,10005f5c <___vfprintf_internal_r+0x18c4>
1000520c:	d8c12d17 	ldw	r3,1204(sp)
10005210:	14800017 	ldw	r18,0(r2)
10005214:	002b883a 	mov	r21,zero
10005218:	18c00104 	addi	r3,r3,4
1000521c:	d8c12d15 	stw	r3,1204(sp)
10005220:	003fcf06 	br	10005160 <__alt_data_end+0xf8005160>
10005224:	e4000007 	ldb	r16,0(fp)
10005228:	00801b04 	movi	r2,108
1000522c:	8083f726 	beq	r16,r2,1000620c <___vfprintf_internal_r+0x1b74>
10005230:	9cc00414 	ori	r19,r19,16
10005234:	e005883a 	mov	r2,fp
10005238:	003d7f06 	br	10004838 <__alt_data_end+0xf8004838>
1000523c:	da012a17 	ldw	r8,1192(sp)
10005240:	df012a15 	stw	fp,1192(sp)
10005244:	9839883a 	mov	fp,r19
10005248:	dcc12b03 	ldbu	r19,1196(sp)
1000524c:	e080080c 	andi	r2,fp,32
10005250:	dcc12785 	stb	r19,1182(sp)
10005254:	10032226 	beq	r2,zero,10005ee0 <___vfprintf_internal_r+0x1848>
10005258:	d9412d17 	ldw	r5,1204(sp)
1000525c:	d9012f17 	ldw	r4,1212(sp)
10005260:	28800017 	ldw	r2,0(r5)
10005264:	2007d7fa 	srai	r3,r4,31
10005268:	29400104 	addi	r5,r5,4
1000526c:	d9412d15 	stw	r5,1204(sp)
10005270:	11000015 	stw	r4,0(r2)
10005274:	10c00115 	stw	r3,4(r2)
10005278:	003d4406 	br	1000478c <__alt_data_end+0xf800478c>
1000527c:	da012a17 	ldw	r8,1192(sp)
10005280:	df012a15 	stw	fp,1192(sp)
10005284:	9839883a 	mov	fp,r19
10005288:	e0c0080c 	andi	r3,fp,32
1000528c:	d8812d17 	ldw	r2,1204(sp)
10005290:	183f8a1e 	bne	r3,zero,100050bc <__alt_data_end+0xf80050bc>
10005294:	e0c0040c 	andi	r3,fp,16
10005298:	18031c26 	beq	r3,zero,10005f0c <___vfprintf_internal_r+0x1874>
1000529c:	14800017 	ldw	r18,0(r2)
100052a0:	d8812d17 	ldw	r2,1204(sp)
100052a4:	002b883a 	mov	r21,zero
100052a8:	9007883a 	mov	r3,r18
100052ac:	10800104 	addi	r2,r2,4
100052b0:	d8812d15 	stw	r2,1204(sp)
100052b4:	0005883a 	mov	r2,zero
100052b8:	003f8706 	br	100050d8 <__alt_data_end+0xf80050d8>
100052bc:	d9412d17 	ldw	r5,1204(sp)
100052c0:	00800c04 	movi	r2,48
100052c4:	d8812705 	stb	r2,1180(sp)
100052c8:	2c800017 	ldw	r18,0(r5)
100052cc:	00801e04 	movi	r2,120
100052d0:	d8812745 	stb	r2,1181(sp)
100052d4:	00840074 	movhi	r2,4097
100052d8:	10937504 	addi	r2,r2,19924
100052dc:	29400104 	addi	r5,r5,4
100052e0:	da012a17 	ldw	r8,1192(sp)
100052e4:	d8813b15 	stw	r2,1260(sp)
100052e8:	df012a15 	stw	fp,1192(sp)
100052ec:	002b883a 	mov	r21,zero
100052f0:	9f000094 	ori	fp,r19,2
100052f4:	d9412d15 	stw	r5,1204(sp)
100052f8:	00800084 	movi	r2,2
100052fc:	04001e04 	movi	r16,120
10005300:	9007883a 	mov	r3,r18
10005304:	003f7406 	br	100050d8 <__alt_data_end+0xf80050d8>
10005308:	da012a17 	ldw	r8,1192(sp)
1000530c:	df012a15 	stw	fp,1192(sp)
10005310:	9839883a 	mov	fp,r19
10005314:	dcc12b03 	ldbu	r19,1196(sp)
10005318:	e080080c 	andi	r2,fp,32
1000531c:	d8c12d17 	ldw	r3,1204(sp)
10005320:	dcc12785 	stb	r19,1182(sp)
10005324:	103e321e 	bne	r2,zero,10004bf0 <__alt_data_end+0xf8004bf0>
10005328:	e080040c 	andi	r2,fp,16
1000532c:	10031326 	beq	r2,zero,10005f7c <___vfprintf_internal_r+0x18e4>
10005330:	1c800017 	ldw	r18,0(r3)
10005334:	d9412d17 	ldw	r5,1204(sp)
10005338:	902bd7fa 	srai	r21,r18,31
1000533c:	29400104 	addi	r5,r5,4
10005340:	d9412d15 	stw	r5,1204(sp)
10005344:	a805883a 	mov	r2,r21
10005348:	003e2f06 	br	10004c08 <__alt_data_end+0xf8004c08>
1000534c:	9cc01014 	ori	r19,r19,64
10005350:	e005883a 	mov	r2,fp
10005354:	e4000007 	ldb	r16,0(fp)
10005358:	003d3706 	br	10004838 <__alt_data_end+0xf8004838>
1000535c:	d8c12d17 	ldw	r3,1204(sp)
10005360:	d9012d17 	ldw	r4,1204(sp)
10005364:	da012a17 	ldw	r8,1192(sp)
10005368:	18800017 	ldw	r2,0(r3)
1000536c:	21000104 	addi	r4,r4,4
10005370:	00c00044 	movi	r3,1
10005374:	df012a15 	stw	fp,1192(sp)
10005378:	d8c12b15 	stw	r3,1196(sp)
1000537c:	9839883a 	mov	fp,r19
10005380:	d8012785 	stb	zero,1182(sp)
10005384:	d8810405 	stb	r2,1040(sp)
10005388:	d9012d15 	stw	r4,1204(sp)
1000538c:	1823883a 	mov	r17,r3
10005390:	d8c10404 	addi	r3,sp,1040
10005394:	d8013215 	stw	zero,1224(sp)
10005398:	d8013415 	stw	zero,1232(sp)
1000539c:	d8c13115 	stw	r3,1220(sp)
100053a0:	0005883a 	mov	r2,zero
100053a4:	003e4306 	br	10004cb4 <__alt_data_end+0xf8004cb4>
100053a8:	d8812b07 	ldb	r2,1196(sp)
100053ac:	1002fc1e 	bne	r2,zero,10005fa0 <___vfprintf_internal_r+0x1908>
100053b0:	00c00804 	movi	r3,32
100053b4:	d8c12b05 	stb	r3,1196(sp)
100053b8:	e005883a 	mov	r2,fp
100053bc:	e4000007 	ldb	r16,0(fp)
100053c0:	003d1d06 	br	10004838 <__alt_data_end+0xf8004838>
100053c4:	9cc00054 	ori	r19,r19,1
100053c8:	e005883a 	mov	r2,fp
100053cc:	e4000007 	ldb	r16,0(fp)
100053d0:	003d1906 	br	10004838 <__alt_data_end+0xf8004838>
100053d4:	d9012d17 	ldw	r4,1204(sp)
100053d8:	d9412d17 	ldw	r5,1204(sp)
100053dc:	21000017 	ldw	r4,0(r4)
100053e0:	28c00104 	addi	r3,r5,4
100053e4:	d9012e15 	stw	r4,1208(sp)
100053e8:	20038c16 	blt	r4,zero,1000621c <___vfprintf_internal_r+0x1b84>
100053ec:	d8c12d15 	stw	r3,1204(sp)
100053f0:	e005883a 	mov	r2,fp
100053f4:	e4000007 	ldb	r16,0(fp)
100053f8:	003d0f06 	br	10004838 <__alt_data_end+0xf8004838>
100053fc:	00c00ac4 	movi	r3,43
10005400:	d8c12b05 	stb	r3,1196(sp)
10005404:	e005883a 	mov	r2,fp
10005408:	e4000007 	ldb	r16,0(fp)
1000540c:	003d0a06 	br	10004838 <__alt_data_end+0xf8004838>
10005410:	d8c12d17 	ldw	r3,1204(sp)
10005414:	d9012d17 	ldw	r4,1204(sp)
10005418:	da012a17 	ldw	r8,1192(sp)
1000541c:	18c00017 	ldw	r3,0(r3)
10005420:	df012a15 	stw	fp,1192(sp)
10005424:	d8012785 	stb	zero,1182(sp)
10005428:	d8c13115 	stw	r3,1220(sp)
1000542c:	9839883a 	mov	fp,r19
10005430:	24800104 	addi	r18,r4,4
10005434:	1803f726 	beq	r3,zero,10006414 <___vfprintf_internal_r+0x1d7c>
10005438:	d9013117 	ldw	r4,1220(sp)
1000543c:	48038916 	blt	r9,zero,10006264 <___vfprintf_internal_r+0x1bcc>
10005440:	480d883a 	mov	r6,r9
10005444:	000b883a 	mov	r5,zero
10005448:	da013f15 	stw	r8,1276(sp)
1000544c:	da413e15 	stw	r9,1272(sp)
10005450:	0009cac0 	call	10009cac <memchr>
10005454:	da013f17 	ldw	r8,1276(sp)
10005458:	da413e17 	ldw	r9,1272(sp)
1000545c:	10045926 	beq	r2,zero,100065c4 <___vfprintf_internal_r+0x1f2c>
10005460:	d8c13117 	ldw	r3,1220(sp)
10005464:	10e3c83a 	sub	r17,r2,r3
10005468:	4c433516 	blt	r9,r17,10006140 <___vfprintf_internal_r+0x1aa8>
1000546c:	8805883a 	mov	r2,r17
10005470:	88038116 	blt	r17,zero,10006278 <___vfprintf_internal_r+0x1be0>
10005474:	dcc12783 	ldbu	r19,1182(sp)
10005478:	d8812b15 	stw	r2,1196(sp)
1000547c:	dc812d15 	stw	r18,1204(sp)
10005480:	d8013215 	stw	zero,1224(sp)
10005484:	d8013415 	stw	zero,1232(sp)
10005488:	003e0306 	br	10004c98 <__alt_data_end+0xf8004c98>
1000548c:	da012a17 	ldw	r8,1192(sp)
10005490:	df012a15 	stw	fp,1192(sp)
10005494:	9839883a 	mov	fp,r19
10005498:	dcc12b03 	ldbu	r19,1196(sp)
1000549c:	dcc12785 	stb	r19,1182(sp)
100054a0:	803d8f26 	beq	r16,zero,10004ae0 <__alt_data_end+0xf8004ae0>
100054a4:	00c00044 	movi	r3,1
100054a8:	d8c12b15 	stw	r3,1196(sp)
100054ac:	dc010405 	stb	r16,1040(sp)
100054b0:	d8012785 	stb	zero,1182(sp)
100054b4:	003fb506 	br	1000538c <__alt_data_end+0xf800538c>
100054b8:	d8c12017 	ldw	r3,1152(sp)
100054bc:	003e3506 	br	10004d94 <__alt_data_end+0xf8004d94>
100054c0:	10803fcc 	andi	r2,r2,255
100054c4:	00c00044 	movi	r3,1
100054c8:	10fddc1e 	bne	r2,r3,10004c3c <__alt_data_end+0xf8004c3c>
100054cc:	a800021e 	bne	r21,zero,100054d8 <___vfprintf_internal_r+0xe40>
100054d0:	00800244 	movi	r2,9
100054d4:	14801e2e 	bgeu	r2,r18,10005550 <___vfprintf_internal_r+0xeb8>
100054d8:	dc012b15 	stw	r16,1196(sp)
100054dc:	dc410e04 	addi	r17,sp,1080
100054e0:	9021883a 	mov	r16,r18
100054e4:	da012c15 	stw	r8,1200(sp)
100054e8:	a825883a 	mov	r18,r21
100054ec:	482b883a 	mov	r21,r9
100054f0:	8009883a 	mov	r4,r16
100054f4:	900b883a 	mov	r5,r18
100054f8:	01800284 	movi	r6,10
100054fc:	000f883a 	mov	r7,zero
10005500:	000dd8c0 	call	1000dd8c <__umoddi3>
10005504:	10800c04 	addi	r2,r2,48
10005508:	8c7fffc4 	addi	r17,r17,-1
1000550c:	8009883a 	mov	r4,r16
10005510:	900b883a 	mov	r5,r18
10005514:	01800284 	movi	r6,10
10005518:	000f883a 	mov	r7,zero
1000551c:	88800005 	stb	r2,0(r17)
10005520:	000d74c0 	call	1000d74c <__udivdi3>
10005524:	1021883a 	mov	r16,r2
10005528:	10c4b03a 	or	r2,r2,r3
1000552c:	1825883a 	mov	r18,r3
10005530:	103fef1e 	bne	r2,zero,100054f0 <__alt_data_end+0xf80054f0>
10005534:	d9012817 	ldw	r4,1184(sp)
10005538:	dc413115 	stw	r17,1220(sp)
1000553c:	dc012b17 	ldw	r16,1196(sp)
10005540:	da012c17 	ldw	r8,1200(sp)
10005544:	a813883a 	mov	r9,r21
10005548:	2463c83a 	sub	r17,r4,r17
1000554c:	003dcd06 	br	10004c84 <__alt_data_end+0xf8004c84>
10005550:	94800c04 	addi	r18,r18,48
10005554:	d8c10dc4 	addi	r3,sp,1079
10005558:	dc810dc5 	stb	r18,1079(sp)
1000555c:	dc413c17 	ldw	r17,1264(sp)
10005560:	d8c13115 	stw	r3,1220(sp)
10005564:	003dc706 	br	10004c84 <__alt_data_end+0xf8004c84>
10005568:	00801944 	movi	r2,101
1000556c:	1400720e 	bge	r2,r16,10005738 <___vfprintf_internal_r+0x10a0>
10005570:	d9013717 	ldw	r4,1244(sp)
10005574:	d9413917 	ldw	r5,1252(sp)
10005578:	000d883a 	mov	r6,zero
1000557c:	000f883a 	mov	r7,zero
10005580:	d8c13d15 	stw	r3,1268(sp)
10005584:	da013f15 	stw	r8,1276(sp)
10005588:	000ed280 	call	1000ed28 <__eqdf2>
1000558c:	d8c13d17 	ldw	r3,1268(sp)
10005590:	da013f17 	ldw	r8,1276(sp)
10005594:	1000f41e 	bne	r2,zero,10005968 <___vfprintf_internal_r+0x12d0>
10005598:	d8811f17 	ldw	r2,1148(sp)
1000559c:	01040074 	movhi	r4,4097
100055a0:	21137c04 	addi	r4,r4,19952
100055a4:	18c00044 	addi	r3,r3,1
100055a8:	10800044 	addi	r2,r2,1
100055ac:	41000015 	stw	r4,0(r8)
100055b0:	01000044 	movi	r4,1
100055b4:	41000115 	stw	r4,4(r8)
100055b8:	d8c12015 	stw	r3,1152(sp)
100055bc:	d8811f15 	stw	r2,1148(sp)
100055c0:	010001c4 	movi	r4,7
100055c4:	20828d16 	blt	r4,r2,10005ffc <___vfprintf_internal_r+0x1964>
100055c8:	42000204 	addi	r8,r8,8
100055cc:	d8812617 	ldw	r2,1176(sp)
100055d0:	d9413317 	ldw	r5,1228(sp)
100055d4:	11400216 	blt	r2,r5,100055e0 <___vfprintf_internal_r+0xf48>
100055d8:	e080004c 	andi	r2,fp,1
100055dc:	103e4126 	beq	r2,zero,10004ee4 <__alt_data_end+0xf8004ee4>
100055e0:	d8813817 	ldw	r2,1248(sp)
100055e4:	d9013517 	ldw	r4,1236(sp)
100055e8:	d9413817 	ldw	r5,1248(sp)
100055ec:	1887883a 	add	r3,r3,r2
100055f0:	d8811f17 	ldw	r2,1148(sp)
100055f4:	41000015 	stw	r4,0(r8)
100055f8:	41400115 	stw	r5,4(r8)
100055fc:	10800044 	addi	r2,r2,1
10005600:	d8c12015 	stw	r3,1152(sp)
10005604:	d8811f15 	stw	r2,1148(sp)
10005608:	010001c4 	movi	r4,7
1000560c:	20830916 	blt	r4,r2,10006234 <___vfprintf_internal_r+0x1b9c>
10005610:	42000204 	addi	r8,r8,8
10005614:	d8813317 	ldw	r2,1228(sp)
10005618:	143fffc4 	addi	r16,r2,-1
1000561c:	043e310e 	bge	zero,r16,10004ee4 <__alt_data_end+0xf8004ee4>
10005620:	04400404 	movi	r17,16
10005624:	d8811f17 	ldw	r2,1148(sp)
10005628:	8c007e0e 	bge	r17,r16,10005824 <___vfprintf_internal_r+0x118c>
1000562c:	01440074 	movhi	r5,4097
10005630:	29537c84 	addi	r5,r5,19954
10005634:	d9412c15 	stw	r5,1200(sp)
10005638:	04c001c4 	movi	r19,7
1000563c:	00000306 	br	1000564c <___vfprintf_internal_r+0xfb4>
10005640:	42000204 	addi	r8,r8,8
10005644:	843ffc04 	addi	r16,r16,-16
10005648:	8c00790e 	bge	r17,r16,10005830 <___vfprintf_internal_r+0x1198>
1000564c:	18c00404 	addi	r3,r3,16
10005650:	10800044 	addi	r2,r2,1
10005654:	45000015 	stw	r20,0(r8)
10005658:	44400115 	stw	r17,4(r8)
1000565c:	d8c12015 	stw	r3,1152(sp)
10005660:	d8811f15 	stw	r2,1148(sp)
10005664:	98bff60e 	bge	r19,r2,10005640 <__alt_data_end+0xf8005640>
10005668:	b809883a 	mov	r4,r23
1000566c:	b00b883a 	mov	r5,r22
10005670:	d9811e04 	addi	r6,sp,1144
10005674:	000b9a00 	call	1000b9a0 <__sprint_r>
10005678:	103d1f1e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
1000567c:	d8c12017 	ldw	r3,1152(sp)
10005680:	d8811f17 	ldw	r2,1148(sp)
10005684:	da000404 	addi	r8,sp,16
10005688:	003fee06 	br	10005644 <__alt_data_end+0xf8005644>
1000568c:	d9412e17 	ldw	r5,1208(sp)
10005690:	d8812b17 	ldw	r2,1196(sp)
10005694:	28a7c83a 	sub	r19,r5,r2
10005698:	04fddc0e 	bge	zero,r19,10004e0c <__alt_data_end+0xf8004e0c>
1000569c:	05400404 	movi	r21,16
100056a0:	d8811f17 	ldw	r2,1148(sp)
100056a4:	acc3870e 	bge	r21,r19,100064c4 <___vfprintf_internal_r+0x1e2c>
100056a8:	01440074 	movhi	r5,4097
100056ac:	29537c84 	addi	r5,r5,19954
100056b0:	d9412c15 	stw	r5,1200(sp)
100056b4:	048001c4 	movi	r18,7
100056b8:	00000306 	br	100056c8 <___vfprintf_internal_r+0x1030>
100056bc:	9cfffc04 	addi	r19,r19,-16
100056c0:	42000204 	addi	r8,r8,8
100056c4:	acc0110e 	bge	r21,r19,1000570c <___vfprintf_internal_r+0x1074>
100056c8:	18c00404 	addi	r3,r3,16
100056cc:	10800044 	addi	r2,r2,1
100056d0:	45000015 	stw	r20,0(r8)
100056d4:	45400115 	stw	r21,4(r8)
100056d8:	d8c12015 	stw	r3,1152(sp)
100056dc:	d8811f15 	stw	r2,1148(sp)
100056e0:	90bff60e 	bge	r18,r2,100056bc <__alt_data_end+0xf80056bc>
100056e4:	b809883a 	mov	r4,r23
100056e8:	b00b883a 	mov	r5,r22
100056ec:	d9811e04 	addi	r6,sp,1144
100056f0:	000b9a00 	call	1000b9a0 <__sprint_r>
100056f4:	103d001e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
100056f8:	9cfffc04 	addi	r19,r19,-16
100056fc:	d8c12017 	ldw	r3,1152(sp)
10005700:	d8811f17 	ldw	r2,1148(sp)
10005704:	da000404 	addi	r8,sp,16
10005708:	acffef16 	blt	r21,r19,100056c8 <__alt_data_end+0xf80056c8>
1000570c:	d9012c17 	ldw	r4,1200(sp)
10005710:	1cc7883a 	add	r3,r3,r19
10005714:	10800044 	addi	r2,r2,1
10005718:	41000015 	stw	r4,0(r8)
1000571c:	44c00115 	stw	r19,4(r8)
10005720:	d8c12015 	stw	r3,1152(sp)
10005724:	d8811f15 	stw	r2,1148(sp)
10005728:	010001c4 	movi	r4,7
1000572c:	20817816 	blt	r4,r2,10005d10 <___vfprintf_internal_r+0x1678>
10005730:	42000204 	addi	r8,r8,8
10005734:	003db506 	br	10004e0c <__alt_data_end+0xf8004e0c>
10005738:	d9413317 	ldw	r5,1228(sp)
1000573c:	00800044 	movi	r2,1
10005740:	18c00044 	addi	r3,r3,1
10005744:	11413e0e 	bge	r2,r5,10005c40 <___vfprintf_internal_r+0x15a8>
10005748:	dc011f17 	ldw	r16,1148(sp)
1000574c:	d8813117 	ldw	r2,1220(sp)
10005750:	d8c12015 	stw	r3,1152(sp)
10005754:	84000044 	addi	r16,r16,1
10005758:	40800015 	stw	r2,0(r8)
1000575c:	00800044 	movi	r2,1
10005760:	40800115 	stw	r2,4(r8)
10005764:	dc011f15 	stw	r16,1148(sp)
10005768:	008001c4 	movi	r2,7
1000576c:	14015616 	blt	r2,r16,10005cc8 <___vfprintf_internal_r+0x1630>
10005770:	42000204 	addi	r8,r8,8
10005774:	d9013817 	ldw	r4,1248(sp)
10005778:	d9413517 	ldw	r5,1236(sp)
1000577c:	84000044 	addi	r16,r16,1
10005780:	1907883a 	add	r3,r3,r4
10005784:	41400015 	stw	r5,0(r8)
10005788:	41000115 	stw	r4,4(r8)
1000578c:	d8c12015 	stw	r3,1152(sp)
10005790:	dc011f15 	stw	r16,1148(sp)
10005794:	008001c4 	movi	r2,7
10005798:	14015416 	blt	r2,r16,10005cec <___vfprintf_internal_r+0x1654>
1000579c:	44400204 	addi	r17,r8,8
100057a0:	d9013717 	ldw	r4,1244(sp)
100057a4:	d9413917 	ldw	r5,1252(sp)
100057a8:	000d883a 	mov	r6,zero
100057ac:	000f883a 	mov	r7,zero
100057b0:	d8c13d15 	stw	r3,1268(sp)
100057b4:	000ed280 	call	1000ed28 <__eqdf2>
100057b8:	d8c13d17 	ldw	r3,1268(sp)
100057bc:	1000a726 	beq	r2,zero,10005a5c <___vfprintf_internal_r+0x13c4>
100057c0:	d9013317 	ldw	r4,1228(sp)
100057c4:	d9413117 	ldw	r5,1220(sp)
100057c8:	84000044 	addi	r16,r16,1
100057cc:	20bfffc4 	addi	r2,r4,-1
100057d0:	1887883a 	add	r3,r3,r2
100057d4:	29000044 	addi	r4,r5,1
100057d8:	88800115 	stw	r2,4(r17)
100057dc:	89000015 	stw	r4,0(r17)
100057e0:	d8c12015 	stw	r3,1152(sp)
100057e4:	dc011f15 	stw	r16,1148(sp)
100057e8:	008001c4 	movi	r2,7
100057ec:	14012d16 	blt	r2,r16,10005ca4 <___vfprintf_internal_r+0x160c>
100057f0:	8c400204 	addi	r17,r17,8
100057f4:	d9413a17 	ldw	r5,1256(sp)
100057f8:	dcc122c4 	addi	r19,sp,1163
100057fc:	84000044 	addi	r16,r16,1
10005800:	28c7883a 	add	r3,r5,r3
10005804:	8cc00015 	stw	r19,0(r17)
10005808:	89400115 	stw	r5,4(r17)
1000580c:	d8c12015 	stw	r3,1152(sp)
10005810:	dc011f15 	stw	r16,1148(sp)
10005814:	008001c4 	movi	r2,7
10005818:	14000e16 	blt	r2,r16,10005854 <___vfprintf_internal_r+0x11bc>
1000581c:	8a000204 	addi	r8,r17,8
10005820:	003db006 	br	10004ee4 <__alt_data_end+0xf8004ee4>
10005824:	01040074 	movhi	r4,4097
10005828:	21137c84 	addi	r4,r4,19954
1000582c:	d9012c15 	stw	r4,1200(sp)
10005830:	d9012c17 	ldw	r4,1200(sp)
10005834:	1c07883a 	add	r3,r3,r16
10005838:	44000115 	stw	r16,4(r8)
1000583c:	41000015 	stw	r4,0(r8)
10005840:	10800044 	addi	r2,r2,1
10005844:	d8c12015 	stw	r3,1152(sp)
10005848:	d8811f15 	stw	r2,1148(sp)
1000584c:	010001c4 	movi	r4,7
10005850:	20bda30e 	bge	r4,r2,10004ee0 <__alt_data_end+0xf8004ee0>
10005854:	b809883a 	mov	r4,r23
10005858:	b00b883a 	mov	r5,r22
1000585c:	d9811e04 	addi	r6,sp,1144
10005860:	000b9a00 	call	1000b9a0 <__sprint_r>
10005864:	103ca41e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
10005868:	d8c12017 	ldw	r3,1152(sp)
1000586c:	da000404 	addi	r8,sp,16
10005870:	003d9c06 	br	10004ee4 <__alt_data_end+0xf8004ee4>
10005874:	b809883a 	mov	r4,r23
10005878:	b00b883a 	mov	r5,r22
1000587c:	d9811e04 	addi	r6,sp,1144
10005880:	000b9a00 	call	1000b9a0 <__sprint_r>
10005884:	103dd226 	beq	r2,zero,10004fd0 <__alt_data_end+0xf8004fd0>
10005888:	003c9b06 	br	10004af8 <__alt_data_end+0xf8004af8>
1000588c:	10803fcc 	andi	r2,r2,255
10005890:	1000311e 	bne	r2,zero,10005958 <___vfprintf_internal_r+0x12c0>
10005894:	e080004c 	andi	r2,fp,1
10005898:	10002f26 	beq	r2,zero,10005958 <___vfprintf_internal_r+0x12c0>
1000589c:	00800c04 	movi	r2,48
100058a0:	d8c10dc4 	addi	r3,sp,1079
100058a4:	d8810dc5 	stb	r2,1079(sp)
100058a8:	dc413c17 	ldw	r17,1264(sp)
100058ac:	d8c13115 	stw	r3,1220(sp)
100058b0:	003cf406 	br	10004c84 <__alt_data_end+0xf8004c84>
100058b4:	b809883a 	mov	r4,r23
100058b8:	b00b883a 	mov	r5,r22
100058bc:	d9811e04 	addi	r6,sp,1144
100058c0:	000b9a00 	call	1000b9a0 <__sprint_r>
100058c4:	103c8c1e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
100058c8:	d8c12017 	ldw	r3,1152(sp)
100058cc:	da000404 	addi	r8,sp,16
100058d0:	003d7706 	br	10004eb0 <__alt_data_end+0xf8004eb0>
100058d4:	b809883a 	mov	r4,r23
100058d8:	b00b883a 	mov	r5,r22
100058dc:	d9811e04 	addi	r6,sp,1144
100058e0:	000b9a00 	call	1000b9a0 <__sprint_r>
100058e4:	103c841e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
100058e8:	d8c12017 	ldw	r3,1152(sp)
100058ec:	da000404 	addi	r8,sp,16
100058f0:	003d3506 	br	10004dc8 <__alt_data_end+0xf8004dc8>
100058f4:	b809883a 	mov	r4,r23
100058f8:	b00b883a 	mov	r5,r22
100058fc:	d9811e04 	addi	r6,sp,1144
10005900:	000b9a00 	call	1000b9a0 <__sprint_r>
10005904:	103c7c1e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
10005908:	d8c12017 	ldw	r3,1152(sp)
1000590c:	da000404 	addi	r8,sp,16
10005910:	003d3b06 	br	10004e00 <__alt_data_end+0xf8004e00>
10005914:	d9413b17 	ldw	r5,1260(sp)
10005918:	d8c10e04 	addi	r3,sp,1080
1000591c:	908003cc 	andi	r2,r18,15
10005920:	a808973a 	slli	r4,r21,28
10005924:	2885883a 	add	r2,r5,r2
10005928:	9024d13a 	srli	r18,r18,4
1000592c:	10800003 	ldbu	r2,0(r2)
10005930:	a82ad13a 	srli	r21,r21,4
10005934:	18ffffc4 	addi	r3,r3,-1
10005938:	24a4b03a 	or	r18,r4,r18
1000593c:	18800005 	stb	r2,0(r3)
10005940:	9544b03a 	or	r2,r18,r21
10005944:	103ff51e 	bne	r2,zero,1000591c <__alt_data_end+0xf800591c>
10005948:	d9412817 	ldw	r5,1184(sp)
1000594c:	d8c13115 	stw	r3,1220(sp)
10005950:	28e3c83a 	sub	r17,r5,r3
10005954:	003ccb06 	br	10004c84 <__alt_data_end+0xf8004c84>
10005958:	d8c10e04 	addi	r3,sp,1080
1000595c:	0023883a 	mov	r17,zero
10005960:	d8c13115 	stw	r3,1220(sp)
10005964:	003cc706 	br	10004c84 <__alt_data_end+0xf8004c84>
10005968:	dc012617 	ldw	r16,1176(sp)
1000596c:	0401ab0e 	bge	zero,r16,1000601c <___vfprintf_internal_r+0x1984>
10005970:	d8813317 	ldw	r2,1228(sp)
10005974:	d9413117 	ldw	r5,1220(sp)
10005978:	d9013417 	ldw	r4,1232(sp)
1000597c:	1023883a 	mov	r17,r2
10005980:	28a1883a 	add	r16,r5,r2
10005984:	2080010e 	bge	r4,r2,1000598c <___vfprintf_internal_r+0x12f4>
10005988:	2023883a 	mov	r17,r4
1000598c:	04400b0e 	bge	zero,r17,100059bc <___vfprintf_internal_r+0x1324>
10005990:	d8811f17 	ldw	r2,1148(sp)
10005994:	d9413117 	ldw	r5,1220(sp)
10005998:	1c47883a 	add	r3,r3,r17
1000599c:	10800044 	addi	r2,r2,1
100059a0:	41400015 	stw	r5,0(r8)
100059a4:	44400115 	stw	r17,4(r8)
100059a8:	d8c12015 	stw	r3,1152(sp)
100059ac:	d8811f15 	stw	r2,1148(sp)
100059b0:	010001c4 	movi	r4,7
100059b4:	20826716 	blt	r4,r2,10006354 <___vfprintf_internal_r+0x1cbc>
100059b8:	42000204 	addi	r8,r8,8
100059bc:	88026316 	blt	r17,zero,1000634c <___vfprintf_internal_r+0x1cb4>
100059c0:	d8813417 	ldw	r2,1232(sp)
100059c4:	1463c83a 	sub	r17,r2,r17
100059c8:	0440590e 	bge	zero,r17,10005b30 <___vfprintf_internal_r+0x1498>
100059cc:	04c00404 	movi	r19,16
100059d0:	d8811f17 	ldw	r2,1148(sp)
100059d4:	9c41770e 	bge	r19,r17,10005fb4 <___vfprintf_internal_r+0x191c>
100059d8:	01440074 	movhi	r5,4097
100059dc:	29537c84 	addi	r5,r5,19954
100059e0:	d9412c15 	stw	r5,1200(sp)
100059e4:	054001c4 	movi	r21,7
100059e8:	00000306 	br	100059f8 <___vfprintf_internal_r+0x1360>
100059ec:	42000204 	addi	r8,r8,8
100059f0:	8c7ffc04 	addi	r17,r17,-16
100059f4:	9c41720e 	bge	r19,r17,10005fc0 <___vfprintf_internal_r+0x1928>
100059f8:	18c00404 	addi	r3,r3,16
100059fc:	10800044 	addi	r2,r2,1
10005a00:	45000015 	stw	r20,0(r8)
10005a04:	44c00115 	stw	r19,4(r8)
10005a08:	d8c12015 	stw	r3,1152(sp)
10005a0c:	d8811f15 	stw	r2,1148(sp)
10005a10:	a8bff60e 	bge	r21,r2,100059ec <__alt_data_end+0xf80059ec>
10005a14:	b809883a 	mov	r4,r23
10005a18:	b00b883a 	mov	r5,r22
10005a1c:	d9811e04 	addi	r6,sp,1144
10005a20:	000b9a00 	call	1000b9a0 <__sprint_r>
10005a24:	103c341e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
10005a28:	d8c12017 	ldw	r3,1152(sp)
10005a2c:	d8811f17 	ldw	r2,1148(sp)
10005a30:	da000404 	addi	r8,sp,16
10005a34:	003fee06 	br	100059f0 <__alt_data_end+0xf80059f0>
10005a38:	b809883a 	mov	r4,r23
10005a3c:	b00b883a 	mov	r5,r22
10005a40:	d9811e04 	addi	r6,sp,1144
10005a44:	000b9a00 	call	1000b9a0 <__sprint_r>
10005a48:	103c2b1e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
10005a4c:	d8c12017 	ldw	r3,1152(sp)
10005a50:	d8812787 	ldb	r2,1182(sp)
10005a54:	da000404 	addi	r8,sp,16
10005a58:	003cce06 	br	10004d94 <__alt_data_end+0xf8004d94>
10005a5c:	d8813317 	ldw	r2,1228(sp)
10005a60:	14ffffc4 	addi	r19,r2,-1
10005a64:	04ff630e 	bge	zero,r19,100057f4 <__alt_data_end+0xf80057f4>
10005a68:	05400404 	movi	r21,16
10005a6c:	acc0810e 	bge	r21,r19,10005c74 <___vfprintf_internal_r+0x15dc>
10005a70:	01440074 	movhi	r5,4097
10005a74:	29537c84 	addi	r5,r5,19954
10005a78:	d9412c15 	stw	r5,1200(sp)
10005a7c:	01c001c4 	movi	r7,7
10005a80:	00000306 	br	10005a90 <___vfprintf_internal_r+0x13f8>
10005a84:	8c400204 	addi	r17,r17,8
10005a88:	9cfffc04 	addi	r19,r19,-16
10005a8c:	acc07c0e 	bge	r21,r19,10005c80 <___vfprintf_internal_r+0x15e8>
10005a90:	18c00404 	addi	r3,r3,16
10005a94:	84000044 	addi	r16,r16,1
10005a98:	8d000015 	stw	r20,0(r17)
10005a9c:	8d400115 	stw	r21,4(r17)
10005aa0:	d8c12015 	stw	r3,1152(sp)
10005aa4:	dc011f15 	stw	r16,1148(sp)
10005aa8:	3c3ff60e 	bge	r7,r16,10005a84 <__alt_data_end+0xf8005a84>
10005aac:	b809883a 	mov	r4,r23
10005ab0:	b00b883a 	mov	r5,r22
10005ab4:	d9811e04 	addi	r6,sp,1144
10005ab8:	d9c13d15 	stw	r7,1268(sp)
10005abc:	000b9a00 	call	1000b9a0 <__sprint_r>
10005ac0:	d9c13d17 	ldw	r7,1268(sp)
10005ac4:	103c0c1e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
10005ac8:	d8c12017 	ldw	r3,1152(sp)
10005acc:	dc011f17 	ldw	r16,1148(sp)
10005ad0:	dc400404 	addi	r17,sp,16
10005ad4:	003fec06 	br	10005a88 <__alt_data_end+0xf8005a88>
10005ad8:	00800084 	movi	r2,2
10005adc:	9546b03a 	or	r3,r18,r21
10005ae0:	003d7d06 	br	100050d8 <__alt_data_end+0xf80050d8>
10005ae4:	10803fcc 	andi	r2,r2,255
10005ae8:	1080201c 	xori	r2,r2,128
10005aec:	10bfe004 	addi	r2,r2,-128
10005af0:	01000c04 	movi	r4,48
10005af4:	1101d726 	beq	r2,r4,10006254 <___vfprintf_internal_r+0x1bbc>
10005af8:	d9413117 	ldw	r5,1220(sp)
10005afc:	d8812817 	ldw	r2,1184(sp)
10005b00:	193fffc5 	stb	r4,-1(r3)
10005b04:	297fffc4 	addi	r5,r5,-1
10005b08:	d9413115 	stw	r5,1220(sp)
10005b0c:	1163c83a 	sub	r17,r2,r5
10005b10:	003c5c06 	br	10004c84 <__alt_data_end+0xf8004c84>
10005b14:	b809883a 	mov	r4,r23
10005b18:	b00b883a 	mov	r5,r22
10005b1c:	d9811e04 	addi	r6,sp,1144
10005b20:	000b9a00 	call	1000b9a0 <__sprint_r>
10005b24:	103bf41e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
10005b28:	d8c12017 	ldw	r3,1152(sp)
10005b2c:	da000404 	addi	r8,sp,16
10005b30:	d9413117 	ldw	r5,1220(sp)
10005b34:	d9013417 	ldw	r4,1232(sp)
10005b38:	d8812617 	ldw	r2,1176(sp)
10005b3c:	2923883a 	add	r17,r5,r4
10005b40:	d9413317 	ldw	r5,1228(sp)
10005b44:	11400216 	blt	r2,r5,10005b50 <___vfprintf_internal_r+0x14b8>
10005b48:	e100004c 	andi	r4,fp,1
10005b4c:	20000d26 	beq	r4,zero,10005b84 <___vfprintf_internal_r+0x14ec>
10005b50:	d9013817 	ldw	r4,1248(sp)
10005b54:	d9413517 	ldw	r5,1236(sp)
10005b58:	1907883a 	add	r3,r3,r4
10005b5c:	d9011f17 	ldw	r4,1148(sp)
10005b60:	41400015 	stw	r5,0(r8)
10005b64:	d9413817 	ldw	r5,1248(sp)
10005b68:	21000044 	addi	r4,r4,1
10005b6c:	d8c12015 	stw	r3,1152(sp)
10005b70:	41400115 	stw	r5,4(r8)
10005b74:	d9011f15 	stw	r4,1148(sp)
10005b78:	014001c4 	movi	r5,7
10005b7c:	2901fd16 	blt	r5,r4,10006374 <___vfprintf_internal_r+0x1cdc>
10005b80:	42000204 	addi	r8,r8,8
10005b84:	d9013317 	ldw	r4,1228(sp)
10005b88:	2085c83a 	sub	r2,r4,r2
10005b8c:	8449c83a 	sub	r4,r16,r17
10005b90:	1021883a 	mov	r16,r2
10005b94:	2080010e 	bge	r4,r2,10005b9c <___vfprintf_internal_r+0x1504>
10005b98:	2021883a 	mov	r16,r4
10005b9c:	04000a0e 	bge	zero,r16,10005bc8 <___vfprintf_internal_r+0x1530>
10005ba0:	d9011f17 	ldw	r4,1148(sp)
10005ba4:	1c07883a 	add	r3,r3,r16
10005ba8:	44400015 	stw	r17,0(r8)
10005bac:	21000044 	addi	r4,r4,1
10005bb0:	44000115 	stw	r16,4(r8)
10005bb4:	d8c12015 	stw	r3,1152(sp)
10005bb8:	d9011f15 	stw	r4,1148(sp)
10005bbc:	014001c4 	movi	r5,7
10005bc0:	29020916 	blt	r5,r4,100063e8 <___vfprintf_internal_r+0x1d50>
10005bc4:	42000204 	addi	r8,r8,8
10005bc8:	80020116 	blt	r16,zero,100063d0 <___vfprintf_internal_r+0x1d38>
10005bcc:	1421c83a 	sub	r16,r2,r16
10005bd0:	043cc40e 	bge	zero,r16,10004ee4 <__alt_data_end+0xf8004ee4>
10005bd4:	04400404 	movi	r17,16
10005bd8:	d8811f17 	ldw	r2,1148(sp)
10005bdc:	8c3f110e 	bge	r17,r16,10005824 <__alt_data_end+0xf8005824>
10005be0:	01440074 	movhi	r5,4097
10005be4:	29537c84 	addi	r5,r5,19954
10005be8:	d9412c15 	stw	r5,1200(sp)
10005bec:	04c001c4 	movi	r19,7
10005bf0:	00000306 	br	10005c00 <___vfprintf_internal_r+0x1568>
10005bf4:	42000204 	addi	r8,r8,8
10005bf8:	843ffc04 	addi	r16,r16,-16
10005bfc:	8c3f0c0e 	bge	r17,r16,10005830 <__alt_data_end+0xf8005830>
10005c00:	18c00404 	addi	r3,r3,16
10005c04:	10800044 	addi	r2,r2,1
10005c08:	45000015 	stw	r20,0(r8)
10005c0c:	44400115 	stw	r17,4(r8)
10005c10:	d8c12015 	stw	r3,1152(sp)
10005c14:	d8811f15 	stw	r2,1148(sp)
10005c18:	98bff60e 	bge	r19,r2,10005bf4 <__alt_data_end+0xf8005bf4>
10005c1c:	b809883a 	mov	r4,r23
10005c20:	b00b883a 	mov	r5,r22
10005c24:	d9811e04 	addi	r6,sp,1144
10005c28:	000b9a00 	call	1000b9a0 <__sprint_r>
10005c2c:	103bb21e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
10005c30:	d8c12017 	ldw	r3,1152(sp)
10005c34:	d8811f17 	ldw	r2,1148(sp)
10005c38:	da000404 	addi	r8,sp,16
10005c3c:	003fee06 	br	10005bf8 <__alt_data_end+0xf8005bf8>
10005c40:	e088703a 	and	r4,fp,r2
10005c44:	203ec01e 	bne	r4,zero,10005748 <__alt_data_end+0xf8005748>
10005c48:	dc011f17 	ldw	r16,1148(sp)
10005c4c:	d9013117 	ldw	r4,1220(sp)
10005c50:	40800115 	stw	r2,4(r8)
10005c54:	84000044 	addi	r16,r16,1
10005c58:	41000015 	stw	r4,0(r8)
10005c5c:	d8c12015 	stw	r3,1152(sp)
10005c60:	dc011f15 	stw	r16,1148(sp)
10005c64:	008001c4 	movi	r2,7
10005c68:	14000e16 	blt	r2,r16,10005ca4 <___vfprintf_internal_r+0x160c>
10005c6c:	44400204 	addi	r17,r8,8
10005c70:	003ee006 	br	100057f4 <__alt_data_end+0xf80057f4>
10005c74:	01040074 	movhi	r4,4097
10005c78:	21137c84 	addi	r4,r4,19954
10005c7c:	d9012c15 	stw	r4,1200(sp)
10005c80:	d8812c17 	ldw	r2,1200(sp)
10005c84:	1cc7883a 	add	r3,r3,r19
10005c88:	84000044 	addi	r16,r16,1
10005c8c:	88800015 	stw	r2,0(r17)
10005c90:	8cc00115 	stw	r19,4(r17)
10005c94:	d8c12015 	stw	r3,1152(sp)
10005c98:	dc011f15 	stw	r16,1148(sp)
10005c9c:	008001c4 	movi	r2,7
10005ca0:	143ed30e 	bge	r2,r16,100057f0 <__alt_data_end+0xf80057f0>
10005ca4:	b809883a 	mov	r4,r23
10005ca8:	b00b883a 	mov	r5,r22
10005cac:	d9811e04 	addi	r6,sp,1144
10005cb0:	000b9a00 	call	1000b9a0 <__sprint_r>
10005cb4:	103b901e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
10005cb8:	d8c12017 	ldw	r3,1152(sp)
10005cbc:	dc011f17 	ldw	r16,1148(sp)
10005cc0:	dc400404 	addi	r17,sp,16
10005cc4:	003ecb06 	br	100057f4 <__alt_data_end+0xf80057f4>
10005cc8:	b809883a 	mov	r4,r23
10005ccc:	b00b883a 	mov	r5,r22
10005cd0:	d9811e04 	addi	r6,sp,1144
10005cd4:	000b9a00 	call	1000b9a0 <__sprint_r>
10005cd8:	103b871e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
10005cdc:	d8c12017 	ldw	r3,1152(sp)
10005ce0:	dc011f17 	ldw	r16,1148(sp)
10005ce4:	da000404 	addi	r8,sp,16
10005ce8:	003ea206 	br	10005774 <__alt_data_end+0xf8005774>
10005cec:	b809883a 	mov	r4,r23
10005cf0:	b00b883a 	mov	r5,r22
10005cf4:	d9811e04 	addi	r6,sp,1144
10005cf8:	000b9a00 	call	1000b9a0 <__sprint_r>
10005cfc:	103b7e1e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
10005d00:	d8c12017 	ldw	r3,1152(sp)
10005d04:	dc011f17 	ldw	r16,1148(sp)
10005d08:	dc400404 	addi	r17,sp,16
10005d0c:	003ea406 	br	100057a0 <__alt_data_end+0xf80057a0>
10005d10:	b809883a 	mov	r4,r23
10005d14:	b00b883a 	mov	r5,r22
10005d18:	d9811e04 	addi	r6,sp,1144
10005d1c:	000b9a00 	call	1000b9a0 <__sprint_r>
10005d20:	103b751e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
10005d24:	d8c12017 	ldw	r3,1152(sp)
10005d28:	da000404 	addi	r8,sp,16
10005d2c:	003c3706 	br	10004e0c <__alt_data_end+0xf8004e0c>
10005d30:	04a5c83a 	sub	r18,zero,r18
10005d34:	9004c03a 	cmpne	r2,r18,zero
10005d38:	056bc83a 	sub	r21,zero,r21
10005d3c:	a8abc83a 	sub	r21,r21,r2
10005d40:	04c00b44 	movi	r19,45
10005d44:	dcc12785 	stb	r19,1182(sp)
10005d48:	da413215 	stw	r9,1224(sp)
10005d4c:	00800044 	movi	r2,1
10005d50:	9546b03a 	or	r3,r18,r21
10005d54:	003bb106 	br	10004c1c <__alt_data_end+0xf8004c1c>
10005d58:	da013f15 	stw	r8,1276(sp)
10005d5c:	da413e15 	stw	r9,1272(sp)
10005d60:	000b5fc0 	call	1000b5fc <__fpclassifyd>
10005d64:	da013f17 	ldw	r8,1276(sp)
10005d68:	da413e17 	ldw	r9,1272(sp)
10005d6c:	1000e526 	beq	r2,zero,10006104 <___vfprintf_internal_r+0x1a6c>
10005d70:	04fff7c4 	movi	r19,-33
10005d74:	00bfffc4 	movi	r2,-1
10005d78:	84e6703a 	and	r19,r16,r19
10005d7c:	48822926 	beq	r9,r2,10006624 <___vfprintf_internal_r+0x1f8c>
10005d80:	008011c4 	movi	r2,71
10005d84:	98821626 	beq	r19,r2,100065e0 <___vfprintf_internal_r+0x1f48>
10005d88:	d9013917 	ldw	r4,1252(sp)
10005d8c:	e0c04014 	ori	r3,fp,256
10005d90:	d8c12d15 	stw	r3,1204(sp)
10005d94:	20021f16 	blt	r4,zero,10006614 <___vfprintf_internal_r+0x1f7c>
10005d98:	dc413917 	ldw	r17,1252(sp)
10005d9c:	d8012b05 	stb	zero,1196(sp)
10005da0:	00801984 	movi	r2,102
10005da4:	80814d26 	beq	r16,r2,100062dc <___vfprintf_internal_r+0x1c44>
10005da8:	00801184 	movi	r2,70
10005dac:	80814b26 	beq	r16,r2,100062dc <___vfprintf_internal_r+0x1c44>
10005db0:	00801144 	movi	r2,69
10005db4:	98821d26 	beq	r19,r2,1000662c <___vfprintf_internal_r+0x1f94>
10005db8:	482b883a 	mov	r21,r9
10005dbc:	d8812604 	addi	r2,sp,1176
10005dc0:	d8800115 	stw	r2,4(sp)
10005dc4:	d9413717 	ldw	r5,1244(sp)
10005dc8:	d8812504 	addi	r2,sp,1172
10005dcc:	d8800215 	stw	r2,8(sp)
10005dd0:	d8812104 	addi	r2,sp,1156
10005dd4:	dd400015 	stw	r21,0(sp)
10005dd8:	d8800315 	stw	r2,12(sp)
10005ddc:	b809883a 	mov	r4,r23
10005de0:	880d883a 	mov	r6,r17
10005de4:	01c00084 	movi	r7,2
10005de8:	da013f15 	stw	r8,1276(sp)
10005dec:	da413e15 	stw	r9,1272(sp)
10005df0:	0006b100 	call	10006b10 <_dtoa_r>
10005df4:	d8813115 	stw	r2,1220(sp)
10005df8:	008019c4 	movi	r2,103
10005dfc:	da013f17 	ldw	r8,1276(sp)
10005e00:	da413e17 	ldw	r9,1272(sp)
10005e04:	80800226 	beq	r16,r2,10005e10 <___vfprintf_internal_r+0x1778>
10005e08:	008011c4 	movi	r2,71
10005e0c:	8081451e 	bne	r16,r2,10006324 <___vfprintf_internal_r+0x1c8c>
10005e10:	e080004c 	andi	r2,fp,1
10005e14:	10021e26 	beq	r2,zero,10006690 <___vfprintf_internal_r+0x1ff8>
10005e18:	d8c13117 	ldw	r3,1220(sp)
10005e1c:	1d55883a 	add	r10,r3,r21
10005e20:	d9013717 	ldw	r4,1244(sp)
10005e24:	880b883a 	mov	r5,r17
10005e28:	000d883a 	mov	r6,zero
10005e2c:	000f883a 	mov	r7,zero
10005e30:	da013f15 	stw	r8,1276(sp)
10005e34:	da413e15 	stw	r9,1272(sp)
10005e38:	da813d15 	stw	r10,1268(sp)
10005e3c:	000ed280 	call	1000ed28 <__eqdf2>
10005e40:	da013f17 	ldw	r8,1276(sp)
10005e44:	da413e17 	ldw	r9,1272(sp)
10005e48:	da813d17 	ldw	r10,1268(sp)
10005e4c:	1001a126 	beq	r2,zero,100064d4 <___vfprintf_internal_r+0x1e3c>
10005e50:	d8812117 	ldw	r2,1156(sp)
10005e54:	1280062e 	bgeu	r2,r10,10005e70 <___vfprintf_internal_r+0x17d8>
10005e58:	01000c04 	movi	r4,48
10005e5c:	10c00044 	addi	r3,r2,1
10005e60:	d8c12115 	stw	r3,1156(sp)
10005e64:	11000005 	stb	r4,0(r2)
10005e68:	d8812117 	ldw	r2,1156(sp)
10005e6c:	12bffb36 	bltu	r2,r10,10005e5c <__alt_data_end+0xf8005e5c>
10005e70:	d8c13117 	ldw	r3,1220(sp)
10005e74:	10c5c83a 	sub	r2,r2,r3
10005e78:	d8813315 	stw	r2,1228(sp)
10005e7c:	008011c4 	movi	r2,71
10005e80:	98818926 	beq	r19,r2,100064a8 <___vfprintf_internal_r+0x1e10>
10005e84:	00801944 	movi	r2,101
10005e88:	14023c0e 	bge	r2,r16,1000677c <___vfprintf_internal_r+0x20e4>
10005e8c:	d8c12617 	ldw	r3,1176(sp)
10005e90:	00801984 	movi	r2,102
10005e94:	d8c13415 	stw	r3,1232(sp)
10005e98:	8081ef26 	beq	r16,r2,10006658 <___vfprintf_internal_r+0x1fc0>
10005e9c:	d8c13417 	ldw	r3,1232(sp)
10005ea0:	d9013317 	ldw	r4,1228(sp)
10005ea4:	1901e316 	blt	r3,r4,10006634 <___vfprintf_internal_r+0x1f9c>
10005ea8:	e080004c 	andi	r2,fp,1
10005eac:	1001f426 	beq	r2,zero,10006680 <___vfprintf_internal_r+0x1fe8>
10005eb0:	d8c13417 	ldw	r3,1232(sp)
10005eb4:	1c400044 	addi	r17,r3,1
10005eb8:	8839883a 	mov	fp,r17
10005ebc:	8801e416 	blt	r17,zero,10006650 <___vfprintf_internal_r+0x1fb8>
10005ec0:	dd412b07 	ldb	r21,1196(sp)
10005ec4:	a801701e 	bne	r21,zero,10006488 <___vfprintf_internal_r+0x1df0>
10005ec8:	df012b15 	stw	fp,1196(sp)
10005ecc:	dcc12783 	ldbu	r19,1182(sp)
10005ed0:	df012d17 	ldw	fp,1204(sp)
10005ed4:	d8013215 	stw	zero,1224(sp)
10005ed8:	dc812d15 	stw	r18,1204(sp)
10005edc:	003b6e06 	br	10004c98 <__alt_data_end+0xf8004c98>
10005ee0:	e080040c 	andi	r2,fp,16
10005ee4:	1000b51e 	bne	r2,zero,100061bc <___vfprintf_internal_r+0x1b24>
10005ee8:	e080100c 	andi	r2,fp,64
10005eec:	10015b26 	beq	r2,zero,1000645c <___vfprintf_internal_r+0x1dc4>
10005ef0:	d9012d17 	ldw	r4,1204(sp)
10005ef4:	d9412f17 	ldw	r5,1212(sp)
10005ef8:	20800017 	ldw	r2,0(r4)
10005efc:	21000104 	addi	r4,r4,4
10005f00:	d9012d15 	stw	r4,1204(sp)
10005f04:	1140000d 	sth	r5,0(r2)
10005f08:	003a2006 	br	1000478c <__alt_data_end+0xf800478c>
10005f0c:	e0c0100c 	andi	r3,fp,64
10005f10:	1800a226 	beq	r3,zero,1000619c <___vfprintf_internal_r+0x1b04>
10005f14:	d8c12d17 	ldw	r3,1204(sp)
10005f18:	1480000b 	ldhu	r18,0(r2)
10005f1c:	002b883a 	mov	r21,zero
10005f20:	18c00104 	addi	r3,r3,4
10005f24:	d8c12d15 	stw	r3,1204(sp)
10005f28:	0005883a 	mov	r2,zero
10005f2c:	9007883a 	mov	r3,r18
10005f30:	003c6906 	br	100050d8 <__alt_data_end+0xf80050d8>
10005f34:	e0c0100c 	andi	r3,fp,64
10005f38:	18009026 	beq	r3,zero,1000617c <___vfprintf_internal_r+0x1ae4>
10005f3c:	1480000b 	ldhu	r18,0(r2)
10005f40:	d8812d17 	ldw	r2,1204(sp)
10005f44:	002b883a 	mov	r21,zero
10005f48:	9007883a 	mov	r3,r18
10005f4c:	10800104 	addi	r2,r2,4
10005f50:	d8812d15 	stw	r2,1204(sp)
10005f54:	00800044 	movi	r2,1
10005f58:	003c5f06 	br	100050d8 <__alt_data_end+0xf80050d8>
10005f5c:	e0c0100c 	andi	r3,fp,64
10005f60:	18008026 	beq	r3,zero,10006164 <___vfprintf_internal_r+0x1acc>
10005f64:	d9012d17 	ldw	r4,1204(sp)
10005f68:	1480000b 	ldhu	r18,0(r2)
10005f6c:	002b883a 	mov	r21,zero
10005f70:	21000104 	addi	r4,r4,4
10005f74:	d9012d15 	stw	r4,1204(sp)
10005f78:	003c7906 	br	10005160 <__alt_data_end+0xf8005160>
10005f7c:	e080100c 	andi	r2,fp,64
10005f80:	10007126 	beq	r2,zero,10006148 <___vfprintf_internal_r+0x1ab0>
10005f84:	1c80000f 	ldh	r18,0(r3)
10005f88:	d8812d17 	ldw	r2,1204(sp)
10005f8c:	902bd7fa 	srai	r21,r18,31
10005f90:	10800104 	addi	r2,r2,4
10005f94:	d8812d15 	stw	r2,1204(sp)
10005f98:	a805883a 	mov	r2,r21
10005f9c:	003b1a06 	br	10004c08 <__alt_data_end+0xf8004c08>
10005fa0:	e4000007 	ldb	r16,0(fp)
10005fa4:	e005883a 	mov	r2,fp
10005fa8:	003a2306 	br	10004838 <__alt_data_end+0xf8004838>
10005fac:	00800084 	movi	r2,2
10005fb0:	003c4906 	br	100050d8 <__alt_data_end+0xf80050d8>
10005fb4:	01040074 	movhi	r4,4097
10005fb8:	21137c84 	addi	r4,r4,19954
10005fbc:	d9012c15 	stw	r4,1200(sp)
10005fc0:	d9012c17 	ldw	r4,1200(sp)
10005fc4:	1c47883a 	add	r3,r3,r17
10005fc8:	10800044 	addi	r2,r2,1
10005fcc:	41000015 	stw	r4,0(r8)
10005fd0:	44400115 	stw	r17,4(r8)
10005fd4:	d8c12015 	stw	r3,1152(sp)
10005fd8:	d8811f15 	stw	r2,1148(sp)
10005fdc:	010001c4 	movi	r4,7
10005fe0:	20becc16 	blt	r4,r2,10005b14 <__alt_data_end+0xf8005b14>
10005fe4:	42000204 	addi	r8,r8,8
10005fe8:	003ed106 	br	10005b30 <__alt_data_end+0xf8005b30>
10005fec:	01040074 	movhi	r4,4097
10005ff0:	21137c84 	addi	r4,r4,19954
10005ff4:	d9012c15 	stw	r4,1200(sp)
10005ff8:	003ba306 	br	10004e88 <__alt_data_end+0xf8004e88>
10005ffc:	b809883a 	mov	r4,r23
10006000:	b00b883a 	mov	r5,r22
10006004:	d9811e04 	addi	r6,sp,1144
10006008:	000b9a00 	call	1000b9a0 <__sprint_r>
1000600c:	103aba1e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
10006010:	d8c12017 	ldw	r3,1152(sp)
10006014:	da000404 	addi	r8,sp,16
10006018:	003d6c06 	br	100055cc <__alt_data_end+0xf80055cc>
1000601c:	d8811f17 	ldw	r2,1148(sp)
10006020:	01440074 	movhi	r5,4097
10006024:	01000044 	movi	r4,1
10006028:	18c00044 	addi	r3,r3,1
1000602c:	10800044 	addi	r2,r2,1
10006030:	29537c04 	addi	r5,r5,19952
10006034:	41000115 	stw	r4,4(r8)
10006038:	41400015 	stw	r5,0(r8)
1000603c:	d8c12015 	stw	r3,1152(sp)
10006040:	d8811f15 	stw	r2,1148(sp)
10006044:	010001c4 	movi	r4,7
10006048:	20806716 	blt	r4,r2,100061e8 <___vfprintf_internal_r+0x1b50>
1000604c:	42000204 	addi	r8,r8,8
10006050:	8000041e 	bne	r16,zero,10006064 <___vfprintf_internal_r+0x19cc>
10006054:	d8813317 	ldw	r2,1228(sp)
10006058:	1000021e 	bne	r2,zero,10006064 <___vfprintf_internal_r+0x19cc>
1000605c:	e080004c 	andi	r2,fp,1
10006060:	103ba026 	beq	r2,zero,10004ee4 <__alt_data_end+0xf8004ee4>
10006064:	d9013817 	ldw	r4,1248(sp)
10006068:	d8811f17 	ldw	r2,1148(sp)
1000606c:	d9413517 	ldw	r5,1236(sp)
10006070:	1907883a 	add	r3,r3,r4
10006074:	10800044 	addi	r2,r2,1
10006078:	41000115 	stw	r4,4(r8)
1000607c:	41400015 	stw	r5,0(r8)
10006080:	d8c12015 	stw	r3,1152(sp)
10006084:	d8811f15 	stw	r2,1148(sp)
10006088:	010001c4 	movi	r4,7
1000608c:	20815716 	blt	r4,r2,100065ec <___vfprintf_internal_r+0x1f54>
10006090:	42000204 	addi	r8,r8,8
10006094:	0421c83a 	sub	r16,zero,r16
10006098:	0400810e 	bge	zero,r16,100062a0 <___vfprintf_internal_r+0x1c08>
1000609c:	04400404 	movi	r17,16
100060a0:	8c00bd0e 	bge	r17,r16,10006398 <___vfprintf_internal_r+0x1d00>
100060a4:	01440074 	movhi	r5,4097
100060a8:	29537c84 	addi	r5,r5,19954
100060ac:	d9412c15 	stw	r5,1200(sp)
100060b0:	04c001c4 	movi	r19,7
100060b4:	00000306 	br	100060c4 <___vfprintf_internal_r+0x1a2c>
100060b8:	42000204 	addi	r8,r8,8
100060bc:	843ffc04 	addi	r16,r16,-16
100060c0:	8c00b80e 	bge	r17,r16,100063a4 <___vfprintf_internal_r+0x1d0c>
100060c4:	18c00404 	addi	r3,r3,16
100060c8:	10800044 	addi	r2,r2,1
100060cc:	45000015 	stw	r20,0(r8)
100060d0:	44400115 	stw	r17,4(r8)
100060d4:	d8c12015 	stw	r3,1152(sp)
100060d8:	d8811f15 	stw	r2,1148(sp)
100060dc:	98bff60e 	bge	r19,r2,100060b8 <__alt_data_end+0xf80060b8>
100060e0:	b809883a 	mov	r4,r23
100060e4:	b00b883a 	mov	r5,r22
100060e8:	d9811e04 	addi	r6,sp,1144
100060ec:	000b9a00 	call	1000b9a0 <__sprint_r>
100060f0:	103a811e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
100060f4:	d8c12017 	ldw	r3,1152(sp)
100060f8:	d8811f17 	ldw	r2,1148(sp)
100060fc:	da000404 	addi	r8,sp,16
10006100:	003fee06 	br	100060bc <__alt_data_end+0xf80060bc>
10006104:	008011c4 	movi	r2,71
10006108:	1400db16 	blt	r2,r16,10006478 <___vfprintf_internal_r+0x1de0>
1000610c:	01040074 	movhi	r4,4097
10006110:	21136e04 	addi	r4,r4,19896
10006114:	d9013115 	stw	r4,1220(sp)
10006118:	00c000c4 	movi	r3,3
1000611c:	00bfdfc4 	movi	r2,-129
10006120:	d8c12b15 	stw	r3,1196(sp)
10006124:	e0b8703a 	and	fp,fp,r2
10006128:	dcc12783 	ldbu	r19,1182(sp)
1000612c:	dc812d15 	stw	r18,1204(sp)
10006130:	1823883a 	mov	r17,r3
10006134:	d8013215 	stw	zero,1224(sp)
10006138:	d8013415 	stw	zero,1232(sp)
1000613c:	003ad606 	br	10004c98 <__alt_data_end+0xf8004c98>
10006140:	4823883a 	mov	r17,r9
10006144:	003cc906 	br	1000546c <__alt_data_end+0xf800546c>
10006148:	1c800017 	ldw	r18,0(r3)
1000614c:	d8c12d17 	ldw	r3,1204(sp)
10006150:	902bd7fa 	srai	r21,r18,31
10006154:	18c00104 	addi	r3,r3,4
10006158:	d8c12d15 	stw	r3,1204(sp)
1000615c:	a805883a 	mov	r2,r21
10006160:	003aa906 	br	10004c08 <__alt_data_end+0xf8004c08>
10006164:	d9412d17 	ldw	r5,1204(sp)
10006168:	14800017 	ldw	r18,0(r2)
1000616c:	002b883a 	mov	r21,zero
10006170:	29400104 	addi	r5,r5,4
10006174:	d9412d15 	stw	r5,1204(sp)
10006178:	003bf906 	br	10005160 <__alt_data_end+0xf8005160>
1000617c:	d8c12d17 	ldw	r3,1204(sp)
10006180:	14800017 	ldw	r18,0(r2)
10006184:	002b883a 	mov	r21,zero
10006188:	18c00104 	addi	r3,r3,4
1000618c:	d8c12d15 	stw	r3,1204(sp)
10006190:	00800044 	movi	r2,1
10006194:	9007883a 	mov	r3,r18
10006198:	003bcf06 	br	100050d8 <__alt_data_end+0xf80050d8>
1000619c:	d9012d17 	ldw	r4,1204(sp)
100061a0:	14800017 	ldw	r18,0(r2)
100061a4:	002b883a 	mov	r21,zero
100061a8:	21000104 	addi	r4,r4,4
100061ac:	d9012d15 	stw	r4,1204(sp)
100061b0:	0005883a 	mov	r2,zero
100061b4:	9007883a 	mov	r3,r18
100061b8:	003bc706 	br	100050d8 <__alt_data_end+0xf80050d8>
100061bc:	d9412d17 	ldw	r5,1204(sp)
100061c0:	d8c12f17 	ldw	r3,1212(sp)
100061c4:	28800017 	ldw	r2,0(r5)
100061c8:	29400104 	addi	r5,r5,4
100061cc:	d9412d15 	stw	r5,1204(sp)
100061d0:	10c00015 	stw	r3,0(r2)
100061d4:	00396d06 	br	1000478c <__alt_data_end+0xf800478c>
100061d8:	01040074 	movhi	r4,4097
100061dc:	21136c04 	addi	r4,r4,19888
100061e0:	d9013115 	stw	r4,1220(sp)
100061e4:	003ba206 	br	10005070 <__alt_data_end+0xf8005070>
100061e8:	b809883a 	mov	r4,r23
100061ec:	b00b883a 	mov	r5,r22
100061f0:	d9811e04 	addi	r6,sp,1144
100061f4:	000b9a00 	call	1000b9a0 <__sprint_r>
100061f8:	103a3f1e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
100061fc:	dc012617 	ldw	r16,1176(sp)
10006200:	d8c12017 	ldw	r3,1152(sp)
10006204:	da000404 	addi	r8,sp,16
10006208:	003f9106 	br	10006050 <__alt_data_end+0xf8006050>
1000620c:	e0800044 	addi	r2,fp,1
10006210:	9cc00814 	ori	r19,r19,32
10006214:	e4000047 	ldb	r16,1(fp)
10006218:	00398706 	br	10004838 <__alt_data_end+0xf8004838>
1000621c:	d8812e17 	ldw	r2,1208(sp)
10006220:	d8c12d15 	stw	r3,1204(sp)
10006224:	0085c83a 	sub	r2,zero,r2
10006228:	d8812e15 	stw	r2,1208(sp)
1000622c:	e005883a 	mov	r2,fp
10006230:	003a3a06 	br	10004b1c <__alt_data_end+0xf8004b1c>
10006234:	b809883a 	mov	r4,r23
10006238:	b00b883a 	mov	r5,r22
1000623c:	d9811e04 	addi	r6,sp,1144
10006240:	000b9a00 	call	1000b9a0 <__sprint_r>
10006244:	103a2c1e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
10006248:	d8c12017 	ldw	r3,1152(sp)
1000624c:	da000404 	addi	r8,sp,16
10006250:	003cf006 	br	10005614 <__alt_data_end+0xf8005614>
10006254:	d8c12817 	ldw	r3,1184(sp)
10006258:	d9013117 	ldw	r4,1220(sp)
1000625c:	1923c83a 	sub	r17,r3,r4
10006260:	003a8806 	br	10004c84 <__alt_data_end+0xf8004c84>
10006264:	da013f15 	stw	r8,1276(sp)
10006268:	00046000 	call	10004600 <strlen>
1000626c:	1023883a 	mov	r17,r2
10006270:	da013f17 	ldw	r8,1276(sp)
10006274:	883c7f0e 	bge	r17,zero,10005474 <__alt_data_end+0xf8005474>
10006278:	0005883a 	mov	r2,zero
1000627c:	003c7d06 	br	10005474 <__alt_data_end+0xf8005474>
10006280:	b809883a 	mov	r4,r23
10006284:	b00b883a 	mov	r5,r22
10006288:	d9811e04 	addi	r6,sp,1144
1000628c:	000b9a00 	call	1000b9a0 <__sprint_r>
10006290:	103a191e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
10006294:	d8c12017 	ldw	r3,1152(sp)
10006298:	d8811f17 	ldw	r2,1148(sp)
1000629c:	da000404 	addi	r8,sp,16
100062a0:	d9413317 	ldw	r5,1228(sp)
100062a4:	d9013117 	ldw	r4,1220(sp)
100062a8:	10800044 	addi	r2,r2,1
100062ac:	28c7883a 	add	r3,r5,r3
100062b0:	41000015 	stw	r4,0(r8)
100062b4:	41400115 	stw	r5,4(r8)
100062b8:	d8c12015 	stw	r3,1152(sp)
100062bc:	d8811f15 	stw	r2,1148(sp)
100062c0:	010001c4 	movi	r4,7
100062c4:	20bb060e 	bge	r4,r2,10004ee0 <__alt_data_end+0xf8004ee0>
100062c8:	003d6206 	br	10005854 <__alt_data_end+0xf8005854>
100062cc:	01040074 	movhi	r4,4097
100062d0:	21138084 	addi	r4,r4,19970
100062d4:	d9013615 	stw	r4,1240(sp)
100062d8:	003aa306 	br	10004d68 <__alt_data_end+0xf8004d68>
100062dc:	d8812604 	addi	r2,sp,1176
100062e0:	d8800115 	stw	r2,4(sp)
100062e4:	d9413717 	ldw	r5,1244(sp)
100062e8:	d8812504 	addi	r2,sp,1172
100062ec:	d8800215 	stw	r2,8(sp)
100062f0:	d8812104 	addi	r2,sp,1156
100062f4:	da400015 	stw	r9,0(sp)
100062f8:	d8800315 	stw	r2,12(sp)
100062fc:	b809883a 	mov	r4,r23
10006300:	880d883a 	mov	r6,r17
10006304:	01c000c4 	movi	r7,3
10006308:	da013f15 	stw	r8,1276(sp)
1000630c:	da413e15 	stw	r9,1272(sp)
10006310:	0006b100 	call	10006b10 <_dtoa_r>
10006314:	da413e17 	ldw	r9,1272(sp)
10006318:	da013f17 	ldw	r8,1276(sp)
1000631c:	d8813115 	stw	r2,1220(sp)
10006320:	482b883a 	mov	r21,r9
10006324:	d8c13117 	ldw	r3,1220(sp)
10006328:	00801184 	movi	r2,70
1000632c:	1d55883a 	add	r10,r3,r21
10006330:	98bebb1e 	bne	r19,r2,10005e20 <__alt_data_end+0xf8005e20>
10006334:	19000007 	ldb	r4,0(r3)
10006338:	00800c04 	movi	r2,48
1000633c:	2080dd26 	beq	r4,r2,100066b4 <___vfprintf_internal_r+0x201c>
10006340:	d8c12617 	ldw	r3,1176(sp)
10006344:	50d5883a 	add	r10,r10,r3
10006348:	003eb506 	br	10005e20 <__alt_data_end+0xf8005e20>
1000634c:	0023883a 	mov	r17,zero
10006350:	003d9b06 	br	100059c0 <__alt_data_end+0xf80059c0>
10006354:	b809883a 	mov	r4,r23
10006358:	b00b883a 	mov	r5,r22
1000635c:	d9811e04 	addi	r6,sp,1144
10006360:	000b9a00 	call	1000b9a0 <__sprint_r>
10006364:	1039e41e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
10006368:	d8c12017 	ldw	r3,1152(sp)
1000636c:	da000404 	addi	r8,sp,16
10006370:	003d9206 	br	100059bc <__alt_data_end+0xf80059bc>
10006374:	b809883a 	mov	r4,r23
10006378:	b00b883a 	mov	r5,r22
1000637c:	d9811e04 	addi	r6,sp,1144
10006380:	000b9a00 	call	1000b9a0 <__sprint_r>
10006384:	1039dc1e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
10006388:	d8812617 	ldw	r2,1176(sp)
1000638c:	d8c12017 	ldw	r3,1152(sp)
10006390:	da000404 	addi	r8,sp,16
10006394:	003dfb06 	br	10005b84 <__alt_data_end+0xf8005b84>
10006398:	01040074 	movhi	r4,4097
1000639c:	21137c84 	addi	r4,r4,19954
100063a0:	d9012c15 	stw	r4,1200(sp)
100063a4:	d9012c17 	ldw	r4,1200(sp)
100063a8:	1c07883a 	add	r3,r3,r16
100063ac:	10800044 	addi	r2,r2,1
100063b0:	41000015 	stw	r4,0(r8)
100063b4:	44000115 	stw	r16,4(r8)
100063b8:	d8c12015 	stw	r3,1152(sp)
100063bc:	d8811f15 	stw	r2,1148(sp)
100063c0:	010001c4 	movi	r4,7
100063c4:	20bfae16 	blt	r4,r2,10006280 <__alt_data_end+0xf8006280>
100063c8:	42000204 	addi	r8,r8,8
100063cc:	003fb406 	br	100062a0 <__alt_data_end+0xf80062a0>
100063d0:	0021883a 	mov	r16,zero
100063d4:	003dfd06 	br	10005bcc <__alt_data_end+0xf8005bcc>
100063d8:	01440074 	movhi	r5,4097
100063dc:	29538084 	addi	r5,r5,19970
100063e0:	d9413615 	stw	r5,1240(sp)
100063e4:	003ae306 	br	10004f74 <__alt_data_end+0xf8004f74>
100063e8:	b809883a 	mov	r4,r23
100063ec:	b00b883a 	mov	r5,r22
100063f0:	d9811e04 	addi	r6,sp,1144
100063f4:	000b9a00 	call	1000b9a0 <__sprint_r>
100063f8:	1039bf1e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
100063fc:	d8812617 	ldw	r2,1176(sp)
10006400:	d9413317 	ldw	r5,1228(sp)
10006404:	d8c12017 	ldw	r3,1152(sp)
10006408:	da000404 	addi	r8,sp,16
1000640c:	2885c83a 	sub	r2,r5,r2
10006410:	003ded06 	br	10005bc8 <__alt_data_end+0xf8005bc8>
10006414:	00800184 	movi	r2,6
10006418:	1240012e 	bgeu	r2,r9,10006420 <___vfprintf_internal_r+0x1d88>
1000641c:	1013883a 	mov	r9,r2
10006420:	4823883a 	mov	r17,r9
10006424:	4805883a 	mov	r2,r9
10006428:	4800b216 	blt	r9,zero,100066f4 <___vfprintf_internal_r+0x205c>
1000642c:	01440074 	movhi	r5,4097
10006430:	29537a04 	addi	r5,r5,19944
10006434:	d8812b15 	stw	r2,1196(sp)
10006438:	dc812d15 	stw	r18,1204(sp)
1000643c:	d8013215 	stw	zero,1224(sp)
10006440:	d8013415 	stw	zero,1232(sp)
10006444:	d9413115 	stw	r5,1220(sp)
10006448:	0005883a 	mov	r2,zero
1000644c:	003a1906 	br	10004cb4 <__alt_data_end+0xf8004cb4>
10006450:	04c00b44 	movi	r19,45
10006454:	dcc12785 	stb	r19,1182(sp)
10006458:	003b0006 	br	1000505c <__alt_data_end+0xf800505c>
1000645c:	d8c12d17 	ldw	r3,1204(sp)
10006460:	d9012f17 	ldw	r4,1212(sp)
10006464:	18800017 	ldw	r2,0(r3)
10006468:	18c00104 	addi	r3,r3,4
1000646c:	d8c12d15 	stw	r3,1204(sp)
10006470:	11000015 	stw	r4,0(r2)
10006474:	0038c506 	br	1000478c <__alt_data_end+0xf800478c>
10006478:	01440074 	movhi	r5,4097
1000647c:	29536f04 	addi	r5,r5,19900
10006480:	d9413115 	stw	r5,1220(sp)
10006484:	003f2406 	br	10006118 <__alt_data_end+0xf8006118>
10006488:	00800b44 	movi	r2,45
1000648c:	d8812785 	stb	r2,1182(sp)
10006490:	df012b15 	stw	fp,1196(sp)
10006494:	d8013215 	stw	zero,1224(sp)
10006498:	df012d17 	ldw	fp,1204(sp)
1000649c:	00800b44 	movi	r2,45
100064a0:	dc812d15 	stw	r18,1204(sp)
100064a4:	003a0006 	br	10004ca8 <__alt_data_end+0xf8004ca8>
100064a8:	d8c12617 	ldw	r3,1176(sp)
100064ac:	00bfff44 	movi	r2,-3
100064b0:	18800a16 	blt	r3,r2,100064dc <___vfprintf_internal_r+0x1e44>
100064b4:	48c00916 	blt	r9,r3,100064dc <___vfprintf_internal_r+0x1e44>
100064b8:	d8c13415 	stw	r3,1232(sp)
100064bc:	040019c4 	movi	r16,103
100064c0:	003e7606 	br	10005e9c <__alt_data_end+0xf8005e9c>
100064c4:	01040074 	movhi	r4,4097
100064c8:	21137c84 	addi	r4,r4,19954
100064cc:	d9012c15 	stw	r4,1200(sp)
100064d0:	003c8e06 	br	1000570c <__alt_data_end+0xf800570c>
100064d4:	5005883a 	mov	r2,r10
100064d8:	003e6506 	br	10005e70 <__alt_data_end+0xf8005e70>
100064dc:	843fff84 	addi	r16,r16,-2
100064e0:	1d7fffc4 	addi	r21,r3,-1
100064e4:	dd412615 	stw	r21,1176(sp)
100064e8:	dc0122c5 	stb	r16,1163(sp)
100064ec:	a8009216 	blt	r21,zero,10006738 <___vfprintf_internal_r+0x20a0>
100064f0:	00800ac4 	movi	r2,43
100064f4:	d8812305 	stb	r2,1164(sp)
100064f8:	00800244 	movi	r2,9
100064fc:	1540660e 	bge	r2,r21,10006698 <___vfprintf_internal_r+0x2000>
10006500:	dcc122c4 	addi	r19,sp,1163
10006504:	dc012c15 	stw	r16,1200(sp)
10006508:	4023883a 	mov	r17,r8
1000650c:	9821883a 	mov	r16,r19
10006510:	a809883a 	mov	r4,r21
10006514:	01400284 	movi	r5,10
10006518:	00030140 	call	10003014 <__modsi3>
1000651c:	10800c04 	addi	r2,r2,48
10006520:	843fffc4 	addi	r16,r16,-1
10006524:	a809883a 	mov	r4,r21
10006528:	01400284 	movi	r5,10
1000652c:	80800005 	stb	r2,0(r16)
10006530:	0002fc00 	call	10002fc0 <__divsi3>
10006534:	01000244 	movi	r4,9
10006538:	102b883a 	mov	r21,r2
1000653c:	20bff416 	blt	r4,r2,10006510 <__alt_data_end+0xf8006510>
10006540:	8811883a 	mov	r8,r17
10006544:	10800c04 	addi	r2,r2,48
10006548:	8023883a 	mov	r17,r16
1000654c:	897fffc4 	addi	r5,r17,-1
10006550:	88bfffc5 	stb	r2,-1(r17)
10006554:	dc012c17 	ldw	r16,1200(sp)
10006558:	2cc08a2e 	bgeu	r5,r19,10006784 <___vfprintf_internal_r+0x20ec>
1000655c:	d9812384 	addi	r6,sp,1166
10006560:	344dc83a 	sub	r6,r6,r17
10006564:	d9012344 	addi	r4,sp,1165
10006568:	998d883a 	add	r6,r19,r6
1000656c:	00000106 	br	10006574 <___vfprintf_internal_r+0x1edc>
10006570:	28800003 	ldbu	r2,0(r5)
10006574:	20800005 	stb	r2,0(r4)
10006578:	21000044 	addi	r4,r4,1
1000657c:	29400044 	addi	r5,r5,1
10006580:	21bffb1e 	bne	r4,r6,10006570 <__alt_data_end+0xf8006570>
10006584:	d8812304 	addi	r2,sp,1164
10006588:	1445c83a 	sub	r2,r2,r17
1000658c:	d9412344 	addi	r5,sp,1165
10006590:	2885883a 	add	r2,r5,r2
10006594:	14e7c83a 	sub	r19,r2,r19
10006598:	d8813317 	ldw	r2,1228(sp)
1000659c:	d8c13317 	ldw	r3,1228(sp)
100065a0:	dcc13a15 	stw	r19,1256(sp)
100065a4:	14e3883a 	add	r17,r2,r19
100065a8:	00800044 	movi	r2,1
100065ac:	10c0550e 	bge	r2,r3,10006704 <___vfprintf_internal_r+0x206c>
100065b0:	8c400044 	addi	r17,r17,1
100065b4:	8839883a 	mov	fp,r17
100065b8:	88005016 	blt	r17,zero,100066fc <___vfprintf_internal_r+0x2064>
100065bc:	d8013415 	stw	zero,1232(sp)
100065c0:	003e3f06 	br	10005ec0 <__alt_data_end+0xf8005ec0>
100065c4:	da412b15 	stw	r9,1196(sp)
100065c8:	dcc12783 	ldbu	r19,1182(sp)
100065cc:	4823883a 	mov	r17,r9
100065d0:	dc812d15 	stw	r18,1204(sp)
100065d4:	d8013215 	stw	zero,1224(sp)
100065d8:	d8013415 	stw	zero,1232(sp)
100065dc:	0039ae06 	br	10004c98 <__alt_data_end+0xf8004c98>
100065e0:	483de91e 	bne	r9,zero,10005d88 <__alt_data_end+0xf8005d88>
100065e4:	8813883a 	mov	r9,r17
100065e8:	003de706 	br	10005d88 <__alt_data_end+0xf8005d88>
100065ec:	b809883a 	mov	r4,r23
100065f0:	b00b883a 	mov	r5,r22
100065f4:	d9811e04 	addi	r6,sp,1144
100065f8:	000b9a00 	call	1000b9a0 <__sprint_r>
100065fc:	10393e1e 	bne	r2,zero,10004af8 <__alt_data_end+0xf8004af8>
10006600:	dc012617 	ldw	r16,1176(sp)
10006604:	d8c12017 	ldw	r3,1152(sp)
10006608:	d8811f17 	ldw	r2,1148(sp)
1000660c:	da000404 	addi	r8,sp,16
10006610:	003ea006 	br	10006094 <__alt_data_end+0xf8006094>
10006614:	00c00b44 	movi	r3,45
10006618:	2460003c 	xorhi	r17,r4,32768
1000661c:	d8c12b05 	stb	r3,1196(sp)
10006620:	003ddf06 	br	10005da0 <__alt_data_end+0xf8005da0>
10006624:	02400184 	movi	r9,6
10006628:	003dd706 	br	10005d88 <__alt_data_end+0xf8005d88>
1000662c:	4d400044 	addi	r21,r9,1
10006630:	003de206 	br	10005dbc <__alt_data_end+0xf8005dbc>
10006634:	d8c13417 	ldw	r3,1232(sp)
10006638:	00c0490e 	bge	zero,r3,10006760 <___vfprintf_internal_r+0x20c8>
1000663c:	04400044 	movi	r17,1
10006640:	d9013317 	ldw	r4,1228(sp)
10006644:	8923883a 	add	r17,r17,r4
10006648:	8839883a 	mov	fp,r17
1000664c:	883e1c0e 	bge	r17,zero,10005ec0 <__alt_data_end+0xf8005ec0>
10006650:	0039883a 	mov	fp,zero
10006654:	003e1a06 	br	10005ec0 <__alt_data_end+0xf8005ec0>
10006658:	00c03b0e 	bge	zero,r3,10006748 <___vfprintf_internal_r+0x20b0>
1000665c:	4800021e 	bne	r9,zero,10006668 <___vfprintf_internal_r+0x1fd0>
10006660:	e080004c 	andi	r2,fp,1
10006664:	10000626 	beq	r2,zero,10006680 <___vfprintf_internal_r+0x1fe8>
10006668:	d8c13417 	ldw	r3,1232(sp)
1000666c:	4a400044 	addi	r9,r9,1
10006670:	1a63883a 	add	r17,r3,r9
10006674:	8839883a 	mov	fp,r17
10006678:	883e110e 	bge	r17,zero,10005ec0 <__alt_data_end+0xf8005ec0>
1000667c:	003ff406 	br	10006650 <__alt_data_end+0xf8006650>
10006680:	1839883a 	mov	fp,r3
10006684:	18004116 	blt	r3,zero,1000678c <___vfprintf_internal_r+0x20f4>
10006688:	dc413417 	ldw	r17,1232(sp)
1000668c:	003e0c06 	br	10005ec0 <__alt_data_end+0xf8005ec0>
10006690:	d8812117 	ldw	r2,1156(sp)
10006694:	003df606 	br	10005e70 <__alt_data_end+0xf8005e70>
10006698:	00800c04 	movi	r2,48
1000669c:	a8c00c04 	addi	r3,r21,48
100066a0:	d8812345 	stb	r2,1165(sp)
100066a4:	d8c12385 	stb	r3,1166(sp)
100066a8:	d88123c4 	addi	r2,sp,1167
100066ac:	dcc122c4 	addi	r19,sp,1163
100066b0:	003fb806 	br	10006594 <__alt_data_end+0xf8006594>
100066b4:	d9013717 	ldw	r4,1244(sp)
100066b8:	880b883a 	mov	r5,r17
100066bc:	000d883a 	mov	r6,zero
100066c0:	000f883a 	mov	r7,zero
100066c4:	da013f15 	stw	r8,1276(sp)
100066c8:	da413e15 	stw	r9,1272(sp)
100066cc:	da813d15 	stw	r10,1268(sp)
100066d0:	000ed280 	call	1000ed28 <__eqdf2>
100066d4:	da013f17 	ldw	r8,1276(sp)
100066d8:	da413e17 	ldw	r9,1272(sp)
100066dc:	da813d17 	ldw	r10,1268(sp)
100066e0:	103f1726 	beq	r2,zero,10006340 <__alt_data_end+0xf8006340>
100066e4:	00800044 	movi	r2,1
100066e8:	1547c83a 	sub	r3,r2,r21
100066ec:	d8c12615 	stw	r3,1176(sp)
100066f0:	003f1406 	br	10006344 <__alt_data_end+0xf8006344>
100066f4:	0005883a 	mov	r2,zero
100066f8:	003f4c06 	br	1000642c <__alt_data_end+0xf800642c>
100066fc:	0039883a 	mov	fp,zero
10006700:	003fae06 	br	100065bc <__alt_data_end+0xf80065bc>
10006704:	e084703a 	and	r2,fp,r2
10006708:	103faa26 	beq	r2,zero,100065b4 <__alt_data_end+0xf80065b4>
1000670c:	003fa806 	br	100065b0 <__alt_data_end+0xf80065b0>
10006710:	d9412d17 	ldw	r5,1204(sp)
10006714:	2a400017 	ldw	r9,0(r5)
10006718:	28c00104 	addi	r3,r5,4
1000671c:	d8c12d15 	stw	r3,1204(sp)
10006720:	483ebc0e 	bge	r9,zero,10006214 <__alt_data_end+0xf8006214>
10006724:	027fffc4 	movi	r9,-1
10006728:	e4000047 	ldb	r16,1(fp)
1000672c:	00384206 	br	10004838 <__alt_data_end+0xf8004838>
10006730:	043fffc4 	movi	r16,-1
10006734:	0038ce06 	br	10004a70 <__alt_data_end+0xf8004a70>
10006738:	00800b44 	movi	r2,45
1000673c:	056bc83a 	sub	r21,zero,r21
10006740:	d8812305 	stb	r2,1164(sp)
10006744:	003f6c06 	br	100064f8 <__alt_data_end+0xf80064f8>
10006748:	4800081e 	bne	r9,zero,1000676c <___vfprintf_internal_r+0x20d4>
1000674c:	e080004c 	andi	r2,fp,1
10006750:	1000061e 	bne	r2,zero,1000676c <___vfprintf_internal_r+0x20d4>
10006754:	07000044 	movi	fp,1
10006758:	e023883a 	mov	r17,fp
1000675c:	003dd806 	br	10005ec0 <__alt_data_end+0xf8005ec0>
10006760:	04400084 	movi	r17,2
10006764:	88e3c83a 	sub	r17,r17,r3
10006768:	003fb506 	br	10006640 <__alt_data_end+0xf8006640>
1000676c:	4c400084 	addi	r17,r9,2
10006770:	8839883a 	mov	fp,r17
10006774:	883dd20e 	bge	r17,zero,10005ec0 <__alt_data_end+0xf8005ec0>
10006778:	003fb506 	br	10006650 <__alt_data_end+0xf8006650>
1000677c:	d8c12617 	ldw	r3,1176(sp)
10006780:	003f5706 	br	100064e0 <__alt_data_end+0xf80064e0>
10006784:	d8812344 	addi	r2,sp,1165
10006788:	003f8206 	br	10006594 <__alt_data_end+0xf8006594>
1000678c:	0039883a 	mov	fp,zero
10006790:	003fbd06 	br	10006688 <__alt_data_end+0xf8006688>

10006794 <__vfprintf_internal>:
10006794:	2007883a 	mov	r3,r4
10006798:	01040074 	movhi	r4,4097
1000679c:	211a9704 	addi	r4,r4,27228
100067a0:	21000017 	ldw	r4,0(r4)
100067a4:	2805883a 	mov	r2,r5
100067a8:	300f883a 	mov	r7,r6
100067ac:	180b883a 	mov	r5,r3
100067b0:	100d883a 	mov	r6,r2
100067b4:	00046981 	jmpi	10004698 <___vfprintf_internal_r>

100067b8 <__swsetup_r>:
100067b8:	00840074 	movhi	r2,4097
100067bc:	defffd04 	addi	sp,sp,-12
100067c0:	109a9704 	addi	r2,r2,27228
100067c4:	dc400115 	stw	r17,4(sp)
100067c8:	2023883a 	mov	r17,r4
100067cc:	11000017 	ldw	r4,0(r2)
100067d0:	dc000015 	stw	r16,0(sp)
100067d4:	dfc00215 	stw	ra,8(sp)
100067d8:	2821883a 	mov	r16,r5
100067dc:	20000226 	beq	r4,zero,100067e8 <__swsetup_r+0x30>
100067e0:	20c00e17 	ldw	r3,56(r4)
100067e4:	18002e26 	beq	r3,zero,100068a0 <__swsetup_r+0xe8>
100067e8:	8080030b 	ldhu	r2,12(r16)
100067ec:	10c0020c 	andi	r3,r2,8
100067f0:	100d883a 	mov	r6,r2
100067f4:	18000f26 	beq	r3,zero,10006834 <__swsetup_r+0x7c>
100067f8:	80c00417 	ldw	r3,16(r16)
100067fc:	18001526 	beq	r3,zero,10006854 <__swsetup_r+0x9c>
10006800:	1100004c 	andi	r4,r2,1
10006804:	20001c1e 	bne	r4,zero,10006878 <__swsetup_r+0xc0>
10006808:	1080008c 	andi	r2,r2,2
1000680c:	1000261e 	bne	r2,zero,100068a8 <__swsetup_r+0xf0>
10006810:	80800517 	ldw	r2,20(r16)
10006814:	80800215 	stw	r2,8(r16)
10006818:	18001c26 	beq	r3,zero,1000688c <__swsetup_r+0xd4>
1000681c:	0005883a 	mov	r2,zero
10006820:	dfc00217 	ldw	ra,8(sp)
10006824:	dc400117 	ldw	r17,4(sp)
10006828:	dc000017 	ldw	r16,0(sp)
1000682c:	dec00304 	addi	sp,sp,12
10006830:	f800283a 	ret
10006834:	3080040c 	andi	r2,r6,16
10006838:	10001726 	beq	r2,zero,10006898 <__swsetup_r+0xe0>
1000683c:	3080010c 	andi	r2,r6,4
10006840:	10001b1e 	bne	r2,zero,100068b0 <__swsetup_r+0xf8>
10006844:	80c00417 	ldw	r3,16(r16)
10006848:	30800214 	ori	r2,r6,8
1000684c:	8080030d 	sth	r2,12(r16)
10006850:	183feb1e 	bne	r3,zero,10006800 <__alt_data_end+0xf8006800>
10006854:	1140a00c 	andi	r5,r2,640
10006858:	01008004 	movi	r4,512
1000685c:	293fe826 	beq	r5,r4,10006800 <__alt_data_end+0xf8006800>
10006860:	8809883a 	mov	r4,r17
10006864:	800b883a 	mov	r5,r16
10006868:	000934c0 	call	1000934c <__smakebuf_r>
1000686c:	8080030b 	ldhu	r2,12(r16)
10006870:	80c00417 	ldw	r3,16(r16)
10006874:	003fe206 	br	10006800 <__alt_data_end+0xf8006800>
10006878:	80800517 	ldw	r2,20(r16)
1000687c:	80000215 	stw	zero,8(r16)
10006880:	0085c83a 	sub	r2,zero,r2
10006884:	80800615 	stw	r2,24(r16)
10006888:	183fe41e 	bne	r3,zero,1000681c <__alt_data_end+0xf800681c>
1000688c:	8080030b 	ldhu	r2,12(r16)
10006890:	1080200c 	andi	r2,r2,128
10006894:	103fe226 	beq	r2,zero,10006820 <__alt_data_end+0xf8006820>
10006898:	00bfffc4 	movi	r2,-1
1000689c:	003fe006 	br	10006820 <__alt_data_end+0xf8006820>
100068a0:	00087f40 	call	100087f4 <__sinit>
100068a4:	003fd006 	br	100067e8 <__alt_data_end+0xf80067e8>
100068a8:	0005883a 	mov	r2,zero
100068ac:	003fd906 	br	10006814 <__alt_data_end+0xf8006814>
100068b0:	81400c17 	ldw	r5,48(r16)
100068b4:	28000626 	beq	r5,zero,100068d0 <__swsetup_r+0x118>
100068b8:	80801004 	addi	r2,r16,64
100068bc:	28800326 	beq	r5,r2,100068cc <__swsetup_r+0x114>
100068c0:	8809883a 	mov	r4,r17
100068c4:	00089680 	call	10008968 <_free_r>
100068c8:	8180030b 	ldhu	r6,12(r16)
100068cc:	80000c15 	stw	zero,48(r16)
100068d0:	80c00417 	ldw	r3,16(r16)
100068d4:	00bff6c4 	movi	r2,-37
100068d8:	118c703a 	and	r6,r2,r6
100068dc:	80000115 	stw	zero,4(r16)
100068e0:	80c00015 	stw	r3,0(r16)
100068e4:	003fd806 	br	10006848 <__alt_data_end+0xf8006848>

100068e8 <quorem>:
100068e8:	defff204 	addi	sp,sp,-56
100068ec:	ddc00b15 	stw	r23,44(sp)
100068f0:	20800417 	ldw	r2,16(r4)
100068f4:	2dc00417 	ldw	r23,16(r5)
100068f8:	dfc00d15 	stw	ra,52(sp)
100068fc:	df000c15 	stw	fp,48(sp)
10006900:	dd800a15 	stw	r22,40(sp)
10006904:	dd400915 	stw	r21,36(sp)
10006908:	dd000815 	stw	r20,32(sp)
1000690c:	dcc00715 	stw	r19,28(sp)
10006910:	dc800615 	stw	r18,24(sp)
10006914:	dc400515 	stw	r17,20(sp)
10006918:	dc000415 	stw	r16,16(sp)
1000691c:	15c07a16 	blt	r2,r23,10006b08 <quorem+0x220>
10006920:	bdffffc4 	addi	r23,r23,-1
10006924:	bde9883a 	add	r20,r23,r23
10006928:	28c00504 	addi	r3,r5,20
1000692c:	a529883a 	add	r20,r20,r20
10006930:	1d39883a 	add	fp,r3,r20
10006934:	24c00504 	addi	r19,r4,20
10006938:	d9400215 	stw	r5,8(sp)
1000693c:	9d29883a 	add	r20,r19,r20
10006940:	e1400017 	ldw	r5,0(fp)
10006944:	d9000015 	stw	r4,0(sp)
10006948:	a1000017 	ldw	r4,0(r20)
1000694c:	29400044 	addi	r5,r5,1
10006950:	d8c00115 	stw	r3,4(sp)
10006954:	dd000315 	stw	r20,12(sp)
10006958:	00030700 	call	10003070 <__udivsi3>
1000695c:	1025883a 	mov	r18,r2
10006960:	10003026 	beq	r2,zero,10006a24 <quorem+0x13c>
10006964:	dc400117 	ldw	r17,4(sp)
10006968:	9829883a 	mov	r20,r19
1000696c:	002d883a 	mov	r22,zero
10006970:	0021883a 	mov	r16,zero
10006974:	8d400017 	ldw	r21,0(r17)
10006978:	900b883a 	mov	r5,r18
1000697c:	8c400104 	addi	r17,r17,4
10006980:	a93fffcc 	andi	r4,r21,65535
10006984:	00030800 	call	10003080 <__mulsi3>
10006988:	a808d43a 	srli	r4,r21,16
1000698c:	900b883a 	mov	r5,r18
10006990:	b0ad883a 	add	r22,r22,r2
10006994:	00030800 	call	10003080 <__mulsi3>
10006998:	a1000017 	ldw	r4,0(r20)
1000699c:	b00cd43a 	srli	r6,r22,16
100069a0:	b0ffffcc 	andi	r3,r22,65535
100069a4:	217fffcc 	andi	r5,r4,65535
100069a8:	2c21883a 	add	r16,r5,r16
100069ac:	80c7c83a 	sub	r3,r16,r3
100069b0:	2008d43a 	srli	r4,r4,16
100069b4:	3085883a 	add	r2,r6,r2
100069b8:	1821d43a 	srai	r16,r3,16
100069bc:	117fffcc 	andi	r5,r2,65535
100069c0:	2149c83a 	sub	r4,r4,r5
100069c4:	2421883a 	add	r16,r4,r16
100069c8:	8008943a 	slli	r4,r16,16
100069cc:	18ffffcc 	andi	r3,r3,65535
100069d0:	102cd43a 	srli	r22,r2,16
100069d4:	20c8b03a 	or	r4,r4,r3
100069d8:	a1000015 	stw	r4,0(r20)
100069dc:	8021d43a 	srai	r16,r16,16
100069e0:	a5000104 	addi	r20,r20,4
100069e4:	e47fe32e 	bgeu	fp,r17,10006974 <__alt_data_end+0xf8006974>
100069e8:	d8c00317 	ldw	r3,12(sp)
100069ec:	18800017 	ldw	r2,0(r3)
100069f0:	10000c1e 	bne	r2,zero,10006a24 <quorem+0x13c>
100069f4:	18bfff04 	addi	r2,r3,-4
100069f8:	9880082e 	bgeu	r19,r2,10006a1c <quorem+0x134>
100069fc:	18ffff17 	ldw	r3,-4(r3)
10006a00:	18000326 	beq	r3,zero,10006a10 <quorem+0x128>
10006a04:	00000506 	br	10006a1c <quorem+0x134>
10006a08:	10c00017 	ldw	r3,0(r2)
10006a0c:	1800031e 	bne	r3,zero,10006a1c <quorem+0x134>
10006a10:	10bfff04 	addi	r2,r2,-4
10006a14:	bdffffc4 	addi	r23,r23,-1
10006a18:	98bffb36 	bltu	r19,r2,10006a08 <__alt_data_end+0xf8006a08>
10006a1c:	d8c00017 	ldw	r3,0(sp)
10006a20:	1dc00415 	stw	r23,16(r3)
10006a24:	d9000017 	ldw	r4,0(sp)
10006a28:	d9400217 	ldw	r5,8(sp)
10006a2c:	000a9900 	call	1000a990 <__mcmp>
10006a30:	10002816 	blt	r2,zero,10006ad4 <quorem+0x1ec>
10006a34:	dc400117 	ldw	r17,4(sp)
10006a38:	94800044 	addi	r18,r18,1
10006a3c:	980d883a 	mov	r6,r19
10006a40:	0007883a 	mov	r3,zero
10006a44:	31000017 	ldw	r4,0(r6)
10006a48:	89400017 	ldw	r5,0(r17)
10006a4c:	31800104 	addi	r6,r6,4
10006a50:	20bfffcc 	andi	r2,r4,65535
10006a54:	10c7883a 	add	r3,r2,r3
10006a58:	28bfffcc 	andi	r2,r5,65535
10006a5c:	1885c83a 	sub	r2,r3,r2
10006a60:	280ad43a 	srli	r5,r5,16
10006a64:	2008d43a 	srli	r4,r4,16
10006a68:	1007d43a 	srai	r3,r2,16
10006a6c:	10bfffcc 	andi	r2,r2,65535
10006a70:	2149c83a 	sub	r4,r4,r5
10006a74:	20c9883a 	add	r4,r4,r3
10006a78:	200a943a 	slli	r5,r4,16
10006a7c:	8c400104 	addi	r17,r17,4
10006a80:	2007d43a 	srai	r3,r4,16
10006a84:	2884b03a 	or	r2,r5,r2
10006a88:	30bfff15 	stw	r2,-4(r6)
10006a8c:	e47fed2e 	bgeu	fp,r17,10006a44 <__alt_data_end+0xf8006a44>
10006a90:	bdc5883a 	add	r2,r23,r23
10006a94:	1085883a 	add	r2,r2,r2
10006a98:	9887883a 	add	r3,r19,r2
10006a9c:	18800017 	ldw	r2,0(r3)
10006aa0:	10000c1e 	bne	r2,zero,10006ad4 <quorem+0x1ec>
10006aa4:	18bfff04 	addi	r2,r3,-4
10006aa8:	9880082e 	bgeu	r19,r2,10006acc <quorem+0x1e4>
10006aac:	18ffff17 	ldw	r3,-4(r3)
10006ab0:	18000326 	beq	r3,zero,10006ac0 <quorem+0x1d8>
10006ab4:	00000506 	br	10006acc <quorem+0x1e4>
10006ab8:	10c00017 	ldw	r3,0(r2)
10006abc:	1800031e 	bne	r3,zero,10006acc <quorem+0x1e4>
10006ac0:	10bfff04 	addi	r2,r2,-4
10006ac4:	bdffffc4 	addi	r23,r23,-1
10006ac8:	98bffb36 	bltu	r19,r2,10006ab8 <__alt_data_end+0xf8006ab8>
10006acc:	d8c00017 	ldw	r3,0(sp)
10006ad0:	1dc00415 	stw	r23,16(r3)
10006ad4:	9005883a 	mov	r2,r18
10006ad8:	dfc00d17 	ldw	ra,52(sp)
10006adc:	df000c17 	ldw	fp,48(sp)
10006ae0:	ddc00b17 	ldw	r23,44(sp)
10006ae4:	dd800a17 	ldw	r22,40(sp)
10006ae8:	dd400917 	ldw	r21,36(sp)
10006aec:	dd000817 	ldw	r20,32(sp)
10006af0:	dcc00717 	ldw	r19,28(sp)
10006af4:	dc800617 	ldw	r18,24(sp)
10006af8:	dc400517 	ldw	r17,20(sp)
10006afc:	dc000417 	ldw	r16,16(sp)
10006b00:	dec00e04 	addi	sp,sp,56
10006b04:	f800283a 	ret
10006b08:	0005883a 	mov	r2,zero
10006b0c:	003ff206 	br	10006ad8 <__alt_data_end+0xf8006ad8>

10006b10 <_dtoa_r>:
10006b10:	20801017 	ldw	r2,64(r4)
10006b14:	deffde04 	addi	sp,sp,-136
10006b18:	dd401d15 	stw	r21,116(sp)
10006b1c:	dcc01b15 	stw	r19,108(sp)
10006b20:	dc801a15 	stw	r18,104(sp)
10006b24:	dc401915 	stw	r17,100(sp)
10006b28:	dc001815 	stw	r16,96(sp)
10006b2c:	dfc02115 	stw	ra,132(sp)
10006b30:	df002015 	stw	fp,128(sp)
10006b34:	ddc01f15 	stw	r23,124(sp)
10006b38:	dd801e15 	stw	r22,120(sp)
10006b3c:	dd001c15 	stw	r20,112(sp)
10006b40:	d9c00315 	stw	r7,12(sp)
10006b44:	2021883a 	mov	r16,r4
10006b48:	302b883a 	mov	r21,r6
10006b4c:	2825883a 	mov	r18,r5
10006b50:	dc402417 	ldw	r17,144(sp)
10006b54:	3027883a 	mov	r19,r6
10006b58:	10000826 	beq	r2,zero,10006b7c <_dtoa_r+0x6c>
10006b5c:	21801117 	ldw	r6,68(r4)
10006b60:	00c00044 	movi	r3,1
10006b64:	100b883a 	mov	r5,r2
10006b68:	1986983a 	sll	r3,r3,r6
10006b6c:	11800115 	stw	r6,4(r2)
10006b70:	10c00215 	stw	r3,8(r2)
10006b74:	000a0bc0 	call	1000a0bc <_Bfree>
10006b78:	80001015 	stw	zero,64(r16)
10006b7c:	a8002d16 	blt	r21,zero,10006c34 <_dtoa_r+0x124>
10006b80:	88000015 	stw	zero,0(r17)
10006b84:	a8dffc2c 	andhi	r3,r21,32752
10006b88:	009ffc34 	movhi	r2,32752
10006b8c:	18801b26 	beq	r3,r2,10006bfc <_dtoa_r+0xec>
10006b90:	9009883a 	mov	r4,r18
10006b94:	980b883a 	mov	r5,r19
10006b98:	000d883a 	mov	r6,zero
10006b9c:	000f883a 	mov	r7,zero
10006ba0:	000ed280 	call	1000ed28 <__eqdf2>
10006ba4:	10002a1e 	bne	r2,zero,10006c50 <_dtoa_r+0x140>
10006ba8:	d8c02317 	ldw	r3,140(sp)
10006bac:	d9002517 	ldw	r4,148(sp)
10006bb0:	00800044 	movi	r2,1
10006bb4:	18800015 	stw	r2,0(r3)
10006bb8:	2001a226 	beq	r4,zero,10007244 <_dtoa_r+0x734>
10006bbc:	00840074 	movhi	r2,4097
10006bc0:	10937c44 	addi	r2,r2,19953
10006bc4:	20800015 	stw	r2,0(r4)
10006bc8:	10bfffc4 	addi	r2,r2,-1
10006bcc:	dfc02117 	ldw	ra,132(sp)
10006bd0:	df002017 	ldw	fp,128(sp)
10006bd4:	ddc01f17 	ldw	r23,124(sp)
10006bd8:	dd801e17 	ldw	r22,120(sp)
10006bdc:	dd401d17 	ldw	r21,116(sp)
10006be0:	dd001c17 	ldw	r20,112(sp)
10006be4:	dcc01b17 	ldw	r19,108(sp)
10006be8:	dc801a17 	ldw	r18,104(sp)
10006bec:	dc401917 	ldw	r17,100(sp)
10006bf0:	dc001817 	ldw	r16,96(sp)
10006bf4:	dec02204 	addi	sp,sp,136
10006bf8:	f800283a 	ret
10006bfc:	d8c02317 	ldw	r3,140(sp)
10006c00:	0089c3c4 	movi	r2,9999
10006c04:	18800015 	stw	r2,0(r3)
10006c08:	90017c26 	beq	r18,zero,100071fc <_dtoa_r+0x6ec>
10006c0c:	00840074 	movhi	r2,4097
10006c10:	10938804 	addi	r2,r2,20000
10006c14:	d9002517 	ldw	r4,148(sp)
10006c18:	203fec26 	beq	r4,zero,10006bcc <__alt_data_end+0xf8006bcc>
10006c1c:	10c000c7 	ldb	r3,3(r2)
10006c20:	18017d1e 	bne	r3,zero,10007218 <_dtoa_r+0x708>
10006c24:	10c000c4 	addi	r3,r2,3
10006c28:	d9802517 	ldw	r6,148(sp)
10006c2c:	30c00015 	stw	r3,0(r6)
10006c30:	003fe606 	br	10006bcc <__alt_data_end+0xf8006bcc>
10006c34:	04e00034 	movhi	r19,32768
10006c38:	9cffffc4 	addi	r19,r19,-1
10006c3c:	00800044 	movi	r2,1
10006c40:	ace6703a 	and	r19,r21,r19
10006c44:	88800015 	stw	r2,0(r17)
10006c48:	982b883a 	mov	r21,r19
10006c4c:	003fcd06 	br	10006b84 <__alt_data_end+0xf8006b84>
10006c50:	d8800204 	addi	r2,sp,8
10006c54:	a822d53a 	srli	r17,r21,20
10006c58:	d8800015 	stw	r2,0(sp)
10006c5c:	8009883a 	mov	r4,r16
10006c60:	900b883a 	mov	r5,r18
10006c64:	980d883a 	mov	r6,r19
10006c68:	d9c00104 	addi	r7,sp,4
10006c6c:	000ad040 	call	1000ad04 <__d2b>
10006c70:	1039883a 	mov	fp,r2
10006c74:	88016a1e 	bne	r17,zero,10007220 <_dtoa_r+0x710>
10006c78:	dd000217 	ldw	r20,8(sp)
10006c7c:	dc400117 	ldw	r17,4(sp)
10006c80:	00befbc4 	movi	r2,-1041
10006c84:	a463883a 	add	r17,r20,r17
10006c88:	8882ea16 	blt	r17,r2,10007834 <_dtoa_r+0xd24>
10006c8c:	00bf0384 	movi	r2,-1010
10006c90:	1445c83a 	sub	r2,r2,r17
10006c94:	89010484 	addi	r4,r17,1042
10006c98:	a8aa983a 	sll	r21,r21,r2
10006c9c:	9108d83a 	srl	r4,r18,r4
10006ca0:	a908b03a 	or	r4,r21,r4
10006ca4:	00102000 	call	10010200 <__floatunsidf>
10006ca8:	017f8434 	movhi	r5,65040
10006cac:	01800044 	movi	r6,1
10006cb0:	1009883a 	mov	r4,r2
10006cb4:	194b883a 	add	r5,r3,r5
10006cb8:	8c7fffc4 	addi	r17,r17,-1
10006cbc:	d9800f15 	stw	r6,60(sp)
10006cc0:	000d883a 	mov	r6,zero
10006cc4:	01cffe34 	movhi	r7,16376
10006cc8:	000f7d80 	call	1000f7d8 <__subdf3>
10006ccc:	0198dbf4 	movhi	r6,25455
10006cd0:	01cff4f4 	movhi	r7,16339
10006cd4:	1009883a 	mov	r4,r2
10006cd8:	180b883a 	mov	r5,r3
10006cdc:	3190d844 	addi	r6,r6,17249
10006ce0:	39e1e9c4 	addi	r7,r7,-30809
10006ce4:	000ef6c0 	call	1000ef6c <__muldf3>
10006ce8:	01a2d874 	movhi	r6,35681
10006cec:	01cff1f4 	movhi	r7,16327
10006cf0:	180b883a 	mov	r5,r3
10006cf4:	31b22cc4 	addi	r6,r6,-14157
10006cf8:	39e28a04 	addi	r7,r7,-30168
10006cfc:	1009883a 	mov	r4,r2
10006d00:	00037ec0 	call	100037ec <__adddf3>
10006d04:	8809883a 	mov	r4,r17
10006d08:	102d883a 	mov	r22,r2
10006d0c:	182b883a 	mov	r21,r3
10006d10:	00101300 	call	10010130 <__floatsidf>
10006d14:	019427f4 	movhi	r6,20639
10006d18:	01cff4f4 	movhi	r7,16339
10006d1c:	1009883a 	mov	r4,r2
10006d20:	180b883a 	mov	r5,r3
10006d24:	319e7ec4 	addi	r6,r6,31227
10006d28:	39d104c4 	addi	r7,r7,17427
10006d2c:	000ef6c0 	call	1000ef6c <__muldf3>
10006d30:	b009883a 	mov	r4,r22
10006d34:	a80b883a 	mov	r5,r21
10006d38:	100d883a 	mov	r6,r2
10006d3c:	180f883a 	mov	r7,r3
10006d40:	00037ec0 	call	100037ec <__adddf3>
10006d44:	1009883a 	mov	r4,r2
10006d48:	180b883a 	mov	r5,r3
10006d4c:	102d883a 	mov	r22,r2
10006d50:	182b883a 	mov	r21,r3
10006d54:	00100a80 	call	100100a8 <__fixdfsi>
10006d58:	b009883a 	mov	r4,r22
10006d5c:	a80b883a 	mov	r5,r21
10006d60:	000d883a 	mov	r6,zero
10006d64:	000f883a 	mov	r7,zero
10006d68:	d8800515 	stw	r2,20(sp)
10006d6c:	000ee8c0 	call	1000ee8c <__ledf2>
10006d70:	10023116 	blt	r2,zero,10007638 <_dtoa_r+0xb28>
10006d74:	d8c00517 	ldw	r3,20(sp)
10006d78:	00800584 	movi	r2,22
10006d7c:	10c21f36 	bltu	r2,r3,100075fc <_dtoa_r+0xaec>
10006d80:	180490fa 	slli	r2,r3,3
10006d84:	00c40074 	movhi	r3,4097
10006d88:	18d3a404 	addi	r3,r3,20112
10006d8c:	1885883a 	add	r2,r3,r2
10006d90:	11000017 	ldw	r4,0(r2)
10006d94:	11400117 	ldw	r5,4(r2)
10006d98:	900d883a 	mov	r6,r18
10006d9c:	980f883a 	mov	r7,r19
10006da0:	000edac0 	call	1000edac <__gedf2>
10006da4:	0082a70e 	bge	zero,r2,10007844 <_dtoa_r+0xd34>
10006da8:	d9000517 	ldw	r4,20(sp)
10006dac:	d8000c15 	stw	zero,48(sp)
10006db0:	213fffc4 	addi	r4,r4,-1
10006db4:	d9000515 	stw	r4,20(sp)
10006db8:	a463c83a 	sub	r17,r20,r17
10006dbc:	8dbfffc4 	addi	r22,r17,-1
10006dc0:	b0021916 	blt	r22,zero,10007628 <_dtoa_r+0xb18>
10006dc4:	d8000815 	stw	zero,32(sp)
10006dc8:	d8800517 	ldw	r2,20(sp)
10006dcc:	10020e16 	blt	r2,zero,10007608 <_dtoa_r+0xaf8>
10006dd0:	b0ad883a 	add	r22,r22,r2
10006dd4:	d8800a15 	stw	r2,40(sp)
10006dd8:	d8000915 	stw	zero,36(sp)
10006ddc:	d8c00317 	ldw	r3,12(sp)
10006de0:	00800244 	movi	r2,9
10006de4:	10c11a36 	bltu	r2,r3,10007250 <_dtoa_r+0x740>
10006de8:	00800144 	movi	r2,5
10006dec:	10c4fc0e 	bge	r2,r3,100081e0 <_dtoa_r+0x16d0>
10006df0:	18ffff04 	addi	r3,r3,-4
10006df4:	d8c00315 	stw	r3,12(sp)
10006df8:	0029883a 	mov	r20,zero
10006dfc:	d9800317 	ldw	r6,12(sp)
10006e00:	008000c4 	movi	r2,3
10006e04:	3083bd26 	beq	r6,r2,10007cfc <_dtoa_r+0x11ec>
10006e08:	1183670e 	bge	r2,r6,10007ba8 <_dtoa_r+0x1098>
10006e0c:	d8c00317 	ldw	r3,12(sp)
10006e10:	00800104 	movi	r2,4
10006e14:	1882e726 	beq	r3,r2,100079b4 <_dtoa_r+0xea4>
10006e18:	00800144 	movi	r2,5
10006e1c:	1884f21e 	bne	r3,r2,100081e8 <_dtoa_r+0x16d8>
10006e20:	00800044 	movi	r2,1
10006e24:	d8800b15 	stw	r2,44(sp)
10006e28:	d8c02217 	ldw	r3,136(sp)
10006e2c:	d9000517 	ldw	r4,20(sp)
10006e30:	1907883a 	add	r3,r3,r4
10006e34:	19800044 	addi	r6,r3,1
10006e38:	d8c00d15 	stw	r3,52(sp)
10006e3c:	d9800615 	stw	r6,24(sp)
10006e40:	0183c30e 	bge	zero,r6,10007d50 <_dtoa_r+0x1240>
10006e44:	d9800617 	ldw	r6,24(sp)
10006e48:	3023883a 	mov	r17,r6
10006e4c:	80001115 	stw	zero,68(r16)
10006e50:	008005c4 	movi	r2,23
10006e54:	1184f62e 	bgeu	r2,r6,10008230 <_dtoa_r+0x1720>
10006e58:	00c00044 	movi	r3,1
10006e5c:	00800104 	movi	r2,4
10006e60:	1085883a 	add	r2,r2,r2
10006e64:	11000504 	addi	r4,r2,20
10006e68:	180b883a 	mov	r5,r3
10006e6c:	18c00044 	addi	r3,r3,1
10006e70:	313ffb2e 	bgeu	r6,r4,10006e60 <__alt_data_end+0xf8006e60>
10006e74:	81401115 	stw	r5,68(r16)
10006e78:	8009883a 	mov	r4,r16
10006e7c:	000a0140 	call	1000a014 <_Balloc>
10006e80:	d8800715 	stw	r2,28(sp)
10006e84:	80801015 	stw	r2,64(r16)
10006e88:	00800384 	movi	r2,14
10006e8c:	1440fd36 	bltu	r2,r17,10007284 <_dtoa_r+0x774>
10006e90:	a000fc26 	beq	r20,zero,10007284 <_dtoa_r+0x774>
10006e94:	d8800517 	ldw	r2,20(sp)
10006e98:	0083b90e 	bge	zero,r2,10007d80 <_dtoa_r+0x1270>
10006e9c:	d8c00517 	ldw	r3,20(sp)
10006ea0:	108003cc 	andi	r2,r2,15
10006ea4:	100490fa 	slli	r2,r2,3
10006ea8:	182fd13a 	srai	r23,r3,4
10006eac:	00c40074 	movhi	r3,4097
10006eb0:	18d3a404 	addi	r3,r3,20112
10006eb4:	1885883a 	add	r2,r3,r2
10006eb8:	b8c0040c 	andi	r3,r23,16
10006ebc:	12c00017 	ldw	r11,0(r2)
10006ec0:	12800117 	ldw	r10,4(r2)
10006ec4:	18039726 	beq	r3,zero,10007d24 <_dtoa_r+0x1214>
10006ec8:	00840074 	movhi	r2,4097
10006ecc:	10939a04 	addi	r2,r2,20072
10006ed0:	11800817 	ldw	r6,32(r2)
10006ed4:	11c00917 	ldw	r7,36(r2)
10006ed8:	9009883a 	mov	r4,r18
10006edc:	980b883a 	mov	r5,r19
10006ee0:	da801615 	stw	r10,88(sp)
10006ee4:	dac01515 	stw	r11,84(sp)
10006ee8:	000e3a80 	call	1000e3a8 <__divdf3>
10006eec:	da801617 	ldw	r10,88(sp)
10006ef0:	dac01517 	ldw	r11,84(sp)
10006ef4:	bdc003cc 	andi	r23,r23,15
10006ef8:	044000c4 	movi	r17,3
10006efc:	d8800e15 	stw	r2,56(sp)
10006f00:	182b883a 	mov	r21,r3
10006f04:	b8001126 	beq	r23,zero,10006f4c <_dtoa_r+0x43c>
10006f08:	05040074 	movhi	r20,4097
10006f0c:	a5139a04 	addi	r20,r20,20072
10006f10:	5805883a 	mov	r2,r11
10006f14:	5007883a 	mov	r3,r10
10006f18:	b980004c 	andi	r6,r23,1
10006f1c:	1009883a 	mov	r4,r2
10006f20:	b82fd07a 	srai	r23,r23,1
10006f24:	180b883a 	mov	r5,r3
10006f28:	30000426 	beq	r6,zero,10006f3c <_dtoa_r+0x42c>
10006f2c:	a1800017 	ldw	r6,0(r20)
10006f30:	a1c00117 	ldw	r7,4(r20)
10006f34:	8c400044 	addi	r17,r17,1
10006f38:	000ef6c0 	call	1000ef6c <__muldf3>
10006f3c:	a5000204 	addi	r20,r20,8
10006f40:	b83ff51e 	bne	r23,zero,10006f18 <__alt_data_end+0xf8006f18>
10006f44:	1017883a 	mov	r11,r2
10006f48:	1815883a 	mov	r10,r3
10006f4c:	d9000e17 	ldw	r4,56(sp)
10006f50:	a80b883a 	mov	r5,r21
10006f54:	580d883a 	mov	r6,r11
10006f58:	500f883a 	mov	r7,r10
10006f5c:	000e3a80 	call	1000e3a8 <__divdf3>
10006f60:	1029883a 	mov	r20,r2
10006f64:	182b883a 	mov	r21,r3
10006f68:	d9800c17 	ldw	r6,48(sp)
10006f6c:	30000626 	beq	r6,zero,10006f88 <_dtoa_r+0x478>
10006f70:	a009883a 	mov	r4,r20
10006f74:	a80b883a 	mov	r5,r21
10006f78:	000d883a 	mov	r6,zero
10006f7c:	01cffc34 	movhi	r7,16368
10006f80:	000ee8c0 	call	1000ee8c <__ledf2>
10006f84:	10043216 	blt	r2,zero,10008050 <_dtoa_r+0x1540>
10006f88:	8809883a 	mov	r4,r17
10006f8c:	00101300 	call	10010130 <__floatsidf>
10006f90:	1009883a 	mov	r4,r2
10006f94:	180b883a 	mov	r5,r3
10006f98:	a00d883a 	mov	r6,r20
10006f9c:	a80f883a 	mov	r7,r21
10006fa0:	000ef6c0 	call	1000ef6c <__muldf3>
10006fa4:	000d883a 	mov	r6,zero
10006fa8:	1009883a 	mov	r4,r2
10006fac:	180b883a 	mov	r5,r3
10006fb0:	01d00734 	movhi	r7,16412
10006fb4:	00037ec0 	call	100037ec <__adddf3>
10006fb8:	1023883a 	mov	r17,r2
10006fbc:	d9800617 	ldw	r6,24(sp)
10006fc0:	00bf3034 	movhi	r2,64704
10006fc4:	1885883a 	add	r2,r3,r2
10006fc8:	d8800e15 	stw	r2,56(sp)
10006fcc:	30032e26 	beq	r6,zero,10007c88 <_dtoa_r+0x1178>
10006fd0:	d8c00517 	ldw	r3,20(sp)
10006fd4:	da800617 	ldw	r10,24(sp)
10006fd8:	d8c01215 	stw	r3,72(sp)
10006fdc:	d9000b17 	ldw	r4,44(sp)
10006fe0:	2003b026 	beq	r4,zero,10007ea4 <_dtoa_r+0x1394>
10006fe4:	50bfffc4 	addi	r2,r10,-1
10006fe8:	100490fa 	slli	r2,r2,3
10006fec:	00c40074 	movhi	r3,4097
10006ff0:	18d3a404 	addi	r3,r3,20112
10006ff4:	1885883a 	add	r2,r3,r2
10006ff8:	11800017 	ldw	r6,0(r2)
10006ffc:	11c00117 	ldw	r7,4(r2)
10007000:	d8800717 	ldw	r2,28(sp)
10007004:	0009883a 	mov	r4,zero
10007008:	014ff834 	movhi	r5,16352
1000700c:	da801615 	stw	r10,88(sp)
10007010:	15c00044 	addi	r23,r2,1
10007014:	000e3a80 	call	1000e3a8 <__divdf3>
10007018:	d9c00e17 	ldw	r7,56(sp)
1000701c:	880d883a 	mov	r6,r17
10007020:	1009883a 	mov	r4,r2
10007024:	180b883a 	mov	r5,r3
10007028:	000f7d80 	call	1000f7d8 <__subdf3>
1000702c:	a80b883a 	mov	r5,r21
10007030:	a009883a 	mov	r4,r20
10007034:	d8c01015 	stw	r3,64(sp)
10007038:	d8800e15 	stw	r2,56(sp)
1000703c:	00100a80 	call	100100a8 <__fixdfsi>
10007040:	1009883a 	mov	r4,r2
10007044:	d8801715 	stw	r2,92(sp)
10007048:	00101300 	call	10010130 <__floatsidf>
1000704c:	a009883a 	mov	r4,r20
10007050:	a80b883a 	mov	r5,r21
10007054:	100d883a 	mov	r6,r2
10007058:	180f883a 	mov	r7,r3
1000705c:	000f7d80 	call	1000f7d8 <__subdf3>
10007060:	da001717 	ldw	r8,92(sp)
10007064:	1829883a 	mov	r20,r3
10007068:	d8c00717 	ldw	r3,28(sp)
1000706c:	d9000e17 	ldw	r4,56(sp)
10007070:	d9401017 	ldw	r5,64(sp)
10007074:	42000c04 	addi	r8,r8,48
10007078:	1023883a 	mov	r17,r2
1000707c:	1a000005 	stb	r8,0(r3)
10007080:	880d883a 	mov	r6,r17
10007084:	a00f883a 	mov	r7,r20
10007088:	402b883a 	mov	r21,r8
1000708c:	000edac0 	call	1000edac <__gedf2>
10007090:	00844516 	blt	zero,r2,100081a8 <_dtoa_r+0x1698>
10007094:	0009883a 	mov	r4,zero
10007098:	014ffc34 	movhi	r5,16368
1000709c:	880d883a 	mov	r6,r17
100070a0:	a00f883a 	mov	r7,r20
100070a4:	000f7d80 	call	1000f7d8 <__subdf3>
100070a8:	d9000e17 	ldw	r4,56(sp)
100070ac:	d9401017 	ldw	r5,64(sp)
100070b0:	100d883a 	mov	r6,r2
100070b4:	180f883a 	mov	r7,r3
100070b8:	000edac0 	call	1000edac <__gedf2>
100070bc:	da801617 	ldw	r10,88(sp)
100070c0:	00843616 	blt	zero,r2,1000819c <_dtoa_r+0x168c>
100070c4:	00800044 	movi	r2,1
100070c8:	12806e0e 	bge	r2,r10,10007284 <_dtoa_r+0x774>
100070cc:	d9000717 	ldw	r4,28(sp)
100070d0:	dd801315 	stw	r22,76(sp)
100070d4:	dc001115 	stw	r16,68(sp)
100070d8:	2295883a 	add	r10,r4,r10
100070dc:	dcc01415 	stw	r19,80(sp)
100070e0:	502d883a 	mov	r22,r10
100070e4:	dcc01017 	ldw	r19,64(sp)
100070e8:	b821883a 	mov	r16,r23
100070ec:	dc801015 	stw	r18,64(sp)
100070f0:	dc800e17 	ldw	r18,56(sp)
100070f4:	00000906 	br	1000711c <_dtoa_r+0x60c>
100070f8:	000f7d80 	call	1000f7d8 <__subdf3>
100070fc:	1009883a 	mov	r4,r2
10007100:	180b883a 	mov	r5,r3
10007104:	900d883a 	mov	r6,r18
10007108:	980f883a 	mov	r7,r19
1000710c:	000ee8c0 	call	1000ee8c <__ledf2>
10007110:	10040e16 	blt	r2,zero,1000814c <_dtoa_r+0x163c>
10007114:	b821883a 	mov	r16,r23
10007118:	bd841026 	beq	r23,r22,1000815c <_dtoa_r+0x164c>
1000711c:	9009883a 	mov	r4,r18
10007120:	980b883a 	mov	r5,r19
10007124:	000d883a 	mov	r6,zero
10007128:	01d00934 	movhi	r7,16420
1000712c:	000ef6c0 	call	1000ef6c <__muldf3>
10007130:	000d883a 	mov	r6,zero
10007134:	01d00934 	movhi	r7,16420
10007138:	8809883a 	mov	r4,r17
1000713c:	a00b883a 	mov	r5,r20
10007140:	1025883a 	mov	r18,r2
10007144:	1827883a 	mov	r19,r3
10007148:	000ef6c0 	call	1000ef6c <__muldf3>
1000714c:	180b883a 	mov	r5,r3
10007150:	1009883a 	mov	r4,r2
10007154:	1823883a 	mov	r17,r3
10007158:	1029883a 	mov	r20,r2
1000715c:	00100a80 	call	100100a8 <__fixdfsi>
10007160:	1009883a 	mov	r4,r2
10007164:	102b883a 	mov	r21,r2
10007168:	00101300 	call	10010130 <__floatsidf>
1000716c:	a009883a 	mov	r4,r20
10007170:	880b883a 	mov	r5,r17
10007174:	100d883a 	mov	r6,r2
10007178:	180f883a 	mov	r7,r3
1000717c:	000f7d80 	call	1000f7d8 <__subdf3>
10007180:	ad400c04 	addi	r21,r21,48
10007184:	1009883a 	mov	r4,r2
10007188:	180b883a 	mov	r5,r3
1000718c:	900d883a 	mov	r6,r18
10007190:	980f883a 	mov	r7,r19
10007194:	85400005 	stb	r21,0(r16)
10007198:	1023883a 	mov	r17,r2
1000719c:	1829883a 	mov	r20,r3
100071a0:	000ee8c0 	call	1000ee8c <__ledf2>
100071a4:	bdc00044 	addi	r23,r23,1
100071a8:	0009883a 	mov	r4,zero
100071ac:	014ffc34 	movhi	r5,16368
100071b0:	880d883a 	mov	r6,r17
100071b4:	a00f883a 	mov	r7,r20
100071b8:	103fcf0e 	bge	r2,zero,100070f8 <__alt_data_end+0xf80070f8>
100071bc:	d9801217 	ldw	r6,72(sp)
100071c0:	dc001117 	ldw	r16,68(sp)
100071c4:	d9800515 	stw	r6,20(sp)
100071c8:	8009883a 	mov	r4,r16
100071cc:	e00b883a 	mov	r5,fp
100071d0:	000a0bc0 	call	1000a0bc <_Bfree>
100071d4:	d8c00517 	ldw	r3,20(sp)
100071d8:	d9002317 	ldw	r4,140(sp)
100071dc:	d9802517 	ldw	r6,148(sp)
100071e0:	b8000005 	stb	zero,0(r23)
100071e4:	18800044 	addi	r2,r3,1
100071e8:	20800015 	stw	r2,0(r4)
100071ec:	30027226 	beq	r6,zero,10007bb8 <_dtoa_r+0x10a8>
100071f0:	35c00015 	stw	r23,0(r6)
100071f4:	d8800717 	ldw	r2,28(sp)
100071f8:	003e7406 	br	10006bcc <__alt_data_end+0xf8006bcc>
100071fc:	00800434 	movhi	r2,16
10007200:	10bfffc4 	addi	r2,r2,-1
10007204:	a8aa703a 	and	r21,r21,r2
10007208:	a83e801e 	bne	r21,zero,10006c0c <__alt_data_end+0xf8006c0c>
1000720c:	00840074 	movhi	r2,4097
10007210:	10938504 	addi	r2,r2,19988
10007214:	003e7f06 	br	10006c14 <__alt_data_end+0xf8006c14>
10007218:	10c00204 	addi	r3,r2,8
1000721c:	003e8206 	br	10006c28 <__alt_data_end+0xf8006c28>
10007220:	01400434 	movhi	r5,16
10007224:	297fffc4 	addi	r5,r5,-1
10007228:	994a703a 	and	r5,r19,r5
1000722c:	9009883a 	mov	r4,r18
10007230:	8c7f0044 	addi	r17,r17,-1023
10007234:	294ffc34 	orhi	r5,r5,16368
10007238:	dd000217 	ldw	r20,8(sp)
1000723c:	d8000f15 	stw	zero,60(sp)
10007240:	003e9f06 	br	10006cc0 <__alt_data_end+0xf8006cc0>
10007244:	00840074 	movhi	r2,4097
10007248:	10937c04 	addi	r2,r2,19952
1000724c:	003e5f06 	br	10006bcc <__alt_data_end+0xf8006bcc>
10007250:	80001115 	stw	zero,68(r16)
10007254:	8009883a 	mov	r4,r16
10007258:	000b883a 	mov	r5,zero
1000725c:	000a0140 	call	1000a014 <_Balloc>
10007260:	01bfffc4 	movi	r6,-1
10007264:	d8800715 	stw	r2,28(sp)
10007268:	80801015 	stw	r2,64(r16)
1000726c:	00800044 	movi	r2,1
10007270:	d9800615 	stw	r6,24(sp)
10007274:	d8800b15 	stw	r2,44(sp)
10007278:	d8002215 	stw	zero,136(sp)
1000727c:	d9800d15 	stw	r6,52(sp)
10007280:	d8000315 	stw	zero,12(sp)
10007284:	d8800117 	ldw	r2,4(sp)
10007288:	10008e16 	blt	r2,zero,100074c4 <_dtoa_r+0x9b4>
1000728c:	d9000517 	ldw	r4,20(sp)
10007290:	00c00384 	movi	r3,14
10007294:	19008b16 	blt	r3,r4,100074c4 <_dtoa_r+0x9b4>
10007298:	200490fa 	slli	r2,r4,3
1000729c:	00c40074 	movhi	r3,4097
100072a0:	d9802217 	ldw	r6,136(sp)
100072a4:	18d3a404 	addi	r3,r3,20112
100072a8:	1885883a 	add	r2,r3,r2
100072ac:	14400017 	ldw	r17,0(r2)
100072b0:	15000117 	ldw	r20,4(r2)
100072b4:	3001c716 	blt	r6,zero,100079d4 <_dtoa_r+0xec4>
100072b8:	880d883a 	mov	r6,r17
100072bc:	a00f883a 	mov	r7,r20
100072c0:	9009883a 	mov	r4,r18
100072c4:	980b883a 	mov	r5,r19
100072c8:	000e3a80 	call	1000e3a8 <__divdf3>
100072cc:	180b883a 	mov	r5,r3
100072d0:	1009883a 	mov	r4,r2
100072d4:	00100a80 	call	100100a8 <__fixdfsi>
100072d8:	1009883a 	mov	r4,r2
100072dc:	102d883a 	mov	r22,r2
100072e0:	00101300 	call	10010130 <__floatsidf>
100072e4:	1009883a 	mov	r4,r2
100072e8:	180b883a 	mov	r5,r3
100072ec:	880d883a 	mov	r6,r17
100072f0:	a00f883a 	mov	r7,r20
100072f4:	000ef6c0 	call	1000ef6c <__muldf3>
100072f8:	9009883a 	mov	r4,r18
100072fc:	980b883a 	mov	r5,r19
10007300:	100d883a 	mov	r6,r2
10007304:	180f883a 	mov	r7,r3
10007308:	000f7d80 	call	1000f7d8 <__subdf3>
1000730c:	d9000717 	ldw	r4,28(sp)
10007310:	d9800617 	ldw	r6,24(sp)
10007314:	180b883a 	mov	r5,r3
10007318:	b0c00c04 	addi	r3,r22,48
1000731c:	20c00005 	stb	r3,0(r4)
10007320:	25c00044 	addi	r23,r4,1
10007324:	01000044 	movi	r4,1
10007328:	1011883a 	mov	r8,r2
1000732c:	2807883a 	mov	r3,r5
10007330:	31003d26 	beq	r6,r4,10007428 <_dtoa_r+0x918>
10007334:	000d883a 	mov	r6,zero
10007338:	01d00934 	movhi	r7,16420
1000733c:	1009883a 	mov	r4,r2
10007340:	000ef6c0 	call	1000ef6c <__muldf3>
10007344:	1009883a 	mov	r4,r2
10007348:	180b883a 	mov	r5,r3
1000734c:	000d883a 	mov	r6,zero
10007350:	000f883a 	mov	r7,zero
10007354:	1027883a 	mov	r19,r2
10007358:	182b883a 	mov	r21,r3
1000735c:	000ed280 	call	1000ed28 <__eqdf2>
10007360:	103f9926 	beq	r2,zero,100071c8 <__alt_data_end+0xf80071c8>
10007364:	d8c00617 	ldw	r3,24(sp)
10007368:	d9000717 	ldw	r4,28(sp)
1000736c:	b825883a 	mov	r18,r23
10007370:	18bfffc4 	addi	r2,r3,-1
10007374:	20ad883a 	add	r22,r4,r2
10007378:	dc000315 	stw	r16,12(sp)
1000737c:	00000a06 	br	100073a8 <_dtoa_r+0x898>
10007380:	000ef6c0 	call	1000ef6c <__muldf3>
10007384:	1009883a 	mov	r4,r2
10007388:	180b883a 	mov	r5,r3
1000738c:	000d883a 	mov	r6,zero
10007390:	000f883a 	mov	r7,zero
10007394:	1027883a 	mov	r19,r2
10007398:	182b883a 	mov	r21,r3
1000739c:	b825883a 	mov	r18,r23
100073a0:	000ed280 	call	1000ed28 <__eqdf2>
100073a4:	10022626 	beq	r2,zero,10007c40 <_dtoa_r+0x1130>
100073a8:	880d883a 	mov	r6,r17
100073ac:	a00f883a 	mov	r7,r20
100073b0:	9809883a 	mov	r4,r19
100073b4:	a80b883a 	mov	r5,r21
100073b8:	000e3a80 	call	1000e3a8 <__divdf3>
100073bc:	180b883a 	mov	r5,r3
100073c0:	1009883a 	mov	r4,r2
100073c4:	00100a80 	call	100100a8 <__fixdfsi>
100073c8:	1009883a 	mov	r4,r2
100073cc:	1021883a 	mov	r16,r2
100073d0:	00101300 	call	10010130 <__floatsidf>
100073d4:	1009883a 	mov	r4,r2
100073d8:	180b883a 	mov	r5,r3
100073dc:	880d883a 	mov	r6,r17
100073e0:	a00f883a 	mov	r7,r20
100073e4:	000ef6c0 	call	1000ef6c <__muldf3>
100073e8:	9809883a 	mov	r4,r19
100073ec:	a80b883a 	mov	r5,r21
100073f0:	100d883a 	mov	r6,r2
100073f4:	180f883a 	mov	r7,r3
100073f8:	000f7d80 	call	1000f7d8 <__subdf3>
100073fc:	82000c04 	addi	r8,r16,48
10007400:	92000005 	stb	r8,0(r18)
10007404:	1009883a 	mov	r4,r2
10007408:	180b883a 	mov	r5,r3
1000740c:	000d883a 	mov	r6,zero
10007410:	01d00934 	movhi	r7,16420
10007414:	1011883a 	mov	r8,r2
10007418:	bdc00044 	addi	r23,r23,1
1000741c:	95bfd81e 	bne	r18,r22,10007380 <__alt_data_end+0xf8007380>
10007420:	802d883a 	mov	r22,r16
10007424:	dc000317 	ldw	r16,12(sp)
10007428:	4009883a 	mov	r4,r8
1000742c:	180b883a 	mov	r5,r3
10007430:	400d883a 	mov	r6,r8
10007434:	180f883a 	mov	r7,r3
10007438:	00037ec0 	call	100037ec <__adddf3>
1000743c:	8809883a 	mov	r4,r17
10007440:	a00b883a 	mov	r5,r20
10007444:	100d883a 	mov	r6,r2
10007448:	180f883a 	mov	r7,r3
1000744c:	1027883a 	mov	r19,r2
10007450:	1825883a 	mov	r18,r3
10007454:	000ee8c0 	call	1000ee8c <__ledf2>
10007458:	10000816 	blt	r2,zero,1000747c <_dtoa_r+0x96c>
1000745c:	8809883a 	mov	r4,r17
10007460:	a00b883a 	mov	r5,r20
10007464:	980d883a 	mov	r6,r19
10007468:	900f883a 	mov	r7,r18
1000746c:	000ed280 	call	1000ed28 <__eqdf2>
10007470:	103f551e 	bne	r2,zero,100071c8 <__alt_data_end+0xf80071c8>
10007474:	b580004c 	andi	r22,r22,1
10007478:	b03f5326 	beq	r22,zero,100071c8 <__alt_data_end+0xf80071c8>
1000747c:	bd7fffc3 	ldbu	r21,-1(r23)
10007480:	b8bfffc4 	addi	r2,r23,-1
10007484:	1007883a 	mov	r3,r2
10007488:	01400e44 	movi	r5,57
1000748c:	d9800717 	ldw	r6,28(sp)
10007490:	00000506 	br	100074a8 <_dtoa_r+0x998>
10007494:	18ffffc4 	addi	r3,r3,-1
10007498:	30825e26 	beq	r6,r2,10007e14 <_dtoa_r+0x1304>
1000749c:	1d400003 	ldbu	r21,0(r3)
100074a0:	102f883a 	mov	r23,r2
100074a4:	10bfffc4 	addi	r2,r2,-1
100074a8:	a9003fcc 	andi	r4,r21,255
100074ac:	2100201c 	xori	r4,r4,128
100074b0:	213fe004 	addi	r4,r4,-128
100074b4:	217ff726 	beq	r4,r5,10007494 <__alt_data_end+0xf8007494>
100074b8:	aa000044 	addi	r8,r21,1
100074bc:	12000005 	stb	r8,0(r2)
100074c0:	003f4106 	br	100071c8 <__alt_data_end+0xf80071c8>
100074c4:	d8c00b17 	ldw	r3,44(sp)
100074c8:	18006726 	beq	r3,zero,10007668 <_dtoa_r+0xb58>
100074cc:	d9000317 	ldw	r4,12(sp)
100074d0:	00c00044 	movi	r3,1
100074d4:	19016a0e 	bge	r3,r4,10007a80 <_dtoa_r+0xf70>
100074d8:	d8800617 	ldw	r2,24(sp)
100074dc:	d8c00917 	ldw	r3,36(sp)
100074e0:	157fffc4 	addi	r21,r2,-1
100074e4:	1d420716 	blt	r3,r21,10007d04 <_dtoa_r+0x11f4>
100074e8:	1d6bc83a 	sub	r21,r3,r21
100074ec:	d8800617 	ldw	r2,24(sp)
100074f0:	1002c716 	blt	r2,zero,10008010 <_dtoa_r+0x1500>
100074f4:	dd000817 	ldw	r20,32(sp)
100074f8:	d8800617 	ldw	r2,24(sp)
100074fc:	d9800817 	ldw	r6,32(sp)
10007500:	8009883a 	mov	r4,r16
10007504:	01400044 	movi	r5,1
10007508:	308d883a 	add	r6,r6,r2
1000750c:	d9800815 	stw	r6,32(sp)
10007510:	b0ad883a 	add	r22,r22,r2
10007514:	000a43c0 	call	1000a43c <__i2b>
10007518:	1023883a 	mov	r17,r2
1000751c:	a0000826 	beq	r20,zero,10007540 <_dtoa_r+0xa30>
10007520:	0580070e 	bge	zero,r22,10007540 <_dtoa_r+0xa30>
10007524:	b005883a 	mov	r2,r22
10007528:	a5812016 	blt	r20,r22,100079ac <_dtoa_r+0xe9c>
1000752c:	d8c00817 	ldw	r3,32(sp)
10007530:	a0a9c83a 	sub	r20,r20,r2
10007534:	b0adc83a 	sub	r22,r22,r2
10007538:	1887c83a 	sub	r3,r3,r2
1000753c:	d8c00815 	stw	r3,32(sp)
10007540:	d9000917 	ldw	r4,36(sp)
10007544:	0100140e 	bge	zero,r4,10007598 <_dtoa_r+0xa88>
10007548:	d9800b17 	ldw	r6,44(sp)
1000754c:	3001e526 	beq	r6,zero,10007ce4 <_dtoa_r+0x11d4>
10007550:	05400e0e 	bge	zero,r21,1000758c <_dtoa_r+0xa7c>
10007554:	880b883a 	mov	r5,r17
10007558:	8009883a 	mov	r4,r16
1000755c:	a80d883a 	mov	r6,r21
10007560:	000a7080 	call	1000a708 <__pow5mult>
10007564:	e00d883a 	mov	r6,fp
10007568:	8009883a 	mov	r4,r16
1000756c:	100b883a 	mov	r5,r2
10007570:	1023883a 	mov	r17,r2
10007574:	000a4780 	call	1000a478 <__multiply>
10007578:	102f883a 	mov	r23,r2
1000757c:	e00b883a 	mov	r5,fp
10007580:	8009883a 	mov	r4,r16
10007584:	000a0bc0 	call	1000a0bc <_Bfree>
10007588:	b839883a 	mov	fp,r23
1000758c:	d8800917 	ldw	r2,36(sp)
10007590:	154dc83a 	sub	r6,r2,r21
10007594:	3001281e 	bne	r6,zero,10007a38 <_dtoa_r+0xf28>
10007598:	05c00044 	movi	r23,1
1000759c:	8009883a 	mov	r4,r16
100075a0:	b80b883a 	mov	r5,r23
100075a4:	000a43c0 	call	1000a43c <__i2b>
100075a8:	d8c00a17 	ldw	r3,40(sp)
100075ac:	102b883a 	mov	r21,r2
100075b0:	00c0310e 	bge	zero,r3,10007678 <_dtoa_r+0xb68>
100075b4:	8009883a 	mov	r4,r16
100075b8:	100b883a 	mov	r5,r2
100075bc:	180d883a 	mov	r6,r3
100075c0:	000a7080 	call	1000a708 <__pow5mult>
100075c4:	d9000317 	ldw	r4,12(sp)
100075c8:	102b883a 	mov	r21,r2
100075cc:	b9011f0e 	bge	r23,r4,10007a4c <_dtoa_r+0xf3c>
100075d0:	0027883a 	mov	r19,zero
100075d4:	a8800417 	ldw	r2,16(r21)
100075d8:	10800104 	addi	r2,r2,4
100075dc:	1085883a 	add	r2,r2,r2
100075e0:	1085883a 	add	r2,r2,r2
100075e4:	a885883a 	add	r2,r21,r2
100075e8:	11000017 	ldw	r4,0(r2)
100075ec:	000a3240 	call	1000a324 <__hi0bits>
100075f0:	00c00804 	movi	r3,32
100075f4:	1885c83a 	sub	r2,r3,r2
100075f8:	00002506 	br	10007690 <_dtoa_r+0xb80>
100075fc:	01800044 	movi	r6,1
10007600:	d9800c15 	stw	r6,48(sp)
10007604:	003dec06 	br	10006db8 <__alt_data_end+0xf8006db8>
10007608:	d8c00817 	ldw	r3,32(sp)
1000760c:	d9000517 	ldw	r4,20(sp)
10007610:	d8000a15 	stw	zero,40(sp)
10007614:	1907c83a 	sub	r3,r3,r4
10007618:	010dc83a 	sub	r6,zero,r4
1000761c:	d8c00815 	stw	r3,32(sp)
10007620:	d9800915 	stw	r6,36(sp)
10007624:	003ded06 	br	10006ddc <__alt_data_end+0xf8006ddc>
10007628:	05adc83a 	sub	r22,zero,r22
1000762c:	dd800815 	stw	r22,32(sp)
10007630:	002d883a 	mov	r22,zero
10007634:	003de406 	br	10006dc8 <__alt_data_end+0xf8006dc8>
10007638:	d9000517 	ldw	r4,20(sp)
1000763c:	00101300 	call	10010130 <__floatsidf>
10007640:	1009883a 	mov	r4,r2
10007644:	180b883a 	mov	r5,r3
10007648:	b00d883a 	mov	r6,r22
1000764c:	a80f883a 	mov	r7,r21
10007650:	000ed280 	call	1000ed28 <__eqdf2>
10007654:	103dc726 	beq	r2,zero,10006d74 <__alt_data_end+0xf8006d74>
10007658:	d8800517 	ldw	r2,20(sp)
1000765c:	10bfffc4 	addi	r2,r2,-1
10007660:	d8800515 	stw	r2,20(sp)
10007664:	003dc306 	br	10006d74 <__alt_data_end+0xf8006d74>
10007668:	dd400917 	ldw	r21,36(sp)
1000766c:	dd000817 	ldw	r20,32(sp)
10007670:	0023883a 	mov	r17,zero
10007674:	003fa906 	br	1000751c <__alt_data_end+0xf800751c>
10007678:	d9800317 	ldw	r6,12(sp)
1000767c:	b981670e 	bge	r23,r6,10007c1c <_dtoa_r+0x110c>
10007680:	0027883a 	mov	r19,zero
10007684:	d8c00a17 	ldw	r3,40(sp)
10007688:	183fd21e 	bne	r3,zero,100075d4 <__alt_data_end+0xf80075d4>
1000768c:	00800044 	movi	r2,1
10007690:	1585883a 	add	r2,r2,r22
10007694:	108007cc 	andi	r2,r2,31
10007698:	10005f26 	beq	r2,zero,10007818 <_dtoa_r+0xd08>
1000769c:	00c00804 	movi	r3,32
100076a0:	1887c83a 	sub	r3,r3,r2
100076a4:	01000104 	movi	r4,4
100076a8:	20c2dd0e 	bge	r4,r3,10008220 <_dtoa_r+0x1710>
100076ac:	d9000817 	ldw	r4,32(sp)
100076b0:	00c00704 	movi	r3,28
100076b4:	1885c83a 	sub	r2,r3,r2
100076b8:	2089883a 	add	r4,r4,r2
100076bc:	d9000815 	stw	r4,32(sp)
100076c0:	a0a9883a 	add	r20,r20,r2
100076c4:	b0ad883a 	add	r22,r22,r2
100076c8:	d8800817 	ldw	r2,32(sp)
100076cc:	0080050e 	bge	zero,r2,100076e4 <_dtoa_r+0xbd4>
100076d0:	e00b883a 	mov	r5,fp
100076d4:	8009883a 	mov	r4,r16
100076d8:	100d883a 	mov	r6,r2
100076dc:	000a8480 	call	1000a848 <__lshift>
100076e0:	1039883a 	mov	fp,r2
100076e4:	0580050e 	bge	zero,r22,100076fc <_dtoa_r+0xbec>
100076e8:	a80b883a 	mov	r5,r21
100076ec:	8009883a 	mov	r4,r16
100076f0:	b00d883a 	mov	r6,r22
100076f4:	000a8480 	call	1000a848 <__lshift>
100076f8:	102b883a 	mov	r21,r2
100076fc:	d8c00c17 	ldw	r3,48(sp)
10007700:	1801161e 	bne	r3,zero,10007b5c <_dtoa_r+0x104c>
10007704:	d8c00617 	ldw	r3,24(sp)
10007708:	00c12d0e 	bge	zero,r3,10007bc0 <_dtoa_r+0x10b0>
1000770c:	d8c00b17 	ldw	r3,44(sp)
10007710:	1800571e 	bne	r3,zero,10007870 <_dtoa_r+0xd60>
10007714:	dc800717 	ldw	r18,28(sp)
10007718:	dcc00617 	ldw	r19,24(sp)
1000771c:	9029883a 	mov	r20,r18
10007720:	00000206 	br	1000772c <_dtoa_r+0xc1c>
10007724:	000a0e40 	call	1000a0e4 <__multadd>
10007728:	1039883a 	mov	fp,r2
1000772c:	e009883a 	mov	r4,fp
10007730:	a80b883a 	mov	r5,r21
10007734:	00068e80 	call	100068e8 <quorem>
10007738:	10800c04 	addi	r2,r2,48
1000773c:	90800005 	stb	r2,0(r18)
10007740:	94800044 	addi	r18,r18,1
10007744:	9507c83a 	sub	r3,r18,r20
10007748:	8009883a 	mov	r4,r16
1000774c:	e00b883a 	mov	r5,fp
10007750:	01800284 	movi	r6,10
10007754:	000f883a 	mov	r7,zero
10007758:	1cfff216 	blt	r3,r19,10007724 <__alt_data_end+0xf8007724>
1000775c:	1011883a 	mov	r8,r2
10007760:	d8800617 	ldw	r2,24(sp)
10007764:	00822e0e 	bge	zero,r2,10008020 <_dtoa_r+0x1510>
10007768:	d9000717 	ldw	r4,28(sp)
1000776c:	0025883a 	mov	r18,zero
10007770:	20af883a 	add	r23,r4,r2
10007774:	e00b883a 	mov	r5,fp
10007778:	01800044 	movi	r6,1
1000777c:	8009883a 	mov	r4,r16
10007780:	da001715 	stw	r8,92(sp)
10007784:	000a8480 	call	1000a848 <__lshift>
10007788:	1009883a 	mov	r4,r2
1000778c:	a80b883a 	mov	r5,r21
10007790:	1039883a 	mov	fp,r2
10007794:	000a9900 	call	1000a990 <__mcmp>
10007798:	da001717 	ldw	r8,92(sp)
1000779c:	00816e0e 	bge	zero,r2,10007d58 <_dtoa_r+0x1248>
100077a0:	b93fffc3 	ldbu	r4,-1(r23)
100077a4:	b8bfffc4 	addi	r2,r23,-1
100077a8:	1007883a 	mov	r3,r2
100077ac:	01800e44 	movi	r6,57
100077b0:	d9c00717 	ldw	r7,28(sp)
100077b4:	00000506 	br	100077cc <_dtoa_r+0xcbc>
100077b8:	18ffffc4 	addi	r3,r3,-1
100077bc:	38811926 	beq	r7,r2,10007c24 <_dtoa_r+0x1114>
100077c0:	19000003 	ldbu	r4,0(r3)
100077c4:	102f883a 	mov	r23,r2
100077c8:	10bfffc4 	addi	r2,r2,-1
100077cc:	21403fcc 	andi	r5,r4,255
100077d0:	2940201c 	xori	r5,r5,128
100077d4:	297fe004 	addi	r5,r5,-128
100077d8:	29bff726 	beq	r5,r6,100077b8 <__alt_data_end+0xf80077b8>
100077dc:	21000044 	addi	r4,r4,1
100077e0:	11000005 	stb	r4,0(r2)
100077e4:	8009883a 	mov	r4,r16
100077e8:	a80b883a 	mov	r5,r21
100077ec:	000a0bc0 	call	1000a0bc <_Bfree>
100077f0:	883e7526 	beq	r17,zero,100071c8 <__alt_data_end+0xf80071c8>
100077f4:	90000426 	beq	r18,zero,10007808 <_dtoa_r+0xcf8>
100077f8:	94400326 	beq	r18,r17,10007808 <_dtoa_r+0xcf8>
100077fc:	8009883a 	mov	r4,r16
10007800:	900b883a 	mov	r5,r18
10007804:	000a0bc0 	call	1000a0bc <_Bfree>
10007808:	8009883a 	mov	r4,r16
1000780c:	880b883a 	mov	r5,r17
10007810:	000a0bc0 	call	1000a0bc <_Bfree>
10007814:	003e6c06 	br	100071c8 <__alt_data_end+0xf80071c8>
10007818:	00800704 	movi	r2,28
1000781c:	d9800817 	ldw	r6,32(sp)
10007820:	a0a9883a 	add	r20,r20,r2
10007824:	b0ad883a 	add	r22,r22,r2
10007828:	308d883a 	add	r6,r6,r2
1000782c:	d9800815 	stw	r6,32(sp)
10007830:	003fa506 	br	100076c8 <__alt_data_end+0xf80076c8>
10007834:	013efb84 	movi	r4,-1042
10007838:	246bc83a 	sub	r21,r4,r17
1000783c:	9548983a 	sll	r4,r18,r21
10007840:	003d1806 	br	10006ca4 <__alt_data_end+0xf8006ca4>
10007844:	d8000c15 	stw	zero,48(sp)
10007848:	003d5b06 	br	10006db8 <__alt_data_end+0xf8006db8>
1000784c:	880b883a 	mov	r5,r17
10007850:	8009883a 	mov	r4,r16
10007854:	01800284 	movi	r6,10
10007858:	000f883a 	mov	r7,zero
1000785c:	000a0e40 	call	1000a0e4 <__multadd>
10007860:	1023883a 	mov	r17,r2
10007864:	d8800d17 	ldw	r2,52(sp)
10007868:	0082550e 	bge	zero,r2,100081c0 <_dtoa_r+0x16b0>
1000786c:	d8800615 	stw	r2,24(sp)
10007870:	0500050e 	bge	zero,r20,10007888 <_dtoa_r+0xd78>
10007874:	880b883a 	mov	r5,r17
10007878:	8009883a 	mov	r4,r16
1000787c:	a00d883a 	mov	r6,r20
10007880:	000a8480 	call	1000a848 <__lshift>
10007884:	1023883a 	mov	r17,r2
10007888:	98016a1e 	bne	r19,zero,10007e34 <_dtoa_r+0x1324>
1000788c:	8829883a 	mov	r20,r17
10007890:	d9000617 	ldw	r4,24(sp)
10007894:	dcc00717 	ldw	r19,28(sp)
10007898:	9480004c 	andi	r18,r18,1
1000789c:	20bfffc4 	addi	r2,r4,-1
100078a0:	9885883a 	add	r2,r19,r2
100078a4:	d8800415 	stw	r2,16(sp)
100078a8:	dc800615 	stw	r18,24(sp)
100078ac:	e009883a 	mov	r4,fp
100078b0:	a80b883a 	mov	r5,r21
100078b4:	00068e80 	call	100068e8 <quorem>
100078b8:	e009883a 	mov	r4,fp
100078bc:	880b883a 	mov	r5,r17
100078c0:	102f883a 	mov	r23,r2
100078c4:	000a9900 	call	1000a990 <__mcmp>
100078c8:	8009883a 	mov	r4,r16
100078cc:	a80b883a 	mov	r5,r21
100078d0:	a00d883a 	mov	r6,r20
100078d4:	102d883a 	mov	r22,r2
100078d8:	000a9f00 	call	1000a9f0 <__mdiff>
100078dc:	1007883a 	mov	r3,r2
100078e0:	10800317 	ldw	r2,12(r2)
100078e4:	bc800c04 	addi	r18,r23,48
100078e8:	1000971e 	bne	r2,zero,10007b48 <_dtoa_r+0x1038>
100078ec:	180b883a 	mov	r5,r3
100078f0:	e009883a 	mov	r4,fp
100078f4:	d8c01515 	stw	r3,84(sp)
100078f8:	000a9900 	call	1000a990 <__mcmp>
100078fc:	d8c01517 	ldw	r3,84(sp)
10007900:	8009883a 	mov	r4,r16
10007904:	d8801515 	stw	r2,84(sp)
10007908:	180b883a 	mov	r5,r3
1000790c:	000a0bc0 	call	1000a0bc <_Bfree>
10007910:	d8801517 	ldw	r2,84(sp)
10007914:	1000041e 	bne	r2,zero,10007928 <_dtoa_r+0xe18>
10007918:	d9800317 	ldw	r6,12(sp)
1000791c:	3000021e 	bne	r6,zero,10007928 <_dtoa_r+0xe18>
10007920:	d8c00617 	ldw	r3,24(sp)
10007924:	18007626 	beq	r3,zero,10007b00 <_dtoa_r+0xff0>
10007928:	b0005b16 	blt	r22,zero,10007a98 <_dtoa_r+0xf88>
1000792c:	b000041e 	bne	r22,zero,10007940 <_dtoa_r+0xe30>
10007930:	d9000317 	ldw	r4,12(sp)
10007934:	2000021e 	bne	r4,zero,10007940 <_dtoa_r+0xe30>
10007938:	d8c00617 	ldw	r3,24(sp)
1000793c:	18005626 	beq	r3,zero,10007a98 <_dtoa_r+0xf88>
10007940:	00814d16 	blt	zero,r2,10007e78 <_dtoa_r+0x1368>
10007944:	d8c00417 	ldw	r3,16(sp)
10007948:	9d800044 	addi	r22,r19,1
1000794c:	9c800005 	stb	r18,0(r19)
10007950:	b02f883a 	mov	r23,r22
10007954:	98c14c26 	beq	r19,r3,10007e88 <_dtoa_r+0x1378>
10007958:	e00b883a 	mov	r5,fp
1000795c:	8009883a 	mov	r4,r16
10007960:	01800284 	movi	r6,10
10007964:	000f883a 	mov	r7,zero
10007968:	000a0e40 	call	1000a0e4 <__multadd>
1000796c:	1039883a 	mov	fp,r2
10007970:	8d006d26 	beq	r17,r20,10007b28 <_dtoa_r+0x1018>
10007974:	880b883a 	mov	r5,r17
10007978:	01800284 	movi	r6,10
1000797c:	000f883a 	mov	r7,zero
10007980:	8009883a 	mov	r4,r16
10007984:	000a0e40 	call	1000a0e4 <__multadd>
10007988:	a00b883a 	mov	r5,r20
1000798c:	8009883a 	mov	r4,r16
10007990:	01800284 	movi	r6,10
10007994:	000f883a 	mov	r7,zero
10007998:	1023883a 	mov	r17,r2
1000799c:	000a0e40 	call	1000a0e4 <__multadd>
100079a0:	1029883a 	mov	r20,r2
100079a4:	b027883a 	mov	r19,r22
100079a8:	003fc006 	br	100078ac <__alt_data_end+0xf80078ac>
100079ac:	a005883a 	mov	r2,r20
100079b0:	003ede06 	br	1000752c <__alt_data_end+0xf800752c>
100079b4:	01000044 	movi	r4,1
100079b8:	d9000b15 	stw	r4,44(sp)
100079bc:	d9802217 	ldw	r6,136(sp)
100079c0:	0180dc0e 	bge	zero,r6,10007d34 <_dtoa_r+0x1224>
100079c4:	3023883a 	mov	r17,r6
100079c8:	d9800d15 	stw	r6,52(sp)
100079cc:	d9800615 	stw	r6,24(sp)
100079d0:	003d1e06 	br	10006e4c <__alt_data_end+0xf8006e4c>
100079d4:	d8800617 	ldw	r2,24(sp)
100079d8:	00be3716 	blt	zero,r2,100072b8 <__alt_data_end+0xf80072b8>
100079dc:	1000be1e 	bne	r2,zero,10007cd8 <_dtoa_r+0x11c8>
100079e0:	8809883a 	mov	r4,r17
100079e4:	a00b883a 	mov	r5,r20
100079e8:	000d883a 	mov	r6,zero
100079ec:	01d00534 	movhi	r7,16404
100079f0:	000ef6c0 	call	1000ef6c <__muldf3>
100079f4:	1009883a 	mov	r4,r2
100079f8:	180b883a 	mov	r5,r3
100079fc:	900d883a 	mov	r6,r18
10007a00:	980f883a 	mov	r7,r19
10007a04:	000edac0 	call	1000edac <__gedf2>
10007a08:	002b883a 	mov	r21,zero
10007a0c:	0023883a 	mov	r17,zero
10007a10:	10007a16 	blt	r2,zero,10007bfc <_dtoa_r+0x10ec>
10007a14:	d9002217 	ldw	r4,136(sp)
10007a18:	ddc00717 	ldw	r23,28(sp)
10007a1c:	0108303a 	nor	r4,zero,r4
10007a20:	d9000515 	stw	r4,20(sp)
10007a24:	8009883a 	mov	r4,r16
10007a28:	a80b883a 	mov	r5,r21
10007a2c:	000a0bc0 	call	1000a0bc <_Bfree>
10007a30:	883f751e 	bne	r17,zero,10007808 <__alt_data_end+0xf8007808>
10007a34:	003de406 	br	100071c8 <__alt_data_end+0xf80071c8>
10007a38:	e00b883a 	mov	r5,fp
10007a3c:	8009883a 	mov	r4,r16
10007a40:	000a7080 	call	1000a708 <__pow5mult>
10007a44:	1039883a 	mov	fp,r2
10007a48:	003ed306 	br	10007598 <__alt_data_end+0xf8007598>
10007a4c:	903ee01e 	bne	r18,zero,100075d0 <__alt_data_end+0xf80075d0>
10007a50:	00800434 	movhi	r2,16
10007a54:	10bfffc4 	addi	r2,r2,-1
10007a58:	9884703a 	and	r2,r19,r2
10007a5c:	103f081e 	bne	r2,zero,10007680 <__alt_data_end+0xf8007680>
10007a60:	9cdffc2c 	andhi	r19,r19,32752
10007a64:	983f0626 	beq	r19,zero,10007680 <__alt_data_end+0xf8007680>
10007a68:	d8800817 	ldw	r2,32(sp)
10007a6c:	b5800044 	addi	r22,r22,1
10007a70:	04c00044 	movi	r19,1
10007a74:	10800044 	addi	r2,r2,1
10007a78:	d8800815 	stw	r2,32(sp)
10007a7c:	003f0106 	br	10007684 <__alt_data_end+0xf8007684>
10007a80:	d9800f17 	ldw	r6,60(sp)
10007a84:	30016826 	beq	r6,zero,10008028 <_dtoa_r+0x1518>
10007a88:	10810cc4 	addi	r2,r2,1075
10007a8c:	dd400917 	ldw	r21,36(sp)
10007a90:	dd000817 	ldw	r20,32(sp)
10007a94:	003e9906 	br	100074fc <__alt_data_end+0xf80074fc>
10007a98:	9011883a 	mov	r8,r18
10007a9c:	4007883a 	mov	r3,r8
10007aa0:	e02d883a 	mov	r22,fp
10007aa4:	0080100e 	bge	zero,r2,10007ae8 <_dtoa_r+0xfd8>
10007aa8:	01800044 	movi	r6,1
10007aac:	8009883a 	mov	r4,r16
10007ab0:	e00b883a 	mov	r5,fp
10007ab4:	da001515 	stw	r8,84(sp)
10007ab8:	da001715 	stw	r8,92(sp)
10007abc:	000a8480 	call	1000a848 <__lshift>
10007ac0:	1009883a 	mov	r4,r2
10007ac4:	a80b883a 	mov	r5,r21
10007ac8:	102d883a 	mov	r22,r2
10007acc:	000a9900 	call	1000a990 <__mcmp>
10007ad0:	d8c01517 	ldw	r3,84(sp)
10007ad4:	da001717 	ldw	r8,92(sp)
10007ad8:	0081a50e 	bge	zero,r2,10008170 <_dtoa_r+0x1660>
10007adc:	00800e44 	movi	r2,57
10007ae0:	40817b26 	beq	r8,r2,100080d0 <_dtoa_r+0x15c0>
10007ae4:	40c00044 	addi	r3,r8,1
10007ae8:	8825883a 	mov	r18,r17
10007aec:	9dc00044 	addi	r23,r19,1
10007af0:	98c00005 	stb	r3,0(r19)
10007af4:	a023883a 	mov	r17,r20
10007af8:	b039883a 	mov	fp,r22
10007afc:	003f3906 	br	100077e4 <__alt_data_end+0xf80077e4>
10007b00:	00800e44 	movi	r2,57
10007b04:	9011883a 	mov	r8,r18
10007b08:	90817226 	beq	r18,r2,100080d4 <_dtoa_r+0x15c4>
10007b0c:	0580010e 	bge	zero,r22,10007b14 <_dtoa_r+0x1004>
10007b10:	ba000c44 	addi	r8,r23,49
10007b14:	8825883a 	mov	r18,r17
10007b18:	9dc00044 	addi	r23,r19,1
10007b1c:	9a000005 	stb	r8,0(r19)
10007b20:	a023883a 	mov	r17,r20
10007b24:	003f2f06 	br	100077e4 <__alt_data_end+0xf80077e4>
10007b28:	880b883a 	mov	r5,r17
10007b2c:	8009883a 	mov	r4,r16
10007b30:	01800284 	movi	r6,10
10007b34:	000f883a 	mov	r7,zero
10007b38:	000a0e40 	call	1000a0e4 <__multadd>
10007b3c:	1023883a 	mov	r17,r2
10007b40:	1029883a 	mov	r20,r2
10007b44:	003f9706 	br	100079a4 <__alt_data_end+0xf80079a4>
10007b48:	8009883a 	mov	r4,r16
10007b4c:	180b883a 	mov	r5,r3
10007b50:	000a0bc0 	call	1000a0bc <_Bfree>
10007b54:	00800044 	movi	r2,1
10007b58:	003f7306 	br	10007928 <__alt_data_end+0xf8007928>
10007b5c:	e009883a 	mov	r4,fp
10007b60:	a80b883a 	mov	r5,r21
10007b64:	000a9900 	call	1000a990 <__mcmp>
10007b68:	103ee60e 	bge	r2,zero,10007704 <__alt_data_end+0xf8007704>
10007b6c:	8009883a 	mov	r4,r16
10007b70:	e00b883a 	mov	r5,fp
10007b74:	01800284 	movi	r6,10
10007b78:	000f883a 	mov	r7,zero
10007b7c:	000a0e40 	call	1000a0e4 <__multadd>
10007b80:	d9000517 	ldw	r4,20(sp)
10007b84:	d9800b17 	ldw	r6,44(sp)
10007b88:	1039883a 	mov	fp,r2
10007b8c:	213fffc4 	addi	r4,r4,-1
10007b90:	d9000515 	stw	r4,20(sp)
10007b94:	303f2d1e 	bne	r6,zero,1000784c <__alt_data_end+0xf800784c>
10007b98:	d9000d17 	ldw	r4,52(sp)
10007b9c:	0101780e 	bge	zero,r4,10008180 <_dtoa_r+0x1670>
10007ba0:	d9000615 	stw	r4,24(sp)
10007ba4:	003edb06 	br	10007714 <__alt_data_end+0xf8007714>
10007ba8:	00800084 	movi	r2,2
10007bac:	30818e1e 	bne	r6,r2,100081e8 <_dtoa_r+0x16d8>
10007bb0:	d8000b15 	stw	zero,44(sp)
10007bb4:	003f8106 	br	100079bc <__alt_data_end+0xf80079bc>
10007bb8:	d8800717 	ldw	r2,28(sp)
10007bbc:	003c0306 	br	10006bcc <__alt_data_end+0xf8006bcc>
10007bc0:	d9000317 	ldw	r4,12(sp)
10007bc4:	00800084 	movi	r2,2
10007bc8:	113ed00e 	bge	r2,r4,1000770c <__alt_data_end+0xf800770c>
10007bcc:	d8c00617 	ldw	r3,24(sp)
10007bd0:	183f901e 	bne	r3,zero,10007a14 <__alt_data_end+0xf8007a14>
10007bd4:	a80b883a 	mov	r5,r21
10007bd8:	8009883a 	mov	r4,r16
10007bdc:	01800144 	movi	r6,5
10007be0:	000f883a 	mov	r7,zero
10007be4:	000a0e40 	call	1000a0e4 <__multadd>
10007be8:	e009883a 	mov	r4,fp
10007bec:	100b883a 	mov	r5,r2
10007bf0:	102b883a 	mov	r21,r2
10007bf4:	000a9900 	call	1000a990 <__mcmp>
10007bf8:	00bf860e 	bge	zero,r2,10007a14 <__alt_data_end+0xf8007a14>
10007bfc:	d9800717 	ldw	r6,28(sp)
10007c00:	00800c44 	movi	r2,49
10007c04:	30800005 	stb	r2,0(r6)
10007c08:	d8800517 	ldw	r2,20(sp)
10007c0c:	35c00044 	addi	r23,r6,1
10007c10:	10800044 	addi	r2,r2,1
10007c14:	d8800515 	stw	r2,20(sp)
10007c18:	003f8206 	br	10007a24 <__alt_data_end+0xf8007a24>
10007c1c:	903e981e 	bne	r18,zero,10007680 <__alt_data_end+0xf8007680>
10007c20:	003f8b06 	br	10007a50 <__alt_data_end+0xf8007a50>
10007c24:	d9800517 	ldw	r6,20(sp)
10007c28:	d8c00717 	ldw	r3,28(sp)
10007c2c:	00800c44 	movi	r2,49
10007c30:	31800044 	addi	r6,r6,1
10007c34:	d9800515 	stw	r6,20(sp)
10007c38:	18800005 	stb	r2,0(r3)
10007c3c:	003ee906 	br	100077e4 <__alt_data_end+0xf80077e4>
10007c40:	dc000317 	ldw	r16,12(sp)
10007c44:	003d6006 	br	100071c8 <__alt_data_end+0xf80071c8>
10007c48:	8809883a 	mov	r4,r17
10007c4c:	00101300 	call	10010130 <__floatsidf>
10007c50:	a009883a 	mov	r4,r20
10007c54:	a80b883a 	mov	r5,r21
10007c58:	100d883a 	mov	r6,r2
10007c5c:	180f883a 	mov	r7,r3
10007c60:	000ef6c0 	call	1000ef6c <__muldf3>
10007c64:	1009883a 	mov	r4,r2
10007c68:	180b883a 	mov	r5,r3
10007c6c:	000d883a 	mov	r6,zero
10007c70:	01d00734 	movhi	r7,16412
10007c74:	00037ec0 	call	100037ec <__adddf3>
10007c78:	1023883a 	mov	r17,r2
10007c7c:	00bf3034 	movhi	r2,64704
10007c80:	1885883a 	add	r2,r3,r2
10007c84:	d8800e15 	stw	r2,56(sp)
10007c88:	a009883a 	mov	r4,r20
10007c8c:	a80b883a 	mov	r5,r21
10007c90:	000d883a 	mov	r6,zero
10007c94:	01d00534 	movhi	r7,16404
10007c98:	000f7d80 	call	1000f7d8 <__subdf3>
10007c9c:	d9c00e17 	ldw	r7,56(sp)
10007ca0:	1009883a 	mov	r4,r2
10007ca4:	180b883a 	mov	r5,r3
10007ca8:	880d883a 	mov	r6,r17
10007cac:	102b883a 	mov	r21,r2
10007cb0:	1829883a 	mov	r20,r3
10007cb4:	000edac0 	call	1000edac <__gedf2>
10007cb8:	00807716 	blt	zero,r2,10007e98 <_dtoa_r+0x1388>
10007cbc:	d8800e17 	ldw	r2,56(sp)
10007cc0:	a809883a 	mov	r4,r21
10007cc4:	a00b883a 	mov	r5,r20
10007cc8:	11e0003c 	xorhi	r7,r2,32768
10007ccc:	880d883a 	mov	r6,r17
10007cd0:	000ee8c0 	call	1000ee8c <__ledf2>
10007cd4:	103d6b0e 	bge	r2,zero,10007284 <__alt_data_end+0xf8007284>
10007cd8:	002b883a 	mov	r21,zero
10007cdc:	0023883a 	mov	r17,zero
10007ce0:	003f4c06 	br	10007a14 <__alt_data_end+0xf8007a14>
10007ce4:	d9800917 	ldw	r6,36(sp)
10007ce8:	e00b883a 	mov	r5,fp
10007cec:	8009883a 	mov	r4,r16
10007cf0:	000a7080 	call	1000a708 <__pow5mult>
10007cf4:	1039883a 	mov	fp,r2
10007cf8:	003e2706 	br	10007598 <__alt_data_end+0xf8007598>
10007cfc:	d8000b15 	stw	zero,44(sp)
10007d00:	003c4906 	br	10006e28 <__alt_data_end+0xf8006e28>
10007d04:	d9000917 	ldw	r4,36(sp)
10007d08:	d9800a17 	ldw	r6,40(sp)
10007d0c:	dd400915 	stw	r21,36(sp)
10007d10:	a905c83a 	sub	r2,r21,r4
10007d14:	308d883a 	add	r6,r6,r2
10007d18:	d9800a15 	stw	r6,40(sp)
10007d1c:	002b883a 	mov	r21,zero
10007d20:	003df206 	br	100074ec <__alt_data_end+0xf80074ec>
10007d24:	dc800e15 	stw	r18,56(sp)
10007d28:	982b883a 	mov	r21,r19
10007d2c:	04400084 	movi	r17,2
10007d30:	003c7406 	br	10006f04 <__alt_data_end+0xf8006f04>
10007d34:	04400044 	movi	r17,1
10007d38:	dc400d15 	stw	r17,52(sp)
10007d3c:	dc400615 	stw	r17,24(sp)
10007d40:	dc402215 	stw	r17,136(sp)
10007d44:	80001115 	stw	zero,68(r16)
10007d48:	000b883a 	mov	r5,zero
10007d4c:	003c4a06 	br	10006e78 <__alt_data_end+0xf8006e78>
10007d50:	3023883a 	mov	r17,r6
10007d54:	003ffb06 	br	10007d44 <__alt_data_end+0xf8007d44>
10007d58:	1000021e 	bne	r2,zero,10007d64 <_dtoa_r+0x1254>
10007d5c:	4200004c 	andi	r8,r8,1
10007d60:	403e8f1e 	bne	r8,zero,100077a0 <__alt_data_end+0xf80077a0>
10007d64:	01000c04 	movi	r4,48
10007d68:	00000106 	br	10007d70 <_dtoa_r+0x1260>
10007d6c:	102f883a 	mov	r23,r2
10007d70:	b8bfffc4 	addi	r2,r23,-1
10007d74:	10c00007 	ldb	r3,0(r2)
10007d78:	193ffc26 	beq	r3,r4,10007d6c <__alt_data_end+0xf8007d6c>
10007d7c:	003e9906 	br	100077e4 <__alt_data_end+0xf80077e4>
10007d80:	d9000517 	ldw	r4,20(sp)
10007d84:	012fc83a 	sub	r23,zero,r4
10007d88:	b800ad26 	beq	r23,zero,10008040 <_dtoa_r+0x1530>
10007d8c:	b88003cc 	andi	r2,r23,15
10007d90:	100490fa 	slli	r2,r2,3
10007d94:	00c40074 	movhi	r3,4097
10007d98:	18d3a404 	addi	r3,r3,20112
10007d9c:	1885883a 	add	r2,r3,r2
10007da0:	11800017 	ldw	r6,0(r2)
10007da4:	11c00117 	ldw	r7,4(r2)
10007da8:	b82fd13a 	srai	r23,r23,4
10007dac:	9009883a 	mov	r4,r18
10007db0:	980b883a 	mov	r5,r19
10007db4:	000ef6c0 	call	1000ef6c <__muldf3>
10007db8:	1029883a 	mov	r20,r2
10007dbc:	182b883a 	mov	r21,r3
10007dc0:	b800f426 	beq	r23,zero,10008194 <_dtoa_r+0x1684>
10007dc4:	02040074 	movhi	r8,4097
10007dc8:	42139a04 	addi	r8,r8,20072
10007dcc:	8029883a 	mov	r20,r16
10007dd0:	04400084 	movi	r17,2
10007dd4:	4021883a 	mov	r16,r8
10007dd8:	b980004c 	andi	r6,r23,1
10007ddc:	1009883a 	mov	r4,r2
10007de0:	b82fd07a 	srai	r23,r23,1
10007de4:	180b883a 	mov	r5,r3
10007de8:	30000426 	beq	r6,zero,10007dfc <_dtoa_r+0x12ec>
10007dec:	81800017 	ldw	r6,0(r16)
10007df0:	81c00117 	ldw	r7,4(r16)
10007df4:	8c400044 	addi	r17,r17,1
10007df8:	000ef6c0 	call	1000ef6c <__muldf3>
10007dfc:	84000204 	addi	r16,r16,8
10007e00:	b83ff51e 	bne	r23,zero,10007dd8 <__alt_data_end+0xf8007dd8>
10007e04:	a021883a 	mov	r16,r20
10007e08:	182b883a 	mov	r21,r3
10007e0c:	1029883a 	mov	r20,r2
10007e10:	003c5506 	br	10006f68 <__alt_data_end+0xf8006f68>
10007e14:	d9800517 	ldw	r6,20(sp)
10007e18:	d9000717 	ldw	r4,28(sp)
10007e1c:	00c00c04 	movi	r3,48
10007e20:	31800044 	addi	r6,r6,1
10007e24:	d9800515 	stw	r6,20(sp)
10007e28:	20c00005 	stb	r3,0(r4)
10007e2c:	02000c44 	movi	r8,49
10007e30:	003da206 	br	100074bc <__alt_data_end+0xf80074bc>
10007e34:	89400117 	ldw	r5,4(r17)
10007e38:	8009883a 	mov	r4,r16
10007e3c:	000a0140 	call	1000a014 <_Balloc>
10007e40:	89800417 	ldw	r6,16(r17)
10007e44:	11000304 	addi	r4,r2,12
10007e48:	89400304 	addi	r5,r17,12
10007e4c:	31800084 	addi	r6,r6,2
10007e50:	318d883a 	add	r6,r6,r6
10007e54:	318d883a 	add	r6,r6,r6
10007e58:	1027883a 	mov	r19,r2
10007e5c:	00043940 	call	10004394 <memcpy>
10007e60:	8009883a 	mov	r4,r16
10007e64:	980b883a 	mov	r5,r19
10007e68:	01800044 	movi	r6,1
10007e6c:	000a8480 	call	1000a848 <__lshift>
10007e70:	1029883a 	mov	r20,r2
10007e74:	003e8606 	br	10007890 <__alt_data_end+0xf8007890>
10007e78:	00800e44 	movi	r2,57
10007e7c:	90809526 	beq	r18,r2,100080d4 <_dtoa_r+0x15c4>
10007e80:	92000044 	addi	r8,r18,1
10007e84:	003f2306 	br	10007b14 <__alt_data_end+0xf8007b14>
10007e88:	9011883a 	mov	r8,r18
10007e8c:	8825883a 	mov	r18,r17
10007e90:	a023883a 	mov	r17,r20
10007e94:	003e3706 	br	10007774 <__alt_data_end+0xf8007774>
10007e98:	002b883a 	mov	r21,zero
10007e9c:	0023883a 	mov	r17,zero
10007ea0:	003f5606 	br	10007bfc <__alt_data_end+0xf8007bfc>
10007ea4:	51bfffc4 	addi	r6,r10,-1
10007ea8:	300490fa 	slli	r2,r6,3
10007eac:	00c40074 	movhi	r3,4097
10007eb0:	18d3a404 	addi	r3,r3,20112
10007eb4:	1885883a 	add	r2,r3,r2
10007eb8:	d9c00e17 	ldw	r7,56(sp)
10007ebc:	11000017 	ldw	r4,0(r2)
10007ec0:	11400117 	ldw	r5,4(r2)
10007ec4:	d8800717 	ldw	r2,28(sp)
10007ec8:	d9801015 	stw	r6,64(sp)
10007ecc:	880d883a 	mov	r6,r17
10007ed0:	da801615 	stw	r10,88(sp)
10007ed4:	15c00044 	addi	r23,r2,1
10007ed8:	000ef6c0 	call	1000ef6c <__muldf3>
10007edc:	a80b883a 	mov	r5,r21
10007ee0:	a009883a 	mov	r4,r20
10007ee4:	d8c01115 	stw	r3,68(sp)
10007ee8:	d8800e15 	stw	r2,56(sp)
10007eec:	00100a80 	call	100100a8 <__fixdfsi>
10007ef0:	1009883a 	mov	r4,r2
10007ef4:	1023883a 	mov	r17,r2
10007ef8:	00101300 	call	10010130 <__floatsidf>
10007efc:	a009883a 	mov	r4,r20
10007f00:	a80b883a 	mov	r5,r21
10007f04:	100d883a 	mov	r6,r2
10007f08:	180f883a 	mov	r7,r3
10007f0c:	000f7d80 	call	1000f7d8 <__subdf3>
10007f10:	1813883a 	mov	r9,r3
10007f14:	d8c00717 	ldw	r3,28(sp)
10007f18:	8c400c04 	addi	r17,r17,48
10007f1c:	1011883a 	mov	r8,r2
10007f20:	1c400005 	stb	r17,0(r3)
10007f24:	da801617 	ldw	r10,88(sp)
10007f28:	00800044 	movi	r2,1
10007f2c:	50802326 	beq	r10,r2,10007fbc <_dtoa_r+0x14ac>
10007f30:	d8800717 	ldw	r2,28(sp)
10007f34:	b82b883a 	mov	r21,r23
10007f38:	dc001315 	stw	r16,76(sp)
10007f3c:	12a9883a 	add	r20,r2,r10
10007f40:	4807883a 	mov	r3,r9
10007f44:	4005883a 	mov	r2,r8
10007f48:	dc801415 	stw	r18,80(sp)
10007f4c:	000d883a 	mov	r6,zero
10007f50:	01d00934 	movhi	r7,16420
10007f54:	1009883a 	mov	r4,r2
10007f58:	180b883a 	mov	r5,r3
10007f5c:	000ef6c0 	call	1000ef6c <__muldf3>
10007f60:	180b883a 	mov	r5,r3
10007f64:	1009883a 	mov	r4,r2
10007f68:	1821883a 	mov	r16,r3
10007f6c:	1025883a 	mov	r18,r2
10007f70:	00100a80 	call	100100a8 <__fixdfsi>
10007f74:	1009883a 	mov	r4,r2
10007f78:	1023883a 	mov	r17,r2
10007f7c:	00101300 	call	10010130 <__floatsidf>
10007f80:	9009883a 	mov	r4,r18
10007f84:	800b883a 	mov	r5,r16
10007f88:	100d883a 	mov	r6,r2
10007f8c:	180f883a 	mov	r7,r3
10007f90:	8c400c04 	addi	r17,r17,48
10007f94:	000f7d80 	call	1000f7d8 <__subdf3>
10007f98:	ad400044 	addi	r21,r21,1
10007f9c:	ac7fffc5 	stb	r17,-1(r21)
10007fa0:	ad3fea1e 	bne	r21,r20,10007f4c <__alt_data_end+0xf8007f4c>
10007fa4:	1813883a 	mov	r9,r3
10007fa8:	d8c01017 	ldw	r3,64(sp)
10007fac:	dc001317 	ldw	r16,76(sp)
10007fb0:	dc801417 	ldw	r18,80(sp)
10007fb4:	1011883a 	mov	r8,r2
10007fb8:	b8ef883a 	add	r23,r23,r3
10007fbc:	d9000e17 	ldw	r4,56(sp)
10007fc0:	d9401117 	ldw	r5,68(sp)
10007fc4:	000d883a 	mov	r6,zero
10007fc8:	01cff834 	movhi	r7,16352
10007fcc:	da001715 	stw	r8,92(sp)
10007fd0:	da401515 	stw	r9,84(sp)
10007fd4:	00037ec0 	call	100037ec <__adddf3>
10007fd8:	da001717 	ldw	r8,92(sp)
10007fdc:	da401517 	ldw	r9,84(sp)
10007fe0:	1009883a 	mov	r4,r2
10007fe4:	400d883a 	mov	r6,r8
10007fe8:	480f883a 	mov	r7,r9
10007fec:	180b883a 	mov	r5,r3
10007ff0:	000ee8c0 	call	1000ee8c <__ledf2>
10007ff4:	da001717 	ldw	r8,92(sp)
10007ff8:	da401517 	ldw	r9,84(sp)
10007ffc:	10003b0e 	bge	r2,zero,100080ec <_dtoa_r+0x15dc>
10008000:	d9001217 	ldw	r4,72(sp)
10008004:	bd7fffc3 	ldbu	r21,-1(r23)
10008008:	d9000515 	stw	r4,20(sp)
1000800c:	003d1c06 	br	10007480 <__alt_data_end+0xf8007480>
10008010:	d8c00817 	ldw	r3,32(sp)
10008014:	18a9c83a 	sub	r20,r3,r2
10008018:	0005883a 	mov	r2,zero
1000801c:	003d3706 	br	100074fc <__alt_data_end+0xf80074fc>
10008020:	00800044 	movi	r2,1
10008024:	003dd006 	br	10007768 <__alt_data_end+0xf8007768>
10008028:	d8c00217 	ldw	r3,8(sp)
1000802c:	00800d84 	movi	r2,54
10008030:	dd400917 	ldw	r21,36(sp)
10008034:	10c5c83a 	sub	r2,r2,r3
10008038:	dd000817 	ldw	r20,32(sp)
1000803c:	003d2f06 	br	100074fc <__alt_data_end+0xf80074fc>
10008040:	9029883a 	mov	r20,r18
10008044:	982b883a 	mov	r21,r19
10008048:	04400084 	movi	r17,2
1000804c:	003bc606 	br	10006f68 <__alt_data_end+0xf8006f68>
10008050:	d8800617 	ldw	r2,24(sp)
10008054:	103efc26 	beq	r2,zero,10007c48 <__alt_data_end+0xf8007c48>
10008058:	d8c00d17 	ldw	r3,52(sp)
1000805c:	00fc890e 	bge	zero,r3,10007284 <__alt_data_end+0xf8007284>
10008060:	a80b883a 	mov	r5,r21
10008064:	a009883a 	mov	r4,r20
10008068:	000d883a 	mov	r6,zero
1000806c:	01d00934 	movhi	r7,16420
10008070:	000ef6c0 	call	1000ef6c <__muldf3>
10008074:	89000044 	addi	r4,r17,1
10008078:	1029883a 	mov	r20,r2
1000807c:	182b883a 	mov	r21,r3
10008080:	00101300 	call	10010130 <__floatsidf>
10008084:	a009883a 	mov	r4,r20
10008088:	a80b883a 	mov	r5,r21
1000808c:	100d883a 	mov	r6,r2
10008090:	180f883a 	mov	r7,r3
10008094:	000ef6c0 	call	1000ef6c <__muldf3>
10008098:	1009883a 	mov	r4,r2
1000809c:	180b883a 	mov	r5,r3
100080a0:	000d883a 	mov	r6,zero
100080a4:	01d00734 	movhi	r7,16412
100080a8:	00037ec0 	call	100037ec <__adddf3>
100080ac:	d9000517 	ldw	r4,20(sp)
100080b0:	1023883a 	mov	r17,r2
100080b4:	00bf3034 	movhi	r2,64704
100080b8:	213fffc4 	addi	r4,r4,-1
100080bc:	1885883a 	add	r2,r3,r2
100080c0:	d9001215 	stw	r4,72(sp)
100080c4:	d8800e15 	stw	r2,56(sp)
100080c8:	da800d17 	ldw	r10,52(sp)
100080cc:	003bc306 	br	10006fdc <__alt_data_end+0xf8006fdc>
100080d0:	b039883a 	mov	fp,r22
100080d4:	01000e44 	movi	r4,57
100080d8:	8825883a 	mov	r18,r17
100080dc:	9dc00044 	addi	r23,r19,1
100080e0:	99000005 	stb	r4,0(r19)
100080e4:	a023883a 	mov	r17,r20
100080e8:	003dae06 	br	100077a4 <__alt_data_end+0xf80077a4>
100080ec:	d9800e17 	ldw	r6,56(sp)
100080f0:	d9c01117 	ldw	r7,68(sp)
100080f4:	0009883a 	mov	r4,zero
100080f8:	014ff834 	movhi	r5,16352
100080fc:	da001715 	stw	r8,92(sp)
10008100:	da401515 	stw	r9,84(sp)
10008104:	000f7d80 	call	1000f7d8 <__subdf3>
10008108:	da001717 	ldw	r8,92(sp)
1000810c:	da401517 	ldw	r9,84(sp)
10008110:	1009883a 	mov	r4,r2
10008114:	180b883a 	mov	r5,r3
10008118:	400d883a 	mov	r6,r8
1000811c:	480f883a 	mov	r7,r9
10008120:	000edac0 	call	1000edac <__gedf2>
10008124:	00bc570e 	bge	zero,r2,10007284 <__alt_data_end+0xf8007284>
10008128:	01000c04 	movi	r4,48
1000812c:	00000106 	br	10008134 <_dtoa_r+0x1624>
10008130:	102f883a 	mov	r23,r2
10008134:	b8bfffc4 	addi	r2,r23,-1
10008138:	10c00007 	ldb	r3,0(r2)
1000813c:	193ffc26 	beq	r3,r4,10008130 <__alt_data_end+0xf8008130>
10008140:	d9801217 	ldw	r6,72(sp)
10008144:	d9800515 	stw	r6,20(sp)
10008148:	003c1f06 	br	100071c8 <__alt_data_end+0xf80071c8>
1000814c:	d8801217 	ldw	r2,72(sp)
10008150:	dc001117 	ldw	r16,68(sp)
10008154:	d8800515 	stw	r2,20(sp)
10008158:	003cc906 	br	10007480 <__alt_data_end+0xf8007480>
1000815c:	dd801317 	ldw	r22,76(sp)
10008160:	dc001117 	ldw	r16,68(sp)
10008164:	dcc01417 	ldw	r19,80(sp)
10008168:	dc801017 	ldw	r18,64(sp)
1000816c:	003c4506 	br	10007284 <__alt_data_end+0xf8007284>
10008170:	103e5d1e 	bne	r2,zero,10007ae8 <__alt_data_end+0xf8007ae8>
10008174:	4080004c 	andi	r2,r8,1
10008178:	103e5b26 	beq	r2,zero,10007ae8 <__alt_data_end+0xf8007ae8>
1000817c:	003e5706 	br	10007adc <__alt_data_end+0xf8007adc>
10008180:	d8c00317 	ldw	r3,12(sp)
10008184:	00800084 	movi	r2,2
10008188:	10c00a16 	blt	r2,r3,100081b4 <_dtoa_r+0x16a4>
1000818c:	d9000d17 	ldw	r4,52(sp)
10008190:	003e8306 	br	10007ba0 <__alt_data_end+0xf8007ba0>
10008194:	04400084 	movi	r17,2
10008198:	003b7306 	br	10006f68 <__alt_data_end+0xf8006f68>
1000819c:	d9801217 	ldw	r6,72(sp)
100081a0:	d9800515 	stw	r6,20(sp)
100081a4:	003cb606 	br	10007480 <__alt_data_end+0xf8007480>
100081a8:	d9001217 	ldw	r4,72(sp)
100081ac:	d9000515 	stw	r4,20(sp)
100081b0:	003c0506 	br	100071c8 <__alt_data_end+0xf80071c8>
100081b4:	d9800d17 	ldw	r6,52(sp)
100081b8:	d9800615 	stw	r6,24(sp)
100081bc:	003e8306 	br	10007bcc <__alt_data_end+0xf8007bcc>
100081c0:	d9800317 	ldw	r6,12(sp)
100081c4:	00800084 	movi	r2,2
100081c8:	11800216 	blt	r2,r6,100081d4 <_dtoa_r+0x16c4>
100081cc:	d8800d17 	ldw	r2,52(sp)
100081d0:	003da606 	br	1000786c <__alt_data_end+0xf800786c>
100081d4:	d8800d17 	ldw	r2,52(sp)
100081d8:	d8800615 	stw	r2,24(sp)
100081dc:	003e7b06 	br	10007bcc <__alt_data_end+0xf8007bcc>
100081e0:	05000044 	movi	r20,1
100081e4:	003b0506 	br	10006dfc <__alt_data_end+0xf8006dfc>
100081e8:	8009883a 	mov	r4,r16
100081ec:	80001115 	stw	zero,68(r16)
100081f0:	000b883a 	mov	r5,zero
100081f4:	000a0140 	call	1000a014 <_Balloc>
100081f8:	d8800715 	stw	r2,28(sp)
100081fc:	d8c00717 	ldw	r3,28(sp)
10008200:	00bfffc4 	movi	r2,-1
10008204:	01000044 	movi	r4,1
10008208:	d8800615 	stw	r2,24(sp)
1000820c:	80c01015 	stw	r3,64(r16)
10008210:	d9000b15 	stw	r4,44(sp)
10008214:	d8002215 	stw	zero,136(sp)
10008218:	d8800d15 	stw	r2,52(sp)
1000821c:	003c1906 	br	10007284 <__alt_data_end+0xf8007284>
10008220:	193d2926 	beq	r3,r4,100076c8 <__alt_data_end+0xf80076c8>
10008224:	00c00f04 	movi	r3,60
10008228:	1885c83a 	sub	r2,r3,r2
1000822c:	003d7b06 	br	1000781c <__alt_data_end+0xf800781c>
10008230:	000b883a 	mov	r5,zero
10008234:	003b1006 	br	10006e78 <__alt_data_end+0xf8006e78>

10008238 <_fflush_r>:
10008238:	defffb04 	addi	sp,sp,-20
1000823c:	dcc00315 	stw	r19,12(sp)
10008240:	dc000015 	stw	r16,0(sp)
10008244:	dfc00415 	stw	ra,16(sp)
10008248:	dc800215 	stw	r18,8(sp)
1000824c:	dc400115 	stw	r17,4(sp)
10008250:	2027883a 	mov	r19,r4
10008254:	2821883a 	mov	r16,r5
10008258:	20000226 	beq	r4,zero,10008264 <_fflush_r+0x2c>
1000825c:	20800e17 	ldw	r2,56(r4)
10008260:	10005326 	beq	r2,zero,100083b0 <_fflush_r+0x178>
10008264:	8080030b 	ldhu	r2,12(r16)
10008268:	10ffffcc 	andi	r3,r2,65535
1000826c:	18e0001c 	xori	r3,r3,32768
10008270:	18e00004 	addi	r3,r3,-32768
10008274:	18002c26 	beq	r3,zero,10008328 <_fflush_r+0xf0>
10008278:	10c0020c 	andi	r3,r2,8
1000827c:	1800321e 	bne	r3,zero,10008348 <_fflush_r+0x110>
10008280:	80c00117 	ldw	r3,4(r16)
10008284:	10820014 	ori	r2,r2,2048
10008288:	8080030d 	sth	r2,12(r16)
1000828c:	00c0570e 	bge	zero,r3,100083ec <_fflush_r+0x1b4>
10008290:	82000a17 	ldw	r8,40(r16)
10008294:	40002426 	beq	r8,zero,10008328 <_fflush_r+0xf0>
10008298:	9c400017 	ldw	r17,0(r19)
1000829c:	10c4000c 	andi	r3,r2,4096
100082a0:	98000015 	stw	zero,0(r19)
100082a4:	18004626 	beq	r3,zero,100083c0 <_fflush_r+0x188>
100082a8:	81801417 	ldw	r6,80(r16)
100082ac:	10c0010c 	andi	r3,r2,4
100082b0:	18000626 	beq	r3,zero,100082cc <_fflush_r+0x94>
100082b4:	80c00117 	ldw	r3,4(r16)
100082b8:	80800c17 	ldw	r2,48(r16)
100082bc:	30cdc83a 	sub	r6,r6,r3
100082c0:	10000226 	beq	r2,zero,100082cc <_fflush_r+0x94>
100082c4:	80800f17 	ldw	r2,60(r16)
100082c8:	308dc83a 	sub	r6,r6,r2
100082cc:	81400717 	ldw	r5,28(r16)
100082d0:	9809883a 	mov	r4,r19
100082d4:	000f883a 	mov	r7,zero
100082d8:	403ee83a 	callr	r8
100082dc:	00ffffc4 	movi	r3,-1
100082e0:	10c04526 	beq	r2,r3,100083f8 <_fflush_r+0x1c0>
100082e4:	80c0030b 	ldhu	r3,12(r16)
100082e8:	81000417 	ldw	r4,16(r16)
100082ec:	80000115 	stw	zero,4(r16)
100082f0:	197dffcc 	andi	r5,r3,63487
100082f4:	8140030d 	sth	r5,12(r16)
100082f8:	81000015 	stw	r4,0(r16)
100082fc:	18c4000c 	andi	r3,r3,4096
10008300:	18000126 	beq	r3,zero,10008308 <_fflush_r+0xd0>
10008304:	80801415 	stw	r2,80(r16)
10008308:	81400c17 	ldw	r5,48(r16)
1000830c:	9c400015 	stw	r17,0(r19)
10008310:	28000526 	beq	r5,zero,10008328 <_fflush_r+0xf0>
10008314:	80801004 	addi	r2,r16,64
10008318:	28800226 	beq	r5,r2,10008324 <_fflush_r+0xec>
1000831c:	9809883a 	mov	r4,r19
10008320:	00089680 	call	10008968 <_free_r>
10008324:	80000c15 	stw	zero,48(r16)
10008328:	0005883a 	mov	r2,zero
1000832c:	dfc00417 	ldw	ra,16(sp)
10008330:	dcc00317 	ldw	r19,12(sp)
10008334:	dc800217 	ldw	r18,8(sp)
10008338:	dc400117 	ldw	r17,4(sp)
1000833c:	dc000017 	ldw	r16,0(sp)
10008340:	dec00504 	addi	sp,sp,20
10008344:	f800283a 	ret
10008348:	84800417 	ldw	r18,16(r16)
1000834c:	903ff626 	beq	r18,zero,10008328 <__alt_data_end+0xf8008328>
10008350:	84400017 	ldw	r17,0(r16)
10008354:	108000cc 	andi	r2,r2,3
10008358:	84800015 	stw	r18,0(r16)
1000835c:	8ca3c83a 	sub	r17,r17,r18
10008360:	10001526 	beq	r2,zero,100083b8 <_fflush_r+0x180>
10008364:	0005883a 	mov	r2,zero
10008368:	80800215 	stw	r2,8(r16)
1000836c:	04400316 	blt	zero,r17,1000837c <_fflush_r+0x144>
10008370:	003fed06 	br	10008328 <__alt_data_end+0xf8008328>
10008374:	90a5883a 	add	r18,r18,r2
10008378:	047feb0e 	bge	zero,r17,10008328 <__alt_data_end+0xf8008328>
1000837c:	80800917 	ldw	r2,36(r16)
10008380:	81400717 	ldw	r5,28(r16)
10008384:	880f883a 	mov	r7,r17
10008388:	900d883a 	mov	r6,r18
1000838c:	9809883a 	mov	r4,r19
10008390:	103ee83a 	callr	r2
10008394:	88a3c83a 	sub	r17,r17,r2
10008398:	00bff616 	blt	zero,r2,10008374 <__alt_data_end+0xf8008374>
1000839c:	80c0030b 	ldhu	r3,12(r16)
100083a0:	00bfffc4 	movi	r2,-1
100083a4:	18c01014 	ori	r3,r3,64
100083a8:	80c0030d 	sth	r3,12(r16)
100083ac:	003fdf06 	br	1000832c <__alt_data_end+0xf800832c>
100083b0:	00087f40 	call	100087f4 <__sinit>
100083b4:	003fab06 	br	10008264 <__alt_data_end+0xf8008264>
100083b8:	80800517 	ldw	r2,20(r16)
100083bc:	003fea06 	br	10008368 <__alt_data_end+0xf8008368>
100083c0:	81400717 	ldw	r5,28(r16)
100083c4:	000d883a 	mov	r6,zero
100083c8:	9809883a 	mov	r4,r19
100083cc:	01c00044 	movi	r7,1
100083d0:	403ee83a 	callr	r8
100083d4:	100d883a 	mov	r6,r2
100083d8:	00bfffc4 	movi	r2,-1
100083dc:	30801326 	beq	r6,r2,1000842c <_fflush_r+0x1f4>
100083e0:	8080030b 	ldhu	r2,12(r16)
100083e4:	82000a17 	ldw	r8,40(r16)
100083e8:	003fb006 	br	100082ac <__alt_data_end+0xf80082ac>
100083ec:	80c00f17 	ldw	r3,60(r16)
100083f0:	00ffa716 	blt	zero,r3,10008290 <__alt_data_end+0xf8008290>
100083f4:	003fcc06 	br	10008328 <__alt_data_end+0xf8008328>
100083f8:	98c00017 	ldw	r3,0(r19)
100083fc:	183fb926 	beq	r3,zero,100082e4 <__alt_data_end+0xf80082e4>
10008400:	01000744 	movi	r4,29
10008404:	19000226 	beq	r3,r4,10008410 <_fflush_r+0x1d8>
10008408:	01000584 	movi	r4,22
1000840c:	1900101e 	bne	r3,r4,10008450 <_fflush_r+0x218>
10008410:	8080030b 	ldhu	r2,12(r16)
10008414:	80c00417 	ldw	r3,16(r16)
10008418:	80000115 	stw	zero,4(r16)
1000841c:	10bdffcc 	andi	r2,r2,63487
10008420:	8080030d 	sth	r2,12(r16)
10008424:	80c00015 	stw	r3,0(r16)
10008428:	003fb706 	br	10008308 <__alt_data_end+0xf8008308>
1000842c:	98800017 	ldw	r2,0(r19)
10008430:	103feb26 	beq	r2,zero,100083e0 <__alt_data_end+0xf80083e0>
10008434:	00c00744 	movi	r3,29
10008438:	10c00226 	beq	r2,r3,10008444 <_fflush_r+0x20c>
1000843c:	00c00584 	movi	r3,22
10008440:	10ffd61e 	bne	r2,r3,1000839c <__alt_data_end+0xf800839c>
10008444:	9c400015 	stw	r17,0(r19)
10008448:	0005883a 	mov	r2,zero
1000844c:	003fb706 	br	1000832c <__alt_data_end+0xf800832c>
10008450:	80c0030b 	ldhu	r3,12(r16)
10008454:	18c01014 	ori	r3,r3,64
10008458:	80c0030d 	sth	r3,12(r16)
1000845c:	003fb306 	br	1000832c <__alt_data_end+0xf800832c>

10008460 <fflush>:
10008460:	20000526 	beq	r4,zero,10008478 <fflush+0x18>
10008464:	00840074 	movhi	r2,4097
10008468:	109a9704 	addi	r2,r2,27228
1000846c:	200b883a 	mov	r5,r4
10008470:	11000017 	ldw	r4,0(r2)
10008474:	00082381 	jmpi	10008238 <_fflush_r>
10008478:	00840074 	movhi	r2,4097
1000847c:	109a9604 	addi	r2,r2,27224
10008480:	11000017 	ldw	r4,0(r2)
10008484:	01440074 	movhi	r5,4097
10008488:	29608e04 	addi	r5,r5,-32200
1000848c:	00091b41 	jmpi	100091b4 <_fwalk_reent>

10008490 <__fp_lock>:
10008490:	0005883a 	mov	r2,zero
10008494:	f800283a 	ret

10008498 <__fp_unlock>:
10008498:	0005883a 	mov	r2,zero
1000849c:	f800283a 	ret

100084a0 <_cleanup_r>:
100084a0:	01440074 	movhi	r5,4097
100084a4:	29742204 	addi	r5,r5,-12152
100084a8:	00090fc1 	jmpi	100090fc <_fwalk>

100084ac <__sinit.part.1>:
100084ac:	defff604 	addi	sp,sp,-40
100084b0:	00c40074 	movhi	r3,4097
100084b4:	dfc00915 	stw	ra,36(sp)
100084b8:	df000815 	stw	fp,32(sp)
100084bc:	ddc00715 	stw	r23,28(sp)
100084c0:	dd800615 	stw	r22,24(sp)
100084c4:	dd400515 	stw	r21,20(sp)
100084c8:	dd000415 	stw	r20,16(sp)
100084cc:	dcc00315 	stw	r19,12(sp)
100084d0:	dc800215 	stw	r18,8(sp)
100084d4:	dc400115 	stw	r17,4(sp)
100084d8:	dc000015 	stw	r16,0(sp)
100084dc:	18e12804 	addi	r3,r3,-31584
100084e0:	24000117 	ldw	r16,4(r4)
100084e4:	20c00f15 	stw	r3,60(r4)
100084e8:	07000044 	movi	fp,1
100084ec:	00c000c4 	movi	r3,3
100084f0:	2080bb04 	addi	r2,r4,748
100084f4:	20c0b915 	stw	r3,740(r4)
100084f8:	27000e15 	stw	fp,56(r4)
100084fc:	2080ba15 	stw	r2,744(r4)
10008500:	2000b815 	stw	zero,736(r4)
10008504:	05c00204 	movi	r23,8
10008508:	00800104 	movi	r2,4
1000850c:	2025883a 	mov	r18,r4
10008510:	b80d883a 	mov	r6,r23
10008514:	81001704 	addi	r4,r16,92
10008518:	000b883a 	mov	r5,zero
1000851c:	80000015 	stw	zero,0(r16)
10008520:	80000115 	stw	zero,4(r16)
10008524:	80000215 	stw	zero,8(r16)
10008528:	8080030d 	sth	r2,12(r16)
1000852c:	80001915 	stw	zero,100(r16)
10008530:	8000038d 	sth	zero,14(r16)
10008534:	80000415 	stw	zero,16(r16)
10008538:	80000515 	stw	zero,20(r16)
1000853c:	80000615 	stw	zero,24(r16)
10008540:	0009ef00 	call	10009ef0 <memset>
10008544:	05840074 	movhi	r22,4097
10008548:	94400217 	ldw	r17,8(r18)
1000854c:	05440074 	movhi	r21,4097
10008550:	05040074 	movhi	r20,4097
10008554:	04c40074 	movhi	r19,4097
10008558:	b5adb104 	addi	r22,r22,-18748
1000855c:	ad6dc804 	addi	r21,r21,-18656
10008560:	a52de704 	addi	r20,r20,-18532
10008564:	9cedfe04 	addi	r19,r19,-18440
10008568:	85800815 	stw	r22,32(r16)
1000856c:	85400915 	stw	r21,36(r16)
10008570:	85000a15 	stw	r20,40(r16)
10008574:	84c00b15 	stw	r19,44(r16)
10008578:	84000715 	stw	r16,28(r16)
1000857c:	00800284 	movi	r2,10
10008580:	89001704 	addi	r4,r17,92
10008584:	b80d883a 	mov	r6,r23
10008588:	000b883a 	mov	r5,zero
1000858c:	88000015 	stw	zero,0(r17)
10008590:	88000115 	stw	zero,4(r17)
10008594:	88000215 	stw	zero,8(r17)
10008598:	8880030d 	sth	r2,12(r17)
1000859c:	88001915 	stw	zero,100(r17)
100085a0:	8f00038d 	sth	fp,14(r17)
100085a4:	88000415 	stw	zero,16(r17)
100085a8:	88000515 	stw	zero,20(r17)
100085ac:	88000615 	stw	zero,24(r17)
100085b0:	0009ef00 	call	10009ef0 <memset>
100085b4:	94000317 	ldw	r16,12(r18)
100085b8:	00800484 	movi	r2,18
100085bc:	8c400715 	stw	r17,28(r17)
100085c0:	8d800815 	stw	r22,32(r17)
100085c4:	8d400915 	stw	r21,36(r17)
100085c8:	8d000a15 	stw	r20,40(r17)
100085cc:	8cc00b15 	stw	r19,44(r17)
100085d0:	8080030d 	sth	r2,12(r16)
100085d4:	00800084 	movi	r2,2
100085d8:	80000015 	stw	zero,0(r16)
100085dc:	80000115 	stw	zero,4(r16)
100085e0:	80000215 	stw	zero,8(r16)
100085e4:	80001915 	stw	zero,100(r16)
100085e8:	8080038d 	sth	r2,14(r16)
100085ec:	80000415 	stw	zero,16(r16)
100085f0:	80000515 	stw	zero,20(r16)
100085f4:	80000615 	stw	zero,24(r16)
100085f8:	81001704 	addi	r4,r16,92
100085fc:	000b883a 	mov	r5,zero
10008600:	b80d883a 	mov	r6,r23
10008604:	0009ef00 	call	10009ef0 <memset>
10008608:	84000715 	stw	r16,28(r16)
1000860c:	85800815 	stw	r22,32(r16)
10008610:	85400915 	stw	r21,36(r16)
10008614:	85000a15 	stw	r20,40(r16)
10008618:	84c00b15 	stw	r19,44(r16)
1000861c:	dfc00917 	ldw	ra,36(sp)
10008620:	df000817 	ldw	fp,32(sp)
10008624:	ddc00717 	ldw	r23,28(sp)
10008628:	dd800617 	ldw	r22,24(sp)
1000862c:	dd400517 	ldw	r21,20(sp)
10008630:	dd000417 	ldw	r20,16(sp)
10008634:	dcc00317 	ldw	r19,12(sp)
10008638:	dc800217 	ldw	r18,8(sp)
1000863c:	dc400117 	ldw	r17,4(sp)
10008640:	dc000017 	ldw	r16,0(sp)
10008644:	dec00a04 	addi	sp,sp,40
10008648:	f800283a 	ret

1000864c <__sfmoreglue>:
1000864c:	defffc04 	addi	sp,sp,-16
10008650:	dc800215 	stw	r18,8(sp)
10008654:	2825883a 	mov	r18,r5
10008658:	dc000015 	stw	r16,0(sp)
1000865c:	01401a04 	movi	r5,104
10008660:	2021883a 	mov	r16,r4
10008664:	9009883a 	mov	r4,r18
10008668:	dfc00315 	stw	ra,12(sp)
1000866c:	dc400115 	stw	r17,4(sp)
10008670:	00030800 	call	10003080 <__mulsi3>
10008674:	8009883a 	mov	r4,r16
10008678:	11400304 	addi	r5,r2,12
1000867c:	1023883a 	mov	r17,r2
10008680:	00095040 	call	10009504 <_malloc_r>
10008684:	1021883a 	mov	r16,r2
10008688:	10000726 	beq	r2,zero,100086a8 <__sfmoreglue+0x5c>
1000868c:	11000304 	addi	r4,r2,12
10008690:	10000015 	stw	zero,0(r2)
10008694:	14800115 	stw	r18,4(r2)
10008698:	11000215 	stw	r4,8(r2)
1000869c:	000b883a 	mov	r5,zero
100086a0:	880d883a 	mov	r6,r17
100086a4:	0009ef00 	call	10009ef0 <memset>
100086a8:	8005883a 	mov	r2,r16
100086ac:	dfc00317 	ldw	ra,12(sp)
100086b0:	dc800217 	ldw	r18,8(sp)
100086b4:	dc400117 	ldw	r17,4(sp)
100086b8:	dc000017 	ldw	r16,0(sp)
100086bc:	dec00404 	addi	sp,sp,16
100086c0:	f800283a 	ret

100086c4 <__sfp>:
100086c4:	00840074 	movhi	r2,4097
100086c8:	defffb04 	addi	sp,sp,-20
100086cc:	109a9604 	addi	r2,r2,27224
100086d0:	dc800215 	stw	r18,8(sp)
100086d4:	14800017 	ldw	r18,0(r2)
100086d8:	dcc00315 	stw	r19,12(sp)
100086dc:	dfc00415 	stw	ra,16(sp)
100086e0:	90800e17 	ldw	r2,56(r18)
100086e4:	dc400115 	stw	r17,4(sp)
100086e8:	dc000015 	stw	r16,0(sp)
100086ec:	2027883a 	mov	r19,r4
100086f0:	1000021e 	bne	r2,zero,100086fc <__sfp+0x38>
100086f4:	9009883a 	mov	r4,r18
100086f8:	00084ac0 	call	100084ac <__sinit.part.1>
100086fc:	9480b804 	addi	r18,r18,736
10008700:	047fffc4 	movi	r17,-1
10008704:	91400117 	ldw	r5,4(r18)
10008708:	94000217 	ldw	r16,8(r18)
1000870c:	297fffc4 	addi	r5,r5,-1
10008710:	28000a16 	blt	r5,zero,1000873c <__sfp+0x78>
10008714:	8080030f 	ldh	r2,12(r16)
10008718:	10000c26 	beq	r2,zero,1000874c <__sfp+0x88>
1000871c:	80c01d04 	addi	r3,r16,116
10008720:	00000206 	br	1000872c <__sfp+0x68>
10008724:	18bfe60f 	ldh	r2,-104(r3)
10008728:	10000826 	beq	r2,zero,1000874c <__sfp+0x88>
1000872c:	297fffc4 	addi	r5,r5,-1
10008730:	1c3ffd04 	addi	r16,r3,-12
10008734:	18c01a04 	addi	r3,r3,104
10008738:	2c7ffa1e 	bne	r5,r17,10008724 <__alt_data_end+0xf8008724>
1000873c:	90800017 	ldw	r2,0(r18)
10008740:	10001d26 	beq	r2,zero,100087b8 <__sfp+0xf4>
10008744:	1025883a 	mov	r18,r2
10008748:	003fee06 	br	10008704 <__alt_data_end+0xf8008704>
1000874c:	00bfffc4 	movi	r2,-1
10008750:	8080038d 	sth	r2,14(r16)
10008754:	00800044 	movi	r2,1
10008758:	8080030d 	sth	r2,12(r16)
1000875c:	80001915 	stw	zero,100(r16)
10008760:	80000015 	stw	zero,0(r16)
10008764:	80000215 	stw	zero,8(r16)
10008768:	80000115 	stw	zero,4(r16)
1000876c:	80000415 	stw	zero,16(r16)
10008770:	80000515 	stw	zero,20(r16)
10008774:	80000615 	stw	zero,24(r16)
10008778:	81001704 	addi	r4,r16,92
1000877c:	000b883a 	mov	r5,zero
10008780:	01800204 	movi	r6,8
10008784:	0009ef00 	call	10009ef0 <memset>
10008788:	8005883a 	mov	r2,r16
1000878c:	80000c15 	stw	zero,48(r16)
10008790:	80000d15 	stw	zero,52(r16)
10008794:	80001115 	stw	zero,68(r16)
10008798:	80001215 	stw	zero,72(r16)
1000879c:	dfc00417 	ldw	ra,16(sp)
100087a0:	dcc00317 	ldw	r19,12(sp)
100087a4:	dc800217 	ldw	r18,8(sp)
100087a8:	dc400117 	ldw	r17,4(sp)
100087ac:	dc000017 	ldw	r16,0(sp)
100087b0:	dec00504 	addi	sp,sp,20
100087b4:	f800283a 	ret
100087b8:	9809883a 	mov	r4,r19
100087bc:	01400104 	movi	r5,4
100087c0:	000864c0 	call	1000864c <__sfmoreglue>
100087c4:	90800015 	stw	r2,0(r18)
100087c8:	103fde1e 	bne	r2,zero,10008744 <__alt_data_end+0xf8008744>
100087cc:	00800304 	movi	r2,12
100087d0:	98800015 	stw	r2,0(r19)
100087d4:	0005883a 	mov	r2,zero
100087d8:	003ff006 	br	1000879c <__alt_data_end+0xf800879c>

100087dc <_cleanup>:
100087dc:	00840074 	movhi	r2,4097
100087e0:	109a9604 	addi	r2,r2,27224
100087e4:	11000017 	ldw	r4,0(r2)
100087e8:	01440074 	movhi	r5,4097
100087ec:	29742204 	addi	r5,r5,-12152
100087f0:	00090fc1 	jmpi	100090fc <_fwalk>

100087f4 <__sinit>:
100087f4:	20800e17 	ldw	r2,56(r4)
100087f8:	10000126 	beq	r2,zero,10008800 <__sinit+0xc>
100087fc:	f800283a 	ret
10008800:	00084ac1 	jmpi	100084ac <__sinit.part.1>

10008804 <__sfp_lock_acquire>:
10008804:	f800283a 	ret

10008808 <__sfp_lock_release>:
10008808:	f800283a 	ret

1000880c <__sinit_lock_acquire>:
1000880c:	f800283a 	ret

10008810 <__sinit_lock_release>:
10008810:	f800283a 	ret

10008814 <__fp_lock_all>:
10008814:	00840074 	movhi	r2,4097
10008818:	109a9704 	addi	r2,r2,27228
1000881c:	11000017 	ldw	r4,0(r2)
10008820:	01440074 	movhi	r5,4097
10008824:	29612404 	addi	r5,r5,-31600
10008828:	00090fc1 	jmpi	100090fc <_fwalk>

1000882c <__fp_unlock_all>:
1000882c:	00840074 	movhi	r2,4097
10008830:	109a9704 	addi	r2,r2,27228
10008834:	11000017 	ldw	r4,0(r2)
10008838:	01440074 	movhi	r5,4097
1000883c:	29612604 	addi	r5,r5,-31592
10008840:	00090fc1 	jmpi	100090fc <_fwalk>

10008844 <_malloc_trim_r>:
10008844:	defffb04 	addi	sp,sp,-20
10008848:	dcc00315 	stw	r19,12(sp)
1000884c:	04c40074 	movhi	r19,4097
10008850:	dc800215 	stw	r18,8(sp)
10008854:	dc400115 	stw	r17,4(sp)
10008858:	dc000015 	stw	r16,0(sp)
1000885c:	dfc00415 	stw	ra,16(sp)
10008860:	2821883a 	mov	r16,r5
10008864:	9cd51204 	addi	r19,r19,21576
10008868:	2025883a 	mov	r18,r4
1000886c:	001088c0 	call	1001088c <__malloc_lock>
10008870:	98800217 	ldw	r2,8(r19)
10008874:	14400117 	ldw	r17,4(r2)
10008878:	00bfff04 	movi	r2,-4
1000887c:	88a2703a 	and	r17,r17,r2
10008880:	8c21c83a 	sub	r16,r17,r16
10008884:	8403fbc4 	addi	r16,r16,4079
10008888:	8020d33a 	srli	r16,r16,12
1000888c:	0083ffc4 	movi	r2,4095
10008890:	843fffc4 	addi	r16,r16,-1
10008894:	8020933a 	slli	r16,r16,12
10008898:	1400060e 	bge	r2,r16,100088b4 <_malloc_trim_r+0x70>
1000889c:	9009883a 	mov	r4,r18
100088a0:	000b883a 	mov	r5,zero
100088a4:	000b6700 	call	1000b670 <_sbrk_r>
100088a8:	98c00217 	ldw	r3,8(r19)
100088ac:	1c47883a 	add	r3,r3,r17
100088b0:	10c00a26 	beq	r2,r3,100088dc <_malloc_trim_r+0x98>
100088b4:	9009883a 	mov	r4,r18
100088b8:	00108b00 	call	100108b0 <__malloc_unlock>
100088bc:	0005883a 	mov	r2,zero
100088c0:	dfc00417 	ldw	ra,16(sp)
100088c4:	dcc00317 	ldw	r19,12(sp)
100088c8:	dc800217 	ldw	r18,8(sp)
100088cc:	dc400117 	ldw	r17,4(sp)
100088d0:	dc000017 	ldw	r16,0(sp)
100088d4:	dec00504 	addi	sp,sp,20
100088d8:	f800283a 	ret
100088dc:	9009883a 	mov	r4,r18
100088e0:	040bc83a 	sub	r5,zero,r16
100088e4:	000b6700 	call	1000b670 <_sbrk_r>
100088e8:	00ffffc4 	movi	r3,-1
100088ec:	10c00d26 	beq	r2,r3,10008924 <_malloc_trim_r+0xe0>
100088f0:	00c400b4 	movhi	r3,4098
100088f4:	18e16f04 	addi	r3,r3,-31300
100088f8:	18800017 	ldw	r2,0(r3)
100088fc:	99000217 	ldw	r4,8(r19)
10008900:	8c23c83a 	sub	r17,r17,r16
10008904:	8c400054 	ori	r17,r17,1
10008908:	1421c83a 	sub	r16,r2,r16
1000890c:	24400115 	stw	r17,4(r4)
10008910:	9009883a 	mov	r4,r18
10008914:	1c000015 	stw	r16,0(r3)
10008918:	00108b00 	call	100108b0 <__malloc_unlock>
1000891c:	00800044 	movi	r2,1
10008920:	003fe706 	br	100088c0 <__alt_data_end+0xf80088c0>
10008924:	9009883a 	mov	r4,r18
10008928:	000b883a 	mov	r5,zero
1000892c:	000b6700 	call	1000b670 <_sbrk_r>
10008930:	99000217 	ldw	r4,8(r19)
10008934:	014003c4 	movi	r5,15
10008938:	1107c83a 	sub	r3,r2,r4
1000893c:	28ffdd0e 	bge	r5,r3,100088b4 <__alt_data_end+0xf80088b4>
10008940:	01440074 	movhi	r5,4097
10008944:	295a9904 	addi	r5,r5,27236
10008948:	29400017 	ldw	r5,0(r5)
1000894c:	18c00054 	ori	r3,r3,1
10008950:	20c00115 	stw	r3,4(r4)
10008954:	00c400b4 	movhi	r3,4098
10008958:	1145c83a 	sub	r2,r2,r5
1000895c:	18e16f04 	addi	r3,r3,-31300
10008960:	18800015 	stw	r2,0(r3)
10008964:	003fd306 	br	100088b4 <__alt_data_end+0xf80088b4>

10008968 <_free_r>:
10008968:	28004c26 	beq	r5,zero,10008a9c <_free_r+0x134>
1000896c:	defffd04 	addi	sp,sp,-12
10008970:	dc400115 	stw	r17,4(sp)
10008974:	dc000015 	stw	r16,0(sp)
10008978:	2023883a 	mov	r17,r4
1000897c:	2821883a 	mov	r16,r5
10008980:	dfc00215 	stw	ra,8(sp)
10008984:	001088c0 	call	1001088c <__malloc_lock>
10008988:	813fff17 	ldw	r4,-4(r16)
1000898c:	00bfff84 	movi	r2,-2
10008990:	02440074 	movhi	r9,4097
10008994:	81bffe04 	addi	r6,r16,-8
10008998:	2084703a 	and	r2,r4,r2
1000899c:	4a551204 	addi	r9,r9,21576
100089a0:	308b883a 	add	r5,r6,r2
100089a4:	2a000117 	ldw	r8,4(r5)
100089a8:	49c00217 	ldw	r7,8(r9)
100089ac:	00ffff04 	movi	r3,-4
100089b0:	40c6703a 	and	r3,r8,r3
100089b4:	39405326 	beq	r7,r5,10008b04 <_free_r+0x19c>
100089b8:	28c00115 	stw	r3,4(r5)
100089bc:	2100004c 	andi	r4,r4,1
100089c0:	2000091e 	bne	r4,zero,100089e8 <_free_r+0x80>
100089c4:	81fffe17 	ldw	r7,-8(r16)
100089c8:	4a000204 	addi	r8,r9,8
100089cc:	31cdc83a 	sub	r6,r6,r7
100089d0:	31000217 	ldw	r4,8(r6)
100089d4:	11c5883a 	add	r2,r2,r7
100089d8:	22006126 	beq	r4,r8,10008b60 <_free_r+0x1f8>
100089dc:	31c00317 	ldw	r7,12(r6)
100089e0:	21c00315 	stw	r7,12(r4)
100089e4:	39000215 	stw	r4,8(r7)
100089e8:	28c9883a 	add	r4,r5,r3
100089ec:	21c00117 	ldw	r7,4(r4)
100089f0:	39c0004c 	andi	r7,r7,1
100089f4:	38000d1e 	bne	r7,zero,10008a2c <_free_r+0xc4>
100089f8:	29000217 	ldw	r4,8(r5)
100089fc:	10c5883a 	add	r2,r2,r3
10008a00:	00c40074 	movhi	r3,4097
10008a04:	18d51404 	addi	r3,r3,21584
10008a08:	20c07526 	beq	r4,r3,10008be0 <_free_r+0x278>
10008a0c:	29c00317 	ldw	r7,12(r5)
10008a10:	11400054 	ori	r5,r2,1
10008a14:	3087883a 	add	r3,r6,r2
10008a18:	21c00315 	stw	r7,12(r4)
10008a1c:	39000215 	stw	r4,8(r7)
10008a20:	31400115 	stw	r5,4(r6)
10008a24:	18800015 	stw	r2,0(r3)
10008a28:	00000406 	br	10008a3c <_free_r+0xd4>
10008a2c:	10c00054 	ori	r3,r2,1
10008a30:	30c00115 	stw	r3,4(r6)
10008a34:	3087883a 	add	r3,r6,r2
10008a38:	18800015 	stw	r2,0(r3)
10008a3c:	00c07fc4 	movi	r3,511
10008a40:	18801736 	bltu	r3,r2,10008aa0 <_free_r+0x138>
10008a44:	1004d0fa 	srli	r2,r2,3
10008a48:	01400044 	movi	r5,1
10008a4c:	49000117 	ldw	r4,4(r9)
10008a50:	1087883a 	add	r3,r2,r2
10008a54:	18c7883a 	add	r3,r3,r3
10008a58:	1005d0ba 	srai	r2,r2,2
10008a5c:	18c7883a 	add	r3,r3,r3
10008a60:	1a47883a 	add	r3,r3,r9
10008a64:	19c00217 	ldw	r7,8(r3)
10008a68:	2884983a 	sll	r2,r5,r2
10008a6c:	30c00315 	stw	r3,12(r6)
10008a70:	31c00215 	stw	r7,8(r6)
10008a74:	1104b03a 	or	r2,r2,r4
10008a78:	19800215 	stw	r6,8(r3)
10008a7c:	48800115 	stw	r2,4(r9)
10008a80:	39800315 	stw	r6,12(r7)
10008a84:	8809883a 	mov	r4,r17
10008a88:	dfc00217 	ldw	ra,8(sp)
10008a8c:	dc400117 	ldw	r17,4(sp)
10008a90:	dc000017 	ldw	r16,0(sp)
10008a94:	dec00304 	addi	sp,sp,12
10008a98:	00108b01 	jmpi	100108b0 <__malloc_unlock>
10008a9c:	f800283a 	ret
10008aa0:	1006d27a 	srli	r3,r2,9
10008aa4:	01000104 	movi	r4,4
10008aa8:	20c04036 	bltu	r4,r3,10008bac <_free_r+0x244>
10008aac:	1006d1ba 	srli	r3,r2,6
10008ab0:	19400e04 	addi	r5,r3,56
10008ab4:	2947883a 	add	r3,r5,r5
10008ab8:	18c7883a 	add	r3,r3,r3
10008abc:	18c7883a 	add	r3,r3,r3
10008ac0:	1a49883a 	add	r4,r3,r9
10008ac4:	20c00217 	ldw	r3,8(r4)
10008ac8:	01c40074 	movhi	r7,4097
10008acc:	39d51204 	addi	r7,r7,21576
10008ad0:	19003b26 	beq	r3,r4,10008bc0 <_free_r+0x258>
10008ad4:	01ffff04 	movi	r7,-4
10008ad8:	19400117 	ldw	r5,4(r3)
10008adc:	29ca703a 	and	r5,r5,r7
10008ae0:	1140022e 	bgeu	r2,r5,10008aec <_free_r+0x184>
10008ae4:	18c00217 	ldw	r3,8(r3)
10008ae8:	20fffb1e 	bne	r4,r3,10008ad8 <__alt_data_end+0xf8008ad8>
10008aec:	18800317 	ldw	r2,12(r3)
10008af0:	30800315 	stw	r2,12(r6)
10008af4:	30c00215 	stw	r3,8(r6)
10008af8:	11800215 	stw	r6,8(r2)
10008afc:	19800315 	stw	r6,12(r3)
10008b00:	003fe006 	br	10008a84 <__alt_data_end+0xf8008a84>
10008b04:	2100004c 	andi	r4,r4,1
10008b08:	1885883a 	add	r2,r3,r2
10008b0c:	2000071e 	bne	r4,zero,10008b2c <_free_r+0x1c4>
10008b10:	817ffe17 	ldw	r5,-8(r16)
10008b14:	314dc83a 	sub	r6,r6,r5
10008b18:	30c00317 	ldw	r3,12(r6)
10008b1c:	31000217 	ldw	r4,8(r6)
10008b20:	1145883a 	add	r2,r2,r5
10008b24:	20c00315 	stw	r3,12(r4)
10008b28:	19000215 	stw	r4,8(r3)
10008b2c:	10c00054 	ori	r3,r2,1
10008b30:	30c00115 	stw	r3,4(r6)
10008b34:	00c40074 	movhi	r3,4097
10008b38:	18da9a04 	addi	r3,r3,27240
10008b3c:	18c00017 	ldw	r3,0(r3)
10008b40:	49800215 	stw	r6,8(r9)
10008b44:	10ffcf36 	bltu	r2,r3,10008a84 <__alt_data_end+0xf8008a84>
10008b48:	008400b4 	movhi	r2,4098
10008b4c:	10a16704 	addi	r2,r2,-31332
10008b50:	11400017 	ldw	r5,0(r2)
10008b54:	8809883a 	mov	r4,r17
10008b58:	00088440 	call	10008844 <_malloc_trim_r>
10008b5c:	003fc906 	br	10008a84 <__alt_data_end+0xf8008a84>
10008b60:	28c9883a 	add	r4,r5,r3
10008b64:	21000117 	ldw	r4,4(r4)
10008b68:	2100004c 	andi	r4,r4,1
10008b6c:	20000a1e 	bne	r4,zero,10008b98 <_free_r+0x230>
10008b70:	29000317 	ldw	r4,12(r5)
10008b74:	29400217 	ldw	r5,8(r5)
10008b78:	10c5883a 	add	r2,r2,r3
10008b7c:	10c00054 	ori	r3,r2,1
10008b80:	29000315 	stw	r4,12(r5)
10008b84:	21400215 	stw	r5,8(r4)
10008b88:	30c00115 	stw	r3,4(r6)
10008b8c:	308d883a 	add	r6,r6,r2
10008b90:	30800015 	stw	r2,0(r6)
10008b94:	003fbb06 	br	10008a84 <__alt_data_end+0xf8008a84>
10008b98:	10c00054 	ori	r3,r2,1
10008b9c:	30c00115 	stw	r3,4(r6)
10008ba0:	308d883a 	add	r6,r6,r2
10008ba4:	30800015 	stw	r2,0(r6)
10008ba8:	003fb606 	br	10008a84 <__alt_data_end+0xf8008a84>
10008bac:	01000504 	movi	r4,20
10008bb0:	20c01436 	bltu	r4,r3,10008c04 <_free_r+0x29c>
10008bb4:	194016c4 	addi	r5,r3,91
10008bb8:	2947883a 	add	r3,r5,r5
10008bbc:	003fbe06 	br	10008ab8 <__alt_data_end+0xf8008ab8>
10008bc0:	280bd0ba 	srai	r5,r5,2
10008bc4:	00800044 	movi	r2,1
10008bc8:	39000117 	ldw	r4,4(r7)
10008bcc:	114a983a 	sll	r5,r2,r5
10008bd0:	1805883a 	mov	r2,r3
10008bd4:	2908b03a 	or	r4,r5,r4
10008bd8:	39000115 	stw	r4,4(r7)
10008bdc:	003fc406 	br	10008af0 <__alt_data_end+0xf8008af0>
10008be0:	49800515 	stw	r6,20(r9)
10008be4:	49800415 	stw	r6,16(r9)
10008be8:	10c00054 	ori	r3,r2,1
10008bec:	31000315 	stw	r4,12(r6)
10008bf0:	31000215 	stw	r4,8(r6)
10008bf4:	30c00115 	stw	r3,4(r6)
10008bf8:	308d883a 	add	r6,r6,r2
10008bfc:	30800015 	stw	r2,0(r6)
10008c00:	003fa006 	br	10008a84 <__alt_data_end+0xf8008a84>
10008c04:	01001504 	movi	r4,84
10008c08:	20c00436 	bltu	r4,r3,10008c1c <_free_r+0x2b4>
10008c0c:	1006d33a 	srli	r3,r2,12
10008c10:	19401b84 	addi	r5,r3,110
10008c14:	2947883a 	add	r3,r5,r5
10008c18:	003fa706 	br	10008ab8 <__alt_data_end+0xf8008ab8>
10008c1c:	01005504 	movi	r4,340
10008c20:	20c00436 	bltu	r4,r3,10008c34 <_free_r+0x2cc>
10008c24:	1006d3fa 	srli	r3,r2,15
10008c28:	19401dc4 	addi	r5,r3,119
10008c2c:	2947883a 	add	r3,r5,r5
10008c30:	003fa106 	br	10008ab8 <__alt_data_end+0xf8008ab8>
10008c34:	01015504 	movi	r4,1364
10008c38:	20c00436 	bltu	r4,r3,10008c4c <_free_r+0x2e4>
10008c3c:	1006d4ba 	srli	r3,r2,18
10008c40:	19401f04 	addi	r5,r3,124
10008c44:	2947883a 	add	r3,r5,r5
10008c48:	003f9b06 	br	10008ab8 <__alt_data_end+0xf8008ab8>
10008c4c:	00c03f04 	movi	r3,252
10008c50:	01401f84 	movi	r5,126
10008c54:	003f9806 	br	10008ab8 <__alt_data_end+0xf8008ab8>

10008c58 <__sfvwrite_r>:
10008c58:	30800217 	ldw	r2,8(r6)
10008c5c:	10004526 	beq	r2,zero,10008d74 <__sfvwrite_r+0x11c>
10008c60:	28c0030b 	ldhu	r3,12(r5)
10008c64:	defff404 	addi	sp,sp,-48
10008c68:	dd400715 	stw	r21,28(sp)
10008c6c:	dcc00515 	stw	r19,20(sp)
10008c70:	dc000215 	stw	r16,8(sp)
10008c74:	dfc00b15 	stw	ra,44(sp)
10008c78:	df000a15 	stw	fp,40(sp)
10008c7c:	ddc00915 	stw	r23,36(sp)
10008c80:	dd800815 	stw	r22,32(sp)
10008c84:	dd000615 	stw	r20,24(sp)
10008c88:	dc800415 	stw	r18,16(sp)
10008c8c:	dc400315 	stw	r17,12(sp)
10008c90:	1880020c 	andi	r2,r3,8
10008c94:	2821883a 	mov	r16,r5
10008c98:	202b883a 	mov	r21,r4
10008c9c:	3027883a 	mov	r19,r6
10008ca0:	10002526 	beq	r2,zero,10008d38 <__sfvwrite_r+0xe0>
10008ca4:	28800417 	ldw	r2,16(r5)
10008ca8:	10002326 	beq	r2,zero,10008d38 <__sfvwrite_r+0xe0>
10008cac:	1880008c 	andi	r2,r3,2
10008cb0:	9c400017 	ldw	r17,0(r19)
10008cb4:	10003126 	beq	r2,zero,10008d7c <__sfvwrite_r+0x124>
10008cb8:	0029883a 	mov	r20,zero
10008cbc:	0025883a 	mov	r18,zero
10008cc0:	05810004 	movi	r22,1024
10008cc4:	a00d883a 	mov	r6,r20
10008cc8:	a809883a 	mov	r4,r21
10008ccc:	90002526 	beq	r18,zero,10008d64 <__sfvwrite_r+0x10c>
10008cd0:	900f883a 	mov	r7,r18
10008cd4:	81400717 	ldw	r5,28(r16)
10008cd8:	b480012e 	bgeu	r22,r18,10008ce0 <__sfvwrite_r+0x88>
10008cdc:	01c10004 	movi	r7,1024
10008ce0:	80800917 	ldw	r2,36(r16)
10008ce4:	103ee83a 	callr	r2
10008ce8:	0080510e 	bge	zero,r2,10008e30 <__sfvwrite_r+0x1d8>
10008cec:	98c00217 	ldw	r3,8(r19)
10008cf0:	a0a9883a 	add	r20,r20,r2
10008cf4:	90a5c83a 	sub	r18,r18,r2
10008cf8:	1885c83a 	sub	r2,r3,r2
10008cfc:	98800215 	stw	r2,8(r19)
10008d00:	103ff01e 	bne	r2,zero,10008cc4 <__alt_data_end+0xf8008cc4>
10008d04:	0005883a 	mov	r2,zero
10008d08:	dfc00b17 	ldw	ra,44(sp)
10008d0c:	df000a17 	ldw	fp,40(sp)
10008d10:	ddc00917 	ldw	r23,36(sp)
10008d14:	dd800817 	ldw	r22,32(sp)
10008d18:	dd400717 	ldw	r21,28(sp)
10008d1c:	dd000617 	ldw	r20,24(sp)
10008d20:	dcc00517 	ldw	r19,20(sp)
10008d24:	dc800417 	ldw	r18,16(sp)
10008d28:	dc400317 	ldw	r17,12(sp)
10008d2c:	dc000217 	ldw	r16,8(sp)
10008d30:	dec00c04 	addi	sp,sp,48
10008d34:	f800283a 	ret
10008d38:	a809883a 	mov	r4,r21
10008d3c:	800b883a 	mov	r5,r16
10008d40:	00067b80 	call	100067b8 <__swsetup_r>
10008d44:	80c0030b 	ldhu	r3,12(r16)
10008d48:	103fd826 	beq	r2,zero,10008cac <__alt_data_end+0xf8008cac>
10008d4c:	18c01014 	ori	r3,r3,64
10008d50:	80c0030d 	sth	r3,12(r16)
10008d54:	00c00244 	movi	r3,9
10008d58:	00bfffc4 	movi	r2,-1
10008d5c:	a8c00015 	stw	r3,0(r21)
10008d60:	003fe906 	br	10008d08 <__alt_data_end+0xf8008d08>
10008d64:	8d000017 	ldw	r20,0(r17)
10008d68:	8c800117 	ldw	r18,4(r17)
10008d6c:	8c400204 	addi	r17,r17,8
10008d70:	003fd406 	br	10008cc4 <__alt_data_end+0xf8008cc4>
10008d74:	0005883a 	mov	r2,zero
10008d78:	f800283a 	ret
10008d7c:	1880004c 	andi	r2,r3,1
10008d80:	1000301e 	bne	r2,zero,10008e44 <__sfvwrite_r+0x1ec>
10008d84:	002f883a 	mov	r23,zero
10008d88:	0025883a 	mov	r18,zero
10008d8c:	90001c26 	beq	r18,zero,10008e00 <__sfvwrite_r+0x1a8>
10008d90:	1880800c 	andi	r2,r3,512
10008d94:	85000217 	ldw	r20,8(r16)
10008d98:	10006c26 	beq	r2,zero,10008f4c <__sfvwrite_r+0x2f4>
10008d9c:	a02d883a 	mov	r22,r20
10008da0:	95008536 	bltu	r18,r20,10008fb8 <__sfvwrite_r+0x360>
10008da4:	1881200c 	andi	r2,r3,1152
10008da8:	10009d1e 	bne	r2,zero,10009020 <__sfvwrite_r+0x3c8>
10008dac:	81000017 	ldw	r4,0(r16)
10008db0:	a039883a 	mov	fp,r20
10008db4:	9029883a 	mov	r20,r18
10008db8:	b80b883a 	mov	r5,r23
10008dbc:	b00d883a 	mov	r6,r22
10008dc0:	0009d940 	call	10009d94 <memmove>
10008dc4:	80c00217 	ldw	r3,8(r16)
10008dc8:	81000017 	ldw	r4,0(r16)
10008dcc:	9005883a 	mov	r2,r18
10008dd0:	1f39c83a 	sub	fp,r3,fp
10008dd4:	258f883a 	add	r7,r4,r22
10008dd8:	87000215 	stw	fp,8(r16)
10008ddc:	81c00015 	stw	r7,0(r16)
10008de0:	98c00217 	ldw	r3,8(r19)
10008de4:	b8af883a 	add	r23,r23,r2
10008de8:	90a5c83a 	sub	r18,r18,r2
10008dec:	1d05c83a 	sub	r2,r3,r20
10008df0:	98800215 	stw	r2,8(r19)
10008df4:	103fc326 	beq	r2,zero,10008d04 <__alt_data_end+0xf8008d04>
10008df8:	80c0030b 	ldhu	r3,12(r16)
10008dfc:	903fe41e 	bne	r18,zero,10008d90 <__alt_data_end+0xf8008d90>
10008e00:	8dc00017 	ldw	r23,0(r17)
10008e04:	8c800117 	ldw	r18,4(r17)
10008e08:	8c400204 	addi	r17,r17,8
10008e0c:	003fdf06 	br	10008d8c <__alt_data_end+0xf8008d8c>
10008e10:	000b05c0 	call	1000b05c <_realloc_r>
10008e14:	102d883a 	mov	r22,r2
10008e18:	1000a01e 	bne	r2,zero,1000909c <__sfvwrite_r+0x444>
10008e1c:	81400417 	ldw	r5,16(r16)
10008e20:	a809883a 	mov	r4,r21
10008e24:	00089680 	call	10008968 <_free_r>
10008e28:	00800304 	movi	r2,12
10008e2c:	a8800015 	stw	r2,0(r21)
10008e30:	80c0030b 	ldhu	r3,12(r16)
10008e34:	00bfffc4 	movi	r2,-1
10008e38:	18c01014 	ori	r3,r3,64
10008e3c:	80c0030d 	sth	r3,12(r16)
10008e40:	003fb106 	br	10008d08 <__alt_data_end+0xf8008d08>
10008e44:	0029883a 	mov	r20,zero
10008e48:	0011883a 	mov	r8,zero
10008e4c:	0039883a 	mov	fp,zero
10008e50:	0025883a 	mov	r18,zero
10008e54:	90001f26 	beq	r18,zero,10008ed4 <__sfvwrite_r+0x27c>
10008e58:	40006826 	beq	r8,zero,10008ffc <__sfvwrite_r+0x3a4>
10008e5c:	a02f883a 	mov	r23,r20
10008e60:	9500012e 	bgeu	r18,r20,10008e68 <__sfvwrite_r+0x210>
10008e64:	902f883a 	mov	r23,r18
10008e68:	81000017 	ldw	r4,0(r16)
10008e6c:	80800417 	ldw	r2,16(r16)
10008e70:	b82d883a 	mov	r22,r23
10008e74:	81800217 	ldw	r6,8(r16)
10008e78:	81c00517 	ldw	r7,20(r16)
10008e7c:	1100022e 	bgeu	r2,r4,10008e88 <__sfvwrite_r+0x230>
10008e80:	31c7883a 	add	r3,r6,r7
10008e84:	1dc01816 	blt	r3,r23,10008ee8 <__sfvwrite_r+0x290>
10008e88:	b9c03f16 	blt	r23,r7,10008f88 <__sfvwrite_r+0x330>
10008e8c:	80800917 	ldw	r2,36(r16)
10008e90:	81400717 	ldw	r5,28(r16)
10008e94:	a809883a 	mov	r4,r21
10008e98:	da000115 	stw	r8,4(sp)
10008e9c:	e00d883a 	mov	r6,fp
10008ea0:	103ee83a 	callr	r2
10008ea4:	102d883a 	mov	r22,r2
10008ea8:	da000117 	ldw	r8,4(sp)
10008eac:	00bfe00e 	bge	zero,r2,10008e30 <__alt_data_end+0xf8008e30>
10008eb0:	a5a9c83a 	sub	r20,r20,r22
10008eb4:	a0001f26 	beq	r20,zero,10008f34 <__sfvwrite_r+0x2dc>
10008eb8:	98800217 	ldw	r2,8(r19)
10008ebc:	e5b9883a 	add	fp,fp,r22
10008ec0:	95a5c83a 	sub	r18,r18,r22
10008ec4:	15adc83a 	sub	r22,r2,r22
10008ec8:	9d800215 	stw	r22,8(r19)
10008ecc:	b03f8d26 	beq	r22,zero,10008d04 <__alt_data_end+0xf8008d04>
10008ed0:	903fe11e 	bne	r18,zero,10008e58 <__alt_data_end+0xf8008e58>
10008ed4:	8f000017 	ldw	fp,0(r17)
10008ed8:	8c800117 	ldw	r18,4(r17)
10008edc:	0011883a 	mov	r8,zero
10008ee0:	8c400204 	addi	r17,r17,8
10008ee4:	003fdb06 	br	10008e54 <__alt_data_end+0xf8008e54>
10008ee8:	180d883a 	mov	r6,r3
10008eec:	e00b883a 	mov	r5,fp
10008ef0:	da000115 	stw	r8,4(sp)
10008ef4:	d8c00015 	stw	r3,0(sp)
10008ef8:	0009d940 	call	10009d94 <memmove>
10008efc:	d8c00017 	ldw	r3,0(sp)
10008f00:	80800017 	ldw	r2,0(r16)
10008f04:	a809883a 	mov	r4,r21
10008f08:	800b883a 	mov	r5,r16
10008f0c:	10c5883a 	add	r2,r2,r3
10008f10:	80800015 	stw	r2,0(r16)
10008f14:	d8c00015 	stw	r3,0(sp)
10008f18:	00082380 	call	10008238 <_fflush_r>
10008f1c:	d8c00017 	ldw	r3,0(sp)
10008f20:	da000117 	ldw	r8,4(sp)
10008f24:	103fc21e 	bne	r2,zero,10008e30 <__alt_data_end+0xf8008e30>
10008f28:	182d883a 	mov	r22,r3
10008f2c:	a5a9c83a 	sub	r20,r20,r22
10008f30:	a03fe11e 	bne	r20,zero,10008eb8 <__alt_data_end+0xf8008eb8>
10008f34:	a809883a 	mov	r4,r21
10008f38:	800b883a 	mov	r5,r16
10008f3c:	00082380 	call	10008238 <_fflush_r>
10008f40:	103fbb1e 	bne	r2,zero,10008e30 <__alt_data_end+0xf8008e30>
10008f44:	0011883a 	mov	r8,zero
10008f48:	003fdb06 	br	10008eb8 <__alt_data_end+0xf8008eb8>
10008f4c:	81000017 	ldw	r4,0(r16)
10008f50:	80800417 	ldw	r2,16(r16)
10008f54:	1100012e 	bgeu	r2,r4,10008f5c <__sfvwrite_r+0x304>
10008f58:	a4805a36 	bltu	r20,r18,100090c4 <__sfvwrite_r+0x46c>
10008f5c:	81c00517 	ldw	r7,20(r16)
10008f60:	91c01a36 	bltu	r18,r7,10008fcc <__sfvwrite_r+0x374>
10008f64:	80800917 	ldw	r2,36(r16)
10008f68:	81400717 	ldw	r5,28(r16)
10008f6c:	a809883a 	mov	r4,r21
10008f70:	b80d883a 	mov	r6,r23
10008f74:	103ee83a 	callr	r2
10008f78:	1029883a 	mov	r20,r2
10008f7c:	00bfac0e 	bge	zero,r2,10008e30 <__alt_data_end+0xf8008e30>
10008f80:	a005883a 	mov	r2,r20
10008f84:	003f9606 	br	10008de0 <__alt_data_end+0xf8008de0>
10008f88:	b80d883a 	mov	r6,r23
10008f8c:	e00b883a 	mov	r5,fp
10008f90:	da000115 	stw	r8,4(sp)
10008f94:	0009d940 	call	10009d94 <memmove>
10008f98:	80800217 	ldw	r2,8(r16)
10008f9c:	80c00017 	ldw	r3,0(r16)
10008fa0:	da000117 	ldw	r8,4(sp)
10008fa4:	15c5c83a 	sub	r2,r2,r23
10008fa8:	1def883a 	add	r23,r3,r23
10008fac:	80800215 	stw	r2,8(r16)
10008fb0:	85c00015 	stw	r23,0(r16)
10008fb4:	003fbe06 	br	10008eb0 <__alt_data_end+0xf8008eb0>
10008fb8:	81000017 	ldw	r4,0(r16)
10008fbc:	9039883a 	mov	fp,r18
10008fc0:	9029883a 	mov	r20,r18
10008fc4:	902d883a 	mov	r22,r18
10008fc8:	003f7b06 	br	10008db8 <__alt_data_end+0xf8008db8>
10008fcc:	b80b883a 	mov	r5,r23
10008fd0:	900d883a 	mov	r6,r18
10008fd4:	0009d940 	call	10009d94 <memmove>
10008fd8:	80c00217 	ldw	r3,8(r16)
10008fdc:	80800017 	ldw	r2,0(r16)
10008fe0:	9029883a 	mov	r20,r18
10008fe4:	1c87c83a 	sub	r3,r3,r18
10008fe8:	1485883a 	add	r2,r2,r18
10008fec:	80800015 	stw	r2,0(r16)
10008ff0:	80c00215 	stw	r3,8(r16)
10008ff4:	9005883a 	mov	r2,r18
10008ff8:	003f7906 	br	10008de0 <__alt_data_end+0xf8008de0>
10008ffc:	e009883a 	mov	r4,fp
10009000:	01400284 	movi	r5,10
10009004:	900d883a 	mov	r6,r18
10009008:	0009cac0 	call	10009cac <memchr>
1000900c:	10003826 	beq	r2,zero,100090f0 <__sfvwrite_r+0x498>
10009010:	10800044 	addi	r2,r2,1
10009014:	1729c83a 	sub	r20,r2,fp
10009018:	02000044 	movi	r8,1
1000901c:	003f8f06 	br	10008e5c <__alt_data_end+0xf8008e5c>
10009020:	80800517 	ldw	r2,20(r16)
10009024:	81400417 	ldw	r5,16(r16)
10009028:	87000017 	ldw	fp,0(r16)
1000902c:	10a9883a 	add	r20,r2,r2
10009030:	a085883a 	add	r2,r20,r2
10009034:	1028d7fa 	srli	r20,r2,31
10009038:	e179c83a 	sub	fp,fp,r5
1000903c:	e1000044 	addi	r4,fp,1
10009040:	a085883a 	add	r2,r20,r2
10009044:	1029d07a 	srai	r20,r2,1
10009048:	2485883a 	add	r2,r4,r18
1000904c:	a00d883a 	mov	r6,r20
10009050:	a080022e 	bgeu	r20,r2,1000905c <__sfvwrite_r+0x404>
10009054:	1029883a 	mov	r20,r2
10009058:	100d883a 	mov	r6,r2
1000905c:	18c1000c 	andi	r3,r3,1024
10009060:	a809883a 	mov	r4,r21
10009064:	183f6a26 	beq	r3,zero,10008e10 <__alt_data_end+0xf8008e10>
10009068:	300b883a 	mov	r5,r6
1000906c:	00095040 	call	10009504 <_malloc_r>
10009070:	102d883a 	mov	r22,r2
10009074:	103f6c26 	beq	r2,zero,10008e28 <__alt_data_end+0xf8008e28>
10009078:	81400417 	ldw	r5,16(r16)
1000907c:	1009883a 	mov	r4,r2
10009080:	e00d883a 	mov	r6,fp
10009084:	00043940 	call	10004394 <memcpy>
10009088:	8080030b 	ldhu	r2,12(r16)
1000908c:	00fedfc4 	movi	r3,-1153
10009090:	10c4703a 	and	r2,r2,r3
10009094:	10802014 	ori	r2,r2,128
10009098:	8080030d 	sth	r2,12(r16)
1000909c:	b709883a 	add	r4,r22,fp
100090a0:	a707c83a 	sub	r3,r20,fp
100090a4:	85800415 	stw	r22,16(r16)
100090a8:	85000515 	stw	r20,20(r16)
100090ac:	81000015 	stw	r4,0(r16)
100090b0:	9039883a 	mov	fp,r18
100090b4:	80c00215 	stw	r3,8(r16)
100090b8:	9029883a 	mov	r20,r18
100090bc:	902d883a 	mov	r22,r18
100090c0:	003f3d06 	br	10008db8 <__alt_data_end+0xf8008db8>
100090c4:	b80b883a 	mov	r5,r23
100090c8:	a00d883a 	mov	r6,r20
100090cc:	0009d940 	call	10009d94 <memmove>
100090d0:	80800017 	ldw	r2,0(r16)
100090d4:	a809883a 	mov	r4,r21
100090d8:	800b883a 	mov	r5,r16
100090dc:	1505883a 	add	r2,r2,r20
100090e0:	80800015 	stw	r2,0(r16)
100090e4:	00082380 	call	10008238 <_fflush_r>
100090e8:	103fa526 	beq	r2,zero,10008f80 <__alt_data_end+0xf8008f80>
100090ec:	003f5006 	br	10008e30 <__alt_data_end+0xf8008e30>
100090f0:	95000044 	addi	r20,r18,1
100090f4:	02000044 	movi	r8,1
100090f8:	003f5806 	br	10008e5c <__alt_data_end+0xf8008e5c>

100090fc <_fwalk>:
100090fc:	defff804 	addi	sp,sp,-32
10009100:	dd400515 	stw	r21,20(sp)
10009104:	2540b804 	addi	r21,r4,736
10009108:	dd800615 	stw	r22,24(sp)
1000910c:	dd000415 	stw	r20,16(sp)
10009110:	dfc00715 	stw	ra,28(sp)
10009114:	dcc00315 	stw	r19,12(sp)
10009118:	dc800215 	stw	r18,8(sp)
1000911c:	dc400115 	stw	r17,4(sp)
10009120:	dc000015 	stw	r16,0(sp)
10009124:	2829883a 	mov	r20,r5
10009128:	002d883a 	mov	r22,zero
1000912c:	00088040 	call	10008804 <__sfp_lock_acquire>
10009130:	a8001426 	beq	r21,zero,10009184 <_fwalk+0x88>
10009134:	04ffffc4 	movi	r19,-1
10009138:	ac400117 	ldw	r17,4(r21)
1000913c:	ac800217 	ldw	r18,8(r21)
10009140:	8c7fffc4 	addi	r17,r17,-1
10009144:	88000d16 	blt	r17,zero,1000917c <_fwalk+0x80>
10009148:	94000304 	addi	r16,r18,12
1000914c:	94800384 	addi	r18,r18,14
10009150:	80c0000f 	ldh	r3,0(r16)
10009154:	8c7fffc4 	addi	r17,r17,-1
10009158:	813ffd04 	addi	r4,r16,-12
1000915c:	18000426 	beq	r3,zero,10009170 <_fwalk+0x74>
10009160:	90c0000f 	ldh	r3,0(r18)
10009164:	1cc00226 	beq	r3,r19,10009170 <_fwalk+0x74>
10009168:	a03ee83a 	callr	r20
1000916c:	b0acb03a 	or	r22,r22,r2
10009170:	84001a04 	addi	r16,r16,104
10009174:	94801a04 	addi	r18,r18,104
10009178:	8cfff51e 	bne	r17,r19,10009150 <__alt_data_end+0xf8009150>
1000917c:	ad400017 	ldw	r21,0(r21)
10009180:	a83fed1e 	bne	r21,zero,10009138 <__alt_data_end+0xf8009138>
10009184:	00088080 	call	10008808 <__sfp_lock_release>
10009188:	b005883a 	mov	r2,r22
1000918c:	dfc00717 	ldw	ra,28(sp)
10009190:	dd800617 	ldw	r22,24(sp)
10009194:	dd400517 	ldw	r21,20(sp)
10009198:	dd000417 	ldw	r20,16(sp)
1000919c:	dcc00317 	ldw	r19,12(sp)
100091a0:	dc800217 	ldw	r18,8(sp)
100091a4:	dc400117 	ldw	r17,4(sp)
100091a8:	dc000017 	ldw	r16,0(sp)
100091ac:	dec00804 	addi	sp,sp,32
100091b0:	f800283a 	ret

100091b4 <_fwalk_reent>:
100091b4:	defff804 	addi	sp,sp,-32
100091b8:	dd400515 	stw	r21,20(sp)
100091bc:	2540b804 	addi	r21,r4,736
100091c0:	dd800615 	stw	r22,24(sp)
100091c4:	dd000415 	stw	r20,16(sp)
100091c8:	dcc00315 	stw	r19,12(sp)
100091cc:	dfc00715 	stw	ra,28(sp)
100091d0:	dc800215 	stw	r18,8(sp)
100091d4:	dc400115 	stw	r17,4(sp)
100091d8:	dc000015 	stw	r16,0(sp)
100091dc:	2027883a 	mov	r19,r4
100091e0:	2829883a 	mov	r20,r5
100091e4:	002d883a 	mov	r22,zero
100091e8:	00088040 	call	10008804 <__sfp_lock_acquire>
100091ec:	a8001326 	beq	r21,zero,1000923c <_fwalk_reent+0x88>
100091f0:	04bfffc4 	movi	r18,-1
100091f4:	ac400117 	ldw	r17,4(r21)
100091f8:	ac000217 	ldw	r16,8(r21)
100091fc:	8c7fffc4 	addi	r17,r17,-1
10009200:	88000c16 	blt	r17,zero,10009234 <_fwalk_reent+0x80>
10009204:	84000304 	addi	r16,r16,12
10009208:	80c0000f 	ldh	r3,0(r16)
1000920c:	8c7fffc4 	addi	r17,r17,-1
10009210:	817ffd04 	addi	r5,r16,-12
10009214:	18000526 	beq	r3,zero,1000922c <_fwalk_reent+0x78>
10009218:	80c0008f 	ldh	r3,2(r16)
1000921c:	9809883a 	mov	r4,r19
10009220:	1c800226 	beq	r3,r18,1000922c <_fwalk_reent+0x78>
10009224:	a03ee83a 	callr	r20
10009228:	b0acb03a 	or	r22,r22,r2
1000922c:	84001a04 	addi	r16,r16,104
10009230:	8cbff51e 	bne	r17,r18,10009208 <__alt_data_end+0xf8009208>
10009234:	ad400017 	ldw	r21,0(r21)
10009238:	a83fee1e 	bne	r21,zero,100091f4 <__alt_data_end+0xf80091f4>
1000923c:	00088080 	call	10008808 <__sfp_lock_release>
10009240:	b005883a 	mov	r2,r22
10009244:	dfc00717 	ldw	ra,28(sp)
10009248:	dd800617 	ldw	r22,24(sp)
1000924c:	dd400517 	ldw	r21,20(sp)
10009250:	dd000417 	ldw	r20,16(sp)
10009254:	dcc00317 	ldw	r19,12(sp)
10009258:	dc800217 	ldw	r18,8(sp)
1000925c:	dc400117 	ldw	r17,4(sp)
10009260:	dc000017 	ldw	r16,0(sp)
10009264:	dec00804 	addi	sp,sp,32
10009268:	f800283a 	ret

1000926c <_setlocale_r>:
1000926c:	30001b26 	beq	r6,zero,100092dc <_setlocale_r+0x70>
10009270:	01440074 	movhi	r5,4097
10009274:	defffe04 	addi	sp,sp,-8
10009278:	29538a04 	addi	r5,r5,20008
1000927c:	3009883a 	mov	r4,r6
10009280:	dc000015 	stw	r16,0(sp)
10009284:	dfc00115 	stw	ra,4(sp)
10009288:	3021883a 	mov	r16,r6
1000928c:	000b8000 	call	1000b800 <strcmp>
10009290:	1000061e 	bne	r2,zero,100092ac <_setlocale_r+0x40>
10009294:	00840074 	movhi	r2,4097
10009298:	10938904 	addi	r2,r2,20004
1000929c:	dfc00117 	ldw	ra,4(sp)
100092a0:	dc000017 	ldw	r16,0(sp)
100092a4:	dec00204 	addi	sp,sp,8
100092a8:	f800283a 	ret
100092ac:	01440074 	movhi	r5,4097
100092b0:	29538904 	addi	r5,r5,20004
100092b4:	8009883a 	mov	r4,r16
100092b8:	000b8000 	call	1000b800 <strcmp>
100092bc:	103ff526 	beq	r2,zero,10009294 <__alt_data_end+0xf8009294>
100092c0:	01440074 	movhi	r5,4097
100092c4:	29537404 	addi	r5,r5,19920
100092c8:	8009883a 	mov	r4,r16
100092cc:	000b8000 	call	1000b800 <strcmp>
100092d0:	103ff026 	beq	r2,zero,10009294 <__alt_data_end+0xf8009294>
100092d4:	0005883a 	mov	r2,zero
100092d8:	003ff006 	br	1000929c <__alt_data_end+0xf800929c>
100092dc:	00840074 	movhi	r2,4097
100092e0:	10938904 	addi	r2,r2,20004
100092e4:	f800283a 	ret

100092e8 <__locale_charset>:
100092e8:	00840074 	movhi	r2,4097
100092ec:	1094fc04 	addi	r2,r2,21488
100092f0:	f800283a 	ret

100092f4 <__locale_mb_cur_max>:
100092f4:	00840074 	movhi	r2,4097
100092f8:	109a9804 	addi	r2,r2,27232
100092fc:	10800017 	ldw	r2,0(r2)
10009300:	f800283a 	ret

10009304 <__locale_msgcharset>:
10009304:	00840074 	movhi	r2,4097
10009308:	1094f404 	addi	r2,r2,21456
1000930c:	f800283a 	ret

10009310 <__locale_cjk_lang>:
10009310:	0005883a 	mov	r2,zero
10009314:	f800283a 	ret

10009318 <_localeconv_r>:
10009318:	00840074 	movhi	r2,4097
1000931c:	10950404 	addi	r2,r2,21520
10009320:	f800283a 	ret

10009324 <setlocale>:
10009324:	00c40074 	movhi	r3,4097
10009328:	18da9704 	addi	r3,r3,27228
1000932c:	2005883a 	mov	r2,r4
10009330:	19000017 	ldw	r4,0(r3)
10009334:	280d883a 	mov	r6,r5
10009338:	100b883a 	mov	r5,r2
1000933c:	000926c1 	jmpi	1000926c <_setlocale_r>

10009340 <localeconv>:
10009340:	00840074 	movhi	r2,4097
10009344:	10950404 	addi	r2,r2,21520
10009348:	f800283a 	ret

1000934c <__smakebuf_r>:
1000934c:	2880030b 	ldhu	r2,12(r5)
10009350:	10c0008c 	andi	r3,r2,2
10009354:	1800401e 	bne	r3,zero,10009458 <__smakebuf_r+0x10c>
10009358:	deffec04 	addi	sp,sp,-80
1000935c:	dc000f15 	stw	r16,60(sp)
10009360:	2821883a 	mov	r16,r5
10009364:	2940038f 	ldh	r5,14(r5)
10009368:	dc401015 	stw	r17,64(sp)
1000936c:	dfc01315 	stw	ra,76(sp)
10009370:	dcc01215 	stw	r19,72(sp)
10009374:	dc801115 	stw	r18,68(sp)
10009378:	2023883a 	mov	r17,r4
1000937c:	28001b16 	blt	r5,zero,100093ec <__smakebuf_r+0xa0>
10009380:	d80d883a 	mov	r6,sp
10009384:	000d2780 	call	1000d278 <_fstat_r>
10009388:	10001716 	blt	r2,zero,100093e8 <__smakebuf_r+0x9c>
1000938c:	d8800117 	ldw	r2,4(sp)
10009390:	00e00014 	movui	r3,32768
10009394:	10bc000c 	andi	r2,r2,61440
10009398:	10c03726 	beq	r2,r3,10009478 <__smakebuf_r+0x12c>
1000939c:	80c0030b 	ldhu	r3,12(r16)
100093a0:	18c20014 	ori	r3,r3,2048
100093a4:	80c0030d 	sth	r3,12(r16)
100093a8:	00c80004 	movi	r3,8192
100093ac:	10c03c1e 	bne	r2,r3,100094a0 <__smakebuf_r+0x154>
100093b0:	8140038f 	ldh	r5,14(r16)
100093b4:	8809883a 	mov	r4,r17
100093b8:	000d2d00 	call	1000d2d0 <_isatty_r>
100093bc:	10004e26 	beq	r2,zero,100094f8 <__smakebuf_r+0x1ac>
100093c0:	8080030b 	ldhu	r2,12(r16)
100093c4:	04c00044 	movi	r19,1
100093c8:	80c010c4 	addi	r3,r16,67
100093cc:	14c4b03a 	or	r2,r2,r19
100093d0:	8080030d 	sth	r2,12(r16)
100093d4:	80c00015 	stw	r3,0(r16)
100093d8:	80c00415 	stw	r3,16(r16)
100093dc:	84c00515 	stw	r19,20(r16)
100093e0:	04810004 	movi	r18,1024
100093e4:	00000706 	br	10009404 <__smakebuf_r+0xb8>
100093e8:	8080030b 	ldhu	r2,12(r16)
100093ec:	10c0200c 	andi	r3,r2,128
100093f0:	18001f1e 	bne	r3,zero,10009470 <__smakebuf_r+0x124>
100093f4:	04810004 	movi	r18,1024
100093f8:	10820014 	ori	r2,r2,2048
100093fc:	8080030d 	sth	r2,12(r16)
10009400:	0027883a 	mov	r19,zero
10009404:	8809883a 	mov	r4,r17
10009408:	900b883a 	mov	r5,r18
1000940c:	00095040 	call	10009504 <_malloc_r>
10009410:	10002e26 	beq	r2,zero,100094cc <__smakebuf_r+0x180>
10009414:	80c0030b 	ldhu	r3,12(r16)
10009418:	01040074 	movhi	r4,4097
1000941c:	21212804 	addi	r4,r4,-31584
10009420:	89000f15 	stw	r4,60(r17)
10009424:	18c02014 	ori	r3,r3,128
10009428:	80c0030d 	sth	r3,12(r16)
1000942c:	80800015 	stw	r2,0(r16)
10009430:	80800415 	stw	r2,16(r16)
10009434:	84800515 	stw	r18,20(r16)
10009438:	98001c1e 	bne	r19,zero,100094ac <__smakebuf_r+0x160>
1000943c:	dfc01317 	ldw	ra,76(sp)
10009440:	dcc01217 	ldw	r19,72(sp)
10009444:	dc801117 	ldw	r18,68(sp)
10009448:	dc401017 	ldw	r17,64(sp)
1000944c:	dc000f17 	ldw	r16,60(sp)
10009450:	dec01404 	addi	sp,sp,80
10009454:	f800283a 	ret
10009458:	288010c4 	addi	r2,r5,67
1000945c:	28800015 	stw	r2,0(r5)
10009460:	28800415 	stw	r2,16(r5)
10009464:	00800044 	movi	r2,1
10009468:	28800515 	stw	r2,20(r5)
1000946c:	f800283a 	ret
10009470:	04801004 	movi	r18,64
10009474:	003fe006 	br	100093f8 <__alt_data_end+0xf80093f8>
10009478:	81000a17 	ldw	r4,40(r16)
1000947c:	00c40074 	movhi	r3,4097
10009480:	18ede704 	addi	r3,r3,-18532
10009484:	20ffc51e 	bne	r4,r3,1000939c <__alt_data_end+0xf800939c>
10009488:	80c0030b 	ldhu	r3,12(r16)
1000948c:	01010004 	movi	r4,1024
10009490:	81001315 	stw	r4,76(r16)
10009494:	1906b03a 	or	r3,r3,r4
10009498:	80c0030d 	sth	r3,12(r16)
1000949c:	003fc206 	br	100093a8 <__alt_data_end+0xf80093a8>
100094a0:	0027883a 	mov	r19,zero
100094a4:	04810004 	movi	r18,1024
100094a8:	003fd606 	br	10009404 <__alt_data_end+0xf8009404>
100094ac:	8140038f 	ldh	r5,14(r16)
100094b0:	8809883a 	mov	r4,r17
100094b4:	000d2d00 	call	1000d2d0 <_isatty_r>
100094b8:	103fe026 	beq	r2,zero,1000943c <__alt_data_end+0xf800943c>
100094bc:	8080030b 	ldhu	r2,12(r16)
100094c0:	10800054 	ori	r2,r2,1
100094c4:	8080030d 	sth	r2,12(r16)
100094c8:	003fdc06 	br	1000943c <__alt_data_end+0xf800943c>
100094cc:	8080030b 	ldhu	r2,12(r16)
100094d0:	10c0800c 	andi	r3,r2,512
100094d4:	183fd91e 	bne	r3,zero,1000943c <__alt_data_end+0xf800943c>
100094d8:	10800094 	ori	r2,r2,2
100094dc:	80c010c4 	addi	r3,r16,67
100094e0:	8080030d 	sth	r2,12(r16)
100094e4:	00800044 	movi	r2,1
100094e8:	80c00015 	stw	r3,0(r16)
100094ec:	80c00415 	stw	r3,16(r16)
100094f0:	80800515 	stw	r2,20(r16)
100094f4:	003fd106 	br	1000943c <__alt_data_end+0xf800943c>
100094f8:	04c00044 	movi	r19,1
100094fc:	04810004 	movi	r18,1024
10009500:	003fc006 	br	10009404 <__alt_data_end+0xf8009404>

10009504 <_malloc_r>:
10009504:	defff504 	addi	sp,sp,-44
10009508:	dc800315 	stw	r18,12(sp)
1000950c:	dfc00a15 	stw	ra,40(sp)
10009510:	df000915 	stw	fp,36(sp)
10009514:	ddc00815 	stw	r23,32(sp)
10009518:	dd800715 	stw	r22,28(sp)
1000951c:	dd400615 	stw	r21,24(sp)
10009520:	dd000515 	stw	r20,20(sp)
10009524:	dcc00415 	stw	r19,16(sp)
10009528:	dc400215 	stw	r17,8(sp)
1000952c:	dc000115 	stw	r16,4(sp)
10009530:	288002c4 	addi	r2,r5,11
10009534:	00c00584 	movi	r3,22
10009538:	2025883a 	mov	r18,r4
1000953c:	18802a2e 	bgeu	r3,r2,100095e8 <_malloc_r+0xe4>
10009540:	047ffe04 	movi	r17,-8
10009544:	1462703a 	and	r17,r2,r17
10009548:	88009e16 	blt	r17,zero,100097c4 <_malloc_r+0x2c0>
1000954c:	89409d36 	bltu	r17,r5,100097c4 <_malloc_r+0x2c0>
10009550:	001088c0 	call	1001088c <__malloc_lock>
10009554:	00807dc4 	movi	r2,503
10009558:	14402736 	bltu	r2,r17,100095f8 <_malloc_r+0xf4>
1000955c:	8806d0fa 	srli	r3,r17,3
10009560:	04c40074 	movhi	r19,4097
10009564:	9cd51204 	addi	r19,r19,21576
10009568:	18c5883a 	add	r2,r3,r3
1000956c:	1085883a 	add	r2,r2,r2
10009570:	1085883a 	add	r2,r2,r2
10009574:	9885883a 	add	r2,r19,r2
10009578:	14000317 	ldw	r16,12(r2)
1000957c:	80814a26 	beq	r16,r2,10009aa8 <_malloc_r+0x5a4>
10009580:	80c00117 	ldw	r3,4(r16)
10009584:	81000317 	ldw	r4,12(r16)
10009588:	00bfff04 	movi	r2,-4
1000958c:	1884703a 	and	r2,r3,r2
10009590:	81400217 	ldw	r5,8(r16)
10009594:	8085883a 	add	r2,r16,r2
10009598:	10c00117 	ldw	r3,4(r2)
1000959c:	29000315 	stw	r4,12(r5)
100095a0:	21400215 	stw	r5,8(r4)
100095a4:	18c00054 	ori	r3,r3,1
100095a8:	10c00115 	stw	r3,4(r2)
100095ac:	9009883a 	mov	r4,r18
100095b0:	00108b00 	call	100108b0 <__malloc_unlock>
100095b4:	80800204 	addi	r2,r16,8
100095b8:	dfc00a17 	ldw	ra,40(sp)
100095bc:	df000917 	ldw	fp,36(sp)
100095c0:	ddc00817 	ldw	r23,32(sp)
100095c4:	dd800717 	ldw	r22,28(sp)
100095c8:	dd400617 	ldw	r21,24(sp)
100095cc:	dd000517 	ldw	r20,20(sp)
100095d0:	dcc00417 	ldw	r19,16(sp)
100095d4:	dc800317 	ldw	r18,12(sp)
100095d8:	dc400217 	ldw	r17,8(sp)
100095dc:	dc000117 	ldw	r16,4(sp)
100095e0:	dec00b04 	addi	sp,sp,44
100095e4:	f800283a 	ret
100095e8:	04400404 	movi	r17,16
100095ec:	89407536 	bltu	r17,r5,100097c4 <_malloc_r+0x2c0>
100095f0:	001088c0 	call	1001088c <__malloc_lock>
100095f4:	003fd906 	br	1000955c <__alt_data_end+0xf800955c>
100095f8:	8806d27a 	srli	r3,r17,9
100095fc:	18007526 	beq	r3,zero,100097d4 <_malloc_r+0x2d0>
10009600:	00800104 	movi	r2,4
10009604:	10c0ef36 	bltu	r2,r3,100099c4 <_malloc_r+0x4c0>
10009608:	8806d1ba 	srli	r3,r17,6
1000960c:	19c00e04 	addi	r7,r3,56
10009610:	39cb883a 	add	r5,r7,r7
10009614:	04c40074 	movhi	r19,4097
10009618:	294b883a 	add	r5,r5,r5
1000961c:	9cd51204 	addi	r19,r19,21576
10009620:	294b883a 	add	r5,r5,r5
10009624:	994b883a 	add	r5,r19,r5
10009628:	2c000317 	ldw	r16,12(r5)
1000962c:	2c000e26 	beq	r5,r16,10009668 <_malloc_r+0x164>
10009630:	80800117 	ldw	r2,4(r16)
10009634:	01bfff04 	movi	r6,-4
10009638:	010003c4 	movi	r4,15
1000963c:	1184703a 	and	r2,r2,r6
10009640:	1447c83a 	sub	r3,r2,r17
10009644:	20c00716 	blt	r4,r3,10009664 <_malloc_r+0x160>
10009648:	1800650e 	bge	r3,zero,100097e0 <_malloc_r+0x2dc>
1000964c:	84000317 	ldw	r16,12(r16)
10009650:	2c000526 	beq	r5,r16,10009668 <_malloc_r+0x164>
10009654:	80800117 	ldw	r2,4(r16)
10009658:	1184703a 	and	r2,r2,r6
1000965c:	1447c83a 	sub	r3,r2,r17
10009660:	20fff90e 	bge	r4,r3,10009648 <__alt_data_end+0xf8009648>
10009664:	39ffffc4 	addi	r7,r7,-1
10009668:	38c00044 	addi	r3,r7,1
1000966c:	01840074 	movhi	r6,4097
10009670:	9c000417 	ldw	r16,16(r19)
10009674:	31951204 	addi	r6,r6,21576
10009678:	32400204 	addi	r9,r6,8
1000967c:	82410326 	beq	r16,r9,10009a8c <_malloc_r+0x588>
10009680:	81000117 	ldw	r4,4(r16)
10009684:	00bfff04 	movi	r2,-4
10009688:	208e703a 	and	r7,r4,r2
1000968c:	3c45c83a 	sub	r2,r7,r17
10009690:	010003c4 	movi	r4,15
10009694:	2080ee16 	blt	r4,r2,10009a50 <_malloc_r+0x54c>
10009698:	32400515 	stw	r9,20(r6)
1000969c:	32400415 	stw	r9,16(r6)
100096a0:	1000510e 	bge	r2,zero,100097e8 <_malloc_r+0x2e4>
100096a4:	00807fc4 	movi	r2,511
100096a8:	11c0ce36 	bltu	r2,r7,100099e4 <_malloc_r+0x4e0>
100096ac:	3808d0fa 	srli	r4,r7,3
100096b0:	01c00044 	movi	r7,1
100096b4:	30800117 	ldw	r2,4(r6)
100096b8:	210b883a 	add	r5,r4,r4
100096bc:	294b883a 	add	r5,r5,r5
100096c0:	2009d0ba 	srai	r4,r4,2
100096c4:	294b883a 	add	r5,r5,r5
100096c8:	298b883a 	add	r5,r5,r6
100096cc:	2a000217 	ldw	r8,8(r5)
100096d0:	3908983a 	sll	r4,r7,r4
100096d4:	81400315 	stw	r5,12(r16)
100096d8:	82000215 	stw	r8,8(r16)
100096dc:	2088b03a 	or	r4,r4,r2
100096e0:	2c000215 	stw	r16,8(r5)
100096e4:	31000115 	stw	r4,4(r6)
100096e8:	44000315 	stw	r16,12(r8)
100096ec:	1805d0ba 	srai	r2,r3,2
100096f0:	01400044 	movi	r5,1
100096f4:	288a983a 	sll	r5,r5,r2
100096f8:	21404336 	bltu	r4,r5,10009808 <_malloc_r+0x304>
100096fc:	2144703a 	and	r2,r4,r5
10009700:	10000a1e 	bne	r2,zero,1000972c <_malloc_r+0x228>
10009704:	00bfff04 	movi	r2,-4
10009708:	294b883a 	add	r5,r5,r5
1000970c:	1886703a 	and	r3,r3,r2
10009710:	2144703a 	and	r2,r4,r5
10009714:	18c00104 	addi	r3,r3,4
10009718:	1000041e 	bne	r2,zero,1000972c <_malloc_r+0x228>
1000971c:	294b883a 	add	r5,r5,r5
10009720:	2144703a 	and	r2,r4,r5
10009724:	18c00104 	addi	r3,r3,4
10009728:	103ffc26 	beq	r2,zero,1000971c <__alt_data_end+0xf800971c>
1000972c:	023fff04 	movi	r8,-4
10009730:	01c003c4 	movi	r7,15
10009734:	18c5883a 	add	r2,r3,r3
10009738:	1085883a 	add	r2,r2,r2
1000973c:	1085883a 	add	r2,r2,r2
10009740:	9895883a 	add	r10,r19,r2
10009744:	52c00304 	addi	r11,r10,12
10009748:	1819883a 	mov	r12,r3
1000974c:	5c000017 	ldw	r16,0(r11)
10009750:	59bffd04 	addi	r6,r11,-12
10009754:	8180041e 	bne	r16,r6,10009768 <_malloc_r+0x264>
10009758:	0000ce06 	br	10009a94 <_malloc_r+0x590>
1000975c:	2000d70e 	bge	r4,zero,10009abc <_malloc_r+0x5b8>
10009760:	84000317 	ldw	r16,12(r16)
10009764:	8180cb26 	beq	r16,r6,10009a94 <_malloc_r+0x590>
10009768:	80800117 	ldw	r2,4(r16)
1000976c:	1204703a 	and	r2,r2,r8
10009770:	1449c83a 	sub	r4,r2,r17
10009774:	393ff90e 	bge	r7,r4,1000975c <__alt_data_end+0xf800975c>
10009778:	80800317 	ldw	r2,12(r16)
1000977c:	80c00217 	ldw	r3,8(r16)
10009780:	89400054 	ori	r5,r17,1
10009784:	81400115 	stw	r5,4(r16)
10009788:	18800315 	stw	r2,12(r3)
1000978c:	10c00215 	stw	r3,8(r2)
10009790:	8463883a 	add	r17,r16,r17
10009794:	9c400515 	stw	r17,20(r19)
10009798:	9c400415 	stw	r17,16(r19)
1000979c:	20800054 	ori	r2,r4,1
100097a0:	88800115 	stw	r2,4(r17)
100097a4:	8a400315 	stw	r9,12(r17)
100097a8:	8a400215 	stw	r9,8(r17)
100097ac:	8923883a 	add	r17,r17,r4
100097b0:	89000015 	stw	r4,0(r17)
100097b4:	9009883a 	mov	r4,r18
100097b8:	00108b00 	call	100108b0 <__malloc_unlock>
100097bc:	80800204 	addi	r2,r16,8
100097c0:	003f7d06 	br	100095b8 <__alt_data_end+0xf80095b8>
100097c4:	00800304 	movi	r2,12
100097c8:	90800015 	stw	r2,0(r18)
100097cc:	0005883a 	mov	r2,zero
100097d0:	003f7906 	br	100095b8 <__alt_data_end+0xf80095b8>
100097d4:	01401f84 	movi	r5,126
100097d8:	01c00fc4 	movi	r7,63
100097dc:	003f8d06 	br	10009614 <__alt_data_end+0xf8009614>
100097e0:	81000317 	ldw	r4,12(r16)
100097e4:	003f6a06 	br	10009590 <__alt_data_end+0xf8009590>
100097e8:	81c5883a 	add	r2,r16,r7
100097ec:	10c00117 	ldw	r3,4(r2)
100097f0:	9009883a 	mov	r4,r18
100097f4:	18c00054 	ori	r3,r3,1
100097f8:	10c00115 	stw	r3,4(r2)
100097fc:	00108b00 	call	100108b0 <__malloc_unlock>
10009800:	80800204 	addi	r2,r16,8
10009804:	003f6c06 	br	100095b8 <__alt_data_end+0xf80095b8>
10009808:	9c000217 	ldw	r16,8(r19)
1000980c:	00bfff04 	movi	r2,-4
10009810:	85800117 	ldw	r22,4(r16)
10009814:	b0ac703a 	and	r22,r22,r2
10009818:	b4400336 	bltu	r22,r17,10009828 <_malloc_r+0x324>
1000981c:	b445c83a 	sub	r2,r22,r17
10009820:	00c003c4 	movi	r3,15
10009824:	18805d16 	blt	r3,r2,1000999c <_malloc_r+0x498>
10009828:	05c40074 	movhi	r23,4097
1000982c:	008400b4 	movhi	r2,4098
10009830:	bdda9904 	addi	r23,r23,27236
10009834:	10a16704 	addi	r2,r2,-31332
10009838:	15400017 	ldw	r21,0(r2)
1000983c:	b9000017 	ldw	r4,0(r23)
10009840:	00ffffc4 	movi	r3,-1
10009844:	858d883a 	add	r6,r16,r22
10009848:	8d6b883a 	add	r21,r17,r21
1000984c:	20c0e426 	beq	r4,r3,10009be0 <_malloc_r+0x6dc>
10009850:	ad4403c4 	addi	r21,r21,4111
10009854:	00fc0004 	movi	r3,-4096
10009858:	a8ea703a 	and	r21,r21,r3
1000985c:	9009883a 	mov	r4,r18
10009860:	a80b883a 	mov	r5,r21
10009864:	d9800015 	stw	r6,0(sp)
10009868:	000b6700 	call	1000b670 <_sbrk_r>
1000986c:	00ffffc4 	movi	r3,-1
10009870:	1029883a 	mov	r20,r2
10009874:	d9800017 	ldw	r6,0(sp)
10009878:	10c0a426 	beq	r2,r3,10009b0c <_malloc_r+0x608>
1000987c:	1180a236 	bltu	r2,r6,10009b08 <_malloc_r+0x604>
10009880:	070400b4 	movhi	fp,4098
10009884:	e7216f04 	addi	fp,fp,-31300
10009888:	e0c00017 	ldw	r3,0(fp)
1000988c:	a8c7883a 	add	r3,r21,r3
10009890:	e0c00015 	stw	r3,0(fp)
10009894:	3500da26 	beq	r6,r20,10009c00 <_malloc_r+0x6fc>
10009898:	b9000017 	ldw	r4,0(r23)
1000989c:	00bfffc4 	movi	r2,-1
100098a0:	2080e426 	beq	r4,r2,10009c34 <_malloc_r+0x730>
100098a4:	a185c83a 	sub	r2,r20,r6
100098a8:	1885883a 	add	r2,r3,r2
100098ac:	e0800015 	stw	r2,0(fp)
100098b0:	a0c001cc 	andi	r3,r20,7
100098b4:	1800b526 	beq	r3,zero,10009b8c <_malloc_r+0x688>
100098b8:	a0e9c83a 	sub	r20,r20,r3
100098bc:	00840204 	movi	r2,4104
100098c0:	a5000204 	addi	r20,r20,8
100098c4:	10c7c83a 	sub	r3,r2,r3
100098c8:	a545883a 	add	r2,r20,r21
100098cc:	1083ffcc 	andi	r2,r2,4095
100098d0:	18abc83a 	sub	r21,r3,r2
100098d4:	9009883a 	mov	r4,r18
100098d8:	a80b883a 	mov	r5,r21
100098dc:	000b6700 	call	1000b670 <_sbrk_r>
100098e0:	00ffffc4 	movi	r3,-1
100098e4:	10c0d026 	beq	r2,r3,10009c28 <_malloc_r+0x724>
100098e8:	1507c83a 	sub	r3,r2,r20
100098ec:	a8c7883a 	add	r3,r21,r3
100098f0:	18c00054 	ori	r3,r3,1
100098f4:	e0800017 	ldw	r2,0(fp)
100098f8:	9d000215 	stw	r20,8(r19)
100098fc:	a0c00115 	stw	r3,4(r20)
10009900:	a887883a 	add	r3,r21,r2
10009904:	e0c00015 	stw	r3,0(fp)
10009908:	84c00e26 	beq	r16,r19,10009944 <_malloc_r+0x440>
1000990c:	018003c4 	movi	r6,15
10009910:	3580a02e 	bgeu	r6,r22,10009b94 <_malloc_r+0x690>
10009914:	81400117 	ldw	r5,4(r16)
10009918:	013ffe04 	movi	r4,-8
1000991c:	b0bffd04 	addi	r2,r22,-12
10009920:	1104703a 	and	r2,r2,r4
10009924:	2900004c 	andi	r4,r5,1
10009928:	1108b03a 	or	r4,r2,r4
1000992c:	81000115 	stw	r4,4(r16)
10009930:	01400144 	movi	r5,5
10009934:	8089883a 	add	r4,r16,r2
10009938:	21400115 	stw	r5,4(r4)
1000993c:	21400215 	stw	r5,8(r4)
10009940:	3080c036 	bltu	r6,r2,10009c44 <_malloc_r+0x740>
10009944:	008400b4 	movhi	r2,4098
10009948:	10a16604 	addi	r2,r2,-31336
1000994c:	11000017 	ldw	r4,0(r2)
10009950:	20c0012e 	bgeu	r4,r3,10009958 <_malloc_r+0x454>
10009954:	10c00015 	stw	r3,0(r2)
10009958:	008400b4 	movhi	r2,4098
1000995c:	10a16504 	addi	r2,r2,-31340
10009960:	11000017 	ldw	r4,0(r2)
10009964:	9c000217 	ldw	r16,8(r19)
10009968:	20c0012e 	bgeu	r4,r3,10009970 <_malloc_r+0x46c>
1000996c:	10c00015 	stw	r3,0(r2)
10009970:	80c00117 	ldw	r3,4(r16)
10009974:	00bfff04 	movi	r2,-4
10009978:	1886703a 	and	r3,r3,r2
1000997c:	1c45c83a 	sub	r2,r3,r17
10009980:	1c400236 	bltu	r3,r17,1000998c <_malloc_r+0x488>
10009984:	00c003c4 	movi	r3,15
10009988:	18800416 	blt	r3,r2,1000999c <_malloc_r+0x498>
1000998c:	9009883a 	mov	r4,r18
10009990:	00108b00 	call	100108b0 <__malloc_unlock>
10009994:	0005883a 	mov	r2,zero
10009998:	003f0706 	br	100095b8 <__alt_data_end+0xf80095b8>
1000999c:	88c00054 	ori	r3,r17,1
100099a0:	80c00115 	stw	r3,4(r16)
100099a4:	8463883a 	add	r17,r16,r17
100099a8:	10800054 	ori	r2,r2,1
100099ac:	9c400215 	stw	r17,8(r19)
100099b0:	88800115 	stw	r2,4(r17)
100099b4:	9009883a 	mov	r4,r18
100099b8:	00108b00 	call	100108b0 <__malloc_unlock>
100099bc:	80800204 	addi	r2,r16,8
100099c0:	003efd06 	br	100095b8 <__alt_data_end+0xf80095b8>
100099c4:	00800504 	movi	r2,20
100099c8:	10c0482e 	bgeu	r2,r3,10009aec <_malloc_r+0x5e8>
100099cc:	00801504 	movi	r2,84
100099d0:	10c06836 	bltu	r2,r3,10009b74 <_malloc_r+0x670>
100099d4:	8806d33a 	srli	r3,r17,12
100099d8:	19c01b84 	addi	r7,r3,110
100099dc:	39cb883a 	add	r5,r7,r7
100099e0:	003f0c06 	br	10009614 <__alt_data_end+0xf8009614>
100099e4:	3804d27a 	srli	r2,r7,9
100099e8:	01000104 	movi	r4,4
100099ec:	2080422e 	bgeu	r4,r2,10009af8 <_malloc_r+0x5f4>
100099f0:	01000504 	movi	r4,20
100099f4:	20807c36 	bltu	r4,r2,10009be8 <_malloc_r+0x6e4>
100099f8:	110016c4 	addi	r4,r2,91
100099fc:	210b883a 	add	r5,r4,r4
10009a00:	294b883a 	add	r5,r5,r5
10009a04:	294b883a 	add	r5,r5,r5
10009a08:	994b883a 	add	r5,r19,r5
10009a0c:	28800217 	ldw	r2,8(r5)
10009a10:	02040074 	movhi	r8,4097
10009a14:	42151204 	addi	r8,r8,21576
10009a18:	11406326 	beq	r2,r5,10009ba8 <_malloc_r+0x6a4>
10009a1c:	01bfff04 	movi	r6,-4
10009a20:	11000117 	ldw	r4,4(r2)
10009a24:	2188703a 	and	r4,r4,r6
10009a28:	3900022e 	bgeu	r7,r4,10009a34 <_malloc_r+0x530>
10009a2c:	10800217 	ldw	r2,8(r2)
10009a30:	28bffb1e 	bne	r5,r2,10009a20 <__alt_data_end+0xf8009a20>
10009a34:	11800317 	ldw	r6,12(r2)
10009a38:	99000117 	ldw	r4,4(r19)
10009a3c:	81800315 	stw	r6,12(r16)
10009a40:	80800215 	stw	r2,8(r16)
10009a44:	34000215 	stw	r16,8(r6)
10009a48:	14000315 	stw	r16,12(r2)
10009a4c:	003f2706 	br	100096ec <__alt_data_end+0xf80096ec>
10009a50:	88c00054 	ori	r3,r17,1
10009a54:	80c00115 	stw	r3,4(r16)
10009a58:	8463883a 	add	r17,r16,r17
10009a5c:	34400515 	stw	r17,20(r6)
10009a60:	34400415 	stw	r17,16(r6)
10009a64:	10c00054 	ori	r3,r2,1
10009a68:	8a400315 	stw	r9,12(r17)
10009a6c:	8a400215 	stw	r9,8(r17)
10009a70:	88c00115 	stw	r3,4(r17)
10009a74:	88a3883a 	add	r17,r17,r2
10009a78:	88800015 	stw	r2,0(r17)
10009a7c:	9009883a 	mov	r4,r18
10009a80:	00108b00 	call	100108b0 <__malloc_unlock>
10009a84:	80800204 	addi	r2,r16,8
10009a88:	003ecb06 	br	100095b8 <__alt_data_end+0xf80095b8>
10009a8c:	31000117 	ldw	r4,4(r6)
10009a90:	003f1606 	br	100096ec <__alt_data_end+0xf80096ec>
10009a94:	63000044 	addi	r12,r12,1
10009a98:	608000cc 	andi	r2,r12,3
10009a9c:	5ac00204 	addi	r11,r11,8
10009aa0:	103f2a1e 	bne	r2,zero,1000974c <__alt_data_end+0xf800974c>
10009aa4:	00002106 	br	10009b2c <_malloc_r+0x628>
10009aa8:	80800204 	addi	r2,r16,8
10009aac:	84000517 	ldw	r16,20(r16)
10009ab0:	143eb31e 	bne	r2,r16,10009580 <__alt_data_end+0xf8009580>
10009ab4:	18c00084 	addi	r3,r3,2
10009ab8:	003eec06 	br	1000966c <__alt_data_end+0xf800966c>
10009abc:	8085883a 	add	r2,r16,r2
10009ac0:	10c00117 	ldw	r3,4(r2)
10009ac4:	81000317 	ldw	r4,12(r16)
10009ac8:	81400217 	ldw	r5,8(r16)
10009acc:	18c00054 	ori	r3,r3,1
10009ad0:	10c00115 	stw	r3,4(r2)
10009ad4:	29000315 	stw	r4,12(r5)
10009ad8:	21400215 	stw	r5,8(r4)
10009adc:	9009883a 	mov	r4,r18
10009ae0:	00108b00 	call	100108b0 <__malloc_unlock>
10009ae4:	80800204 	addi	r2,r16,8
10009ae8:	003eb306 	br	100095b8 <__alt_data_end+0xf80095b8>
10009aec:	19c016c4 	addi	r7,r3,91
10009af0:	39cb883a 	add	r5,r7,r7
10009af4:	003ec706 	br	10009614 <__alt_data_end+0xf8009614>
10009af8:	3804d1ba 	srli	r2,r7,6
10009afc:	11000e04 	addi	r4,r2,56
10009b00:	210b883a 	add	r5,r4,r4
10009b04:	003fbe06 	br	10009a00 <__alt_data_end+0xf8009a00>
10009b08:	84ff5d26 	beq	r16,r19,10009880 <__alt_data_end+0xf8009880>
10009b0c:	9c000217 	ldw	r16,8(r19)
10009b10:	00bfff04 	movi	r2,-4
10009b14:	80c00117 	ldw	r3,4(r16)
10009b18:	1886703a 	and	r3,r3,r2
10009b1c:	003f9706 	br	1000997c <__alt_data_end+0xf800997c>
10009b20:	52800017 	ldw	r10,0(r10)
10009b24:	18ffffc4 	addi	r3,r3,-1
10009b28:	50805c1e 	bne	r10,r2,10009c9c <_malloc_r+0x798>
10009b2c:	190000cc 	andi	r4,r3,3
10009b30:	50bffe04 	addi	r2,r10,-8
10009b34:	203ffa1e 	bne	r4,zero,10009b20 <__alt_data_end+0xf8009b20>
10009b38:	98800117 	ldw	r2,4(r19)
10009b3c:	0146303a 	nor	r3,zero,r5
10009b40:	1884703a 	and	r2,r3,r2
10009b44:	98800115 	stw	r2,4(r19)
10009b48:	294b883a 	add	r5,r5,r5
10009b4c:	117f2e36 	bltu	r2,r5,10009808 <__alt_data_end+0xf8009808>
10009b50:	283f2d26 	beq	r5,zero,10009808 <__alt_data_end+0xf8009808>
10009b54:	1146703a 	and	r3,r2,r5
10009b58:	1800521e 	bne	r3,zero,10009ca4 <_malloc_r+0x7a0>
10009b5c:	6007883a 	mov	r3,r12
10009b60:	294b883a 	add	r5,r5,r5
10009b64:	1148703a 	and	r4,r2,r5
10009b68:	18c00104 	addi	r3,r3,4
10009b6c:	203ffc26 	beq	r4,zero,10009b60 <__alt_data_end+0xf8009b60>
10009b70:	003ef006 	br	10009734 <__alt_data_end+0xf8009734>
10009b74:	00805504 	movi	r2,340
10009b78:	10c01336 	bltu	r2,r3,10009bc8 <_malloc_r+0x6c4>
10009b7c:	8806d3fa 	srli	r3,r17,15
10009b80:	19c01dc4 	addi	r7,r3,119
10009b84:	39cb883a 	add	r5,r7,r7
10009b88:	003ea206 	br	10009614 <__alt_data_end+0xf8009614>
10009b8c:	00c40004 	movi	r3,4096
10009b90:	003f4d06 	br	100098c8 <__alt_data_end+0xf80098c8>
10009b94:	00800044 	movi	r2,1
10009b98:	a0800115 	stw	r2,4(r20)
10009b9c:	a021883a 	mov	r16,r20
10009ba0:	0007883a 	mov	r3,zero
10009ba4:	003f7506 	br	1000997c <__alt_data_end+0xf800997c>
10009ba8:	200bd0ba 	srai	r5,r4,2
10009bac:	01800044 	movi	r6,1
10009bb0:	41000117 	ldw	r4,4(r8)
10009bb4:	314a983a 	sll	r5,r6,r5
10009bb8:	100d883a 	mov	r6,r2
10009bbc:	2908b03a 	or	r4,r5,r4
10009bc0:	41000115 	stw	r4,4(r8)
10009bc4:	003f9d06 	br	10009a3c <__alt_data_end+0xf8009a3c>
10009bc8:	00815504 	movi	r2,1364
10009bcc:	10c01336 	bltu	r2,r3,10009c1c <_malloc_r+0x718>
10009bd0:	8806d4ba 	srli	r3,r17,18
10009bd4:	19c01f04 	addi	r7,r3,124
10009bd8:	39cb883a 	add	r5,r7,r7
10009bdc:	003e8d06 	br	10009614 <__alt_data_end+0xf8009614>
10009be0:	ad400404 	addi	r21,r21,16
10009be4:	003f1d06 	br	1000985c <__alt_data_end+0xf800985c>
10009be8:	01001504 	movi	r4,84
10009bec:	20801c36 	bltu	r4,r2,10009c60 <_malloc_r+0x75c>
10009bf0:	3804d33a 	srli	r2,r7,12
10009bf4:	11001b84 	addi	r4,r2,110
10009bf8:	210b883a 	add	r5,r4,r4
10009bfc:	003f8006 	br	10009a00 <__alt_data_end+0xf8009a00>
10009c00:	3083ffcc 	andi	r2,r6,4095
10009c04:	103f241e 	bne	r2,zero,10009898 <__alt_data_end+0xf8009898>
10009c08:	99000217 	ldw	r4,8(r19)
10009c0c:	ad85883a 	add	r2,r21,r22
10009c10:	10800054 	ori	r2,r2,1
10009c14:	20800115 	stw	r2,4(r4)
10009c18:	003f4a06 	br	10009944 <__alt_data_end+0xf8009944>
10009c1c:	01403f04 	movi	r5,252
10009c20:	01c01f84 	movi	r7,126
10009c24:	003e7b06 	br	10009614 <__alt_data_end+0xf8009614>
10009c28:	00c00044 	movi	r3,1
10009c2c:	002b883a 	mov	r21,zero
10009c30:	003f3006 	br	100098f4 <__alt_data_end+0xf80098f4>
10009c34:	00840074 	movhi	r2,4097
10009c38:	109a9904 	addi	r2,r2,27236
10009c3c:	15000015 	stw	r20,0(r2)
10009c40:	003f1b06 	br	100098b0 <__alt_data_end+0xf80098b0>
10009c44:	9009883a 	mov	r4,r18
10009c48:	81400204 	addi	r5,r16,8
10009c4c:	00089680 	call	10008968 <_free_r>
10009c50:	008400b4 	movhi	r2,4098
10009c54:	10a16f04 	addi	r2,r2,-31300
10009c58:	10c00017 	ldw	r3,0(r2)
10009c5c:	003f3906 	br	10009944 <__alt_data_end+0xf8009944>
10009c60:	01005504 	movi	r4,340
10009c64:	20800436 	bltu	r4,r2,10009c78 <_malloc_r+0x774>
10009c68:	3804d3fa 	srli	r2,r7,15
10009c6c:	11001dc4 	addi	r4,r2,119
10009c70:	210b883a 	add	r5,r4,r4
10009c74:	003f6206 	br	10009a00 <__alt_data_end+0xf8009a00>
10009c78:	01015504 	movi	r4,1364
10009c7c:	20800436 	bltu	r4,r2,10009c90 <_malloc_r+0x78c>
10009c80:	3804d4ba 	srli	r2,r7,18
10009c84:	11001f04 	addi	r4,r2,124
10009c88:	210b883a 	add	r5,r4,r4
10009c8c:	003f5c06 	br	10009a00 <__alt_data_end+0xf8009a00>
10009c90:	01403f04 	movi	r5,252
10009c94:	01001f84 	movi	r4,126
10009c98:	003f5906 	br	10009a00 <__alt_data_end+0xf8009a00>
10009c9c:	98800117 	ldw	r2,4(r19)
10009ca0:	003fa906 	br	10009b48 <__alt_data_end+0xf8009b48>
10009ca4:	6007883a 	mov	r3,r12
10009ca8:	003ea206 	br	10009734 <__alt_data_end+0xf8009734>

10009cac <memchr>:
10009cac:	208000cc 	andi	r2,r4,3
10009cb0:	280f883a 	mov	r7,r5
10009cb4:	10003526 	beq	r2,zero,10009d8c <memchr+0xe0>
10009cb8:	30bfffc4 	addi	r2,r6,-1
10009cbc:	30001b26 	beq	r6,zero,10009d2c <memchr+0x80>
10009cc0:	21800003 	ldbu	r6,0(r4)
10009cc4:	28c03fcc 	andi	r3,r5,255
10009cc8:	30c01a26 	beq	r6,r3,10009d34 <memchr+0x88>
10009ccc:	180d883a 	mov	r6,r3
10009cd0:	00000406 	br	10009ce4 <memchr+0x38>
10009cd4:	10001526 	beq	r2,zero,10009d2c <memchr+0x80>
10009cd8:	20c00003 	ldbu	r3,0(r4)
10009cdc:	10bfffc4 	addi	r2,r2,-1
10009ce0:	19801426 	beq	r3,r6,10009d34 <memchr+0x88>
10009ce4:	21000044 	addi	r4,r4,1
10009ce8:	20c000cc 	andi	r3,r4,3
10009cec:	183ff91e 	bne	r3,zero,10009cd4 <__alt_data_end+0xf8009cd4>
10009cf0:	024000c4 	movi	r9,3
10009cf4:	48801136 	bltu	r9,r2,10009d3c <memchr+0x90>
10009cf8:	10000c26 	beq	r2,zero,10009d2c <memchr+0x80>
10009cfc:	20c00003 	ldbu	r3,0(r4)
10009d00:	29403fcc 	andi	r5,r5,255
10009d04:	19400b26 	beq	r3,r5,10009d34 <memchr+0x88>
10009d08:	20c00044 	addi	r3,r4,1
10009d0c:	2085883a 	add	r2,r4,r2
10009d10:	39803fcc 	andi	r6,r7,255
10009d14:	00000306 	br	10009d24 <memchr+0x78>
10009d18:	18c00044 	addi	r3,r3,1
10009d1c:	197fffc3 	ldbu	r5,-1(r3)
10009d20:	29800426 	beq	r5,r6,10009d34 <memchr+0x88>
10009d24:	1809883a 	mov	r4,r3
10009d28:	18bffb1e 	bne	r3,r2,10009d18 <__alt_data_end+0xf8009d18>
10009d2c:	0005883a 	mov	r2,zero
10009d30:	f800283a 	ret
10009d34:	2005883a 	mov	r2,r4
10009d38:	f800283a 	ret
10009d3c:	28c03fcc 	andi	r3,r5,255
10009d40:	1810923a 	slli	r8,r3,8
10009d44:	02ffbff4 	movhi	r11,65279
10009d48:	02a02074 	movhi	r10,32897
10009d4c:	40c6b03a 	or	r3,r8,r3
10009d50:	1810943a 	slli	r8,r3,16
10009d54:	5affbfc4 	addi	r11,r11,-257
10009d58:	52a02004 	addi	r10,r10,-32640
10009d5c:	40d0b03a 	or	r8,r8,r3
10009d60:	20c00017 	ldw	r3,0(r4)
10009d64:	40c6f03a 	xor	r3,r8,r3
10009d68:	1acd883a 	add	r6,r3,r11
10009d6c:	00c6303a 	nor	r3,zero,r3
10009d70:	30c6703a 	and	r3,r6,r3
10009d74:	1a86703a 	and	r3,r3,r10
10009d78:	183fdf1e 	bne	r3,zero,10009cf8 <__alt_data_end+0xf8009cf8>
10009d7c:	10bfff04 	addi	r2,r2,-4
10009d80:	21000104 	addi	r4,r4,4
10009d84:	48bff636 	bltu	r9,r2,10009d60 <__alt_data_end+0xf8009d60>
10009d88:	003fdb06 	br	10009cf8 <__alt_data_end+0xf8009cf8>
10009d8c:	3005883a 	mov	r2,r6
10009d90:	003fd706 	br	10009cf0 <__alt_data_end+0xf8009cf0>

10009d94 <memmove>:
10009d94:	2005883a 	mov	r2,r4
10009d98:	29000b2e 	bgeu	r5,r4,10009dc8 <memmove+0x34>
10009d9c:	298f883a 	add	r7,r5,r6
10009da0:	21c0092e 	bgeu	r4,r7,10009dc8 <memmove+0x34>
10009da4:	2187883a 	add	r3,r4,r6
10009da8:	198bc83a 	sub	r5,r3,r6
10009dac:	30004b26 	beq	r6,zero,10009edc <memmove+0x148>
10009db0:	39ffffc4 	addi	r7,r7,-1
10009db4:	39000003 	ldbu	r4,0(r7)
10009db8:	18ffffc4 	addi	r3,r3,-1
10009dbc:	19000005 	stb	r4,0(r3)
10009dc0:	197ffb1e 	bne	r3,r5,10009db0 <__alt_data_end+0xf8009db0>
10009dc4:	f800283a 	ret
10009dc8:	00c003c4 	movi	r3,15
10009dcc:	1980412e 	bgeu	r3,r6,10009ed4 <memmove+0x140>
10009dd0:	1146b03a 	or	r3,r2,r5
10009dd4:	18c000cc 	andi	r3,r3,3
10009dd8:	1800411e 	bne	r3,zero,10009ee0 <memmove+0x14c>
10009ddc:	33fffc04 	addi	r15,r6,-16
10009de0:	781ed13a 	srli	r15,r15,4
10009de4:	28c00104 	addi	r3,r5,4
10009de8:	13400104 	addi	r13,r2,4
10009dec:	781c913a 	slli	r14,r15,4
10009df0:	2b000204 	addi	r12,r5,8
10009df4:	12c00204 	addi	r11,r2,8
10009df8:	73800504 	addi	r14,r14,20
10009dfc:	2a800304 	addi	r10,r5,12
10009e00:	12400304 	addi	r9,r2,12
10009e04:	2b9d883a 	add	r14,r5,r14
10009e08:	2811883a 	mov	r8,r5
10009e0c:	100f883a 	mov	r7,r2
10009e10:	41000017 	ldw	r4,0(r8)
10009e14:	39c00404 	addi	r7,r7,16
10009e18:	18c00404 	addi	r3,r3,16
10009e1c:	393ffc15 	stw	r4,-16(r7)
10009e20:	193ffc17 	ldw	r4,-16(r3)
10009e24:	6b400404 	addi	r13,r13,16
10009e28:	5ac00404 	addi	r11,r11,16
10009e2c:	693ffc15 	stw	r4,-16(r13)
10009e30:	61000017 	ldw	r4,0(r12)
10009e34:	4a400404 	addi	r9,r9,16
10009e38:	42000404 	addi	r8,r8,16
10009e3c:	593ffc15 	stw	r4,-16(r11)
10009e40:	51000017 	ldw	r4,0(r10)
10009e44:	63000404 	addi	r12,r12,16
10009e48:	52800404 	addi	r10,r10,16
10009e4c:	493ffc15 	stw	r4,-16(r9)
10009e50:	1bbfef1e 	bne	r3,r14,10009e10 <__alt_data_end+0xf8009e10>
10009e54:	79000044 	addi	r4,r15,1
10009e58:	2008913a 	slli	r4,r4,4
10009e5c:	328003cc 	andi	r10,r6,15
10009e60:	02c000c4 	movi	r11,3
10009e64:	1107883a 	add	r3,r2,r4
10009e68:	290b883a 	add	r5,r5,r4
10009e6c:	5a801e2e 	bgeu	r11,r10,10009ee8 <memmove+0x154>
10009e70:	1813883a 	mov	r9,r3
10009e74:	2811883a 	mov	r8,r5
10009e78:	500f883a 	mov	r7,r10
10009e7c:	41000017 	ldw	r4,0(r8)
10009e80:	4a400104 	addi	r9,r9,4
10009e84:	39ffff04 	addi	r7,r7,-4
10009e88:	493fff15 	stw	r4,-4(r9)
10009e8c:	42000104 	addi	r8,r8,4
10009e90:	59fffa36 	bltu	r11,r7,10009e7c <__alt_data_end+0xf8009e7c>
10009e94:	513fff04 	addi	r4,r10,-4
10009e98:	2008d0ba 	srli	r4,r4,2
10009e9c:	318000cc 	andi	r6,r6,3
10009ea0:	21000044 	addi	r4,r4,1
10009ea4:	2109883a 	add	r4,r4,r4
10009ea8:	2109883a 	add	r4,r4,r4
10009eac:	1907883a 	add	r3,r3,r4
10009eb0:	290b883a 	add	r5,r5,r4
10009eb4:	30000926 	beq	r6,zero,10009edc <memmove+0x148>
10009eb8:	198d883a 	add	r6,r3,r6
10009ebc:	29c00003 	ldbu	r7,0(r5)
10009ec0:	18c00044 	addi	r3,r3,1
10009ec4:	29400044 	addi	r5,r5,1
10009ec8:	19ffffc5 	stb	r7,-1(r3)
10009ecc:	19bffb1e 	bne	r3,r6,10009ebc <__alt_data_end+0xf8009ebc>
10009ed0:	f800283a 	ret
10009ed4:	1007883a 	mov	r3,r2
10009ed8:	003ff606 	br	10009eb4 <__alt_data_end+0xf8009eb4>
10009edc:	f800283a 	ret
10009ee0:	1007883a 	mov	r3,r2
10009ee4:	003ff406 	br	10009eb8 <__alt_data_end+0xf8009eb8>
10009ee8:	500d883a 	mov	r6,r10
10009eec:	003ff106 	br	10009eb4 <__alt_data_end+0xf8009eb4>

10009ef0 <memset>:
10009ef0:	20c000cc 	andi	r3,r4,3
10009ef4:	2005883a 	mov	r2,r4
10009ef8:	18004326 	beq	r3,zero,1000a008 <memset+0x118>
10009efc:	31ffffc4 	addi	r7,r6,-1
10009f00:	30004026 	beq	r6,zero,1000a004 <memset+0x114>
10009f04:	2813883a 	mov	r9,r5
10009f08:	200d883a 	mov	r6,r4
10009f0c:	2007883a 	mov	r3,r4
10009f10:	00000406 	br	10009f24 <memset+0x34>
10009f14:	3a3fffc4 	addi	r8,r7,-1
10009f18:	31800044 	addi	r6,r6,1
10009f1c:	38003926 	beq	r7,zero,1000a004 <memset+0x114>
10009f20:	400f883a 	mov	r7,r8
10009f24:	18c00044 	addi	r3,r3,1
10009f28:	32400005 	stb	r9,0(r6)
10009f2c:	1a0000cc 	andi	r8,r3,3
10009f30:	403ff81e 	bne	r8,zero,10009f14 <__alt_data_end+0xf8009f14>
10009f34:	010000c4 	movi	r4,3
10009f38:	21c02d2e 	bgeu	r4,r7,10009ff0 <memset+0x100>
10009f3c:	29803fcc 	andi	r6,r5,255
10009f40:	3008923a 	slli	r4,r6,8
10009f44:	218cb03a 	or	r6,r4,r6
10009f48:	3008943a 	slli	r4,r6,16
10009f4c:	218cb03a 	or	r6,r4,r6
10009f50:	010003c4 	movi	r4,15
10009f54:	21c0182e 	bgeu	r4,r7,10009fb8 <memset+0xc8>
10009f58:	3b3ffc04 	addi	r12,r7,-16
10009f5c:	6018d13a 	srli	r12,r12,4
10009f60:	1a000104 	addi	r8,r3,4
10009f64:	1ac00204 	addi	r11,r3,8
10009f68:	6008913a 	slli	r4,r12,4
10009f6c:	1a800304 	addi	r10,r3,12
10009f70:	1813883a 	mov	r9,r3
10009f74:	21000504 	addi	r4,r4,20
10009f78:	1909883a 	add	r4,r3,r4
10009f7c:	49800015 	stw	r6,0(r9)
10009f80:	41800015 	stw	r6,0(r8)
10009f84:	59800015 	stw	r6,0(r11)
10009f88:	51800015 	stw	r6,0(r10)
10009f8c:	42000404 	addi	r8,r8,16
10009f90:	4a400404 	addi	r9,r9,16
10009f94:	5ac00404 	addi	r11,r11,16
10009f98:	52800404 	addi	r10,r10,16
10009f9c:	413ff71e 	bne	r8,r4,10009f7c <__alt_data_end+0xf8009f7c>
10009fa0:	63000044 	addi	r12,r12,1
10009fa4:	6018913a 	slli	r12,r12,4
10009fa8:	39c003cc 	andi	r7,r7,15
10009fac:	010000c4 	movi	r4,3
10009fb0:	1b07883a 	add	r3,r3,r12
10009fb4:	21c00e2e 	bgeu	r4,r7,10009ff0 <memset+0x100>
10009fb8:	1813883a 	mov	r9,r3
10009fbc:	3811883a 	mov	r8,r7
10009fc0:	010000c4 	movi	r4,3
10009fc4:	49800015 	stw	r6,0(r9)
10009fc8:	423fff04 	addi	r8,r8,-4
10009fcc:	4a400104 	addi	r9,r9,4
10009fd0:	223ffc36 	bltu	r4,r8,10009fc4 <__alt_data_end+0xf8009fc4>
10009fd4:	393fff04 	addi	r4,r7,-4
10009fd8:	2008d0ba 	srli	r4,r4,2
10009fdc:	39c000cc 	andi	r7,r7,3
10009fe0:	21000044 	addi	r4,r4,1
10009fe4:	2109883a 	add	r4,r4,r4
10009fe8:	2109883a 	add	r4,r4,r4
10009fec:	1907883a 	add	r3,r3,r4
10009ff0:	38000426 	beq	r7,zero,1000a004 <memset+0x114>
10009ff4:	19cf883a 	add	r7,r3,r7
10009ff8:	19400005 	stb	r5,0(r3)
10009ffc:	18c00044 	addi	r3,r3,1
1000a000:	19fffd1e 	bne	r3,r7,10009ff8 <__alt_data_end+0xf8009ff8>
1000a004:	f800283a 	ret
1000a008:	2007883a 	mov	r3,r4
1000a00c:	300f883a 	mov	r7,r6
1000a010:	003fc806 	br	10009f34 <__alt_data_end+0xf8009f34>

1000a014 <_Balloc>:
1000a014:	20801317 	ldw	r2,76(r4)
1000a018:	defffc04 	addi	sp,sp,-16
1000a01c:	dc400115 	stw	r17,4(sp)
1000a020:	dc000015 	stw	r16,0(sp)
1000a024:	dfc00315 	stw	ra,12(sp)
1000a028:	dc800215 	stw	r18,8(sp)
1000a02c:	2023883a 	mov	r17,r4
1000a030:	2821883a 	mov	r16,r5
1000a034:	10000f26 	beq	r2,zero,1000a074 <_Balloc+0x60>
1000a038:	8407883a 	add	r3,r16,r16
1000a03c:	18c7883a 	add	r3,r3,r3
1000a040:	10c7883a 	add	r3,r2,r3
1000a044:	18800017 	ldw	r2,0(r3)
1000a048:	10001126 	beq	r2,zero,1000a090 <_Balloc+0x7c>
1000a04c:	11000017 	ldw	r4,0(r2)
1000a050:	19000015 	stw	r4,0(r3)
1000a054:	10000415 	stw	zero,16(r2)
1000a058:	10000315 	stw	zero,12(r2)
1000a05c:	dfc00317 	ldw	ra,12(sp)
1000a060:	dc800217 	ldw	r18,8(sp)
1000a064:	dc400117 	ldw	r17,4(sp)
1000a068:	dc000017 	ldw	r16,0(sp)
1000a06c:	dec00404 	addi	sp,sp,16
1000a070:	f800283a 	ret
1000a074:	01400104 	movi	r5,4
1000a078:	01800844 	movi	r6,33
1000a07c:	000ceb00 	call	1000ceb0 <_calloc_r>
1000a080:	88801315 	stw	r2,76(r17)
1000a084:	103fec1e 	bne	r2,zero,1000a038 <__alt_data_end+0xf800a038>
1000a088:	0005883a 	mov	r2,zero
1000a08c:	003ff306 	br	1000a05c <__alt_data_end+0xf800a05c>
1000a090:	01400044 	movi	r5,1
1000a094:	2c24983a 	sll	r18,r5,r16
1000a098:	8809883a 	mov	r4,r17
1000a09c:	91800144 	addi	r6,r18,5
1000a0a0:	318d883a 	add	r6,r6,r6
1000a0a4:	318d883a 	add	r6,r6,r6
1000a0a8:	000ceb00 	call	1000ceb0 <_calloc_r>
1000a0ac:	103ff626 	beq	r2,zero,1000a088 <__alt_data_end+0xf800a088>
1000a0b0:	14000115 	stw	r16,4(r2)
1000a0b4:	14800215 	stw	r18,8(r2)
1000a0b8:	003fe606 	br	1000a054 <__alt_data_end+0xf800a054>

1000a0bc <_Bfree>:
1000a0bc:	28000826 	beq	r5,zero,1000a0e0 <_Bfree+0x24>
1000a0c0:	28c00117 	ldw	r3,4(r5)
1000a0c4:	20801317 	ldw	r2,76(r4)
1000a0c8:	18c7883a 	add	r3,r3,r3
1000a0cc:	18c7883a 	add	r3,r3,r3
1000a0d0:	10c5883a 	add	r2,r2,r3
1000a0d4:	10c00017 	ldw	r3,0(r2)
1000a0d8:	28c00015 	stw	r3,0(r5)
1000a0dc:	11400015 	stw	r5,0(r2)
1000a0e0:	f800283a 	ret

1000a0e4 <__multadd>:
1000a0e4:	defff704 	addi	sp,sp,-36
1000a0e8:	dc800215 	stw	r18,8(sp)
1000a0ec:	2c800417 	ldw	r18,16(r5)
1000a0f0:	ddc00715 	stw	r23,28(sp)
1000a0f4:	dd800615 	stw	r22,24(sp)
1000a0f8:	dd000415 	stw	r20,16(sp)
1000a0fc:	dcc00315 	stw	r19,12(sp)
1000a100:	dc400115 	stw	r17,4(sp)
1000a104:	dc000015 	stw	r16,0(sp)
1000a108:	dfc00815 	stw	ra,32(sp)
1000a10c:	dd400515 	stw	r21,20(sp)
1000a110:	2827883a 	mov	r19,r5
1000a114:	2029883a 	mov	r20,r4
1000a118:	3023883a 	mov	r17,r6
1000a11c:	3821883a 	mov	r16,r7
1000a120:	2d800504 	addi	r22,r5,20
1000a124:	002f883a 	mov	r23,zero
1000a128:	b5400017 	ldw	r21,0(r22)
1000a12c:	880b883a 	mov	r5,r17
1000a130:	bdc00044 	addi	r23,r23,1
1000a134:	a93fffcc 	andi	r4,r21,65535
1000a138:	00030800 	call	10003080 <__mulsi3>
1000a13c:	1421883a 	add	r16,r2,r16
1000a140:	a808d43a 	srli	r4,r21,16
1000a144:	802ad43a 	srli	r21,r16,16
1000a148:	880b883a 	mov	r5,r17
1000a14c:	00030800 	call	10003080 <__mulsi3>
1000a150:	a88f883a 	add	r7,r21,r2
1000a154:	3804943a 	slli	r2,r7,16
1000a158:	80ffffcc 	andi	r3,r16,65535
1000a15c:	b5800104 	addi	r22,r22,4
1000a160:	10c7883a 	add	r3,r2,r3
1000a164:	b0ffff15 	stw	r3,-4(r22)
1000a168:	3820d43a 	srli	r16,r7,16
1000a16c:	bcbfee16 	blt	r23,r18,1000a128 <__alt_data_end+0xf800a128>
1000a170:	80000926 	beq	r16,zero,1000a198 <__multadd+0xb4>
1000a174:	98800217 	ldw	r2,8(r19)
1000a178:	9080130e 	bge	r18,r2,1000a1c8 <__multadd+0xe4>
1000a17c:	90800144 	addi	r2,r18,5
1000a180:	1085883a 	add	r2,r2,r2
1000a184:	1085883a 	add	r2,r2,r2
1000a188:	9885883a 	add	r2,r19,r2
1000a18c:	14000015 	stw	r16,0(r2)
1000a190:	94800044 	addi	r18,r18,1
1000a194:	9c800415 	stw	r18,16(r19)
1000a198:	9805883a 	mov	r2,r19
1000a19c:	dfc00817 	ldw	ra,32(sp)
1000a1a0:	ddc00717 	ldw	r23,28(sp)
1000a1a4:	dd800617 	ldw	r22,24(sp)
1000a1a8:	dd400517 	ldw	r21,20(sp)
1000a1ac:	dd000417 	ldw	r20,16(sp)
1000a1b0:	dcc00317 	ldw	r19,12(sp)
1000a1b4:	dc800217 	ldw	r18,8(sp)
1000a1b8:	dc400117 	ldw	r17,4(sp)
1000a1bc:	dc000017 	ldw	r16,0(sp)
1000a1c0:	dec00904 	addi	sp,sp,36
1000a1c4:	f800283a 	ret
1000a1c8:	99400117 	ldw	r5,4(r19)
1000a1cc:	a009883a 	mov	r4,r20
1000a1d0:	29400044 	addi	r5,r5,1
1000a1d4:	000a0140 	call	1000a014 <_Balloc>
1000a1d8:	99800417 	ldw	r6,16(r19)
1000a1dc:	99400304 	addi	r5,r19,12
1000a1e0:	11000304 	addi	r4,r2,12
1000a1e4:	31800084 	addi	r6,r6,2
1000a1e8:	318d883a 	add	r6,r6,r6
1000a1ec:	318d883a 	add	r6,r6,r6
1000a1f0:	1023883a 	mov	r17,r2
1000a1f4:	00043940 	call	10004394 <memcpy>
1000a1f8:	99000117 	ldw	r4,4(r19)
1000a1fc:	a0c01317 	ldw	r3,76(r20)
1000a200:	2109883a 	add	r4,r4,r4
1000a204:	2109883a 	add	r4,r4,r4
1000a208:	1907883a 	add	r3,r3,r4
1000a20c:	18800017 	ldw	r2,0(r3)
1000a210:	98800015 	stw	r2,0(r19)
1000a214:	1cc00015 	stw	r19,0(r3)
1000a218:	8827883a 	mov	r19,r17
1000a21c:	003fd706 	br	1000a17c <__alt_data_end+0xf800a17c>

1000a220 <__s2b>:
1000a220:	defff904 	addi	sp,sp,-28
1000a224:	dc400115 	stw	r17,4(sp)
1000a228:	dc000015 	stw	r16,0(sp)
1000a22c:	2023883a 	mov	r17,r4
1000a230:	2821883a 	mov	r16,r5
1000a234:	39000204 	addi	r4,r7,8
1000a238:	01400244 	movi	r5,9
1000a23c:	dcc00315 	stw	r19,12(sp)
1000a240:	dc800215 	stw	r18,8(sp)
1000a244:	dfc00615 	stw	ra,24(sp)
1000a248:	dd400515 	stw	r21,20(sp)
1000a24c:	dd000415 	stw	r20,16(sp)
1000a250:	3825883a 	mov	r18,r7
1000a254:	3027883a 	mov	r19,r6
1000a258:	0002fc00 	call	10002fc0 <__divsi3>
1000a25c:	00c00044 	movi	r3,1
1000a260:	000b883a 	mov	r5,zero
1000a264:	1880030e 	bge	r3,r2,1000a274 <__s2b+0x54>
1000a268:	18c7883a 	add	r3,r3,r3
1000a26c:	29400044 	addi	r5,r5,1
1000a270:	18bffd16 	blt	r3,r2,1000a268 <__alt_data_end+0xf800a268>
1000a274:	8809883a 	mov	r4,r17
1000a278:	000a0140 	call	1000a014 <_Balloc>
1000a27c:	d8c00717 	ldw	r3,28(sp)
1000a280:	10c00515 	stw	r3,20(r2)
1000a284:	00c00044 	movi	r3,1
1000a288:	10c00415 	stw	r3,16(r2)
1000a28c:	00c00244 	movi	r3,9
1000a290:	1cc0210e 	bge	r3,r19,1000a318 <__s2b+0xf8>
1000a294:	80eb883a 	add	r21,r16,r3
1000a298:	a829883a 	mov	r20,r21
1000a29c:	84e1883a 	add	r16,r16,r19
1000a2a0:	a1c00007 	ldb	r7,0(r20)
1000a2a4:	8809883a 	mov	r4,r17
1000a2a8:	a5000044 	addi	r20,r20,1
1000a2ac:	100b883a 	mov	r5,r2
1000a2b0:	01800284 	movi	r6,10
1000a2b4:	39fff404 	addi	r7,r7,-48
1000a2b8:	000a0e40 	call	1000a0e4 <__multadd>
1000a2bc:	a43ff81e 	bne	r20,r16,1000a2a0 <__alt_data_end+0xf800a2a0>
1000a2c0:	ace1883a 	add	r16,r21,r19
1000a2c4:	843ffe04 	addi	r16,r16,-8
1000a2c8:	9c800a0e 	bge	r19,r18,1000a2f4 <__s2b+0xd4>
1000a2cc:	94e5c83a 	sub	r18,r18,r19
1000a2d0:	84a5883a 	add	r18,r16,r18
1000a2d4:	81c00007 	ldb	r7,0(r16)
1000a2d8:	8809883a 	mov	r4,r17
1000a2dc:	84000044 	addi	r16,r16,1
1000a2e0:	100b883a 	mov	r5,r2
1000a2e4:	01800284 	movi	r6,10
1000a2e8:	39fff404 	addi	r7,r7,-48
1000a2ec:	000a0e40 	call	1000a0e4 <__multadd>
1000a2f0:	84bff81e 	bne	r16,r18,1000a2d4 <__alt_data_end+0xf800a2d4>
1000a2f4:	dfc00617 	ldw	ra,24(sp)
1000a2f8:	dd400517 	ldw	r21,20(sp)
1000a2fc:	dd000417 	ldw	r20,16(sp)
1000a300:	dcc00317 	ldw	r19,12(sp)
1000a304:	dc800217 	ldw	r18,8(sp)
1000a308:	dc400117 	ldw	r17,4(sp)
1000a30c:	dc000017 	ldw	r16,0(sp)
1000a310:	dec00704 	addi	sp,sp,28
1000a314:	f800283a 	ret
1000a318:	84000284 	addi	r16,r16,10
1000a31c:	1827883a 	mov	r19,r3
1000a320:	003fe906 	br	1000a2c8 <__alt_data_end+0xf800a2c8>

1000a324 <__hi0bits>:
1000a324:	20bfffec 	andhi	r2,r4,65535
1000a328:	1000141e 	bne	r2,zero,1000a37c <__hi0bits+0x58>
1000a32c:	2008943a 	slli	r4,r4,16
1000a330:	00800404 	movi	r2,16
1000a334:	20ffc02c 	andhi	r3,r4,65280
1000a338:	1800021e 	bne	r3,zero,1000a344 <__hi0bits+0x20>
1000a33c:	2008923a 	slli	r4,r4,8
1000a340:	10800204 	addi	r2,r2,8
1000a344:	20fc002c 	andhi	r3,r4,61440
1000a348:	1800021e 	bne	r3,zero,1000a354 <__hi0bits+0x30>
1000a34c:	2008913a 	slli	r4,r4,4
1000a350:	10800104 	addi	r2,r2,4
1000a354:	20f0002c 	andhi	r3,r4,49152
1000a358:	1800031e 	bne	r3,zero,1000a368 <__hi0bits+0x44>
1000a35c:	2109883a 	add	r4,r4,r4
1000a360:	10800084 	addi	r2,r2,2
1000a364:	2109883a 	add	r4,r4,r4
1000a368:	20000316 	blt	r4,zero,1000a378 <__hi0bits+0x54>
1000a36c:	2110002c 	andhi	r4,r4,16384
1000a370:	2000041e 	bne	r4,zero,1000a384 <__hi0bits+0x60>
1000a374:	00800804 	movi	r2,32
1000a378:	f800283a 	ret
1000a37c:	0005883a 	mov	r2,zero
1000a380:	003fec06 	br	1000a334 <__alt_data_end+0xf800a334>
1000a384:	10800044 	addi	r2,r2,1
1000a388:	f800283a 	ret

1000a38c <__lo0bits>:
1000a38c:	20c00017 	ldw	r3,0(r4)
1000a390:	188001cc 	andi	r2,r3,7
1000a394:	10000826 	beq	r2,zero,1000a3b8 <__lo0bits+0x2c>
1000a398:	1880004c 	andi	r2,r3,1
1000a39c:	1000211e 	bne	r2,zero,1000a424 <__lo0bits+0x98>
1000a3a0:	1880008c 	andi	r2,r3,2
1000a3a4:	1000211e 	bne	r2,zero,1000a42c <__lo0bits+0xa0>
1000a3a8:	1806d0ba 	srli	r3,r3,2
1000a3ac:	00800084 	movi	r2,2
1000a3b0:	20c00015 	stw	r3,0(r4)
1000a3b4:	f800283a 	ret
1000a3b8:	18bfffcc 	andi	r2,r3,65535
1000a3bc:	10001326 	beq	r2,zero,1000a40c <__lo0bits+0x80>
1000a3c0:	0005883a 	mov	r2,zero
1000a3c4:	19403fcc 	andi	r5,r3,255
1000a3c8:	2800021e 	bne	r5,zero,1000a3d4 <__lo0bits+0x48>
1000a3cc:	1806d23a 	srli	r3,r3,8
1000a3d0:	10800204 	addi	r2,r2,8
1000a3d4:	194003cc 	andi	r5,r3,15
1000a3d8:	2800021e 	bne	r5,zero,1000a3e4 <__lo0bits+0x58>
1000a3dc:	1806d13a 	srli	r3,r3,4
1000a3e0:	10800104 	addi	r2,r2,4
1000a3e4:	194000cc 	andi	r5,r3,3
1000a3e8:	2800021e 	bne	r5,zero,1000a3f4 <__lo0bits+0x68>
1000a3ec:	1806d0ba 	srli	r3,r3,2
1000a3f0:	10800084 	addi	r2,r2,2
1000a3f4:	1940004c 	andi	r5,r3,1
1000a3f8:	2800081e 	bne	r5,zero,1000a41c <__lo0bits+0x90>
1000a3fc:	1806d07a 	srli	r3,r3,1
1000a400:	1800051e 	bne	r3,zero,1000a418 <__lo0bits+0x8c>
1000a404:	00800804 	movi	r2,32
1000a408:	f800283a 	ret
1000a40c:	1806d43a 	srli	r3,r3,16
1000a410:	00800404 	movi	r2,16
1000a414:	003feb06 	br	1000a3c4 <__alt_data_end+0xf800a3c4>
1000a418:	10800044 	addi	r2,r2,1
1000a41c:	20c00015 	stw	r3,0(r4)
1000a420:	f800283a 	ret
1000a424:	0005883a 	mov	r2,zero
1000a428:	f800283a 	ret
1000a42c:	1806d07a 	srli	r3,r3,1
1000a430:	00800044 	movi	r2,1
1000a434:	20c00015 	stw	r3,0(r4)
1000a438:	f800283a 	ret

1000a43c <__i2b>:
1000a43c:	defffd04 	addi	sp,sp,-12
1000a440:	dc000015 	stw	r16,0(sp)
1000a444:	04000044 	movi	r16,1
1000a448:	dc400115 	stw	r17,4(sp)
1000a44c:	2823883a 	mov	r17,r5
1000a450:	800b883a 	mov	r5,r16
1000a454:	dfc00215 	stw	ra,8(sp)
1000a458:	000a0140 	call	1000a014 <_Balloc>
1000a45c:	14400515 	stw	r17,20(r2)
1000a460:	14000415 	stw	r16,16(r2)
1000a464:	dfc00217 	ldw	ra,8(sp)
1000a468:	dc400117 	ldw	r17,4(sp)
1000a46c:	dc000017 	ldw	r16,0(sp)
1000a470:	dec00304 	addi	sp,sp,12
1000a474:	f800283a 	ret

1000a478 <__multiply>:
1000a478:	deffef04 	addi	sp,sp,-68
1000a47c:	dc400815 	stw	r17,32(sp)
1000a480:	dc000715 	stw	r16,28(sp)
1000a484:	2c400417 	ldw	r17,16(r5)
1000a488:	34000417 	ldw	r16,16(r6)
1000a48c:	dd800d15 	stw	r22,52(sp)
1000a490:	dc800915 	stw	r18,36(sp)
1000a494:	dfc01015 	stw	ra,64(sp)
1000a498:	df000f15 	stw	fp,60(sp)
1000a49c:	ddc00e15 	stw	r23,56(sp)
1000a4a0:	dd400c15 	stw	r21,48(sp)
1000a4a4:	dd000b15 	stw	r20,44(sp)
1000a4a8:	dcc00a15 	stw	r19,40(sp)
1000a4ac:	2825883a 	mov	r18,r5
1000a4b0:	302d883a 	mov	r22,r6
1000a4b4:	8c009116 	blt	r17,r16,1000a6fc <__multiply+0x284>
1000a4b8:	8005883a 	mov	r2,r16
1000a4bc:	8821883a 	mov	r16,r17
1000a4c0:	1023883a 	mov	r17,r2
1000a4c4:	90800217 	ldw	r2,8(r18)
1000a4c8:	8447883a 	add	r3,r16,r17
1000a4cc:	d8c00215 	stw	r3,8(sp)
1000a4d0:	91400117 	ldw	r5,4(r18)
1000a4d4:	10c0010e 	bge	r2,r3,1000a4dc <__multiply+0x64>
1000a4d8:	29400044 	addi	r5,r5,1
1000a4dc:	000a0140 	call	1000a014 <_Balloc>
1000a4e0:	d8c00217 	ldw	r3,8(sp)
1000a4e4:	d8800615 	stw	r2,24(sp)
1000a4e8:	18eb883a 	add	r21,r3,r3
1000a4ec:	ad6b883a 	add	r21,r21,r21
1000a4f0:	10c00504 	addi	r3,r2,20
1000a4f4:	1d6b883a 	add	r21,r3,r21
1000a4f8:	d8c00115 	stw	r3,4(sp)
1000a4fc:	dd400315 	stw	r21,12(sp)
1000a500:	1805883a 	mov	r2,r3
1000a504:	1d40042e 	bgeu	r3,r21,1000a518 <__multiply+0xa0>
1000a508:	d8c00317 	ldw	r3,12(sp)
1000a50c:	10000015 	stw	zero,0(r2)
1000a510:	10800104 	addi	r2,r2,4
1000a514:	10fffc36 	bltu	r2,r3,1000a508 <__alt_data_end+0xf800a508>
1000a518:	8c63883a 	add	r17,r17,r17
1000a51c:	b5800504 	addi	r22,r22,20
1000a520:	8c63883a 	add	r17,r17,r17
1000a524:	94800504 	addi	r18,r18,20
1000a528:	8421883a 	add	r16,r16,r16
1000a52c:	b463883a 	add	r17,r22,r17
1000a530:	8421883a 	add	r16,r16,r16
1000a534:	dd800015 	stw	r22,0(sp)
1000a538:	dc800415 	stw	r18,16(sp)
1000a53c:	dc400515 	stw	r17,20(sp)
1000a540:	9429883a 	add	r20,r18,r16
1000a544:	b4404f2e 	bgeu	r22,r17,1000a684 <__multiply+0x20c>
1000a548:	d8c00017 	ldw	r3,0(sp)
1000a54c:	1c800017 	ldw	r18,0(r3)
1000a550:	943fffcc 	andi	r16,r18,65535
1000a554:	80001e26 	beq	r16,zero,1000a5d0 <__multiply+0x158>
1000a558:	dd800117 	ldw	r22,4(sp)
1000a55c:	dd400417 	ldw	r21,16(sp)
1000a560:	0025883a 	mov	r18,zero
1000a564:	adc00017 	ldw	r23,0(r21)
1000a568:	b4c00017 	ldw	r19,0(r22)
1000a56c:	800b883a 	mov	r5,r16
1000a570:	b93fffcc 	andi	r4,r23,65535
1000a574:	00030800 	call	10003080 <__mulsi3>
1000a578:	9c7fffcc 	andi	r17,r19,65535
1000a57c:	8885883a 	add	r2,r17,r2
1000a580:	b808d43a 	srli	r4,r23,16
1000a584:	14a3883a 	add	r17,r2,r18
1000a588:	9826d43a 	srli	r19,r19,16
1000a58c:	8824d43a 	srli	r18,r17,16
1000a590:	800b883a 	mov	r5,r16
1000a594:	00030800 	call	10003080 <__mulsi3>
1000a598:	9885883a 	add	r2,r19,r2
1000a59c:	14a7883a 	add	r19,r2,r18
1000a5a0:	88ffffcc 	andi	r3,r17,65535
1000a5a4:	9822943a 	slli	r17,r19,16
1000a5a8:	ad400104 	addi	r21,r21,4
1000a5ac:	b005883a 	mov	r2,r22
1000a5b0:	88c6b03a 	or	r3,r17,r3
1000a5b4:	b0c00015 	stw	r3,0(r22)
1000a5b8:	9824d43a 	srli	r18,r19,16
1000a5bc:	b5800104 	addi	r22,r22,4
1000a5c0:	ad3fe836 	bltu	r21,r20,1000a564 <__alt_data_end+0xf800a564>
1000a5c4:	d8c00017 	ldw	r3,0(sp)
1000a5c8:	14800115 	stw	r18,4(r2)
1000a5cc:	1c800017 	ldw	r18,0(r3)
1000a5d0:	9024d43a 	srli	r18,r18,16
1000a5d4:	90002226 	beq	r18,zero,1000a660 <__multiply+0x1e8>
1000a5d8:	d8c00117 	ldw	r3,4(sp)
1000a5dc:	dd800417 	ldw	r22,16(sp)
1000a5e0:	002f883a 	mov	r23,zero
1000a5e4:	1f000017 	ldw	fp,0(r3)
1000a5e8:	1823883a 	mov	r17,r3
1000a5ec:	182b883a 	mov	r21,r3
1000a5f0:	e021883a 	mov	r16,fp
1000a5f4:	00000106 	br	1000a5fc <__multiply+0x184>
1000a5f8:	982b883a 	mov	r21,r19
1000a5fc:	b100000b 	ldhu	r4,0(r22)
1000a600:	8020d43a 	srli	r16,r16,16
1000a604:	900b883a 	mov	r5,r18
1000a608:	00030800 	call	10003080 <__mulsi3>
1000a60c:	1405883a 	add	r2,r2,r16
1000a610:	15ef883a 	add	r23,r2,r23
1000a614:	b804943a 	slli	r2,r23,16
1000a618:	e0ffffcc 	andi	r3,fp,65535
1000a61c:	8c400104 	addi	r17,r17,4
1000a620:	10c6b03a 	or	r3,r2,r3
1000a624:	88ffff15 	stw	r3,-4(r17)
1000a628:	b5800104 	addi	r22,r22,4
1000a62c:	b13fff17 	ldw	r4,-4(r22)
1000a630:	acc00104 	addi	r19,r21,4
1000a634:	900b883a 	mov	r5,r18
1000a638:	2008d43a 	srli	r4,r4,16
1000a63c:	9c000017 	ldw	r16,0(r19)
1000a640:	00030800 	call	10003080 <__mulsi3>
1000a644:	b806d43a 	srli	r3,r23,16
1000a648:	813fffcc 	andi	r4,r16,65535
1000a64c:	1105883a 	add	r2,r2,r4
1000a650:	10f9883a 	add	fp,r2,r3
1000a654:	e02ed43a 	srli	r23,fp,16
1000a658:	b53fe736 	bltu	r22,r20,1000a5f8 <__alt_data_end+0xf800a5f8>
1000a65c:	af000115 	stw	fp,4(r21)
1000a660:	d8c00017 	ldw	r3,0(sp)
1000a664:	d9000517 	ldw	r4,20(sp)
1000a668:	18c00104 	addi	r3,r3,4
1000a66c:	d8c00015 	stw	r3,0(sp)
1000a670:	d8c00117 	ldw	r3,4(sp)
1000a674:	18c00104 	addi	r3,r3,4
1000a678:	d8c00115 	stw	r3,4(sp)
1000a67c:	d8c00017 	ldw	r3,0(sp)
1000a680:	193fb136 	bltu	r3,r4,1000a548 <__alt_data_end+0xf800a548>
1000a684:	d8c00217 	ldw	r3,8(sp)
1000a688:	00c00c0e 	bge	zero,r3,1000a6bc <__multiply+0x244>
1000a68c:	d8c00317 	ldw	r3,12(sp)
1000a690:	18bfff17 	ldw	r2,-4(r3)
1000a694:	1d7fff04 	addi	r21,r3,-4
1000a698:	10000326 	beq	r2,zero,1000a6a8 <__multiply+0x230>
1000a69c:	00000706 	br	1000a6bc <__multiply+0x244>
1000a6a0:	a8800017 	ldw	r2,0(r21)
1000a6a4:	1000051e 	bne	r2,zero,1000a6bc <__multiply+0x244>
1000a6a8:	d8c00217 	ldw	r3,8(sp)
1000a6ac:	ad7fff04 	addi	r21,r21,-4
1000a6b0:	18ffffc4 	addi	r3,r3,-1
1000a6b4:	d8c00215 	stw	r3,8(sp)
1000a6b8:	183ff91e 	bne	r3,zero,1000a6a0 <__alt_data_end+0xf800a6a0>
1000a6bc:	d8c00617 	ldw	r3,24(sp)
1000a6c0:	d9000217 	ldw	r4,8(sp)
1000a6c4:	1805883a 	mov	r2,r3
1000a6c8:	19000415 	stw	r4,16(r3)
1000a6cc:	dfc01017 	ldw	ra,64(sp)
1000a6d0:	df000f17 	ldw	fp,60(sp)
1000a6d4:	ddc00e17 	ldw	r23,56(sp)
1000a6d8:	dd800d17 	ldw	r22,52(sp)
1000a6dc:	dd400c17 	ldw	r21,48(sp)
1000a6e0:	dd000b17 	ldw	r20,44(sp)
1000a6e4:	dcc00a17 	ldw	r19,40(sp)
1000a6e8:	dc800917 	ldw	r18,36(sp)
1000a6ec:	dc400817 	ldw	r17,32(sp)
1000a6f0:	dc000717 	ldw	r16,28(sp)
1000a6f4:	dec01104 	addi	sp,sp,68
1000a6f8:	f800283a 	ret
1000a6fc:	3025883a 	mov	r18,r6
1000a700:	282d883a 	mov	r22,r5
1000a704:	003f6f06 	br	1000a4c4 <__alt_data_end+0xf800a4c4>

1000a708 <__pow5mult>:
1000a708:	defffa04 	addi	sp,sp,-24
1000a70c:	dcc00315 	stw	r19,12(sp)
1000a710:	dc800215 	stw	r18,8(sp)
1000a714:	dc000015 	stw	r16,0(sp)
1000a718:	dfc00515 	stw	ra,20(sp)
1000a71c:	dd000415 	stw	r20,16(sp)
1000a720:	dc400115 	stw	r17,4(sp)
1000a724:	308000cc 	andi	r2,r6,3
1000a728:	3021883a 	mov	r16,r6
1000a72c:	2027883a 	mov	r19,r4
1000a730:	2825883a 	mov	r18,r5
1000a734:	10002e1e 	bne	r2,zero,1000a7f0 <__pow5mult+0xe8>
1000a738:	8021d0ba 	srai	r16,r16,2
1000a73c:	80001a26 	beq	r16,zero,1000a7a8 <__pow5mult+0xa0>
1000a740:	9c401217 	ldw	r17,72(r19)
1000a744:	8800061e 	bne	r17,zero,1000a760 <__pow5mult+0x58>
1000a748:	00003406 	br	1000a81c <__pow5mult+0x114>
1000a74c:	8021d07a 	srai	r16,r16,1
1000a750:	80001526 	beq	r16,zero,1000a7a8 <__pow5mult+0xa0>
1000a754:	88800017 	ldw	r2,0(r17)
1000a758:	10001c26 	beq	r2,zero,1000a7cc <__pow5mult+0xc4>
1000a75c:	1023883a 	mov	r17,r2
1000a760:	80c0004c 	andi	r3,r16,1
1000a764:	183ff926 	beq	r3,zero,1000a74c <__alt_data_end+0xf800a74c>
1000a768:	900b883a 	mov	r5,r18
1000a76c:	880d883a 	mov	r6,r17
1000a770:	9809883a 	mov	r4,r19
1000a774:	000a4780 	call	1000a478 <__multiply>
1000a778:	90001b26 	beq	r18,zero,1000a7e8 <__pow5mult+0xe0>
1000a77c:	91c00117 	ldw	r7,4(r18)
1000a780:	98c01317 	ldw	r3,76(r19)
1000a784:	8021d07a 	srai	r16,r16,1
1000a788:	39cf883a 	add	r7,r7,r7
1000a78c:	39cf883a 	add	r7,r7,r7
1000a790:	19c7883a 	add	r3,r3,r7
1000a794:	19000017 	ldw	r4,0(r3)
1000a798:	91000015 	stw	r4,0(r18)
1000a79c:	1c800015 	stw	r18,0(r3)
1000a7a0:	1025883a 	mov	r18,r2
1000a7a4:	803feb1e 	bne	r16,zero,1000a754 <__alt_data_end+0xf800a754>
1000a7a8:	9005883a 	mov	r2,r18
1000a7ac:	dfc00517 	ldw	ra,20(sp)
1000a7b0:	dd000417 	ldw	r20,16(sp)
1000a7b4:	dcc00317 	ldw	r19,12(sp)
1000a7b8:	dc800217 	ldw	r18,8(sp)
1000a7bc:	dc400117 	ldw	r17,4(sp)
1000a7c0:	dc000017 	ldw	r16,0(sp)
1000a7c4:	dec00604 	addi	sp,sp,24
1000a7c8:	f800283a 	ret
1000a7cc:	9809883a 	mov	r4,r19
1000a7d0:	880b883a 	mov	r5,r17
1000a7d4:	880d883a 	mov	r6,r17
1000a7d8:	000a4780 	call	1000a478 <__multiply>
1000a7dc:	88800015 	stw	r2,0(r17)
1000a7e0:	10000015 	stw	zero,0(r2)
1000a7e4:	003fdd06 	br	1000a75c <__alt_data_end+0xf800a75c>
1000a7e8:	1025883a 	mov	r18,r2
1000a7ec:	003fd706 	br	1000a74c <__alt_data_end+0xf800a74c>
1000a7f0:	10bfffc4 	addi	r2,r2,-1
1000a7f4:	1085883a 	add	r2,r2,r2
1000a7f8:	00c40074 	movhi	r3,4097
1000a7fc:	18d38d04 	addi	r3,r3,20020
1000a800:	1085883a 	add	r2,r2,r2
1000a804:	1885883a 	add	r2,r3,r2
1000a808:	11800017 	ldw	r6,0(r2)
1000a80c:	000f883a 	mov	r7,zero
1000a810:	000a0e40 	call	1000a0e4 <__multadd>
1000a814:	1025883a 	mov	r18,r2
1000a818:	003fc706 	br	1000a738 <__alt_data_end+0xf800a738>
1000a81c:	05000044 	movi	r20,1
1000a820:	9809883a 	mov	r4,r19
1000a824:	a00b883a 	mov	r5,r20
1000a828:	000a0140 	call	1000a014 <_Balloc>
1000a82c:	1023883a 	mov	r17,r2
1000a830:	00809c44 	movi	r2,625
1000a834:	88800515 	stw	r2,20(r17)
1000a838:	8d000415 	stw	r20,16(r17)
1000a83c:	9c401215 	stw	r17,72(r19)
1000a840:	88000015 	stw	zero,0(r17)
1000a844:	003fc606 	br	1000a760 <__alt_data_end+0xf800a760>

1000a848 <__lshift>:
1000a848:	defff904 	addi	sp,sp,-28
1000a84c:	dd000415 	stw	r20,16(sp)
1000a850:	dcc00315 	stw	r19,12(sp)
1000a854:	3029d17a 	srai	r20,r6,5
1000a858:	2cc00417 	ldw	r19,16(r5)
1000a85c:	28800217 	ldw	r2,8(r5)
1000a860:	dd400515 	stw	r21,20(sp)
1000a864:	a4e7883a 	add	r19,r20,r19
1000a868:	dc800215 	stw	r18,8(sp)
1000a86c:	dc400115 	stw	r17,4(sp)
1000a870:	dc000015 	stw	r16,0(sp)
1000a874:	dfc00615 	stw	ra,24(sp)
1000a878:	9c000044 	addi	r16,r19,1
1000a87c:	2823883a 	mov	r17,r5
1000a880:	302b883a 	mov	r21,r6
1000a884:	2025883a 	mov	r18,r4
1000a888:	29400117 	ldw	r5,4(r5)
1000a88c:	1400030e 	bge	r2,r16,1000a89c <__lshift+0x54>
1000a890:	1085883a 	add	r2,r2,r2
1000a894:	29400044 	addi	r5,r5,1
1000a898:	143ffd16 	blt	r2,r16,1000a890 <__alt_data_end+0xf800a890>
1000a89c:	9009883a 	mov	r4,r18
1000a8a0:	000a0140 	call	1000a014 <_Balloc>
1000a8a4:	11c00504 	addi	r7,r2,20
1000a8a8:	0500090e 	bge	zero,r20,1000a8d0 <__lshift+0x88>
1000a8ac:	3811883a 	mov	r8,r7
1000a8b0:	0007883a 	mov	r3,zero
1000a8b4:	40000015 	stw	zero,0(r8)
1000a8b8:	18c00044 	addi	r3,r3,1
1000a8bc:	42000104 	addi	r8,r8,4
1000a8c0:	1d3ffc1e 	bne	r3,r20,1000a8b4 <__alt_data_end+0xf800a8b4>
1000a8c4:	18c7883a 	add	r3,r3,r3
1000a8c8:	18c7883a 	add	r3,r3,r3
1000a8cc:	38cf883a 	add	r7,r7,r3
1000a8d0:	89000417 	ldw	r4,16(r17)
1000a8d4:	88c00504 	addi	r3,r17,20
1000a8d8:	a98007cc 	andi	r6,r21,31
1000a8dc:	2109883a 	add	r4,r4,r4
1000a8e0:	2109883a 	add	r4,r4,r4
1000a8e4:	1909883a 	add	r4,r3,r4
1000a8e8:	30002326 	beq	r6,zero,1000a978 <__lshift+0x130>
1000a8ec:	01400804 	movi	r5,32
1000a8f0:	298bc83a 	sub	r5,r5,r6
1000a8f4:	0013883a 	mov	r9,zero
1000a8f8:	1a000017 	ldw	r8,0(r3)
1000a8fc:	3815883a 	mov	r10,r7
1000a900:	39c00104 	addi	r7,r7,4
1000a904:	4190983a 	sll	r8,r8,r6
1000a908:	18c00104 	addi	r3,r3,4
1000a90c:	4a10b03a 	or	r8,r9,r8
1000a910:	3a3fff15 	stw	r8,-4(r7)
1000a914:	1a3fff17 	ldw	r8,-4(r3)
1000a918:	4152d83a 	srl	r9,r8,r5
1000a91c:	193ff636 	bltu	r3,r4,1000a8f8 <__alt_data_end+0xf800a8f8>
1000a920:	52400115 	stw	r9,4(r10)
1000a924:	48000126 	beq	r9,zero,1000a92c <__lshift+0xe4>
1000a928:	9c000084 	addi	r16,r19,2
1000a92c:	89000117 	ldw	r4,4(r17)
1000a930:	90c01317 	ldw	r3,76(r18)
1000a934:	843fffc4 	addi	r16,r16,-1
1000a938:	2109883a 	add	r4,r4,r4
1000a93c:	2109883a 	add	r4,r4,r4
1000a940:	1907883a 	add	r3,r3,r4
1000a944:	19000017 	ldw	r4,0(r3)
1000a948:	14000415 	stw	r16,16(r2)
1000a94c:	89000015 	stw	r4,0(r17)
1000a950:	1c400015 	stw	r17,0(r3)
1000a954:	dfc00617 	ldw	ra,24(sp)
1000a958:	dd400517 	ldw	r21,20(sp)
1000a95c:	dd000417 	ldw	r20,16(sp)
1000a960:	dcc00317 	ldw	r19,12(sp)
1000a964:	dc800217 	ldw	r18,8(sp)
1000a968:	dc400117 	ldw	r17,4(sp)
1000a96c:	dc000017 	ldw	r16,0(sp)
1000a970:	dec00704 	addi	sp,sp,28
1000a974:	f800283a 	ret
1000a978:	19400017 	ldw	r5,0(r3)
1000a97c:	39c00104 	addi	r7,r7,4
1000a980:	18c00104 	addi	r3,r3,4
1000a984:	397fff15 	stw	r5,-4(r7)
1000a988:	193ffb36 	bltu	r3,r4,1000a978 <__alt_data_end+0xf800a978>
1000a98c:	003fe706 	br	1000a92c <__alt_data_end+0xf800a92c>

1000a990 <__mcmp>:
1000a990:	20800417 	ldw	r2,16(r4)
1000a994:	28c00417 	ldw	r3,16(r5)
1000a998:	10c5c83a 	sub	r2,r2,r3
1000a99c:	1000111e 	bne	r2,zero,1000a9e4 <__mcmp+0x54>
1000a9a0:	18c7883a 	add	r3,r3,r3
1000a9a4:	18c7883a 	add	r3,r3,r3
1000a9a8:	21000504 	addi	r4,r4,20
1000a9ac:	29400504 	addi	r5,r5,20
1000a9b0:	20c5883a 	add	r2,r4,r3
1000a9b4:	28cb883a 	add	r5,r5,r3
1000a9b8:	00000106 	br	1000a9c0 <__mcmp+0x30>
1000a9bc:	20800a2e 	bgeu	r4,r2,1000a9e8 <__mcmp+0x58>
1000a9c0:	10bfff04 	addi	r2,r2,-4
1000a9c4:	297fff04 	addi	r5,r5,-4
1000a9c8:	11800017 	ldw	r6,0(r2)
1000a9cc:	28c00017 	ldw	r3,0(r5)
1000a9d0:	30fffa26 	beq	r6,r3,1000a9bc <__alt_data_end+0xf800a9bc>
1000a9d4:	30c00236 	bltu	r6,r3,1000a9e0 <__mcmp+0x50>
1000a9d8:	00800044 	movi	r2,1
1000a9dc:	f800283a 	ret
1000a9e0:	00bfffc4 	movi	r2,-1
1000a9e4:	f800283a 	ret
1000a9e8:	0005883a 	mov	r2,zero
1000a9ec:	f800283a 	ret

1000a9f0 <__mdiff>:
1000a9f0:	defffb04 	addi	sp,sp,-20
1000a9f4:	dc000015 	stw	r16,0(sp)
1000a9f8:	2821883a 	mov	r16,r5
1000a9fc:	dcc00315 	stw	r19,12(sp)
1000aa00:	300b883a 	mov	r5,r6
1000aa04:	2027883a 	mov	r19,r4
1000aa08:	8009883a 	mov	r4,r16
1000aa0c:	dc800215 	stw	r18,8(sp)
1000aa10:	dfc00415 	stw	ra,16(sp)
1000aa14:	dc400115 	stw	r17,4(sp)
1000aa18:	3025883a 	mov	r18,r6
1000aa1c:	000a9900 	call	1000a990 <__mcmp>
1000aa20:	10005226 	beq	r2,zero,1000ab6c <__mdiff+0x17c>
1000aa24:	10004c16 	blt	r2,zero,1000ab58 <__mdiff+0x168>
1000aa28:	0023883a 	mov	r17,zero
1000aa2c:	81400117 	ldw	r5,4(r16)
1000aa30:	9809883a 	mov	r4,r19
1000aa34:	000a0140 	call	1000a014 <_Balloc>
1000aa38:	83400417 	ldw	r13,16(r16)
1000aa3c:	93800417 	ldw	r14,16(r18)
1000aa40:	81000504 	addi	r4,r16,20
1000aa44:	6b59883a 	add	r12,r13,r13
1000aa48:	739d883a 	add	r14,r14,r14
1000aa4c:	6319883a 	add	r12,r12,r12
1000aa50:	91800504 	addi	r6,r18,20
1000aa54:	739d883a 	add	r14,r14,r14
1000aa58:	14400315 	stw	r17,12(r2)
1000aa5c:	2319883a 	add	r12,r4,r12
1000aa60:	339d883a 	add	r14,r6,r14
1000aa64:	12400504 	addi	r9,r2,20
1000aa68:	0007883a 	mov	r3,zero
1000aa6c:	22000017 	ldw	r8,0(r4)
1000aa70:	32800017 	ldw	r10,0(r6)
1000aa74:	4ac00104 	addi	r11,r9,4
1000aa78:	41ffffcc 	andi	r7,r8,65535
1000aa7c:	38c7883a 	add	r3,r7,r3
1000aa80:	51ffffcc 	andi	r7,r10,65535
1000aa84:	19cfc83a 	sub	r7,r3,r7
1000aa88:	4010d43a 	srli	r8,r8,16
1000aa8c:	5014d43a 	srli	r10,r10,16
1000aa90:	3807d43a 	srai	r3,r7,16
1000aa94:	39ffffcc 	andi	r7,r7,65535
1000aa98:	4291c83a 	sub	r8,r8,r10
1000aa9c:	40c7883a 	add	r3,r8,r3
1000aaa0:	1810943a 	slli	r8,r3,16
1000aaa4:	31800104 	addi	r6,r6,4
1000aaa8:	21000104 	addi	r4,r4,4
1000aaac:	41ceb03a 	or	r7,r8,r7
1000aab0:	49c00015 	stw	r7,0(r9)
1000aab4:	1807d43a 	srai	r3,r3,16
1000aab8:	580b883a 	mov	r5,r11
1000aabc:	5813883a 	mov	r9,r11
1000aac0:	33bfea36 	bltu	r6,r14,1000aa6c <__alt_data_end+0xf800aa6c>
1000aac4:	2011883a 	mov	r8,r4
1000aac8:	2300152e 	bgeu	r4,r12,1000ab20 <__mdiff+0x130>
1000aacc:	21400017 	ldw	r5,0(r4)
1000aad0:	4a400104 	addi	r9,r9,4
1000aad4:	21000104 	addi	r4,r4,4
1000aad8:	29ffffcc 	andi	r7,r5,65535
1000aadc:	38c7883a 	add	r3,r7,r3
1000aae0:	280ad43a 	srli	r5,r5,16
1000aae4:	180dd43a 	srai	r6,r3,16
1000aae8:	19ffffcc 	andi	r7,r3,65535
1000aaec:	3147883a 	add	r3,r6,r5
1000aaf0:	180a943a 	slli	r5,r3,16
1000aaf4:	1807d43a 	srai	r3,r3,16
1000aaf8:	29ceb03a 	or	r7,r5,r7
1000aafc:	49ffff15 	stw	r7,-4(r9)
1000ab00:	233ff236 	bltu	r4,r12,1000aacc <__alt_data_end+0xf800aacc>
1000ab04:	0206303a 	nor	r3,zero,r8
1000ab08:	1b07883a 	add	r3,r3,r12
1000ab0c:	1806d0ba 	srli	r3,r3,2
1000ab10:	18c00044 	addi	r3,r3,1
1000ab14:	18c7883a 	add	r3,r3,r3
1000ab18:	18c7883a 	add	r3,r3,r3
1000ab1c:	58cb883a 	add	r5,r11,r3
1000ab20:	28ffff04 	addi	r3,r5,-4
1000ab24:	3800041e 	bne	r7,zero,1000ab38 <__mdiff+0x148>
1000ab28:	18ffff04 	addi	r3,r3,-4
1000ab2c:	19000017 	ldw	r4,0(r3)
1000ab30:	6b7fffc4 	addi	r13,r13,-1
1000ab34:	203ffc26 	beq	r4,zero,1000ab28 <__alt_data_end+0xf800ab28>
1000ab38:	13400415 	stw	r13,16(r2)
1000ab3c:	dfc00417 	ldw	ra,16(sp)
1000ab40:	dcc00317 	ldw	r19,12(sp)
1000ab44:	dc800217 	ldw	r18,8(sp)
1000ab48:	dc400117 	ldw	r17,4(sp)
1000ab4c:	dc000017 	ldw	r16,0(sp)
1000ab50:	dec00504 	addi	sp,sp,20
1000ab54:	f800283a 	ret
1000ab58:	8005883a 	mov	r2,r16
1000ab5c:	04400044 	movi	r17,1
1000ab60:	9021883a 	mov	r16,r18
1000ab64:	1025883a 	mov	r18,r2
1000ab68:	003fb006 	br	1000aa2c <__alt_data_end+0xf800aa2c>
1000ab6c:	9809883a 	mov	r4,r19
1000ab70:	000b883a 	mov	r5,zero
1000ab74:	000a0140 	call	1000a014 <_Balloc>
1000ab78:	00c00044 	movi	r3,1
1000ab7c:	10c00415 	stw	r3,16(r2)
1000ab80:	10000515 	stw	zero,20(r2)
1000ab84:	003fed06 	br	1000ab3c <__alt_data_end+0xf800ab3c>

1000ab88 <__ulp>:
1000ab88:	295ffc2c 	andhi	r5,r5,32752
1000ab8c:	00bf3034 	movhi	r2,64704
1000ab90:	2887883a 	add	r3,r5,r2
1000ab94:	00c0020e 	bge	zero,r3,1000aba0 <__ulp+0x18>
1000ab98:	0005883a 	mov	r2,zero
1000ab9c:	f800283a 	ret
1000aba0:	00c7c83a 	sub	r3,zero,r3
1000aba4:	180bd53a 	srai	r5,r3,20
1000aba8:	008004c4 	movi	r2,19
1000abac:	11400a0e 	bge	r2,r5,1000abd8 <__ulp+0x50>
1000abb0:	00800c84 	movi	r2,50
1000abb4:	0007883a 	mov	r3,zero
1000abb8:	11400516 	blt	r2,r5,1000abd0 <__ulp+0x48>
1000abbc:	00800cc4 	movi	r2,51
1000abc0:	114bc83a 	sub	r5,r2,r5
1000abc4:	00800044 	movi	r2,1
1000abc8:	1144983a 	sll	r2,r2,r5
1000abcc:	f800283a 	ret
1000abd0:	00800044 	movi	r2,1
1000abd4:	f800283a 	ret
1000abd8:	00800234 	movhi	r2,8
1000abdc:	1147d83a 	sra	r3,r2,r5
1000abe0:	0005883a 	mov	r2,zero
1000abe4:	f800283a 	ret

1000abe8 <__b2d>:
1000abe8:	defffa04 	addi	sp,sp,-24
1000abec:	dc000015 	stw	r16,0(sp)
1000abf0:	24000417 	ldw	r16,16(r4)
1000abf4:	dc400115 	stw	r17,4(sp)
1000abf8:	24400504 	addi	r17,r4,20
1000abfc:	8421883a 	add	r16,r16,r16
1000ac00:	8421883a 	add	r16,r16,r16
1000ac04:	8c21883a 	add	r16,r17,r16
1000ac08:	dc800215 	stw	r18,8(sp)
1000ac0c:	84bfff17 	ldw	r18,-4(r16)
1000ac10:	dd000415 	stw	r20,16(sp)
1000ac14:	dcc00315 	stw	r19,12(sp)
1000ac18:	9009883a 	mov	r4,r18
1000ac1c:	2829883a 	mov	r20,r5
1000ac20:	dfc00515 	stw	ra,20(sp)
1000ac24:	000a3240 	call	1000a324 <__hi0bits>
1000ac28:	00c00804 	movi	r3,32
1000ac2c:	1887c83a 	sub	r3,r3,r2
1000ac30:	a0c00015 	stw	r3,0(r20)
1000ac34:	00c00284 	movi	r3,10
1000ac38:	84ffff04 	addi	r19,r16,-4
1000ac3c:	18801216 	blt	r3,r2,1000ac88 <__b2d+0xa0>
1000ac40:	014002c4 	movi	r5,11
1000ac44:	2889c83a 	sub	r4,r5,r2
1000ac48:	9106d83a 	srl	r3,r18,r4
1000ac4c:	18cffc34 	orhi	r3,r3,16368
1000ac50:	8cc0282e 	bgeu	r17,r19,1000acf4 <__b2d+0x10c>
1000ac54:	817ffe17 	ldw	r5,-8(r16)
1000ac58:	290ad83a 	srl	r5,r5,r4
1000ac5c:	10800544 	addi	r2,r2,21
1000ac60:	9084983a 	sll	r2,r18,r2
1000ac64:	2884b03a 	or	r2,r5,r2
1000ac68:	dfc00517 	ldw	ra,20(sp)
1000ac6c:	dd000417 	ldw	r20,16(sp)
1000ac70:	dcc00317 	ldw	r19,12(sp)
1000ac74:	dc800217 	ldw	r18,8(sp)
1000ac78:	dc400117 	ldw	r17,4(sp)
1000ac7c:	dc000017 	ldw	r16,0(sp)
1000ac80:	dec00604 	addi	sp,sp,24
1000ac84:	f800283a 	ret
1000ac88:	113ffd44 	addi	r4,r2,-11
1000ac8c:	8cc00f2e 	bgeu	r17,r19,1000accc <__b2d+0xe4>
1000ac90:	81bffe04 	addi	r6,r16,-8
1000ac94:	817ffe17 	ldw	r5,-8(r16)
1000ac98:	20001326 	beq	r4,zero,1000ace8 <__b2d+0x100>
1000ac9c:	00c00ac4 	movi	r3,43
1000aca0:	1885c83a 	sub	r2,r3,r2
1000aca4:	2886d83a 	srl	r3,r5,r2
1000aca8:	9124983a 	sll	r18,r18,r4
1000acac:	90e4b03a 	or	r18,r18,r3
1000acb0:	90cffc34 	orhi	r3,r18,16368
1000acb4:	8980112e 	bgeu	r17,r6,1000acfc <__b2d+0x114>
1000acb8:	81bffd17 	ldw	r6,-12(r16)
1000acbc:	308cd83a 	srl	r6,r6,r2
1000acc0:	2904983a 	sll	r2,r5,r4
1000acc4:	1184b03a 	or	r2,r2,r6
1000acc8:	003fe706 	br	1000ac68 <__alt_data_end+0xf800ac68>
1000accc:	20000526 	beq	r4,zero,1000ace4 <__b2d+0xfc>
1000acd0:	9124983a 	sll	r18,r18,r4
1000acd4:	000d883a 	mov	r6,zero
1000acd8:	000b883a 	mov	r5,zero
1000acdc:	90cffc34 	orhi	r3,r18,16368
1000ace0:	003ff706 	br	1000acc0 <__alt_data_end+0xf800acc0>
1000ace4:	000b883a 	mov	r5,zero
1000ace8:	90cffc34 	orhi	r3,r18,16368
1000acec:	2805883a 	mov	r2,r5
1000acf0:	003fdd06 	br	1000ac68 <__alt_data_end+0xf800ac68>
1000acf4:	000b883a 	mov	r5,zero
1000acf8:	003fd806 	br	1000ac5c <__alt_data_end+0xf800ac5c>
1000acfc:	000d883a 	mov	r6,zero
1000ad00:	003fef06 	br	1000acc0 <__alt_data_end+0xf800acc0>

1000ad04 <__d2b>:
1000ad04:	defff704 	addi	sp,sp,-36
1000ad08:	dc000215 	stw	r16,8(sp)
1000ad0c:	3021883a 	mov	r16,r6
1000ad10:	dc400315 	stw	r17,12(sp)
1000ad14:	8022907a 	slli	r17,r16,1
1000ad18:	dd400715 	stw	r21,28(sp)
1000ad1c:	282b883a 	mov	r21,r5
1000ad20:	01400044 	movi	r5,1
1000ad24:	dd000615 	stw	r20,24(sp)
1000ad28:	dcc00515 	stw	r19,20(sp)
1000ad2c:	dc800415 	stw	r18,16(sp)
1000ad30:	dfc00815 	stw	ra,32(sp)
1000ad34:	3829883a 	mov	r20,r7
1000ad38:	dc800917 	ldw	r18,36(sp)
1000ad3c:	8822d57a 	srli	r17,r17,21
1000ad40:	000a0140 	call	1000a014 <_Balloc>
1000ad44:	1027883a 	mov	r19,r2
1000ad48:	00800434 	movhi	r2,16
1000ad4c:	10bfffc4 	addi	r2,r2,-1
1000ad50:	808c703a 	and	r6,r16,r2
1000ad54:	88000126 	beq	r17,zero,1000ad5c <__d2b+0x58>
1000ad58:	31800434 	orhi	r6,r6,16
1000ad5c:	d9800015 	stw	r6,0(sp)
1000ad60:	a8001f26 	beq	r21,zero,1000ade0 <__d2b+0xdc>
1000ad64:	d9000104 	addi	r4,sp,4
1000ad68:	dd400115 	stw	r21,4(sp)
1000ad6c:	000a38c0 	call	1000a38c <__lo0bits>
1000ad70:	d8c00017 	ldw	r3,0(sp)
1000ad74:	1000291e 	bne	r2,zero,1000ae1c <__d2b+0x118>
1000ad78:	d9000117 	ldw	r4,4(sp)
1000ad7c:	99000515 	stw	r4,20(r19)
1000ad80:	1820c03a 	cmpne	r16,r3,zero
1000ad84:	84000044 	addi	r16,r16,1
1000ad88:	98c00615 	stw	r3,24(r19)
1000ad8c:	9c000415 	stw	r16,16(r19)
1000ad90:	88001b1e 	bne	r17,zero,1000ae00 <__d2b+0xfc>
1000ad94:	800690ba 	slli	r3,r16,2
1000ad98:	10bef384 	addi	r2,r2,-1074
1000ad9c:	a0800015 	stw	r2,0(r20)
1000ada0:	98c5883a 	add	r2,r19,r3
1000ada4:	11000417 	ldw	r4,16(r2)
1000ada8:	8020917a 	slli	r16,r16,5
1000adac:	000a3240 	call	1000a324 <__hi0bits>
1000adb0:	8085c83a 	sub	r2,r16,r2
1000adb4:	90800015 	stw	r2,0(r18)
1000adb8:	9805883a 	mov	r2,r19
1000adbc:	dfc00817 	ldw	ra,32(sp)
1000adc0:	dd400717 	ldw	r21,28(sp)
1000adc4:	dd000617 	ldw	r20,24(sp)
1000adc8:	dcc00517 	ldw	r19,20(sp)
1000adcc:	dc800417 	ldw	r18,16(sp)
1000add0:	dc400317 	ldw	r17,12(sp)
1000add4:	dc000217 	ldw	r16,8(sp)
1000add8:	dec00904 	addi	sp,sp,36
1000addc:	f800283a 	ret
1000ade0:	d809883a 	mov	r4,sp
1000ade4:	000a38c0 	call	1000a38c <__lo0bits>
1000ade8:	d8c00017 	ldw	r3,0(sp)
1000adec:	04000044 	movi	r16,1
1000adf0:	9c000415 	stw	r16,16(r19)
1000adf4:	98c00515 	stw	r3,20(r19)
1000adf8:	10800804 	addi	r2,r2,32
1000adfc:	883fe526 	beq	r17,zero,1000ad94 <__alt_data_end+0xf800ad94>
1000ae00:	8c7ef344 	addi	r17,r17,-1075
1000ae04:	88a3883a 	add	r17,r17,r2
1000ae08:	00c00d44 	movi	r3,53
1000ae0c:	a4400015 	stw	r17,0(r20)
1000ae10:	1885c83a 	sub	r2,r3,r2
1000ae14:	90800015 	stw	r2,0(r18)
1000ae18:	003fe706 	br	1000adb8 <__alt_data_end+0xf800adb8>
1000ae1c:	01000804 	movi	r4,32
1000ae20:	2089c83a 	sub	r4,r4,r2
1000ae24:	1908983a 	sll	r4,r3,r4
1000ae28:	d9400117 	ldw	r5,4(sp)
1000ae2c:	1886d83a 	srl	r3,r3,r2
1000ae30:	2148b03a 	or	r4,r4,r5
1000ae34:	99000515 	stw	r4,20(r19)
1000ae38:	d8c00015 	stw	r3,0(sp)
1000ae3c:	003fd006 	br	1000ad80 <__alt_data_end+0xf800ad80>

1000ae40 <__ratio>:
1000ae40:	defff904 	addi	sp,sp,-28
1000ae44:	dc400315 	stw	r17,12(sp)
1000ae48:	2823883a 	mov	r17,r5
1000ae4c:	d9400104 	addi	r5,sp,4
1000ae50:	dfc00615 	stw	ra,24(sp)
1000ae54:	dcc00515 	stw	r19,20(sp)
1000ae58:	dc800415 	stw	r18,16(sp)
1000ae5c:	2027883a 	mov	r19,r4
1000ae60:	dc000215 	stw	r16,8(sp)
1000ae64:	000abe80 	call	1000abe8 <__b2d>
1000ae68:	8809883a 	mov	r4,r17
1000ae6c:	d80b883a 	mov	r5,sp
1000ae70:	1025883a 	mov	r18,r2
1000ae74:	1821883a 	mov	r16,r3
1000ae78:	000abe80 	call	1000abe8 <__b2d>
1000ae7c:	8a400417 	ldw	r9,16(r17)
1000ae80:	9a000417 	ldw	r8,16(r19)
1000ae84:	100d883a 	mov	r6,r2
1000ae88:	d8800017 	ldw	r2,0(sp)
1000ae8c:	4251c83a 	sub	r8,r8,r9
1000ae90:	4012917a 	slli	r9,r8,5
1000ae94:	da000117 	ldw	r8,4(sp)
1000ae98:	4091c83a 	sub	r8,r8,r2
1000ae9c:	4251883a 	add	r8,r8,r9
1000aea0:	02000d0e 	bge	zero,r8,1000aed8 <__ratio+0x98>
1000aea4:	4010953a 	slli	r8,r8,20
1000aea8:	4421883a 	add	r16,r8,r16
1000aeac:	9009883a 	mov	r4,r18
1000aeb0:	800b883a 	mov	r5,r16
1000aeb4:	180f883a 	mov	r7,r3
1000aeb8:	000e3a80 	call	1000e3a8 <__divdf3>
1000aebc:	dfc00617 	ldw	ra,24(sp)
1000aec0:	dcc00517 	ldw	r19,20(sp)
1000aec4:	dc800417 	ldw	r18,16(sp)
1000aec8:	dc400317 	ldw	r17,12(sp)
1000aecc:	dc000217 	ldw	r16,8(sp)
1000aed0:	dec00704 	addi	sp,sp,28
1000aed4:	f800283a 	ret
1000aed8:	4010953a 	slli	r8,r8,20
1000aedc:	1a07c83a 	sub	r3,r3,r8
1000aee0:	003ff206 	br	1000aeac <__alt_data_end+0xf800aeac>

1000aee4 <_mprec_log10>:
1000aee4:	defffe04 	addi	sp,sp,-8
1000aee8:	dc000015 	stw	r16,0(sp)
1000aeec:	dfc00115 	stw	ra,4(sp)
1000aef0:	008005c4 	movi	r2,23
1000aef4:	2021883a 	mov	r16,r4
1000aef8:	11000d0e 	bge	r2,r4,1000af30 <_mprec_log10+0x4c>
1000aefc:	0005883a 	mov	r2,zero
1000af00:	00cffc34 	movhi	r3,16368
1000af04:	843fffc4 	addi	r16,r16,-1
1000af08:	1009883a 	mov	r4,r2
1000af0c:	180b883a 	mov	r5,r3
1000af10:	000d883a 	mov	r6,zero
1000af14:	01d00934 	movhi	r7,16420
1000af18:	000ef6c0 	call	1000ef6c <__muldf3>
1000af1c:	803ff91e 	bne	r16,zero,1000af04 <__alt_data_end+0xf800af04>
1000af20:	dfc00117 	ldw	ra,4(sp)
1000af24:	dc000017 	ldw	r16,0(sp)
1000af28:	dec00204 	addi	sp,sp,8
1000af2c:	f800283a 	ret
1000af30:	202090fa 	slli	r16,r4,3
1000af34:	00840074 	movhi	r2,4097
1000af38:	1093a404 	addi	r2,r2,20112
1000af3c:	1421883a 	add	r16,r2,r16
1000af40:	80800017 	ldw	r2,0(r16)
1000af44:	80c00117 	ldw	r3,4(r16)
1000af48:	dfc00117 	ldw	ra,4(sp)
1000af4c:	dc000017 	ldw	r16,0(sp)
1000af50:	dec00204 	addi	sp,sp,8
1000af54:	f800283a 	ret

1000af58 <__copybits>:
1000af58:	297fffc4 	addi	r5,r5,-1
1000af5c:	280fd17a 	srai	r7,r5,5
1000af60:	30c00417 	ldw	r3,16(r6)
1000af64:	30800504 	addi	r2,r6,20
1000af68:	39c00044 	addi	r7,r7,1
1000af6c:	18c7883a 	add	r3,r3,r3
1000af70:	39cf883a 	add	r7,r7,r7
1000af74:	18c7883a 	add	r3,r3,r3
1000af78:	39cf883a 	add	r7,r7,r7
1000af7c:	10c7883a 	add	r3,r2,r3
1000af80:	21cf883a 	add	r7,r4,r7
1000af84:	10c00d2e 	bgeu	r2,r3,1000afbc <__copybits+0x64>
1000af88:	200b883a 	mov	r5,r4
1000af8c:	12000017 	ldw	r8,0(r2)
1000af90:	29400104 	addi	r5,r5,4
1000af94:	10800104 	addi	r2,r2,4
1000af98:	2a3fff15 	stw	r8,-4(r5)
1000af9c:	10fffb36 	bltu	r2,r3,1000af8c <__alt_data_end+0xf800af8c>
1000afa0:	1985c83a 	sub	r2,r3,r6
1000afa4:	10bffac4 	addi	r2,r2,-21
1000afa8:	1004d0ba 	srli	r2,r2,2
1000afac:	10800044 	addi	r2,r2,1
1000afb0:	1085883a 	add	r2,r2,r2
1000afb4:	1085883a 	add	r2,r2,r2
1000afb8:	2089883a 	add	r4,r4,r2
1000afbc:	21c0032e 	bgeu	r4,r7,1000afcc <__copybits+0x74>
1000afc0:	20000015 	stw	zero,0(r4)
1000afc4:	21000104 	addi	r4,r4,4
1000afc8:	21fffd36 	bltu	r4,r7,1000afc0 <__alt_data_end+0xf800afc0>
1000afcc:	f800283a 	ret

1000afd0 <__any_on>:
1000afd0:	20c00417 	ldw	r3,16(r4)
1000afd4:	2805d17a 	srai	r2,r5,5
1000afd8:	21000504 	addi	r4,r4,20
1000afdc:	18800d0e 	bge	r3,r2,1000b014 <__any_on+0x44>
1000afe0:	18c7883a 	add	r3,r3,r3
1000afe4:	18c7883a 	add	r3,r3,r3
1000afe8:	20c7883a 	add	r3,r4,r3
1000afec:	20c0192e 	bgeu	r4,r3,1000b054 <__any_on+0x84>
1000aff0:	18bfff17 	ldw	r2,-4(r3)
1000aff4:	18ffff04 	addi	r3,r3,-4
1000aff8:	1000041e 	bne	r2,zero,1000b00c <__any_on+0x3c>
1000affc:	20c0142e 	bgeu	r4,r3,1000b050 <__any_on+0x80>
1000b000:	18ffff04 	addi	r3,r3,-4
1000b004:	19400017 	ldw	r5,0(r3)
1000b008:	283ffc26 	beq	r5,zero,1000affc <__alt_data_end+0xf800affc>
1000b00c:	00800044 	movi	r2,1
1000b010:	f800283a 	ret
1000b014:	10c00a0e 	bge	r2,r3,1000b040 <__any_on+0x70>
1000b018:	1085883a 	add	r2,r2,r2
1000b01c:	1085883a 	add	r2,r2,r2
1000b020:	294007cc 	andi	r5,r5,31
1000b024:	2087883a 	add	r3,r4,r2
1000b028:	283ff026 	beq	r5,zero,1000afec <__alt_data_end+0xf800afec>
1000b02c:	19800017 	ldw	r6,0(r3)
1000b030:	3144d83a 	srl	r2,r6,r5
1000b034:	114a983a 	sll	r5,r2,r5
1000b038:	29bff41e 	bne	r5,r6,1000b00c <__alt_data_end+0xf800b00c>
1000b03c:	003feb06 	br	1000afec <__alt_data_end+0xf800afec>
1000b040:	1085883a 	add	r2,r2,r2
1000b044:	1085883a 	add	r2,r2,r2
1000b048:	2087883a 	add	r3,r4,r2
1000b04c:	003fe706 	br	1000afec <__alt_data_end+0xf800afec>
1000b050:	f800283a 	ret
1000b054:	0005883a 	mov	r2,zero
1000b058:	f800283a 	ret

1000b05c <_realloc_r>:
1000b05c:	defff604 	addi	sp,sp,-40
1000b060:	dcc00315 	stw	r19,12(sp)
1000b064:	dc400115 	stw	r17,4(sp)
1000b068:	dfc00915 	stw	ra,36(sp)
1000b06c:	df000815 	stw	fp,32(sp)
1000b070:	ddc00715 	stw	r23,28(sp)
1000b074:	dd800615 	stw	r22,24(sp)
1000b078:	dd400515 	stw	r21,20(sp)
1000b07c:	dd000415 	stw	r20,16(sp)
1000b080:	dc800215 	stw	r18,8(sp)
1000b084:	dc000015 	stw	r16,0(sp)
1000b088:	2827883a 	mov	r19,r5
1000b08c:	3023883a 	mov	r17,r6
1000b090:	2800bf26 	beq	r5,zero,1000b390 <_realloc_r+0x334>
1000b094:	2025883a 	mov	r18,r4
1000b098:	001088c0 	call	1001088c <__malloc_lock>
1000b09c:	98ffff17 	ldw	r3,-4(r19)
1000b0a0:	01bfff04 	movi	r6,-4
1000b0a4:	890002c4 	addi	r4,r17,11
1000b0a8:	01c00584 	movi	r7,22
1000b0ac:	9d7ffe04 	addi	r21,r19,-8
1000b0b0:	19a0703a 	and	r16,r3,r6
1000b0b4:	39003f2e 	bgeu	r7,r4,1000b1b4 <_realloc_r+0x158>
1000b0b8:	053ffe04 	movi	r20,-8
1000b0bc:	2528703a 	and	r20,r4,r20
1000b0c0:	a00f883a 	mov	r7,r20
1000b0c4:	a0008216 	blt	r20,zero,1000b2d0 <_realloc_r+0x274>
1000b0c8:	a4408136 	bltu	r20,r17,1000b2d0 <_realloc_r+0x274>
1000b0cc:	81c03c0e 	bge	r16,r7,1000b1c0 <_realloc_r+0x164>
1000b0d0:	07040074 	movhi	fp,4097
1000b0d4:	e7151204 	addi	fp,fp,21576
1000b0d8:	e1000217 	ldw	r4,8(fp)
1000b0dc:	ac05883a 	add	r2,r21,r16
1000b0e0:	2080bf26 	beq	r4,r2,1000b3e0 <_realloc_r+0x384>
1000b0e4:	11000117 	ldw	r4,4(r2)
1000b0e8:	023fff84 	movi	r8,-2
1000b0ec:	2210703a 	and	r8,r4,r8
1000b0f0:	1211883a 	add	r8,r2,r8
1000b0f4:	41400117 	ldw	r5,4(r8)
1000b0f8:	2940004c 	andi	r5,r5,1
1000b0fc:	28004a1e 	bne	r5,zero,1000b228 <_realloc_r+0x1cc>
1000b100:	017fff04 	movi	r5,-4
1000b104:	2148703a 	and	r4,r4,r5
1000b108:	2409883a 	add	r4,r4,r16
1000b10c:	21c0ad0e 	bge	r4,r7,1000b3c4 <_realloc_r+0x368>
1000b110:	18c0004c 	andi	r3,r3,1
1000b114:	18007f1e 	bne	r3,zero,1000b314 <_realloc_r+0x2b8>
1000b118:	9dfffe17 	ldw	r23,-8(r19)
1000b11c:	adefc83a 	sub	r23,r21,r23
1000b120:	bd800117 	ldw	r22,4(r23)
1000b124:	b14a703a 	and	r5,r22,r5
1000b128:	216d883a 	add	r22,r4,r5
1000b12c:	b1c04516 	blt	r22,r7,1000b244 <_realloc_r+0x1e8>
1000b130:	10c00317 	ldw	r3,12(r2)
1000b134:	10800217 	ldw	r2,8(r2)
1000b138:	81bfff04 	addi	r6,r16,-4
1000b13c:	bc400204 	addi	r17,r23,8
1000b140:	10c00315 	stw	r3,12(r2)
1000b144:	18800215 	stw	r2,8(r3)
1000b148:	b9400217 	ldw	r5,8(r23)
1000b14c:	b8c00317 	ldw	r3,12(r23)
1000b150:	00800904 	movi	r2,36
1000b154:	28c00315 	stw	r3,12(r5)
1000b158:	19400215 	stw	r5,8(r3)
1000b15c:	1180ef36 	bltu	r2,r6,1000b51c <_realloc_r+0x4c0>
1000b160:	008004c4 	movi	r2,19
1000b164:	1180da2e 	bgeu	r2,r6,1000b4d0 <_realloc_r+0x474>
1000b168:	98800017 	ldw	r2,0(r19)
1000b16c:	b8800215 	stw	r2,8(r23)
1000b170:	98800117 	ldw	r2,4(r19)
1000b174:	b8800315 	stw	r2,12(r23)
1000b178:	008006c4 	movi	r2,27
1000b17c:	1180fc2e 	bgeu	r2,r6,1000b570 <_realloc_r+0x514>
1000b180:	98800217 	ldw	r2,8(r19)
1000b184:	b8800415 	stw	r2,16(r23)
1000b188:	98800317 	ldw	r2,12(r19)
1000b18c:	b8800515 	stw	r2,20(r23)
1000b190:	00800904 	movi	r2,36
1000b194:	3080421e 	bne	r6,r2,1000b2a0 <_realloc_r+0x244>
1000b198:	98800417 	ldw	r2,16(r19)
1000b19c:	9cc00604 	addi	r19,r19,24
1000b1a0:	b8c00804 	addi	r3,r23,32
1000b1a4:	b8800615 	stw	r2,24(r23)
1000b1a8:	98bfff17 	ldw	r2,-4(r19)
1000b1ac:	b8800715 	stw	r2,28(r23)
1000b1b0:	00003d06 	br	1000b2a8 <_realloc_r+0x24c>
1000b1b4:	01c00404 	movi	r7,16
1000b1b8:	3829883a 	mov	r20,r7
1000b1bc:	003fc206 	br	1000b0c8 <__alt_data_end+0xf800b0c8>
1000b1c0:	9823883a 	mov	r17,r19
1000b1c4:	850fc83a 	sub	r7,r16,r20
1000b1c8:	008003c4 	movi	r2,15
1000b1cc:	18c0004c 	andi	r3,r3,1
1000b1d0:	11c04336 	bltu	r2,r7,1000b2e0 <_realloc_r+0x284>
1000b1d4:	1c06b03a 	or	r3,r3,r16
1000b1d8:	a8c00115 	stw	r3,4(r21)
1000b1dc:	ac21883a 	add	r16,r21,r16
1000b1e0:	80c00117 	ldw	r3,4(r16)
1000b1e4:	18c00054 	ori	r3,r3,1
1000b1e8:	80c00115 	stw	r3,4(r16)
1000b1ec:	9009883a 	mov	r4,r18
1000b1f0:	00108b00 	call	100108b0 <__malloc_unlock>
1000b1f4:	8805883a 	mov	r2,r17
1000b1f8:	dfc00917 	ldw	ra,36(sp)
1000b1fc:	df000817 	ldw	fp,32(sp)
1000b200:	ddc00717 	ldw	r23,28(sp)
1000b204:	dd800617 	ldw	r22,24(sp)
1000b208:	dd400517 	ldw	r21,20(sp)
1000b20c:	dd000417 	ldw	r20,16(sp)
1000b210:	dcc00317 	ldw	r19,12(sp)
1000b214:	dc800217 	ldw	r18,8(sp)
1000b218:	dc400117 	ldw	r17,4(sp)
1000b21c:	dc000017 	ldw	r16,0(sp)
1000b220:	dec00a04 	addi	sp,sp,40
1000b224:	f800283a 	ret
1000b228:	18c0004c 	andi	r3,r3,1
1000b22c:	1800391e 	bne	r3,zero,1000b314 <_realloc_r+0x2b8>
1000b230:	9dfffe17 	ldw	r23,-8(r19)
1000b234:	00bfff04 	movi	r2,-4
1000b238:	adefc83a 	sub	r23,r21,r23
1000b23c:	b9400117 	ldw	r5,4(r23)
1000b240:	288a703a 	and	r5,r5,r2
1000b244:	2c2d883a 	add	r22,r5,r16
1000b248:	b1c03216 	blt	r22,r7,1000b314 <_realloc_r+0x2b8>
1000b24c:	b8800317 	ldw	r2,12(r23)
1000b250:	b8c00217 	ldw	r3,8(r23)
1000b254:	81bfff04 	addi	r6,r16,-4
1000b258:	01000904 	movi	r4,36
1000b25c:	18800315 	stw	r2,12(r3)
1000b260:	10c00215 	stw	r3,8(r2)
1000b264:	bc400204 	addi	r17,r23,8
1000b268:	2180ac36 	bltu	r4,r6,1000b51c <_realloc_r+0x4c0>
1000b26c:	008004c4 	movi	r2,19
1000b270:	1180972e 	bgeu	r2,r6,1000b4d0 <_realloc_r+0x474>
1000b274:	98800017 	ldw	r2,0(r19)
1000b278:	b8800215 	stw	r2,8(r23)
1000b27c:	98800117 	ldw	r2,4(r19)
1000b280:	b8800315 	stw	r2,12(r23)
1000b284:	008006c4 	movi	r2,27
1000b288:	1180b92e 	bgeu	r2,r6,1000b570 <_realloc_r+0x514>
1000b28c:	98800217 	ldw	r2,8(r19)
1000b290:	b8800415 	stw	r2,16(r23)
1000b294:	98800317 	ldw	r2,12(r19)
1000b298:	b8800515 	stw	r2,20(r23)
1000b29c:	313fbe26 	beq	r6,r4,1000b198 <__alt_data_end+0xf800b198>
1000b2a0:	b8c00604 	addi	r3,r23,24
1000b2a4:	9cc00404 	addi	r19,r19,16
1000b2a8:	98800017 	ldw	r2,0(r19)
1000b2ac:	b021883a 	mov	r16,r22
1000b2b0:	b82b883a 	mov	r21,r23
1000b2b4:	18800015 	stw	r2,0(r3)
1000b2b8:	98800117 	ldw	r2,4(r19)
1000b2bc:	18800115 	stw	r2,4(r3)
1000b2c0:	98800217 	ldw	r2,8(r19)
1000b2c4:	18800215 	stw	r2,8(r3)
1000b2c8:	b8c00117 	ldw	r3,4(r23)
1000b2cc:	003fbd06 	br	1000b1c4 <__alt_data_end+0xf800b1c4>
1000b2d0:	00800304 	movi	r2,12
1000b2d4:	90800015 	stw	r2,0(r18)
1000b2d8:	0005883a 	mov	r2,zero
1000b2dc:	003fc606 	br	1000b1f8 <__alt_data_end+0xf800b1f8>
1000b2e0:	1d06b03a 	or	r3,r3,r20
1000b2e4:	ad0b883a 	add	r5,r21,r20
1000b2e8:	a8c00115 	stw	r3,4(r21)
1000b2ec:	38800054 	ori	r2,r7,1
1000b2f0:	28800115 	stw	r2,4(r5)
1000b2f4:	29cf883a 	add	r7,r5,r7
1000b2f8:	38800117 	ldw	r2,4(r7)
1000b2fc:	9009883a 	mov	r4,r18
1000b300:	29400204 	addi	r5,r5,8
1000b304:	10800054 	ori	r2,r2,1
1000b308:	38800115 	stw	r2,4(r7)
1000b30c:	00089680 	call	10008968 <_free_r>
1000b310:	003fb606 	br	1000b1ec <__alt_data_end+0xf800b1ec>
1000b314:	880b883a 	mov	r5,r17
1000b318:	9009883a 	mov	r4,r18
1000b31c:	00095040 	call	10009504 <_malloc_r>
1000b320:	1023883a 	mov	r17,r2
1000b324:	1000aa26 	beq	r2,zero,1000b5d0 <_realloc_r+0x574>
1000b328:	98ffff17 	ldw	r3,-4(r19)
1000b32c:	113ffe04 	addi	r4,r2,-8
1000b330:	00bfff84 	movi	r2,-2
1000b334:	1884703a 	and	r2,r3,r2
1000b338:	a885883a 	add	r2,r21,r2
1000b33c:	20808626 	beq	r4,r2,1000b558 <_realloc_r+0x4fc>
1000b340:	81bfff04 	addi	r6,r16,-4
1000b344:	00800904 	movi	r2,36
1000b348:	11807036 	bltu	r2,r6,1000b50c <_realloc_r+0x4b0>
1000b34c:	00c004c4 	movi	r3,19
1000b350:	19805636 	bltu	r3,r6,1000b4ac <_realloc_r+0x450>
1000b354:	8805883a 	mov	r2,r17
1000b358:	9807883a 	mov	r3,r19
1000b35c:	19000017 	ldw	r4,0(r3)
1000b360:	11000015 	stw	r4,0(r2)
1000b364:	19000117 	ldw	r4,4(r3)
1000b368:	11000115 	stw	r4,4(r2)
1000b36c:	18c00217 	ldw	r3,8(r3)
1000b370:	10c00215 	stw	r3,8(r2)
1000b374:	980b883a 	mov	r5,r19
1000b378:	9009883a 	mov	r4,r18
1000b37c:	00089680 	call	10008968 <_free_r>
1000b380:	9009883a 	mov	r4,r18
1000b384:	00108b00 	call	100108b0 <__malloc_unlock>
1000b388:	8805883a 	mov	r2,r17
1000b38c:	003f9a06 	br	1000b1f8 <__alt_data_end+0xf800b1f8>
1000b390:	300b883a 	mov	r5,r6
1000b394:	dfc00917 	ldw	ra,36(sp)
1000b398:	df000817 	ldw	fp,32(sp)
1000b39c:	ddc00717 	ldw	r23,28(sp)
1000b3a0:	dd800617 	ldw	r22,24(sp)
1000b3a4:	dd400517 	ldw	r21,20(sp)
1000b3a8:	dd000417 	ldw	r20,16(sp)
1000b3ac:	dcc00317 	ldw	r19,12(sp)
1000b3b0:	dc800217 	ldw	r18,8(sp)
1000b3b4:	dc400117 	ldw	r17,4(sp)
1000b3b8:	dc000017 	ldw	r16,0(sp)
1000b3bc:	dec00a04 	addi	sp,sp,40
1000b3c0:	00095041 	jmpi	10009504 <_malloc_r>
1000b3c4:	11400317 	ldw	r5,12(r2)
1000b3c8:	10800217 	ldw	r2,8(r2)
1000b3cc:	9823883a 	mov	r17,r19
1000b3d0:	2021883a 	mov	r16,r4
1000b3d4:	11400315 	stw	r5,12(r2)
1000b3d8:	28800215 	stw	r2,8(r5)
1000b3dc:	003f7906 	br	1000b1c4 <__alt_data_end+0xf800b1c4>
1000b3e0:	21000117 	ldw	r4,4(r4)
1000b3e4:	00bfff04 	movi	r2,-4
1000b3e8:	a1800404 	addi	r6,r20,16
1000b3ec:	2088703a 	and	r4,r4,r2
1000b3f0:	2409883a 	add	r4,r4,r16
1000b3f4:	2180380e 	bge	r4,r6,1000b4d8 <_realloc_r+0x47c>
1000b3f8:	18c0004c 	andi	r3,r3,1
1000b3fc:	183fc51e 	bne	r3,zero,1000b314 <__alt_data_end+0xf800b314>
1000b400:	9dfffe17 	ldw	r23,-8(r19)
1000b404:	adefc83a 	sub	r23,r21,r23
1000b408:	b9400117 	ldw	r5,4(r23)
1000b40c:	288a703a 	and	r5,r5,r2
1000b410:	216d883a 	add	r22,r4,r5
1000b414:	b1bf8b16 	blt	r22,r6,1000b244 <__alt_data_end+0xf800b244>
1000b418:	b8800317 	ldw	r2,12(r23)
1000b41c:	b8c00217 	ldw	r3,8(r23)
1000b420:	81bfff04 	addi	r6,r16,-4
1000b424:	01000904 	movi	r4,36
1000b428:	18800315 	stw	r2,12(r3)
1000b42c:	10c00215 	stw	r3,8(r2)
1000b430:	bc400204 	addi	r17,r23,8
1000b434:	21805a36 	bltu	r4,r6,1000b5a0 <_realloc_r+0x544>
1000b438:	008004c4 	movi	r2,19
1000b43c:	1180562e 	bgeu	r2,r6,1000b598 <_realloc_r+0x53c>
1000b440:	98800017 	ldw	r2,0(r19)
1000b444:	b8800215 	stw	r2,8(r23)
1000b448:	98800117 	ldw	r2,4(r19)
1000b44c:	b8800315 	stw	r2,12(r23)
1000b450:	008006c4 	movi	r2,27
1000b454:	11805636 	bltu	r2,r6,1000b5b0 <_realloc_r+0x554>
1000b458:	b8800404 	addi	r2,r23,16
1000b45c:	9cc00204 	addi	r19,r19,8
1000b460:	98c00017 	ldw	r3,0(r19)
1000b464:	10c00015 	stw	r3,0(r2)
1000b468:	98c00117 	ldw	r3,4(r19)
1000b46c:	10c00115 	stw	r3,4(r2)
1000b470:	98c00217 	ldw	r3,8(r19)
1000b474:	10c00215 	stw	r3,8(r2)
1000b478:	bd07883a 	add	r3,r23,r20
1000b47c:	b505c83a 	sub	r2,r22,r20
1000b480:	e0c00215 	stw	r3,8(fp)
1000b484:	10800054 	ori	r2,r2,1
1000b488:	18800115 	stw	r2,4(r3)
1000b48c:	b8800117 	ldw	r2,4(r23)
1000b490:	9009883a 	mov	r4,r18
1000b494:	1080004c 	andi	r2,r2,1
1000b498:	a0a8b03a 	or	r20,r20,r2
1000b49c:	bd000115 	stw	r20,4(r23)
1000b4a0:	00108b00 	call	100108b0 <__malloc_unlock>
1000b4a4:	8805883a 	mov	r2,r17
1000b4a8:	003f5306 	br	1000b1f8 <__alt_data_end+0xf800b1f8>
1000b4ac:	98c00017 	ldw	r3,0(r19)
1000b4b0:	88c00015 	stw	r3,0(r17)
1000b4b4:	98c00117 	ldw	r3,4(r19)
1000b4b8:	88c00115 	stw	r3,4(r17)
1000b4bc:	00c006c4 	movi	r3,27
1000b4c0:	19801d36 	bltu	r3,r6,1000b538 <_realloc_r+0x4dc>
1000b4c4:	88800204 	addi	r2,r17,8
1000b4c8:	98c00204 	addi	r3,r19,8
1000b4cc:	003fa306 	br	1000b35c <__alt_data_end+0xf800b35c>
1000b4d0:	8807883a 	mov	r3,r17
1000b4d4:	003f7406 	br	1000b2a8 <__alt_data_end+0xf800b2a8>
1000b4d8:	ad2b883a 	add	r21,r21,r20
1000b4dc:	2505c83a 	sub	r2,r4,r20
1000b4e0:	e5400215 	stw	r21,8(fp)
1000b4e4:	10800054 	ori	r2,r2,1
1000b4e8:	a8800115 	stw	r2,4(r21)
1000b4ec:	98bfff17 	ldw	r2,-4(r19)
1000b4f0:	9009883a 	mov	r4,r18
1000b4f4:	1080004c 	andi	r2,r2,1
1000b4f8:	a0a8b03a 	or	r20,r20,r2
1000b4fc:	9d3fff15 	stw	r20,-4(r19)
1000b500:	00108b00 	call	100108b0 <__malloc_unlock>
1000b504:	9805883a 	mov	r2,r19
1000b508:	003f3b06 	br	1000b1f8 <__alt_data_end+0xf800b1f8>
1000b50c:	8809883a 	mov	r4,r17
1000b510:	980b883a 	mov	r5,r19
1000b514:	0009d940 	call	10009d94 <memmove>
1000b518:	003f9606 	br	1000b374 <__alt_data_end+0xf800b374>
1000b51c:	8809883a 	mov	r4,r17
1000b520:	980b883a 	mov	r5,r19
1000b524:	0009d940 	call	10009d94 <memmove>
1000b528:	b8c00117 	ldw	r3,4(r23)
1000b52c:	b021883a 	mov	r16,r22
1000b530:	b82b883a 	mov	r21,r23
1000b534:	003f2306 	br	1000b1c4 <__alt_data_end+0xf800b1c4>
1000b538:	98c00217 	ldw	r3,8(r19)
1000b53c:	88c00215 	stw	r3,8(r17)
1000b540:	98c00317 	ldw	r3,12(r19)
1000b544:	88c00315 	stw	r3,12(r17)
1000b548:	30800c26 	beq	r6,r2,1000b57c <_realloc_r+0x520>
1000b54c:	88800404 	addi	r2,r17,16
1000b550:	98c00404 	addi	r3,r19,16
1000b554:	003f8106 	br	1000b35c <__alt_data_end+0xf800b35c>
1000b558:	893fff17 	ldw	r4,-4(r17)
1000b55c:	00bfff04 	movi	r2,-4
1000b560:	9823883a 	mov	r17,r19
1000b564:	2084703a 	and	r2,r4,r2
1000b568:	80a1883a 	add	r16,r16,r2
1000b56c:	003f1506 	br	1000b1c4 <__alt_data_end+0xf800b1c4>
1000b570:	b8c00404 	addi	r3,r23,16
1000b574:	9cc00204 	addi	r19,r19,8
1000b578:	003f4b06 	br	1000b2a8 <__alt_data_end+0xf800b2a8>
1000b57c:	99000417 	ldw	r4,16(r19)
1000b580:	88800604 	addi	r2,r17,24
1000b584:	98c00604 	addi	r3,r19,24
1000b588:	89000415 	stw	r4,16(r17)
1000b58c:	99000517 	ldw	r4,20(r19)
1000b590:	89000515 	stw	r4,20(r17)
1000b594:	003f7106 	br	1000b35c <__alt_data_end+0xf800b35c>
1000b598:	8805883a 	mov	r2,r17
1000b59c:	003fb006 	br	1000b460 <__alt_data_end+0xf800b460>
1000b5a0:	8809883a 	mov	r4,r17
1000b5a4:	980b883a 	mov	r5,r19
1000b5a8:	0009d940 	call	10009d94 <memmove>
1000b5ac:	003fb206 	br	1000b478 <__alt_data_end+0xf800b478>
1000b5b0:	98800217 	ldw	r2,8(r19)
1000b5b4:	b8800415 	stw	r2,16(r23)
1000b5b8:	98800317 	ldw	r2,12(r19)
1000b5bc:	b8800515 	stw	r2,20(r23)
1000b5c0:	31000726 	beq	r6,r4,1000b5e0 <_realloc_r+0x584>
1000b5c4:	b8800604 	addi	r2,r23,24
1000b5c8:	9cc00404 	addi	r19,r19,16
1000b5cc:	003fa406 	br	1000b460 <__alt_data_end+0xf800b460>
1000b5d0:	9009883a 	mov	r4,r18
1000b5d4:	00108b00 	call	100108b0 <__malloc_unlock>
1000b5d8:	0005883a 	mov	r2,zero
1000b5dc:	003f0606 	br	1000b1f8 <__alt_data_end+0xf800b1f8>
1000b5e0:	98c00417 	ldw	r3,16(r19)
1000b5e4:	9cc00604 	addi	r19,r19,24
1000b5e8:	b8800804 	addi	r2,r23,32
1000b5ec:	b8c00615 	stw	r3,24(r23)
1000b5f0:	98ffff17 	ldw	r3,-4(r19)
1000b5f4:	b8c00715 	stw	r3,28(r23)
1000b5f8:	003f9906 	br	1000b460 <__alt_data_end+0xf800b460>

1000b5fc <__fpclassifyd>:
1000b5fc:	00a00034 	movhi	r2,32768
1000b600:	10bfffc4 	addi	r2,r2,-1
1000b604:	2884703a 	and	r2,r5,r2
1000b608:	10000726 	beq	r2,zero,1000b628 <__fpclassifyd+0x2c>
1000b60c:	00fffc34 	movhi	r3,65520
1000b610:	019ff834 	movhi	r6,32736
1000b614:	28c7883a 	add	r3,r5,r3
1000b618:	31bfffc4 	addi	r6,r6,-1
1000b61c:	30c00536 	bltu	r6,r3,1000b634 <__fpclassifyd+0x38>
1000b620:	00800104 	movi	r2,4
1000b624:	f800283a 	ret
1000b628:	2000021e 	bne	r4,zero,1000b634 <__fpclassifyd+0x38>
1000b62c:	00800084 	movi	r2,2
1000b630:	f800283a 	ret
1000b634:	00dffc34 	movhi	r3,32752
1000b638:	019ff834 	movhi	r6,32736
1000b63c:	28cb883a 	add	r5,r5,r3
1000b640:	31bfffc4 	addi	r6,r6,-1
1000b644:	317ff62e 	bgeu	r6,r5,1000b620 <__alt_data_end+0xf800b620>
1000b648:	01400434 	movhi	r5,16
1000b64c:	297fffc4 	addi	r5,r5,-1
1000b650:	28800236 	bltu	r5,r2,1000b65c <__fpclassifyd+0x60>
1000b654:	008000c4 	movi	r2,3
1000b658:	f800283a 	ret
1000b65c:	10c00226 	beq	r2,r3,1000b668 <__fpclassifyd+0x6c>
1000b660:	0005883a 	mov	r2,zero
1000b664:	f800283a 	ret
1000b668:	2005003a 	cmpeq	r2,r4,zero
1000b66c:	f800283a 	ret

1000b670 <_sbrk_r>:
1000b670:	defffd04 	addi	sp,sp,-12
1000b674:	dc000015 	stw	r16,0(sp)
1000b678:	040400b4 	movhi	r16,4098
1000b67c:	dc400115 	stw	r17,4(sp)
1000b680:	84216804 	addi	r16,r16,-31328
1000b684:	2023883a 	mov	r17,r4
1000b688:	2809883a 	mov	r4,r5
1000b68c:	dfc00215 	stw	ra,8(sp)
1000b690:	80000015 	stw	zero,0(r16)
1000b694:	0010aa80 	call	10010aa8 <sbrk>
1000b698:	00ffffc4 	movi	r3,-1
1000b69c:	10c00526 	beq	r2,r3,1000b6b4 <_sbrk_r+0x44>
1000b6a0:	dfc00217 	ldw	ra,8(sp)
1000b6a4:	dc400117 	ldw	r17,4(sp)
1000b6a8:	dc000017 	ldw	r16,0(sp)
1000b6ac:	dec00304 	addi	sp,sp,12
1000b6b0:	f800283a 	ret
1000b6b4:	80c00017 	ldw	r3,0(r16)
1000b6b8:	183ff926 	beq	r3,zero,1000b6a0 <__alt_data_end+0xf800b6a0>
1000b6bc:	88c00015 	stw	r3,0(r17)
1000b6c0:	003ff706 	br	1000b6a0 <__alt_data_end+0xf800b6a0>

1000b6c4 <__sread>:
1000b6c4:	defffe04 	addi	sp,sp,-8
1000b6c8:	dc000015 	stw	r16,0(sp)
1000b6cc:	2821883a 	mov	r16,r5
1000b6d0:	2940038f 	ldh	r5,14(r5)
1000b6d4:	dfc00115 	stw	ra,4(sp)
1000b6d8:	000d3800 	call	1000d380 <_read_r>
1000b6dc:	10000716 	blt	r2,zero,1000b6fc <__sread+0x38>
1000b6e0:	80c01417 	ldw	r3,80(r16)
1000b6e4:	1887883a 	add	r3,r3,r2
1000b6e8:	80c01415 	stw	r3,80(r16)
1000b6ec:	dfc00117 	ldw	ra,4(sp)
1000b6f0:	dc000017 	ldw	r16,0(sp)
1000b6f4:	dec00204 	addi	sp,sp,8
1000b6f8:	f800283a 	ret
1000b6fc:	80c0030b 	ldhu	r3,12(r16)
1000b700:	18fbffcc 	andi	r3,r3,61439
1000b704:	80c0030d 	sth	r3,12(r16)
1000b708:	dfc00117 	ldw	ra,4(sp)
1000b70c:	dc000017 	ldw	r16,0(sp)
1000b710:	dec00204 	addi	sp,sp,8
1000b714:	f800283a 	ret

1000b718 <__seofread>:
1000b718:	0005883a 	mov	r2,zero
1000b71c:	f800283a 	ret

1000b720 <__swrite>:
1000b720:	2880030b 	ldhu	r2,12(r5)
1000b724:	defffb04 	addi	sp,sp,-20
1000b728:	dcc00315 	stw	r19,12(sp)
1000b72c:	dc800215 	stw	r18,8(sp)
1000b730:	dc400115 	stw	r17,4(sp)
1000b734:	dc000015 	stw	r16,0(sp)
1000b738:	dfc00415 	stw	ra,16(sp)
1000b73c:	10c0400c 	andi	r3,r2,256
1000b740:	2821883a 	mov	r16,r5
1000b744:	2027883a 	mov	r19,r4
1000b748:	3025883a 	mov	r18,r6
1000b74c:	3823883a 	mov	r17,r7
1000b750:	18000526 	beq	r3,zero,1000b768 <__swrite+0x48>
1000b754:	2940038f 	ldh	r5,14(r5)
1000b758:	000d883a 	mov	r6,zero
1000b75c:	01c00084 	movi	r7,2
1000b760:	000d3240 	call	1000d324 <_lseek_r>
1000b764:	8080030b 	ldhu	r2,12(r16)
1000b768:	8140038f 	ldh	r5,14(r16)
1000b76c:	10bbffcc 	andi	r2,r2,61439
1000b770:	9809883a 	mov	r4,r19
1000b774:	900d883a 	mov	r6,r18
1000b778:	880f883a 	mov	r7,r17
1000b77c:	8080030d 	sth	r2,12(r16)
1000b780:	dfc00417 	ldw	ra,16(sp)
1000b784:	dcc00317 	ldw	r19,12(sp)
1000b788:	dc800217 	ldw	r18,8(sp)
1000b78c:	dc400117 	ldw	r17,4(sp)
1000b790:	dc000017 	ldw	r16,0(sp)
1000b794:	dec00504 	addi	sp,sp,20
1000b798:	000ce001 	jmpi	1000ce00 <_write_r>

1000b79c <__sseek>:
1000b79c:	defffe04 	addi	sp,sp,-8
1000b7a0:	dc000015 	stw	r16,0(sp)
1000b7a4:	2821883a 	mov	r16,r5
1000b7a8:	2940038f 	ldh	r5,14(r5)
1000b7ac:	dfc00115 	stw	ra,4(sp)
1000b7b0:	000d3240 	call	1000d324 <_lseek_r>
1000b7b4:	00ffffc4 	movi	r3,-1
1000b7b8:	10c00826 	beq	r2,r3,1000b7dc <__sseek+0x40>
1000b7bc:	80c0030b 	ldhu	r3,12(r16)
1000b7c0:	80801415 	stw	r2,80(r16)
1000b7c4:	18c40014 	ori	r3,r3,4096
1000b7c8:	80c0030d 	sth	r3,12(r16)
1000b7cc:	dfc00117 	ldw	ra,4(sp)
1000b7d0:	dc000017 	ldw	r16,0(sp)
1000b7d4:	dec00204 	addi	sp,sp,8
1000b7d8:	f800283a 	ret
1000b7dc:	80c0030b 	ldhu	r3,12(r16)
1000b7e0:	18fbffcc 	andi	r3,r3,61439
1000b7e4:	80c0030d 	sth	r3,12(r16)
1000b7e8:	dfc00117 	ldw	ra,4(sp)
1000b7ec:	dc000017 	ldw	r16,0(sp)
1000b7f0:	dec00204 	addi	sp,sp,8
1000b7f4:	f800283a 	ret

1000b7f8 <__sclose>:
1000b7f8:	2940038f 	ldh	r5,14(r5)
1000b7fc:	000ce5c1 	jmpi	1000ce5c <_close_r>

1000b800 <strcmp>:
1000b800:	2144b03a 	or	r2,r4,r5
1000b804:	108000cc 	andi	r2,r2,3
1000b808:	1000171e 	bne	r2,zero,1000b868 <strcmp+0x68>
1000b80c:	20800017 	ldw	r2,0(r4)
1000b810:	28c00017 	ldw	r3,0(r5)
1000b814:	10c0141e 	bne	r2,r3,1000b868 <strcmp+0x68>
1000b818:	027fbff4 	movhi	r9,65279
1000b81c:	4a7fbfc4 	addi	r9,r9,-257
1000b820:	0086303a 	nor	r3,zero,r2
1000b824:	02202074 	movhi	r8,32897
1000b828:	1245883a 	add	r2,r2,r9
1000b82c:	42202004 	addi	r8,r8,-32640
1000b830:	10c4703a 	and	r2,r2,r3
1000b834:	1204703a 	and	r2,r2,r8
1000b838:	10000226 	beq	r2,zero,1000b844 <strcmp+0x44>
1000b83c:	00001706 	br	1000b89c <strcmp+0x9c>
1000b840:	1000161e 	bne	r2,zero,1000b89c <strcmp+0x9c>
1000b844:	21000104 	addi	r4,r4,4
1000b848:	20c00017 	ldw	r3,0(r4)
1000b84c:	29400104 	addi	r5,r5,4
1000b850:	29800017 	ldw	r6,0(r5)
1000b854:	1a4f883a 	add	r7,r3,r9
1000b858:	00c4303a 	nor	r2,zero,r3
1000b85c:	3884703a 	and	r2,r7,r2
1000b860:	1204703a 	and	r2,r2,r8
1000b864:	19bff626 	beq	r3,r6,1000b840 <__alt_data_end+0xf800b840>
1000b868:	20800007 	ldb	r2,0(r4)
1000b86c:	1000051e 	bne	r2,zero,1000b884 <strcmp+0x84>
1000b870:	00000606 	br	1000b88c <strcmp+0x8c>
1000b874:	21000044 	addi	r4,r4,1
1000b878:	20800007 	ldb	r2,0(r4)
1000b87c:	29400044 	addi	r5,r5,1
1000b880:	10000226 	beq	r2,zero,1000b88c <strcmp+0x8c>
1000b884:	28c00007 	ldb	r3,0(r5)
1000b888:	10fffa26 	beq	r2,r3,1000b874 <__alt_data_end+0xf800b874>
1000b88c:	20800003 	ldbu	r2,0(r4)
1000b890:	28c00003 	ldbu	r3,0(r5)
1000b894:	10c5c83a 	sub	r2,r2,r3
1000b898:	f800283a 	ret
1000b89c:	0005883a 	mov	r2,zero
1000b8a0:	f800283a 	ret

1000b8a4 <__sprint_r.part.0>:
1000b8a4:	28801917 	ldw	r2,100(r5)
1000b8a8:	defff604 	addi	sp,sp,-40
1000b8ac:	dd400515 	stw	r21,20(sp)
1000b8b0:	dcc00315 	stw	r19,12(sp)
1000b8b4:	dfc00915 	stw	ra,36(sp)
1000b8b8:	df000815 	stw	fp,32(sp)
1000b8bc:	ddc00715 	stw	r23,28(sp)
1000b8c0:	dd800615 	stw	r22,24(sp)
1000b8c4:	dd000415 	stw	r20,16(sp)
1000b8c8:	dc800215 	stw	r18,8(sp)
1000b8cc:	dc400115 	stw	r17,4(sp)
1000b8d0:	dc000015 	stw	r16,0(sp)
1000b8d4:	1088000c 	andi	r2,r2,8192
1000b8d8:	2827883a 	mov	r19,r5
1000b8dc:	302b883a 	mov	r21,r6
1000b8e0:	10002d26 	beq	r2,zero,1000b998 <__sprint_r.part.0+0xf4>
1000b8e4:	30800217 	ldw	r2,8(r6)
1000b8e8:	35800017 	ldw	r22,0(r6)
1000b8ec:	10002826 	beq	r2,zero,1000b990 <__sprint_r.part.0+0xec>
1000b8f0:	2029883a 	mov	r20,r4
1000b8f4:	b5c00104 	addi	r23,r22,4
1000b8f8:	04bfffc4 	movi	r18,-1
1000b8fc:	bc400017 	ldw	r17,0(r23)
1000b900:	b4000017 	ldw	r16,0(r22)
1000b904:	0039883a 	mov	fp,zero
1000b908:	8822d0ba 	srli	r17,r17,2
1000b90c:	04400316 	blt	zero,r17,1000b91c <__sprint_r.part.0+0x78>
1000b910:	00001706 	br	1000b970 <__sprint_r.part.0+0xcc>
1000b914:	84000104 	addi	r16,r16,4
1000b918:	8f001526 	beq	r17,fp,1000b970 <__sprint_r.part.0+0xcc>
1000b91c:	81400017 	ldw	r5,0(r16)
1000b920:	a009883a 	mov	r4,r20
1000b924:	980d883a 	mov	r6,r19
1000b928:	000d09c0 	call	1000d09c <_fputwc_r>
1000b92c:	e7000044 	addi	fp,fp,1
1000b930:	14bff81e 	bne	r2,r18,1000b914 <__alt_data_end+0xf800b914>
1000b934:	9005883a 	mov	r2,r18
1000b938:	a8000215 	stw	zero,8(r21)
1000b93c:	a8000115 	stw	zero,4(r21)
1000b940:	dfc00917 	ldw	ra,36(sp)
1000b944:	df000817 	ldw	fp,32(sp)
1000b948:	ddc00717 	ldw	r23,28(sp)
1000b94c:	dd800617 	ldw	r22,24(sp)
1000b950:	dd400517 	ldw	r21,20(sp)
1000b954:	dd000417 	ldw	r20,16(sp)
1000b958:	dcc00317 	ldw	r19,12(sp)
1000b95c:	dc800217 	ldw	r18,8(sp)
1000b960:	dc400117 	ldw	r17,4(sp)
1000b964:	dc000017 	ldw	r16,0(sp)
1000b968:	dec00a04 	addi	sp,sp,40
1000b96c:	f800283a 	ret
1000b970:	a8c00217 	ldw	r3,8(r21)
1000b974:	8c63883a 	add	r17,r17,r17
1000b978:	8c63883a 	add	r17,r17,r17
1000b97c:	1c45c83a 	sub	r2,r3,r17
1000b980:	a8800215 	stw	r2,8(r21)
1000b984:	b5800204 	addi	r22,r22,8
1000b988:	bdc00204 	addi	r23,r23,8
1000b98c:	103fdb1e 	bne	r2,zero,1000b8fc <__alt_data_end+0xf800b8fc>
1000b990:	0005883a 	mov	r2,zero
1000b994:	003fe806 	br	1000b938 <__alt_data_end+0xf800b938>
1000b998:	0008c580 	call	10008c58 <__sfvwrite_r>
1000b99c:	003fe606 	br	1000b938 <__alt_data_end+0xf800b938>

1000b9a0 <__sprint_r>:
1000b9a0:	30c00217 	ldw	r3,8(r6)
1000b9a4:	18000126 	beq	r3,zero,1000b9ac <__sprint_r+0xc>
1000b9a8:	000b8a41 	jmpi	1000b8a4 <__sprint_r.part.0>
1000b9ac:	30000115 	stw	zero,4(r6)
1000b9b0:	0005883a 	mov	r2,zero
1000b9b4:	f800283a 	ret

1000b9b8 <___vfiprintf_internal_r>:
1000b9b8:	defeca04 	addi	sp,sp,-1240
1000b9bc:	dcc12f15 	stw	r19,1212(sp)
1000b9c0:	dfc13515 	stw	ra,1236(sp)
1000b9c4:	df013415 	stw	fp,1232(sp)
1000b9c8:	ddc13315 	stw	r23,1228(sp)
1000b9cc:	dd813215 	stw	r22,1224(sp)
1000b9d0:	dd413115 	stw	r21,1220(sp)
1000b9d4:	dd013015 	stw	r20,1216(sp)
1000b9d8:	dc812e15 	stw	r18,1208(sp)
1000b9dc:	dc412d15 	stw	r17,1204(sp)
1000b9e0:	dc012c15 	stw	r16,1200(sp)
1000b9e4:	d9012115 	stw	r4,1156(sp)
1000b9e8:	d9412015 	stw	r5,1152(sp)
1000b9ec:	d9c12315 	stw	r7,1164(sp)
1000b9f0:	3027883a 	mov	r19,r6
1000b9f4:	20000226 	beq	r4,zero,1000ba00 <___vfiprintf_internal_r+0x48>
1000b9f8:	20800e17 	ldw	r2,56(r4)
1000b9fc:	1000f726 	beq	r2,zero,1000bddc <___vfiprintf_internal_r+0x424>
1000ba00:	d8812017 	ldw	r2,1152(sp)
1000ba04:	10c0030b 	ldhu	r3,12(r2)
1000ba08:	1908000c 	andi	r4,r3,8192
1000ba0c:	1805883a 	mov	r2,r3
1000ba10:	2000081e 	bne	r4,zero,1000ba34 <___vfiprintf_internal_r+0x7c>
1000ba14:	d9412017 	ldw	r5,1152(sp)
1000ba18:	18880014 	ori	r2,r3,8192
1000ba1c:	00f7ffc4 	movi	r3,-8193
1000ba20:	29001917 	ldw	r4,100(r5)
1000ba24:	2880030d 	sth	r2,12(r5)
1000ba28:	20c8703a 	and	r4,r4,r3
1000ba2c:	29001915 	stw	r4,100(r5)
1000ba30:	1007883a 	mov	r3,r2
1000ba34:	1100020c 	andi	r4,r2,8
1000ba38:	2000a726 	beq	r4,zero,1000bcd8 <___vfiprintf_internal_r+0x320>
1000ba3c:	d9412017 	ldw	r5,1152(sp)
1000ba40:	29000417 	ldw	r4,16(r5)
1000ba44:	2000a426 	beq	r4,zero,1000bcd8 <___vfiprintf_internal_r+0x320>
1000ba48:	1080068c 	andi	r2,r2,26
1000ba4c:	01000284 	movi	r4,10
1000ba50:	1100ab26 	beq	r2,r4,1000bd00 <___vfiprintf_internal_r+0x348>
1000ba54:	d9010a04 	addi	r4,sp,1064
1000ba58:	d94109c4 	addi	r5,sp,1063
1000ba5c:	07040074 	movhi	fp,4097
1000ba60:	04440074 	movhi	r17,4097
1000ba64:	2145c83a 	sub	r2,r4,r5
1000ba68:	e713da04 	addi	fp,fp,20328
1000ba6c:	8c53d604 	addi	r17,r17,20312
1000ba70:	d9011e15 	stw	r4,1144(sp)
1000ba74:	d9411f15 	stw	r5,1148(sp)
1000ba78:	dec11a15 	stw	sp,1128(sp)
1000ba7c:	d8011c15 	stw	zero,1136(sp)
1000ba80:	d8011b15 	stw	zero,1132(sp)
1000ba84:	d8012715 	stw	zero,1180(sp)
1000ba88:	d8012515 	stw	zero,1172(sp)
1000ba8c:	d811883a 	mov	r8,sp
1000ba90:	d8812815 	stw	r2,1184(sp)
1000ba94:	982f883a 	mov	r23,r19
1000ba98:	b8800007 	ldb	r2,0(r23)
1000ba9c:	1003b026 	beq	r2,zero,1000c960 <___vfiprintf_internal_r+0xfa8>
1000baa0:	01000944 	movi	r4,37
1000baa4:	1103ae26 	beq	r2,r4,1000c960 <___vfiprintf_internal_r+0xfa8>
1000baa8:	b805883a 	mov	r2,r23
1000baac:	00000106 	br	1000bab4 <___vfiprintf_internal_r+0xfc>
1000bab0:	19000326 	beq	r3,r4,1000bac0 <___vfiprintf_internal_r+0x108>
1000bab4:	10800044 	addi	r2,r2,1
1000bab8:	10c00007 	ldb	r3,0(r2)
1000babc:	183ffc1e 	bne	r3,zero,1000bab0 <__alt_data_end+0xf800bab0>
1000bac0:	15e1c83a 	sub	r16,r2,r23
1000bac4:	1029883a 	mov	r20,r2
1000bac8:	80001026 	beq	r16,zero,1000bb0c <___vfiprintf_internal_r+0x154>
1000bacc:	d8c11c17 	ldw	r3,1136(sp)
1000bad0:	d8811b17 	ldw	r2,1132(sp)
1000bad4:	45c00015 	stw	r23,0(r8)
1000bad8:	80c7883a 	add	r3,r16,r3
1000badc:	10800044 	addi	r2,r2,1
1000bae0:	44000115 	stw	r16,4(r8)
1000bae4:	d8c11c15 	stw	r3,1136(sp)
1000bae8:	d8811b15 	stw	r2,1132(sp)
1000baec:	010001c4 	movi	r4,7
1000baf0:	2080740e 	bge	r4,r2,1000bcc4 <___vfiprintf_internal_r+0x30c>
1000baf4:	1803a71e 	bne	r3,zero,1000c994 <___vfiprintf_internal_r+0xfdc>
1000baf8:	d8c12517 	ldw	r3,1172(sp)
1000bafc:	d8011b15 	stw	zero,1132(sp)
1000bb00:	d811883a 	mov	r8,sp
1000bb04:	1c07883a 	add	r3,r3,r16
1000bb08:	d8c12515 	stw	r3,1172(sp)
1000bb0c:	a0800007 	ldb	r2,0(r20)
1000bb10:	1002bf26 	beq	r2,zero,1000c610 <___vfiprintf_internal_r+0xc58>
1000bb14:	a5c00044 	addi	r23,r20,1
1000bb18:	a1800047 	ldb	r6,1(r20)
1000bb1c:	d8011d85 	stb	zero,1142(sp)
1000bb20:	d8012205 	stb	zero,1160(sp)
1000bb24:	043fffc4 	movi	r16,-1
1000bb28:	d8012415 	stw	zero,1168(sp)
1000bb2c:	0025883a 	mov	r18,zero
1000bb30:	05001604 	movi	r20,88
1000bb34:	05400244 	movi	r21,9
1000bb38:	4027883a 	mov	r19,r8
1000bb3c:	bdc00044 	addi	r23,r23,1
1000bb40:	30bff804 	addi	r2,r6,-32
1000bb44:	a0825636 	bltu	r20,r2,1000c4a0 <___vfiprintf_internal_r+0xae8>
1000bb48:	100490ba 	slli	r2,r2,2
1000bb4c:	01040074 	movhi	r4,4097
1000bb50:	212ed804 	addi	r4,r4,-17568
1000bb54:	1105883a 	add	r2,r2,r4
1000bb58:	10800017 	ldw	r2,0(r2)
1000bb5c:	1000683a 	jmp	r2
1000bb60:	1000c430 	cmpltui	zero,r2,784
1000bb64:	1000c4a0 	cmpeqi	zero,r2,786
1000bb68:	1000c4a0 	cmpeqi	zero,r2,786
1000bb6c:	1000c494 	ori	zero,r2,786
1000bb70:	1000c4a0 	cmpeqi	zero,r2,786
1000bb74:	1000c4a0 	cmpeqi	zero,r2,786
1000bb78:	1000c4a0 	cmpeqi	zero,r2,786
1000bb7c:	1000c4a0 	cmpeqi	zero,r2,786
1000bb80:	1000c4a0 	cmpeqi	zero,r2,786
1000bb84:	1000c4a0 	cmpeqi	zero,r2,786
1000bb88:	1000c220 	cmpeqi	zero,r2,776
1000bb8c:	1000c448 	cmpgei	zero,r2,785
1000bb90:	1000c4a0 	cmpeqi	zero,r2,786
1000bb94:	1000bdf4 	orhi	zero,r2,759
1000bb98:	1000c244 	addi	zero,r2,777
1000bb9c:	1000c4a0 	cmpeqi	zero,r2,786
1000bba0:	1000be00 	call	11000be0 <_gp+0xfe2188>
1000bba4:	1000be0c 	andi	zero,r2,760
1000bba8:	1000be0c 	andi	zero,r2,760
1000bbac:	1000be0c 	andi	zero,r2,760
1000bbb0:	1000be0c 	andi	zero,r2,760
1000bbb4:	1000be0c 	andi	zero,r2,760
1000bbb8:	1000be0c 	andi	zero,r2,760
1000bbbc:	1000be0c 	andi	zero,r2,760
1000bbc0:	1000be0c 	andi	zero,r2,760
1000bbc4:	1000be0c 	andi	zero,r2,760
1000bbc8:	1000c4a0 	cmpeqi	zero,r2,786
1000bbcc:	1000c4a0 	cmpeqi	zero,r2,786
1000bbd0:	1000c4a0 	cmpeqi	zero,r2,786
1000bbd4:	1000c4a0 	cmpeqi	zero,r2,786
1000bbd8:	1000c4a0 	cmpeqi	zero,r2,786
1000bbdc:	1000c4a0 	cmpeqi	zero,r2,786
1000bbe0:	1000c4a0 	cmpeqi	zero,r2,786
1000bbe4:	1000c4a0 	cmpeqi	zero,r2,786
1000bbe8:	1000c4a0 	cmpeqi	zero,r2,786
1000bbec:	1000c4a0 	cmpeqi	zero,r2,786
1000bbf0:	1000be4c 	andi	zero,r2,761
1000bbf4:	1000c4a0 	cmpeqi	zero,r2,786
1000bbf8:	1000c4a0 	cmpeqi	zero,r2,786
1000bbfc:	1000c4a0 	cmpeqi	zero,r2,786
1000bc00:	1000c4a0 	cmpeqi	zero,r2,786
1000bc04:	1000c4a0 	cmpeqi	zero,r2,786
1000bc08:	1000c4a0 	cmpeqi	zero,r2,786
1000bc0c:	1000c4a0 	cmpeqi	zero,r2,786
1000bc10:	1000c4a0 	cmpeqi	zero,r2,786
1000bc14:	1000c4a0 	cmpeqi	zero,r2,786
1000bc18:	1000c4a0 	cmpeqi	zero,r2,786
1000bc1c:	1000c13c 	xorhi	zero,r2,772
1000bc20:	1000c4a0 	cmpeqi	zero,r2,786
1000bc24:	1000c4a0 	cmpeqi	zero,r2,786
1000bc28:	1000c4a0 	cmpeqi	zero,r2,786
1000bc2c:	1000c4a0 	cmpeqi	zero,r2,786
1000bc30:	1000c4a0 	cmpeqi	zero,r2,786
1000bc34:	1000c17c 	xorhi	zero,r2,773
1000bc38:	1000c4a0 	cmpeqi	zero,r2,786
1000bc3c:	1000c4a0 	cmpeqi	zero,r2,786
1000bc40:	1000c1c0 	call	11000c1c <_gp+0xfe21c4>
1000bc44:	1000c4a0 	cmpeqi	zero,r2,786
1000bc48:	1000c4a0 	cmpeqi	zero,r2,786
1000bc4c:	1000c4a0 	cmpeqi	zero,r2,786
1000bc50:	1000c4a0 	cmpeqi	zero,r2,786
1000bc54:	1000c4a0 	cmpeqi	zero,r2,786
1000bc58:	1000c4a0 	cmpeqi	zero,r2,786
1000bc5c:	1000c4a0 	cmpeqi	zero,r2,786
1000bc60:	1000c4a0 	cmpeqi	zero,r2,786
1000bc64:	1000c4a0 	cmpeqi	zero,r2,786
1000bc68:	1000c4a0 	cmpeqi	zero,r2,786
1000bc6c:	1000c108 	cmpgei	zero,r2,772
1000bc70:	1000c458 	cmpnei	zero,r2,785
1000bc74:	1000c4a0 	cmpeqi	zero,r2,786
1000bc78:	1000c4a0 	cmpeqi	zero,r2,786
1000bc7c:	1000c4a0 	cmpeqi	zero,r2,786
1000bc80:	1000c294 	ori	zero,r2,778
1000bc84:	1000c458 	cmpnei	zero,r2,785
1000bc88:	1000c4a0 	cmpeqi	zero,r2,786
1000bc8c:	1000c4a0 	cmpeqi	zero,r2,786
1000bc90:	1000c1ac 	andhi	zero,r2,774
1000bc94:	1000c4a0 	cmpeqi	zero,r2,786
1000bc98:	1000c3f8 	rdprs	zero,r2,783
1000bc9c:	1000c380 	call	11000c38 <_gp+0xfe21e0>
1000bca0:	1000c3b4 	orhi	zero,r2,782
1000bca4:	1000c2a0 	cmpeqi	zero,r2,778
1000bca8:	1000c4a0 	cmpeqi	zero,r2,786
1000bcac:	1000c2ac 	andhi	zero,r2,778
1000bcb0:	1000c4a0 	cmpeqi	zero,r2,786
1000bcb4:	1000c308 	cmpgei	zero,r2,780
1000bcb8:	1000c4a0 	cmpeqi	zero,r2,786
1000bcbc:	1000c4a0 	cmpeqi	zero,r2,786
1000bcc0:	1000c33c 	xorhi	zero,r2,780
1000bcc4:	42000204 	addi	r8,r8,8
1000bcc8:	d8c12517 	ldw	r3,1172(sp)
1000bccc:	1c07883a 	add	r3,r3,r16
1000bcd0:	d8c12515 	stw	r3,1172(sp)
1000bcd4:	003f8d06 	br	1000bb0c <__alt_data_end+0xf800bb0c>
1000bcd8:	d9012117 	ldw	r4,1156(sp)
1000bcdc:	d9412017 	ldw	r5,1152(sp)
1000bce0:	00067b80 	call	100067b8 <__swsetup_r>
1000bce4:	1000301e 	bne	r2,zero,1000bda8 <___vfiprintf_internal_r+0x3f0>
1000bce8:	d8812017 	ldw	r2,1152(sp)
1000bcec:	01000284 	movi	r4,10
1000bcf0:	10c0030b 	ldhu	r3,12(r2)
1000bcf4:	1805883a 	mov	r2,r3
1000bcf8:	1080068c 	andi	r2,r2,26
1000bcfc:	113f551e 	bne	r2,r4,1000ba54 <__alt_data_end+0xf800ba54>
1000bd00:	d9012017 	ldw	r4,1152(sp)
1000bd04:	2080038b 	ldhu	r2,14(r4)
1000bd08:	113fffcc 	andi	r4,r2,65535
1000bd0c:	2120001c 	xori	r4,r4,32768
1000bd10:	21200004 	addi	r4,r4,-32768
1000bd14:	203f4f16 	blt	r4,zero,1000ba54 <__alt_data_end+0xf800ba54>
1000bd18:	d9412017 	ldw	r5,1152(sp)
1000bd1c:	d9012117 	ldw	r4,1156(sp)
1000bd20:	d9c12317 	ldw	r7,1164(sp)
1000bd24:	2b001917 	ldw	r12,100(r5)
1000bd28:	2ac00717 	ldw	r11,28(r5)
1000bd2c:	2a800917 	ldw	r10,36(r5)
1000bd30:	02010004 	movi	r8,1024
1000bd34:	18ffff4c 	andi	r3,r3,65533
1000bd38:	da0b883a 	add	r5,sp,r8
1000bd3c:	980d883a 	mov	r6,r19
1000bd40:	d8c1030d 	sth	r3,1036(sp)
1000bd44:	db011915 	stw	r12,1124(sp)
1000bd48:	d881038d 	sth	r2,1038(sp)
1000bd4c:	dac10715 	stw	r11,1052(sp)
1000bd50:	da810915 	stw	r10,1060(sp)
1000bd54:	dec10015 	stw	sp,1024(sp)
1000bd58:	dec10415 	stw	sp,1040(sp)
1000bd5c:	da010215 	stw	r8,1032(sp)
1000bd60:	da010515 	stw	r8,1044(sp)
1000bd64:	d8010615 	stw	zero,1048(sp)
1000bd68:	000b9b80 	call	1000b9b8 <___vfiprintf_internal_r>
1000bd6c:	1021883a 	mov	r16,r2
1000bd70:	10000416 	blt	r2,zero,1000bd84 <___vfiprintf_internal_r+0x3cc>
1000bd74:	d9012117 	ldw	r4,1156(sp)
1000bd78:	d9410004 	addi	r5,sp,1024
1000bd7c:	00082380 	call	10008238 <_fflush_r>
1000bd80:	10040f1e 	bne	r2,zero,1000cdc0 <___vfiprintf_internal_r+0x1408>
1000bd84:	d881030b 	ldhu	r2,1036(sp)
1000bd88:	1080100c 	andi	r2,r2,64
1000bd8c:	10000426 	beq	r2,zero,1000bda0 <___vfiprintf_internal_r+0x3e8>
1000bd90:	d8c12017 	ldw	r3,1152(sp)
1000bd94:	1880030b 	ldhu	r2,12(r3)
1000bd98:	10801014 	ori	r2,r2,64
1000bd9c:	1880030d 	sth	r2,12(r3)
1000bda0:	8005883a 	mov	r2,r16
1000bda4:	00000106 	br	1000bdac <___vfiprintf_internal_r+0x3f4>
1000bda8:	00bfffc4 	movi	r2,-1
1000bdac:	dfc13517 	ldw	ra,1236(sp)
1000bdb0:	df013417 	ldw	fp,1232(sp)
1000bdb4:	ddc13317 	ldw	r23,1228(sp)
1000bdb8:	dd813217 	ldw	r22,1224(sp)
1000bdbc:	dd413117 	ldw	r21,1220(sp)
1000bdc0:	dd013017 	ldw	r20,1216(sp)
1000bdc4:	dcc12f17 	ldw	r19,1212(sp)
1000bdc8:	dc812e17 	ldw	r18,1208(sp)
1000bdcc:	dc412d17 	ldw	r17,1204(sp)
1000bdd0:	dc012c17 	ldw	r16,1200(sp)
1000bdd4:	dec13604 	addi	sp,sp,1240
1000bdd8:	f800283a 	ret
1000bddc:	00087f40 	call	100087f4 <__sinit>
1000bde0:	003f0706 	br	1000ba00 <__alt_data_end+0xf800ba00>
1000bde4:	d8c12417 	ldw	r3,1168(sp)
1000bde8:	d8812315 	stw	r2,1164(sp)
1000bdec:	00c7c83a 	sub	r3,zero,r3
1000bdf0:	d8c12415 	stw	r3,1168(sp)
1000bdf4:	94800114 	ori	r18,r18,4
1000bdf8:	b9800007 	ldb	r6,0(r23)
1000bdfc:	003f4f06 	br	1000bb3c <__alt_data_end+0xf800bb3c>
1000be00:	94802014 	ori	r18,r18,128
1000be04:	b9800007 	ldb	r6,0(r23)
1000be08:	003f4c06 	br	1000bb3c <__alt_data_end+0xf800bb3c>
1000be0c:	dc012615 	stw	r16,1176(sp)
1000be10:	d8012415 	stw	zero,1168(sp)
1000be14:	35bff404 	addi	r22,r6,-48
1000be18:	0009883a 	mov	r4,zero
1000be1c:	b821883a 	mov	r16,r23
1000be20:	01400284 	movi	r5,10
1000be24:	00030800 	call	10003080 <__mulsi3>
1000be28:	81800007 	ldb	r6,0(r16)
1000be2c:	1589883a 	add	r4,r2,r22
1000be30:	bdc00044 	addi	r23,r23,1
1000be34:	35bff404 	addi	r22,r6,-48
1000be38:	b821883a 	mov	r16,r23
1000be3c:	adbff82e 	bgeu	r21,r22,1000be20 <__alt_data_end+0xf800be20>
1000be40:	d9012415 	stw	r4,1168(sp)
1000be44:	dc012617 	ldw	r16,1176(sp)
1000be48:	003f3d06 	br	1000bb40 <__alt_data_end+0xf800bb40>
1000be4c:	d8c12203 	ldbu	r3,1160(sp)
1000be50:	94800414 	ori	r18,r18,16
1000be54:	9080080c 	andi	r2,r18,32
1000be58:	d8c11d85 	stb	r3,1142(sp)
1000be5c:	9811883a 	mov	r8,r19
1000be60:	d8c12317 	ldw	r3,1164(sp)
1000be64:	10018226 	beq	r2,zero,1000c470 <___vfiprintf_internal_r+0xab8>
1000be68:	d9012317 	ldw	r4,1164(sp)
1000be6c:	18800117 	ldw	r2,4(r3)
1000be70:	1cc00017 	ldw	r19,0(r3)
1000be74:	21000204 	addi	r4,r4,8
1000be78:	d9012315 	stw	r4,1164(sp)
1000be7c:	102b883a 	mov	r21,r2
1000be80:	10030016 	blt	r2,zero,1000ca84 <___vfiprintf_internal_r+0x10cc>
1000be84:	dd811d83 	ldbu	r22,1142(sp)
1000be88:	8029883a 	mov	r20,r16
1000be8c:	00800044 	movi	r2,1
1000be90:	9d46b03a 	or	r3,r19,r21
1000be94:	80000216 	blt	r16,zero,1000bea0 <___vfiprintf_internal_r+0x4e8>
1000be98:	013fdfc4 	movi	r4,-129
1000be9c:	9124703a 	and	r18,r18,r4
1000bea0:	1801b41e 	bne	r3,zero,1000c574 <___vfiprintf_internal_r+0xbbc>
1000bea4:	80028126 	beq	r16,zero,1000c8ac <___vfiprintf_internal_r+0xef4>
1000bea8:	10803fcc 	andi	r2,r2,255
1000beac:	00c00044 	movi	r3,1
1000beb0:	10c1d126 	beq	r2,r3,1000c5f8 <___vfiprintf_internal_r+0xc40>
1000beb4:	00c00084 	movi	r3,2
1000beb8:	10c28626 	beq	r2,r3,1000c8d4 <___vfiprintf_internal_r+0xf1c>
1000bebc:	d8c10a04 	addi	r3,sp,1064
1000bec0:	9808d0fa 	srli	r4,r19,3
1000bec4:	a80a977a 	slli	r5,r21,29
1000bec8:	a82ad0fa 	srli	r21,r21,3
1000becc:	9cc001cc 	andi	r19,r19,7
1000bed0:	98800c04 	addi	r2,r19,48
1000bed4:	18ffffc4 	addi	r3,r3,-1
1000bed8:	2926b03a 	or	r19,r5,r4
1000bedc:	18800005 	stb	r2,0(r3)
1000bee0:	9d48b03a 	or	r4,r19,r21
1000bee4:	203ff61e 	bne	r4,zero,1000bec0 <__alt_data_end+0xf800bec0>
1000bee8:	9100004c 	andi	r4,r18,1
1000beec:	d8c12215 	stw	r3,1160(sp)
1000bef0:	2002b31e 	bne	r4,zero,1000c9c0 <___vfiprintf_internal_r+0x1008>
1000bef4:	d9411e17 	ldw	r5,1144(sp)
1000bef8:	28e9c83a 	sub	r20,r5,r3
1000befc:	a02b883a 	mov	r21,r20
1000bf00:	a400010e 	bge	r20,r16,1000bf08 <___vfiprintf_internal_r+0x550>
1000bf04:	802b883a 	mov	r21,r16
1000bf08:	b5803fcc 	andi	r22,r22,255
1000bf0c:	b580201c 	xori	r22,r22,128
1000bf10:	b5bfe004 	addi	r22,r22,-128
1000bf14:	b0000126 	beq	r22,zero,1000bf1c <___vfiprintf_internal_r+0x564>
1000bf18:	ad400044 	addi	r21,r21,1
1000bf1c:	9280008c 	andi	r10,r18,2
1000bf20:	50000126 	beq	r10,zero,1000bf28 <___vfiprintf_internal_r+0x570>
1000bf24:	ad400084 	addi	r21,r21,2
1000bf28:	9580210c 	andi	r22,r18,132
1000bf2c:	b001751e 	bne	r22,zero,1000c504 <___vfiprintf_internal_r+0xb4c>
1000bf30:	d9012417 	ldw	r4,1168(sp)
1000bf34:	2567c83a 	sub	r19,r4,r21
1000bf38:	04c1720e 	bge	zero,r19,1000c504 <___vfiprintf_internal_r+0xb4c>
1000bf3c:	01c00404 	movi	r7,16
1000bf40:	d8c11c17 	ldw	r3,1136(sp)
1000bf44:	3cc36b0e 	bge	r7,r19,1000ccf4 <___vfiprintf_internal_r+0x133c>
1000bf48:	00840074 	movhi	r2,4097
1000bf4c:	1093da04 	addi	r2,r2,20328
1000bf50:	dc012915 	stw	r16,1188(sp)
1000bf54:	d9011b17 	ldw	r4,1132(sp)
1000bf58:	9821883a 	mov	r16,r19
1000bf5c:	d8812615 	stw	r2,1176(sp)
1000bf60:	030001c4 	movi	r12,7
1000bf64:	5027883a 	mov	r19,r10
1000bf68:	00000506 	br	1000bf80 <___vfiprintf_internal_r+0x5c8>
1000bf6c:	21400084 	addi	r5,r4,2
1000bf70:	42000204 	addi	r8,r8,8
1000bf74:	1009883a 	mov	r4,r2
1000bf78:	843ffc04 	addi	r16,r16,-16
1000bf7c:	3c000d0e 	bge	r7,r16,1000bfb4 <___vfiprintf_internal_r+0x5fc>
1000bf80:	18c00404 	addi	r3,r3,16
1000bf84:	20800044 	addi	r2,r4,1
1000bf88:	47000015 	stw	fp,0(r8)
1000bf8c:	41c00115 	stw	r7,4(r8)
1000bf90:	d8c11c15 	stw	r3,1136(sp)
1000bf94:	d8811b15 	stw	r2,1132(sp)
1000bf98:	60bff40e 	bge	r12,r2,1000bf6c <__alt_data_end+0xf800bf6c>
1000bf9c:	18014b1e 	bne	r3,zero,1000c4cc <___vfiprintf_internal_r+0xb14>
1000bfa0:	843ffc04 	addi	r16,r16,-16
1000bfa4:	0009883a 	mov	r4,zero
1000bfa8:	01400044 	movi	r5,1
1000bfac:	d811883a 	mov	r8,sp
1000bfb0:	3c3ff316 	blt	r7,r16,1000bf80 <__alt_data_end+0xf800bf80>
1000bfb4:	9815883a 	mov	r10,r19
1000bfb8:	8027883a 	mov	r19,r16
1000bfbc:	dc012917 	ldw	r16,1188(sp)
1000bfc0:	d9012617 	ldw	r4,1176(sp)
1000bfc4:	98c7883a 	add	r3,r19,r3
1000bfc8:	44c00115 	stw	r19,4(r8)
1000bfcc:	41000015 	stw	r4,0(r8)
1000bfd0:	d8c11c15 	stw	r3,1136(sp)
1000bfd4:	d9411b15 	stw	r5,1132(sp)
1000bfd8:	008001c4 	movi	r2,7
1000bfdc:	11425116 	blt	r2,r5,1000c924 <___vfiprintf_internal_r+0xf6c>
1000bfe0:	d9011d87 	ldb	r4,1142(sp)
1000bfe4:	42000204 	addi	r8,r8,8
1000bfe8:	28800044 	addi	r2,r5,1
1000bfec:	20014a1e 	bne	r4,zero,1000c518 <___vfiprintf_internal_r+0xb60>
1000bff0:	50000c26 	beq	r10,zero,1000c024 <___vfiprintf_internal_r+0x66c>
1000bff4:	d9011d04 	addi	r4,sp,1140
1000bff8:	18c00084 	addi	r3,r3,2
1000bffc:	41000015 	stw	r4,0(r8)
1000c000:	01000084 	movi	r4,2
1000c004:	41000115 	stw	r4,4(r8)
1000c008:	d8c11c15 	stw	r3,1136(sp)
1000c00c:	d8811b15 	stw	r2,1132(sp)
1000c010:	010001c4 	movi	r4,7
1000c014:	20822016 	blt	r4,r2,1000c898 <___vfiprintf_internal_r+0xee0>
1000c018:	100b883a 	mov	r5,r2
1000c01c:	42000204 	addi	r8,r8,8
1000c020:	10800044 	addi	r2,r2,1
1000c024:	01002004 	movi	r4,128
1000c028:	b101de26 	beq	r22,r4,1000c7a4 <___vfiprintf_internal_r+0xdec>
1000c02c:	8521c83a 	sub	r16,r16,r20
1000c030:	0400230e 	bge	zero,r16,1000c0c0 <___vfiprintf_internal_r+0x708>
1000c034:	04c00404 	movi	r19,16
1000c038:	9c030d0e 	bge	r19,r16,1000cc70 <___vfiprintf_internal_r+0x12b8>
1000c03c:	00840074 	movhi	r2,4097
1000c040:	1093d604 	addi	r2,r2,20312
1000c044:	d8812615 	stw	r2,1176(sp)
1000c048:	058001c4 	movi	r22,7
1000c04c:	00000506 	br	1000c064 <___vfiprintf_internal_r+0x6ac>
1000c050:	28800084 	addi	r2,r5,2
1000c054:	42000204 	addi	r8,r8,8
1000c058:	200b883a 	mov	r5,r4
1000c05c:	843ffc04 	addi	r16,r16,-16
1000c060:	9c000d0e 	bge	r19,r16,1000c098 <___vfiprintf_internal_r+0x6e0>
1000c064:	18c00404 	addi	r3,r3,16
1000c068:	29000044 	addi	r4,r5,1
1000c06c:	44400015 	stw	r17,0(r8)
1000c070:	44c00115 	stw	r19,4(r8)
1000c074:	d8c11c15 	stw	r3,1136(sp)
1000c078:	d9011b15 	stw	r4,1132(sp)
1000c07c:	b13ff40e 	bge	r22,r4,1000c050 <__alt_data_end+0xf800c050>
1000c080:	1801321e 	bne	r3,zero,1000c54c <___vfiprintf_internal_r+0xb94>
1000c084:	843ffc04 	addi	r16,r16,-16
1000c088:	000b883a 	mov	r5,zero
1000c08c:	00800044 	movi	r2,1
1000c090:	d811883a 	mov	r8,sp
1000c094:	9c3ff316 	blt	r19,r16,1000c064 <__alt_data_end+0xf800c064>
1000c098:	d9012617 	ldw	r4,1176(sp)
1000c09c:	1c07883a 	add	r3,r3,r16
1000c0a0:	44000115 	stw	r16,4(r8)
1000c0a4:	41000015 	stw	r4,0(r8)
1000c0a8:	d8c11c15 	stw	r3,1136(sp)
1000c0ac:	d8811b15 	stw	r2,1132(sp)
1000c0b0:	010001c4 	movi	r4,7
1000c0b4:	20816216 	blt	r4,r2,1000c640 <___vfiprintf_internal_r+0xc88>
1000c0b8:	42000204 	addi	r8,r8,8
1000c0bc:	10800044 	addi	r2,r2,1
1000c0c0:	d9012217 	ldw	r4,1160(sp)
1000c0c4:	1d07883a 	add	r3,r3,r20
1000c0c8:	45000115 	stw	r20,4(r8)
1000c0cc:	41000015 	stw	r4,0(r8)
1000c0d0:	d8c11c15 	stw	r3,1136(sp)
1000c0d4:	d8811b15 	stw	r2,1132(sp)
1000c0d8:	010001c4 	movi	r4,7
1000c0dc:	2081610e 	bge	r4,r2,1000c664 <___vfiprintf_internal_r+0xcac>
1000c0e0:	1802211e 	bne	r3,zero,1000c968 <___vfiprintf_internal_r+0xfb0>
1000c0e4:	d8011b15 	stw	zero,1132(sp)
1000c0e8:	9480010c 	andi	r18,r18,4
1000c0ec:	9002171e 	bne	r18,zero,1000c94c <___vfiprintf_internal_r+0xf94>
1000c0f0:	d9412417 	ldw	r5,1168(sp)
1000c0f4:	a9433716 	blt	r21,r5,1000cdd4 <___vfiprintf_internal_r+0x141c>
1000c0f8:	d8812517 	ldw	r2,1172(sp)
1000c0fc:	1545883a 	add	r2,r2,r21
1000c100:	d8812515 	stw	r2,1172(sp)
1000c104:	00019a06 	br	1000c770 <___vfiprintf_internal_r+0xdb8>
1000c108:	d8c12317 	ldw	r3,1164(sp)
1000c10c:	05400044 	movi	r21,1
1000c110:	9811883a 	mov	r8,r19
1000c114:	18800017 	ldw	r2,0(r3)
1000c118:	18c00104 	addi	r3,r3,4
1000c11c:	d8c12315 	stw	r3,1164(sp)
1000c120:	d8c10004 	addi	r3,sp,1024
1000c124:	d8011d85 	stb	zero,1142(sp)
1000c128:	d8810005 	stb	r2,1024(sp)
1000c12c:	a829883a 	mov	r20,r21
1000c130:	d8c12215 	stw	r3,1160(sp)
1000c134:	0021883a 	mov	r16,zero
1000c138:	003f7806 	br	1000bf1c <__alt_data_end+0xf800bf1c>
1000c13c:	94800414 	ori	r18,r18,16
1000c140:	9080080c 	andi	r2,r18,32
1000c144:	9811883a 	mov	r8,r19
1000c148:	10009026 	beq	r2,zero,1000c38c <___vfiprintf_internal_r+0x9d4>
1000c14c:	d8812317 	ldw	r2,1164(sp)
1000c150:	d8c12317 	ldw	r3,1164(sp)
1000c154:	14c00017 	ldw	r19,0(r2)
1000c158:	15400117 	ldw	r21,4(r2)
1000c15c:	18c00204 	addi	r3,r3,8
1000c160:	d8c12315 	stw	r3,1164(sp)
1000c164:	0005883a 	mov	r2,zero
1000c168:	9d46b03a 	or	r3,r19,r21
1000c16c:	d8011d85 	stb	zero,1142(sp)
1000c170:	8029883a 	mov	r20,r16
1000c174:	002d883a 	mov	r22,zero
1000c178:	003f4606 	br	1000be94 <__alt_data_end+0xf800be94>
1000c17c:	94800414 	ori	r18,r18,16
1000c180:	9080080c 	andi	r2,r18,32
1000c184:	9811883a 	mov	r8,r19
1000c188:	10006226 	beq	r2,zero,1000c314 <___vfiprintf_internal_r+0x95c>
1000c18c:	d9012317 	ldw	r4,1164(sp)
1000c190:	00800044 	movi	r2,1
1000c194:	24c00017 	ldw	r19,0(r4)
1000c198:	25400117 	ldw	r21,4(r4)
1000c19c:	21000204 	addi	r4,r4,8
1000c1a0:	d9012315 	stw	r4,1164(sp)
1000c1a4:	9d46b03a 	or	r3,r19,r21
1000c1a8:	003ff006 	br	1000c16c <__alt_data_end+0xf800c16c>
1000c1ac:	b9800007 	ldb	r6,0(r23)
1000c1b0:	00801b04 	movi	r2,108
1000c1b4:	3082b226 	beq	r6,r2,1000cc80 <___vfiprintf_internal_r+0x12c8>
1000c1b8:	94800414 	ori	r18,r18,16
1000c1bc:	003e5f06 	br	1000bb3c <__alt_data_end+0xf800bb3c>
1000c1c0:	d8c12203 	ldbu	r3,1160(sp)
1000c1c4:	01040074 	movhi	r4,4097
1000c1c8:	21137004 	addi	r4,r4,19904
1000c1cc:	d8c11d85 	stb	r3,1142(sp)
1000c1d0:	d9012715 	stw	r4,1180(sp)
1000c1d4:	90c0080c 	andi	r3,r18,32
1000c1d8:	9811883a 	mov	r8,r19
1000c1dc:	d8812317 	ldw	r2,1164(sp)
1000c1e0:	18005f26 	beq	r3,zero,1000c360 <___vfiprintf_internal_r+0x9a8>
1000c1e4:	d9012317 	ldw	r4,1164(sp)
1000c1e8:	14c00017 	ldw	r19,0(r2)
1000c1ec:	15400117 	ldw	r21,4(r2)
1000c1f0:	21000204 	addi	r4,r4,8
1000c1f4:	d9012315 	stw	r4,1164(sp)
1000c1f8:	9080004c 	andi	r2,r18,1
1000c1fc:	1001e226 	beq	r2,zero,1000c988 <___vfiprintf_internal_r+0xfd0>
1000c200:	9d46b03a 	or	r3,r19,r21
1000c204:	18024e26 	beq	r3,zero,1000cb40 <___vfiprintf_internal_r+0x1188>
1000c208:	00800c04 	movi	r2,48
1000c20c:	d8811d05 	stb	r2,1140(sp)
1000c210:	d9811d45 	stb	r6,1141(sp)
1000c214:	94800094 	ori	r18,r18,2
1000c218:	00800084 	movi	r2,2
1000c21c:	003fd306 	br	1000c16c <__alt_data_end+0xf800c16c>
1000c220:	d9012317 	ldw	r4,1164(sp)
1000c224:	d9412317 	ldw	r5,1164(sp)
1000c228:	21000017 	ldw	r4,0(r4)
1000c22c:	28800104 	addi	r2,r5,4
1000c230:	d9012415 	stw	r4,1168(sp)
1000c234:	203eeb16 	blt	r4,zero,1000bde4 <__alt_data_end+0xf800bde4>
1000c238:	d8812315 	stw	r2,1164(sp)
1000c23c:	b9800007 	ldb	r6,0(r23)
1000c240:	003e3e06 	br	1000bb3c <__alt_data_end+0xf800bb3c>
1000c244:	b9800007 	ldb	r6,0(r23)
1000c248:	01000a84 	movi	r4,42
1000c24c:	b8800044 	addi	r2,r23,1
1000c250:	3102d226 	beq	r6,r4,1000cd9c <___vfiprintf_internal_r+0x13e4>
1000c254:	35bff404 	addi	r22,r6,-48
1000c258:	102f883a 	mov	r23,r2
1000c25c:	0021883a 	mov	r16,zero
1000c260:	adbe3736 	bltu	r21,r22,1000bb40 <__alt_data_end+0xf800bb40>
1000c264:	0009883a 	mov	r4,zero
1000c268:	01400284 	movi	r5,10
1000c26c:	00030800 	call	10003080 <__mulsi3>
1000c270:	b9800007 	ldb	r6,0(r23)
1000c274:	b089883a 	add	r4,r22,r2
1000c278:	bdc00044 	addi	r23,r23,1
1000c27c:	35bff404 	addi	r22,r6,-48
1000c280:	adbff92e 	bgeu	r21,r22,1000c268 <__alt_data_end+0xf800c268>
1000c284:	2021883a 	mov	r16,r4
1000c288:	203e2d0e 	bge	r4,zero,1000bb40 <__alt_data_end+0xf800bb40>
1000c28c:	043fffc4 	movi	r16,-1
1000c290:	003e2b06 	br	1000bb40 <__alt_data_end+0xf800bb40>
1000c294:	94801014 	ori	r18,r18,64
1000c298:	b9800007 	ldb	r6,0(r23)
1000c29c:	003e2706 	br	1000bb3c <__alt_data_end+0xf800bb3c>
1000c2a0:	94800814 	ori	r18,r18,32
1000c2a4:	b9800007 	ldb	r6,0(r23)
1000c2a8:	003e2406 	br	1000bb3c <__alt_data_end+0xf800bb3c>
1000c2ac:	d9412317 	ldw	r5,1164(sp)
1000c2b0:	d8812317 	ldw	r2,1164(sp)
1000c2b4:	d8011d85 	stb	zero,1142(sp)
1000c2b8:	29400017 	ldw	r5,0(r5)
1000c2bc:	9811883a 	mov	r8,r19
1000c2c0:	14c00104 	addi	r19,r2,4
1000c2c4:	d9412215 	stw	r5,1160(sp)
1000c2c8:	28029026 	beq	r5,zero,1000cd0c <___vfiprintf_internal_r+0x1354>
1000c2cc:	d9012217 	ldw	r4,1160(sp)
1000c2d0:	80027616 	blt	r16,zero,1000ccac <___vfiprintf_internal_r+0x12f4>
1000c2d4:	000b883a 	mov	r5,zero
1000c2d8:	800d883a 	mov	r6,r16
1000c2dc:	da012a15 	stw	r8,1192(sp)
1000c2e0:	0009cac0 	call	10009cac <memchr>
1000c2e4:	da012a17 	ldw	r8,1192(sp)
1000c2e8:	1002a026 	beq	r2,zero,1000cd6c <___vfiprintf_internal_r+0x13b4>
1000c2ec:	d8c12217 	ldw	r3,1160(sp)
1000c2f0:	10e9c83a 	sub	r20,r2,r3
1000c2f4:	85023816 	blt	r16,r20,1000cbd8 <___vfiprintf_internal_r+0x1220>
1000c2f8:	dd811d83 	ldbu	r22,1142(sp)
1000c2fc:	dcc12315 	stw	r19,1164(sp)
1000c300:	0021883a 	mov	r16,zero
1000c304:	003efd06 	br	1000befc <__alt_data_end+0xf800befc>
1000c308:	9080080c 	andi	r2,r18,32
1000c30c:	9811883a 	mov	r8,r19
1000c310:	103f9e1e 	bne	r2,zero,1000c18c <__alt_data_end+0xf800c18c>
1000c314:	9080040c 	andi	r2,r18,16
1000c318:	10021726 	beq	r2,zero,1000cb78 <___vfiprintf_internal_r+0x11c0>
1000c31c:	d9412317 	ldw	r5,1164(sp)
1000c320:	002b883a 	mov	r21,zero
1000c324:	00800044 	movi	r2,1
1000c328:	2cc00017 	ldw	r19,0(r5)
1000c32c:	29400104 	addi	r5,r5,4
1000c330:	d9412315 	stw	r5,1164(sp)
1000c334:	9807883a 	mov	r3,r19
1000c338:	003f8c06 	br	1000c16c <__alt_data_end+0xf800c16c>
1000c33c:	d8c12203 	ldbu	r3,1160(sp)
1000c340:	01040074 	movhi	r4,4097
1000c344:	21137504 	addi	r4,r4,19924
1000c348:	d8c11d85 	stb	r3,1142(sp)
1000c34c:	d9012715 	stw	r4,1180(sp)
1000c350:	90c0080c 	andi	r3,r18,32
1000c354:	9811883a 	mov	r8,r19
1000c358:	d8812317 	ldw	r2,1164(sp)
1000c35c:	183fa11e 	bne	r3,zero,1000c1e4 <__alt_data_end+0xf800c1e4>
1000c360:	90c0040c 	andi	r3,r18,16
1000c364:	1801e526 	beq	r3,zero,1000cafc <___vfiprintf_internal_r+0x1144>
1000c368:	d9412317 	ldw	r5,1164(sp)
1000c36c:	14c00017 	ldw	r19,0(r2)
1000c370:	002b883a 	mov	r21,zero
1000c374:	29400104 	addi	r5,r5,4
1000c378:	d9412315 	stw	r5,1164(sp)
1000c37c:	003f9e06 	br	1000c1f8 <__alt_data_end+0xf800c1f8>
1000c380:	9080080c 	andi	r2,r18,32
1000c384:	9811883a 	mov	r8,r19
1000c388:	103f701e 	bne	r2,zero,1000c14c <__alt_data_end+0xf800c14c>
1000c38c:	9080040c 	andi	r2,r18,16
1000c390:	1001ef26 	beq	r2,zero,1000cb50 <___vfiprintf_internal_r+0x1198>
1000c394:	d9012317 	ldw	r4,1164(sp)
1000c398:	002b883a 	mov	r21,zero
1000c39c:	0005883a 	mov	r2,zero
1000c3a0:	24c00017 	ldw	r19,0(r4)
1000c3a4:	21000104 	addi	r4,r4,4
1000c3a8:	d9012315 	stw	r4,1164(sp)
1000c3ac:	9807883a 	mov	r3,r19
1000c3b0:	003f6e06 	br	1000c16c <__alt_data_end+0xf800c16c>
1000c3b4:	d8c12317 	ldw	r3,1164(sp)
1000c3b8:	9811883a 	mov	r8,r19
1000c3bc:	00800c04 	movi	r2,48
1000c3c0:	1cc00017 	ldw	r19,0(r3)
1000c3c4:	01040074 	movhi	r4,4097
1000c3c8:	18c00104 	addi	r3,r3,4
1000c3cc:	d8811d05 	stb	r2,1140(sp)
1000c3d0:	21137504 	addi	r4,r4,19924
1000c3d4:	00801e04 	movi	r2,120
1000c3d8:	d8811d45 	stb	r2,1141(sp)
1000c3dc:	d8c12315 	stw	r3,1164(sp)
1000c3e0:	002b883a 	mov	r21,zero
1000c3e4:	94800094 	ori	r18,r18,2
1000c3e8:	d9012715 	stw	r4,1180(sp)
1000c3ec:	00800084 	movi	r2,2
1000c3f0:	9807883a 	mov	r3,r19
1000c3f4:	003f5d06 	br	1000c16c <__alt_data_end+0xf800c16c>
1000c3f8:	d8c12203 	ldbu	r3,1160(sp)
1000c3fc:	9080080c 	andi	r2,r18,32
1000c400:	9811883a 	mov	r8,r19
1000c404:	d8c11d85 	stb	r3,1142(sp)
1000c408:	1001b126 	beq	r2,zero,1000cad0 <___vfiprintf_internal_r+0x1118>
1000c40c:	d9012317 	ldw	r4,1164(sp)
1000c410:	d9412517 	ldw	r5,1172(sp)
1000c414:	20800017 	ldw	r2,0(r4)
1000c418:	2807d7fa 	srai	r3,r5,31
1000c41c:	21000104 	addi	r4,r4,4
1000c420:	d9012315 	stw	r4,1164(sp)
1000c424:	11400015 	stw	r5,0(r2)
1000c428:	10c00115 	stw	r3,4(r2)
1000c42c:	003d9a06 	br	1000ba98 <__alt_data_end+0xf800ba98>
1000c430:	d8812207 	ldb	r2,1160(sp)
1000c434:	1001c41e 	bne	r2,zero,1000cb48 <___vfiprintf_internal_r+0x1190>
1000c438:	00c00804 	movi	r3,32
1000c43c:	d8c12205 	stb	r3,1160(sp)
1000c440:	b9800007 	ldb	r6,0(r23)
1000c444:	003dbd06 	br	1000bb3c <__alt_data_end+0xf800bb3c>
1000c448:	00c00ac4 	movi	r3,43
1000c44c:	d8c12205 	stb	r3,1160(sp)
1000c450:	b9800007 	ldb	r6,0(r23)
1000c454:	003db906 	br	1000bb3c <__alt_data_end+0xf800bb3c>
1000c458:	d8c12203 	ldbu	r3,1160(sp)
1000c45c:	9080080c 	andi	r2,r18,32
1000c460:	9811883a 	mov	r8,r19
1000c464:	d8c11d85 	stb	r3,1142(sp)
1000c468:	d8c12317 	ldw	r3,1164(sp)
1000c46c:	103e7e1e 	bne	r2,zero,1000be68 <__alt_data_end+0xf800be68>
1000c470:	9080040c 	andi	r2,r18,16
1000c474:	1001a926 	beq	r2,zero,1000cb1c <___vfiprintf_internal_r+0x1164>
1000c478:	1cc00017 	ldw	r19,0(r3)
1000c47c:	d9412317 	ldw	r5,1164(sp)
1000c480:	982bd7fa 	srai	r21,r19,31
1000c484:	29400104 	addi	r5,r5,4
1000c488:	d9412315 	stw	r5,1164(sp)
1000c48c:	a805883a 	mov	r2,r21
1000c490:	003e7b06 	br	1000be80 <__alt_data_end+0xf800be80>
1000c494:	94800054 	ori	r18,r18,1
1000c498:	b9800007 	ldb	r6,0(r23)
1000c49c:	003da706 	br	1000bb3c <__alt_data_end+0xf800bb3c>
1000c4a0:	d8c12203 	ldbu	r3,1160(sp)
1000c4a4:	9811883a 	mov	r8,r19
1000c4a8:	d8c11d85 	stb	r3,1142(sp)
1000c4ac:	30005826 	beq	r6,zero,1000c610 <___vfiprintf_internal_r+0xc58>
1000c4b0:	05400044 	movi	r21,1
1000c4b4:	d8c10004 	addi	r3,sp,1024
1000c4b8:	d9810005 	stb	r6,1024(sp)
1000c4bc:	d8011d85 	stb	zero,1142(sp)
1000c4c0:	a829883a 	mov	r20,r21
1000c4c4:	d8c12215 	stw	r3,1160(sp)
1000c4c8:	003f1a06 	br	1000c134 <__alt_data_end+0xf800c134>
1000c4cc:	d9012117 	ldw	r4,1156(sp)
1000c4d0:	d9412017 	ldw	r5,1152(sp)
1000c4d4:	d9811a04 	addi	r6,sp,1128
1000c4d8:	d9c12a15 	stw	r7,1192(sp)
1000c4dc:	db012b15 	stw	r12,1196(sp)
1000c4e0:	000b8a40 	call	1000b8a4 <__sprint_r.part.0>
1000c4e4:	d9c12a17 	ldw	r7,1192(sp)
1000c4e8:	db012b17 	ldw	r12,1196(sp)
1000c4ec:	10004e1e 	bne	r2,zero,1000c628 <___vfiprintf_internal_r+0xc70>
1000c4f0:	d9011b17 	ldw	r4,1132(sp)
1000c4f4:	d8c11c17 	ldw	r3,1136(sp)
1000c4f8:	d811883a 	mov	r8,sp
1000c4fc:	21400044 	addi	r5,r4,1
1000c500:	003e9d06 	br	1000bf78 <__alt_data_end+0xf800bf78>
1000c504:	d9411b17 	ldw	r5,1132(sp)
1000c508:	d8c11c17 	ldw	r3,1136(sp)
1000c50c:	28800044 	addi	r2,r5,1
1000c510:	d9011d87 	ldb	r4,1142(sp)
1000c514:	203eb626 	beq	r4,zero,1000bff0 <__alt_data_end+0xf800bff0>
1000c518:	01000044 	movi	r4,1
1000c51c:	d9411d84 	addi	r5,sp,1142
1000c520:	1907883a 	add	r3,r3,r4
1000c524:	41400015 	stw	r5,0(r8)
1000c528:	41000115 	stw	r4,4(r8)
1000c52c:	d8c11c15 	stw	r3,1136(sp)
1000c530:	d8811b15 	stw	r2,1132(sp)
1000c534:	014001c4 	movi	r5,7
1000c538:	2880ce16 	blt	r5,r2,1000c874 <___vfiprintf_internal_r+0xebc>
1000c53c:	100b883a 	mov	r5,r2
1000c540:	42000204 	addi	r8,r8,8
1000c544:	10800044 	addi	r2,r2,1
1000c548:	003ea906 	br	1000bff0 <__alt_data_end+0xf800bff0>
1000c54c:	d9012117 	ldw	r4,1156(sp)
1000c550:	d9412017 	ldw	r5,1152(sp)
1000c554:	d9811a04 	addi	r6,sp,1128
1000c558:	000b8a40 	call	1000b8a4 <__sprint_r.part.0>
1000c55c:	1000321e 	bne	r2,zero,1000c628 <___vfiprintf_internal_r+0xc70>
1000c560:	d9411b17 	ldw	r5,1132(sp)
1000c564:	d8c11c17 	ldw	r3,1136(sp)
1000c568:	d811883a 	mov	r8,sp
1000c56c:	28800044 	addi	r2,r5,1
1000c570:	003eba06 	br	1000c05c <__alt_data_end+0xf800c05c>
1000c574:	10803fcc 	andi	r2,r2,255
1000c578:	00c00044 	movi	r3,1
1000c57c:	10fe4d1e 	bne	r2,r3,1000beb4 <__alt_data_end+0xf800beb4>
1000c580:	a800021e 	bne	r21,zero,1000c58c <___vfiprintf_internal_r+0xbd4>
1000c584:	00800244 	movi	r2,9
1000c588:	14c01b2e 	bgeu	r2,r19,1000c5f8 <___vfiprintf_internal_r+0xc40>
1000c58c:	dc012215 	stw	r16,1160(sp)
1000c590:	dd010a04 	addi	r20,sp,1064
1000c594:	a821883a 	mov	r16,r21
1000c598:	402b883a 	mov	r21,r8
1000c59c:	9809883a 	mov	r4,r19
1000c5a0:	800b883a 	mov	r5,r16
1000c5a4:	01800284 	movi	r6,10
1000c5a8:	000f883a 	mov	r7,zero
1000c5ac:	000dd8c0 	call	1000dd8c <__umoddi3>
1000c5b0:	10800c04 	addi	r2,r2,48
1000c5b4:	a53fffc4 	addi	r20,r20,-1
1000c5b8:	9809883a 	mov	r4,r19
1000c5bc:	800b883a 	mov	r5,r16
1000c5c0:	01800284 	movi	r6,10
1000c5c4:	000f883a 	mov	r7,zero
1000c5c8:	a0800005 	stb	r2,0(r20)
1000c5cc:	000d74c0 	call	1000d74c <__udivdi3>
1000c5d0:	1027883a 	mov	r19,r2
1000c5d4:	10c4b03a 	or	r2,r2,r3
1000c5d8:	1821883a 	mov	r16,r3
1000c5dc:	103fef1e 	bne	r2,zero,1000c59c <__alt_data_end+0xf800c59c>
1000c5e0:	d9011e17 	ldw	r4,1144(sp)
1000c5e4:	dc012217 	ldw	r16,1160(sp)
1000c5e8:	a811883a 	mov	r8,r21
1000c5ec:	dd012215 	stw	r20,1160(sp)
1000c5f0:	2529c83a 	sub	r20,r4,r20
1000c5f4:	003e4106 	br	1000befc <__alt_data_end+0xf800befc>
1000c5f8:	9cc00c04 	addi	r19,r19,48
1000c5fc:	d8c109c4 	addi	r3,sp,1063
1000c600:	dcc109c5 	stb	r19,1063(sp)
1000c604:	dd012817 	ldw	r20,1184(sp)
1000c608:	d8c12215 	stw	r3,1160(sp)
1000c60c:	003e3b06 	br	1000befc <__alt_data_end+0xf800befc>
1000c610:	d8811c17 	ldw	r2,1136(sp)
1000c614:	10000426 	beq	r2,zero,1000c628 <___vfiprintf_internal_r+0xc70>
1000c618:	d9012117 	ldw	r4,1156(sp)
1000c61c:	d9412017 	ldw	r5,1152(sp)
1000c620:	d9811a04 	addi	r6,sp,1128
1000c624:	000b8a40 	call	1000b8a4 <__sprint_r.part.0>
1000c628:	d9412017 	ldw	r5,1152(sp)
1000c62c:	2880030b 	ldhu	r2,12(r5)
1000c630:	1080100c 	andi	r2,r2,64
1000c634:	103ddc1e 	bne	r2,zero,1000bda8 <__alt_data_end+0xf800bda8>
1000c638:	d8812517 	ldw	r2,1172(sp)
1000c63c:	003ddb06 	br	1000bdac <__alt_data_end+0xf800bdac>
1000c640:	1801061e 	bne	r3,zero,1000ca5c <___vfiprintf_internal_r+0x10a4>
1000c644:	d8c12217 	ldw	r3,1160(sp)
1000c648:	00800044 	movi	r2,1
1000c64c:	dd000115 	stw	r20,4(sp)
1000c650:	d8c00015 	stw	r3,0(sp)
1000c654:	dd011c15 	stw	r20,1136(sp)
1000c658:	d8811b15 	stw	r2,1132(sp)
1000c65c:	a007883a 	mov	r3,r20
1000c660:	d811883a 	mov	r8,sp
1000c664:	42000204 	addi	r8,r8,8
1000c668:	9480010c 	andi	r18,r18,4
1000c66c:	90003426 	beq	r18,zero,1000c740 <___vfiprintf_internal_r+0xd88>
1000c670:	d9412417 	ldw	r5,1168(sp)
1000c674:	2d65c83a 	sub	r18,r5,r21
1000c678:	0480310e 	bge	zero,r18,1000c740 <___vfiprintf_internal_r+0xd88>
1000c67c:	04000404 	movi	r16,16
1000c680:	8481ad0e 	bge	r16,r18,1000cd38 <___vfiprintf_internal_r+0x1380>
1000c684:	01440074 	movhi	r5,4097
1000c688:	2953da04 	addi	r5,r5,20328
1000c68c:	d9011b17 	ldw	r4,1132(sp)
1000c690:	d9412615 	stw	r5,1176(sp)
1000c694:	04c001c4 	movi	r19,7
1000c698:	dd012117 	ldw	r20,1156(sp)
1000c69c:	dd812017 	ldw	r22,1152(sp)
1000c6a0:	00000506 	br	1000c6b8 <___vfiprintf_internal_r+0xd00>
1000c6a4:	21400084 	addi	r5,r4,2
1000c6a8:	42000204 	addi	r8,r8,8
1000c6ac:	1009883a 	mov	r4,r2
1000c6b0:	94bffc04 	addi	r18,r18,-16
1000c6b4:	84800d0e 	bge	r16,r18,1000c6ec <___vfiprintf_internal_r+0xd34>
1000c6b8:	18c00404 	addi	r3,r3,16
1000c6bc:	20800044 	addi	r2,r4,1
1000c6c0:	47000015 	stw	fp,0(r8)
1000c6c4:	44000115 	stw	r16,4(r8)
1000c6c8:	d8c11c15 	stw	r3,1136(sp)
1000c6cc:	d8811b15 	stw	r2,1132(sp)
1000c6d0:	98bff40e 	bge	r19,r2,1000c6a4 <__alt_data_end+0xf800c6a4>
1000c6d4:	1800291e 	bne	r3,zero,1000c77c <___vfiprintf_internal_r+0xdc4>
1000c6d8:	94bffc04 	addi	r18,r18,-16
1000c6dc:	0009883a 	mov	r4,zero
1000c6e0:	01400044 	movi	r5,1
1000c6e4:	d811883a 	mov	r8,sp
1000c6e8:	84bff316 	blt	r16,r18,1000c6b8 <__alt_data_end+0xf800c6b8>
1000c6ec:	d8812617 	ldw	r2,1176(sp)
1000c6f0:	1c87883a 	add	r3,r3,r18
1000c6f4:	44800115 	stw	r18,4(r8)
1000c6f8:	40800015 	stw	r2,0(r8)
1000c6fc:	d8c11c15 	stw	r3,1136(sp)
1000c700:	d9411b15 	stw	r5,1132(sp)
1000c704:	008001c4 	movi	r2,7
1000c708:	11400d0e 	bge	r2,r5,1000c740 <___vfiprintf_internal_r+0xd88>
1000c70c:	1800061e 	bne	r3,zero,1000c728 <___vfiprintf_internal_r+0xd70>
1000c710:	d8c12417 	ldw	r3,1168(sp)
1000c714:	a8c12e16 	blt	r21,r3,1000cbd0 <___vfiprintf_internal_r+0x1218>
1000c718:	d9012517 	ldw	r4,1172(sp)
1000c71c:	2549883a 	add	r4,r4,r21
1000c720:	d9012515 	stw	r4,1172(sp)
1000c724:	00001206 	br	1000c770 <___vfiprintf_internal_r+0xdb8>
1000c728:	d9012117 	ldw	r4,1156(sp)
1000c72c:	d9412017 	ldw	r5,1152(sp)
1000c730:	d9811a04 	addi	r6,sp,1128
1000c734:	000b8a40 	call	1000b8a4 <__sprint_r.part.0>
1000c738:	103fbb1e 	bne	r2,zero,1000c628 <__alt_data_end+0xf800c628>
1000c73c:	d8c11c17 	ldw	r3,1136(sp)
1000c740:	d8812417 	ldw	r2,1168(sp)
1000c744:	a880010e 	bge	r21,r2,1000c74c <___vfiprintf_internal_r+0xd94>
1000c748:	102b883a 	mov	r21,r2
1000c74c:	d9012517 	ldw	r4,1172(sp)
1000c750:	2549883a 	add	r4,r4,r21
1000c754:	d9012515 	stw	r4,1172(sp)
1000c758:	18000526 	beq	r3,zero,1000c770 <___vfiprintf_internal_r+0xdb8>
1000c75c:	d9012117 	ldw	r4,1156(sp)
1000c760:	d9412017 	ldw	r5,1152(sp)
1000c764:	d9811a04 	addi	r6,sp,1128
1000c768:	000b8a40 	call	1000b8a4 <__sprint_r.part.0>
1000c76c:	103fae1e 	bne	r2,zero,1000c628 <__alt_data_end+0xf800c628>
1000c770:	d8011b15 	stw	zero,1132(sp)
1000c774:	d811883a 	mov	r8,sp
1000c778:	003cc706 	br	1000ba98 <__alt_data_end+0xf800ba98>
1000c77c:	a009883a 	mov	r4,r20
1000c780:	b00b883a 	mov	r5,r22
1000c784:	d9811a04 	addi	r6,sp,1128
1000c788:	000b8a40 	call	1000b8a4 <__sprint_r.part.0>
1000c78c:	103fa61e 	bne	r2,zero,1000c628 <__alt_data_end+0xf800c628>
1000c790:	d9011b17 	ldw	r4,1132(sp)
1000c794:	d8c11c17 	ldw	r3,1136(sp)
1000c798:	d811883a 	mov	r8,sp
1000c79c:	21400044 	addi	r5,r4,1
1000c7a0:	003fc306 	br	1000c6b0 <__alt_data_end+0xf800c6b0>
1000c7a4:	d9012417 	ldw	r4,1168(sp)
1000c7a8:	256dc83a 	sub	r22,r4,r21
1000c7ac:	05be1f0e 	bge	zero,r22,1000c02c <__alt_data_end+0xf800c02c>
1000c7b0:	04c00404 	movi	r19,16
1000c7b4:	9d81720e 	bge	r19,r22,1000cd80 <___vfiprintf_internal_r+0x13c8>
1000c7b8:	00840074 	movhi	r2,4097
1000c7bc:	1093d604 	addi	r2,r2,20312
1000c7c0:	d8812615 	stw	r2,1176(sp)
1000c7c4:	028001c4 	movi	r10,7
1000c7c8:	00000506 	br	1000c7e0 <___vfiprintf_internal_r+0xe28>
1000c7cc:	29000084 	addi	r4,r5,2
1000c7d0:	42000204 	addi	r8,r8,8
1000c7d4:	100b883a 	mov	r5,r2
1000c7d8:	b5bffc04 	addi	r22,r22,-16
1000c7dc:	9d800d0e 	bge	r19,r22,1000c814 <___vfiprintf_internal_r+0xe5c>
1000c7e0:	18c00404 	addi	r3,r3,16
1000c7e4:	28800044 	addi	r2,r5,1
1000c7e8:	44400015 	stw	r17,0(r8)
1000c7ec:	44c00115 	stw	r19,4(r8)
1000c7f0:	d8c11c15 	stw	r3,1136(sp)
1000c7f4:	d8811b15 	stw	r2,1132(sp)
1000c7f8:	50bff40e 	bge	r10,r2,1000c7cc <__alt_data_end+0xf800c7cc>
1000c7fc:	1800111e 	bne	r3,zero,1000c844 <___vfiprintf_internal_r+0xe8c>
1000c800:	b5bffc04 	addi	r22,r22,-16
1000c804:	000b883a 	mov	r5,zero
1000c808:	01000044 	movi	r4,1
1000c80c:	d811883a 	mov	r8,sp
1000c810:	9dbff316 	blt	r19,r22,1000c7e0 <__alt_data_end+0xf800c7e0>
1000c814:	d9412617 	ldw	r5,1176(sp)
1000c818:	1d87883a 	add	r3,r3,r22
1000c81c:	45800115 	stw	r22,4(r8)
1000c820:	41400015 	stw	r5,0(r8)
1000c824:	d8c11c15 	stw	r3,1136(sp)
1000c828:	d9011b15 	stw	r4,1132(sp)
1000c82c:	008001c4 	movi	r2,7
1000c830:	11008516 	blt	r2,r4,1000ca48 <___vfiprintf_internal_r+0x1090>
1000c834:	42000204 	addi	r8,r8,8
1000c838:	20800044 	addi	r2,r4,1
1000c83c:	200b883a 	mov	r5,r4
1000c840:	003dfa06 	br	1000c02c <__alt_data_end+0xf800c02c>
1000c844:	d9012117 	ldw	r4,1156(sp)
1000c848:	d9412017 	ldw	r5,1152(sp)
1000c84c:	d9811a04 	addi	r6,sp,1128
1000c850:	da812a15 	stw	r10,1192(sp)
1000c854:	000b8a40 	call	1000b8a4 <__sprint_r.part.0>
1000c858:	da812a17 	ldw	r10,1192(sp)
1000c85c:	103f721e 	bne	r2,zero,1000c628 <__alt_data_end+0xf800c628>
1000c860:	d9411b17 	ldw	r5,1132(sp)
1000c864:	d8c11c17 	ldw	r3,1136(sp)
1000c868:	d811883a 	mov	r8,sp
1000c86c:	29000044 	addi	r4,r5,1
1000c870:	003fd906 	br	1000c7d8 <__alt_data_end+0xf800c7d8>
1000c874:	1800681e 	bne	r3,zero,1000ca18 <___vfiprintf_internal_r+0x1060>
1000c878:	50004d26 	beq	r10,zero,1000c9b0 <___vfiprintf_internal_r+0xff8>
1000c87c:	d8811d04 	addi	r2,sp,1140
1000c880:	00c00084 	movi	r3,2
1000c884:	d8800015 	stw	r2,0(sp)
1000c888:	d8c00115 	stw	r3,4(sp)
1000c88c:	2005883a 	mov	r2,r4
1000c890:	d811883a 	mov	r8,sp
1000c894:	003de006 	br	1000c018 <__alt_data_end+0xf800c018>
1000c898:	1800551e 	bne	r3,zero,1000c9f0 <___vfiprintf_internal_r+0x1038>
1000c89c:	000b883a 	mov	r5,zero
1000c8a0:	00800044 	movi	r2,1
1000c8a4:	d811883a 	mov	r8,sp
1000c8a8:	003dde06 	br	1000c024 <__alt_data_end+0xf800c024>
1000c8ac:	10803fcc 	andi	r2,r2,255
1000c8b0:	1000191e 	bne	r2,zero,1000c918 <___vfiprintf_internal_r+0xf60>
1000c8b4:	9080004c 	andi	r2,r18,1
1000c8b8:	10001726 	beq	r2,zero,1000c918 <___vfiprintf_internal_r+0xf60>
1000c8bc:	00800c04 	movi	r2,48
1000c8c0:	d8c109c4 	addi	r3,sp,1063
1000c8c4:	d88109c5 	stb	r2,1063(sp)
1000c8c8:	dd012817 	ldw	r20,1184(sp)
1000c8cc:	d8c12215 	stw	r3,1160(sp)
1000c8d0:	003d8a06 	br	1000befc <__alt_data_end+0xf800befc>
1000c8d4:	d9012717 	ldw	r4,1180(sp)
1000c8d8:	dd010a04 	addi	r20,sp,1064
1000c8dc:	988003cc 	andi	r2,r19,15
1000c8e0:	a806973a 	slli	r3,r21,28
1000c8e4:	2085883a 	add	r2,r4,r2
1000c8e8:	9826d13a 	srli	r19,r19,4
1000c8ec:	10800003 	ldbu	r2,0(r2)
1000c8f0:	a82ad13a 	srli	r21,r21,4
1000c8f4:	a53fffc4 	addi	r20,r20,-1
1000c8f8:	1ce6b03a 	or	r19,r3,r19
1000c8fc:	a0800005 	stb	r2,0(r20)
1000c900:	9d44b03a 	or	r2,r19,r21
1000c904:	103ff51e 	bne	r2,zero,1000c8dc <__alt_data_end+0xf800c8dc>
1000c908:	d9411e17 	ldw	r5,1144(sp)
1000c90c:	dd012215 	stw	r20,1160(sp)
1000c910:	2d29c83a 	sub	r20,r5,r20
1000c914:	003d7906 	br	1000befc <__alt_data_end+0xf800befc>
1000c918:	d8c10a04 	addi	r3,sp,1064
1000c91c:	d8c12215 	stw	r3,1160(sp)
1000c920:	003d7606 	br	1000befc <__alt_data_end+0xf800befc>
1000c924:	18009e1e 	bne	r3,zero,1000cba0 <___vfiprintf_internal_r+0x11e8>
1000c928:	d8811d87 	ldb	r2,1142(sp)
1000c92c:	10005f26 	beq	r2,zero,1000caac <___vfiprintf_internal_r+0x10f4>
1000c930:	00c00044 	movi	r3,1
1000c934:	d9011d84 	addi	r4,sp,1142
1000c938:	1805883a 	mov	r2,r3
1000c93c:	d9000015 	stw	r4,0(sp)
1000c940:	d8c00115 	stw	r3,4(sp)
1000c944:	d811883a 	mov	r8,sp
1000c948:	003efc06 	br	1000c53c <__alt_data_end+0xf800c53c>
1000c94c:	d9412417 	ldw	r5,1168(sp)
1000c950:	d811883a 	mov	r8,sp
1000c954:	2d65c83a 	sub	r18,r5,r21
1000c958:	04bf4816 	blt	zero,r18,1000c67c <__alt_data_end+0xf800c67c>
1000c95c:	003f6c06 	br	1000c710 <__alt_data_end+0xf800c710>
1000c960:	b829883a 	mov	r20,r23
1000c964:	003c6906 	br	1000bb0c <__alt_data_end+0xf800bb0c>
1000c968:	d9012117 	ldw	r4,1156(sp)
1000c96c:	d9412017 	ldw	r5,1152(sp)
1000c970:	d9811a04 	addi	r6,sp,1128
1000c974:	000b8a40 	call	1000b8a4 <__sprint_r.part.0>
1000c978:	103f2b1e 	bne	r2,zero,1000c628 <__alt_data_end+0xf800c628>
1000c97c:	d8c11c17 	ldw	r3,1136(sp)
1000c980:	d811883a 	mov	r8,sp
1000c984:	003f3806 	br	1000c668 <__alt_data_end+0xf800c668>
1000c988:	00800084 	movi	r2,2
1000c98c:	9d46b03a 	or	r3,r19,r21
1000c990:	003df606 	br	1000c16c <__alt_data_end+0xf800c16c>
1000c994:	d9012117 	ldw	r4,1156(sp)
1000c998:	d9412017 	ldw	r5,1152(sp)
1000c99c:	d9811a04 	addi	r6,sp,1128
1000c9a0:	000b8a40 	call	1000b8a4 <__sprint_r.part.0>
1000c9a4:	103f201e 	bne	r2,zero,1000c628 <__alt_data_end+0xf800c628>
1000c9a8:	d811883a 	mov	r8,sp
1000c9ac:	003cc606 	br	1000bcc8 <__alt_data_end+0xf800bcc8>
1000c9b0:	000b883a 	mov	r5,zero
1000c9b4:	2005883a 	mov	r2,r4
1000c9b8:	d811883a 	mov	r8,sp
1000c9bc:	003d9906 	br	1000c024 <__alt_data_end+0xf800c024>
1000c9c0:	10803fcc 	andi	r2,r2,255
1000c9c4:	1080201c 	xori	r2,r2,128
1000c9c8:	10bfe004 	addi	r2,r2,-128
1000c9cc:	01000c04 	movi	r4,48
1000c9d0:	1100b226 	beq	r2,r4,1000cc9c <___vfiprintf_internal_r+0x12e4>
1000c9d4:	d9412217 	ldw	r5,1160(sp)
1000c9d8:	d8811e17 	ldw	r2,1144(sp)
1000c9dc:	193fffc5 	stb	r4,-1(r3)
1000c9e0:	297fffc4 	addi	r5,r5,-1
1000c9e4:	d9412215 	stw	r5,1160(sp)
1000c9e8:	1169c83a 	sub	r20,r2,r5
1000c9ec:	003d4306 	br	1000befc <__alt_data_end+0xf800befc>
1000c9f0:	d9012117 	ldw	r4,1156(sp)
1000c9f4:	d9412017 	ldw	r5,1152(sp)
1000c9f8:	d9811a04 	addi	r6,sp,1128
1000c9fc:	000b8a40 	call	1000b8a4 <__sprint_r.part.0>
1000ca00:	103f091e 	bne	r2,zero,1000c628 <__alt_data_end+0xf800c628>
1000ca04:	d9411b17 	ldw	r5,1132(sp)
1000ca08:	d8c11c17 	ldw	r3,1136(sp)
1000ca0c:	d811883a 	mov	r8,sp
1000ca10:	28800044 	addi	r2,r5,1
1000ca14:	003d8306 	br	1000c024 <__alt_data_end+0xf800c024>
1000ca18:	d9012117 	ldw	r4,1156(sp)
1000ca1c:	d9412017 	ldw	r5,1152(sp)
1000ca20:	d9811a04 	addi	r6,sp,1128
1000ca24:	da812a15 	stw	r10,1192(sp)
1000ca28:	000b8a40 	call	1000b8a4 <__sprint_r.part.0>
1000ca2c:	da812a17 	ldw	r10,1192(sp)
1000ca30:	103efd1e 	bne	r2,zero,1000c628 <__alt_data_end+0xf800c628>
1000ca34:	d9411b17 	ldw	r5,1132(sp)
1000ca38:	d8c11c17 	ldw	r3,1136(sp)
1000ca3c:	d811883a 	mov	r8,sp
1000ca40:	28800044 	addi	r2,r5,1
1000ca44:	003d6a06 	br	1000bff0 <__alt_data_end+0xf800bff0>
1000ca48:	1800a01e 	bne	r3,zero,1000cccc <___vfiprintf_internal_r+0x1314>
1000ca4c:	000b883a 	mov	r5,zero
1000ca50:	00800044 	movi	r2,1
1000ca54:	d811883a 	mov	r8,sp
1000ca58:	003d7406 	br	1000c02c <__alt_data_end+0xf800c02c>
1000ca5c:	d9012117 	ldw	r4,1156(sp)
1000ca60:	d9412017 	ldw	r5,1152(sp)
1000ca64:	d9811a04 	addi	r6,sp,1128
1000ca68:	000b8a40 	call	1000b8a4 <__sprint_r.part.0>
1000ca6c:	103eee1e 	bne	r2,zero,1000c628 <__alt_data_end+0xf800c628>
1000ca70:	d8811b17 	ldw	r2,1132(sp)
1000ca74:	d8c11c17 	ldw	r3,1136(sp)
1000ca78:	d811883a 	mov	r8,sp
1000ca7c:	10800044 	addi	r2,r2,1
1000ca80:	003d8f06 	br	1000c0c0 <__alt_data_end+0xf800c0c0>
1000ca84:	04e7c83a 	sub	r19,zero,r19
1000ca88:	9804c03a 	cmpne	r2,r19,zero
1000ca8c:	056bc83a 	sub	r21,zero,r21
1000ca90:	a8abc83a 	sub	r21,r21,r2
1000ca94:	05800b44 	movi	r22,45
1000ca98:	dd811d85 	stb	r22,1142(sp)
1000ca9c:	8029883a 	mov	r20,r16
1000caa0:	00800044 	movi	r2,1
1000caa4:	9d46b03a 	or	r3,r19,r21
1000caa8:	003cfa06 	br	1000be94 <__alt_data_end+0xf800be94>
1000caac:	000b883a 	mov	r5,zero
1000cab0:	00800044 	movi	r2,1
1000cab4:	d811883a 	mov	r8,sp
1000cab8:	503d5a26 	beq	r10,zero,1000c024 <__alt_data_end+0xf800c024>
1000cabc:	00c00084 	movi	r3,2
1000cac0:	d9011d04 	addi	r4,sp,1140
1000cac4:	d9000015 	stw	r4,0(sp)
1000cac8:	d8c00115 	stw	r3,4(sp)
1000cacc:	003d5206 	br	1000c018 <__alt_data_end+0xf800c018>
1000cad0:	9080040c 	andi	r2,r18,16
1000cad4:	1000421e 	bne	r2,zero,1000cbe0 <___vfiprintf_internal_r+0x1228>
1000cad8:	9480100c 	andi	r18,r18,64
1000cadc:	90009c26 	beq	r18,zero,1000cd50 <___vfiprintf_internal_r+0x1398>
1000cae0:	d9412317 	ldw	r5,1164(sp)
1000cae4:	d8c12517 	ldw	r3,1172(sp)
1000cae8:	28800017 	ldw	r2,0(r5)
1000caec:	29400104 	addi	r5,r5,4
1000caf0:	d9412315 	stw	r5,1164(sp)
1000caf4:	10c0000d 	sth	r3,0(r2)
1000caf8:	003be706 	br	1000ba98 <__alt_data_end+0xf800ba98>
1000cafc:	90c0100c 	andi	r3,r18,64
1000cb00:	18003e26 	beq	r3,zero,1000cbfc <___vfiprintf_internal_r+0x1244>
1000cb04:	d8c12317 	ldw	r3,1164(sp)
1000cb08:	14c0000b 	ldhu	r19,0(r2)
1000cb0c:	002b883a 	mov	r21,zero
1000cb10:	18c00104 	addi	r3,r3,4
1000cb14:	d8c12315 	stw	r3,1164(sp)
1000cb18:	003db706 	br	1000c1f8 <__alt_data_end+0xf800c1f8>
1000cb1c:	9080100c 	andi	r2,r18,64
1000cb20:	10004c26 	beq	r2,zero,1000cc54 <___vfiprintf_internal_r+0x129c>
1000cb24:	1cc0000f 	ldh	r19,0(r3)
1000cb28:	d8812317 	ldw	r2,1164(sp)
1000cb2c:	982bd7fa 	srai	r21,r19,31
1000cb30:	10800104 	addi	r2,r2,4
1000cb34:	d8812315 	stw	r2,1164(sp)
1000cb38:	a805883a 	mov	r2,r21
1000cb3c:	003cd006 	br	1000be80 <__alt_data_end+0xf800be80>
1000cb40:	00800084 	movi	r2,2
1000cb44:	003d8906 	br	1000c16c <__alt_data_end+0xf800c16c>
1000cb48:	b9800007 	ldb	r6,0(r23)
1000cb4c:	003bfb06 	br	1000bb3c <__alt_data_end+0xf800bb3c>
1000cb50:	9080100c 	andi	r2,r18,64
1000cb54:	10003726 	beq	r2,zero,1000cc34 <___vfiprintf_internal_r+0x127c>
1000cb58:	d9412317 	ldw	r5,1164(sp)
1000cb5c:	002b883a 	mov	r21,zero
1000cb60:	0005883a 	mov	r2,zero
1000cb64:	2cc0000b 	ldhu	r19,0(r5)
1000cb68:	29400104 	addi	r5,r5,4
1000cb6c:	d9412315 	stw	r5,1164(sp)
1000cb70:	9807883a 	mov	r3,r19
1000cb74:	003d7d06 	br	1000c16c <__alt_data_end+0xf800c16c>
1000cb78:	9080100c 	andi	r2,r18,64
1000cb7c:	10002526 	beq	r2,zero,1000cc14 <___vfiprintf_internal_r+0x125c>
1000cb80:	d8812317 	ldw	r2,1164(sp)
1000cb84:	002b883a 	mov	r21,zero
1000cb88:	14c0000b 	ldhu	r19,0(r2)
1000cb8c:	10800104 	addi	r2,r2,4
1000cb90:	d8812315 	stw	r2,1164(sp)
1000cb94:	9807883a 	mov	r3,r19
1000cb98:	00800044 	movi	r2,1
1000cb9c:	003d7306 	br	1000c16c <__alt_data_end+0xf800c16c>
1000cba0:	d9012117 	ldw	r4,1156(sp)
1000cba4:	d9412017 	ldw	r5,1152(sp)
1000cba8:	d9811a04 	addi	r6,sp,1128
1000cbac:	da812a15 	stw	r10,1192(sp)
1000cbb0:	000b8a40 	call	1000b8a4 <__sprint_r.part.0>
1000cbb4:	da812a17 	ldw	r10,1192(sp)
1000cbb8:	103e9b1e 	bne	r2,zero,1000c628 <__alt_data_end+0xf800c628>
1000cbbc:	d9411b17 	ldw	r5,1132(sp)
1000cbc0:	d8c11c17 	ldw	r3,1136(sp)
1000cbc4:	d811883a 	mov	r8,sp
1000cbc8:	28800044 	addi	r2,r5,1
1000cbcc:	003e5006 	br	1000c510 <__alt_data_end+0xf800c510>
1000cbd0:	182b883a 	mov	r21,r3
1000cbd4:	003ed006 	br	1000c718 <__alt_data_end+0xf800c718>
1000cbd8:	8029883a 	mov	r20,r16
1000cbdc:	003dc606 	br	1000c2f8 <__alt_data_end+0xf800c2f8>
1000cbe0:	d8c12317 	ldw	r3,1164(sp)
1000cbe4:	d9012517 	ldw	r4,1172(sp)
1000cbe8:	18800017 	ldw	r2,0(r3)
1000cbec:	18c00104 	addi	r3,r3,4
1000cbf0:	d8c12315 	stw	r3,1164(sp)
1000cbf4:	11000015 	stw	r4,0(r2)
1000cbf8:	003ba706 	br	1000ba98 <__alt_data_end+0xf800ba98>
1000cbfc:	d9012317 	ldw	r4,1164(sp)
1000cc00:	14c00017 	ldw	r19,0(r2)
1000cc04:	002b883a 	mov	r21,zero
1000cc08:	21000104 	addi	r4,r4,4
1000cc0c:	d9012315 	stw	r4,1164(sp)
1000cc10:	003d7906 	br	1000c1f8 <__alt_data_end+0xf800c1f8>
1000cc14:	d8c12317 	ldw	r3,1164(sp)
1000cc18:	002b883a 	mov	r21,zero
1000cc1c:	00800044 	movi	r2,1
1000cc20:	1cc00017 	ldw	r19,0(r3)
1000cc24:	18c00104 	addi	r3,r3,4
1000cc28:	d8c12315 	stw	r3,1164(sp)
1000cc2c:	9807883a 	mov	r3,r19
1000cc30:	003d4e06 	br	1000c16c <__alt_data_end+0xf800c16c>
1000cc34:	d8812317 	ldw	r2,1164(sp)
1000cc38:	002b883a 	mov	r21,zero
1000cc3c:	14c00017 	ldw	r19,0(r2)
1000cc40:	10800104 	addi	r2,r2,4
1000cc44:	d8812315 	stw	r2,1164(sp)
1000cc48:	9807883a 	mov	r3,r19
1000cc4c:	0005883a 	mov	r2,zero
1000cc50:	003d4606 	br	1000c16c <__alt_data_end+0xf800c16c>
1000cc54:	1cc00017 	ldw	r19,0(r3)
1000cc58:	d8c12317 	ldw	r3,1164(sp)
1000cc5c:	982bd7fa 	srai	r21,r19,31
1000cc60:	18c00104 	addi	r3,r3,4
1000cc64:	d8c12315 	stw	r3,1164(sp)
1000cc68:	a805883a 	mov	r2,r21
1000cc6c:	003c8406 	br	1000be80 <__alt_data_end+0xf800be80>
1000cc70:	01040074 	movhi	r4,4097
1000cc74:	2113d604 	addi	r4,r4,20312
1000cc78:	d9012615 	stw	r4,1176(sp)
1000cc7c:	003d0606 	br	1000c098 <__alt_data_end+0xf800c098>
1000cc80:	b9800043 	ldbu	r6,1(r23)
1000cc84:	94800814 	ori	r18,r18,32
1000cc88:	bdc00044 	addi	r23,r23,1
1000cc8c:	31803fcc 	andi	r6,r6,255
1000cc90:	3180201c 	xori	r6,r6,128
1000cc94:	31bfe004 	addi	r6,r6,-128
1000cc98:	003ba806 	br	1000bb3c <__alt_data_end+0xf800bb3c>
1000cc9c:	d8811e17 	ldw	r2,1144(sp)
1000cca0:	d8c12217 	ldw	r3,1160(sp)
1000cca4:	10e9c83a 	sub	r20,r2,r3
1000cca8:	003c9406 	br	1000befc <__alt_data_end+0xf800befc>
1000ccac:	da012a15 	stw	r8,1192(sp)
1000ccb0:	00046000 	call	10004600 <strlen>
1000ccb4:	1029883a 	mov	r20,r2
1000ccb8:	dd811d83 	ldbu	r22,1142(sp)
1000ccbc:	dcc12315 	stw	r19,1164(sp)
1000ccc0:	0021883a 	mov	r16,zero
1000ccc4:	da012a17 	ldw	r8,1192(sp)
1000ccc8:	003c8c06 	br	1000befc <__alt_data_end+0xf800befc>
1000cccc:	d9012117 	ldw	r4,1156(sp)
1000ccd0:	d9412017 	ldw	r5,1152(sp)
1000ccd4:	d9811a04 	addi	r6,sp,1128
1000ccd8:	000b8a40 	call	1000b8a4 <__sprint_r.part.0>
1000ccdc:	103e521e 	bne	r2,zero,1000c628 <__alt_data_end+0xf800c628>
1000cce0:	d9411b17 	ldw	r5,1132(sp)
1000cce4:	d8c11c17 	ldw	r3,1136(sp)
1000cce8:	d811883a 	mov	r8,sp
1000ccec:	28800044 	addi	r2,r5,1
1000ccf0:	003cce06 	br	1000c02c <__alt_data_end+0xf800c02c>
1000ccf4:	01440074 	movhi	r5,4097
1000ccf8:	2953da04 	addi	r5,r5,20328
1000ccfc:	d9412615 	stw	r5,1176(sp)
1000cd00:	d9411b17 	ldw	r5,1132(sp)
1000cd04:	29400044 	addi	r5,r5,1
1000cd08:	003cad06 	br	1000bfc0 <__alt_data_end+0xf800bfc0>
1000cd0c:	00800184 	movi	r2,6
1000cd10:	1400012e 	bgeu	r2,r16,1000cd18 <___vfiprintf_internal_r+0x1360>
1000cd14:	1021883a 	mov	r16,r2
1000cd18:	8029883a 	mov	r20,r16
1000cd1c:	802b883a 	mov	r21,r16
1000cd20:	80001c16 	blt	r16,zero,1000cd94 <___vfiprintf_internal_r+0x13dc>
1000cd24:	00c40074 	movhi	r3,4097
1000cd28:	18d37a04 	addi	r3,r3,19944
1000cd2c:	dcc12315 	stw	r19,1164(sp)
1000cd30:	d8c12215 	stw	r3,1160(sp)
1000cd34:	003cff06 	br	1000c134 <__alt_data_end+0xf800c134>
1000cd38:	d9411b17 	ldw	r5,1132(sp)
1000cd3c:	00840074 	movhi	r2,4097
1000cd40:	1093da04 	addi	r2,r2,20328
1000cd44:	d8812615 	stw	r2,1176(sp)
1000cd48:	29400044 	addi	r5,r5,1
1000cd4c:	003e6706 	br	1000c6ec <__alt_data_end+0xf800c6ec>
1000cd50:	d9012317 	ldw	r4,1164(sp)
1000cd54:	d9412517 	ldw	r5,1172(sp)
1000cd58:	20800017 	ldw	r2,0(r4)
1000cd5c:	21000104 	addi	r4,r4,4
1000cd60:	d9012315 	stw	r4,1164(sp)
1000cd64:	11400015 	stw	r5,0(r2)
1000cd68:	003b4b06 	br	1000ba98 <__alt_data_end+0xf800ba98>
1000cd6c:	8029883a 	mov	r20,r16
1000cd70:	dd811d83 	ldbu	r22,1142(sp)
1000cd74:	dcc12315 	stw	r19,1164(sp)
1000cd78:	0021883a 	mov	r16,zero
1000cd7c:	003c5f06 	br	1000befc <__alt_data_end+0xf800befc>
1000cd80:	01040074 	movhi	r4,4097
1000cd84:	2113d604 	addi	r4,r4,20312
1000cd88:	d9012615 	stw	r4,1176(sp)
1000cd8c:	1009883a 	mov	r4,r2
1000cd90:	003ea006 	br	1000c814 <__alt_data_end+0xf800c814>
1000cd94:	002b883a 	mov	r21,zero
1000cd98:	003fe206 	br	1000cd24 <__alt_data_end+0xf800cd24>
1000cd9c:	d9412317 	ldw	r5,1164(sp)
1000cda0:	b807883a 	mov	r3,r23
1000cda4:	102f883a 	mov	r23,r2
1000cda8:	2c000017 	ldw	r16,0(r5)
1000cdac:	29000104 	addi	r4,r5,4
1000cdb0:	d9012315 	stw	r4,1164(sp)
1000cdb4:	80000416 	blt	r16,zero,1000cdc8 <___vfiprintf_internal_r+0x1410>
1000cdb8:	19800047 	ldb	r6,1(r3)
1000cdbc:	003b5f06 	br	1000bb3c <__alt_data_end+0xf800bb3c>
1000cdc0:	043fffc4 	movi	r16,-1
1000cdc4:	003bef06 	br	1000bd84 <__alt_data_end+0xf800bd84>
1000cdc8:	043fffc4 	movi	r16,-1
1000cdcc:	19800047 	ldb	r6,1(r3)
1000cdd0:	003b5a06 	br	1000bb3c <__alt_data_end+0xf800bb3c>
1000cdd4:	282b883a 	mov	r21,r5
1000cdd8:	003cc706 	br	1000c0f8 <__alt_data_end+0xf800c0f8>

1000cddc <__vfiprintf_internal>:
1000cddc:	2007883a 	mov	r3,r4
1000cde0:	01040074 	movhi	r4,4097
1000cde4:	211a9704 	addi	r4,r4,27228
1000cde8:	21000017 	ldw	r4,0(r4)
1000cdec:	2805883a 	mov	r2,r5
1000cdf0:	300f883a 	mov	r7,r6
1000cdf4:	180b883a 	mov	r5,r3
1000cdf8:	100d883a 	mov	r6,r2
1000cdfc:	000b9b81 	jmpi	1000b9b8 <___vfiprintf_internal_r>

1000ce00 <_write_r>:
1000ce00:	defffd04 	addi	sp,sp,-12
1000ce04:	dc000015 	stw	r16,0(sp)
1000ce08:	040400b4 	movhi	r16,4098
1000ce0c:	dc400115 	stw	r17,4(sp)
1000ce10:	84216804 	addi	r16,r16,-31328
1000ce14:	2023883a 	mov	r17,r4
1000ce18:	2809883a 	mov	r4,r5
1000ce1c:	300b883a 	mov	r5,r6
1000ce20:	380d883a 	mov	r6,r7
1000ce24:	dfc00215 	stw	ra,8(sp)
1000ce28:	80000015 	stw	zero,0(r16)
1000ce2c:	0010bd80 	call	10010bd8 <write>
1000ce30:	00ffffc4 	movi	r3,-1
1000ce34:	10c00526 	beq	r2,r3,1000ce4c <_write_r+0x4c>
1000ce38:	dfc00217 	ldw	ra,8(sp)
1000ce3c:	dc400117 	ldw	r17,4(sp)
1000ce40:	dc000017 	ldw	r16,0(sp)
1000ce44:	dec00304 	addi	sp,sp,12
1000ce48:	f800283a 	ret
1000ce4c:	80c00017 	ldw	r3,0(r16)
1000ce50:	183ff926 	beq	r3,zero,1000ce38 <__alt_data_end+0xf800ce38>
1000ce54:	88c00015 	stw	r3,0(r17)
1000ce58:	003ff706 	br	1000ce38 <__alt_data_end+0xf800ce38>

1000ce5c <_close_r>:
1000ce5c:	defffd04 	addi	sp,sp,-12
1000ce60:	dc000015 	stw	r16,0(sp)
1000ce64:	040400b4 	movhi	r16,4098
1000ce68:	dc400115 	stw	r17,4(sp)
1000ce6c:	84216804 	addi	r16,r16,-31328
1000ce70:	2023883a 	mov	r17,r4
1000ce74:	2809883a 	mov	r4,r5
1000ce78:	dfc00215 	stw	ra,8(sp)
1000ce7c:	80000015 	stw	zero,0(r16)
1000ce80:	00102f40 	call	100102f4 <close>
1000ce84:	00ffffc4 	movi	r3,-1
1000ce88:	10c00526 	beq	r2,r3,1000cea0 <_close_r+0x44>
1000ce8c:	dfc00217 	ldw	ra,8(sp)
1000ce90:	dc400117 	ldw	r17,4(sp)
1000ce94:	dc000017 	ldw	r16,0(sp)
1000ce98:	dec00304 	addi	sp,sp,12
1000ce9c:	f800283a 	ret
1000cea0:	80c00017 	ldw	r3,0(r16)
1000cea4:	183ff926 	beq	r3,zero,1000ce8c <__alt_data_end+0xf800ce8c>
1000cea8:	88c00015 	stw	r3,0(r17)
1000ceac:	003ff706 	br	1000ce8c <__alt_data_end+0xf800ce8c>

1000ceb0 <_calloc_r>:
1000ceb0:	defffe04 	addi	sp,sp,-8
1000ceb4:	dc000015 	stw	r16,0(sp)
1000ceb8:	2021883a 	mov	r16,r4
1000cebc:	2809883a 	mov	r4,r5
1000cec0:	300b883a 	mov	r5,r6
1000cec4:	dfc00115 	stw	ra,4(sp)
1000cec8:	00030800 	call	10003080 <__mulsi3>
1000cecc:	8009883a 	mov	r4,r16
1000ced0:	100b883a 	mov	r5,r2
1000ced4:	00095040 	call	10009504 <_malloc_r>
1000ced8:	1021883a 	mov	r16,r2
1000cedc:	10002826 	beq	r2,zero,1000cf80 <_calloc_r+0xd0>
1000cee0:	11bfff17 	ldw	r6,-4(r2)
1000cee4:	00bfff04 	movi	r2,-4
1000cee8:	00c00904 	movi	r3,36
1000ceec:	308c703a 	and	r6,r6,r2
1000cef0:	308d883a 	add	r6,r6,r2
1000cef4:	19801436 	bltu	r3,r6,1000cf48 <_calloc_r+0x98>
1000cef8:	008004c4 	movi	r2,19
1000cefc:	11800936 	bltu	r2,r6,1000cf24 <_calloc_r+0x74>
1000cf00:	8005883a 	mov	r2,r16
1000cf04:	10000015 	stw	zero,0(r2)
1000cf08:	10000115 	stw	zero,4(r2)
1000cf0c:	10000215 	stw	zero,8(r2)
1000cf10:	8005883a 	mov	r2,r16
1000cf14:	dfc00117 	ldw	ra,4(sp)
1000cf18:	dc000017 	ldw	r16,0(sp)
1000cf1c:	dec00204 	addi	sp,sp,8
1000cf20:	f800283a 	ret
1000cf24:	80000015 	stw	zero,0(r16)
1000cf28:	80000115 	stw	zero,4(r16)
1000cf2c:	008006c4 	movi	r2,27
1000cf30:	11800d2e 	bgeu	r2,r6,1000cf68 <_calloc_r+0xb8>
1000cf34:	80000215 	stw	zero,8(r16)
1000cf38:	80000315 	stw	zero,12(r16)
1000cf3c:	30c00c26 	beq	r6,r3,1000cf70 <_calloc_r+0xc0>
1000cf40:	80800404 	addi	r2,r16,16
1000cf44:	003fef06 	br	1000cf04 <__alt_data_end+0xf800cf04>
1000cf48:	8009883a 	mov	r4,r16
1000cf4c:	000b883a 	mov	r5,zero
1000cf50:	0009ef00 	call	10009ef0 <memset>
1000cf54:	8005883a 	mov	r2,r16
1000cf58:	dfc00117 	ldw	ra,4(sp)
1000cf5c:	dc000017 	ldw	r16,0(sp)
1000cf60:	dec00204 	addi	sp,sp,8
1000cf64:	f800283a 	ret
1000cf68:	80800204 	addi	r2,r16,8
1000cf6c:	003fe506 	br	1000cf04 <__alt_data_end+0xf800cf04>
1000cf70:	80000415 	stw	zero,16(r16)
1000cf74:	80800604 	addi	r2,r16,24
1000cf78:	80000515 	stw	zero,20(r16)
1000cf7c:	003fe106 	br	1000cf04 <__alt_data_end+0xf800cf04>
1000cf80:	0005883a 	mov	r2,zero
1000cf84:	003fe306 	br	1000cf14 <__alt_data_end+0xf800cf14>

1000cf88 <_fclose_r>:
1000cf88:	28003226 	beq	r5,zero,1000d054 <_fclose_r+0xcc>
1000cf8c:	defffc04 	addi	sp,sp,-16
1000cf90:	dc400115 	stw	r17,4(sp)
1000cf94:	2023883a 	mov	r17,r4
1000cf98:	dc000015 	stw	r16,0(sp)
1000cf9c:	dfc00315 	stw	ra,12(sp)
1000cfa0:	dc800215 	stw	r18,8(sp)
1000cfa4:	2821883a 	mov	r16,r5
1000cfa8:	00088040 	call	10008804 <__sfp_lock_acquire>
1000cfac:	88000226 	beq	r17,zero,1000cfb8 <_fclose_r+0x30>
1000cfb0:	88800e17 	ldw	r2,56(r17)
1000cfb4:	10002926 	beq	r2,zero,1000d05c <_fclose_r+0xd4>
1000cfb8:	8080030f 	ldh	r2,12(r16)
1000cfbc:	10002226 	beq	r2,zero,1000d048 <_fclose_r+0xc0>
1000cfc0:	8809883a 	mov	r4,r17
1000cfc4:	800b883a 	mov	r5,r16
1000cfc8:	00082380 	call	10008238 <_fflush_r>
1000cfcc:	1025883a 	mov	r18,r2
1000cfd0:	80800b17 	ldw	r2,44(r16)
1000cfd4:	10000426 	beq	r2,zero,1000cfe8 <_fclose_r+0x60>
1000cfd8:	81400717 	ldw	r5,28(r16)
1000cfdc:	8809883a 	mov	r4,r17
1000cfe0:	103ee83a 	callr	r2
1000cfe4:	10002616 	blt	r2,zero,1000d080 <_fclose_r+0xf8>
1000cfe8:	8080030b 	ldhu	r2,12(r16)
1000cfec:	1080200c 	andi	r2,r2,128
1000cff0:	10001f1e 	bne	r2,zero,1000d070 <_fclose_r+0xe8>
1000cff4:	81400c17 	ldw	r5,48(r16)
1000cff8:	28000526 	beq	r5,zero,1000d010 <_fclose_r+0x88>
1000cffc:	80801004 	addi	r2,r16,64
1000d000:	28800226 	beq	r5,r2,1000d00c <_fclose_r+0x84>
1000d004:	8809883a 	mov	r4,r17
1000d008:	00089680 	call	10008968 <_free_r>
1000d00c:	80000c15 	stw	zero,48(r16)
1000d010:	81401117 	ldw	r5,68(r16)
1000d014:	28000326 	beq	r5,zero,1000d024 <_fclose_r+0x9c>
1000d018:	8809883a 	mov	r4,r17
1000d01c:	00089680 	call	10008968 <_free_r>
1000d020:	80001115 	stw	zero,68(r16)
1000d024:	8000030d 	sth	zero,12(r16)
1000d028:	00088080 	call	10008808 <__sfp_lock_release>
1000d02c:	9005883a 	mov	r2,r18
1000d030:	dfc00317 	ldw	ra,12(sp)
1000d034:	dc800217 	ldw	r18,8(sp)
1000d038:	dc400117 	ldw	r17,4(sp)
1000d03c:	dc000017 	ldw	r16,0(sp)
1000d040:	dec00404 	addi	sp,sp,16
1000d044:	f800283a 	ret
1000d048:	00088080 	call	10008808 <__sfp_lock_release>
1000d04c:	0005883a 	mov	r2,zero
1000d050:	003ff706 	br	1000d030 <__alt_data_end+0xf800d030>
1000d054:	0005883a 	mov	r2,zero
1000d058:	f800283a 	ret
1000d05c:	8809883a 	mov	r4,r17
1000d060:	00087f40 	call	100087f4 <__sinit>
1000d064:	8080030f 	ldh	r2,12(r16)
1000d068:	103fd51e 	bne	r2,zero,1000cfc0 <__alt_data_end+0xf800cfc0>
1000d06c:	003ff606 	br	1000d048 <__alt_data_end+0xf800d048>
1000d070:	81400417 	ldw	r5,16(r16)
1000d074:	8809883a 	mov	r4,r17
1000d078:	00089680 	call	10008968 <_free_r>
1000d07c:	003fdd06 	br	1000cff4 <__alt_data_end+0xf800cff4>
1000d080:	04bfffc4 	movi	r18,-1
1000d084:	003fd806 	br	1000cfe8 <__alt_data_end+0xf800cfe8>

1000d088 <fclose>:
1000d088:	00840074 	movhi	r2,4097
1000d08c:	109a9704 	addi	r2,r2,27228
1000d090:	200b883a 	mov	r5,r4
1000d094:	11000017 	ldw	r4,0(r2)
1000d098:	000cf881 	jmpi	1000cf88 <_fclose_r>

1000d09c <_fputwc_r>:
1000d09c:	3080030b 	ldhu	r2,12(r6)
1000d0a0:	defff804 	addi	sp,sp,-32
1000d0a4:	dcc00415 	stw	r19,16(sp)
1000d0a8:	dc800315 	stw	r18,12(sp)
1000d0ac:	dc000115 	stw	r16,4(sp)
1000d0b0:	dfc00715 	stw	ra,28(sp)
1000d0b4:	dd400615 	stw	r21,24(sp)
1000d0b8:	dd000515 	stw	r20,20(sp)
1000d0bc:	dc400215 	stw	r17,8(sp)
1000d0c0:	10c8000c 	andi	r3,r2,8192
1000d0c4:	3021883a 	mov	r16,r6
1000d0c8:	2027883a 	mov	r19,r4
1000d0cc:	2825883a 	mov	r18,r5
1000d0d0:	1800051e 	bne	r3,zero,1000d0e8 <_fputwc_r+0x4c>
1000d0d4:	30c01917 	ldw	r3,100(r6)
1000d0d8:	10880014 	ori	r2,r2,8192
1000d0dc:	3080030d 	sth	r2,12(r6)
1000d0e0:	18880014 	ori	r2,r3,8192
1000d0e4:	30801915 	stw	r2,100(r6)
1000d0e8:	00092f40 	call	100092f4 <__locale_mb_cur_max>
1000d0ec:	00c00044 	movi	r3,1
1000d0f0:	10c03e26 	beq	r2,r3,1000d1ec <_fputwc_r+0x150>
1000d0f4:	9809883a 	mov	r4,r19
1000d0f8:	d80b883a 	mov	r5,sp
1000d0fc:	900d883a 	mov	r6,r18
1000d100:	81c01704 	addi	r7,r16,92
1000d104:	000d54c0 	call	1000d54c <_wcrtomb_r>
1000d108:	1029883a 	mov	r20,r2
1000d10c:	00bfffc4 	movi	r2,-1
1000d110:	a0802026 	beq	r20,r2,1000d194 <_fputwc_r+0xf8>
1000d114:	d9400003 	ldbu	r5,0(sp)
1000d118:	a0001c26 	beq	r20,zero,1000d18c <_fputwc_r+0xf0>
1000d11c:	0023883a 	mov	r17,zero
1000d120:	05400284 	movi	r21,10
1000d124:	00000906 	br	1000d14c <_fputwc_r+0xb0>
1000d128:	80800017 	ldw	r2,0(r16)
1000d12c:	11400005 	stb	r5,0(r2)
1000d130:	80c00017 	ldw	r3,0(r16)
1000d134:	18c00044 	addi	r3,r3,1
1000d138:	80c00015 	stw	r3,0(r16)
1000d13c:	8c400044 	addi	r17,r17,1
1000d140:	dc45883a 	add	r2,sp,r17
1000d144:	8d00112e 	bgeu	r17,r20,1000d18c <_fputwc_r+0xf0>
1000d148:	11400003 	ldbu	r5,0(r2)
1000d14c:	80c00217 	ldw	r3,8(r16)
1000d150:	18ffffc4 	addi	r3,r3,-1
1000d154:	80c00215 	stw	r3,8(r16)
1000d158:	183ff30e 	bge	r3,zero,1000d128 <__alt_data_end+0xf800d128>
1000d15c:	80800617 	ldw	r2,24(r16)
1000d160:	18801916 	blt	r3,r2,1000d1c8 <_fputwc_r+0x12c>
1000d164:	80800017 	ldw	r2,0(r16)
1000d168:	11400005 	stb	r5,0(r2)
1000d16c:	80800017 	ldw	r2,0(r16)
1000d170:	10c00003 	ldbu	r3,0(r2)
1000d174:	10800044 	addi	r2,r2,1
1000d178:	1d402326 	beq	r3,r21,1000d208 <_fputwc_r+0x16c>
1000d17c:	80800015 	stw	r2,0(r16)
1000d180:	8c400044 	addi	r17,r17,1
1000d184:	dc45883a 	add	r2,sp,r17
1000d188:	8d3fef36 	bltu	r17,r20,1000d148 <__alt_data_end+0xf800d148>
1000d18c:	9005883a 	mov	r2,r18
1000d190:	00000406 	br	1000d1a4 <_fputwc_r+0x108>
1000d194:	80c0030b 	ldhu	r3,12(r16)
1000d198:	a005883a 	mov	r2,r20
1000d19c:	18c01014 	ori	r3,r3,64
1000d1a0:	80c0030d 	sth	r3,12(r16)
1000d1a4:	dfc00717 	ldw	ra,28(sp)
1000d1a8:	dd400617 	ldw	r21,24(sp)
1000d1ac:	dd000517 	ldw	r20,20(sp)
1000d1b0:	dcc00417 	ldw	r19,16(sp)
1000d1b4:	dc800317 	ldw	r18,12(sp)
1000d1b8:	dc400217 	ldw	r17,8(sp)
1000d1bc:	dc000117 	ldw	r16,4(sp)
1000d1c0:	dec00804 	addi	sp,sp,32
1000d1c4:	f800283a 	ret
1000d1c8:	9809883a 	mov	r4,r19
1000d1cc:	29403fcc 	andi	r5,r5,255
1000d1d0:	800d883a 	mov	r6,r16
1000d1d4:	000d3dc0 	call	1000d3dc <__swbuf_r>
1000d1d8:	10bfffe0 	cmpeqi	r2,r2,-1
1000d1dc:	10803fcc 	andi	r2,r2,255
1000d1e0:	103fd626 	beq	r2,zero,1000d13c <__alt_data_end+0xf800d13c>
1000d1e4:	00bfffc4 	movi	r2,-1
1000d1e8:	003fee06 	br	1000d1a4 <__alt_data_end+0xf800d1a4>
1000d1ec:	90ffffc4 	addi	r3,r18,-1
1000d1f0:	01003f84 	movi	r4,254
1000d1f4:	20ffbf36 	bltu	r4,r3,1000d0f4 <__alt_data_end+0xf800d0f4>
1000d1f8:	900b883a 	mov	r5,r18
1000d1fc:	dc800005 	stb	r18,0(sp)
1000d200:	1029883a 	mov	r20,r2
1000d204:	003fc506 	br	1000d11c <__alt_data_end+0xf800d11c>
1000d208:	9809883a 	mov	r4,r19
1000d20c:	a80b883a 	mov	r5,r21
1000d210:	800d883a 	mov	r6,r16
1000d214:	000d3dc0 	call	1000d3dc <__swbuf_r>
1000d218:	10bfffe0 	cmpeqi	r2,r2,-1
1000d21c:	003fef06 	br	1000d1dc <__alt_data_end+0xf800d1dc>

1000d220 <fputwc>:
1000d220:	defffc04 	addi	sp,sp,-16
1000d224:	dc000115 	stw	r16,4(sp)
1000d228:	04040074 	movhi	r16,4097
1000d22c:	841a9704 	addi	r16,r16,27228
1000d230:	dc400215 	stw	r17,8(sp)
1000d234:	2023883a 	mov	r17,r4
1000d238:	81000017 	ldw	r4,0(r16)
1000d23c:	dfc00315 	stw	ra,12(sp)
1000d240:	280d883a 	mov	r6,r5
1000d244:	20000626 	beq	r4,zero,1000d260 <fputwc+0x40>
1000d248:	20800e17 	ldw	r2,56(r4)
1000d24c:	1000041e 	bne	r2,zero,1000d260 <fputwc+0x40>
1000d250:	d9400015 	stw	r5,0(sp)
1000d254:	00087f40 	call	100087f4 <__sinit>
1000d258:	81000017 	ldw	r4,0(r16)
1000d25c:	d9800017 	ldw	r6,0(sp)
1000d260:	880b883a 	mov	r5,r17
1000d264:	dfc00317 	ldw	ra,12(sp)
1000d268:	dc400217 	ldw	r17,8(sp)
1000d26c:	dc000117 	ldw	r16,4(sp)
1000d270:	dec00404 	addi	sp,sp,16
1000d274:	000d09c1 	jmpi	1000d09c <_fputwc_r>

1000d278 <_fstat_r>:
1000d278:	defffd04 	addi	sp,sp,-12
1000d27c:	dc000015 	stw	r16,0(sp)
1000d280:	040400b4 	movhi	r16,4098
1000d284:	dc400115 	stw	r17,4(sp)
1000d288:	84216804 	addi	r16,r16,-31328
1000d28c:	2023883a 	mov	r17,r4
1000d290:	2809883a 	mov	r4,r5
1000d294:	300b883a 	mov	r5,r6
1000d298:	dfc00215 	stw	ra,8(sp)
1000d29c:	80000015 	stw	zero,0(r16)
1000d2a0:	00104480 	call	10010448 <fstat>
1000d2a4:	00ffffc4 	movi	r3,-1
1000d2a8:	10c00526 	beq	r2,r3,1000d2c0 <_fstat_r+0x48>
1000d2ac:	dfc00217 	ldw	ra,8(sp)
1000d2b0:	dc400117 	ldw	r17,4(sp)
1000d2b4:	dc000017 	ldw	r16,0(sp)
1000d2b8:	dec00304 	addi	sp,sp,12
1000d2bc:	f800283a 	ret
1000d2c0:	80c00017 	ldw	r3,0(r16)
1000d2c4:	183ff926 	beq	r3,zero,1000d2ac <__alt_data_end+0xf800d2ac>
1000d2c8:	88c00015 	stw	r3,0(r17)
1000d2cc:	003ff706 	br	1000d2ac <__alt_data_end+0xf800d2ac>

1000d2d0 <_isatty_r>:
1000d2d0:	defffd04 	addi	sp,sp,-12
1000d2d4:	dc000015 	stw	r16,0(sp)
1000d2d8:	040400b4 	movhi	r16,4098
1000d2dc:	dc400115 	stw	r17,4(sp)
1000d2e0:	84216804 	addi	r16,r16,-31328
1000d2e4:	2023883a 	mov	r17,r4
1000d2e8:	2809883a 	mov	r4,r5
1000d2ec:	dfc00215 	stw	ra,8(sp)
1000d2f0:	80000015 	stw	zero,0(r16)
1000d2f4:	00105500 	call	10010550 <isatty>
1000d2f8:	00ffffc4 	movi	r3,-1
1000d2fc:	10c00526 	beq	r2,r3,1000d314 <_isatty_r+0x44>
1000d300:	dfc00217 	ldw	ra,8(sp)
1000d304:	dc400117 	ldw	r17,4(sp)
1000d308:	dc000017 	ldw	r16,0(sp)
1000d30c:	dec00304 	addi	sp,sp,12
1000d310:	f800283a 	ret
1000d314:	80c00017 	ldw	r3,0(r16)
1000d318:	183ff926 	beq	r3,zero,1000d300 <__alt_data_end+0xf800d300>
1000d31c:	88c00015 	stw	r3,0(r17)
1000d320:	003ff706 	br	1000d300 <__alt_data_end+0xf800d300>

1000d324 <_lseek_r>:
1000d324:	defffd04 	addi	sp,sp,-12
1000d328:	dc000015 	stw	r16,0(sp)
1000d32c:	040400b4 	movhi	r16,4098
1000d330:	dc400115 	stw	r17,4(sp)
1000d334:	84216804 	addi	r16,r16,-31328
1000d338:	2023883a 	mov	r17,r4
1000d33c:	2809883a 	mov	r4,r5
1000d340:	300b883a 	mov	r5,r6
1000d344:	380d883a 	mov	r6,r7
1000d348:	dfc00215 	stw	ra,8(sp)
1000d34c:	80000015 	stw	zero,0(r16)
1000d350:	00107380 	call	10010738 <lseek>
1000d354:	00ffffc4 	movi	r3,-1
1000d358:	10c00526 	beq	r2,r3,1000d370 <_lseek_r+0x4c>
1000d35c:	dfc00217 	ldw	ra,8(sp)
1000d360:	dc400117 	ldw	r17,4(sp)
1000d364:	dc000017 	ldw	r16,0(sp)
1000d368:	dec00304 	addi	sp,sp,12
1000d36c:	f800283a 	ret
1000d370:	80c00017 	ldw	r3,0(r16)
1000d374:	183ff926 	beq	r3,zero,1000d35c <__alt_data_end+0xf800d35c>
1000d378:	88c00015 	stw	r3,0(r17)
1000d37c:	003ff706 	br	1000d35c <__alt_data_end+0xf800d35c>

1000d380 <_read_r>:
1000d380:	defffd04 	addi	sp,sp,-12
1000d384:	dc000015 	stw	r16,0(sp)
1000d388:	040400b4 	movhi	r16,4098
1000d38c:	dc400115 	stw	r17,4(sp)
1000d390:	84216804 	addi	r16,r16,-31328
1000d394:	2023883a 	mov	r17,r4
1000d398:	2809883a 	mov	r4,r5
1000d39c:	300b883a 	mov	r5,r6
1000d3a0:	380d883a 	mov	r6,r7
1000d3a4:	dfc00215 	stw	ra,8(sp)
1000d3a8:	80000015 	stw	zero,0(r16)
1000d3ac:	00109240 	call	10010924 <read>
1000d3b0:	00ffffc4 	movi	r3,-1
1000d3b4:	10c00526 	beq	r2,r3,1000d3cc <_read_r+0x4c>
1000d3b8:	dfc00217 	ldw	ra,8(sp)
1000d3bc:	dc400117 	ldw	r17,4(sp)
1000d3c0:	dc000017 	ldw	r16,0(sp)
1000d3c4:	dec00304 	addi	sp,sp,12
1000d3c8:	f800283a 	ret
1000d3cc:	80c00017 	ldw	r3,0(r16)
1000d3d0:	183ff926 	beq	r3,zero,1000d3b8 <__alt_data_end+0xf800d3b8>
1000d3d4:	88c00015 	stw	r3,0(r17)
1000d3d8:	003ff706 	br	1000d3b8 <__alt_data_end+0xf800d3b8>

1000d3dc <__swbuf_r>:
1000d3dc:	defffc04 	addi	sp,sp,-16
1000d3e0:	dc800215 	stw	r18,8(sp)
1000d3e4:	dc400115 	stw	r17,4(sp)
1000d3e8:	dc000015 	stw	r16,0(sp)
1000d3ec:	dfc00315 	stw	ra,12(sp)
1000d3f0:	2025883a 	mov	r18,r4
1000d3f4:	2823883a 	mov	r17,r5
1000d3f8:	3021883a 	mov	r16,r6
1000d3fc:	20000226 	beq	r4,zero,1000d408 <__swbuf_r+0x2c>
1000d400:	20800e17 	ldw	r2,56(r4)
1000d404:	10004126 	beq	r2,zero,1000d50c <__swbuf_r+0x130>
1000d408:	80c00617 	ldw	r3,24(r16)
1000d40c:	8180030b 	ldhu	r6,12(r16)
1000d410:	80c00215 	stw	r3,8(r16)
1000d414:	30c0020c 	andi	r3,r6,8
1000d418:	18003526 	beq	r3,zero,1000d4f0 <__swbuf_r+0x114>
1000d41c:	80c00417 	ldw	r3,16(r16)
1000d420:	18003326 	beq	r3,zero,1000d4f0 <__swbuf_r+0x114>
1000d424:	3088000c 	andi	r2,r6,8192
1000d428:	8c403fcc 	andi	r17,r17,255
1000d42c:	10001726 	beq	r2,zero,1000d48c <__swbuf_r+0xb0>
1000d430:	80800017 	ldw	r2,0(r16)
1000d434:	81000517 	ldw	r4,20(r16)
1000d438:	10c7c83a 	sub	r3,r2,r3
1000d43c:	19001d0e 	bge	r3,r4,1000d4b4 <__swbuf_r+0xd8>
1000d440:	18c00044 	addi	r3,r3,1
1000d444:	81400217 	ldw	r5,8(r16)
1000d448:	11000044 	addi	r4,r2,1
1000d44c:	81000015 	stw	r4,0(r16)
1000d450:	297fffc4 	addi	r5,r5,-1
1000d454:	81400215 	stw	r5,8(r16)
1000d458:	14400005 	stb	r17,0(r2)
1000d45c:	80800517 	ldw	r2,20(r16)
1000d460:	10c01d26 	beq	r2,r3,1000d4d8 <__swbuf_r+0xfc>
1000d464:	8080030b 	ldhu	r2,12(r16)
1000d468:	1080004c 	andi	r2,r2,1
1000d46c:	1000181e 	bne	r2,zero,1000d4d0 <__swbuf_r+0xf4>
1000d470:	8805883a 	mov	r2,r17
1000d474:	dfc00317 	ldw	ra,12(sp)
1000d478:	dc800217 	ldw	r18,8(sp)
1000d47c:	dc400117 	ldw	r17,4(sp)
1000d480:	dc000017 	ldw	r16,0(sp)
1000d484:	dec00404 	addi	sp,sp,16
1000d488:	f800283a 	ret
1000d48c:	81001917 	ldw	r4,100(r16)
1000d490:	00b7ffc4 	movi	r2,-8193
1000d494:	31880014 	ori	r6,r6,8192
1000d498:	2084703a 	and	r2,r4,r2
1000d49c:	80801915 	stw	r2,100(r16)
1000d4a0:	80800017 	ldw	r2,0(r16)
1000d4a4:	81000517 	ldw	r4,20(r16)
1000d4a8:	8180030d 	sth	r6,12(r16)
1000d4ac:	10c7c83a 	sub	r3,r2,r3
1000d4b0:	193fe316 	blt	r3,r4,1000d440 <__alt_data_end+0xf800d440>
1000d4b4:	9009883a 	mov	r4,r18
1000d4b8:	800b883a 	mov	r5,r16
1000d4bc:	00082380 	call	10008238 <_fflush_r>
1000d4c0:	1000091e 	bne	r2,zero,1000d4e8 <__swbuf_r+0x10c>
1000d4c4:	80800017 	ldw	r2,0(r16)
1000d4c8:	00c00044 	movi	r3,1
1000d4cc:	003fdd06 	br	1000d444 <__alt_data_end+0xf800d444>
1000d4d0:	00800284 	movi	r2,10
1000d4d4:	88bfe61e 	bne	r17,r2,1000d470 <__alt_data_end+0xf800d470>
1000d4d8:	9009883a 	mov	r4,r18
1000d4dc:	800b883a 	mov	r5,r16
1000d4e0:	00082380 	call	10008238 <_fflush_r>
1000d4e4:	103fe226 	beq	r2,zero,1000d470 <__alt_data_end+0xf800d470>
1000d4e8:	00bfffc4 	movi	r2,-1
1000d4ec:	003fe106 	br	1000d474 <__alt_data_end+0xf800d474>
1000d4f0:	9009883a 	mov	r4,r18
1000d4f4:	800b883a 	mov	r5,r16
1000d4f8:	00067b80 	call	100067b8 <__swsetup_r>
1000d4fc:	1000051e 	bne	r2,zero,1000d514 <__swbuf_r+0x138>
1000d500:	8180030b 	ldhu	r6,12(r16)
1000d504:	80c00417 	ldw	r3,16(r16)
1000d508:	003fc606 	br	1000d424 <__alt_data_end+0xf800d424>
1000d50c:	00087f40 	call	100087f4 <__sinit>
1000d510:	003fbd06 	br	1000d408 <__alt_data_end+0xf800d408>
1000d514:	80c0030b 	ldhu	r3,12(r16)
1000d518:	00bfffc4 	movi	r2,-1
1000d51c:	18c01014 	ori	r3,r3,64
1000d520:	80c0030d 	sth	r3,12(r16)
1000d524:	00c00244 	movi	r3,9
1000d528:	90c00015 	stw	r3,0(r18)
1000d52c:	003fd106 	br	1000d474 <__alt_data_end+0xf800d474>

1000d530 <__swbuf>:
1000d530:	00c40074 	movhi	r3,4097
1000d534:	18da9704 	addi	r3,r3,27228
1000d538:	2005883a 	mov	r2,r4
1000d53c:	19000017 	ldw	r4,0(r3)
1000d540:	280d883a 	mov	r6,r5
1000d544:	100b883a 	mov	r5,r2
1000d548:	000d3dc1 	jmpi	1000d3dc <__swbuf_r>

1000d54c <_wcrtomb_r>:
1000d54c:	defff604 	addi	sp,sp,-40
1000d550:	00840074 	movhi	r2,4097
1000d554:	dc800815 	stw	r18,32(sp)
1000d558:	dc400715 	stw	r17,28(sp)
1000d55c:	dc000615 	stw	r16,24(sp)
1000d560:	109a9b04 	addi	r2,r2,27244
1000d564:	dfc00915 	stw	ra,36(sp)
1000d568:	2021883a 	mov	r16,r4
1000d56c:	3823883a 	mov	r17,r7
1000d570:	14800017 	ldw	r18,0(r2)
1000d574:	28001426 	beq	r5,zero,1000d5c8 <_wcrtomb_r+0x7c>
1000d578:	d9400415 	stw	r5,16(sp)
1000d57c:	d9800515 	stw	r6,20(sp)
1000d580:	00092e80 	call	100092e8 <__locale_charset>
1000d584:	d9400417 	ldw	r5,16(sp)
1000d588:	d9800517 	ldw	r6,20(sp)
1000d58c:	8009883a 	mov	r4,r16
1000d590:	dc400015 	stw	r17,0(sp)
1000d594:	100f883a 	mov	r7,r2
1000d598:	903ee83a 	callr	r18
1000d59c:	00ffffc4 	movi	r3,-1
1000d5a0:	10c0031e 	bne	r2,r3,1000d5b0 <_wcrtomb_r+0x64>
1000d5a4:	88000015 	stw	zero,0(r17)
1000d5a8:	00c02284 	movi	r3,138
1000d5ac:	80c00015 	stw	r3,0(r16)
1000d5b0:	dfc00917 	ldw	ra,36(sp)
1000d5b4:	dc800817 	ldw	r18,32(sp)
1000d5b8:	dc400717 	ldw	r17,28(sp)
1000d5bc:	dc000617 	ldw	r16,24(sp)
1000d5c0:	dec00a04 	addi	sp,sp,40
1000d5c4:	f800283a 	ret
1000d5c8:	00092e80 	call	100092e8 <__locale_charset>
1000d5cc:	8009883a 	mov	r4,r16
1000d5d0:	dc400015 	stw	r17,0(sp)
1000d5d4:	d9400104 	addi	r5,sp,4
1000d5d8:	000d883a 	mov	r6,zero
1000d5dc:	100f883a 	mov	r7,r2
1000d5e0:	903ee83a 	callr	r18
1000d5e4:	003fed06 	br	1000d59c <__alt_data_end+0xf800d59c>

1000d5e8 <wcrtomb>:
1000d5e8:	defff504 	addi	sp,sp,-44
1000d5ec:	dc400515 	stw	r17,20(sp)
1000d5f0:	dc000415 	stw	r16,16(sp)
1000d5f4:	dfc00a15 	stw	ra,40(sp)
1000d5f8:	dd400915 	stw	r21,36(sp)
1000d5fc:	dd000815 	stw	r20,32(sp)
1000d600:	dcc00715 	stw	r19,28(sp)
1000d604:	dc800615 	stw	r18,24(sp)
1000d608:	2021883a 	mov	r16,r4
1000d60c:	3023883a 	mov	r17,r6
1000d610:	20001d26 	beq	r4,zero,1000d688 <wcrtomb+0xa0>
1000d614:	04840074 	movhi	r18,4097
1000d618:	949a9704 	addi	r18,r18,27228
1000d61c:	00840074 	movhi	r2,4097
1000d620:	95400017 	ldw	r21,0(r18)
1000d624:	109a9b04 	addi	r2,r2,27244
1000d628:	15000017 	ldw	r20,0(r2)
1000d62c:	2827883a 	mov	r19,r5
1000d630:	00092e80 	call	100092e8 <__locale_charset>
1000d634:	a809883a 	mov	r4,r21
1000d638:	dc400015 	stw	r17,0(sp)
1000d63c:	800b883a 	mov	r5,r16
1000d640:	980d883a 	mov	r6,r19
1000d644:	100f883a 	mov	r7,r2
1000d648:	a03ee83a 	callr	r20
1000d64c:	00ffffc4 	movi	r3,-1
1000d650:	10c0041e 	bne	r2,r3,1000d664 <wcrtomb+0x7c>
1000d654:	90c00017 	ldw	r3,0(r18)
1000d658:	01002284 	movi	r4,138
1000d65c:	88000015 	stw	zero,0(r17)
1000d660:	19000015 	stw	r4,0(r3)
1000d664:	dfc00a17 	ldw	ra,40(sp)
1000d668:	dd400917 	ldw	r21,36(sp)
1000d66c:	dd000817 	ldw	r20,32(sp)
1000d670:	dcc00717 	ldw	r19,28(sp)
1000d674:	dc800617 	ldw	r18,24(sp)
1000d678:	dc400517 	ldw	r17,20(sp)
1000d67c:	dc000417 	ldw	r16,16(sp)
1000d680:	dec00b04 	addi	sp,sp,44
1000d684:	f800283a 	ret
1000d688:	04840074 	movhi	r18,4097
1000d68c:	949a9704 	addi	r18,r18,27228
1000d690:	00840074 	movhi	r2,4097
1000d694:	94c00017 	ldw	r19,0(r18)
1000d698:	109a9b04 	addi	r2,r2,27244
1000d69c:	14000017 	ldw	r16,0(r2)
1000d6a0:	00092e80 	call	100092e8 <__locale_charset>
1000d6a4:	9809883a 	mov	r4,r19
1000d6a8:	dc400015 	stw	r17,0(sp)
1000d6ac:	d9400104 	addi	r5,sp,4
1000d6b0:	000d883a 	mov	r6,zero
1000d6b4:	100f883a 	mov	r7,r2
1000d6b8:	803ee83a 	callr	r16
1000d6bc:	003fe306 	br	1000d64c <__alt_data_end+0xf800d64c>

1000d6c0 <__ascii_wctomb>:
1000d6c0:	28000526 	beq	r5,zero,1000d6d8 <__ascii_wctomb+0x18>
1000d6c4:	00803fc4 	movi	r2,255
1000d6c8:	11800536 	bltu	r2,r6,1000d6e0 <__ascii_wctomb+0x20>
1000d6cc:	29800005 	stb	r6,0(r5)
1000d6d0:	00800044 	movi	r2,1
1000d6d4:	f800283a 	ret
1000d6d8:	0005883a 	mov	r2,zero
1000d6dc:	f800283a 	ret
1000d6e0:	00802284 	movi	r2,138
1000d6e4:	20800015 	stw	r2,0(r4)
1000d6e8:	00bfffc4 	movi	r2,-1
1000d6ec:	f800283a 	ret

1000d6f0 <_wctomb_r>:
1000d6f0:	00840074 	movhi	r2,4097
1000d6f4:	defff904 	addi	sp,sp,-28
1000d6f8:	109a9b04 	addi	r2,r2,27244
1000d6fc:	dfc00615 	stw	ra,24(sp)
1000d700:	dc400515 	stw	r17,20(sp)
1000d704:	dc000415 	stw	r16,16(sp)
1000d708:	3823883a 	mov	r17,r7
1000d70c:	14000017 	ldw	r16,0(r2)
1000d710:	d9000115 	stw	r4,4(sp)
1000d714:	d9400215 	stw	r5,8(sp)
1000d718:	d9800315 	stw	r6,12(sp)
1000d71c:	00092e80 	call	100092e8 <__locale_charset>
1000d720:	d9000117 	ldw	r4,4(sp)
1000d724:	d9400217 	ldw	r5,8(sp)
1000d728:	d9800317 	ldw	r6,12(sp)
1000d72c:	dc400015 	stw	r17,0(sp)
1000d730:	100f883a 	mov	r7,r2
1000d734:	803ee83a 	callr	r16
1000d738:	dfc00617 	ldw	ra,24(sp)
1000d73c:	dc400517 	ldw	r17,20(sp)
1000d740:	dc000417 	ldw	r16,16(sp)
1000d744:	dec00704 	addi	sp,sp,28
1000d748:	f800283a 	ret

1000d74c <__udivdi3>:
1000d74c:	defff504 	addi	sp,sp,-44
1000d750:	dcc00415 	stw	r19,16(sp)
1000d754:	dc000115 	stw	r16,4(sp)
1000d758:	dfc00a15 	stw	ra,40(sp)
1000d75c:	df000915 	stw	fp,36(sp)
1000d760:	ddc00815 	stw	r23,32(sp)
1000d764:	dd800715 	stw	r22,28(sp)
1000d768:	dd400615 	stw	r21,24(sp)
1000d76c:	dd000515 	stw	r20,20(sp)
1000d770:	dc800315 	stw	r18,12(sp)
1000d774:	dc400215 	stw	r17,8(sp)
1000d778:	2027883a 	mov	r19,r4
1000d77c:	2821883a 	mov	r16,r5
1000d780:	3800471e 	bne	r7,zero,1000d8a0 <__udivdi3+0x154>
1000d784:	3025883a 	mov	r18,r6
1000d788:	2023883a 	mov	r17,r4
1000d78c:	2980592e 	bgeu	r5,r6,1000d8f4 <__udivdi3+0x1a8>
1000d790:	00bfffd4 	movui	r2,65535
1000d794:	2829883a 	mov	r20,r5
1000d798:	1180b236 	bltu	r2,r6,1000da64 <__udivdi3+0x318>
1000d79c:	00803fc4 	movi	r2,255
1000d7a0:	1181622e 	bgeu	r2,r6,1000dd2c <__udivdi3+0x5e0>
1000d7a4:	00800204 	movi	r2,8
1000d7a8:	1007883a 	mov	r3,r2
1000d7ac:	3084d83a 	srl	r2,r6,r2
1000d7b0:	01040074 	movhi	r4,4097
1000d7b4:	21132b04 	addi	r4,r4,19628
1000d7b8:	2085883a 	add	r2,r4,r2
1000d7bc:	11000003 	ldbu	r4,0(r2)
1000d7c0:	20c9883a 	add	r4,r4,r3
1000d7c4:	00c00804 	movi	r3,32
1000d7c8:	1907c83a 	sub	r3,r3,r4
1000d7cc:	18000526 	beq	r3,zero,1000d7e4 <__udivdi3+0x98>
1000d7d0:	80e0983a 	sll	r16,r16,r3
1000d7d4:	9908d83a 	srl	r4,r19,r4
1000d7d8:	30e4983a 	sll	r18,r6,r3
1000d7dc:	98e2983a 	sll	r17,r19,r3
1000d7e0:	8128b03a 	or	r20,r16,r4
1000d7e4:	902ad43a 	srli	r21,r18,16
1000d7e8:	a009883a 	mov	r4,r20
1000d7ec:	95bfffcc 	andi	r22,r18,65535
1000d7f0:	a80b883a 	mov	r5,r21
1000d7f4:	00030780 	call	10003078 <__umodsi3>
1000d7f8:	a009883a 	mov	r4,r20
1000d7fc:	a80b883a 	mov	r5,r21
1000d800:	102f883a 	mov	r23,r2
1000d804:	00030700 	call	10003070 <__udivsi3>
1000d808:	1009883a 	mov	r4,r2
1000d80c:	b00b883a 	mov	r5,r22
1000d810:	1021883a 	mov	r16,r2
1000d814:	00030800 	call	10003080 <__mulsi3>
1000d818:	b82e943a 	slli	r23,r23,16
1000d81c:	8808d43a 	srli	r4,r17,16
1000d820:	b906b03a 	or	r3,r23,r4
1000d824:	1880052e 	bgeu	r3,r2,1000d83c <__udivdi3+0xf0>
1000d828:	1c87883a 	add	r3,r3,r18
1000d82c:	813fffc4 	addi	r4,r16,-1
1000d830:	1c800136 	bltu	r3,r18,1000d838 <__udivdi3+0xec>
1000d834:	18815236 	bltu	r3,r2,1000dd80 <__udivdi3+0x634>
1000d838:	2021883a 	mov	r16,r4
1000d83c:	18a7c83a 	sub	r19,r3,r2
1000d840:	9809883a 	mov	r4,r19
1000d844:	a80b883a 	mov	r5,r21
1000d848:	00030780 	call	10003078 <__umodsi3>
1000d84c:	1029883a 	mov	r20,r2
1000d850:	9809883a 	mov	r4,r19
1000d854:	a80b883a 	mov	r5,r21
1000d858:	a028943a 	slli	r20,r20,16
1000d85c:	00030700 	call	10003070 <__udivsi3>
1000d860:	1009883a 	mov	r4,r2
1000d864:	b00b883a 	mov	r5,r22
1000d868:	8c7fffcc 	andi	r17,r17,65535
1000d86c:	1027883a 	mov	r19,r2
1000d870:	a462b03a 	or	r17,r20,r17
1000d874:	00030800 	call	10003080 <__mulsi3>
1000d878:	8880052e 	bgeu	r17,r2,1000d890 <__udivdi3+0x144>
1000d87c:	8ca3883a 	add	r17,r17,r18
1000d880:	98ffffc4 	addi	r3,r19,-1
1000d884:	8c811036 	bltu	r17,r18,1000dcc8 <__udivdi3+0x57c>
1000d888:	88810f2e 	bgeu	r17,r2,1000dcc8 <__udivdi3+0x57c>
1000d88c:	9cffff84 	addi	r19,r19,-2
1000d890:	8020943a 	slli	r16,r16,16
1000d894:	0007883a 	mov	r3,zero
1000d898:	9c04b03a 	or	r2,r19,r16
1000d89c:	00006006 	br	1000da20 <__udivdi3+0x2d4>
1000d8a0:	29c05d36 	bltu	r5,r7,1000da18 <__udivdi3+0x2cc>
1000d8a4:	00bfffd4 	movui	r2,65535
1000d8a8:	11c0692e 	bgeu	r2,r7,1000da50 <__udivdi3+0x304>
1000d8ac:	00804034 	movhi	r2,256
1000d8b0:	10bfffc4 	addi	r2,r2,-1
1000d8b4:	11c10e2e 	bgeu	r2,r7,1000dcf0 <__udivdi3+0x5a4>
1000d8b8:	01400604 	movi	r5,24
1000d8bc:	2811883a 	mov	r8,r5
1000d8c0:	394ad83a 	srl	r5,r7,r5
1000d8c4:	00840074 	movhi	r2,4097
1000d8c8:	10932b04 	addi	r2,r2,19628
1000d8cc:	114b883a 	add	r5,r2,r5
1000d8d0:	29400003 	ldbu	r5,0(r5)
1000d8d4:	00c00804 	movi	r3,32
1000d8d8:	2a0b883a 	add	r5,r5,r8
1000d8dc:	196fc83a 	sub	r23,r3,r5
1000d8e0:	b8006b1e 	bne	r23,zero,1000da90 <__udivdi3+0x344>
1000d8e4:	3c011436 	bltu	r7,r16,1000dd38 <__udivdi3+0x5ec>
1000d8e8:	9985403a 	cmpgeu	r2,r19,r6
1000d8ec:	0007883a 	mov	r3,zero
1000d8f0:	00004b06 	br	1000da20 <__udivdi3+0x2d4>
1000d8f4:	3000041e 	bne	r6,zero,1000d908 <__udivdi3+0x1bc>
1000d8f8:	01000044 	movi	r4,1
1000d8fc:	000b883a 	mov	r5,zero
1000d900:	00030700 	call	10003070 <__udivsi3>
1000d904:	1025883a 	mov	r18,r2
1000d908:	00bfffd4 	movui	r2,65535
1000d90c:	14805b2e 	bgeu	r2,r18,1000da7c <__udivdi3+0x330>
1000d910:	00804034 	movhi	r2,256
1000d914:	10bfffc4 	addi	r2,r2,-1
1000d918:	1480fe2e 	bgeu	r2,r18,1000dd14 <__udivdi3+0x5c8>
1000d91c:	00800604 	movi	r2,24
1000d920:	1007883a 	mov	r3,r2
1000d924:	9084d83a 	srl	r2,r18,r2
1000d928:	01040074 	movhi	r4,4097
1000d92c:	21132b04 	addi	r4,r4,19628
1000d930:	2085883a 	add	r2,r4,r2
1000d934:	11800003 	ldbu	r6,0(r2)
1000d938:	01c00804 	movi	r7,32
1000d93c:	30c7883a 	add	r3,r6,r3
1000d940:	38cfc83a 	sub	r7,r7,r3
1000d944:	3800a71e 	bne	r7,zero,1000dbe4 <__udivdi3+0x498>
1000d948:	9028d43a 	srli	r20,r18,16
1000d94c:	84a1c83a 	sub	r16,r16,r18
1000d950:	957fffcc 	andi	r21,r18,65535
1000d954:	00c00044 	movi	r3,1
1000d958:	8009883a 	mov	r4,r16
1000d95c:	a00b883a 	mov	r5,r20
1000d960:	d8c00015 	stw	r3,0(sp)
1000d964:	00030780 	call	10003078 <__umodsi3>
1000d968:	8009883a 	mov	r4,r16
1000d96c:	a00b883a 	mov	r5,r20
1000d970:	102d883a 	mov	r22,r2
1000d974:	00030700 	call	10003070 <__udivsi3>
1000d978:	1009883a 	mov	r4,r2
1000d97c:	a80b883a 	mov	r5,r21
1000d980:	1021883a 	mov	r16,r2
1000d984:	00030800 	call	10003080 <__mulsi3>
1000d988:	b02c943a 	slli	r22,r22,16
1000d98c:	880ed43a 	srli	r7,r17,16
1000d990:	d8c00017 	ldw	r3,0(sp)
1000d994:	b1ccb03a 	or	r6,r22,r7
1000d998:	3080052e 	bgeu	r6,r2,1000d9b0 <__udivdi3+0x264>
1000d99c:	348d883a 	add	r6,r6,r18
1000d9a0:	813fffc4 	addi	r4,r16,-1
1000d9a4:	34800136 	bltu	r6,r18,1000d9ac <__udivdi3+0x260>
1000d9a8:	3080f236 	bltu	r6,r2,1000dd74 <__udivdi3+0x628>
1000d9ac:	2021883a 	mov	r16,r4
1000d9b0:	30a7c83a 	sub	r19,r6,r2
1000d9b4:	9809883a 	mov	r4,r19
1000d9b8:	a00b883a 	mov	r5,r20
1000d9bc:	d8c00015 	stw	r3,0(sp)
1000d9c0:	00030780 	call	10003078 <__umodsi3>
1000d9c4:	102d883a 	mov	r22,r2
1000d9c8:	9809883a 	mov	r4,r19
1000d9cc:	a00b883a 	mov	r5,r20
1000d9d0:	b02c943a 	slli	r22,r22,16
1000d9d4:	00030700 	call	10003070 <__udivsi3>
1000d9d8:	1009883a 	mov	r4,r2
1000d9dc:	a80b883a 	mov	r5,r21
1000d9e0:	8c7fffcc 	andi	r17,r17,65535
1000d9e4:	1027883a 	mov	r19,r2
1000d9e8:	b462b03a 	or	r17,r22,r17
1000d9ec:	00030800 	call	10003080 <__mulsi3>
1000d9f0:	d8c00017 	ldw	r3,0(sp)
1000d9f4:	8880052e 	bgeu	r17,r2,1000da0c <__udivdi3+0x2c0>
1000d9f8:	8ca3883a 	add	r17,r17,r18
1000d9fc:	993fffc4 	addi	r4,r19,-1
1000da00:	8c80af36 	bltu	r17,r18,1000dcc0 <__udivdi3+0x574>
1000da04:	8880ae2e 	bgeu	r17,r2,1000dcc0 <__udivdi3+0x574>
1000da08:	9cffff84 	addi	r19,r19,-2
1000da0c:	8020943a 	slli	r16,r16,16
1000da10:	9c04b03a 	or	r2,r19,r16
1000da14:	00000206 	br	1000da20 <__udivdi3+0x2d4>
1000da18:	0007883a 	mov	r3,zero
1000da1c:	0005883a 	mov	r2,zero
1000da20:	dfc00a17 	ldw	ra,40(sp)
1000da24:	df000917 	ldw	fp,36(sp)
1000da28:	ddc00817 	ldw	r23,32(sp)
1000da2c:	dd800717 	ldw	r22,28(sp)
1000da30:	dd400617 	ldw	r21,24(sp)
1000da34:	dd000517 	ldw	r20,20(sp)
1000da38:	dcc00417 	ldw	r19,16(sp)
1000da3c:	dc800317 	ldw	r18,12(sp)
1000da40:	dc400217 	ldw	r17,8(sp)
1000da44:	dc000117 	ldw	r16,4(sp)
1000da48:	dec00b04 	addi	sp,sp,44
1000da4c:	f800283a 	ret
1000da50:	00803fc4 	movi	r2,255
1000da54:	11c0a92e 	bgeu	r2,r7,1000dcfc <__udivdi3+0x5b0>
1000da58:	01400204 	movi	r5,8
1000da5c:	2811883a 	mov	r8,r5
1000da60:	003f9706 	br	1000d8c0 <__alt_data_end+0xf800d8c0>
1000da64:	00804034 	movhi	r2,256
1000da68:	10bfffc4 	addi	r2,r2,-1
1000da6c:	1180a62e 	bgeu	r2,r6,1000dd08 <__udivdi3+0x5bc>
1000da70:	00800604 	movi	r2,24
1000da74:	1007883a 	mov	r3,r2
1000da78:	003f4c06 	br	1000d7ac <__alt_data_end+0xf800d7ac>
1000da7c:	00803fc4 	movi	r2,255
1000da80:	1480a72e 	bgeu	r2,r18,1000dd20 <__udivdi3+0x5d4>
1000da84:	00800204 	movi	r2,8
1000da88:	1007883a 	mov	r3,r2
1000da8c:	003fa506 	br	1000d924 <__alt_data_end+0xf800d924>
1000da90:	3178d83a 	srl	fp,r6,r5
1000da94:	3dce983a 	sll	r7,r7,r23
1000da98:	8168d83a 	srl	r20,r16,r5
1000da9c:	9950d83a 	srl	r8,r19,r5
1000daa0:	3f38b03a 	or	fp,r7,fp
1000daa4:	e024d43a 	srli	r18,fp,16
1000daa8:	85e0983a 	sll	r16,r16,r23
1000daac:	a009883a 	mov	r4,r20
1000dab0:	900b883a 	mov	r5,r18
1000dab4:	8220b03a 	or	r16,r16,r8
1000dab8:	35ea983a 	sll	r21,r6,r23
1000dabc:	00030780 	call	10003078 <__umodsi3>
1000dac0:	a009883a 	mov	r4,r20
1000dac4:	900b883a 	mov	r5,r18
1000dac8:	1023883a 	mov	r17,r2
1000dacc:	e5bfffcc 	andi	r22,fp,65535
1000dad0:	00030700 	call	10003070 <__udivsi3>
1000dad4:	1009883a 	mov	r4,r2
1000dad8:	b00b883a 	mov	r5,r22
1000dadc:	1029883a 	mov	r20,r2
1000dae0:	00030800 	call	10003080 <__mulsi3>
1000dae4:	8806943a 	slli	r3,r17,16
1000dae8:	8014d43a 	srli	r10,r16,16
1000daec:	1a92b03a 	or	r9,r3,r10
1000daf0:	4880042e 	bgeu	r9,r2,1000db04 <__udivdi3+0x3b8>
1000daf4:	4f13883a 	add	r9,r9,fp
1000daf8:	a0ffffc4 	addi	r3,r20,-1
1000dafc:	4f00952e 	bgeu	r9,fp,1000dd54 <__udivdi3+0x608>
1000db00:	1829883a 	mov	r20,r3
1000db04:	48a3c83a 	sub	r17,r9,r2
1000db08:	8809883a 	mov	r4,r17
1000db0c:	900b883a 	mov	r5,r18
1000db10:	00030780 	call	10003078 <__umodsi3>
1000db14:	8809883a 	mov	r4,r17
1000db18:	900b883a 	mov	r5,r18
1000db1c:	d8800015 	stw	r2,0(sp)
1000db20:	00030700 	call	10003070 <__udivsi3>
1000db24:	1009883a 	mov	r4,r2
1000db28:	b00b883a 	mov	r5,r22
1000db2c:	1023883a 	mov	r17,r2
1000db30:	00030800 	call	10003080 <__mulsi3>
1000db34:	d8c00017 	ldw	r3,0(sp)
1000db38:	823fffcc 	andi	r8,r16,65535
1000db3c:	1806943a 	slli	r3,r3,16
1000db40:	1a20b03a 	or	r16,r3,r8
1000db44:	8080042e 	bgeu	r16,r2,1000db58 <__udivdi3+0x40c>
1000db48:	8721883a 	add	r16,r16,fp
1000db4c:	88ffffc4 	addi	r3,r17,-1
1000db50:	87007c2e 	bgeu	r16,fp,1000dd44 <__udivdi3+0x5f8>
1000db54:	1823883a 	mov	r17,r3
1000db58:	a028943a 	slli	r20,r20,16
1000db5c:	acbfffcc 	andi	r18,r21,65535
1000db60:	900b883a 	mov	r5,r18
1000db64:	8d28b03a 	or	r20,r17,r20
1000db68:	a022d43a 	srli	r17,r20,16
1000db6c:	a5bfffcc 	andi	r22,r20,65535
1000db70:	b009883a 	mov	r4,r22
1000db74:	a82ad43a 	srli	r21,r21,16
1000db78:	80a1c83a 	sub	r16,r16,r2
1000db7c:	00030800 	call	10003080 <__mulsi3>
1000db80:	8809883a 	mov	r4,r17
1000db84:	900b883a 	mov	r5,r18
1000db88:	1039883a 	mov	fp,r2
1000db8c:	00030800 	call	10003080 <__mulsi3>
1000db90:	8809883a 	mov	r4,r17
1000db94:	a80b883a 	mov	r5,r21
1000db98:	1025883a 	mov	r18,r2
1000db9c:	00030800 	call	10003080 <__mulsi3>
1000dba0:	b009883a 	mov	r4,r22
1000dba4:	a80b883a 	mov	r5,r21
1000dba8:	1023883a 	mov	r17,r2
1000dbac:	00030800 	call	10003080 <__mulsi3>
1000dbb0:	e006d43a 	srli	r3,fp,16
1000dbb4:	9085883a 	add	r2,r18,r2
1000dbb8:	10c7883a 	add	r3,r2,r3
1000dbbc:	1c80022e 	bgeu	r3,r18,1000dbc8 <__udivdi3+0x47c>
1000dbc0:	00800074 	movhi	r2,1
1000dbc4:	88a3883a 	add	r17,r17,r2
1000dbc8:	1808d43a 	srli	r4,r3,16
1000dbcc:	8909883a 	add	r4,r17,r4
1000dbd0:	81004436 	bltu	r16,r4,1000dce4 <__udivdi3+0x598>
1000dbd4:	81003e26 	beq	r16,r4,1000dcd0 <__udivdi3+0x584>
1000dbd8:	a005883a 	mov	r2,r20
1000dbdc:	0007883a 	mov	r3,zero
1000dbe0:	003f8f06 	br	1000da20 <__alt_data_end+0xf800da20>
1000dbe4:	91e4983a 	sll	r18,r18,r7
1000dbe8:	80eed83a 	srl	r23,r16,r3
1000dbec:	81cc983a 	sll	r6,r16,r7
1000dbf0:	9028d43a 	srli	r20,r18,16
1000dbf4:	98c6d83a 	srl	r3,r19,r3
1000dbf8:	b809883a 	mov	r4,r23
1000dbfc:	a00b883a 	mov	r5,r20
1000dc00:	30ecb03a 	or	r22,r6,r3
1000dc04:	99e2983a 	sll	r17,r19,r7
1000dc08:	00030780 	call	10003078 <__umodsi3>
1000dc0c:	b809883a 	mov	r4,r23
1000dc10:	a00b883a 	mov	r5,r20
1000dc14:	1021883a 	mov	r16,r2
1000dc18:	957fffcc 	andi	r21,r18,65535
1000dc1c:	00030700 	call	10003070 <__udivsi3>
1000dc20:	a80b883a 	mov	r5,r21
1000dc24:	1009883a 	mov	r4,r2
1000dc28:	102f883a 	mov	r23,r2
1000dc2c:	00030800 	call	10003080 <__mulsi3>
1000dc30:	8020943a 	slli	r16,r16,16
1000dc34:	b00ad43a 	srli	r5,r22,16
1000dc38:	814cb03a 	or	r6,r16,r5
1000dc3c:	3080062e 	bgeu	r6,r2,1000dc58 <__udivdi3+0x50c>
1000dc40:	348d883a 	add	r6,r6,r18
1000dc44:	b8ffffc4 	addi	r3,r23,-1
1000dc48:	34804836 	bltu	r6,r18,1000dd6c <__udivdi3+0x620>
1000dc4c:	3080472e 	bgeu	r6,r2,1000dd6c <__udivdi3+0x620>
1000dc50:	bdffff84 	addi	r23,r23,-2
1000dc54:	348d883a 	add	r6,r6,r18
1000dc58:	30a7c83a 	sub	r19,r6,r2
1000dc5c:	9809883a 	mov	r4,r19
1000dc60:	a00b883a 	mov	r5,r20
1000dc64:	00030780 	call	10003078 <__umodsi3>
1000dc68:	9809883a 	mov	r4,r19
1000dc6c:	a00b883a 	mov	r5,r20
1000dc70:	1039883a 	mov	fp,r2
1000dc74:	00030700 	call	10003070 <__udivsi3>
1000dc78:	1009883a 	mov	r4,r2
1000dc7c:	a80b883a 	mov	r5,r21
1000dc80:	e038943a 	slli	fp,fp,16
1000dc84:	1027883a 	mov	r19,r2
1000dc88:	00030800 	call	10003080 <__mulsi3>
1000dc8c:	b1bfffcc 	andi	r6,r22,65535
1000dc90:	e18cb03a 	or	r6,fp,r6
1000dc94:	3080062e 	bgeu	r6,r2,1000dcb0 <__udivdi3+0x564>
1000dc98:	348d883a 	add	r6,r6,r18
1000dc9c:	98ffffc4 	addi	r3,r19,-1
1000dca0:	34803036 	bltu	r6,r18,1000dd64 <__udivdi3+0x618>
1000dca4:	30802f2e 	bgeu	r6,r2,1000dd64 <__udivdi3+0x618>
1000dca8:	9cffff84 	addi	r19,r19,-2
1000dcac:	348d883a 	add	r6,r6,r18
1000dcb0:	b82e943a 	slli	r23,r23,16
1000dcb4:	30a1c83a 	sub	r16,r6,r2
1000dcb8:	9dc6b03a 	or	r3,r19,r23
1000dcbc:	003f2606 	br	1000d958 <__alt_data_end+0xf800d958>
1000dcc0:	2027883a 	mov	r19,r4
1000dcc4:	003f5106 	br	1000da0c <__alt_data_end+0xf800da0c>
1000dcc8:	1827883a 	mov	r19,r3
1000dccc:	003ef006 	br	1000d890 <__alt_data_end+0xf800d890>
1000dcd0:	1808943a 	slli	r4,r3,16
1000dcd4:	9dc6983a 	sll	r3,r19,r23
1000dcd8:	e73fffcc 	andi	fp,fp,65535
1000dcdc:	2709883a 	add	r4,r4,fp
1000dce0:	193fbd2e 	bgeu	r3,r4,1000dbd8 <__alt_data_end+0xf800dbd8>
1000dce4:	a0bfffc4 	addi	r2,r20,-1
1000dce8:	0007883a 	mov	r3,zero
1000dcec:	003f4c06 	br	1000da20 <__alt_data_end+0xf800da20>
1000dcf0:	01400404 	movi	r5,16
1000dcf4:	2811883a 	mov	r8,r5
1000dcf8:	003ef106 	br	1000d8c0 <__alt_data_end+0xf800d8c0>
1000dcfc:	000b883a 	mov	r5,zero
1000dd00:	0011883a 	mov	r8,zero
1000dd04:	003eee06 	br	1000d8c0 <__alt_data_end+0xf800d8c0>
1000dd08:	00800404 	movi	r2,16
1000dd0c:	1007883a 	mov	r3,r2
1000dd10:	003ea606 	br	1000d7ac <__alt_data_end+0xf800d7ac>
1000dd14:	00800404 	movi	r2,16
1000dd18:	1007883a 	mov	r3,r2
1000dd1c:	003f0106 	br	1000d924 <__alt_data_end+0xf800d924>
1000dd20:	0005883a 	mov	r2,zero
1000dd24:	0007883a 	mov	r3,zero
1000dd28:	003efe06 	br	1000d924 <__alt_data_end+0xf800d924>
1000dd2c:	0005883a 	mov	r2,zero
1000dd30:	0007883a 	mov	r3,zero
1000dd34:	003e9d06 	br	1000d7ac <__alt_data_end+0xf800d7ac>
1000dd38:	0007883a 	mov	r3,zero
1000dd3c:	00800044 	movi	r2,1
1000dd40:	003f3706 	br	1000da20 <__alt_data_end+0xf800da20>
1000dd44:	80bf832e 	bgeu	r16,r2,1000db54 <__alt_data_end+0xf800db54>
1000dd48:	8c7fff84 	addi	r17,r17,-2
1000dd4c:	8721883a 	add	r16,r16,fp
1000dd50:	003f8106 	br	1000db58 <__alt_data_end+0xf800db58>
1000dd54:	48bf6a2e 	bgeu	r9,r2,1000db00 <__alt_data_end+0xf800db00>
1000dd58:	a53fff84 	addi	r20,r20,-2
1000dd5c:	4f13883a 	add	r9,r9,fp
1000dd60:	003f6806 	br	1000db04 <__alt_data_end+0xf800db04>
1000dd64:	1827883a 	mov	r19,r3
1000dd68:	003fd106 	br	1000dcb0 <__alt_data_end+0xf800dcb0>
1000dd6c:	182f883a 	mov	r23,r3
1000dd70:	003fb906 	br	1000dc58 <__alt_data_end+0xf800dc58>
1000dd74:	843fff84 	addi	r16,r16,-2
1000dd78:	348d883a 	add	r6,r6,r18
1000dd7c:	003f0c06 	br	1000d9b0 <__alt_data_end+0xf800d9b0>
1000dd80:	843fff84 	addi	r16,r16,-2
1000dd84:	1c87883a 	add	r3,r3,r18
1000dd88:	003eac06 	br	1000d83c <__alt_data_end+0xf800d83c>

1000dd8c <__umoddi3>:
1000dd8c:	defff404 	addi	sp,sp,-48
1000dd90:	dd800815 	stw	r22,32(sp)
1000dd94:	dc400315 	stw	r17,12(sp)
1000dd98:	dc000215 	stw	r16,8(sp)
1000dd9c:	dfc00b15 	stw	ra,44(sp)
1000dda0:	df000a15 	stw	fp,40(sp)
1000dda4:	ddc00915 	stw	r23,36(sp)
1000dda8:	dd400715 	stw	r21,28(sp)
1000ddac:	dd000615 	stw	r20,24(sp)
1000ddb0:	dcc00515 	stw	r19,20(sp)
1000ddb4:	dc800415 	stw	r18,16(sp)
1000ddb8:	2021883a 	mov	r16,r4
1000ddbc:	2823883a 	mov	r17,r5
1000ddc0:	282d883a 	mov	r22,r5
1000ddc4:	38003c1e 	bne	r7,zero,1000deb8 <__umoddi3+0x12c>
1000ddc8:	3027883a 	mov	r19,r6
1000ddcc:	2029883a 	mov	r20,r4
1000ddd0:	2980522e 	bgeu	r5,r6,1000df1c <__umoddi3+0x190>
1000ddd4:	00bfffd4 	movui	r2,65535
1000ddd8:	1180a436 	bltu	r2,r6,1000e06c <__umoddi3+0x2e0>
1000dddc:	00803fc4 	movi	r2,255
1000dde0:	11815e2e 	bgeu	r2,r6,1000e35c <__umoddi3+0x5d0>
1000dde4:	01400204 	movi	r5,8
1000dde8:	2805883a 	mov	r2,r5
1000ddec:	314ad83a 	srl	r5,r6,r5
1000ddf0:	00c40074 	movhi	r3,4097
1000ddf4:	18d32b04 	addi	r3,r3,19628
1000ddf8:	194b883a 	add	r5,r3,r5
1000ddfc:	29000003 	ldbu	r4,0(r5)
1000de00:	2089883a 	add	r4,r4,r2
1000de04:	00800804 	movi	r2,32
1000de08:	1105c83a 	sub	r2,r2,r4
1000de0c:	10010c26 	beq	r2,zero,1000e240 <__umoddi3+0x4b4>
1000de10:	88a2983a 	sll	r17,r17,r2
1000de14:	8108d83a 	srl	r4,r16,r4
1000de18:	30a6983a 	sll	r19,r6,r2
1000de1c:	80a8983a 	sll	r20,r16,r2
1000de20:	1025883a 	mov	r18,r2
1000de24:	892cb03a 	or	r22,r17,r4
1000de28:	9822d43a 	srli	r17,r19,16
1000de2c:	b009883a 	mov	r4,r22
1000de30:	9d7fffcc 	andi	r21,r19,65535
1000de34:	880b883a 	mov	r5,r17
1000de38:	00030780 	call	10003078 <__umodsi3>
1000de3c:	b009883a 	mov	r4,r22
1000de40:	880b883a 	mov	r5,r17
1000de44:	102f883a 	mov	r23,r2
1000de48:	00030700 	call	10003070 <__udivsi3>
1000de4c:	1009883a 	mov	r4,r2
1000de50:	a80b883a 	mov	r5,r21
1000de54:	00030800 	call	10003080 <__mulsi3>
1000de58:	b82e943a 	slli	r23,r23,16
1000de5c:	a008d43a 	srli	r4,r20,16
1000de60:	b906b03a 	or	r3,r23,r4
1000de64:	1880042e 	bgeu	r3,r2,1000de78 <__umoddi3+0xec>
1000de68:	1cc7883a 	add	r3,r3,r19
1000de6c:	1cc00236 	bltu	r3,r19,1000de78 <__umoddi3+0xec>
1000de70:	1880012e 	bgeu	r3,r2,1000de78 <__umoddi3+0xec>
1000de74:	1cc7883a 	add	r3,r3,r19
1000de78:	18a1c83a 	sub	r16,r3,r2
1000de7c:	8009883a 	mov	r4,r16
1000de80:	880b883a 	mov	r5,r17
1000de84:	00030780 	call	10003078 <__umodsi3>
1000de88:	8009883a 	mov	r4,r16
1000de8c:	880b883a 	mov	r5,r17
1000de90:	102d883a 	mov	r22,r2
1000de94:	00030700 	call	10003070 <__udivsi3>
1000de98:	1009883a 	mov	r4,r2
1000de9c:	a80b883a 	mov	r5,r21
1000dea0:	b02c943a 	slli	r22,r22,16
1000dea4:	00030800 	call	10003080 <__mulsi3>
1000dea8:	a13fffcc 	andi	r4,r20,65535
1000deac:	b106b03a 	or	r3,r22,r4
1000deb0:	1880572e 	bgeu	r3,r2,1000e010 <__umoddi3+0x284>
1000deb4:	00005206 	br	1000e000 <__umoddi3+0x274>
1000deb8:	29c05936 	bltu	r5,r7,1000e020 <__umoddi3+0x294>
1000debc:	00bfffd4 	movui	r2,65535
1000dec0:	11c0652e 	bgeu	r2,r7,1000e058 <__umoddi3+0x2cc>
1000dec4:	00804034 	movhi	r2,256
1000dec8:	10bfffc4 	addi	r2,r2,-1
1000decc:	11c1172e 	bgeu	r2,r7,1000e32c <__umoddi3+0x5a0>
1000ded0:	01400604 	movi	r5,24
1000ded4:	282b883a 	mov	r21,r5
1000ded8:	394ad83a 	srl	r5,r7,r5
1000dedc:	00c40074 	movhi	r3,4097
1000dee0:	18d32b04 	addi	r3,r3,19628
1000dee4:	194b883a 	add	r5,r3,r5
1000dee8:	28800003 	ldbu	r2,0(r5)
1000deec:	00c00804 	movi	r3,32
1000def0:	156b883a 	add	r21,r2,r21
1000def4:	1d69c83a 	sub	r20,r3,r21
1000def8:	a000671e 	bne	r20,zero,1000e098 <__umoddi3+0x30c>
1000defc:	3c400136 	bltu	r7,r17,1000df04 <__umoddi3+0x178>
1000df00:	81812336 	bltu	r16,r6,1000e390 <__umoddi3+0x604>
1000df04:	8185c83a 	sub	r2,r16,r6
1000df08:	89e3c83a 	sub	r17,r17,r7
1000df0c:	8087803a 	cmpltu	r3,r16,r2
1000df10:	88edc83a 	sub	r22,r17,r3
1000df14:	b007883a 	mov	r3,r22
1000df18:	00004306 	br	1000e028 <__umoddi3+0x29c>
1000df1c:	3000041e 	bne	r6,zero,1000df30 <__umoddi3+0x1a4>
1000df20:	01000044 	movi	r4,1
1000df24:	000b883a 	mov	r5,zero
1000df28:	00030700 	call	10003070 <__udivsi3>
1000df2c:	1027883a 	mov	r19,r2
1000df30:	00bfffd4 	movui	r2,65535
1000df34:	14c0532e 	bgeu	r2,r19,1000e084 <__umoddi3+0x2f8>
1000df38:	00804034 	movhi	r2,256
1000df3c:	10bfffc4 	addi	r2,r2,-1
1000df40:	14c1032e 	bgeu	r2,r19,1000e350 <__umoddi3+0x5c4>
1000df44:	00800604 	movi	r2,24
1000df48:	1007883a 	mov	r3,r2
1000df4c:	9884d83a 	srl	r2,r19,r2
1000df50:	01040074 	movhi	r4,4097
1000df54:	21132b04 	addi	r4,r4,19628
1000df58:	2085883a 	add	r2,r4,r2
1000df5c:	11000003 	ldbu	r4,0(r2)
1000df60:	00800804 	movi	r2,32
1000df64:	20c7883a 	add	r3,r4,r3
1000df68:	10c5c83a 	sub	r2,r2,r3
1000df6c:	1000b61e 	bne	r2,zero,1000e248 <__umoddi3+0x4bc>
1000df70:	982ad43a 	srli	r21,r19,16
1000df74:	8ce3c83a 	sub	r17,r17,r19
1000df78:	9dbfffcc 	andi	r22,r19,65535
1000df7c:	0025883a 	mov	r18,zero
1000df80:	8809883a 	mov	r4,r17
1000df84:	a80b883a 	mov	r5,r21
1000df88:	00030780 	call	10003078 <__umodsi3>
1000df8c:	8809883a 	mov	r4,r17
1000df90:	a80b883a 	mov	r5,r21
1000df94:	102f883a 	mov	r23,r2
1000df98:	00030700 	call	10003070 <__udivsi3>
1000df9c:	1009883a 	mov	r4,r2
1000dfa0:	b00b883a 	mov	r5,r22
1000dfa4:	00030800 	call	10003080 <__mulsi3>
1000dfa8:	b82e943a 	slli	r23,r23,16
1000dfac:	a008d43a 	srli	r4,r20,16
1000dfb0:	b906b03a 	or	r3,r23,r4
1000dfb4:	1880032e 	bgeu	r3,r2,1000dfc4 <__umoddi3+0x238>
1000dfb8:	1cc7883a 	add	r3,r3,r19
1000dfbc:	1cc00136 	bltu	r3,r19,1000dfc4 <__umoddi3+0x238>
1000dfc0:	1880f136 	bltu	r3,r2,1000e388 <__umoddi3+0x5fc>
1000dfc4:	18a1c83a 	sub	r16,r3,r2
1000dfc8:	8009883a 	mov	r4,r16
1000dfcc:	a80b883a 	mov	r5,r21
1000dfd0:	00030780 	call	10003078 <__umodsi3>
1000dfd4:	8009883a 	mov	r4,r16
1000dfd8:	a80b883a 	mov	r5,r21
1000dfdc:	1023883a 	mov	r17,r2
1000dfe0:	00030700 	call	10003070 <__udivsi3>
1000dfe4:	1009883a 	mov	r4,r2
1000dfe8:	b00b883a 	mov	r5,r22
1000dfec:	8822943a 	slli	r17,r17,16
1000dff0:	00030800 	call	10003080 <__mulsi3>
1000dff4:	a13fffcc 	andi	r4,r20,65535
1000dff8:	8906b03a 	or	r3,r17,r4
1000dffc:	1880042e 	bgeu	r3,r2,1000e010 <__umoddi3+0x284>
1000e000:	1cc7883a 	add	r3,r3,r19
1000e004:	1cc00236 	bltu	r3,r19,1000e010 <__umoddi3+0x284>
1000e008:	1880012e 	bgeu	r3,r2,1000e010 <__umoddi3+0x284>
1000e00c:	1cc7883a 	add	r3,r3,r19
1000e010:	1887c83a 	sub	r3,r3,r2
1000e014:	1c84d83a 	srl	r2,r3,r18
1000e018:	0007883a 	mov	r3,zero
1000e01c:	00000206 	br	1000e028 <__umoddi3+0x29c>
1000e020:	2005883a 	mov	r2,r4
1000e024:	2807883a 	mov	r3,r5
1000e028:	dfc00b17 	ldw	ra,44(sp)
1000e02c:	df000a17 	ldw	fp,40(sp)
1000e030:	ddc00917 	ldw	r23,36(sp)
1000e034:	dd800817 	ldw	r22,32(sp)
1000e038:	dd400717 	ldw	r21,28(sp)
1000e03c:	dd000617 	ldw	r20,24(sp)
1000e040:	dcc00517 	ldw	r19,20(sp)
1000e044:	dc800417 	ldw	r18,16(sp)
1000e048:	dc400317 	ldw	r17,12(sp)
1000e04c:	dc000217 	ldw	r16,8(sp)
1000e050:	dec00c04 	addi	sp,sp,48
1000e054:	f800283a 	ret
1000e058:	00803fc4 	movi	r2,255
1000e05c:	11c0b02e 	bgeu	r2,r7,1000e320 <__umoddi3+0x594>
1000e060:	01400204 	movi	r5,8
1000e064:	282b883a 	mov	r21,r5
1000e068:	003f9b06 	br	1000ded8 <__alt_data_end+0xf800ded8>
1000e06c:	00804034 	movhi	r2,256
1000e070:	10bfffc4 	addi	r2,r2,-1
1000e074:	1180b02e 	bgeu	r2,r6,1000e338 <__umoddi3+0x5ac>
1000e078:	01400604 	movi	r5,24
1000e07c:	2805883a 	mov	r2,r5
1000e080:	003f5a06 	br	1000ddec <__alt_data_end+0xf800ddec>
1000e084:	00803fc4 	movi	r2,255
1000e088:	14c0ae2e 	bgeu	r2,r19,1000e344 <__umoddi3+0x5b8>
1000e08c:	00800204 	movi	r2,8
1000e090:	1007883a 	mov	r3,r2
1000e094:	003fad06 	br	1000df4c <__alt_data_end+0xf800df4c>
1000e098:	3d0a983a 	sll	r5,r7,r20
1000e09c:	356cd83a 	srl	r22,r6,r21
1000e0a0:	8d78d83a 	srl	fp,r17,r21
1000e0a4:	8d10983a 	sll	r8,r17,r20
1000e0a8:	2dacb03a 	or	r22,r5,r22
1000e0ac:	b02ed43a 	srli	r23,r22,16
1000e0b0:	8564d83a 	srl	r18,r16,r21
1000e0b4:	e009883a 	mov	r4,fp
1000e0b8:	b80b883a 	mov	r5,r23
1000e0bc:	44a4b03a 	or	r18,r8,r18
1000e0c0:	3526983a 	sll	r19,r6,r20
1000e0c4:	00030780 	call	10003078 <__umodsi3>
1000e0c8:	e009883a 	mov	r4,fp
1000e0cc:	b80b883a 	mov	r5,r23
1000e0d0:	b47fffcc 	andi	r17,r22,65535
1000e0d4:	d8800015 	stw	r2,0(sp)
1000e0d8:	00030700 	call	10003070 <__udivsi3>
1000e0dc:	1009883a 	mov	r4,r2
1000e0e0:	880b883a 	mov	r5,r17
1000e0e4:	1039883a 	mov	fp,r2
1000e0e8:	00030800 	call	10003080 <__mulsi3>
1000e0ec:	d9800017 	ldw	r6,0(sp)
1000e0f0:	9008d43a 	srli	r4,r18,16
1000e0f4:	8520983a 	sll	r16,r16,r20
1000e0f8:	300c943a 	slli	r6,r6,16
1000e0fc:	3106b03a 	or	r3,r6,r4
1000e100:	1880042e 	bgeu	r3,r2,1000e114 <__umoddi3+0x388>
1000e104:	1d87883a 	add	r3,r3,r22
1000e108:	e13fffc4 	addi	r4,fp,-1
1000e10c:	1d809a2e 	bgeu	r3,r22,1000e378 <__umoddi3+0x5ec>
1000e110:	2039883a 	mov	fp,r4
1000e114:	1887c83a 	sub	r3,r3,r2
1000e118:	1809883a 	mov	r4,r3
1000e11c:	b80b883a 	mov	r5,r23
1000e120:	d8c00115 	stw	r3,4(sp)
1000e124:	00030780 	call	10003078 <__umodsi3>
1000e128:	d8c00117 	ldw	r3,4(sp)
1000e12c:	b80b883a 	mov	r5,r23
1000e130:	d8800015 	stw	r2,0(sp)
1000e134:	1809883a 	mov	r4,r3
1000e138:	00030700 	call	10003070 <__udivsi3>
1000e13c:	880b883a 	mov	r5,r17
1000e140:	1009883a 	mov	r4,r2
1000e144:	102f883a 	mov	r23,r2
1000e148:	00030800 	call	10003080 <__mulsi3>
1000e14c:	d9800017 	ldw	r6,0(sp)
1000e150:	947fffcc 	andi	r17,r18,65535
1000e154:	300c943a 	slli	r6,r6,16
1000e158:	3464b03a 	or	r18,r6,r17
1000e15c:	9080042e 	bgeu	r18,r2,1000e170 <__umoddi3+0x3e4>
1000e160:	95a5883a 	add	r18,r18,r22
1000e164:	b8ffffc4 	addi	r3,r23,-1
1000e168:	95807f2e 	bgeu	r18,r22,1000e368 <__umoddi3+0x5dc>
1000e16c:	182f883a 	mov	r23,r3
1000e170:	e038943a 	slli	fp,fp,16
1000e174:	980cd43a 	srli	r6,r19,16
1000e178:	98ffffcc 	andi	r3,r19,65535
1000e17c:	bf38b03a 	or	fp,r23,fp
1000e180:	e02ed43a 	srli	r23,fp,16
1000e184:	e73fffcc 	andi	fp,fp,65535
1000e188:	180b883a 	mov	r5,r3
1000e18c:	e009883a 	mov	r4,fp
1000e190:	d9800015 	stw	r6,0(sp)
1000e194:	d8c00115 	stw	r3,4(sp)
1000e198:	90a5c83a 	sub	r18,r18,r2
1000e19c:	00030800 	call	10003080 <__mulsi3>
1000e1a0:	d8c00117 	ldw	r3,4(sp)
1000e1a4:	b809883a 	mov	r4,r23
1000e1a8:	1023883a 	mov	r17,r2
1000e1ac:	180b883a 	mov	r5,r3
1000e1b0:	00030800 	call	10003080 <__mulsi3>
1000e1b4:	d9800017 	ldw	r6,0(sp)
1000e1b8:	b809883a 	mov	r4,r23
1000e1bc:	d8800115 	stw	r2,4(sp)
1000e1c0:	300b883a 	mov	r5,r6
1000e1c4:	302f883a 	mov	r23,r6
1000e1c8:	00030800 	call	10003080 <__mulsi3>
1000e1cc:	e009883a 	mov	r4,fp
1000e1d0:	b80b883a 	mov	r5,r23
1000e1d4:	d8800015 	stw	r2,0(sp)
1000e1d8:	00030800 	call	10003080 <__mulsi3>
1000e1dc:	d8c00117 	ldw	r3,4(sp)
1000e1e0:	880cd43a 	srli	r6,r17,16
1000e1e4:	d9c00017 	ldw	r7,0(sp)
1000e1e8:	1885883a 	add	r2,r3,r2
1000e1ec:	118d883a 	add	r6,r2,r6
1000e1f0:	30c0022e 	bgeu	r6,r3,1000e1fc <__umoddi3+0x470>
1000e1f4:	00800074 	movhi	r2,1
1000e1f8:	388f883a 	add	r7,r7,r2
1000e1fc:	3006d43a 	srli	r3,r6,16
1000e200:	300c943a 	slli	r6,r6,16
1000e204:	8c7fffcc 	andi	r17,r17,65535
1000e208:	38c7883a 	add	r3,r7,r3
1000e20c:	3463883a 	add	r17,r6,r17
1000e210:	90c03d36 	bltu	r18,r3,1000e308 <__umoddi3+0x57c>
1000e214:	90c06026 	beq	r18,r3,1000e398 <__umoddi3+0x60c>
1000e218:	90c9c83a 	sub	r4,r18,r3
1000e21c:	880f883a 	mov	r7,r17
1000e220:	81cfc83a 	sub	r7,r16,r7
1000e224:	81c7803a 	cmpltu	r3,r16,r7
1000e228:	20c7c83a 	sub	r3,r4,r3
1000e22c:	1d44983a 	sll	r2,r3,r21
1000e230:	3d0ed83a 	srl	r7,r7,r20
1000e234:	1d06d83a 	srl	r3,r3,r20
1000e238:	11c4b03a 	or	r2,r2,r7
1000e23c:	003f7a06 	br	1000e028 <__alt_data_end+0xf800e028>
1000e240:	0025883a 	mov	r18,zero
1000e244:	003ef806 	br	1000de28 <__alt_data_end+0xf800de28>
1000e248:	98a6983a 	sll	r19,r19,r2
1000e24c:	88e8d83a 	srl	r20,r17,r3
1000e250:	80c6d83a 	srl	r3,r16,r3
1000e254:	982ad43a 	srli	r21,r19,16
1000e258:	88a2983a 	sll	r17,r17,r2
1000e25c:	a009883a 	mov	r4,r20
1000e260:	a80b883a 	mov	r5,r21
1000e264:	88eeb03a 	or	r23,r17,r3
1000e268:	1025883a 	mov	r18,r2
1000e26c:	00030780 	call	10003078 <__umodsi3>
1000e270:	a009883a 	mov	r4,r20
1000e274:	a80b883a 	mov	r5,r21
1000e278:	1023883a 	mov	r17,r2
1000e27c:	9dbfffcc 	andi	r22,r19,65535
1000e280:	00030700 	call	10003070 <__udivsi3>
1000e284:	1009883a 	mov	r4,r2
1000e288:	b00b883a 	mov	r5,r22
1000e28c:	00030800 	call	10003080 <__mulsi3>
1000e290:	8822943a 	slli	r17,r17,16
1000e294:	b808d43a 	srli	r4,r23,16
1000e298:	84a8983a 	sll	r20,r16,r18
1000e29c:	8906b03a 	or	r3,r17,r4
1000e2a0:	1880042e 	bgeu	r3,r2,1000e2b4 <__umoddi3+0x528>
1000e2a4:	1cc7883a 	add	r3,r3,r19
1000e2a8:	1cc00236 	bltu	r3,r19,1000e2b4 <__umoddi3+0x528>
1000e2ac:	1880012e 	bgeu	r3,r2,1000e2b4 <__umoddi3+0x528>
1000e2b0:	1cc7883a 	add	r3,r3,r19
1000e2b4:	18a1c83a 	sub	r16,r3,r2
1000e2b8:	8009883a 	mov	r4,r16
1000e2bc:	a80b883a 	mov	r5,r21
1000e2c0:	00030780 	call	10003078 <__umodsi3>
1000e2c4:	8009883a 	mov	r4,r16
1000e2c8:	a80b883a 	mov	r5,r21
1000e2cc:	1039883a 	mov	fp,r2
1000e2d0:	00030700 	call	10003070 <__udivsi3>
1000e2d4:	1009883a 	mov	r4,r2
1000e2d8:	b00b883a 	mov	r5,r22
1000e2dc:	00030800 	call	10003080 <__mulsi3>
1000e2e0:	e006943a 	slli	r3,fp,16
1000e2e4:	b93fffcc 	andi	r4,r23,65535
1000e2e8:	1906b03a 	or	r3,r3,r4
1000e2ec:	1880042e 	bgeu	r3,r2,1000e300 <__umoddi3+0x574>
1000e2f0:	1cc7883a 	add	r3,r3,r19
1000e2f4:	1cc00236 	bltu	r3,r19,1000e300 <__umoddi3+0x574>
1000e2f8:	1880012e 	bgeu	r3,r2,1000e300 <__umoddi3+0x574>
1000e2fc:	1cc7883a 	add	r3,r3,r19
1000e300:	18a3c83a 	sub	r17,r3,r2
1000e304:	003f1e06 	br	1000df80 <__alt_data_end+0xf800df80>
1000e308:	8ccfc83a 	sub	r7,r17,r19
1000e30c:	1d89c83a 	sub	r4,r3,r22
1000e310:	89e3803a 	cmpltu	r17,r17,r7
1000e314:	2463c83a 	sub	r17,r4,r17
1000e318:	9449c83a 	sub	r4,r18,r17
1000e31c:	003fc006 	br	1000e220 <__alt_data_end+0xf800e220>
1000e320:	000b883a 	mov	r5,zero
1000e324:	002b883a 	mov	r21,zero
1000e328:	003eeb06 	br	1000ded8 <__alt_data_end+0xf800ded8>
1000e32c:	01400404 	movi	r5,16
1000e330:	282b883a 	mov	r21,r5
1000e334:	003ee806 	br	1000ded8 <__alt_data_end+0xf800ded8>
1000e338:	01400404 	movi	r5,16
1000e33c:	2805883a 	mov	r2,r5
1000e340:	003eaa06 	br	1000ddec <__alt_data_end+0xf800ddec>
1000e344:	0005883a 	mov	r2,zero
1000e348:	0007883a 	mov	r3,zero
1000e34c:	003eff06 	br	1000df4c <__alt_data_end+0xf800df4c>
1000e350:	00800404 	movi	r2,16
1000e354:	1007883a 	mov	r3,r2
1000e358:	003efc06 	br	1000df4c <__alt_data_end+0xf800df4c>
1000e35c:	000b883a 	mov	r5,zero
1000e360:	0005883a 	mov	r2,zero
1000e364:	003ea106 	br	1000ddec <__alt_data_end+0xf800ddec>
1000e368:	90bf802e 	bgeu	r18,r2,1000e16c <__alt_data_end+0xf800e16c>
1000e36c:	bdffff84 	addi	r23,r23,-2
1000e370:	95a5883a 	add	r18,r18,r22
1000e374:	003f7e06 	br	1000e170 <__alt_data_end+0xf800e170>
1000e378:	18bf652e 	bgeu	r3,r2,1000e110 <__alt_data_end+0xf800e110>
1000e37c:	e73fff84 	addi	fp,fp,-2
1000e380:	1d87883a 	add	r3,r3,r22
1000e384:	003f6306 	br	1000e114 <__alt_data_end+0xf800e114>
1000e388:	1cc7883a 	add	r3,r3,r19
1000e38c:	003f0d06 	br	1000dfc4 <__alt_data_end+0xf800dfc4>
1000e390:	8005883a 	mov	r2,r16
1000e394:	003edf06 	br	1000df14 <__alt_data_end+0xf800df14>
1000e398:	847fdb36 	bltu	r16,r17,1000e308 <__alt_data_end+0xf800e308>
1000e39c:	880f883a 	mov	r7,r17
1000e3a0:	0009883a 	mov	r4,zero
1000e3a4:	003f9e06 	br	1000e220 <__alt_data_end+0xf800e220>

1000e3a8 <__divdf3>:
1000e3a8:	defff004 	addi	sp,sp,-64
1000e3ac:	dc800815 	stw	r18,32(sp)
1000e3b0:	2824d53a 	srli	r18,r5,20
1000e3b4:	dd800c15 	stw	r22,48(sp)
1000e3b8:	282cd7fa 	srli	r22,r5,31
1000e3bc:	dc000615 	stw	r16,24(sp)
1000e3c0:	04000434 	movhi	r16,16
1000e3c4:	df000e15 	stw	fp,56(sp)
1000e3c8:	dd000a15 	stw	r20,40(sp)
1000e3cc:	dcc00915 	stw	r19,36(sp)
1000e3d0:	dc400715 	stw	r17,28(sp)
1000e3d4:	843fffc4 	addi	r16,r16,-1
1000e3d8:	dfc00f15 	stw	ra,60(sp)
1000e3dc:	ddc00d15 	stw	r23,52(sp)
1000e3e0:	dd400b15 	stw	r21,44(sp)
1000e3e4:	9481ffcc 	andi	r18,r18,2047
1000e3e8:	2029883a 	mov	r20,r4
1000e3ec:	2027883a 	mov	r19,r4
1000e3f0:	2c22703a 	and	r17,r5,r16
1000e3f4:	b7003fcc 	andi	fp,r22,255
1000e3f8:	90005e26 	beq	r18,zero,1000e574 <__divdf3+0x1cc>
1000e3fc:	0081ffc4 	movi	r2,2047
1000e400:	90803526 	beq	r18,r2,1000e4d8 <__divdf3+0x130>
1000e404:	8c000434 	orhi	r16,r17,16
1000e408:	2004d77a 	srli	r2,r4,29
1000e40c:	802090fa 	slli	r16,r16,3
1000e410:	202690fa 	slli	r19,r4,3
1000e414:	94bf0044 	addi	r18,r18,-1023
1000e418:	80a2b03a 	or	r17,r16,r2
1000e41c:	0029883a 	mov	r20,zero
1000e420:	0011883a 	mov	r8,zero
1000e424:	380ad53a 	srli	r5,r7,20
1000e428:	382ed7fa 	srli	r23,r7,31
1000e42c:	04000434 	movhi	r16,16
1000e430:	843fffc4 	addi	r16,r16,-1
1000e434:	2941ffcc 	andi	r5,r5,2047
1000e438:	302b883a 	mov	r21,r6
1000e43c:	3c20703a 	and	r16,r7,r16
1000e440:	ba403fcc 	andi	r9,r23,255
1000e444:	28006726 	beq	r5,zero,1000e5e4 <__divdf3+0x23c>
1000e448:	0081ffc4 	movi	r2,2047
1000e44c:	28805f26 	beq	r5,r2,1000e5cc <__divdf3+0x224>
1000e450:	84000434 	orhi	r16,r16,16
1000e454:	3004d77a 	srli	r2,r6,29
1000e458:	802090fa 	slli	r16,r16,3
1000e45c:	302a90fa 	slli	r21,r6,3
1000e460:	297f0044 	addi	r5,r5,-1023
1000e464:	80a0b03a 	or	r16,r16,r2
1000e468:	000f883a 	mov	r7,zero
1000e46c:	3d06b03a 	or	r3,r7,r20
1000e470:	180690ba 	slli	r3,r3,2
1000e474:	00840074 	movhi	r2,4097
1000e478:	10b92604 	addi	r2,r2,-7016
1000e47c:	1885883a 	add	r2,r3,r2
1000e480:	10800017 	ldw	r2,0(r2)
1000e484:	b5c8f03a 	xor	r4,r22,r23
1000e488:	200d883a 	mov	r6,r4
1000e48c:	25003fcc 	andi	r20,r4,255
1000e490:	9165c83a 	sub	r18,r18,r5
1000e494:	1000683a 	jmp	r2
1000e498:	1000e6e0 	cmpeqi	zero,r2,923
1000e49c:	1000e510 	cmplti	zero,r2,916
1000e4a0:	1000e6a4 	muli	zero,r2,922
1000e4a4:	1000e4f4 	orhi	zero,r2,915
1000e4a8:	1000e6a4 	muli	zero,r2,922
1000e4ac:	1000e678 	rdprs	zero,r2,921
1000e4b0:	1000e6a4 	muli	zero,r2,922
1000e4b4:	1000e4f4 	orhi	zero,r2,915
1000e4b8:	1000e510 	cmplti	zero,r2,916
1000e4bc:	1000e510 	cmplti	zero,r2,916
1000e4c0:	1000e678 	rdprs	zero,r2,921
1000e4c4:	1000e4f4 	orhi	zero,r2,915
1000e4c8:	1000e504 	addi	zero,r2,916
1000e4cc:	1000e504 	addi	zero,r2,916
1000e4d0:	1000e504 	addi	zero,r2,916
1000e4d4:	1000e6b4 	orhi	zero,r2,922
1000e4d8:	8904b03a 	or	r2,r17,r4
1000e4dc:	1000631e 	bne	r2,zero,1000e66c <__divdf3+0x2c4>
1000e4e0:	05000204 	movi	r20,8
1000e4e4:	0023883a 	mov	r17,zero
1000e4e8:	0027883a 	mov	r19,zero
1000e4ec:	02000084 	movi	r8,2
1000e4f0:	003fcc06 	br	1000e424 <__alt_data_end+0xf800e424>
1000e4f4:	8023883a 	mov	r17,r16
1000e4f8:	a827883a 	mov	r19,r21
1000e4fc:	4839883a 	mov	fp,r9
1000e500:	3811883a 	mov	r8,r7
1000e504:	00800084 	movi	r2,2
1000e508:	4081531e 	bne	r8,r2,1000ea58 <__divdf3+0x6b0>
1000e50c:	e029883a 	mov	r20,fp
1000e510:	a180004c 	andi	r6,r20,1
1000e514:	0201ffc4 	movi	r8,2047
1000e518:	000b883a 	mov	r5,zero
1000e51c:	0027883a 	mov	r19,zero
1000e520:	4010953a 	slli	r8,r8,20
1000e524:	30c03fcc 	andi	r3,r6,255
1000e528:	04000434 	movhi	r16,16
1000e52c:	180697fa 	slli	r3,r3,31
1000e530:	843fffc4 	addi	r16,r16,-1
1000e534:	2c20703a 	and	r16,r5,r16
1000e538:	8220b03a 	or	r16,r16,r8
1000e53c:	80c6b03a 	or	r3,r16,r3
1000e540:	9805883a 	mov	r2,r19
1000e544:	dfc00f17 	ldw	ra,60(sp)
1000e548:	df000e17 	ldw	fp,56(sp)
1000e54c:	ddc00d17 	ldw	r23,52(sp)
1000e550:	dd800c17 	ldw	r22,48(sp)
1000e554:	dd400b17 	ldw	r21,44(sp)
1000e558:	dd000a17 	ldw	r20,40(sp)
1000e55c:	dcc00917 	ldw	r19,36(sp)
1000e560:	dc800817 	ldw	r18,32(sp)
1000e564:	dc400717 	ldw	r17,28(sp)
1000e568:	dc000617 	ldw	r16,24(sp)
1000e56c:	dec01004 	addi	sp,sp,64
1000e570:	f800283a 	ret
1000e574:	8904b03a 	or	r2,r17,r4
1000e578:	10003726 	beq	r2,zero,1000e658 <__divdf3+0x2b0>
1000e57c:	88014d26 	beq	r17,zero,1000eab4 <__divdf3+0x70c>
1000e580:	8809883a 	mov	r4,r17
1000e584:	d9800215 	stw	r6,8(sp)
1000e588:	d9c00515 	stw	r7,20(sp)
1000e58c:	00043300 	call	10004330 <__clzsi2>
1000e590:	d9800217 	ldw	r6,8(sp)
1000e594:	d9c00517 	ldw	r7,20(sp)
1000e598:	1007883a 	mov	r3,r2
1000e59c:	01000a04 	movi	r4,40
1000e5a0:	1cfffe04 	addi	r19,r3,-8
1000e5a4:	20c9c83a 	sub	r4,r4,r3
1000e5a8:	8cca983a 	sll	r5,r17,r19
1000e5ac:	a108d83a 	srl	r4,r20,r4
1000e5b0:	a4e6983a 	sll	r19,r20,r19
1000e5b4:	2162b03a 	or	r17,r4,r5
1000e5b8:	04bf0344 	movi	r18,-1011
1000e5bc:	90e5c83a 	sub	r18,r18,r3
1000e5c0:	0029883a 	mov	r20,zero
1000e5c4:	0011883a 	mov	r8,zero
1000e5c8:	003f9606 	br	1000e424 <__alt_data_end+0xf800e424>
1000e5cc:	8184b03a 	or	r2,r16,r6
1000e5d0:	10001f1e 	bne	r2,zero,1000e650 <__divdf3+0x2a8>
1000e5d4:	0021883a 	mov	r16,zero
1000e5d8:	002b883a 	mov	r21,zero
1000e5dc:	01c00084 	movi	r7,2
1000e5e0:	003fa206 	br	1000e46c <__alt_data_end+0xf800e46c>
1000e5e4:	8184b03a 	or	r2,r16,r6
1000e5e8:	10001526 	beq	r2,zero,1000e640 <__divdf3+0x298>
1000e5ec:	80013d26 	beq	r16,zero,1000eae4 <__divdf3+0x73c>
1000e5f0:	8009883a 	mov	r4,r16
1000e5f4:	d9800215 	stw	r6,8(sp)
1000e5f8:	da000315 	stw	r8,12(sp)
1000e5fc:	da400415 	stw	r9,16(sp)
1000e600:	00043300 	call	10004330 <__clzsi2>
1000e604:	d9800217 	ldw	r6,8(sp)
1000e608:	da000317 	ldw	r8,12(sp)
1000e60c:	da400417 	ldw	r9,16(sp)
1000e610:	1007883a 	mov	r3,r2
1000e614:	01000a04 	movi	r4,40
1000e618:	1d7ffe04 	addi	r21,r3,-8
1000e61c:	20c9c83a 	sub	r4,r4,r3
1000e620:	8560983a 	sll	r16,r16,r21
1000e624:	3108d83a 	srl	r4,r6,r4
1000e628:	356a983a 	sll	r21,r6,r21
1000e62c:	2420b03a 	or	r16,r4,r16
1000e630:	017f0344 	movi	r5,-1011
1000e634:	28cbc83a 	sub	r5,r5,r3
1000e638:	000f883a 	mov	r7,zero
1000e63c:	003f8b06 	br	1000e46c <__alt_data_end+0xf800e46c>
1000e640:	0021883a 	mov	r16,zero
1000e644:	002b883a 	mov	r21,zero
1000e648:	01c00044 	movi	r7,1
1000e64c:	003f8706 	br	1000e46c <__alt_data_end+0xf800e46c>
1000e650:	01c000c4 	movi	r7,3
1000e654:	003f8506 	br	1000e46c <__alt_data_end+0xf800e46c>
1000e658:	05000104 	movi	r20,4
1000e65c:	0023883a 	mov	r17,zero
1000e660:	0027883a 	mov	r19,zero
1000e664:	02000044 	movi	r8,1
1000e668:	003f6e06 	br	1000e424 <__alt_data_end+0xf800e424>
1000e66c:	05000304 	movi	r20,12
1000e670:	020000c4 	movi	r8,3
1000e674:	003f6b06 	br	1000e424 <__alt_data_end+0xf800e424>
1000e678:	01400434 	movhi	r5,16
1000e67c:	000d883a 	mov	r6,zero
1000e680:	297fffc4 	addi	r5,r5,-1
1000e684:	04ffffc4 	movi	r19,-1
1000e688:	0201ffc4 	movi	r8,2047
1000e68c:	003fa406 	br	1000e520 <__alt_data_end+0xf800e520>
1000e690:	043f0084 	movi	r16,-1022
1000e694:	84a1c83a 	sub	r16,r16,r18
1000e698:	00800e04 	movi	r2,56
1000e69c:	14014d0e 	bge	r2,r16,1000ebd4 <__divdf3+0x82c>
1000e6a0:	a180004c 	andi	r6,r20,1
1000e6a4:	0011883a 	mov	r8,zero
1000e6a8:	000b883a 	mov	r5,zero
1000e6ac:	0027883a 	mov	r19,zero
1000e6b0:	003f9b06 	br	1000e520 <__alt_data_end+0xf800e520>
1000e6b4:	8880022c 	andhi	r2,r17,8
1000e6b8:	1000f026 	beq	r2,zero,1000ea7c <__divdf3+0x6d4>
1000e6bc:	8080022c 	andhi	r2,r16,8
1000e6c0:	1000ee1e 	bne	r2,zero,1000ea7c <__divdf3+0x6d4>
1000e6c4:	00800434 	movhi	r2,16
1000e6c8:	81400234 	orhi	r5,r16,8
1000e6cc:	10bfffc4 	addi	r2,r2,-1
1000e6d0:	b80d883a 	mov	r6,r23
1000e6d4:	288a703a 	and	r5,r5,r2
1000e6d8:	a827883a 	mov	r19,r21
1000e6dc:	003fea06 	br	1000e688 <__alt_data_end+0xf800e688>
1000e6e0:	84411c36 	bltu	r16,r17,1000eb54 <__divdf3+0x7ac>
1000e6e4:	8c011a26 	beq	r17,r16,1000eb50 <__divdf3+0x7a8>
1000e6e8:	94bfffc4 	addi	r18,r18,-1
1000e6ec:	dcc00015 	stw	r19,0(sp)
1000e6f0:	8811883a 	mov	r8,r17
1000e6f4:	002d883a 	mov	r22,zero
1000e6f8:	a80cd63a 	srli	r6,r21,24
1000e6fc:	8020923a 	slli	r16,r16,8
1000e700:	a82a923a 	slli	r21,r21,8
1000e704:	4009883a 	mov	r4,r8
1000e708:	342eb03a 	or	r23,r6,r16
1000e70c:	dd400115 	stw	r21,4(sp)
1000e710:	b82ad43a 	srli	r21,r23,16
1000e714:	da000315 	stw	r8,12(sp)
1000e718:	bcffffcc 	andi	r19,r23,65535
1000e71c:	a80b883a 	mov	r5,r21
1000e720:	00030700 	call	10003070 <__udivsi3>
1000e724:	1009883a 	mov	r4,r2
1000e728:	980b883a 	mov	r5,r19
1000e72c:	1023883a 	mov	r17,r2
1000e730:	00030800 	call	10003080 <__mulsi3>
1000e734:	da000317 	ldw	r8,12(sp)
1000e738:	a80b883a 	mov	r5,r21
1000e73c:	1039883a 	mov	fp,r2
1000e740:	4009883a 	mov	r4,r8
1000e744:	00030780 	call	10003078 <__umodsi3>
1000e748:	d8c00017 	ldw	r3,0(sp)
1000e74c:	1004943a 	slli	r2,r2,16
1000e750:	1810d43a 	srli	r8,r3,16
1000e754:	120eb03a 	or	r7,r2,r8
1000e758:	3f00062e 	bgeu	r7,fp,1000e774 <__divdf3+0x3cc>
1000e75c:	3dcf883a 	add	r7,r7,r23
1000e760:	88bfffc4 	addi	r2,r17,-1
1000e764:	3dc10a36 	bltu	r7,r23,1000eb90 <__divdf3+0x7e8>
1000e768:	3f01092e 	bgeu	r7,fp,1000eb90 <__divdf3+0x7e8>
1000e76c:	8c7fff84 	addi	r17,r17,-2
1000e770:	3dcf883a 	add	r7,r7,r23
1000e774:	3f39c83a 	sub	fp,r7,fp
1000e778:	e009883a 	mov	r4,fp
1000e77c:	a80b883a 	mov	r5,r21
1000e780:	00030700 	call	10003070 <__udivsi3>
1000e784:	1009883a 	mov	r4,r2
1000e788:	980b883a 	mov	r5,r19
1000e78c:	1021883a 	mov	r16,r2
1000e790:	00030800 	call	10003080 <__mulsi3>
1000e794:	e009883a 	mov	r4,fp
1000e798:	a80b883a 	mov	r5,r21
1000e79c:	d8800315 	stw	r2,12(sp)
1000e7a0:	00030780 	call	10003078 <__umodsi3>
1000e7a4:	d9000017 	ldw	r4,0(sp)
1000e7a8:	1004943a 	slli	r2,r2,16
1000e7ac:	da000317 	ldw	r8,12(sp)
1000e7b0:	20ffffcc 	andi	r3,r4,65535
1000e7b4:	10ceb03a 	or	r7,r2,r3
1000e7b8:	3a00062e 	bgeu	r7,r8,1000e7d4 <__divdf3+0x42c>
1000e7bc:	3dcf883a 	add	r7,r7,r23
1000e7c0:	80bfffc4 	addi	r2,r16,-1
1000e7c4:	3dc0f036 	bltu	r7,r23,1000eb88 <__divdf3+0x7e0>
1000e7c8:	3a00ef2e 	bgeu	r7,r8,1000eb88 <__divdf3+0x7e0>
1000e7cc:	843fff84 	addi	r16,r16,-2
1000e7d0:	3dcf883a 	add	r7,r7,r23
1000e7d4:	d8c00117 	ldw	r3,4(sp)
1000e7d8:	8822943a 	slli	r17,r17,16
1000e7dc:	3a0fc83a 	sub	r7,r7,r8
1000e7e0:	1806d43a 	srli	r3,r3,16
1000e7e4:	8462b03a 	or	r17,r16,r17
1000e7e8:	8affffcc 	andi	r11,r17,65535
1000e7ec:	d8c00015 	stw	r3,0(sp)
1000e7f0:	d8c00117 	ldw	r3,4(sp)
1000e7f4:	8820d43a 	srli	r16,r17,16
1000e7f8:	5809883a 	mov	r4,r11
1000e7fc:	1f3fffcc 	andi	fp,r3,65535
1000e800:	e00b883a 	mov	r5,fp
1000e804:	d9c00515 	stw	r7,20(sp)
1000e808:	dac00215 	stw	r11,8(sp)
1000e80c:	00030800 	call	10003080 <__mulsi3>
1000e810:	8009883a 	mov	r4,r16
1000e814:	e00b883a 	mov	r5,fp
1000e818:	d8800415 	stw	r2,16(sp)
1000e81c:	00030800 	call	10003080 <__mulsi3>
1000e820:	d9400017 	ldw	r5,0(sp)
1000e824:	8009883a 	mov	r4,r16
1000e828:	d8800315 	stw	r2,12(sp)
1000e82c:	00030800 	call	10003080 <__mulsi3>
1000e830:	dac00217 	ldw	r11,8(sp)
1000e834:	d9400017 	ldw	r5,0(sp)
1000e838:	d8800215 	stw	r2,8(sp)
1000e83c:	5809883a 	mov	r4,r11
1000e840:	00030800 	call	10003080 <__mulsi3>
1000e844:	da400417 	ldw	r9,16(sp)
1000e848:	da800317 	ldw	r10,12(sp)
1000e84c:	d9c00517 	ldw	r7,20(sp)
1000e850:	480ad43a 	srli	r5,r9,16
1000e854:	5085883a 	add	r2,r10,r2
1000e858:	db000217 	ldw	r12,8(sp)
1000e85c:	1151883a 	add	r8,r2,r5
1000e860:	4280022e 	bgeu	r8,r10,1000e86c <__divdf3+0x4c4>
1000e864:	00800074 	movhi	r2,1
1000e868:	6099883a 	add	r12,r12,r2
1000e86c:	400ad43a 	srli	r5,r8,16
1000e870:	4010943a 	slli	r8,r8,16
1000e874:	4c3fffcc 	andi	r16,r9,65535
1000e878:	6149883a 	add	r4,r12,r5
1000e87c:	4411883a 	add	r8,r8,r16
1000e880:	3900a736 	bltu	r7,r4,1000eb20 <__divdf3+0x778>
1000e884:	3900c426 	beq	r7,r4,1000eb98 <__divdf3+0x7f0>
1000e888:	3909c83a 	sub	r4,r7,r4
1000e88c:	b221c83a 	sub	r16,r22,r8
1000e890:	b42d803a 	cmpltu	r22,r22,r16
1000e894:	25adc83a 	sub	r22,r4,r22
1000e898:	b5c0c626 	beq	r22,r23,1000ebb4 <__divdf3+0x80c>
1000e89c:	b009883a 	mov	r4,r22
1000e8a0:	a80b883a 	mov	r5,r21
1000e8a4:	00030700 	call	10003070 <__udivsi3>
1000e8a8:	1009883a 	mov	r4,r2
1000e8ac:	980b883a 	mov	r5,r19
1000e8b0:	d8800315 	stw	r2,12(sp)
1000e8b4:	00030800 	call	10003080 <__mulsi3>
1000e8b8:	a80b883a 	mov	r5,r21
1000e8bc:	b009883a 	mov	r4,r22
1000e8c0:	d8800415 	stw	r2,16(sp)
1000e8c4:	00030780 	call	10003078 <__umodsi3>
1000e8c8:	1004943a 	slli	r2,r2,16
1000e8cc:	800ed43a 	srli	r7,r16,16
1000e8d0:	da400417 	ldw	r9,16(sp)
1000e8d4:	da000317 	ldw	r8,12(sp)
1000e8d8:	11cab03a 	or	r5,r2,r7
1000e8dc:	2a40062e 	bgeu	r5,r9,1000e8f8 <__divdf3+0x550>
1000e8e0:	2dcb883a 	add	r5,r5,r23
1000e8e4:	40bfffc4 	addi	r2,r8,-1
1000e8e8:	2dc0b436 	bltu	r5,r23,1000ebbc <__divdf3+0x814>
1000e8ec:	2a40b32e 	bgeu	r5,r9,1000ebbc <__divdf3+0x814>
1000e8f0:	423fff84 	addi	r8,r8,-2
1000e8f4:	2dcb883a 	add	r5,r5,r23
1000e8f8:	2a6dc83a 	sub	r22,r5,r9
1000e8fc:	b009883a 	mov	r4,r22
1000e900:	a80b883a 	mov	r5,r21
1000e904:	da000315 	stw	r8,12(sp)
1000e908:	00030700 	call	10003070 <__udivsi3>
1000e90c:	980b883a 	mov	r5,r19
1000e910:	1009883a 	mov	r4,r2
1000e914:	d8800415 	stw	r2,16(sp)
1000e918:	00030800 	call	10003080 <__mulsi3>
1000e91c:	b009883a 	mov	r4,r22
1000e920:	a80b883a 	mov	r5,r21
1000e924:	1027883a 	mov	r19,r2
1000e928:	00030780 	call	10003078 <__umodsi3>
1000e92c:	1004943a 	slli	r2,r2,16
1000e930:	843fffcc 	andi	r16,r16,65535
1000e934:	da000317 	ldw	r8,12(sp)
1000e938:	140eb03a 	or	r7,r2,r16
1000e93c:	da400417 	ldw	r9,16(sp)
1000e940:	3cc0062e 	bgeu	r7,r19,1000e95c <__divdf3+0x5b4>
1000e944:	3dcf883a 	add	r7,r7,r23
1000e948:	48bfffc4 	addi	r2,r9,-1
1000e94c:	3dc09d36 	bltu	r7,r23,1000ebc4 <__divdf3+0x81c>
1000e950:	3cc09c2e 	bgeu	r7,r19,1000ebc4 <__divdf3+0x81c>
1000e954:	4a7fff84 	addi	r9,r9,-2
1000e958:	3dcf883a 	add	r7,r7,r23
1000e95c:	4010943a 	slli	r8,r8,16
1000e960:	3cebc83a 	sub	r21,r7,r19
1000e964:	e00b883a 	mov	r5,fp
1000e968:	4a26b03a 	or	r19,r9,r8
1000e96c:	99ffffcc 	andi	r7,r19,65535
1000e970:	9820d43a 	srli	r16,r19,16
1000e974:	3809883a 	mov	r4,r7
1000e978:	d9c00515 	stw	r7,20(sp)
1000e97c:	00030800 	call	10003080 <__mulsi3>
1000e980:	8009883a 	mov	r4,r16
1000e984:	e00b883a 	mov	r5,fp
1000e988:	102d883a 	mov	r22,r2
1000e98c:	00030800 	call	10003080 <__mulsi3>
1000e990:	d9400017 	ldw	r5,0(sp)
1000e994:	8009883a 	mov	r4,r16
1000e998:	1039883a 	mov	fp,r2
1000e99c:	00030800 	call	10003080 <__mulsi3>
1000e9a0:	d9c00517 	ldw	r7,20(sp)
1000e9a4:	d9400017 	ldw	r5,0(sp)
1000e9a8:	1021883a 	mov	r16,r2
1000e9ac:	3809883a 	mov	r4,r7
1000e9b0:	00030800 	call	10003080 <__mulsi3>
1000e9b4:	b008d43a 	srli	r4,r22,16
1000e9b8:	e085883a 	add	r2,fp,r2
1000e9bc:	1109883a 	add	r4,r2,r4
1000e9c0:	2700022e 	bgeu	r4,fp,1000e9cc <__divdf3+0x624>
1000e9c4:	00800074 	movhi	r2,1
1000e9c8:	80a1883a 	add	r16,r16,r2
1000e9cc:	200ad43a 	srli	r5,r4,16
1000e9d0:	2008943a 	slli	r4,r4,16
1000e9d4:	b5bfffcc 	andi	r22,r22,65535
1000e9d8:	8145883a 	add	r2,r16,r5
1000e9dc:	2589883a 	add	r4,r4,r22
1000e9e0:	a8802c36 	bltu	r21,r2,1000ea94 <__divdf3+0x6ec>
1000e9e4:	a880a426 	beq	r21,r2,1000ec78 <__divdf3+0x8d0>
1000e9e8:	9cc00054 	ori	r19,r19,1
1000e9ec:	9200ffc4 	addi	r8,r18,1023
1000e9f0:	023f270e 	bge	zero,r8,1000e690 <__alt_data_end+0xf800e690>
1000e9f4:	988001cc 	andi	r2,r19,7
1000e9f8:	10000726 	beq	r2,zero,1000ea18 <__divdf3+0x670>
1000e9fc:	990003cc 	andi	r4,r19,15
1000ea00:	00800104 	movi	r2,4
1000ea04:	20800426 	beq	r4,r2,1000ea18 <__divdf3+0x670>
1000ea08:	9885883a 	add	r2,r19,r2
1000ea0c:	14e7803a 	cmpltu	r19,r2,r19
1000ea10:	8ce3883a 	add	r17,r17,r19
1000ea14:	1027883a 	mov	r19,r2
1000ea18:	8880402c 	andhi	r2,r17,256
1000ea1c:	10000426 	beq	r2,zero,1000ea30 <__divdf3+0x688>
1000ea20:	00bfc034 	movhi	r2,65280
1000ea24:	10bfffc4 	addi	r2,r2,-1
1000ea28:	92010004 	addi	r8,r18,1024
1000ea2c:	88a2703a 	and	r17,r17,r2
1000ea30:	0081ff84 	movi	r2,2046
1000ea34:	123eb616 	blt	r2,r8,1000e510 <__alt_data_end+0xf800e510>
1000ea38:	9826d0fa 	srli	r19,r19,3
1000ea3c:	8804977a 	slli	r2,r17,29
1000ea40:	8820927a 	slli	r16,r17,9
1000ea44:	4201ffcc 	andi	r8,r8,2047
1000ea48:	14e6b03a 	or	r19,r2,r19
1000ea4c:	800ad33a 	srli	r5,r16,12
1000ea50:	a180004c 	andi	r6,r20,1
1000ea54:	003eb206 	br	1000e520 <__alt_data_end+0xf800e520>
1000ea58:	008000c4 	movi	r2,3
1000ea5c:	4080ac26 	beq	r8,r2,1000ed10 <__divdf3+0x968>
1000ea60:	00800044 	movi	r2,1
1000ea64:	4080591e 	bne	r8,r2,1000ebcc <__divdf3+0x824>
1000ea68:	e00d883a 	mov	r6,fp
1000ea6c:	0011883a 	mov	r8,zero
1000ea70:	000b883a 	mov	r5,zero
1000ea74:	0027883a 	mov	r19,zero
1000ea78:	003ea906 	br	1000e520 <__alt_data_end+0xf800e520>
1000ea7c:	00800434 	movhi	r2,16
1000ea80:	89400234 	orhi	r5,r17,8
1000ea84:	10bfffc4 	addi	r2,r2,-1
1000ea88:	b00d883a 	mov	r6,r22
1000ea8c:	288a703a 	and	r5,r5,r2
1000ea90:	003efd06 	br	1000e688 <__alt_data_end+0xf800e688>
1000ea94:	adcf883a 	add	r7,r21,r23
1000ea98:	997fffc4 	addi	r5,r19,-1
1000ea9c:	3dc0412e 	bgeu	r7,r23,1000eba4 <__divdf3+0x7fc>
1000eaa0:	2827883a 	mov	r19,r5
1000eaa4:	38bfd01e 	bne	r7,r2,1000e9e8 <__alt_data_end+0xf800e9e8>
1000eaa8:	d8c00117 	ldw	r3,4(sp)
1000eaac:	193fce1e 	bne	r3,r4,1000e9e8 <__alt_data_end+0xf800e9e8>
1000eab0:	003fce06 	br	1000e9ec <__alt_data_end+0xf800e9ec>
1000eab4:	d9800215 	stw	r6,8(sp)
1000eab8:	d9c00515 	stw	r7,20(sp)
1000eabc:	00043300 	call	10004330 <__clzsi2>
1000eac0:	10c00804 	addi	r3,r2,32
1000eac4:	010009c4 	movi	r4,39
1000eac8:	d9800217 	ldw	r6,8(sp)
1000eacc:	d9c00517 	ldw	r7,20(sp)
1000ead0:	20feb20e 	bge	r4,r3,1000e59c <__alt_data_end+0xf800e59c>
1000ead4:	117ffe04 	addi	r5,r2,-8
1000ead8:	a162983a 	sll	r17,r20,r5
1000eadc:	0027883a 	mov	r19,zero
1000eae0:	003eb506 	br	1000e5b8 <__alt_data_end+0xf800e5b8>
1000eae4:	3009883a 	mov	r4,r6
1000eae8:	d9800215 	stw	r6,8(sp)
1000eaec:	da000315 	stw	r8,12(sp)
1000eaf0:	da400415 	stw	r9,16(sp)
1000eaf4:	00043300 	call	10004330 <__clzsi2>
1000eaf8:	10c00804 	addi	r3,r2,32
1000eafc:	010009c4 	movi	r4,39
1000eb00:	d9800217 	ldw	r6,8(sp)
1000eb04:	da000317 	ldw	r8,12(sp)
1000eb08:	da400417 	ldw	r9,16(sp)
1000eb0c:	20fec10e 	bge	r4,r3,1000e614 <__alt_data_end+0xf800e614>
1000eb10:	10bffe04 	addi	r2,r2,-8
1000eb14:	a8a0983a 	sll	r16,r21,r2
1000eb18:	002b883a 	mov	r21,zero
1000eb1c:	003ec406 	br	1000e630 <__alt_data_end+0xf800e630>
1000eb20:	d8c00117 	ldw	r3,4(sp)
1000eb24:	b0ed883a 	add	r22,r22,r3
1000eb28:	b0c5803a 	cmpltu	r2,r22,r3
1000eb2c:	15c5883a 	add	r2,r2,r23
1000eb30:	11cf883a 	add	r7,r2,r7
1000eb34:	88bfffc4 	addi	r2,r17,-1
1000eb38:	b9c00d2e 	bgeu	r23,r7,1000eb70 <__divdf3+0x7c8>
1000eb3c:	39003f36 	bltu	r7,r4,1000ec3c <__divdf3+0x894>
1000eb40:	21c06a26 	beq	r4,r7,1000ecec <__divdf3+0x944>
1000eb44:	3909c83a 	sub	r4,r7,r4
1000eb48:	1023883a 	mov	r17,r2
1000eb4c:	003f4f06 	br	1000e88c <__alt_data_end+0xf800e88c>
1000eb50:	9d7ee536 	bltu	r19,r21,1000e6e8 <__alt_data_end+0xf800e6e8>
1000eb54:	982ed07a 	srli	r23,r19,1
1000eb58:	880497fa 	slli	r2,r17,31
1000eb5c:	8810d07a 	srli	r8,r17,1
1000eb60:	982c97fa 	slli	r22,r19,31
1000eb64:	b884b03a 	or	r2,r23,r2
1000eb68:	d8800015 	stw	r2,0(sp)
1000eb6c:	003ee206 	br	1000e6f8 <__alt_data_end+0xf800e6f8>
1000eb70:	3dfff41e 	bne	r7,r23,1000eb44 <__alt_data_end+0xf800eb44>
1000eb74:	d8c00117 	ldw	r3,4(sp)
1000eb78:	b0fff02e 	bgeu	r22,r3,1000eb3c <__alt_data_end+0xf800eb3c>
1000eb7c:	b909c83a 	sub	r4,r23,r4
1000eb80:	1023883a 	mov	r17,r2
1000eb84:	003f4106 	br	1000e88c <__alt_data_end+0xf800e88c>
1000eb88:	1021883a 	mov	r16,r2
1000eb8c:	003f1106 	br	1000e7d4 <__alt_data_end+0xf800e7d4>
1000eb90:	1023883a 	mov	r17,r2
1000eb94:	003ef706 	br	1000e774 <__alt_data_end+0xf800e774>
1000eb98:	b23fe136 	bltu	r22,r8,1000eb20 <__alt_data_end+0xf800eb20>
1000eb9c:	0009883a 	mov	r4,zero
1000eba0:	003f3a06 	br	1000e88c <__alt_data_end+0xf800e88c>
1000eba4:	38802c36 	bltu	r7,r2,1000ec58 <__divdf3+0x8b0>
1000eba8:	11c05326 	beq	r2,r7,1000ecf8 <__divdf3+0x950>
1000ebac:	2827883a 	mov	r19,r5
1000ebb0:	003f8d06 	br	1000e9e8 <__alt_data_end+0xf800e9e8>
1000ebb4:	04ffffc4 	movi	r19,-1
1000ebb8:	003f8c06 	br	1000e9ec <__alt_data_end+0xf800e9ec>
1000ebbc:	1011883a 	mov	r8,r2
1000ebc0:	003f4d06 	br	1000e8f8 <__alt_data_end+0xf800e8f8>
1000ebc4:	1013883a 	mov	r9,r2
1000ebc8:	003f6406 	br	1000e95c <__alt_data_end+0xf800e95c>
1000ebcc:	e029883a 	mov	r20,fp
1000ebd0:	003f8606 	br	1000e9ec <__alt_data_end+0xf800e9ec>
1000ebd4:	008007c4 	movi	r2,31
1000ebd8:	14002a16 	blt	r2,r16,1000ec84 <__divdf3+0x8dc>
1000ebdc:	91410784 	addi	r5,r18,1054
1000ebe0:	9c0cd83a 	srl	r6,r19,r16
1000ebe4:	8948983a 	sll	r4,r17,r5
1000ebe8:	9944983a 	sll	r2,r19,r5
1000ebec:	8c20d83a 	srl	r16,r17,r16
1000ebf0:	3108b03a 	or	r4,r6,r4
1000ebf4:	1004c03a 	cmpne	r2,r2,zero
1000ebf8:	2084b03a 	or	r2,r4,r2
1000ebfc:	110001cc 	andi	r4,r2,7
1000ec00:	20000726 	beq	r4,zero,1000ec20 <__divdf3+0x878>
1000ec04:	114003cc 	andi	r5,r2,15
1000ec08:	01000104 	movi	r4,4
1000ec0c:	29000426 	beq	r5,r4,1000ec20 <__divdf3+0x878>
1000ec10:	11000104 	addi	r4,r2,4
1000ec14:	2085803a 	cmpltu	r2,r4,r2
1000ec18:	80a1883a 	add	r16,r16,r2
1000ec1c:	2005883a 	mov	r2,r4
1000ec20:	8100202c 	andhi	r4,r16,128
1000ec24:	20002d26 	beq	r4,zero,1000ecdc <__divdf3+0x934>
1000ec28:	a180004c 	andi	r6,r20,1
1000ec2c:	02000044 	movi	r8,1
1000ec30:	000b883a 	mov	r5,zero
1000ec34:	0027883a 	mov	r19,zero
1000ec38:	003e3906 	br	1000e520 <__alt_data_end+0xf800e520>
1000ec3c:	d8c00117 	ldw	r3,4(sp)
1000ec40:	8c7fff84 	addi	r17,r17,-2
1000ec44:	b0ed883a 	add	r22,r22,r3
1000ec48:	b0c5803a 	cmpltu	r2,r22,r3
1000ec4c:	15c5883a 	add	r2,r2,r23
1000ec50:	11cf883a 	add	r7,r2,r7
1000ec54:	003f0c06 	br	1000e888 <__alt_data_end+0xf800e888>
1000ec58:	d8c00117 	ldw	r3,4(sp)
1000ec5c:	997fff84 	addi	r5,r19,-2
1000ec60:	18d1883a 	add	r8,r3,r3
1000ec64:	40c7803a 	cmpltu	r3,r8,r3
1000ec68:	1dcd883a 	add	r6,r3,r23
1000ec6c:	398f883a 	add	r7,r7,r6
1000ec70:	da000115 	stw	r8,4(sp)
1000ec74:	003f8a06 	br	1000eaa0 <__alt_data_end+0xf800eaa0>
1000ec78:	203f861e 	bne	r4,zero,1000ea94 <__alt_data_end+0xf800ea94>
1000ec7c:	d8000115 	stw	zero,4(sp)
1000ec80:	003f8906 	br	1000eaa8 <__alt_data_end+0xf800eaa8>
1000ec84:	00bef884 	movi	r2,-1054
1000ec88:	1485c83a 	sub	r2,r2,r18
1000ec8c:	01000804 	movi	r4,32
1000ec90:	8884d83a 	srl	r2,r17,r2
1000ec94:	81001c26 	beq	r16,r4,1000ed08 <__divdf3+0x960>
1000ec98:	91010f84 	addi	r4,r18,1086
1000ec9c:	8908983a 	sll	r4,r17,r4
1000eca0:	24c8b03a 	or	r4,r4,r19
1000eca4:	2008c03a 	cmpne	r4,r4,zero
1000eca8:	2084b03a 	or	r2,r4,r2
1000ecac:	140001cc 	andi	r16,r2,7
1000ecb0:	8000061e 	bne	r16,zero,1000eccc <__divdf3+0x924>
1000ecb4:	000b883a 	mov	r5,zero
1000ecb8:	1004d0fa 	srli	r2,r2,3
1000ecbc:	a180004c 	andi	r6,r20,1
1000ecc0:	0011883a 	mov	r8,zero
1000ecc4:	1426b03a 	or	r19,r2,r16
1000ecc8:	003e1506 	br	1000e520 <__alt_data_end+0xf800e520>
1000eccc:	114003cc 	andi	r5,r2,15
1000ecd0:	01000104 	movi	r4,4
1000ecd4:	0021883a 	mov	r16,zero
1000ecd8:	293fcd1e 	bne	r5,r4,1000ec10 <__alt_data_end+0xf800ec10>
1000ecdc:	800a927a 	slli	r5,r16,9
1000ece0:	8020977a 	slli	r16,r16,29
1000ece4:	280ad33a 	srli	r5,r5,12
1000ece8:	003ff306 	br	1000ecb8 <__alt_data_end+0xf800ecb8>
1000ecec:	b23fd336 	bltu	r22,r8,1000ec3c <__alt_data_end+0xf800ec3c>
1000ecf0:	1023883a 	mov	r17,r2
1000ecf4:	003fa906 	br	1000eb9c <__alt_data_end+0xf800eb9c>
1000ecf8:	d8c00117 	ldw	r3,4(sp)
1000ecfc:	193fd636 	bltu	r3,r4,1000ec58 <__alt_data_end+0xf800ec58>
1000ed00:	2827883a 	mov	r19,r5
1000ed04:	003f6806 	br	1000eaa8 <__alt_data_end+0xf800eaa8>
1000ed08:	0009883a 	mov	r4,zero
1000ed0c:	003fe406 	br	1000eca0 <__alt_data_end+0xf800eca0>
1000ed10:	00800434 	movhi	r2,16
1000ed14:	89400234 	orhi	r5,r17,8
1000ed18:	10bfffc4 	addi	r2,r2,-1
1000ed1c:	e00d883a 	mov	r6,fp
1000ed20:	288a703a 	and	r5,r5,r2
1000ed24:	003e5806 	br	1000e688 <__alt_data_end+0xf800e688>

1000ed28 <__eqdf2>:
1000ed28:	2804d53a 	srli	r2,r5,20
1000ed2c:	3806d53a 	srli	r3,r7,20
1000ed30:	02000434 	movhi	r8,16
1000ed34:	423fffc4 	addi	r8,r8,-1
1000ed38:	1081ffcc 	andi	r2,r2,2047
1000ed3c:	0241ffc4 	movi	r9,2047
1000ed40:	2a14703a 	and	r10,r5,r8
1000ed44:	18c1ffcc 	andi	r3,r3,2047
1000ed48:	3a10703a 	and	r8,r7,r8
1000ed4c:	280ad7fa 	srli	r5,r5,31
1000ed50:	380ed7fa 	srli	r7,r7,31
1000ed54:	12400f26 	beq	r2,r9,1000ed94 <__eqdf2+0x6c>
1000ed58:	0241ffc4 	movi	r9,2047
1000ed5c:	1a400326 	beq	r3,r9,1000ed6c <__eqdf2+0x44>
1000ed60:	10c00526 	beq	r2,r3,1000ed78 <__eqdf2+0x50>
1000ed64:	00800044 	movi	r2,1
1000ed68:	f800283a 	ret
1000ed6c:	4192b03a 	or	r9,r8,r6
1000ed70:	483ffc1e 	bne	r9,zero,1000ed64 <__alt_data_end+0xf800ed64>
1000ed74:	10fffb1e 	bne	r2,r3,1000ed64 <__alt_data_end+0xf800ed64>
1000ed78:	523ffa1e 	bne	r10,r8,1000ed64 <__alt_data_end+0xf800ed64>
1000ed7c:	21bff91e 	bne	r4,r6,1000ed64 <__alt_data_end+0xf800ed64>
1000ed80:	29c00826 	beq	r5,r7,1000eda4 <__eqdf2+0x7c>
1000ed84:	103ff71e 	bne	r2,zero,1000ed64 <__alt_data_end+0xf800ed64>
1000ed88:	5104b03a 	or	r2,r10,r4
1000ed8c:	1004c03a 	cmpne	r2,r2,zero
1000ed90:	f800283a 	ret
1000ed94:	5112b03a 	or	r9,r10,r4
1000ed98:	483fef26 	beq	r9,zero,1000ed58 <__alt_data_end+0xf800ed58>
1000ed9c:	00800044 	movi	r2,1
1000eda0:	f800283a 	ret
1000eda4:	0005883a 	mov	r2,zero
1000eda8:	f800283a 	ret

1000edac <__gedf2>:
1000edac:	2804d53a 	srli	r2,r5,20
1000edb0:	3806d53a 	srli	r3,r7,20
1000edb4:	02000434 	movhi	r8,16
1000edb8:	423fffc4 	addi	r8,r8,-1
1000edbc:	0241ffc4 	movi	r9,2047
1000edc0:	1081ffcc 	andi	r2,r2,2047
1000edc4:	2a14703a 	and	r10,r5,r8
1000edc8:	1a46703a 	and	r3,r3,r9
1000edcc:	3a10703a 	and	r8,r7,r8
1000edd0:	280ad7fa 	srli	r5,r5,31
1000edd4:	380ed7fa 	srli	r7,r7,31
1000edd8:	12400b26 	beq	r2,r9,1000ee08 <__gedf2+0x5c>
1000eddc:	1a401626 	beq	r3,r9,1000ee38 <__gedf2+0x8c>
1000ede0:	10000c1e 	bne	r2,zero,1000ee14 <__gedf2+0x68>
1000ede4:	5112b03a 	or	r9,r10,r4
1000ede8:	4813003a 	cmpeq	r9,r9,zero
1000edec:	4817883a 	mov	r11,r9
1000edf0:	18000c1e 	bne	r3,zero,1000ee24 <__gedf2+0x78>
1000edf4:	4198b03a 	or	r12,r8,r6
1000edf8:	60000a1e 	bne	r12,zero,1000ee24 <__gedf2+0x78>
1000edfc:	48001326 	beq	r9,zero,1000ee4c <__gedf2+0xa0>
1000ee00:	0005883a 	mov	r2,zero
1000ee04:	f800283a 	ret
1000ee08:	5112b03a 	or	r9,r10,r4
1000ee0c:	4800191e 	bne	r9,zero,1000ee74 <__gedf2+0xc8>
1000ee10:	18800926 	beq	r3,r2,1000ee38 <__gedf2+0x8c>
1000ee14:	18000b1e 	bne	r3,zero,1000ee44 <__gedf2+0x98>
1000ee18:	4192b03a 	or	r9,r8,r6
1000ee1c:	0017883a 	mov	r11,zero
1000ee20:	48000a26 	beq	r9,zero,1000ee4c <__gedf2+0xa0>
1000ee24:	39c03fcc 	andi	r7,r7,255
1000ee28:	58000726 	beq	r11,zero,1000ee48 <__gedf2+0x9c>
1000ee2c:	3800081e 	bne	r7,zero,1000ee50 <__gedf2+0xa4>
1000ee30:	00bfffc4 	movi	r2,-1
1000ee34:	f800283a 	ret
1000ee38:	4192b03a 	or	r9,r8,r6
1000ee3c:	48000d1e 	bne	r9,zero,1000ee74 <__gedf2+0xc8>
1000ee40:	103fe826 	beq	r2,zero,1000ede4 <__alt_data_end+0xf800ede4>
1000ee44:	39c03fcc 	andi	r7,r7,255
1000ee48:	29c00326 	beq	r5,r7,1000ee58 <__gedf2+0xac>
1000ee4c:	283ff81e 	bne	r5,zero,1000ee30 <__alt_data_end+0xf800ee30>
1000ee50:	00800044 	movi	r2,1
1000ee54:	f800283a 	ret
1000ee58:	18bffc16 	blt	r3,r2,1000ee4c <__alt_data_end+0xf800ee4c>
1000ee5c:	10c00316 	blt	r2,r3,1000ee6c <__gedf2+0xc0>
1000ee60:	42bffa36 	bltu	r8,r10,1000ee4c <__alt_data_end+0xf800ee4c>
1000ee64:	52000526 	beq	r10,r8,1000ee7c <__gedf2+0xd0>
1000ee68:	523fe52e 	bgeu	r10,r8,1000ee00 <__alt_data_end+0xf800ee00>
1000ee6c:	283ff026 	beq	r5,zero,1000ee30 <__alt_data_end+0xf800ee30>
1000ee70:	003ff706 	br	1000ee50 <__alt_data_end+0xf800ee50>
1000ee74:	00bfff84 	movi	r2,-2
1000ee78:	f800283a 	ret
1000ee7c:	313ff336 	bltu	r6,r4,1000ee4c <__alt_data_end+0xf800ee4c>
1000ee80:	21bfdf2e 	bgeu	r4,r6,1000ee00 <__alt_data_end+0xf800ee00>
1000ee84:	283fea26 	beq	r5,zero,1000ee30 <__alt_data_end+0xf800ee30>
1000ee88:	003ff106 	br	1000ee50 <__alt_data_end+0xf800ee50>

1000ee8c <__ledf2>:
1000ee8c:	2804d53a 	srli	r2,r5,20
1000ee90:	3810d53a 	srli	r8,r7,20
1000ee94:	00c00434 	movhi	r3,16
1000ee98:	18ffffc4 	addi	r3,r3,-1
1000ee9c:	0241ffc4 	movi	r9,2047
1000eea0:	1081ffcc 	andi	r2,r2,2047
1000eea4:	28d4703a 	and	r10,r5,r3
1000eea8:	4250703a 	and	r8,r8,r9
1000eeac:	38c6703a 	and	r3,r7,r3
1000eeb0:	280ad7fa 	srli	r5,r5,31
1000eeb4:	380ed7fa 	srli	r7,r7,31
1000eeb8:	12400b26 	beq	r2,r9,1000eee8 <__ledf2+0x5c>
1000eebc:	42401926 	beq	r8,r9,1000ef24 <__ledf2+0x98>
1000eec0:	10000c1e 	bne	r2,zero,1000eef4 <__ledf2+0x68>
1000eec4:	5112b03a 	or	r9,r10,r4
1000eec8:	4813003a 	cmpeq	r9,r9,zero
1000eecc:	4817883a 	mov	r11,r9
1000eed0:	40000f26 	beq	r8,zero,1000ef10 <__ledf2+0x84>
1000eed4:	39c03fcc 	andi	r7,r7,255
1000eed8:	58001826 	beq	r11,zero,1000ef3c <__ledf2+0xb0>
1000eedc:	38000a1e 	bne	r7,zero,1000ef08 <__ledf2+0x7c>
1000eee0:	00bfffc4 	movi	r2,-1
1000eee4:	f800283a 	ret
1000eee8:	5112b03a 	or	r9,r10,r4
1000eeec:	48000f1e 	bne	r9,zero,1000ef2c <__ledf2+0xa0>
1000eef0:	40800c26 	beq	r8,r2,1000ef24 <__ledf2+0x98>
1000eef4:	4000101e 	bne	r8,zero,1000ef38 <__ledf2+0xac>
1000eef8:	1992b03a 	or	r9,r3,r6
1000eefc:	0017883a 	mov	r11,zero
1000ef00:	483ff41e 	bne	r9,zero,1000eed4 <__alt_data_end+0xf800eed4>
1000ef04:	283ff61e 	bne	r5,zero,1000eee0 <__alt_data_end+0xf800eee0>
1000ef08:	00800044 	movi	r2,1
1000ef0c:	f800283a 	ret
1000ef10:	1998b03a 	or	r12,r3,r6
1000ef14:	603fef1e 	bne	r12,zero,1000eed4 <__alt_data_end+0xf800eed4>
1000ef18:	483ffa26 	beq	r9,zero,1000ef04 <__alt_data_end+0xf800ef04>
1000ef1c:	0005883a 	mov	r2,zero
1000ef20:	f800283a 	ret
1000ef24:	1992b03a 	or	r9,r3,r6
1000ef28:	48000226 	beq	r9,zero,1000ef34 <__ledf2+0xa8>
1000ef2c:	00800084 	movi	r2,2
1000ef30:	f800283a 	ret
1000ef34:	103fe326 	beq	r2,zero,1000eec4 <__alt_data_end+0xf800eec4>
1000ef38:	39c03fcc 	andi	r7,r7,255
1000ef3c:	29fff11e 	bne	r5,r7,1000ef04 <__alt_data_end+0xf800ef04>
1000ef40:	40bff016 	blt	r8,r2,1000ef04 <__alt_data_end+0xf800ef04>
1000ef44:	12000316 	blt	r2,r8,1000ef54 <__ledf2+0xc8>
1000ef48:	1abfee36 	bltu	r3,r10,1000ef04 <__alt_data_end+0xf800ef04>
1000ef4c:	50c00326 	beq	r10,r3,1000ef5c <__ledf2+0xd0>
1000ef50:	50fff22e 	bgeu	r10,r3,1000ef1c <__alt_data_end+0xf800ef1c>
1000ef54:	283fe226 	beq	r5,zero,1000eee0 <__alt_data_end+0xf800eee0>
1000ef58:	003feb06 	br	1000ef08 <__alt_data_end+0xf800ef08>
1000ef5c:	313fe936 	bltu	r6,r4,1000ef04 <__alt_data_end+0xf800ef04>
1000ef60:	21bfee2e 	bgeu	r4,r6,1000ef1c <__alt_data_end+0xf800ef1c>
1000ef64:	283fde26 	beq	r5,zero,1000eee0 <__alt_data_end+0xf800eee0>
1000ef68:	003fe706 	br	1000ef08 <__alt_data_end+0xf800ef08>

1000ef6c <__muldf3>:
1000ef6c:	deffee04 	addi	sp,sp,-72
1000ef70:	dd000c15 	stw	r20,48(sp)
1000ef74:	2828d53a 	srli	r20,r5,20
1000ef78:	dd400d15 	stw	r21,52(sp)
1000ef7c:	282ad7fa 	srli	r21,r5,31
1000ef80:	dc000815 	stw	r16,32(sp)
1000ef84:	04000434 	movhi	r16,16
1000ef88:	ddc00f15 	stw	r23,60(sp)
1000ef8c:	dcc00b15 	stw	r19,44(sp)
1000ef90:	dc800a15 	stw	r18,40(sp)
1000ef94:	843fffc4 	addi	r16,r16,-1
1000ef98:	dfc01115 	stw	ra,68(sp)
1000ef9c:	df001015 	stw	fp,64(sp)
1000efa0:	dd800e15 	stw	r22,56(sp)
1000efa4:	dc400915 	stw	r17,36(sp)
1000efa8:	a501ffcc 	andi	r20,r20,2047
1000efac:	2025883a 	mov	r18,r4
1000efb0:	202f883a 	mov	r23,r4
1000efb4:	2c20703a 	and	r16,r5,r16
1000efb8:	a827883a 	mov	r19,r21
1000efbc:	aa403fcc 	andi	r9,r21,255
1000efc0:	a0005926 	beq	r20,zero,1000f128 <__muldf3+0x1bc>
1000efc4:	0081ffc4 	movi	r2,2047
1000efc8:	a0803426 	beq	r20,r2,1000f09c <__muldf3+0x130>
1000efcc:	84000434 	orhi	r16,r16,16
1000efd0:	2004d77a 	srli	r2,r4,29
1000efd4:	802090fa 	slli	r16,r16,3
1000efd8:	202e90fa 	slli	r23,r4,3
1000efdc:	a53f0044 	addi	r20,r20,-1023
1000efe0:	80a0b03a 	or	r16,r16,r2
1000efe4:	000b883a 	mov	r5,zero
1000efe8:	0039883a 	mov	fp,zero
1000efec:	3806d53a 	srli	r3,r7,20
1000eff0:	382cd7fa 	srli	r22,r7,31
1000eff4:	00800434 	movhi	r2,16
1000eff8:	10bfffc4 	addi	r2,r2,-1
1000effc:	18c1ffcc 	andi	r3,r3,2047
1000f000:	3025883a 	mov	r18,r6
1000f004:	38a2703a 	and	r17,r7,r2
1000f008:	b2803fcc 	andi	r10,r22,255
1000f00c:	18006426 	beq	r3,zero,1000f1a0 <__muldf3+0x234>
1000f010:	0081ffc4 	movi	r2,2047
1000f014:	18805c26 	beq	r3,r2,1000f188 <__muldf3+0x21c>
1000f018:	8c400434 	orhi	r17,r17,16
1000f01c:	3004d77a 	srli	r2,r6,29
1000f020:	882290fa 	slli	r17,r17,3
1000f024:	302490fa 	slli	r18,r6,3
1000f028:	18ff0044 	addi	r3,r3,-1023
1000f02c:	88a2b03a 	or	r17,r17,r2
1000f030:	000f883a 	mov	r7,zero
1000f034:	394ab03a 	or	r5,r7,r5
1000f038:	280a90ba 	slli	r5,r5,2
1000f03c:	00840074 	movhi	r2,4097
1000f040:	10bc1704 	addi	r2,r2,-4004
1000f044:	288b883a 	add	r5,r5,r2
1000f048:	28800017 	ldw	r2,0(r5)
1000f04c:	a0c7883a 	add	r3,r20,r3
1000f050:	b54cf03a 	xor	r6,r22,r21
1000f054:	1a000044 	addi	r8,r3,1
1000f058:	1000683a 	jmp	r2
1000f05c:	1000f2a0 	cmpeqi	zero,r2,970
1000f060:	1000f28c 	andi	zero,r2,970
1000f064:	1000f28c 	andi	zero,r2,970
1000f068:	1000f278 	rdprs	zero,r2,969
1000f06c:	1000f0b8 	rdprs	zero,r2,962
1000f070:	1000f0b8 	rdprs	zero,r2,962
1000f074:	1000f260 	cmpeqi	zero,r2,969
1000f078:	1000f278 	rdprs	zero,r2,969
1000f07c:	1000f0b8 	rdprs	zero,r2,962
1000f080:	1000f260 	cmpeqi	zero,r2,969
1000f084:	1000f0b8 	rdprs	zero,r2,962
1000f088:	1000f278 	rdprs	zero,r2,969
1000f08c:	1000f0bc 	xorhi	zero,r2,962
1000f090:	1000f0bc 	xorhi	zero,r2,962
1000f094:	1000f0bc 	xorhi	zero,r2,962
1000f098:	1000f5dc 	xori	zero,r2,983
1000f09c:	8104b03a 	or	r2,r16,r4
1000f0a0:	10006c1e 	bne	r2,zero,1000f254 <__muldf3+0x2e8>
1000f0a4:	01400204 	movi	r5,8
1000f0a8:	0021883a 	mov	r16,zero
1000f0ac:	002f883a 	mov	r23,zero
1000f0b0:	07000084 	movi	fp,2
1000f0b4:	003fcd06 	br	1000efec <__alt_data_end+0xf800efec>
1000f0b8:	3013883a 	mov	r9,r6
1000f0bc:	00800084 	movi	r2,2
1000f0c0:	e080501e 	bne	fp,r2,1000f204 <__muldf3+0x298>
1000f0c4:	4cc0004c 	andi	r19,r9,1
1000f0c8:	0101ffc4 	movi	r4,2047
1000f0cc:	0021883a 	mov	r16,zero
1000f0d0:	002f883a 	mov	r23,zero
1000f0d4:	2008953a 	slli	r4,r4,20
1000f0d8:	98c03fcc 	andi	r3,r19,255
1000f0dc:	04400434 	movhi	r17,16
1000f0e0:	8c7fffc4 	addi	r17,r17,-1
1000f0e4:	180697fa 	slli	r3,r3,31
1000f0e8:	8460703a 	and	r16,r16,r17
1000f0ec:	8120b03a 	or	r16,r16,r4
1000f0f0:	80c6b03a 	or	r3,r16,r3
1000f0f4:	b805883a 	mov	r2,r23
1000f0f8:	dfc01117 	ldw	ra,68(sp)
1000f0fc:	df001017 	ldw	fp,64(sp)
1000f100:	ddc00f17 	ldw	r23,60(sp)
1000f104:	dd800e17 	ldw	r22,56(sp)
1000f108:	dd400d17 	ldw	r21,52(sp)
1000f10c:	dd000c17 	ldw	r20,48(sp)
1000f110:	dcc00b17 	ldw	r19,44(sp)
1000f114:	dc800a17 	ldw	r18,40(sp)
1000f118:	dc400917 	ldw	r17,36(sp)
1000f11c:	dc000817 	ldw	r16,32(sp)
1000f120:	dec01204 	addi	sp,sp,72
1000f124:	f800283a 	ret
1000f128:	8104b03a 	or	r2,r16,r4
1000f12c:	10004426 	beq	r2,zero,1000f240 <__muldf3+0x2d4>
1000f130:	80014b26 	beq	r16,zero,1000f660 <__muldf3+0x6f4>
1000f134:	8009883a 	mov	r4,r16
1000f138:	d9800715 	stw	r6,28(sp)
1000f13c:	d9c00215 	stw	r7,8(sp)
1000f140:	da400415 	stw	r9,16(sp)
1000f144:	00043300 	call	10004330 <__clzsi2>
1000f148:	d9800717 	ldw	r6,28(sp)
1000f14c:	d9c00217 	ldw	r7,8(sp)
1000f150:	da400417 	ldw	r9,16(sp)
1000f154:	1007883a 	mov	r3,r2
1000f158:	01000a04 	movi	r4,40
1000f15c:	1dfffe04 	addi	r23,r3,-8
1000f160:	20c9c83a 	sub	r4,r4,r3
1000f164:	85e0983a 	sll	r16,r16,r23
1000f168:	9108d83a 	srl	r4,r18,r4
1000f16c:	95ee983a 	sll	r23,r18,r23
1000f170:	2420b03a 	or	r16,r4,r16
1000f174:	053f0344 	movi	r20,-1011
1000f178:	a0e9c83a 	sub	r20,r20,r3
1000f17c:	000b883a 	mov	r5,zero
1000f180:	0039883a 	mov	fp,zero
1000f184:	003f9906 	br	1000efec <__alt_data_end+0xf800efec>
1000f188:	8984b03a 	or	r2,r17,r6
1000f18c:	10002a1e 	bne	r2,zero,1000f238 <__muldf3+0x2cc>
1000f190:	0023883a 	mov	r17,zero
1000f194:	0025883a 	mov	r18,zero
1000f198:	01c00084 	movi	r7,2
1000f19c:	003fa506 	br	1000f034 <__alt_data_end+0xf800f034>
1000f1a0:	8984b03a 	or	r2,r17,r6
1000f1a4:	10002026 	beq	r2,zero,1000f228 <__muldf3+0x2bc>
1000f1a8:	88011c26 	beq	r17,zero,1000f61c <__muldf3+0x6b0>
1000f1ac:	8809883a 	mov	r4,r17
1000f1b0:	d9400215 	stw	r5,8(sp)
1000f1b4:	d9800715 	stw	r6,28(sp)
1000f1b8:	da400415 	stw	r9,16(sp)
1000f1bc:	da800315 	stw	r10,12(sp)
1000f1c0:	00043300 	call	10004330 <__clzsi2>
1000f1c4:	d9400217 	ldw	r5,8(sp)
1000f1c8:	d9800717 	ldw	r6,28(sp)
1000f1cc:	da400417 	ldw	r9,16(sp)
1000f1d0:	da800317 	ldw	r10,12(sp)
1000f1d4:	1007883a 	mov	r3,r2
1000f1d8:	01000a04 	movi	r4,40
1000f1dc:	1cbffe04 	addi	r18,r3,-8
1000f1e0:	20c9c83a 	sub	r4,r4,r3
1000f1e4:	8ca2983a 	sll	r17,r17,r18
1000f1e8:	3108d83a 	srl	r4,r6,r4
1000f1ec:	34a4983a 	sll	r18,r6,r18
1000f1f0:	2462b03a 	or	r17,r4,r17
1000f1f4:	00bf0344 	movi	r2,-1011
1000f1f8:	10c7c83a 	sub	r3,r2,r3
1000f1fc:	000f883a 	mov	r7,zero
1000f200:	003f8c06 	br	1000f034 <__alt_data_end+0xf800f034>
1000f204:	008000c4 	movi	r2,3
1000f208:	e0816d26 	beq	fp,r2,1000f7c0 <__muldf3+0x854>
1000f20c:	00800044 	movi	r2,1
1000f210:	e081321e 	bne	fp,r2,1000f6dc <__muldf3+0x770>
1000f214:	48a6703a 	and	r19,r9,r2
1000f218:	0009883a 	mov	r4,zero
1000f21c:	0021883a 	mov	r16,zero
1000f220:	002f883a 	mov	r23,zero
1000f224:	003fab06 	br	1000f0d4 <__alt_data_end+0xf800f0d4>
1000f228:	0023883a 	mov	r17,zero
1000f22c:	0025883a 	mov	r18,zero
1000f230:	01c00044 	movi	r7,1
1000f234:	003f7f06 	br	1000f034 <__alt_data_end+0xf800f034>
1000f238:	01c000c4 	movi	r7,3
1000f23c:	003f7d06 	br	1000f034 <__alt_data_end+0xf800f034>
1000f240:	01400104 	movi	r5,4
1000f244:	0021883a 	mov	r16,zero
1000f248:	002f883a 	mov	r23,zero
1000f24c:	07000044 	movi	fp,1
1000f250:	003f6606 	br	1000efec <__alt_data_end+0xf800efec>
1000f254:	01400304 	movi	r5,12
1000f258:	070000c4 	movi	fp,3
1000f25c:	003f6306 	br	1000efec <__alt_data_end+0xf800efec>
1000f260:	04000434 	movhi	r16,16
1000f264:	0027883a 	mov	r19,zero
1000f268:	843fffc4 	addi	r16,r16,-1
1000f26c:	05ffffc4 	movi	r23,-1
1000f270:	0101ffc4 	movi	r4,2047
1000f274:	003f9706 	br	1000f0d4 <__alt_data_end+0xf800f0d4>
1000f278:	8821883a 	mov	r16,r17
1000f27c:	902f883a 	mov	r23,r18
1000f280:	5013883a 	mov	r9,r10
1000f284:	3839883a 	mov	fp,r7
1000f288:	003f8c06 	br	1000f0bc <__alt_data_end+0xf800f0bc>
1000f28c:	8821883a 	mov	r16,r17
1000f290:	902f883a 	mov	r23,r18
1000f294:	3013883a 	mov	r9,r6
1000f298:	3839883a 	mov	fp,r7
1000f29c:	003f8706 	br	1000f0bc <__alt_data_end+0xf800f0bc>
1000f2a0:	b82ad43a 	srli	r21,r23,16
1000f2a4:	9038d43a 	srli	fp,r18,16
1000f2a8:	bdffffcc 	andi	r23,r23,65535
1000f2ac:	94bfffcc 	andi	r18,r18,65535
1000f2b0:	9009883a 	mov	r4,r18
1000f2b4:	b80b883a 	mov	r5,r23
1000f2b8:	d8c00515 	stw	r3,20(sp)
1000f2bc:	d9800715 	stw	r6,28(sp)
1000f2c0:	da000615 	stw	r8,24(sp)
1000f2c4:	00030800 	call	10003080 <__mulsi3>
1000f2c8:	9009883a 	mov	r4,r18
1000f2cc:	a80b883a 	mov	r5,r21
1000f2d0:	1029883a 	mov	r20,r2
1000f2d4:	00030800 	call	10003080 <__mulsi3>
1000f2d8:	e009883a 	mov	r4,fp
1000f2dc:	a80b883a 	mov	r5,r21
1000f2e0:	102d883a 	mov	r22,r2
1000f2e4:	00030800 	call	10003080 <__mulsi3>
1000f2e8:	e009883a 	mov	r4,fp
1000f2ec:	b80b883a 	mov	r5,r23
1000f2f0:	1027883a 	mov	r19,r2
1000f2f4:	00030800 	call	10003080 <__mulsi3>
1000f2f8:	a008d43a 	srli	r4,r20,16
1000f2fc:	b085883a 	add	r2,r22,r2
1000f300:	d8c00517 	ldw	r3,20(sp)
1000f304:	110f883a 	add	r7,r2,r4
1000f308:	d9800717 	ldw	r6,28(sp)
1000f30c:	da000617 	ldw	r8,24(sp)
1000f310:	3d80022e 	bgeu	r7,r22,1000f31c <__muldf3+0x3b0>
1000f314:	00800074 	movhi	r2,1
1000f318:	98a7883a 	add	r19,r19,r2
1000f31c:	3804943a 	slli	r2,r7,16
1000f320:	380ed43a 	srli	r7,r7,16
1000f324:	882cd43a 	srli	r22,r17,16
1000f328:	a53fffcc 	andi	r20,r20,65535
1000f32c:	8c7fffcc 	andi	r17,r17,65535
1000f330:	1529883a 	add	r20,r2,r20
1000f334:	8809883a 	mov	r4,r17
1000f338:	b80b883a 	mov	r5,r23
1000f33c:	d8c00515 	stw	r3,20(sp)
1000f340:	d9800715 	stw	r6,28(sp)
1000f344:	da000615 	stw	r8,24(sp)
1000f348:	d9c00015 	stw	r7,0(sp)
1000f34c:	dd000115 	stw	r20,4(sp)
1000f350:	00030800 	call	10003080 <__mulsi3>
1000f354:	a80b883a 	mov	r5,r21
1000f358:	8809883a 	mov	r4,r17
1000f35c:	d8800415 	stw	r2,16(sp)
1000f360:	00030800 	call	10003080 <__mulsi3>
1000f364:	a80b883a 	mov	r5,r21
1000f368:	b009883a 	mov	r4,r22
1000f36c:	1029883a 	mov	r20,r2
1000f370:	00030800 	call	10003080 <__mulsi3>
1000f374:	b009883a 	mov	r4,r22
1000f378:	b80b883a 	mov	r5,r23
1000f37c:	102b883a 	mov	r21,r2
1000f380:	00030800 	call	10003080 <__mulsi3>
1000f384:	da400417 	ldw	r9,16(sp)
1000f388:	a085883a 	add	r2,r20,r2
1000f38c:	d8c00517 	ldw	r3,20(sp)
1000f390:	4808d43a 	srli	r4,r9,16
1000f394:	d9800717 	ldw	r6,28(sp)
1000f398:	da000617 	ldw	r8,24(sp)
1000f39c:	1109883a 	add	r4,r2,r4
1000f3a0:	2500022e 	bgeu	r4,r20,1000f3ac <__muldf3+0x440>
1000f3a4:	00800074 	movhi	r2,1
1000f3a8:	a8ab883a 	add	r21,r21,r2
1000f3ac:	200e943a 	slli	r7,r4,16
1000f3b0:	2004d43a 	srli	r2,r4,16
1000f3b4:	802ed43a 	srli	r23,r16,16
1000f3b8:	843fffcc 	andi	r16,r16,65535
1000f3bc:	4d3fffcc 	andi	r20,r9,65535
1000f3c0:	9009883a 	mov	r4,r18
1000f3c4:	800b883a 	mov	r5,r16
1000f3c8:	3d29883a 	add	r20,r7,r20
1000f3cc:	d8c00515 	stw	r3,20(sp)
1000f3d0:	d9800715 	stw	r6,28(sp)
1000f3d4:	da000615 	stw	r8,24(sp)
1000f3d8:	a8ab883a 	add	r21,r21,r2
1000f3dc:	00030800 	call	10003080 <__mulsi3>
1000f3e0:	9009883a 	mov	r4,r18
1000f3e4:	b80b883a 	mov	r5,r23
1000f3e8:	d8800315 	stw	r2,12(sp)
1000f3ec:	00030800 	call	10003080 <__mulsi3>
1000f3f0:	e009883a 	mov	r4,fp
1000f3f4:	b80b883a 	mov	r5,r23
1000f3f8:	1025883a 	mov	r18,r2
1000f3fc:	00030800 	call	10003080 <__mulsi3>
1000f400:	e009883a 	mov	r4,fp
1000f404:	800b883a 	mov	r5,r16
1000f408:	d8800215 	stw	r2,8(sp)
1000f40c:	00030800 	call	10003080 <__mulsi3>
1000f410:	da800317 	ldw	r10,12(sp)
1000f414:	d9400017 	ldw	r5,0(sp)
1000f418:	9085883a 	add	r2,r18,r2
1000f41c:	5008d43a 	srli	r4,r10,16
1000f420:	a153883a 	add	r9,r20,r5
1000f424:	d8c00517 	ldw	r3,20(sp)
1000f428:	1109883a 	add	r4,r2,r4
1000f42c:	d9800717 	ldw	r6,28(sp)
1000f430:	da000617 	ldw	r8,24(sp)
1000f434:	dac00217 	ldw	r11,8(sp)
1000f438:	2480022e 	bgeu	r4,r18,1000f444 <__muldf3+0x4d8>
1000f43c:	00800074 	movhi	r2,1
1000f440:	5897883a 	add	r11,r11,r2
1000f444:	200e943a 	slli	r7,r4,16
1000f448:	2038d43a 	srli	fp,r4,16
1000f44c:	52bfffcc 	andi	r10,r10,65535
1000f450:	3a8f883a 	add	r7,r7,r10
1000f454:	8809883a 	mov	r4,r17
1000f458:	800b883a 	mov	r5,r16
1000f45c:	d8c00515 	stw	r3,20(sp)
1000f460:	d9800715 	stw	r6,28(sp)
1000f464:	d9c00215 	stw	r7,8(sp)
1000f468:	da000615 	stw	r8,24(sp)
1000f46c:	da400415 	stw	r9,16(sp)
1000f470:	5f39883a 	add	fp,r11,fp
1000f474:	00030800 	call	10003080 <__mulsi3>
1000f478:	8809883a 	mov	r4,r17
1000f47c:	b80b883a 	mov	r5,r23
1000f480:	1025883a 	mov	r18,r2
1000f484:	00030800 	call	10003080 <__mulsi3>
1000f488:	b009883a 	mov	r4,r22
1000f48c:	b80b883a 	mov	r5,r23
1000f490:	d8800315 	stw	r2,12(sp)
1000f494:	00030800 	call	10003080 <__mulsi3>
1000f498:	b009883a 	mov	r4,r22
1000f49c:	800b883a 	mov	r5,r16
1000f4a0:	1023883a 	mov	r17,r2
1000f4a4:	00030800 	call	10003080 <__mulsi3>
1000f4a8:	da800317 	ldw	r10,12(sp)
1000f4ac:	9008d43a 	srli	r4,r18,16
1000f4b0:	d8c00517 	ldw	r3,20(sp)
1000f4b4:	5085883a 	add	r2,r10,r2
1000f4b8:	1109883a 	add	r4,r2,r4
1000f4bc:	d9800717 	ldw	r6,28(sp)
1000f4c0:	d9c00217 	ldw	r7,8(sp)
1000f4c4:	da000617 	ldw	r8,24(sp)
1000f4c8:	da400417 	ldw	r9,16(sp)
1000f4cc:	2280022e 	bgeu	r4,r10,1000f4d8 <__muldf3+0x56c>
1000f4d0:	00800074 	movhi	r2,1
1000f4d4:	88a3883a 	add	r17,r17,r2
1000f4d8:	2004943a 	slli	r2,r4,16
1000f4dc:	94bfffcc 	andi	r18,r18,65535
1000f4e0:	4ce7883a 	add	r19,r9,r19
1000f4e4:	14a5883a 	add	r18,r2,r18
1000f4e8:	9d29803a 	cmpltu	r20,r19,r20
1000f4ec:	9565883a 	add	r18,r18,r21
1000f4f0:	9505883a 	add	r2,r18,r20
1000f4f4:	99e7883a 	add	r19,r19,r7
1000f4f8:	99cf803a 	cmpltu	r7,r19,r7
1000f4fc:	e08b883a 	add	r5,fp,r2
1000f500:	2008d43a 	srli	r4,r4,16
1000f504:	29ef883a 	add	r23,r5,r7
1000f508:	1529803a 	cmpltu	r20,r2,r20
1000f50c:	956b803a 	cmpltu	r21,r18,r21
1000f510:	b9cf803a 	cmpltu	r7,r23,r7
1000f514:	a564b03a 	or	r18,r20,r21
1000f518:	2f39803a 	cmpltu	fp,r5,fp
1000f51c:	9125883a 	add	r18,r18,r4
1000f520:	3f38b03a 	or	fp,r7,fp
1000f524:	9725883a 	add	r18,r18,fp
1000f528:	9804927a 	slli	r2,r19,9
1000f52c:	9463883a 	add	r17,r18,r17
1000f530:	d9000117 	ldw	r4,4(sp)
1000f534:	b820d5fa 	srli	r16,r23,23
1000f538:	8822927a 	slli	r17,r17,9
1000f53c:	9826d5fa 	srli	r19,r19,23
1000f540:	1104b03a 	or	r2,r2,r4
1000f544:	b82e927a 	slli	r23,r23,9
1000f548:	1004c03a 	cmpne	r2,r2,zero
1000f54c:	8c20b03a 	or	r16,r17,r16
1000f550:	14e6b03a 	or	r19,r2,r19
1000f554:	8080402c 	andhi	r2,r16,256
1000f558:	9deeb03a 	or	r23,r19,r23
1000f55c:	10000726 	beq	r2,zero,1000f57c <__muldf3+0x610>
1000f560:	b804d07a 	srli	r2,r23,1
1000f564:	800697fa 	slli	r3,r16,31
1000f568:	bdc0004c 	andi	r23,r23,1
1000f56c:	8020d07a 	srli	r16,r16,1
1000f570:	b8aeb03a 	or	r23,r23,r2
1000f574:	b8eeb03a 	or	r23,r23,r3
1000f578:	4007883a 	mov	r3,r8
1000f57c:	1900ffc4 	addi	r4,r3,1023
1000f580:	01004d0e 	bge	zero,r4,1000f6b8 <__muldf3+0x74c>
1000f584:	b88001cc 	andi	r2,r23,7
1000f588:	10000726 	beq	r2,zero,1000f5a8 <__muldf3+0x63c>
1000f58c:	b94003cc 	andi	r5,r23,15
1000f590:	00800104 	movi	r2,4
1000f594:	28800426 	beq	r5,r2,1000f5a8 <__muldf3+0x63c>
1000f598:	b885883a 	add	r2,r23,r2
1000f59c:	15ef803a 	cmpltu	r23,r2,r23
1000f5a0:	85e1883a 	add	r16,r16,r23
1000f5a4:	102f883a 	mov	r23,r2
1000f5a8:	8080402c 	andhi	r2,r16,256
1000f5ac:	10000426 	beq	r2,zero,1000f5c0 <__muldf3+0x654>
1000f5b0:	00bfc034 	movhi	r2,65280
1000f5b4:	10bfffc4 	addi	r2,r2,-1
1000f5b8:	19010004 	addi	r4,r3,1024
1000f5bc:	80a0703a 	and	r16,r16,r2
1000f5c0:	0081ff84 	movi	r2,2046
1000f5c4:	1100340e 	bge	r2,r4,1000f698 <__muldf3+0x72c>
1000f5c8:	34c0004c 	andi	r19,r6,1
1000f5cc:	0101ffc4 	movi	r4,2047
1000f5d0:	0021883a 	mov	r16,zero
1000f5d4:	002f883a 	mov	r23,zero
1000f5d8:	003ebe06 	br	1000f0d4 <__alt_data_end+0xf800f0d4>
1000f5dc:	8080022c 	andhi	r2,r16,8
1000f5e0:	10000926 	beq	r2,zero,1000f608 <__muldf3+0x69c>
1000f5e4:	8880022c 	andhi	r2,r17,8
1000f5e8:	1000071e 	bne	r2,zero,1000f608 <__muldf3+0x69c>
1000f5ec:	00800434 	movhi	r2,16
1000f5f0:	8c000234 	orhi	r16,r17,8
1000f5f4:	10bfffc4 	addi	r2,r2,-1
1000f5f8:	b027883a 	mov	r19,r22
1000f5fc:	80a0703a 	and	r16,r16,r2
1000f600:	902f883a 	mov	r23,r18
1000f604:	003f1a06 	br	1000f270 <__alt_data_end+0xf800f270>
1000f608:	00800434 	movhi	r2,16
1000f60c:	84000234 	orhi	r16,r16,8
1000f610:	10bfffc4 	addi	r2,r2,-1
1000f614:	80a0703a 	and	r16,r16,r2
1000f618:	003f1506 	br	1000f270 <__alt_data_end+0xf800f270>
1000f61c:	3009883a 	mov	r4,r6
1000f620:	d9400215 	stw	r5,8(sp)
1000f624:	d9800715 	stw	r6,28(sp)
1000f628:	da400415 	stw	r9,16(sp)
1000f62c:	da800315 	stw	r10,12(sp)
1000f630:	00043300 	call	10004330 <__clzsi2>
1000f634:	10c00804 	addi	r3,r2,32
1000f638:	010009c4 	movi	r4,39
1000f63c:	d9400217 	ldw	r5,8(sp)
1000f640:	d9800717 	ldw	r6,28(sp)
1000f644:	da400417 	ldw	r9,16(sp)
1000f648:	da800317 	ldw	r10,12(sp)
1000f64c:	20fee20e 	bge	r4,r3,1000f1d8 <__alt_data_end+0xf800f1d8>
1000f650:	147ffe04 	addi	r17,r2,-8
1000f654:	9462983a 	sll	r17,r18,r17
1000f658:	0025883a 	mov	r18,zero
1000f65c:	003ee506 	br	1000f1f4 <__alt_data_end+0xf800f1f4>
1000f660:	d9800715 	stw	r6,28(sp)
1000f664:	d9c00215 	stw	r7,8(sp)
1000f668:	da400415 	stw	r9,16(sp)
1000f66c:	00043300 	call	10004330 <__clzsi2>
1000f670:	10c00804 	addi	r3,r2,32
1000f674:	010009c4 	movi	r4,39
1000f678:	d9800717 	ldw	r6,28(sp)
1000f67c:	d9c00217 	ldw	r7,8(sp)
1000f680:	da400417 	ldw	r9,16(sp)
1000f684:	20feb40e 	bge	r4,r3,1000f158 <__alt_data_end+0xf800f158>
1000f688:	143ffe04 	addi	r16,r2,-8
1000f68c:	9420983a 	sll	r16,r18,r16
1000f690:	002f883a 	mov	r23,zero
1000f694:	003eb706 	br	1000f174 <__alt_data_end+0xf800f174>
1000f698:	8004977a 	slli	r2,r16,29
1000f69c:	b82ed0fa 	srli	r23,r23,3
1000f6a0:	8020927a 	slli	r16,r16,9
1000f6a4:	2101ffcc 	andi	r4,r4,2047
1000f6a8:	15eeb03a 	or	r23,r2,r23
1000f6ac:	8020d33a 	srli	r16,r16,12
1000f6b0:	34c0004c 	andi	r19,r6,1
1000f6b4:	003e8706 	br	1000f0d4 <__alt_data_end+0xf800f0d4>
1000f6b8:	00bf0084 	movi	r2,-1022
1000f6bc:	10c5c83a 	sub	r2,r2,r3
1000f6c0:	01000e04 	movi	r4,56
1000f6c4:	2080080e 	bge	r4,r2,1000f6e8 <__muldf3+0x77c>
1000f6c8:	34c0004c 	andi	r19,r6,1
1000f6cc:	0009883a 	mov	r4,zero
1000f6d0:	0021883a 	mov	r16,zero
1000f6d4:	002f883a 	mov	r23,zero
1000f6d8:	003e7e06 	br	1000f0d4 <__alt_data_end+0xf800f0d4>
1000f6dc:	4007883a 	mov	r3,r8
1000f6e0:	480d883a 	mov	r6,r9
1000f6e4:	003fa506 	br	1000f57c <__alt_data_end+0xf800f57c>
1000f6e8:	010007c4 	movi	r4,31
1000f6ec:	20801816 	blt	r4,r2,1000f750 <__muldf3+0x7e4>
1000f6f0:	18c10784 	addi	r3,r3,1054
1000f6f4:	80c8983a 	sll	r4,r16,r3
1000f6f8:	b88ad83a 	srl	r5,r23,r2
1000f6fc:	b8c6983a 	sll	r3,r23,r3
1000f700:	80a0d83a 	srl	r16,r16,r2
1000f704:	2908b03a 	or	r4,r5,r4
1000f708:	1804c03a 	cmpne	r2,r3,zero
1000f70c:	2088b03a 	or	r4,r4,r2
1000f710:	208001cc 	andi	r2,r4,7
1000f714:	10000726 	beq	r2,zero,1000f734 <__muldf3+0x7c8>
1000f718:	20c003cc 	andi	r3,r4,15
1000f71c:	00800104 	movi	r2,4
1000f720:	18800426 	beq	r3,r2,1000f734 <__muldf3+0x7c8>
1000f724:	20c00104 	addi	r3,r4,4
1000f728:	1905803a 	cmpltu	r2,r3,r4
1000f72c:	80a1883a 	add	r16,r16,r2
1000f730:	1809883a 	mov	r4,r3
1000f734:	8080202c 	andhi	r2,r16,128
1000f738:	10001b26 	beq	r2,zero,1000f7a8 <__muldf3+0x83c>
1000f73c:	34c0004c 	andi	r19,r6,1
1000f740:	01000044 	movi	r4,1
1000f744:	0021883a 	mov	r16,zero
1000f748:	002f883a 	mov	r23,zero
1000f74c:	003e6106 	br	1000f0d4 <__alt_data_end+0xf800f0d4>
1000f750:	013ef884 	movi	r4,-1054
1000f754:	20c9c83a 	sub	r4,r4,r3
1000f758:	01400804 	movi	r5,32
1000f75c:	8108d83a 	srl	r4,r16,r4
1000f760:	11401526 	beq	r2,r5,1000f7b8 <__muldf3+0x84c>
1000f764:	18c10f84 	addi	r3,r3,1086
1000f768:	80e0983a 	sll	r16,r16,r3
1000f76c:	85eeb03a 	or	r23,r16,r23
1000f770:	b804c03a 	cmpne	r2,r23,zero
1000f774:	1108b03a 	or	r4,r2,r4
1000f778:	20c001cc 	andi	r3,r4,7
1000f77c:	1800061e 	bne	r3,zero,1000f798 <__muldf3+0x82c>
1000f780:	0021883a 	mov	r16,zero
1000f784:	202ed0fa 	srli	r23,r4,3
1000f788:	34c0004c 	andi	r19,r6,1
1000f78c:	0009883a 	mov	r4,zero
1000f790:	b8eeb03a 	or	r23,r23,r3
1000f794:	003e4f06 	br	1000f0d4 <__alt_data_end+0xf800f0d4>
1000f798:	20c003cc 	andi	r3,r4,15
1000f79c:	00800104 	movi	r2,4
1000f7a0:	0021883a 	mov	r16,zero
1000f7a4:	18bfdf1e 	bne	r3,r2,1000f724 <__alt_data_end+0xf800f724>
1000f7a8:	8004927a 	slli	r2,r16,9
1000f7ac:	8006977a 	slli	r3,r16,29
1000f7b0:	1020d33a 	srli	r16,r2,12
1000f7b4:	003ff306 	br	1000f784 <__alt_data_end+0xf800f784>
1000f7b8:	0021883a 	mov	r16,zero
1000f7bc:	003feb06 	br	1000f76c <__alt_data_end+0xf800f76c>
1000f7c0:	00800434 	movhi	r2,16
1000f7c4:	84000234 	orhi	r16,r16,8
1000f7c8:	10bfffc4 	addi	r2,r2,-1
1000f7cc:	4cc0004c 	andi	r19,r9,1
1000f7d0:	80a0703a 	and	r16,r16,r2
1000f7d4:	003ea606 	br	1000f270 <__alt_data_end+0xf800f270>

1000f7d8 <__subdf3>:
1000f7d8:	00c00434 	movhi	r3,16
1000f7dc:	18ffffc4 	addi	r3,r3,-1
1000f7e0:	defffb04 	addi	sp,sp,-20
1000f7e4:	28d2703a 	and	r9,r5,r3
1000f7e8:	3814d53a 	srli	r10,r7,20
1000f7ec:	38c6703a 	and	r3,r7,r3
1000f7f0:	3004d77a 	srli	r2,r6,29
1000f7f4:	dc800215 	stw	r18,8(sp)
1000f7f8:	dc000015 	stw	r16,0(sp)
1000f7fc:	2824d7fa 	srli	r18,r5,31
1000f800:	2820d53a 	srli	r16,r5,20
1000f804:	481290fa 	slli	r9,r9,3
1000f808:	200ad77a 	srli	r5,r4,29
1000f80c:	180690fa 	slli	r3,r3,3
1000f810:	dc400115 	stw	r17,4(sp)
1000f814:	dfc00415 	stw	ra,16(sp)
1000f818:	202290fa 	slli	r17,r4,3
1000f81c:	dcc00315 	stw	r19,12(sp)
1000f820:	5281ffcc 	andi	r10,r10,2047
1000f824:	0101ffc4 	movi	r4,2047
1000f828:	9011883a 	mov	r8,r18
1000f82c:	8401ffcc 	andi	r16,r16,2047
1000f830:	94803fcc 	andi	r18,r18,255
1000f834:	494ab03a 	or	r5,r9,r5
1000f838:	380ed7fa 	srli	r7,r7,31
1000f83c:	1886b03a 	or	r3,r3,r2
1000f840:	300c90fa 	slli	r6,r6,3
1000f844:	51009026 	beq	r10,r4,1000fa88 <__subdf3+0x2b0>
1000f848:	39c0005c 	xori	r7,r7,1
1000f84c:	8285c83a 	sub	r2,r16,r10
1000f850:	91c06f26 	beq	r18,r7,1000fa10 <__subdf3+0x238>
1000f854:	0080b10e 	bge	zero,r2,1000fb1c <__subdf3+0x344>
1000f858:	50002a1e 	bne	r10,zero,1000f904 <__subdf3+0x12c>
1000f85c:	1988b03a 	or	r4,r3,r6
1000f860:	2000941e 	bne	r4,zero,1000fab4 <__subdf3+0x2dc>
1000f864:	888001cc 	andi	r2,r17,7
1000f868:	10005b26 	beq	r2,zero,1000f9d8 <__subdf3+0x200>
1000f86c:	88c003cc 	andi	r3,r17,15
1000f870:	00800104 	movi	r2,4
1000f874:	18805826 	beq	r3,r2,1000f9d8 <__subdf3+0x200>
1000f878:	88c00104 	addi	r3,r17,4
1000f87c:	1c63803a 	cmpltu	r17,r3,r17
1000f880:	2c4b883a 	add	r5,r5,r17
1000f884:	2880202c 	andhi	r2,r5,128
1000f888:	9200004c 	andi	r8,r18,1
1000f88c:	1823883a 	mov	r17,r3
1000f890:	10005426 	beq	r2,zero,1000f9e4 <__subdf3+0x20c>
1000f894:	84000044 	addi	r16,r16,1
1000f898:	0081ffc4 	movi	r2,2047
1000f89c:	8080bf26 	beq	r16,r2,1000fb9c <__subdf3+0x3c4>
1000f8a0:	013fe034 	movhi	r4,65408
1000f8a4:	213fffc4 	addi	r4,r4,-1
1000f8a8:	290a703a 	and	r5,r5,r4
1000f8ac:	2804977a 	slli	r2,r5,29
1000f8b0:	280a927a 	slli	r5,r5,9
1000f8b4:	8822d0fa 	srli	r17,r17,3
1000f8b8:	8401ffcc 	andi	r16,r16,2047
1000f8bc:	2808d33a 	srli	r4,r5,12
1000f8c0:	1444b03a 	or	r2,r2,r17
1000f8c4:	8401ffcc 	andi	r16,r16,2047
1000f8c8:	800a953a 	slli	r5,r16,20
1000f8cc:	40c03fcc 	andi	r3,r8,255
1000f8d0:	04000434 	movhi	r16,16
1000f8d4:	180697fa 	slli	r3,r3,31
1000f8d8:	843fffc4 	addi	r16,r16,-1
1000f8dc:	2420703a 	and	r16,r4,r16
1000f8e0:	8160b03a 	or	r16,r16,r5
1000f8e4:	80c6b03a 	or	r3,r16,r3
1000f8e8:	dfc00417 	ldw	ra,16(sp)
1000f8ec:	dcc00317 	ldw	r19,12(sp)
1000f8f0:	dc800217 	ldw	r18,8(sp)
1000f8f4:	dc400117 	ldw	r17,4(sp)
1000f8f8:	dc000017 	ldw	r16,0(sp)
1000f8fc:	dec00504 	addi	sp,sp,20
1000f900:	f800283a 	ret
1000f904:	0101ffc4 	movi	r4,2047
1000f908:	813fd626 	beq	r16,r4,1000f864 <__alt_data_end+0xf800f864>
1000f90c:	18c02034 	orhi	r3,r3,128
1000f910:	01000e04 	movi	r4,56
1000f914:	2080a416 	blt	r4,r2,1000fba8 <__subdf3+0x3d0>
1000f918:	010007c4 	movi	r4,31
1000f91c:	2080c716 	blt	r4,r2,1000fc3c <__subdf3+0x464>
1000f920:	01000804 	movi	r4,32
1000f924:	2089c83a 	sub	r4,r4,r2
1000f928:	1910983a 	sll	r8,r3,r4
1000f92c:	308ed83a 	srl	r7,r6,r2
1000f930:	3108983a 	sll	r4,r6,r4
1000f934:	1884d83a 	srl	r2,r3,r2
1000f938:	41ccb03a 	or	r6,r8,r7
1000f93c:	2008c03a 	cmpne	r4,r4,zero
1000f940:	310cb03a 	or	r6,r6,r4
1000f944:	898dc83a 	sub	r6,r17,r6
1000f948:	89a3803a 	cmpltu	r17,r17,r6
1000f94c:	288bc83a 	sub	r5,r5,r2
1000f950:	2c4bc83a 	sub	r5,r5,r17
1000f954:	3023883a 	mov	r17,r6
1000f958:	2880202c 	andhi	r2,r5,128
1000f95c:	10006b26 	beq	r2,zero,1000fb0c <__subdf3+0x334>
1000f960:	04c02034 	movhi	r19,128
1000f964:	9cffffc4 	addi	r19,r19,-1
1000f968:	2ce6703a 	and	r19,r5,r19
1000f96c:	98007c26 	beq	r19,zero,1000fb60 <__subdf3+0x388>
1000f970:	9809883a 	mov	r4,r19
1000f974:	00043300 	call	10004330 <__clzsi2>
1000f978:	10fffe04 	addi	r3,r2,-8
1000f97c:	010007c4 	movi	r4,31
1000f980:	20c07d16 	blt	r4,r3,1000fb78 <__subdf3+0x3a0>
1000f984:	01400a04 	movi	r5,40
1000f988:	2885c83a 	sub	r2,r5,r2
1000f98c:	888ad83a 	srl	r5,r17,r2
1000f990:	98e6983a 	sll	r19,r19,r3
1000f994:	88e2983a 	sll	r17,r17,r3
1000f998:	2ce6b03a 	or	r19,r5,r19
1000f99c:	1c007a16 	blt	r3,r16,1000fb88 <__subdf3+0x3b0>
1000f9a0:	1c21c83a 	sub	r16,r3,r16
1000f9a4:	81400044 	addi	r5,r16,1
1000f9a8:	00c007c4 	movi	r3,31
1000f9ac:	19409616 	blt	r3,r5,1000fc08 <__subdf3+0x430>
1000f9b0:	1c21c83a 	sub	r16,r3,r16
1000f9b4:	8c08983a 	sll	r4,r17,r16
1000f9b8:	8946d83a 	srl	r3,r17,r5
1000f9bc:	9c20983a 	sll	r16,r19,r16
1000f9c0:	2008c03a 	cmpne	r4,r4,zero
1000f9c4:	994ad83a 	srl	r5,r19,r5
1000f9c8:	1c06b03a 	or	r3,r3,r16
1000f9cc:	1922b03a 	or	r17,r3,r4
1000f9d0:	0021883a 	mov	r16,zero
1000f9d4:	003fa306 	br	1000f864 <__alt_data_end+0xf800f864>
1000f9d8:	2880202c 	andhi	r2,r5,128
1000f9dc:	9200004c 	andi	r8,r18,1
1000f9e0:	103fac1e 	bne	r2,zero,1000f894 <__alt_data_end+0xf800f894>
1000f9e4:	2804977a 	slli	r2,r5,29
1000f9e8:	8822d0fa 	srli	r17,r17,3
1000f9ec:	00c1ffc4 	movi	r3,2047
1000f9f0:	280ad0fa 	srli	r5,r5,3
1000f9f4:	1444b03a 	or	r2,r2,r17
1000f9f8:	80c02726 	beq	r16,r3,1000fa98 <__subdf3+0x2c0>
1000f9fc:	01000434 	movhi	r4,16
1000fa00:	213fffc4 	addi	r4,r4,-1
1000fa04:	80e0703a 	and	r16,r16,r3
1000fa08:	2908703a 	and	r4,r5,r4
1000fa0c:	003fad06 	br	1000f8c4 <__alt_data_end+0xf800f8c4>
1000fa10:	0080690e 	bge	zero,r2,1000fbb8 <__subdf3+0x3e0>
1000fa14:	50002f26 	beq	r10,zero,1000fad4 <__subdf3+0x2fc>
1000fa18:	0101ffc4 	movi	r4,2047
1000fa1c:	813f9126 	beq	r16,r4,1000f864 <__alt_data_end+0xf800f864>
1000fa20:	18c02034 	orhi	r3,r3,128
1000fa24:	01000e04 	movi	r4,56
1000fa28:	2080b00e 	bge	r4,r2,1000fcec <__subdf3+0x514>
1000fa2c:	198cb03a 	or	r6,r3,r6
1000fa30:	300ec03a 	cmpne	r7,r6,zero
1000fa34:	0005883a 	mov	r2,zero
1000fa38:	3c4f883a 	add	r7,r7,r17
1000fa3c:	3c63803a 	cmpltu	r17,r7,r17
1000fa40:	114b883a 	add	r5,r2,r5
1000fa44:	2c4b883a 	add	r5,r5,r17
1000fa48:	3823883a 	mov	r17,r7
1000fa4c:	2880202c 	andhi	r2,r5,128
1000fa50:	10002e26 	beq	r2,zero,1000fb0c <__subdf3+0x334>
1000fa54:	84000044 	addi	r16,r16,1
1000fa58:	0081ffc4 	movi	r2,2047
1000fa5c:	8080de26 	beq	r16,r2,1000fdd8 <__subdf3+0x600>
1000fa60:	00bfe034 	movhi	r2,65408
1000fa64:	10bfffc4 	addi	r2,r2,-1
1000fa68:	288a703a 	and	r5,r5,r2
1000fa6c:	880cd07a 	srli	r6,r17,1
1000fa70:	280897fa 	slli	r4,r5,31
1000fa74:	88c0004c 	andi	r3,r17,1
1000fa78:	30e2b03a 	or	r17,r6,r3
1000fa7c:	280ad07a 	srli	r5,r5,1
1000fa80:	8922b03a 	or	r17,r17,r4
1000fa84:	003f7706 	br	1000f864 <__alt_data_end+0xf800f864>
1000fa88:	1984b03a 	or	r2,r3,r6
1000fa8c:	103f6e26 	beq	r2,zero,1000f848 <__alt_data_end+0xf800f848>
1000fa90:	39c03fcc 	andi	r7,r7,255
1000fa94:	003f6d06 	br	1000f84c <__alt_data_end+0xf800f84c>
1000fa98:	1146b03a 	or	r3,r2,r5
1000fa9c:	18003f26 	beq	r3,zero,1000fb9c <__subdf3+0x3c4>
1000faa0:	00c00434 	movhi	r3,16
1000faa4:	29000234 	orhi	r4,r5,8
1000faa8:	18ffffc4 	addi	r3,r3,-1
1000faac:	20c8703a 	and	r4,r4,r3
1000fab0:	003f8406 	br	1000f8c4 <__alt_data_end+0xf800f8c4>
1000fab4:	10bfffc4 	addi	r2,r2,-1
1000fab8:	1000501e 	bne	r2,zero,1000fbfc <__subdf3+0x424>
1000fabc:	898fc83a 	sub	r7,r17,r6
1000fac0:	89e3803a 	cmpltu	r17,r17,r7
1000fac4:	28cbc83a 	sub	r5,r5,r3
1000fac8:	2c4bc83a 	sub	r5,r5,r17
1000facc:	3823883a 	mov	r17,r7
1000fad0:	003fa106 	br	1000f958 <__alt_data_end+0xf800f958>
1000fad4:	1988b03a 	or	r4,r3,r6
1000fad8:	203f6226 	beq	r4,zero,1000f864 <__alt_data_end+0xf800f864>
1000fadc:	10bfffc4 	addi	r2,r2,-1
1000fae0:	10009b1e 	bne	r2,zero,1000fd50 <__subdf3+0x578>
1000fae4:	344d883a 	add	r6,r6,r17
1000fae8:	3463803a 	cmpltu	r17,r6,r17
1000faec:	194b883a 	add	r5,r3,r5
1000faf0:	2c4b883a 	add	r5,r5,r17
1000faf4:	3023883a 	mov	r17,r6
1000faf8:	003fd406 	br	1000fa4c <__alt_data_end+0xf800fa4c>
1000fafc:	1106b03a 	or	r3,r2,r4
1000fb00:	1800b426 	beq	r3,zero,1000fdd4 <__subdf3+0x5fc>
1000fb04:	100b883a 	mov	r5,r2
1000fb08:	2023883a 	mov	r17,r4
1000fb0c:	888001cc 	andi	r2,r17,7
1000fb10:	103f561e 	bne	r2,zero,1000f86c <__alt_data_end+0xf800f86c>
1000fb14:	9200004c 	andi	r8,r18,1
1000fb18:	003fb206 	br	1000f9e4 <__alt_data_end+0xf800f9e4>
1000fb1c:	1000531e 	bne	r2,zero,1000fc6c <__subdf3+0x494>
1000fb20:	80800044 	addi	r2,r16,1
1000fb24:	1081ffcc 	andi	r2,r2,2047
1000fb28:	01000044 	movi	r4,1
1000fb2c:	2080a00e 	bge	r4,r2,1000fdb0 <__subdf3+0x5d8>
1000fb30:	8985c83a 	sub	r2,r17,r6
1000fb34:	8889803a 	cmpltu	r4,r17,r2
1000fb38:	28e7c83a 	sub	r19,r5,r3
1000fb3c:	9927c83a 	sub	r19,r19,r4
1000fb40:	9900202c 	andhi	r4,r19,128
1000fb44:	20006226 	beq	r4,zero,1000fcd0 <__subdf3+0x4f8>
1000fb48:	3463c83a 	sub	r17,r6,r17
1000fb4c:	194bc83a 	sub	r5,r3,r5
1000fb50:	344d803a 	cmpltu	r6,r6,r17
1000fb54:	29a7c83a 	sub	r19,r5,r6
1000fb58:	3825883a 	mov	r18,r7
1000fb5c:	983f841e 	bne	r19,zero,1000f970 <__alt_data_end+0xf800f970>
1000fb60:	8809883a 	mov	r4,r17
1000fb64:	00043300 	call	10004330 <__clzsi2>
1000fb68:	10800804 	addi	r2,r2,32
1000fb6c:	10fffe04 	addi	r3,r2,-8
1000fb70:	010007c4 	movi	r4,31
1000fb74:	20ff830e 	bge	r4,r3,1000f984 <__alt_data_end+0xf800f984>
1000fb78:	14fff604 	addi	r19,r2,-40
1000fb7c:	8ce6983a 	sll	r19,r17,r19
1000fb80:	0023883a 	mov	r17,zero
1000fb84:	1c3f860e 	bge	r3,r16,1000f9a0 <__alt_data_end+0xf800f9a0>
1000fb88:	017fe034 	movhi	r5,65408
1000fb8c:	297fffc4 	addi	r5,r5,-1
1000fb90:	80e1c83a 	sub	r16,r16,r3
1000fb94:	994a703a 	and	r5,r19,r5
1000fb98:	003f3206 	br	1000f864 <__alt_data_end+0xf800f864>
1000fb9c:	0009883a 	mov	r4,zero
1000fba0:	0005883a 	mov	r2,zero
1000fba4:	003f4706 	br	1000f8c4 <__alt_data_end+0xf800f8c4>
1000fba8:	198cb03a 	or	r6,r3,r6
1000fbac:	300cc03a 	cmpne	r6,r6,zero
1000fbb0:	0005883a 	mov	r2,zero
1000fbb4:	003f6306 	br	1000f944 <__alt_data_end+0xf800f944>
1000fbb8:	10009d1e 	bne	r2,zero,1000fe30 <__subdf3+0x658>
1000fbbc:	81c00044 	addi	r7,r16,1
1000fbc0:	3881ffcc 	andi	r2,r7,2047
1000fbc4:	02400044 	movi	r9,1
1000fbc8:	4880680e 	bge	r9,r2,1000fd6c <__subdf3+0x594>
1000fbcc:	0081ffc4 	movi	r2,2047
1000fbd0:	3880ae26 	beq	r7,r2,1000fe8c <__subdf3+0x6b4>
1000fbd4:	344d883a 	add	r6,r6,r17
1000fbd8:	3463803a 	cmpltu	r17,r6,r17
1000fbdc:	194b883a 	add	r5,r3,r5
1000fbe0:	2c4b883a 	add	r5,r5,r17
1000fbe4:	282297fa 	slli	r17,r5,31
1000fbe8:	300cd07a 	srli	r6,r6,1
1000fbec:	280ad07a 	srli	r5,r5,1
1000fbf0:	3821883a 	mov	r16,r7
1000fbf4:	89a2b03a 	or	r17,r17,r6
1000fbf8:	003f1a06 	br	1000f864 <__alt_data_end+0xf800f864>
1000fbfc:	0101ffc4 	movi	r4,2047
1000fc00:	813f431e 	bne	r16,r4,1000f910 <__alt_data_end+0xf800f910>
1000fc04:	003f1706 	br	1000f864 <__alt_data_end+0xf800f864>
1000fc08:	80bff844 	addi	r2,r16,-31
1000fc0c:	00c00804 	movi	r3,32
1000fc10:	9884d83a 	srl	r2,r19,r2
1000fc14:	28c05126 	beq	r5,r3,1000fd5c <__subdf3+0x584>
1000fc18:	00c00fc4 	movi	r3,63
1000fc1c:	1c21c83a 	sub	r16,r3,r16
1000fc20:	9c26983a 	sll	r19,r19,r16
1000fc24:	9c62b03a 	or	r17,r19,r17
1000fc28:	8822c03a 	cmpne	r17,r17,zero
1000fc2c:	88a2b03a 	or	r17,r17,r2
1000fc30:	000b883a 	mov	r5,zero
1000fc34:	0021883a 	mov	r16,zero
1000fc38:	003fb406 	br	1000fb0c <__alt_data_end+0xf800fb0c>
1000fc3c:	113ff804 	addi	r4,r2,-32
1000fc40:	01c00804 	movi	r7,32
1000fc44:	1908d83a 	srl	r4,r3,r4
1000fc48:	11c04626 	beq	r2,r7,1000fd64 <__subdf3+0x58c>
1000fc4c:	01c01004 	movi	r7,64
1000fc50:	3885c83a 	sub	r2,r7,r2
1000fc54:	1884983a 	sll	r2,r3,r2
1000fc58:	118cb03a 	or	r6,r2,r6
1000fc5c:	300cc03a 	cmpne	r6,r6,zero
1000fc60:	310cb03a 	or	r6,r6,r4
1000fc64:	0005883a 	mov	r2,zero
1000fc68:	003f3606 	br	1000f944 <__alt_data_end+0xf800f944>
1000fc6c:	80002b26 	beq	r16,zero,1000fd1c <__subdf3+0x544>
1000fc70:	0101ffc4 	movi	r4,2047
1000fc74:	51006926 	beq	r10,r4,1000fe1c <__subdf3+0x644>
1000fc78:	0085c83a 	sub	r2,zero,r2
1000fc7c:	29402034 	orhi	r5,r5,128
1000fc80:	01000e04 	movi	r4,56
1000fc84:	20807d16 	blt	r4,r2,1000fe7c <__subdf3+0x6a4>
1000fc88:	010007c4 	movi	r4,31
1000fc8c:	2080d916 	blt	r4,r2,1000fff4 <__subdf3+0x81c>
1000fc90:	01000804 	movi	r4,32
1000fc94:	2089c83a 	sub	r4,r4,r2
1000fc98:	2912983a 	sll	r9,r5,r4
1000fc9c:	8890d83a 	srl	r8,r17,r2
1000fca0:	8908983a 	sll	r4,r17,r4
1000fca4:	2884d83a 	srl	r2,r5,r2
1000fca8:	4a22b03a 	or	r17,r9,r8
1000fcac:	2008c03a 	cmpne	r4,r4,zero
1000fcb0:	8922b03a 	or	r17,r17,r4
1000fcb4:	3463c83a 	sub	r17,r6,r17
1000fcb8:	1885c83a 	sub	r2,r3,r2
1000fcbc:	344d803a 	cmpltu	r6,r6,r17
1000fcc0:	118bc83a 	sub	r5,r2,r6
1000fcc4:	5021883a 	mov	r16,r10
1000fcc8:	3825883a 	mov	r18,r7
1000fccc:	003f2206 	br	1000f958 <__alt_data_end+0xf800f958>
1000fcd0:	9886b03a 	or	r3,r19,r2
1000fcd4:	18001c1e 	bne	r3,zero,1000fd48 <__subdf3+0x570>
1000fcd8:	0011883a 	mov	r8,zero
1000fcdc:	000b883a 	mov	r5,zero
1000fce0:	0023883a 	mov	r17,zero
1000fce4:	0021883a 	mov	r16,zero
1000fce8:	003f3e06 	br	1000f9e4 <__alt_data_end+0xf800f9e4>
1000fcec:	010007c4 	movi	r4,31
1000fcf0:	20803c16 	blt	r4,r2,1000fde4 <__subdf3+0x60c>
1000fcf4:	01000804 	movi	r4,32
1000fcf8:	2089c83a 	sub	r4,r4,r2
1000fcfc:	1912983a 	sll	r9,r3,r4
1000fd00:	308ed83a 	srl	r7,r6,r2
1000fd04:	3108983a 	sll	r4,r6,r4
1000fd08:	1884d83a 	srl	r2,r3,r2
1000fd0c:	49ceb03a 	or	r7,r9,r7
1000fd10:	2008c03a 	cmpne	r4,r4,zero
1000fd14:	390eb03a 	or	r7,r7,r4
1000fd18:	003f4706 	br	1000fa38 <__alt_data_end+0xf800fa38>
1000fd1c:	2c48b03a 	or	r4,r5,r17
1000fd20:	20003e26 	beq	r4,zero,1000fe1c <__subdf3+0x644>
1000fd24:	0084303a 	nor	r2,zero,r2
1000fd28:	10003a1e 	bne	r2,zero,1000fe14 <__subdf3+0x63c>
1000fd2c:	3463c83a 	sub	r17,r6,r17
1000fd30:	194bc83a 	sub	r5,r3,r5
1000fd34:	344d803a 	cmpltu	r6,r6,r17
1000fd38:	298bc83a 	sub	r5,r5,r6
1000fd3c:	5021883a 	mov	r16,r10
1000fd40:	3825883a 	mov	r18,r7
1000fd44:	003f0406 	br	1000f958 <__alt_data_end+0xf800f958>
1000fd48:	1023883a 	mov	r17,r2
1000fd4c:	003f0706 	br	1000f96c <__alt_data_end+0xf800f96c>
1000fd50:	0101ffc4 	movi	r4,2047
1000fd54:	813f331e 	bne	r16,r4,1000fa24 <__alt_data_end+0xf800fa24>
1000fd58:	003ec206 	br	1000f864 <__alt_data_end+0xf800f864>
1000fd5c:	0027883a 	mov	r19,zero
1000fd60:	003fb006 	br	1000fc24 <__alt_data_end+0xf800fc24>
1000fd64:	0005883a 	mov	r2,zero
1000fd68:	003fbb06 	br	1000fc58 <__alt_data_end+0xf800fc58>
1000fd6c:	2c44b03a 	or	r2,r5,r17
1000fd70:	80008b1e 	bne	r16,zero,1000ffa0 <__subdf3+0x7c8>
1000fd74:	1000b526 	beq	r2,zero,1001004c <__subdf3+0x874>
1000fd78:	1984b03a 	or	r2,r3,r6
1000fd7c:	103eb926 	beq	r2,zero,1000f864 <__alt_data_end+0xf800f864>
1000fd80:	3449883a 	add	r4,r6,r17
1000fd84:	2463803a 	cmpltu	r17,r4,r17
1000fd88:	194b883a 	add	r5,r3,r5
1000fd8c:	2c4b883a 	add	r5,r5,r17
1000fd90:	2880202c 	andhi	r2,r5,128
1000fd94:	2023883a 	mov	r17,r4
1000fd98:	103f5c26 	beq	r2,zero,1000fb0c <__alt_data_end+0xf800fb0c>
1000fd9c:	00bfe034 	movhi	r2,65408
1000fda0:	10bfffc4 	addi	r2,r2,-1
1000fda4:	4821883a 	mov	r16,r9
1000fda8:	288a703a 	and	r5,r5,r2
1000fdac:	003ead06 	br	1000f864 <__alt_data_end+0xf800f864>
1000fdb0:	2c44b03a 	or	r2,r5,r17
1000fdb4:	8000291e 	bne	r16,zero,1000fe5c <__subdf3+0x684>
1000fdb8:	10004f1e 	bne	r2,zero,1000fef8 <__subdf3+0x720>
1000fdbc:	1984b03a 	or	r2,r3,r6
1000fdc0:	10000426 	beq	r2,zero,1000fdd4 <__subdf3+0x5fc>
1000fdc4:	180b883a 	mov	r5,r3
1000fdc8:	3023883a 	mov	r17,r6
1000fdcc:	3825883a 	mov	r18,r7
1000fdd0:	003ea406 	br	1000f864 <__alt_data_end+0xf800f864>
1000fdd4:	0011883a 	mov	r8,zero
1000fdd8:	000b883a 	mov	r5,zero
1000fddc:	0023883a 	mov	r17,zero
1000fde0:	003f0006 	br	1000f9e4 <__alt_data_end+0xf800f9e4>
1000fde4:	11fff804 	addi	r7,r2,-32
1000fde8:	19c8d83a 	srl	r4,r3,r7
1000fdec:	01c00804 	movi	r7,32
1000fdf0:	11c07e26 	beq	r2,r7,1000ffec <__subdf3+0x814>
1000fdf4:	01c01004 	movi	r7,64
1000fdf8:	3885c83a 	sub	r2,r7,r2
1000fdfc:	1884983a 	sll	r2,r3,r2
1000fe00:	118cb03a 	or	r6,r2,r6
1000fe04:	300ec03a 	cmpne	r7,r6,zero
1000fe08:	390eb03a 	or	r7,r7,r4
1000fe0c:	0005883a 	mov	r2,zero
1000fe10:	003f0906 	br	1000fa38 <__alt_data_end+0xf800fa38>
1000fe14:	0101ffc4 	movi	r4,2047
1000fe18:	513f991e 	bne	r10,r4,1000fc80 <__alt_data_end+0xf800fc80>
1000fe1c:	180b883a 	mov	r5,r3
1000fe20:	3023883a 	mov	r17,r6
1000fe24:	5021883a 	mov	r16,r10
1000fe28:	3825883a 	mov	r18,r7
1000fe2c:	003e8d06 	br	1000f864 <__alt_data_end+0xf800f864>
1000fe30:	80001a1e 	bne	r16,zero,1000fe9c <__subdf3+0x6c4>
1000fe34:	2c48b03a 	or	r4,r5,r17
1000fe38:	20005526 	beq	r4,zero,1000ff90 <__subdf3+0x7b8>
1000fe3c:	0084303a 	nor	r2,zero,r2
1000fe40:	1000511e 	bne	r2,zero,1000ff88 <__subdf3+0x7b0>
1000fe44:	89a3883a 	add	r17,r17,r6
1000fe48:	194b883a 	add	r5,r3,r5
1000fe4c:	898d803a 	cmpltu	r6,r17,r6
1000fe50:	298b883a 	add	r5,r5,r6
1000fe54:	5021883a 	mov	r16,r10
1000fe58:	003efc06 	br	1000fa4c <__alt_data_end+0xf800fa4c>
1000fe5c:	1000341e 	bne	r2,zero,1000ff30 <__subdf3+0x758>
1000fe60:	1984b03a 	or	r2,r3,r6
1000fe64:	10006f26 	beq	r2,zero,10010024 <__subdf3+0x84c>
1000fe68:	180b883a 	mov	r5,r3
1000fe6c:	3023883a 	mov	r17,r6
1000fe70:	3825883a 	mov	r18,r7
1000fe74:	0401ffc4 	movi	r16,2047
1000fe78:	003e7a06 	br	1000f864 <__alt_data_end+0xf800f864>
1000fe7c:	2c62b03a 	or	r17,r5,r17
1000fe80:	8822c03a 	cmpne	r17,r17,zero
1000fe84:	0005883a 	mov	r2,zero
1000fe88:	003f8a06 	br	1000fcb4 <__alt_data_end+0xf800fcb4>
1000fe8c:	3821883a 	mov	r16,r7
1000fe90:	000b883a 	mov	r5,zero
1000fe94:	0023883a 	mov	r17,zero
1000fe98:	003ed206 	br	1000f9e4 <__alt_data_end+0xf800f9e4>
1000fe9c:	0101ffc4 	movi	r4,2047
1000fea0:	51003b26 	beq	r10,r4,1000ff90 <__subdf3+0x7b8>
1000fea4:	0085c83a 	sub	r2,zero,r2
1000fea8:	29402034 	orhi	r5,r5,128
1000feac:	01000e04 	movi	r4,56
1000feb0:	20806216 	blt	r4,r2,1001003c <__subdf3+0x864>
1000feb4:	010007c4 	movi	r4,31
1000feb8:	20806b16 	blt	r4,r2,10010068 <__subdf3+0x890>
1000febc:	01000804 	movi	r4,32
1000fec0:	2089c83a 	sub	r4,r4,r2
1000fec4:	2912983a 	sll	r9,r5,r4
1000fec8:	888ed83a 	srl	r7,r17,r2
1000fecc:	8908983a 	sll	r4,r17,r4
1000fed0:	2884d83a 	srl	r2,r5,r2
1000fed4:	49e2b03a 	or	r17,r9,r7
1000fed8:	2008c03a 	cmpne	r4,r4,zero
1000fedc:	8922b03a 	or	r17,r17,r4
1000fee0:	89a3883a 	add	r17,r17,r6
1000fee4:	10c5883a 	add	r2,r2,r3
1000fee8:	898d803a 	cmpltu	r6,r17,r6
1000feec:	118b883a 	add	r5,r2,r6
1000fef0:	5021883a 	mov	r16,r10
1000fef4:	003ed506 	br	1000fa4c <__alt_data_end+0xf800fa4c>
1000fef8:	1984b03a 	or	r2,r3,r6
1000fefc:	103e5926 	beq	r2,zero,1000f864 <__alt_data_end+0xf800f864>
1000ff00:	8989c83a 	sub	r4,r17,r6
1000ff04:	8911803a 	cmpltu	r8,r17,r4
1000ff08:	28c5c83a 	sub	r2,r5,r3
1000ff0c:	1205c83a 	sub	r2,r2,r8
1000ff10:	1200202c 	andhi	r8,r2,128
1000ff14:	403ef926 	beq	r8,zero,1000fafc <__alt_data_end+0xf800fafc>
1000ff18:	3463c83a 	sub	r17,r6,r17
1000ff1c:	194bc83a 	sub	r5,r3,r5
1000ff20:	344d803a 	cmpltu	r6,r6,r17
1000ff24:	298bc83a 	sub	r5,r5,r6
1000ff28:	3825883a 	mov	r18,r7
1000ff2c:	003e4d06 	br	1000f864 <__alt_data_end+0xf800f864>
1000ff30:	1984b03a 	or	r2,r3,r6
1000ff34:	10002b26 	beq	r2,zero,1000ffe4 <__subdf3+0x80c>
1000ff38:	2808d0fa 	srli	r4,r5,3
1000ff3c:	8822d0fa 	srli	r17,r17,3
1000ff40:	280a977a 	slli	r5,r5,29
1000ff44:	2080022c 	andhi	r2,r4,8
1000ff48:	2c62b03a 	or	r17,r5,r17
1000ff4c:	10000826 	beq	r2,zero,1000ff70 <__subdf3+0x798>
1000ff50:	1810d0fa 	srli	r8,r3,3
1000ff54:	4080022c 	andhi	r2,r8,8
1000ff58:	1000051e 	bne	r2,zero,1000ff70 <__subdf3+0x798>
1000ff5c:	300cd0fa 	srli	r6,r6,3
1000ff60:	1804977a 	slli	r2,r3,29
1000ff64:	4009883a 	mov	r4,r8
1000ff68:	3825883a 	mov	r18,r7
1000ff6c:	11a2b03a 	or	r17,r2,r6
1000ff70:	880ad77a 	srli	r5,r17,29
1000ff74:	200890fa 	slli	r4,r4,3
1000ff78:	882290fa 	slli	r17,r17,3
1000ff7c:	0401ffc4 	movi	r16,2047
1000ff80:	290ab03a 	or	r5,r5,r4
1000ff84:	003e3706 	br	1000f864 <__alt_data_end+0xf800f864>
1000ff88:	0101ffc4 	movi	r4,2047
1000ff8c:	513fc71e 	bne	r10,r4,1000feac <__alt_data_end+0xf800feac>
1000ff90:	180b883a 	mov	r5,r3
1000ff94:	3023883a 	mov	r17,r6
1000ff98:	5021883a 	mov	r16,r10
1000ff9c:	003e3106 	br	1000f864 <__alt_data_end+0xf800f864>
1000ffa0:	10002d26 	beq	r2,zero,10010058 <__subdf3+0x880>
1000ffa4:	1984b03a 	or	r2,r3,r6
1000ffa8:	10000e26 	beq	r2,zero,1000ffe4 <__subdf3+0x80c>
1000ffac:	2808d0fa 	srli	r4,r5,3
1000ffb0:	8822d0fa 	srli	r17,r17,3
1000ffb4:	280a977a 	slli	r5,r5,29
1000ffb8:	2080022c 	andhi	r2,r4,8
1000ffbc:	2c62b03a 	or	r17,r5,r17
1000ffc0:	103feb26 	beq	r2,zero,1000ff70 <__alt_data_end+0xf800ff70>
1000ffc4:	180ed0fa 	srli	r7,r3,3
1000ffc8:	3880022c 	andhi	r2,r7,8
1000ffcc:	103fe81e 	bne	r2,zero,1000ff70 <__alt_data_end+0xf800ff70>
1000ffd0:	300cd0fa 	srli	r6,r6,3
1000ffd4:	1804977a 	slli	r2,r3,29
1000ffd8:	3809883a 	mov	r4,r7
1000ffdc:	11a2b03a 	or	r17,r2,r6
1000ffe0:	003fe306 	br	1000ff70 <__alt_data_end+0xf800ff70>
1000ffe4:	0401ffc4 	movi	r16,2047
1000ffe8:	003e1e06 	br	1000f864 <__alt_data_end+0xf800f864>
1000ffec:	0005883a 	mov	r2,zero
1000fff0:	003f8306 	br	1000fe00 <__alt_data_end+0xf800fe00>
1000fff4:	113ff804 	addi	r4,r2,-32
1000fff8:	02000804 	movi	r8,32
1000fffc:	2908d83a 	srl	r4,r5,r4
10010000:	12002526 	beq	r2,r8,10010098 <__subdf3+0x8c0>
10010004:	02001004 	movi	r8,64
10010008:	4085c83a 	sub	r2,r8,r2
1001000c:	288a983a 	sll	r5,r5,r2
10010010:	2c62b03a 	or	r17,r5,r17
10010014:	8822c03a 	cmpne	r17,r17,zero
10010018:	8922b03a 	or	r17,r17,r4
1001001c:	0005883a 	mov	r2,zero
10010020:	003f2406 	br	1000fcb4 <__alt_data_end+0xf800fcb4>
10010024:	01402034 	movhi	r5,128
10010028:	0011883a 	mov	r8,zero
1001002c:	297fffc4 	addi	r5,r5,-1
10010030:	047ffe04 	movi	r17,-8
10010034:	0401ffc4 	movi	r16,2047
10010038:	003e6a06 	br	1000f9e4 <__alt_data_end+0xf800f9e4>
1001003c:	2c62b03a 	or	r17,r5,r17
10010040:	8822c03a 	cmpne	r17,r17,zero
10010044:	0005883a 	mov	r2,zero
10010048:	003fa506 	br	1000fee0 <__alt_data_end+0xf800fee0>
1001004c:	180b883a 	mov	r5,r3
10010050:	3023883a 	mov	r17,r6
10010054:	003e0306 	br	1000f864 <__alt_data_end+0xf800f864>
10010058:	180b883a 	mov	r5,r3
1001005c:	3023883a 	mov	r17,r6
10010060:	0401ffc4 	movi	r16,2047
10010064:	003dff06 	br	1000f864 <__alt_data_end+0xf800f864>
10010068:	113ff804 	addi	r4,r2,-32
1001006c:	01c00804 	movi	r7,32
10010070:	2908d83a 	srl	r4,r5,r4
10010074:	11c00a26 	beq	r2,r7,100100a0 <__subdf3+0x8c8>
10010078:	01c01004 	movi	r7,64
1001007c:	3885c83a 	sub	r2,r7,r2
10010080:	288a983a 	sll	r5,r5,r2
10010084:	2c62b03a 	or	r17,r5,r17
10010088:	8822c03a 	cmpne	r17,r17,zero
1001008c:	8922b03a 	or	r17,r17,r4
10010090:	0005883a 	mov	r2,zero
10010094:	003f9206 	br	1000fee0 <__alt_data_end+0xf800fee0>
10010098:	000b883a 	mov	r5,zero
1001009c:	003fdc06 	br	10010010 <__alt_data_end+0xf8010010>
100100a0:	000b883a 	mov	r5,zero
100100a4:	003ff706 	br	10010084 <__alt_data_end+0xf8010084>

100100a8 <__fixdfsi>:
100100a8:	2806d53a 	srli	r3,r5,20
100100ac:	00800434 	movhi	r2,16
100100b0:	10bfffc4 	addi	r2,r2,-1
100100b4:	18c1ffcc 	andi	r3,r3,2047
100100b8:	0180ff84 	movi	r6,1022
100100bc:	2884703a 	and	r2,r5,r2
100100c0:	280ad7fa 	srli	r5,r5,31
100100c4:	30c0130e 	bge	r6,r3,10010114 <__fixdfsi+0x6c>
100100c8:	01810744 	movi	r6,1053
100100cc:	30c00d16 	blt	r6,r3,10010104 <__fixdfsi+0x5c>
100100d0:	01810cc4 	movi	r6,1075
100100d4:	30cdc83a 	sub	r6,r6,r3
100100d8:	01c007c4 	movi	r7,31
100100dc:	10800434 	orhi	r2,r2,16
100100e0:	39800e0e 	bge	r7,r6,1001011c <__fixdfsi+0x74>
100100e4:	010104c4 	movi	r4,1043
100100e8:	20c7c83a 	sub	r3,r4,r3
100100ec:	10c6d83a 	srl	r3,r2,r3
100100f0:	29403fcc 	andi	r5,r5,255
100100f4:	0145c83a 	sub	r2,zero,r5
100100f8:	1884f03a 	xor	r2,r3,r2
100100fc:	1145883a 	add	r2,r2,r5
10010100:	f800283a 	ret
10010104:	00a00034 	movhi	r2,32768
10010108:	10bfffc4 	addi	r2,r2,-1
1001010c:	2885883a 	add	r2,r5,r2
10010110:	f800283a 	ret
10010114:	0005883a 	mov	r2,zero
10010118:	f800283a 	ret
1001011c:	18fefb44 	addi	r3,r3,-1043
10010120:	2188d83a 	srl	r4,r4,r6
10010124:	10c6983a 	sll	r3,r2,r3
10010128:	20c6b03a 	or	r3,r4,r3
1001012c:	003ff006 	br	100100f0 <__alt_data_end+0xf80100f0>

10010130 <__floatsidf>:
10010130:	defffd04 	addi	sp,sp,-12
10010134:	dc400115 	stw	r17,4(sp)
10010138:	dfc00215 	stw	ra,8(sp)
1001013c:	dc000015 	stw	r16,0(sp)
10010140:	2023883a 	mov	r17,r4
10010144:	20001426 	beq	r4,zero,10010198 <__floatsidf+0x68>
10010148:	2020d7fa 	srli	r16,r4,31
1001014c:	80000126 	beq	r16,zero,10010154 <__floatsidf+0x24>
10010150:	0123c83a 	sub	r17,zero,r4
10010154:	8809883a 	mov	r4,r17
10010158:	00043300 	call	10004330 <__clzsi2>
1001015c:	01410784 	movi	r5,1054
10010160:	00c00284 	movi	r3,10
10010164:	288bc83a 	sub	r5,r5,r2
10010168:	18801c16 	blt	r3,r2,100101dc <__floatsidf+0xac>
1001016c:	00c002c4 	movi	r3,11
10010170:	1887c83a 	sub	r3,r3,r2
10010174:	88c8d83a 	srl	r4,r17,r3
10010178:	00c00434 	movhi	r3,16
1001017c:	18ffffc4 	addi	r3,r3,-1
10010180:	10800544 	addi	r2,r2,21
10010184:	20c8703a 	and	r4,r4,r3
10010188:	8884983a 	sll	r2,r17,r2
1001018c:	28c1ffcc 	andi	r3,r5,2047
10010190:	800d883a 	mov	r6,r16
10010194:	00000406 	br	100101a8 <__floatsidf+0x78>
10010198:	000d883a 	mov	r6,zero
1001019c:	0007883a 	mov	r3,zero
100101a0:	0009883a 	mov	r4,zero
100101a4:	0005883a 	mov	r2,zero
100101a8:	180a953a 	slli	r5,r3,20
100101ac:	31803fcc 	andi	r6,r6,255
100101b0:	00c00434 	movhi	r3,16
100101b4:	300c97fa 	slli	r6,r6,31
100101b8:	18ffffc4 	addi	r3,r3,-1
100101bc:	20c6703a 	and	r3,r4,r3
100101c0:	1946b03a 	or	r3,r3,r5
100101c4:	1986b03a 	or	r3,r3,r6
100101c8:	dfc00217 	ldw	ra,8(sp)
100101cc:	dc400117 	ldw	r17,4(sp)
100101d0:	dc000017 	ldw	r16,0(sp)
100101d4:	dec00304 	addi	sp,sp,12
100101d8:	f800283a 	ret
100101dc:	10fffd44 	addi	r3,r2,-11
100101e0:	88c8983a 	sll	r4,r17,r3
100101e4:	00800434 	movhi	r2,16
100101e8:	10bfffc4 	addi	r2,r2,-1
100101ec:	2088703a 	and	r4,r4,r2
100101f0:	28c1ffcc 	andi	r3,r5,2047
100101f4:	800d883a 	mov	r6,r16
100101f8:	0005883a 	mov	r2,zero
100101fc:	003fea06 	br	100101a8 <__alt_data_end+0xf80101a8>

10010200 <__floatunsidf>:
10010200:	defffe04 	addi	sp,sp,-8
10010204:	dc000015 	stw	r16,0(sp)
10010208:	dfc00115 	stw	ra,4(sp)
1001020c:	2021883a 	mov	r16,r4
10010210:	20001026 	beq	r4,zero,10010254 <__floatunsidf+0x54>
10010214:	00043300 	call	10004330 <__clzsi2>
10010218:	01410784 	movi	r5,1054
1001021c:	100d883a 	mov	r6,r2
10010220:	288bc83a 	sub	r5,r5,r2
10010224:	00800284 	movi	r2,10
10010228:	11801616 	blt	r2,r6,10010284 <__floatunsidf+0x84>
1001022c:	008002c4 	movi	r2,11
10010230:	1185c83a 	sub	r2,r2,r6
10010234:	8084d83a 	srl	r2,r16,r2
10010238:	00c00434 	movhi	r3,16
1001023c:	31c00544 	addi	r7,r6,21
10010240:	18ffffc4 	addi	r3,r3,-1
10010244:	81e0983a 	sll	r16,r16,r7
10010248:	10cc703a 	and	r6,r2,r3
1001024c:	2941ffcc 	andi	r5,r5,2047
10010250:	00000206 	br	1001025c <__floatunsidf+0x5c>
10010254:	000b883a 	mov	r5,zero
10010258:	000d883a 	mov	r6,zero
1001025c:	280a953a 	slli	r5,r5,20
10010260:	00c00434 	movhi	r3,16
10010264:	18ffffc4 	addi	r3,r3,-1
10010268:	30c6703a 	and	r3,r6,r3
1001026c:	8005883a 	mov	r2,r16
10010270:	1946b03a 	or	r3,r3,r5
10010274:	dfc00117 	ldw	ra,4(sp)
10010278:	dc000017 	ldw	r16,0(sp)
1001027c:	dec00204 	addi	sp,sp,8
10010280:	f800283a 	ret
10010284:	31bffd44 	addi	r6,r6,-11
10010288:	818c983a 	sll	r6,r16,r6
1001028c:	00800434 	movhi	r2,16
10010290:	10bfffc4 	addi	r2,r2,-1
10010294:	2941ffcc 	andi	r5,r5,2047
10010298:	0021883a 	mov	r16,zero
1001029c:	308c703a 	and	r6,r6,r2
100102a0:	003fee06 	br	1001025c <__alt_data_end+0xf801025c>

100102a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100102a4:	defffe04 	addi	sp,sp,-8
100102a8:	dfc00115 	stw	ra,4(sp)
100102ac:	df000015 	stw	fp,0(sp)
100102b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100102b4:	00840074 	movhi	r2,4097
100102b8:	109aa104 	addi	r2,r2,27268
100102bc:	10800017 	ldw	r2,0(r2)
100102c0:	10000526 	beq	r2,zero,100102d8 <alt_get_errno+0x34>
100102c4:	00840074 	movhi	r2,4097
100102c8:	109aa104 	addi	r2,r2,27268
100102cc:	10800017 	ldw	r2,0(r2)
100102d0:	103ee83a 	callr	r2
100102d4:	00000206 	br	100102e0 <alt_get_errno+0x3c>
100102d8:	008400b4 	movhi	r2,4098
100102dc:	10a16804 	addi	r2,r2,-31328
}
100102e0:	e037883a 	mov	sp,fp
100102e4:	dfc00117 	ldw	ra,4(sp)
100102e8:	df000017 	ldw	fp,0(sp)
100102ec:	dec00204 	addi	sp,sp,8
100102f0:	f800283a 	ret

100102f4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
100102f4:	defffb04 	addi	sp,sp,-20
100102f8:	dfc00415 	stw	ra,16(sp)
100102fc:	df000315 	stw	fp,12(sp)
10010300:	df000304 	addi	fp,sp,12
10010304:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10010308:	e0bfff17 	ldw	r2,-4(fp)
1001030c:	10000816 	blt	r2,zero,10010330 <close+0x3c>
10010310:	e13fff17 	ldw	r4,-4(fp)
10010314:	01400304 	movi	r5,12
10010318:	00030800 	call	10003080 <__mulsi3>
1001031c:	1007883a 	mov	r3,r2
10010320:	00840074 	movhi	r2,4097
10010324:	10961e04 	addi	r2,r2,22648
10010328:	1885883a 	add	r2,r3,r2
1001032c:	00000106 	br	10010334 <close+0x40>
10010330:	0005883a 	mov	r2,zero
10010334:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10010338:	e0bffd17 	ldw	r2,-12(fp)
1001033c:	10001926 	beq	r2,zero,100103a4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10010340:	e0bffd17 	ldw	r2,-12(fp)
10010344:	10800017 	ldw	r2,0(r2)
10010348:	10800417 	ldw	r2,16(r2)
1001034c:	10000626 	beq	r2,zero,10010368 <close+0x74>
10010350:	e0bffd17 	ldw	r2,-12(fp)
10010354:	10800017 	ldw	r2,0(r2)
10010358:	10800417 	ldw	r2,16(r2)
1001035c:	e13ffd17 	ldw	r4,-12(fp)
10010360:	103ee83a 	callr	r2
10010364:	00000106 	br	1001036c <close+0x78>
10010368:	0005883a 	mov	r2,zero
1001036c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10010370:	e13fff17 	ldw	r4,-4(fp)
10010374:	0010a280 	call	10010a28 <alt_release_fd>
    if (rval < 0)
10010378:	e0bffe17 	ldw	r2,-8(fp)
1001037c:	1000070e 	bge	r2,zero,1001039c <close+0xa8>
    {
      ALT_ERRNO = -rval;
10010380:	00102a40 	call	100102a4 <alt_get_errno>
10010384:	1007883a 	mov	r3,r2
10010388:	e0bffe17 	ldw	r2,-8(fp)
1001038c:	0085c83a 	sub	r2,zero,r2
10010390:	18800015 	stw	r2,0(r3)
      return -1;
10010394:	00bfffc4 	movi	r2,-1
10010398:	00000706 	br	100103b8 <close+0xc4>
    }
    return 0;
1001039c:	0005883a 	mov	r2,zero
100103a0:	00000506 	br	100103b8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
100103a4:	00102a40 	call	100102a4 <alt_get_errno>
100103a8:	1007883a 	mov	r3,r2
100103ac:	00801444 	movi	r2,81
100103b0:	18800015 	stw	r2,0(r3)
    return -1;
100103b4:	00bfffc4 	movi	r2,-1
  }
}
100103b8:	e037883a 	mov	sp,fp
100103bc:	dfc00117 	ldw	ra,4(sp)
100103c0:	df000017 	ldw	fp,0(sp)
100103c4:	dec00204 	addi	sp,sp,8
100103c8:	f800283a 	ret

100103cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
100103cc:	defffc04 	addi	sp,sp,-16
100103d0:	df000315 	stw	fp,12(sp)
100103d4:	df000304 	addi	fp,sp,12
100103d8:	e13ffd15 	stw	r4,-12(fp)
100103dc:	e17ffe15 	stw	r5,-8(fp)
100103e0:	e1bfff15 	stw	r6,-4(fp)
  return len;
100103e4:	e0bfff17 	ldw	r2,-4(fp)
}
100103e8:	e037883a 	mov	sp,fp
100103ec:	df000017 	ldw	fp,0(sp)
100103f0:	dec00104 	addi	sp,sp,4
100103f4:	f800283a 	ret

100103f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100103f8:	defffe04 	addi	sp,sp,-8
100103fc:	dfc00115 	stw	ra,4(sp)
10010400:	df000015 	stw	fp,0(sp)
10010404:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010408:	00840074 	movhi	r2,4097
1001040c:	109aa104 	addi	r2,r2,27268
10010410:	10800017 	ldw	r2,0(r2)
10010414:	10000526 	beq	r2,zero,1001042c <alt_get_errno+0x34>
10010418:	00840074 	movhi	r2,4097
1001041c:	109aa104 	addi	r2,r2,27268
10010420:	10800017 	ldw	r2,0(r2)
10010424:	103ee83a 	callr	r2
10010428:	00000206 	br	10010434 <alt_get_errno+0x3c>
1001042c:	008400b4 	movhi	r2,4098
10010430:	10a16804 	addi	r2,r2,-31328
}
10010434:	e037883a 	mov	sp,fp
10010438:	dfc00117 	ldw	ra,4(sp)
1001043c:	df000017 	ldw	fp,0(sp)
10010440:	dec00204 	addi	sp,sp,8
10010444:	f800283a 	ret

10010448 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10010448:	defffb04 	addi	sp,sp,-20
1001044c:	dfc00415 	stw	ra,16(sp)
10010450:	df000315 	stw	fp,12(sp)
10010454:	df000304 	addi	fp,sp,12
10010458:	e13ffe15 	stw	r4,-8(fp)
1001045c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010460:	e0bffe17 	ldw	r2,-8(fp)
10010464:	10000816 	blt	r2,zero,10010488 <fstat+0x40>
10010468:	e13ffe17 	ldw	r4,-8(fp)
1001046c:	01400304 	movi	r5,12
10010470:	00030800 	call	10003080 <__mulsi3>
10010474:	1007883a 	mov	r3,r2
10010478:	00840074 	movhi	r2,4097
1001047c:	10961e04 	addi	r2,r2,22648
10010480:	1885883a 	add	r2,r3,r2
10010484:	00000106 	br	1001048c <fstat+0x44>
10010488:	0005883a 	mov	r2,zero
1001048c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10010490:	e0bffd17 	ldw	r2,-12(fp)
10010494:	10001026 	beq	r2,zero,100104d8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10010498:	e0bffd17 	ldw	r2,-12(fp)
1001049c:	10800017 	ldw	r2,0(r2)
100104a0:	10800817 	ldw	r2,32(r2)
100104a4:	10000726 	beq	r2,zero,100104c4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
100104a8:	e0bffd17 	ldw	r2,-12(fp)
100104ac:	10800017 	ldw	r2,0(r2)
100104b0:	10800817 	ldw	r2,32(r2)
100104b4:	e13ffd17 	ldw	r4,-12(fp)
100104b8:	e17fff17 	ldw	r5,-4(fp)
100104bc:	103ee83a 	callr	r2
100104c0:	00000a06 	br	100104ec <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
100104c4:	e0bfff17 	ldw	r2,-4(fp)
100104c8:	00c80004 	movi	r3,8192
100104cc:	10c00115 	stw	r3,4(r2)
      return 0;
100104d0:	0005883a 	mov	r2,zero
100104d4:	00000506 	br	100104ec <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100104d8:	00103f80 	call	100103f8 <alt_get_errno>
100104dc:	1007883a 	mov	r3,r2
100104e0:	00801444 	movi	r2,81
100104e4:	18800015 	stw	r2,0(r3)
    return -1;
100104e8:	00bfffc4 	movi	r2,-1
  }
}
100104ec:	e037883a 	mov	sp,fp
100104f0:	dfc00117 	ldw	ra,4(sp)
100104f4:	df000017 	ldw	fp,0(sp)
100104f8:	dec00204 	addi	sp,sp,8
100104fc:	f800283a 	ret

10010500 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010500:	defffe04 	addi	sp,sp,-8
10010504:	dfc00115 	stw	ra,4(sp)
10010508:	df000015 	stw	fp,0(sp)
1001050c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010510:	00840074 	movhi	r2,4097
10010514:	109aa104 	addi	r2,r2,27268
10010518:	10800017 	ldw	r2,0(r2)
1001051c:	10000526 	beq	r2,zero,10010534 <alt_get_errno+0x34>
10010520:	00840074 	movhi	r2,4097
10010524:	109aa104 	addi	r2,r2,27268
10010528:	10800017 	ldw	r2,0(r2)
1001052c:	103ee83a 	callr	r2
10010530:	00000206 	br	1001053c <alt_get_errno+0x3c>
10010534:	008400b4 	movhi	r2,4098
10010538:	10a16804 	addi	r2,r2,-31328
}
1001053c:	e037883a 	mov	sp,fp
10010540:	dfc00117 	ldw	ra,4(sp)
10010544:	df000017 	ldw	fp,0(sp)
10010548:	dec00204 	addi	sp,sp,8
1001054c:	f800283a 	ret

10010550 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10010550:	deffed04 	addi	sp,sp,-76
10010554:	dfc01215 	stw	ra,72(sp)
10010558:	df001115 	stw	fp,68(sp)
1001055c:	df001104 	addi	fp,sp,68
10010560:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010564:	e0bfff17 	ldw	r2,-4(fp)
10010568:	10000816 	blt	r2,zero,1001058c <isatty+0x3c>
1001056c:	e13fff17 	ldw	r4,-4(fp)
10010570:	01400304 	movi	r5,12
10010574:	00030800 	call	10003080 <__mulsi3>
10010578:	1007883a 	mov	r3,r2
1001057c:	00840074 	movhi	r2,4097
10010580:	10961e04 	addi	r2,r2,22648
10010584:	1885883a 	add	r2,r3,r2
10010588:	00000106 	br	10010590 <isatty+0x40>
1001058c:	0005883a 	mov	r2,zero
10010590:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10010594:	e0bfef17 	ldw	r2,-68(fp)
10010598:	10000e26 	beq	r2,zero,100105d4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1001059c:	e0bfef17 	ldw	r2,-68(fp)
100105a0:	10800017 	ldw	r2,0(r2)
100105a4:	10800817 	ldw	r2,32(r2)
100105a8:	1000021e 	bne	r2,zero,100105b4 <isatty+0x64>
    {
      return 1;
100105ac:	00800044 	movi	r2,1
100105b0:	00000d06 	br	100105e8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
100105b4:	e0bff004 	addi	r2,fp,-64
100105b8:	e13fff17 	ldw	r4,-4(fp)
100105bc:	100b883a 	mov	r5,r2
100105c0:	00104480 	call	10010448 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
100105c4:	e0bff117 	ldw	r2,-60(fp)
100105c8:	10880020 	cmpeqi	r2,r2,8192
100105cc:	10803fcc 	andi	r2,r2,255
100105d0:	00000506 	br	100105e8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100105d4:	00105000 	call	10010500 <alt_get_errno>
100105d8:	1007883a 	mov	r3,r2
100105dc:	00801444 	movi	r2,81
100105e0:	18800015 	stw	r2,0(r3)
    return 0;
100105e4:	0005883a 	mov	r2,zero
  }
}
100105e8:	e037883a 	mov	sp,fp
100105ec:	dfc00117 	ldw	ra,4(sp)
100105f0:	df000017 	ldw	fp,0(sp)
100105f4:	dec00204 	addi	sp,sp,8
100105f8:	f800283a 	ret

100105fc <alt_load_section>:
100105fc:	defffc04 	addi	sp,sp,-16
10010600:	df000315 	stw	fp,12(sp)
10010604:	df000304 	addi	fp,sp,12
10010608:	e13ffd15 	stw	r4,-12(fp)
1001060c:	e17ffe15 	stw	r5,-8(fp)
10010610:	e1bfff15 	stw	r6,-4(fp)
10010614:	e0fffe17 	ldw	r3,-8(fp)
10010618:	e0bffd17 	ldw	r2,-12(fp)
1001061c:	18800c26 	beq	r3,r2,10010650 <alt_load_section+0x54>
10010620:	00000806 	br	10010644 <alt_load_section+0x48>
10010624:	e0bffe17 	ldw	r2,-8(fp)
10010628:	10c00104 	addi	r3,r2,4
1001062c:	e0fffe15 	stw	r3,-8(fp)
10010630:	e0fffd17 	ldw	r3,-12(fp)
10010634:	19000104 	addi	r4,r3,4
10010638:	e13ffd15 	stw	r4,-12(fp)
1001063c:	18c00017 	ldw	r3,0(r3)
10010640:	10c00015 	stw	r3,0(r2)
10010644:	e0fffe17 	ldw	r3,-8(fp)
10010648:	e0bfff17 	ldw	r2,-4(fp)
1001064c:	18bff51e 	bne	r3,r2,10010624 <__alt_data_end+0xf8010624>
10010650:	0001883a 	nop
10010654:	e037883a 	mov	sp,fp
10010658:	df000017 	ldw	fp,0(sp)
1001065c:	dec00104 	addi	sp,sp,4
10010660:	f800283a 	ret

10010664 <alt_load>:
10010664:	defffe04 	addi	sp,sp,-8
10010668:	dfc00115 	stw	ra,4(sp)
1001066c:	df000015 	stw	fp,0(sp)
10010670:	d839883a 	mov	fp,sp
10010674:	01840074 	movhi	r6,4097
10010678:	319aa604 	addi	r6,r6,27288
1001067c:	01440074 	movhi	r5,4097
10010680:	2953eb04 	addi	r5,r5,20396
10010684:	01040074 	movhi	r4,4097
10010688:	211aa604 	addi	r4,r4,27288
1001068c:	00105fc0 	call	100105fc <alt_load_section>
10010690:	01840034 	movhi	r6,4096
10010694:	31806f04 	addi	r6,r6,444
10010698:	01440034 	movhi	r5,4096
1001069c:	29400804 	addi	r5,r5,32
100106a0:	01040034 	movhi	r4,4096
100106a4:	21000804 	addi	r4,r4,32
100106a8:	00105fc0 	call	100105fc <alt_load_section>
100106ac:	01840074 	movhi	r6,4097
100106b0:	3193eb04 	addi	r6,r6,20396
100106b4:	01440074 	movhi	r5,4097
100106b8:	294ac004 	addi	r5,r5,11008
100106bc:	01040074 	movhi	r4,4097
100106c0:	210ac004 	addi	r4,r4,11008
100106c4:	00105fc0 	call	100105fc <alt_load_section>
100106c8:	0011a700 	call	10011a70 <alt_dcache_flush_all>
100106cc:	0011c400 	call	10011c40 <alt_icache_flush_all>
100106d0:	0001883a 	nop
100106d4:	e037883a 	mov	sp,fp
100106d8:	dfc00117 	ldw	ra,4(sp)
100106dc:	df000017 	ldw	fp,0(sp)
100106e0:	dec00204 	addi	sp,sp,8
100106e4:	f800283a 	ret

100106e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100106e8:	defffe04 	addi	sp,sp,-8
100106ec:	dfc00115 	stw	ra,4(sp)
100106f0:	df000015 	stw	fp,0(sp)
100106f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100106f8:	00840074 	movhi	r2,4097
100106fc:	109aa104 	addi	r2,r2,27268
10010700:	10800017 	ldw	r2,0(r2)
10010704:	10000526 	beq	r2,zero,1001071c <alt_get_errno+0x34>
10010708:	00840074 	movhi	r2,4097
1001070c:	109aa104 	addi	r2,r2,27268
10010710:	10800017 	ldw	r2,0(r2)
10010714:	103ee83a 	callr	r2
10010718:	00000206 	br	10010724 <alt_get_errno+0x3c>
1001071c:	008400b4 	movhi	r2,4098
10010720:	10a16804 	addi	r2,r2,-31328
}
10010724:	e037883a 	mov	sp,fp
10010728:	dfc00117 	ldw	ra,4(sp)
1001072c:	df000017 	ldw	fp,0(sp)
10010730:	dec00204 	addi	sp,sp,8
10010734:	f800283a 	ret

10010738 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10010738:	defff904 	addi	sp,sp,-28
1001073c:	dfc00615 	stw	ra,24(sp)
10010740:	df000515 	stw	fp,20(sp)
10010744:	df000504 	addi	fp,sp,20
10010748:	e13ffd15 	stw	r4,-12(fp)
1001074c:	e17ffe15 	stw	r5,-8(fp)
10010750:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10010754:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010758:	e0bffd17 	ldw	r2,-12(fp)
1001075c:	10000816 	blt	r2,zero,10010780 <lseek+0x48>
10010760:	e13ffd17 	ldw	r4,-12(fp)
10010764:	01400304 	movi	r5,12
10010768:	00030800 	call	10003080 <__mulsi3>
1001076c:	1007883a 	mov	r3,r2
10010770:	00840074 	movhi	r2,4097
10010774:	10961e04 	addi	r2,r2,22648
10010778:	1885883a 	add	r2,r3,r2
1001077c:	00000106 	br	10010784 <lseek+0x4c>
10010780:	0005883a 	mov	r2,zero
10010784:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10010788:	e0bffc17 	ldw	r2,-16(fp)
1001078c:	10001026 	beq	r2,zero,100107d0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10010790:	e0bffc17 	ldw	r2,-16(fp)
10010794:	10800017 	ldw	r2,0(r2)
10010798:	10800717 	ldw	r2,28(r2)
1001079c:	10000926 	beq	r2,zero,100107c4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
100107a0:	e0bffc17 	ldw	r2,-16(fp)
100107a4:	10800017 	ldw	r2,0(r2)
100107a8:	10800717 	ldw	r2,28(r2)
100107ac:	e13ffc17 	ldw	r4,-16(fp)
100107b0:	e17ffe17 	ldw	r5,-8(fp)
100107b4:	e1bfff17 	ldw	r6,-4(fp)
100107b8:	103ee83a 	callr	r2
100107bc:	e0bffb15 	stw	r2,-20(fp)
100107c0:	00000506 	br	100107d8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
100107c4:	00bfde84 	movi	r2,-134
100107c8:	e0bffb15 	stw	r2,-20(fp)
100107cc:	00000206 	br	100107d8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
100107d0:	00bfebc4 	movi	r2,-81
100107d4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
100107d8:	e0bffb17 	ldw	r2,-20(fp)
100107dc:	1000070e 	bge	r2,zero,100107fc <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
100107e0:	00106e80 	call	100106e8 <alt_get_errno>
100107e4:	1007883a 	mov	r3,r2
100107e8:	e0bffb17 	ldw	r2,-20(fp)
100107ec:	0085c83a 	sub	r2,zero,r2
100107f0:	18800015 	stw	r2,0(r3)
    rc = -1;
100107f4:	00bfffc4 	movi	r2,-1
100107f8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
100107fc:	e0bffb17 	ldw	r2,-20(fp)
}
10010800:	e037883a 	mov	sp,fp
10010804:	dfc00117 	ldw	ra,4(sp)
10010808:	df000017 	ldw	fp,0(sp)
1001080c:	dec00204 	addi	sp,sp,8
10010810:	f800283a 	ret

10010814 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10010814:	defffd04 	addi	sp,sp,-12
10010818:	dfc00215 	stw	ra,8(sp)
1001081c:	df000115 	stw	fp,4(sp)
10010820:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10010824:	0009883a 	mov	r4,zero
10010828:	0010d100 	call	10010d10 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1001082c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10010830:	0010d440 	call	10010d44 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10010834:	01040074 	movhi	r4,4097
10010838:	2113e104 	addi	r4,r4,20356
1001083c:	01440074 	movhi	r5,4097
10010840:	2953e104 	addi	r5,r5,20356
10010844:	01840074 	movhi	r6,4097
10010848:	3193e104 	addi	r6,r6,20356
1001084c:	001200c0 	call	1001200c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10010850:	0011b800 	call	10011b80 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10010854:	01040074 	movhi	r4,4097
10010858:	2106f804 	addi	r4,r4,7136
1001085c:	001275c0 	call	1001275c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10010860:	d126d317 	ldw	r4,-25780(gp)
10010864:	d0e6d417 	ldw	r3,-25776(gp)
10010868:	d0a6d517 	ldw	r2,-25772(gp)
1001086c:	180b883a 	mov	r5,r3
10010870:	100d883a 	mov	r6,r2
10010874:	00003340 	call	10000334 <main>
10010878:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1001087c:	01000044 	movi	r4,1
10010880:	00102f40 	call	100102f4 <close>
  exit (result);
10010884:	e13fff17 	ldw	r4,-4(fp)
10010888:	00127700 	call	10012770 <exit>

1001088c <__malloc_lock>:
1001088c:	defffe04 	addi	sp,sp,-8
10010890:	df000115 	stw	fp,4(sp)
10010894:	df000104 	addi	fp,sp,4
10010898:	e13fff15 	stw	r4,-4(fp)
1001089c:	0001883a 	nop
100108a0:	e037883a 	mov	sp,fp
100108a4:	df000017 	ldw	fp,0(sp)
100108a8:	dec00104 	addi	sp,sp,4
100108ac:	f800283a 	ret

100108b0 <__malloc_unlock>:
100108b0:	defffe04 	addi	sp,sp,-8
100108b4:	df000115 	stw	fp,4(sp)
100108b8:	df000104 	addi	fp,sp,4
100108bc:	e13fff15 	stw	r4,-4(fp)
100108c0:	0001883a 	nop
100108c4:	e037883a 	mov	sp,fp
100108c8:	df000017 	ldw	fp,0(sp)
100108cc:	dec00104 	addi	sp,sp,4
100108d0:	f800283a 	ret

100108d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100108d4:	defffe04 	addi	sp,sp,-8
100108d8:	dfc00115 	stw	ra,4(sp)
100108dc:	df000015 	stw	fp,0(sp)
100108e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100108e4:	00840074 	movhi	r2,4097
100108e8:	109aa104 	addi	r2,r2,27268
100108ec:	10800017 	ldw	r2,0(r2)
100108f0:	10000526 	beq	r2,zero,10010908 <alt_get_errno+0x34>
100108f4:	00840074 	movhi	r2,4097
100108f8:	109aa104 	addi	r2,r2,27268
100108fc:	10800017 	ldw	r2,0(r2)
10010900:	103ee83a 	callr	r2
10010904:	00000206 	br	10010910 <alt_get_errno+0x3c>
10010908:	008400b4 	movhi	r2,4098
1001090c:	10a16804 	addi	r2,r2,-31328
}
10010910:	e037883a 	mov	sp,fp
10010914:	dfc00117 	ldw	ra,4(sp)
10010918:	df000017 	ldw	fp,0(sp)
1001091c:	dec00204 	addi	sp,sp,8
10010920:	f800283a 	ret

10010924 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10010924:	defff904 	addi	sp,sp,-28
10010928:	dfc00615 	stw	ra,24(sp)
1001092c:	df000515 	stw	fp,20(sp)
10010930:	df000504 	addi	fp,sp,20
10010934:	e13ffd15 	stw	r4,-12(fp)
10010938:	e17ffe15 	stw	r5,-8(fp)
1001093c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010940:	e0bffd17 	ldw	r2,-12(fp)
10010944:	10000816 	blt	r2,zero,10010968 <read+0x44>
10010948:	e13ffd17 	ldw	r4,-12(fp)
1001094c:	01400304 	movi	r5,12
10010950:	00030800 	call	10003080 <__mulsi3>
10010954:	1007883a 	mov	r3,r2
10010958:	00840074 	movhi	r2,4097
1001095c:	10961e04 	addi	r2,r2,22648
10010960:	1885883a 	add	r2,r3,r2
10010964:	00000106 	br	1001096c <read+0x48>
10010968:	0005883a 	mov	r2,zero
1001096c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10010970:	e0bffb17 	ldw	r2,-20(fp)
10010974:	10002226 	beq	r2,zero,10010a00 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10010978:	e0bffb17 	ldw	r2,-20(fp)
1001097c:	10800217 	ldw	r2,8(r2)
10010980:	108000cc 	andi	r2,r2,3
10010984:	10800060 	cmpeqi	r2,r2,1
10010988:	1000181e 	bne	r2,zero,100109ec <read+0xc8>
        (fd->dev->read))
1001098c:	e0bffb17 	ldw	r2,-20(fp)
10010990:	10800017 	ldw	r2,0(r2)
10010994:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10010998:	10001426 	beq	r2,zero,100109ec <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1001099c:	e0bffb17 	ldw	r2,-20(fp)
100109a0:	10800017 	ldw	r2,0(r2)
100109a4:	10800517 	ldw	r2,20(r2)
100109a8:	e0ffff17 	ldw	r3,-4(fp)
100109ac:	e13ffb17 	ldw	r4,-20(fp)
100109b0:	e17ffe17 	ldw	r5,-8(fp)
100109b4:	180d883a 	mov	r6,r3
100109b8:	103ee83a 	callr	r2
100109bc:	e0bffc15 	stw	r2,-16(fp)
100109c0:	e0bffc17 	ldw	r2,-16(fp)
100109c4:	1000070e 	bge	r2,zero,100109e4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
100109c8:	00108d40 	call	100108d4 <alt_get_errno>
100109cc:	1007883a 	mov	r3,r2
100109d0:	e0bffc17 	ldw	r2,-16(fp)
100109d4:	0085c83a 	sub	r2,zero,r2
100109d8:	18800015 	stw	r2,0(r3)
          return -1;
100109dc:	00bfffc4 	movi	r2,-1
100109e0:	00000c06 	br	10010a14 <read+0xf0>
        }
        return rval;
100109e4:	e0bffc17 	ldw	r2,-16(fp)
100109e8:	00000a06 	br	10010a14 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
100109ec:	00108d40 	call	100108d4 <alt_get_errno>
100109f0:	1007883a 	mov	r3,r2
100109f4:	00800344 	movi	r2,13
100109f8:	18800015 	stw	r2,0(r3)
100109fc:	00000406 	br	10010a10 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10010a00:	00108d40 	call	100108d4 <alt_get_errno>
10010a04:	1007883a 	mov	r3,r2
10010a08:	00801444 	movi	r2,81
10010a0c:	18800015 	stw	r2,0(r3)
  }
  return -1;
10010a10:	00bfffc4 	movi	r2,-1
}
10010a14:	e037883a 	mov	sp,fp
10010a18:	dfc00117 	ldw	ra,4(sp)
10010a1c:	df000017 	ldw	fp,0(sp)
10010a20:	dec00204 	addi	sp,sp,8
10010a24:	f800283a 	ret

10010a28 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10010a28:	defffc04 	addi	sp,sp,-16
10010a2c:	dfc00315 	stw	ra,12(sp)
10010a30:	df000215 	stw	fp,8(sp)
10010a34:	dc000115 	stw	r16,4(sp)
10010a38:	df000204 	addi	fp,sp,8
10010a3c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10010a40:	e0bffe17 	ldw	r2,-8(fp)
10010a44:	108000d0 	cmplti	r2,r2,3
10010a48:	1000111e 	bne	r2,zero,10010a90 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10010a4c:	04040074 	movhi	r16,4097
10010a50:	84161e04 	addi	r16,r16,22648
10010a54:	e0bffe17 	ldw	r2,-8(fp)
10010a58:	1009883a 	mov	r4,r2
10010a5c:	01400304 	movi	r5,12
10010a60:	00030800 	call	10003080 <__mulsi3>
10010a64:	8085883a 	add	r2,r16,r2
10010a68:	10800204 	addi	r2,r2,8
10010a6c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10010a70:	04040074 	movhi	r16,4097
10010a74:	84161e04 	addi	r16,r16,22648
10010a78:	e0bffe17 	ldw	r2,-8(fp)
10010a7c:	1009883a 	mov	r4,r2
10010a80:	01400304 	movi	r5,12
10010a84:	00030800 	call	10003080 <__mulsi3>
10010a88:	8085883a 	add	r2,r16,r2
10010a8c:	10000015 	stw	zero,0(r2)
  }
}
10010a90:	e6ffff04 	addi	sp,fp,-4
10010a94:	dfc00217 	ldw	ra,8(sp)
10010a98:	df000117 	ldw	fp,4(sp)
10010a9c:	dc000017 	ldw	r16,0(sp)
10010aa0:	dec00304 	addi	sp,sp,12
10010aa4:	f800283a 	ret

10010aa8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10010aa8:	defff904 	addi	sp,sp,-28
10010aac:	df000615 	stw	fp,24(sp)
10010ab0:	df000604 	addi	fp,sp,24
10010ab4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010ab8:	0005303a 	rdctl	r2,status
10010abc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010ac0:	e0fffc17 	ldw	r3,-16(fp)
10010ac4:	00bfff84 	movi	r2,-2
10010ac8:	1884703a 	and	r2,r3,r2
10010acc:	1001703a 	wrctl	status,r2
  
  return context;
10010ad0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10010ad4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10010ad8:	d0a00c17 	ldw	r2,-32720(gp)
10010adc:	10c000c4 	addi	r3,r2,3
10010ae0:	00bfff04 	movi	r2,-4
10010ae4:	1884703a 	and	r2,r3,r2
10010ae8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10010aec:	d0e00c17 	ldw	r3,-32720(gp)
10010af0:	e0bfff17 	ldw	r2,-4(fp)
10010af4:	1887883a 	add	r3,r3,r2
10010af8:	00860034 	movhi	r2,6144
10010afc:	10800004 	addi	r2,r2,0
10010b00:	10c0062e 	bgeu	r2,r3,10010b1c <sbrk+0x74>
10010b04:	e0bffa17 	ldw	r2,-24(fp)
10010b08:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010b0c:	e0bffd17 	ldw	r2,-12(fp)
10010b10:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10010b14:	00bfffc4 	movi	r2,-1
10010b18:	00000b06 	br	10010b48 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10010b1c:	d0a00c17 	ldw	r2,-32720(gp)
10010b20:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
10010b24:	d0e00c17 	ldw	r3,-32720(gp)
10010b28:	e0bfff17 	ldw	r2,-4(fp)
10010b2c:	1885883a 	add	r2,r3,r2
10010b30:	d0a00c15 	stw	r2,-32720(gp)
10010b34:	e0bffa17 	ldw	r2,-24(fp)
10010b38:	e0bffe15 	stw	r2,-8(fp)
10010b3c:	e0bffe17 	ldw	r2,-8(fp)
10010b40:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10010b44:	e0bffb17 	ldw	r2,-20(fp)
} 
10010b48:	e037883a 	mov	sp,fp
10010b4c:	df000017 	ldw	fp,0(sp)
10010b50:	dec00104 	addi	sp,sp,4
10010b54:	f800283a 	ret

10010b58 <usleep>:
10010b58:	defffd04 	addi	sp,sp,-12
10010b5c:	dfc00215 	stw	ra,8(sp)
10010b60:	df000115 	stw	fp,4(sp)
10010b64:	df000104 	addi	fp,sp,4
10010b68:	e13fff15 	stw	r4,-4(fp)
10010b6c:	e13fff17 	ldw	r4,-4(fp)
10010b70:	00119180 	call	10011918 <alt_busy_sleep>
10010b74:	e037883a 	mov	sp,fp
10010b78:	dfc00117 	ldw	ra,4(sp)
10010b7c:	df000017 	ldw	fp,0(sp)
10010b80:	dec00204 	addi	sp,sp,8
10010b84:	f800283a 	ret

10010b88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010b88:	defffe04 	addi	sp,sp,-8
10010b8c:	dfc00115 	stw	ra,4(sp)
10010b90:	df000015 	stw	fp,0(sp)
10010b94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010b98:	00840074 	movhi	r2,4097
10010b9c:	109aa104 	addi	r2,r2,27268
10010ba0:	10800017 	ldw	r2,0(r2)
10010ba4:	10000526 	beq	r2,zero,10010bbc <alt_get_errno+0x34>
10010ba8:	00840074 	movhi	r2,4097
10010bac:	109aa104 	addi	r2,r2,27268
10010bb0:	10800017 	ldw	r2,0(r2)
10010bb4:	103ee83a 	callr	r2
10010bb8:	00000206 	br	10010bc4 <alt_get_errno+0x3c>
10010bbc:	008400b4 	movhi	r2,4098
10010bc0:	10a16804 	addi	r2,r2,-31328
}
10010bc4:	e037883a 	mov	sp,fp
10010bc8:	dfc00117 	ldw	ra,4(sp)
10010bcc:	df000017 	ldw	fp,0(sp)
10010bd0:	dec00204 	addi	sp,sp,8
10010bd4:	f800283a 	ret

10010bd8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10010bd8:	defff904 	addi	sp,sp,-28
10010bdc:	dfc00615 	stw	ra,24(sp)
10010be0:	df000515 	stw	fp,20(sp)
10010be4:	df000504 	addi	fp,sp,20
10010be8:	e13ffd15 	stw	r4,-12(fp)
10010bec:	e17ffe15 	stw	r5,-8(fp)
10010bf0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010bf4:	e0bffd17 	ldw	r2,-12(fp)
10010bf8:	10000816 	blt	r2,zero,10010c1c <write+0x44>
10010bfc:	e13ffd17 	ldw	r4,-12(fp)
10010c00:	01400304 	movi	r5,12
10010c04:	00030800 	call	10003080 <__mulsi3>
10010c08:	1007883a 	mov	r3,r2
10010c0c:	00840074 	movhi	r2,4097
10010c10:	10961e04 	addi	r2,r2,22648
10010c14:	1885883a 	add	r2,r3,r2
10010c18:	00000106 	br	10010c20 <write+0x48>
10010c1c:	0005883a 	mov	r2,zero
10010c20:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10010c24:	e0bffb17 	ldw	r2,-20(fp)
10010c28:	10002126 	beq	r2,zero,10010cb0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10010c2c:	e0bffb17 	ldw	r2,-20(fp)
10010c30:	10800217 	ldw	r2,8(r2)
10010c34:	108000cc 	andi	r2,r2,3
10010c38:	10001826 	beq	r2,zero,10010c9c <write+0xc4>
10010c3c:	e0bffb17 	ldw	r2,-20(fp)
10010c40:	10800017 	ldw	r2,0(r2)
10010c44:	10800617 	ldw	r2,24(r2)
10010c48:	10001426 	beq	r2,zero,10010c9c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10010c4c:	e0bffb17 	ldw	r2,-20(fp)
10010c50:	10800017 	ldw	r2,0(r2)
10010c54:	10800617 	ldw	r2,24(r2)
10010c58:	e0ffff17 	ldw	r3,-4(fp)
10010c5c:	e13ffb17 	ldw	r4,-20(fp)
10010c60:	e17ffe17 	ldw	r5,-8(fp)
10010c64:	180d883a 	mov	r6,r3
10010c68:	103ee83a 	callr	r2
10010c6c:	e0bffc15 	stw	r2,-16(fp)
10010c70:	e0bffc17 	ldw	r2,-16(fp)
10010c74:	1000070e 	bge	r2,zero,10010c94 <write+0xbc>
      {
        ALT_ERRNO = -rval;
10010c78:	0010b880 	call	10010b88 <alt_get_errno>
10010c7c:	1007883a 	mov	r3,r2
10010c80:	e0bffc17 	ldw	r2,-16(fp)
10010c84:	0085c83a 	sub	r2,zero,r2
10010c88:	18800015 	stw	r2,0(r3)
        return -1;
10010c8c:	00bfffc4 	movi	r2,-1
10010c90:	00000c06 	br	10010cc4 <write+0xec>
      }
      return rval;
10010c94:	e0bffc17 	ldw	r2,-16(fp)
10010c98:	00000a06 	br	10010cc4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10010c9c:	0010b880 	call	10010b88 <alt_get_errno>
10010ca0:	1007883a 	mov	r3,r2
10010ca4:	00800344 	movi	r2,13
10010ca8:	18800015 	stw	r2,0(r3)
10010cac:	00000406 	br	10010cc0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10010cb0:	0010b880 	call	10010b88 <alt_get_errno>
10010cb4:	1007883a 	mov	r3,r2
10010cb8:	00801444 	movi	r2,81
10010cbc:	18800015 	stw	r2,0(r3)
  }
  return -1;
10010cc0:	00bfffc4 	movi	r2,-1
}
10010cc4:	e037883a 	mov	sp,fp
10010cc8:	dfc00117 	ldw	ra,4(sp)
10010ccc:	df000017 	ldw	fp,0(sp)
10010cd0:	dec00204 	addi	sp,sp,8
10010cd4:	f800283a 	ret

10010cd8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10010cd8:	defffd04 	addi	sp,sp,-12
10010cdc:	dfc00215 	stw	ra,8(sp)
10010ce0:	df000115 	stw	fp,4(sp)
10010ce4:	df000104 	addi	fp,sp,4
10010ce8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10010cec:	e13fff17 	ldw	r4,-4(fp)
10010cf0:	01440074 	movhi	r5,4097
10010cf4:	295a9e04 	addi	r5,r5,27256
10010cf8:	0011adc0 	call	10011adc <alt_dev_llist_insert>
}
10010cfc:	e037883a 	mov	sp,fp
10010d00:	dfc00117 	ldw	ra,4(sp)
10010d04:	df000017 	ldw	fp,0(sp)
10010d08:	dec00204 	addi	sp,sp,8
10010d0c:	f800283a 	ret

10010d10 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10010d10:	defffd04 	addi	sp,sp,-12
10010d14:	dfc00215 	stw	ra,8(sp)
10010d18:	df000115 	stw	fp,4(sp)
10010d1c:	df000104 	addi	fp,sp,4
10010d20:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
10010d24:	00124c40 	call	100124c4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10010d28:	00800044 	movi	r2,1
10010d2c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10010d30:	e037883a 	mov	sp,fp
10010d34:	dfc00117 	ldw	ra,4(sp)
10010d38:	df000017 	ldw	fp,0(sp)
10010d3c:	dec00204 	addi	sp,sp,8
10010d40:	f800283a 	ret

10010d44 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10010d44:	defffe04 	addi	sp,sp,-8
10010d48:	dfc00115 	stw	ra,4(sp)
10010d4c:	df000015 	stw	fp,0(sp)
10010d50:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10010d54:	01040074 	movhi	r4,4097
10010d58:	21168804 	addi	r4,r4,23072
10010d5c:	000b883a 	mov	r5,zero
10010d60:	01800144 	movi	r6,5
10010d64:	0010ef00 	call	10010ef0 <altera_avalon_jtag_uart_init>
10010d68:	01040074 	movhi	r4,4097
10010d6c:	21167e04 	addi	r4,r4,23032
10010d70:	0010cd80 	call	10010cd8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10010d74:	0001883a 	nop
}
10010d78:	e037883a 	mov	sp,fp
10010d7c:	dfc00117 	ldw	ra,4(sp)
10010d80:	df000017 	ldw	fp,0(sp)
10010d84:	dec00204 	addi	sp,sp,8
10010d88:	f800283a 	ret

10010d8c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10010d8c:	defffa04 	addi	sp,sp,-24
10010d90:	dfc00515 	stw	ra,20(sp)
10010d94:	df000415 	stw	fp,16(sp)
10010d98:	df000404 	addi	fp,sp,16
10010d9c:	e13ffd15 	stw	r4,-12(fp)
10010da0:	e17ffe15 	stw	r5,-8(fp)
10010da4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010da8:	e0bffd17 	ldw	r2,-12(fp)
10010dac:	10800017 	ldw	r2,0(r2)
10010db0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10010db4:	e0bffc17 	ldw	r2,-16(fp)
10010db8:	10c00a04 	addi	r3,r2,40
10010dbc:	e0bffd17 	ldw	r2,-12(fp)
10010dc0:	10800217 	ldw	r2,8(r2)
10010dc4:	1809883a 	mov	r4,r3
10010dc8:	e17ffe17 	ldw	r5,-8(fp)
10010dcc:	e1bfff17 	ldw	r6,-4(fp)
10010dd0:	100f883a 	mov	r7,r2
10010dd4:	00113b40 	call	100113b4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10010dd8:	e037883a 	mov	sp,fp
10010ddc:	dfc00117 	ldw	ra,4(sp)
10010de0:	df000017 	ldw	fp,0(sp)
10010de4:	dec00204 	addi	sp,sp,8
10010de8:	f800283a 	ret

10010dec <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10010dec:	defffa04 	addi	sp,sp,-24
10010df0:	dfc00515 	stw	ra,20(sp)
10010df4:	df000415 	stw	fp,16(sp)
10010df8:	df000404 	addi	fp,sp,16
10010dfc:	e13ffd15 	stw	r4,-12(fp)
10010e00:	e17ffe15 	stw	r5,-8(fp)
10010e04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010e08:	e0bffd17 	ldw	r2,-12(fp)
10010e0c:	10800017 	ldw	r2,0(r2)
10010e10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10010e14:	e0bffc17 	ldw	r2,-16(fp)
10010e18:	10c00a04 	addi	r3,r2,40
10010e1c:	e0bffd17 	ldw	r2,-12(fp)
10010e20:	10800217 	ldw	r2,8(r2)
10010e24:	1809883a 	mov	r4,r3
10010e28:	e17ffe17 	ldw	r5,-8(fp)
10010e2c:	e1bfff17 	ldw	r6,-4(fp)
10010e30:	100f883a 	mov	r7,r2
10010e34:	00115c00 	call	100115c0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10010e38:	e037883a 	mov	sp,fp
10010e3c:	dfc00117 	ldw	ra,4(sp)
10010e40:	df000017 	ldw	fp,0(sp)
10010e44:	dec00204 	addi	sp,sp,8
10010e48:	f800283a 	ret

10010e4c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10010e4c:	defffc04 	addi	sp,sp,-16
10010e50:	dfc00315 	stw	ra,12(sp)
10010e54:	df000215 	stw	fp,8(sp)
10010e58:	df000204 	addi	fp,sp,8
10010e5c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10010e60:	e0bfff17 	ldw	r2,-4(fp)
10010e64:	10800017 	ldw	r2,0(r2)
10010e68:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10010e6c:	e0bffe17 	ldw	r2,-8(fp)
10010e70:	10c00a04 	addi	r3,r2,40
10010e74:	e0bfff17 	ldw	r2,-4(fp)
10010e78:	10800217 	ldw	r2,8(r2)
10010e7c:	1809883a 	mov	r4,r3
10010e80:	100b883a 	mov	r5,r2
10010e84:	00112600 	call	10011260 <altera_avalon_jtag_uart_close>
}
10010e88:	e037883a 	mov	sp,fp
10010e8c:	dfc00117 	ldw	ra,4(sp)
10010e90:	df000017 	ldw	fp,0(sp)
10010e94:	dec00204 	addi	sp,sp,8
10010e98:	f800283a 	ret

10010e9c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10010e9c:	defffa04 	addi	sp,sp,-24
10010ea0:	dfc00515 	stw	ra,20(sp)
10010ea4:	df000415 	stw	fp,16(sp)
10010ea8:	df000404 	addi	fp,sp,16
10010eac:	e13ffd15 	stw	r4,-12(fp)
10010eb0:	e17ffe15 	stw	r5,-8(fp)
10010eb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10010eb8:	e0bffd17 	ldw	r2,-12(fp)
10010ebc:	10800017 	ldw	r2,0(r2)
10010ec0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10010ec4:	e0bffc17 	ldw	r2,-16(fp)
10010ec8:	10800a04 	addi	r2,r2,40
10010ecc:	1009883a 	mov	r4,r2
10010ed0:	e17ffe17 	ldw	r5,-8(fp)
10010ed4:	e1bfff17 	ldw	r6,-4(fp)
10010ed8:	00112c80 	call	100112c8 <altera_avalon_jtag_uart_ioctl>
}
10010edc:	e037883a 	mov	sp,fp
10010ee0:	dfc00117 	ldw	ra,4(sp)
10010ee4:	df000017 	ldw	fp,0(sp)
10010ee8:	dec00204 	addi	sp,sp,8
10010eec:	f800283a 	ret

10010ef0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10010ef0:	defffa04 	addi	sp,sp,-24
10010ef4:	dfc00515 	stw	ra,20(sp)
10010ef8:	df000415 	stw	fp,16(sp)
10010efc:	df000404 	addi	fp,sp,16
10010f00:	e13ffd15 	stw	r4,-12(fp)
10010f04:	e17ffe15 	stw	r5,-8(fp)
10010f08:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10010f0c:	e0bffd17 	ldw	r2,-12(fp)
10010f10:	00c00044 	movi	r3,1
10010f14:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10010f18:	e0bffd17 	ldw	r2,-12(fp)
10010f1c:	10800017 	ldw	r2,0(r2)
10010f20:	10800104 	addi	r2,r2,4
10010f24:	1007883a 	mov	r3,r2
10010f28:	e0bffd17 	ldw	r2,-12(fp)
10010f2c:	10800817 	ldw	r2,32(r2)
10010f30:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10010f34:	e0fffe17 	ldw	r3,-8(fp)
10010f38:	e0bfff17 	ldw	r2,-4(fp)
10010f3c:	d8000015 	stw	zero,0(sp)
10010f40:	1809883a 	mov	r4,r3
10010f44:	100b883a 	mov	r5,r2
10010f48:	01840074 	movhi	r6,4097
10010f4c:	3183ed04 	addi	r6,r6,4020
10010f50:	e1fffd17 	ldw	r7,-12(fp)
10010f54:	0011c5c0 	call	10011c5c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10010f58:	e0bffd17 	ldw	r2,-12(fp)
10010f5c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10010f60:	e0bffd17 	ldw	r2,-12(fp)
10010f64:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10010f68:	008400b4 	movhi	r2,4098
10010f6c:	10a16d04 	addi	r2,r2,-31308
10010f70:	10800017 	ldw	r2,0(r2)
10010f74:	1809883a 	mov	r4,r3
10010f78:	100b883a 	mov	r5,r2
10010f7c:	01840074 	movhi	r6,4097
10010f80:	31846e04 	addi	r6,r6,4536
10010f84:	e1fffd17 	ldw	r7,-12(fp)
10010f88:	00117d80 	call	100117d8 <alt_alarm_start>
10010f8c:	1000040e 	bge	r2,zero,10010fa0 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10010f90:	e0fffd17 	ldw	r3,-12(fp)
10010f94:	00a00034 	movhi	r2,32768
10010f98:	10bfffc4 	addi	r2,r2,-1
10010f9c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10010fa0:	e037883a 	mov	sp,fp
10010fa4:	dfc00117 	ldw	ra,4(sp)
10010fa8:	df000017 	ldw	fp,0(sp)
10010fac:	dec00204 	addi	sp,sp,8
10010fb0:	f800283a 	ret

10010fb4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10010fb4:	defff804 	addi	sp,sp,-32
10010fb8:	df000715 	stw	fp,28(sp)
10010fbc:	df000704 	addi	fp,sp,28
10010fc0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10010fc4:	e0bfff17 	ldw	r2,-4(fp)
10010fc8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10010fcc:	e0bffb17 	ldw	r2,-20(fp)
10010fd0:	10800017 	ldw	r2,0(r2)
10010fd4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10010fd8:	e0bffc17 	ldw	r2,-16(fp)
10010fdc:	10800104 	addi	r2,r2,4
10010fe0:	10800037 	ldwio	r2,0(r2)
10010fe4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10010fe8:	e0bffd17 	ldw	r2,-12(fp)
10010fec:	1080c00c 	andi	r2,r2,768
10010ff0:	1000011e 	bne	r2,zero,10010ff8 <altera_avalon_jtag_uart_irq+0x44>
      break;
10010ff4:	00006c06 	br	100111a8 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10010ff8:	e0bffd17 	ldw	r2,-12(fp)
10010ffc:	1080400c 	andi	r2,r2,256
10011000:	10003426 	beq	r2,zero,100110d4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10011004:	00800074 	movhi	r2,1
10011008:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001100c:	e0bffb17 	ldw	r2,-20(fp)
10011010:	10800a17 	ldw	r2,40(r2)
10011014:	10800044 	addi	r2,r2,1
10011018:	1081ffcc 	andi	r2,r2,2047
1001101c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10011020:	e0bffb17 	ldw	r2,-20(fp)
10011024:	10c00b17 	ldw	r3,44(r2)
10011028:	e0bffe17 	ldw	r2,-8(fp)
1001102c:	1880011e 	bne	r3,r2,10011034 <altera_avalon_jtag_uart_irq+0x80>
          break;
10011030:	00001606 	br	1001108c <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10011034:	e0bffc17 	ldw	r2,-16(fp)
10011038:	10800037 	ldwio	r2,0(r2)
1001103c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10011040:	e0bff917 	ldw	r2,-28(fp)
10011044:	10a0000c 	andi	r2,r2,32768
10011048:	1000011e 	bne	r2,zero,10011050 <altera_avalon_jtag_uart_irq+0x9c>
          break;
1001104c:	00000f06 	br	1001108c <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10011050:	e0bffb17 	ldw	r2,-20(fp)
10011054:	10800a17 	ldw	r2,40(r2)
10011058:	e0fff917 	ldw	r3,-28(fp)
1001105c:	1809883a 	mov	r4,r3
10011060:	e0fffb17 	ldw	r3,-20(fp)
10011064:	1885883a 	add	r2,r3,r2
10011068:	10800e04 	addi	r2,r2,56
1001106c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10011070:	e0bffb17 	ldw	r2,-20(fp)
10011074:	10800a17 	ldw	r2,40(r2)
10011078:	10800044 	addi	r2,r2,1
1001107c:	10c1ffcc 	andi	r3,r2,2047
10011080:	e0bffb17 	ldw	r2,-20(fp)
10011084:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10011088:	003fe006 	br	1001100c <__alt_data_end+0xf801100c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1001108c:	e0bff917 	ldw	r2,-28(fp)
10011090:	10bfffec 	andhi	r2,r2,65535
10011094:	10000f26 	beq	r2,zero,100110d4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10011098:	e0bffb17 	ldw	r2,-20(fp)
1001109c:	10c00817 	ldw	r3,32(r2)
100110a0:	00bfff84 	movi	r2,-2
100110a4:	1886703a 	and	r3,r3,r2
100110a8:	e0bffb17 	ldw	r2,-20(fp)
100110ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
100110b0:	e0bffc17 	ldw	r2,-16(fp)
100110b4:	10800104 	addi	r2,r2,4
100110b8:	1007883a 	mov	r3,r2
100110bc:	e0bffb17 	ldw	r2,-20(fp)
100110c0:	10800817 	ldw	r2,32(r2)
100110c4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100110c8:	e0bffc17 	ldw	r2,-16(fp)
100110cc:	10800104 	addi	r2,r2,4
100110d0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
100110d4:	e0bffd17 	ldw	r2,-12(fp)
100110d8:	1080800c 	andi	r2,r2,512
100110dc:	10003126 	beq	r2,zero,100111a4 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
100110e0:	e0bffd17 	ldw	r2,-12(fp)
100110e4:	1004d43a 	srli	r2,r2,16
100110e8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
100110ec:	00001406 	br	10011140 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
100110f0:	e0bffc17 	ldw	r2,-16(fp)
100110f4:	e0fffb17 	ldw	r3,-20(fp)
100110f8:	18c00d17 	ldw	r3,52(r3)
100110fc:	e13ffb17 	ldw	r4,-20(fp)
10011100:	20c7883a 	add	r3,r4,r3
10011104:	18c20e04 	addi	r3,r3,2104
10011108:	18c00003 	ldbu	r3,0(r3)
1001110c:	18c03fcc 	andi	r3,r3,255
10011110:	18c0201c 	xori	r3,r3,128
10011114:	18ffe004 	addi	r3,r3,-128
10011118:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001111c:	e0bffb17 	ldw	r2,-20(fp)
10011120:	10800d17 	ldw	r2,52(r2)
10011124:	10800044 	addi	r2,r2,1
10011128:	10c1ffcc 	andi	r3,r2,2047
1001112c:	e0bffb17 	ldw	r2,-20(fp)
10011130:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10011134:	e0bffa17 	ldw	r2,-24(fp)
10011138:	10bfffc4 	addi	r2,r2,-1
1001113c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10011140:	e0bffa17 	ldw	r2,-24(fp)
10011144:	10000526 	beq	r2,zero,1001115c <altera_avalon_jtag_uart_irq+0x1a8>
10011148:	e0bffb17 	ldw	r2,-20(fp)
1001114c:	10c00d17 	ldw	r3,52(r2)
10011150:	e0bffb17 	ldw	r2,-20(fp)
10011154:	10800c17 	ldw	r2,48(r2)
10011158:	18bfe51e 	bne	r3,r2,100110f0 <__alt_data_end+0xf80110f0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1001115c:	e0bffa17 	ldw	r2,-24(fp)
10011160:	10001026 	beq	r2,zero,100111a4 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10011164:	e0bffb17 	ldw	r2,-20(fp)
10011168:	10c00817 	ldw	r3,32(r2)
1001116c:	00bfff44 	movi	r2,-3
10011170:	1886703a 	and	r3,r3,r2
10011174:	e0bffb17 	ldw	r2,-20(fp)
10011178:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1001117c:	e0bffb17 	ldw	r2,-20(fp)
10011180:	10800017 	ldw	r2,0(r2)
10011184:	10800104 	addi	r2,r2,4
10011188:	1007883a 	mov	r3,r2
1001118c:	e0bffb17 	ldw	r2,-20(fp)
10011190:	10800817 	ldw	r2,32(r2)
10011194:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10011198:	e0bffc17 	ldw	r2,-16(fp)
1001119c:	10800104 	addi	r2,r2,4
100111a0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
100111a4:	003f8c06 	br	10010fd8 <__alt_data_end+0xf8010fd8>
}
100111a8:	e037883a 	mov	sp,fp
100111ac:	df000017 	ldw	fp,0(sp)
100111b0:	dec00104 	addi	sp,sp,4
100111b4:	f800283a 	ret

100111b8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
100111b8:	defff804 	addi	sp,sp,-32
100111bc:	df000715 	stw	fp,28(sp)
100111c0:	df000704 	addi	fp,sp,28
100111c4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
100111c8:	e0bffb17 	ldw	r2,-20(fp)
100111cc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
100111d0:	e0bff917 	ldw	r2,-28(fp)
100111d4:	10800017 	ldw	r2,0(r2)
100111d8:	10800104 	addi	r2,r2,4
100111dc:	10800037 	ldwio	r2,0(r2)
100111e0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
100111e4:	e0bffa17 	ldw	r2,-24(fp)
100111e8:	1081000c 	andi	r2,r2,1024
100111ec:	10000b26 	beq	r2,zero,1001121c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
100111f0:	e0bff917 	ldw	r2,-28(fp)
100111f4:	10800017 	ldw	r2,0(r2)
100111f8:	10800104 	addi	r2,r2,4
100111fc:	1007883a 	mov	r3,r2
10011200:	e0bff917 	ldw	r2,-28(fp)
10011204:	10800817 	ldw	r2,32(r2)
10011208:	10810014 	ori	r2,r2,1024
1001120c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10011210:	e0bff917 	ldw	r2,-28(fp)
10011214:	10000915 	stw	zero,36(r2)
10011218:	00000a06 	br	10011244 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1001121c:	e0bff917 	ldw	r2,-28(fp)
10011220:	10c00917 	ldw	r3,36(r2)
10011224:	00a00034 	movhi	r2,32768
10011228:	10bfff04 	addi	r2,r2,-4
1001122c:	10c00536 	bltu	r2,r3,10011244 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10011230:	e0bff917 	ldw	r2,-28(fp)
10011234:	10800917 	ldw	r2,36(r2)
10011238:	10c00044 	addi	r3,r2,1
1001123c:	e0bff917 	ldw	r2,-28(fp)
10011240:	10c00915 	stw	r3,36(r2)
10011244:	008400b4 	movhi	r2,4098
10011248:	10a16d04 	addi	r2,r2,-31308
1001124c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10011250:	e037883a 	mov	sp,fp
10011254:	df000017 	ldw	fp,0(sp)
10011258:	dec00104 	addi	sp,sp,4
1001125c:	f800283a 	ret

10011260 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10011260:	defffd04 	addi	sp,sp,-12
10011264:	df000215 	stw	fp,8(sp)
10011268:	df000204 	addi	fp,sp,8
1001126c:	e13ffe15 	stw	r4,-8(fp)
10011270:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10011274:	00000506 	br	1001128c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10011278:	e0bfff17 	ldw	r2,-4(fp)
1001127c:	1090000c 	andi	r2,r2,16384
10011280:	10000226 	beq	r2,zero,1001128c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10011284:	00bffd44 	movi	r2,-11
10011288:	00000b06 	br	100112b8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1001128c:	e0bffe17 	ldw	r2,-8(fp)
10011290:	10c00d17 	ldw	r3,52(r2)
10011294:	e0bffe17 	ldw	r2,-8(fp)
10011298:	10800c17 	ldw	r2,48(r2)
1001129c:	18800526 	beq	r3,r2,100112b4 <altera_avalon_jtag_uart_close+0x54>
100112a0:	e0bffe17 	ldw	r2,-8(fp)
100112a4:	10c00917 	ldw	r3,36(r2)
100112a8:	e0bffe17 	ldw	r2,-8(fp)
100112ac:	10800117 	ldw	r2,4(r2)
100112b0:	18bff136 	bltu	r3,r2,10011278 <__alt_data_end+0xf8011278>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
100112b4:	0005883a 	mov	r2,zero
}
100112b8:	e037883a 	mov	sp,fp
100112bc:	df000017 	ldw	fp,0(sp)
100112c0:	dec00104 	addi	sp,sp,4
100112c4:	f800283a 	ret

100112c8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
100112c8:	defffa04 	addi	sp,sp,-24
100112cc:	df000515 	stw	fp,20(sp)
100112d0:	df000504 	addi	fp,sp,20
100112d4:	e13ffd15 	stw	r4,-12(fp)
100112d8:	e17ffe15 	stw	r5,-8(fp)
100112dc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
100112e0:	00bff9c4 	movi	r2,-25
100112e4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
100112e8:	e0bffe17 	ldw	r2,-8(fp)
100112ec:	10da8060 	cmpeqi	r3,r2,27137
100112f0:	1800031e 	bne	r3,zero,10011300 <altera_avalon_jtag_uart_ioctl+0x38>
100112f4:	109a80a0 	cmpeqi	r2,r2,27138
100112f8:	1000191e 	bne	r2,zero,10011360 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
100112fc:	00002806 	br	100113a0 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10011300:	e0bffd17 	ldw	r2,-12(fp)
10011304:	10c00117 	ldw	r3,4(r2)
10011308:	00a00034 	movhi	r2,32768
1001130c:	10bfffc4 	addi	r2,r2,-1
10011310:	18801226 	beq	r3,r2,1001135c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
10011314:	e0bfff17 	ldw	r2,-4(fp)
10011318:	10800017 	ldw	r2,0(r2)
1001131c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10011320:	e0bffc17 	ldw	r2,-16(fp)
10011324:	10800090 	cmplti	r2,r2,2
10011328:	1000061e 	bne	r2,zero,10011344 <altera_avalon_jtag_uart_ioctl+0x7c>
1001132c:	e0fffc17 	ldw	r3,-16(fp)
10011330:	00a00034 	movhi	r2,32768
10011334:	10bfffc4 	addi	r2,r2,-1
10011338:	18800226 	beq	r3,r2,10011344 <altera_avalon_jtag_uart_ioctl+0x7c>
1001133c:	e0bffc17 	ldw	r2,-16(fp)
10011340:	00000206 	br	1001134c <altera_avalon_jtag_uart_ioctl+0x84>
10011344:	00a00034 	movhi	r2,32768
10011348:	10bfff84 	addi	r2,r2,-2
1001134c:	e0fffd17 	ldw	r3,-12(fp)
10011350:	18800115 	stw	r2,4(r3)
      rc = 0;
10011354:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10011358:	00001106 	br	100113a0 <altera_avalon_jtag_uart_ioctl+0xd8>
1001135c:	00001006 	br	100113a0 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10011360:	e0bffd17 	ldw	r2,-12(fp)
10011364:	10c00117 	ldw	r3,4(r2)
10011368:	00a00034 	movhi	r2,32768
1001136c:	10bfffc4 	addi	r2,r2,-1
10011370:	18800a26 	beq	r3,r2,1001139c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10011374:	e0bffd17 	ldw	r2,-12(fp)
10011378:	10c00917 	ldw	r3,36(r2)
1001137c:	e0bffd17 	ldw	r2,-12(fp)
10011380:	10800117 	ldw	r2,4(r2)
10011384:	1885803a 	cmpltu	r2,r3,r2
10011388:	10c03fcc 	andi	r3,r2,255
1001138c:	e0bfff17 	ldw	r2,-4(fp)
10011390:	10c00015 	stw	r3,0(r2)
      rc = 0;
10011394:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10011398:	00000006 	br	1001139c <altera_avalon_jtag_uart_ioctl+0xd4>
1001139c:	0001883a 	nop

  default:
    break;
  }

  return rc;
100113a0:	e0bffb17 	ldw	r2,-20(fp)
}
100113a4:	e037883a 	mov	sp,fp
100113a8:	df000017 	ldw	fp,0(sp)
100113ac:	dec00104 	addi	sp,sp,4
100113b0:	f800283a 	ret

100113b4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
100113b4:	defff304 	addi	sp,sp,-52
100113b8:	dfc00c15 	stw	ra,48(sp)
100113bc:	df000b15 	stw	fp,44(sp)
100113c0:	df000b04 	addi	fp,sp,44
100113c4:	e13ffc15 	stw	r4,-16(fp)
100113c8:	e17ffd15 	stw	r5,-12(fp)
100113cc:	e1bffe15 	stw	r6,-8(fp)
100113d0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
100113d4:	e0bffd17 	ldw	r2,-12(fp)
100113d8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100113dc:	00004906 	br	10011504 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
100113e0:	e0bffc17 	ldw	r2,-16(fp)
100113e4:	10800a17 	ldw	r2,40(r2)
100113e8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
100113ec:	e0bffc17 	ldw	r2,-16(fp)
100113f0:	10800b17 	ldw	r2,44(r2)
100113f4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
100113f8:	e0fff717 	ldw	r3,-36(fp)
100113fc:	e0bff817 	ldw	r2,-32(fp)
10011400:	18800536 	bltu	r3,r2,10011418 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10011404:	e0fff717 	ldw	r3,-36(fp)
10011408:	e0bff817 	ldw	r2,-32(fp)
1001140c:	1885c83a 	sub	r2,r3,r2
10011410:	e0bff615 	stw	r2,-40(fp)
10011414:	00000406 	br	10011428 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10011418:	00c20004 	movi	r3,2048
1001141c:	e0bff817 	ldw	r2,-32(fp)
10011420:	1885c83a 	sub	r2,r3,r2
10011424:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10011428:	e0bff617 	ldw	r2,-40(fp)
1001142c:	1000011e 	bne	r2,zero,10011434 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
10011430:	00001d06 	br	100114a8 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
10011434:	e0fffe17 	ldw	r3,-8(fp)
10011438:	e0bff617 	ldw	r2,-40(fp)
1001143c:	1880022e 	bgeu	r3,r2,10011448 <altera_avalon_jtag_uart_read+0x94>
        n = space;
10011440:	e0bffe17 	ldw	r2,-8(fp)
10011444:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10011448:	e0bff817 	ldw	r2,-32(fp)
1001144c:	10800e04 	addi	r2,r2,56
10011450:	e0fffc17 	ldw	r3,-16(fp)
10011454:	1885883a 	add	r2,r3,r2
10011458:	e13ff517 	ldw	r4,-44(fp)
1001145c:	100b883a 	mov	r5,r2
10011460:	e1bff617 	ldw	r6,-40(fp)
10011464:	00043940 	call	10004394 <memcpy>
      ptr   += n;
10011468:	e0fff517 	ldw	r3,-44(fp)
1001146c:	e0bff617 	ldw	r2,-40(fp)
10011470:	1885883a 	add	r2,r3,r2
10011474:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10011478:	e0fffe17 	ldw	r3,-8(fp)
1001147c:	e0bff617 	ldw	r2,-40(fp)
10011480:	1885c83a 	sub	r2,r3,r2
10011484:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10011488:	e0fff817 	ldw	r3,-32(fp)
1001148c:	e0bff617 	ldw	r2,-40(fp)
10011490:	1885883a 	add	r2,r3,r2
10011494:	10c1ffcc 	andi	r3,r2,2047
10011498:	e0bffc17 	ldw	r2,-16(fp)
1001149c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
100114a0:	e0bffe17 	ldw	r2,-8(fp)
100114a4:	00bfce16 	blt	zero,r2,100113e0 <__alt_data_end+0xf80113e0>

    /* If we read any data then return it */
    if (ptr != buffer)
100114a8:	e0fff517 	ldw	r3,-44(fp)
100114ac:	e0bffd17 	ldw	r2,-12(fp)
100114b0:	18800126 	beq	r3,r2,100114b8 <altera_avalon_jtag_uart_read+0x104>
      break;
100114b4:	00001506 	br	1001150c <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
100114b8:	e0bfff17 	ldw	r2,-4(fp)
100114bc:	1090000c 	andi	r2,r2,16384
100114c0:	10000126 	beq	r2,zero,100114c8 <altera_avalon_jtag_uart_read+0x114>
      break;
100114c4:	00001106 	br	1001150c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
100114c8:	0001883a 	nop
100114cc:	e0bffc17 	ldw	r2,-16(fp)
100114d0:	10c00a17 	ldw	r3,40(r2)
100114d4:	e0bff717 	ldw	r2,-36(fp)
100114d8:	1880051e 	bne	r3,r2,100114f0 <altera_avalon_jtag_uart_read+0x13c>
100114dc:	e0bffc17 	ldw	r2,-16(fp)
100114e0:	10c00917 	ldw	r3,36(r2)
100114e4:	e0bffc17 	ldw	r2,-16(fp)
100114e8:	10800117 	ldw	r2,4(r2)
100114ec:	18bff736 	bltu	r3,r2,100114cc <__alt_data_end+0xf80114cc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
100114f0:	e0bffc17 	ldw	r2,-16(fp)
100114f4:	10c00a17 	ldw	r3,40(r2)
100114f8:	e0bff717 	ldw	r2,-36(fp)
100114fc:	1880011e 	bne	r3,r2,10011504 <altera_avalon_jtag_uart_read+0x150>
      break;
10011500:	00000206 	br	1001150c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10011504:	e0bffe17 	ldw	r2,-8(fp)
10011508:	00bfb516 	blt	zero,r2,100113e0 <__alt_data_end+0xf80113e0>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1001150c:	e0fff517 	ldw	r3,-44(fp)
10011510:	e0bffd17 	ldw	r2,-12(fp)
10011514:	18801826 	beq	r3,r2,10011578 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011518:	0005303a 	rdctl	r2,status
1001151c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011520:	e0fffa17 	ldw	r3,-24(fp)
10011524:	00bfff84 	movi	r2,-2
10011528:	1884703a 	and	r2,r3,r2
1001152c:	1001703a 	wrctl	status,r2
  
  return context;
10011530:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10011534:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10011538:	e0bffc17 	ldw	r2,-16(fp)
1001153c:	10800817 	ldw	r2,32(r2)
10011540:	10c00054 	ori	r3,r2,1
10011544:	e0bffc17 	ldw	r2,-16(fp)
10011548:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1001154c:	e0bffc17 	ldw	r2,-16(fp)
10011550:	10800017 	ldw	r2,0(r2)
10011554:	10800104 	addi	r2,r2,4
10011558:	1007883a 	mov	r3,r2
1001155c:	e0bffc17 	ldw	r2,-16(fp)
10011560:	10800817 	ldw	r2,32(r2)
10011564:	18800035 	stwio	r2,0(r3)
10011568:	e0bff917 	ldw	r2,-28(fp)
1001156c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011570:	e0bffb17 	ldw	r2,-20(fp)
10011574:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10011578:	e0fff517 	ldw	r3,-44(fp)
1001157c:	e0bffd17 	ldw	r2,-12(fp)
10011580:	18800426 	beq	r3,r2,10011594 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
10011584:	e0fff517 	ldw	r3,-44(fp)
10011588:	e0bffd17 	ldw	r2,-12(fp)
1001158c:	1885c83a 	sub	r2,r3,r2
10011590:	00000606 	br	100115ac <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
10011594:	e0bfff17 	ldw	r2,-4(fp)
10011598:	1090000c 	andi	r2,r2,16384
1001159c:	10000226 	beq	r2,zero,100115a8 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
100115a0:	00bffd44 	movi	r2,-11
100115a4:	00000106 	br	100115ac <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
100115a8:	00bffec4 	movi	r2,-5
}
100115ac:	e037883a 	mov	sp,fp
100115b0:	dfc00117 	ldw	ra,4(sp)
100115b4:	df000017 	ldw	fp,0(sp)
100115b8:	dec00204 	addi	sp,sp,8
100115bc:	f800283a 	ret

100115c0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
100115c0:	defff304 	addi	sp,sp,-52
100115c4:	dfc00c15 	stw	ra,48(sp)
100115c8:	df000b15 	stw	fp,44(sp)
100115cc:	df000b04 	addi	fp,sp,44
100115d0:	e13ffc15 	stw	r4,-16(fp)
100115d4:	e17ffd15 	stw	r5,-12(fp)
100115d8:	e1bffe15 	stw	r6,-8(fp)
100115dc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
100115e0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
100115e4:	e0bffd17 	ldw	r2,-12(fp)
100115e8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100115ec:	00003806 	br	100116d0 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
100115f0:	e0bffc17 	ldw	r2,-16(fp)
100115f4:	10800c17 	ldw	r2,48(r2)
100115f8:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
100115fc:	e0bffc17 	ldw	r2,-16(fp)
10011600:	10800d17 	ldw	r2,52(r2)
10011604:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10011608:	e0fff817 	ldw	r3,-32(fp)
1001160c:	e0bff517 	ldw	r2,-44(fp)
10011610:	1880062e 	bgeu	r3,r2,1001162c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10011614:	e0fff517 	ldw	r3,-44(fp)
10011618:	e0bff817 	ldw	r2,-32(fp)
1001161c:	1885c83a 	sub	r2,r3,r2
10011620:	10bfffc4 	addi	r2,r2,-1
10011624:	e0bff615 	stw	r2,-40(fp)
10011628:	00000b06 	br	10011658 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1001162c:	e0bff517 	ldw	r2,-44(fp)
10011630:	10000526 	beq	r2,zero,10011648 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10011634:	00c20004 	movi	r3,2048
10011638:	e0bff817 	ldw	r2,-32(fp)
1001163c:	1885c83a 	sub	r2,r3,r2
10011640:	e0bff615 	stw	r2,-40(fp)
10011644:	00000406 	br	10011658 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10011648:	00c1ffc4 	movi	r3,2047
1001164c:	e0bff817 	ldw	r2,-32(fp)
10011650:	1885c83a 	sub	r2,r3,r2
10011654:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10011658:	e0bff617 	ldw	r2,-40(fp)
1001165c:	1000011e 	bne	r2,zero,10011664 <altera_avalon_jtag_uart_write+0xa4>
        break;
10011660:	00001d06 	br	100116d8 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
10011664:	e0fffe17 	ldw	r3,-8(fp)
10011668:	e0bff617 	ldw	r2,-40(fp)
1001166c:	1880022e 	bgeu	r3,r2,10011678 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
10011670:	e0bffe17 	ldw	r2,-8(fp)
10011674:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10011678:	e0bff817 	ldw	r2,-32(fp)
1001167c:	10820e04 	addi	r2,r2,2104
10011680:	e0fffc17 	ldw	r3,-16(fp)
10011684:	1885883a 	add	r2,r3,r2
10011688:	1009883a 	mov	r4,r2
1001168c:	e17ffd17 	ldw	r5,-12(fp)
10011690:	e1bff617 	ldw	r6,-40(fp)
10011694:	00043940 	call	10004394 <memcpy>
      ptr   += n;
10011698:	e0fffd17 	ldw	r3,-12(fp)
1001169c:	e0bff617 	ldw	r2,-40(fp)
100116a0:	1885883a 	add	r2,r3,r2
100116a4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
100116a8:	e0fffe17 	ldw	r3,-8(fp)
100116ac:	e0bff617 	ldw	r2,-40(fp)
100116b0:	1885c83a 	sub	r2,r3,r2
100116b4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100116b8:	e0fff817 	ldw	r3,-32(fp)
100116bc:	e0bff617 	ldw	r2,-40(fp)
100116c0:	1885883a 	add	r2,r3,r2
100116c4:	10c1ffcc 	andi	r3,r2,2047
100116c8:	e0bffc17 	ldw	r2,-16(fp)
100116cc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100116d0:	e0bffe17 	ldw	r2,-8(fp)
100116d4:	00bfc616 	blt	zero,r2,100115f0 <__alt_data_end+0xf80115f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100116d8:	0005303a 	rdctl	r2,status
100116dc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100116e0:	e0fffa17 	ldw	r3,-24(fp)
100116e4:	00bfff84 	movi	r2,-2
100116e8:	1884703a 	and	r2,r3,r2
100116ec:	1001703a 	wrctl	status,r2
  
  return context;
100116f0:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
100116f4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100116f8:	e0bffc17 	ldw	r2,-16(fp)
100116fc:	10800817 	ldw	r2,32(r2)
10011700:	10c00094 	ori	r3,r2,2
10011704:	e0bffc17 	ldw	r2,-16(fp)
10011708:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1001170c:	e0bffc17 	ldw	r2,-16(fp)
10011710:	10800017 	ldw	r2,0(r2)
10011714:	10800104 	addi	r2,r2,4
10011718:	1007883a 	mov	r3,r2
1001171c:	e0bffc17 	ldw	r2,-16(fp)
10011720:	10800817 	ldw	r2,32(r2)
10011724:	18800035 	stwio	r2,0(r3)
10011728:	e0bff917 	ldw	r2,-28(fp)
1001172c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011730:	e0bffb17 	ldw	r2,-20(fp)
10011734:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10011738:	e0bffe17 	ldw	r2,-8(fp)
1001173c:	0080120e 	bge	zero,r2,10011788 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
10011740:	e0bfff17 	ldw	r2,-4(fp)
10011744:	1090000c 	andi	r2,r2,16384
10011748:	10000126 	beq	r2,zero,10011750 <altera_avalon_jtag_uart_write+0x190>
        break;
1001174c:	00001006 	br	10011790 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10011750:	0001883a 	nop
10011754:	e0bffc17 	ldw	r2,-16(fp)
10011758:	10c00d17 	ldw	r3,52(r2)
1001175c:	e0bff517 	ldw	r2,-44(fp)
10011760:	1880051e 	bne	r3,r2,10011778 <altera_avalon_jtag_uart_write+0x1b8>
10011764:	e0bffc17 	ldw	r2,-16(fp)
10011768:	10c00917 	ldw	r3,36(r2)
1001176c:	e0bffc17 	ldw	r2,-16(fp)
10011770:	10800117 	ldw	r2,4(r2)
10011774:	18bff736 	bltu	r3,r2,10011754 <__alt_data_end+0xf8011754>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10011778:	e0bffc17 	ldw	r2,-16(fp)
1001177c:	10800917 	ldw	r2,36(r2)
10011780:	10000126 	beq	r2,zero,10011788 <altera_avalon_jtag_uart_write+0x1c8>
         break;
10011784:	00000206 	br	10011790 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
10011788:	e0bffe17 	ldw	r2,-8(fp)
1001178c:	00bf9716 	blt	zero,r2,100115ec <__alt_data_end+0xf80115ec>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10011790:	e0fffd17 	ldw	r3,-12(fp)
10011794:	e0bff717 	ldw	r2,-36(fp)
10011798:	18800426 	beq	r3,r2,100117ac <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
1001179c:	e0fffd17 	ldw	r3,-12(fp)
100117a0:	e0bff717 	ldw	r2,-36(fp)
100117a4:	1885c83a 	sub	r2,r3,r2
100117a8:	00000606 	br	100117c4 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
100117ac:	e0bfff17 	ldw	r2,-4(fp)
100117b0:	1090000c 	andi	r2,r2,16384
100117b4:	10000226 	beq	r2,zero,100117c0 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
100117b8:	00bffd44 	movi	r2,-11
100117bc:	00000106 	br	100117c4 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
100117c0:	00bffec4 	movi	r2,-5
}
100117c4:	e037883a 	mov	sp,fp
100117c8:	dfc00117 	ldw	ra,4(sp)
100117cc:	df000017 	ldw	fp,0(sp)
100117d0:	dec00204 	addi	sp,sp,8
100117d4:	f800283a 	ret

100117d8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
100117d8:	defff504 	addi	sp,sp,-44
100117dc:	df000a15 	stw	fp,40(sp)
100117e0:	df000a04 	addi	fp,sp,40
100117e4:	e13ffc15 	stw	r4,-16(fp)
100117e8:	e17ffd15 	stw	r5,-12(fp)
100117ec:	e1bffe15 	stw	r6,-8(fp)
100117f0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
100117f4:	e03ff615 	stw	zero,-40(fp)
100117f8:	008400b4 	movhi	r2,4098
100117fc:	10a16d04 	addi	r2,r2,-31308
10011800:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
10011804:	10003f26 	beq	r2,zero,10011904 <alt_alarm_start+0x12c>
  {
    if (alarm)
10011808:	e0bffc17 	ldw	r2,-16(fp)
1001180c:	10003b26 	beq	r2,zero,100118fc <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
10011810:	e0bffc17 	ldw	r2,-16(fp)
10011814:	e0fffe17 	ldw	r3,-8(fp)
10011818:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1001181c:	e0bffc17 	ldw	r2,-16(fp)
10011820:	e0ffff17 	ldw	r3,-4(fp)
10011824:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011828:	0005303a 	rdctl	r2,status
1001182c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011830:	e0fff817 	ldw	r3,-32(fp)
10011834:	00bfff84 	movi	r2,-2
10011838:	1884703a 	and	r2,r3,r2
1001183c:	1001703a 	wrctl	status,r2
  
  return context;
10011840:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
10011844:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10011848:	008400b4 	movhi	r2,4098
1001184c:	10a16e04 	addi	r2,r2,-31304
10011850:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
10011854:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10011858:	e0fffd17 	ldw	r3,-12(fp)
1001185c:	e0bff617 	ldw	r2,-40(fp)
10011860:	1885883a 	add	r2,r3,r2
10011864:	10c00044 	addi	r3,r2,1
10011868:	e0bffc17 	ldw	r2,-16(fp)
1001186c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10011870:	e0bffc17 	ldw	r2,-16(fp)
10011874:	10c00217 	ldw	r3,8(r2)
10011878:	e0bff617 	ldw	r2,-40(fp)
1001187c:	1880042e 	bgeu	r3,r2,10011890 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
10011880:	e0bffc17 	ldw	r2,-16(fp)
10011884:	00c00044 	movi	r3,1
10011888:	10c00405 	stb	r3,16(r2)
1001188c:	00000206 	br	10011898 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10011890:	e0bffc17 	ldw	r2,-16(fp)
10011894:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10011898:	e0fffc17 	ldw	r3,-16(fp)
1001189c:	00840074 	movhi	r2,4097
100118a0:	109aa404 	addi	r2,r2,27280
100118a4:	e0bff915 	stw	r2,-28(fp)
100118a8:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100118ac:	e0bffa17 	ldw	r2,-24(fp)
100118b0:	e0fff917 	ldw	r3,-28(fp)
100118b4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100118b8:	e0bff917 	ldw	r2,-28(fp)
100118bc:	10c00017 	ldw	r3,0(r2)
100118c0:	e0bffa17 	ldw	r2,-24(fp)
100118c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100118c8:	e0bff917 	ldw	r2,-28(fp)
100118cc:	10800017 	ldw	r2,0(r2)
100118d0:	e0fffa17 	ldw	r3,-24(fp)
100118d4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100118d8:	e0bff917 	ldw	r2,-28(fp)
100118dc:	e0fffa17 	ldw	r3,-24(fp)
100118e0:	10c00015 	stw	r3,0(r2)
100118e4:	e0bff717 	ldw	r2,-36(fp)
100118e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100118ec:	e0bffb17 	ldw	r2,-20(fp)
100118f0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
100118f4:	0005883a 	mov	r2,zero
100118f8:	00000306 	br	10011908 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
100118fc:	00bffa84 	movi	r2,-22
10011900:	00000106 	br	10011908 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
10011904:	00bfde84 	movi	r2,-134
  }
}
10011908:	e037883a 	mov	sp,fp
1001190c:	df000017 	ldw	fp,0(sp)
10011910:	dec00104 	addi	sp,sp,4
10011914:	f800283a 	ret

10011918 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10011918:	defffa04 	addi	sp,sp,-24
1001191c:	dfc00515 	stw	ra,20(sp)
10011920:	df000415 	stw	fp,16(sp)
10011924:	df000404 	addi	fp,sp,16
10011928:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
1001192c:	00800244 	movi	r2,9
10011930:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10011934:	e13ffd17 	ldw	r4,-12(fp)
10011938:	014003f4 	movhi	r5,15
1001193c:	29509004 	addi	r5,r5,16960
10011940:	00030800 	call	10003080 <__mulsi3>
10011944:	0100bef4 	movhi	r4,763
10011948:	213c2004 	addi	r4,r4,-3968
1001194c:	100b883a 	mov	r5,r2
10011950:	00030700 	call	10003070 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10011954:	01200034 	movhi	r4,32768
10011958:	213fffc4 	addi	r4,r4,-1
1001195c:	100b883a 	mov	r5,r2
10011960:	00030700 	call	10003070 <__udivsi3>
10011964:	e13fff17 	ldw	r4,-4(fp)
10011968:	100b883a 	mov	r5,r2
1001196c:	00030700 	call	10003070 <__udivsi3>
10011970:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10011974:	e0bffe17 	ldw	r2,-8(fp)
10011978:	10002a26 	beq	r2,zero,10011a24 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
1001197c:	e03ffc15 	stw	zero,-16(fp)
10011980:	00001706 	br	100119e0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10011984:	00a00034 	movhi	r2,32768
10011988:	10bfffc4 	addi	r2,r2,-1
1001198c:	10bfffc4 	addi	r2,r2,-1
10011990:	103ffe1e 	bne	r2,zero,1001198c <__alt_data_end+0xf801198c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10011994:	e13ffd17 	ldw	r4,-12(fp)
10011998:	014003f4 	movhi	r5,15
1001199c:	29509004 	addi	r5,r5,16960
100119a0:	00030800 	call	10003080 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
100119a4:	0100bef4 	movhi	r4,763
100119a8:	213c2004 	addi	r4,r4,-3968
100119ac:	100b883a 	mov	r5,r2
100119b0:	00030700 	call	10003070 <__udivsi3>
100119b4:	01200034 	movhi	r4,32768
100119b8:	213fffc4 	addi	r4,r4,-1
100119bc:	100b883a 	mov	r5,r2
100119c0:	00030700 	call	10003070 <__udivsi3>
100119c4:	1007883a 	mov	r3,r2
100119c8:	e0bfff17 	ldw	r2,-4(fp)
100119cc:	10c5c83a 	sub	r2,r2,r3
100119d0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
100119d4:	e0bffc17 	ldw	r2,-16(fp)
100119d8:	10800044 	addi	r2,r2,1
100119dc:	e0bffc15 	stw	r2,-16(fp)
100119e0:	e0fffc17 	ldw	r3,-16(fp)
100119e4:	e0bffe17 	ldw	r2,-8(fp)
100119e8:	18bfe616 	blt	r3,r2,10011984 <__alt_data_end+0xf8011984>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
100119ec:	e13ffd17 	ldw	r4,-12(fp)
100119f0:	014003f4 	movhi	r5,15
100119f4:	29509004 	addi	r5,r5,16960
100119f8:	00030800 	call	10003080 <__mulsi3>
100119fc:	0100bef4 	movhi	r4,763
10011a00:	213c2004 	addi	r4,r4,-3968
10011a04:	100b883a 	mov	r5,r2
10011a08:	00030700 	call	10003070 <__udivsi3>
10011a0c:	1009883a 	mov	r4,r2
10011a10:	e17fff17 	ldw	r5,-4(fp)
10011a14:	00030800 	call	10003080 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10011a18:	10bfffc4 	addi	r2,r2,-1
10011a1c:	103ffe1e 	bne	r2,zero,10011a18 <__alt_data_end+0xf8011a18>
10011a20:	00000d06 	br	10011a58 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10011a24:	e13ffd17 	ldw	r4,-12(fp)
10011a28:	014003f4 	movhi	r5,15
10011a2c:	29509004 	addi	r5,r5,16960
10011a30:	00030800 	call	10003080 <__mulsi3>
10011a34:	0100bef4 	movhi	r4,763
10011a38:	213c2004 	addi	r4,r4,-3968
10011a3c:	100b883a 	mov	r5,r2
10011a40:	00030700 	call	10003070 <__udivsi3>
10011a44:	1009883a 	mov	r4,r2
10011a48:	e17fff17 	ldw	r5,-4(fp)
10011a4c:	00030800 	call	10003080 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10011a50:	10bfffc4 	addi	r2,r2,-1
10011a54:	00bffe16 	blt	zero,r2,10011a50 <__alt_data_end+0xf8011a50>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10011a58:	0005883a 	mov	r2,zero
}
10011a5c:	e037883a 	mov	sp,fp
10011a60:	dfc00117 	ldw	ra,4(sp)
10011a64:	df000017 	ldw	fp,0(sp)
10011a68:	dec00204 	addi	sp,sp,8
10011a6c:	f800283a 	ret

10011a70 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10011a70:	deffff04 	addi	sp,sp,-4
10011a74:	df000015 	stw	fp,0(sp)
10011a78:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10011a7c:	e037883a 	mov	sp,fp
10011a80:	df000017 	ldw	fp,0(sp)
10011a84:	dec00104 	addi	sp,sp,4
10011a88:	f800283a 	ret

10011a8c <alt_get_errno>:
10011a8c:	defffe04 	addi	sp,sp,-8
10011a90:	dfc00115 	stw	ra,4(sp)
10011a94:	df000015 	stw	fp,0(sp)
10011a98:	d839883a 	mov	fp,sp
10011a9c:	00840074 	movhi	r2,4097
10011aa0:	109aa104 	addi	r2,r2,27268
10011aa4:	10800017 	ldw	r2,0(r2)
10011aa8:	10000526 	beq	r2,zero,10011ac0 <alt_get_errno+0x34>
10011aac:	00840074 	movhi	r2,4097
10011ab0:	109aa104 	addi	r2,r2,27268
10011ab4:	10800017 	ldw	r2,0(r2)
10011ab8:	103ee83a 	callr	r2
10011abc:	00000206 	br	10011ac8 <alt_get_errno+0x3c>
10011ac0:	008400b4 	movhi	r2,4098
10011ac4:	10a16804 	addi	r2,r2,-31328
10011ac8:	e037883a 	mov	sp,fp
10011acc:	dfc00117 	ldw	ra,4(sp)
10011ad0:	df000017 	ldw	fp,0(sp)
10011ad4:	dec00204 	addi	sp,sp,8
10011ad8:	f800283a 	ret

10011adc <alt_dev_llist_insert>:
10011adc:	defffa04 	addi	sp,sp,-24
10011ae0:	dfc00515 	stw	ra,20(sp)
10011ae4:	df000415 	stw	fp,16(sp)
10011ae8:	df000404 	addi	fp,sp,16
10011aec:	e13ffe15 	stw	r4,-8(fp)
10011af0:	e17fff15 	stw	r5,-4(fp)
10011af4:	e0bffe17 	ldw	r2,-8(fp)
10011af8:	10000326 	beq	r2,zero,10011b08 <alt_dev_llist_insert+0x2c>
10011afc:	e0bffe17 	ldw	r2,-8(fp)
10011b00:	10800217 	ldw	r2,8(r2)
10011b04:	1000061e 	bne	r2,zero,10011b20 <alt_dev_llist_insert+0x44>
10011b08:	0011a8c0 	call	10011a8c <alt_get_errno>
10011b0c:	1007883a 	mov	r3,r2
10011b10:	00800584 	movi	r2,22
10011b14:	18800015 	stw	r2,0(r3)
10011b18:	00bffa84 	movi	r2,-22
10011b1c:	00001306 	br	10011b6c <alt_dev_llist_insert+0x90>
10011b20:	e0bffe17 	ldw	r2,-8(fp)
10011b24:	e0ffff17 	ldw	r3,-4(fp)
10011b28:	e0fffc15 	stw	r3,-16(fp)
10011b2c:	e0bffd15 	stw	r2,-12(fp)
10011b30:	e0bffd17 	ldw	r2,-12(fp)
10011b34:	e0fffc17 	ldw	r3,-16(fp)
10011b38:	10c00115 	stw	r3,4(r2)
10011b3c:	e0bffc17 	ldw	r2,-16(fp)
10011b40:	10c00017 	ldw	r3,0(r2)
10011b44:	e0bffd17 	ldw	r2,-12(fp)
10011b48:	10c00015 	stw	r3,0(r2)
10011b4c:	e0bffc17 	ldw	r2,-16(fp)
10011b50:	10800017 	ldw	r2,0(r2)
10011b54:	e0fffd17 	ldw	r3,-12(fp)
10011b58:	10c00115 	stw	r3,4(r2)
10011b5c:	e0bffc17 	ldw	r2,-16(fp)
10011b60:	e0fffd17 	ldw	r3,-12(fp)
10011b64:	10c00015 	stw	r3,0(r2)
10011b68:	0005883a 	mov	r2,zero
10011b6c:	e037883a 	mov	sp,fp
10011b70:	dfc00117 	ldw	ra,4(sp)
10011b74:	df000017 	ldw	fp,0(sp)
10011b78:	dec00204 	addi	sp,sp,8
10011b7c:	f800283a 	ret

10011b80 <_do_ctors>:
10011b80:	defffd04 	addi	sp,sp,-12
10011b84:	dfc00215 	stw	ra,8(sp)
10011b88:	df000115 	stw	fp,4(sp)
10011b8c:	df000104 	addi	fp,sp,4
10011b90:	00840074 	movhi	r2,4097
10011b94:	108abf04 	addi	r2,r2,11004
10011b98:	e0bfff15 	stw	r2,-4(fp)
10011b9c:	00000606 	br	10011bb8 <_do_ctors+0x38>
10011ba0:	e0bfff17 	ldw	r2,-4(fp)
10011ba4:	10800017 	ldw	r2,0(r2)
10011ba8:	103ee83a 	callr	r2
10011bac:	e0bfff17 	ldw	r2,-4(fp)
10011bb0:	10bfff04 	addi	r2,r2,-4
10011bb4:	e0bfff15 	stw	r2,-4(fp)
10011bb8:	e0ffff17 	ldw	r3,-4(fp)
10011bbc:	00840074 	movhi	r2,4097
10011bc0:	108ac004 	addi	r2,r2,11008
10011bc4:	18bff62e 	bgeu	r3,r2,10011ba0 <__alt_data_end+0xf8011ba0>
10011bc8:	0001883a 	nop
10011bcc:	e037883a 	mov	sp,fp
10011bd0:	dfc00117 	ldw	ra,4(sp)
10011bd4:	df000017 	ldw	fp,0(sp)
10011bd8:	dec00204 	addi	sp,sp,8
10011bdc:	f800283a 	ret

10011be0 <_do_dtors>:
10011be0:	defffd04 	addi	sp,sp,-12
10011be4:	dfc00215 	stw	ra,8(sp)
10011be8:	df000115 	stw	fp,4(sp)
10011bec:	df000104 	addi	fp,sp,4
10011bf0:	00840074 	movhi	r2,4097
10011bf4:	108abf04 	addi	r2,r2,11004
10011bf8:	e0bfff15 	stw	r2,-4(fp)
10011bfc:	00000606 	br	10011c18 <_do_dtors+0x38>
10011c00:	e0bfff17 	ldw	r2,-4(fp)
10011c04:	10800017 	ldw	r2,0(r2)
10011c08:	103ee83a 	callr	r2
10011c0c:	e0bfff17 	ldw	r2,-4(fp)
10011c10:	10bfff04 	addi	r2,r2,-4
10011c14:	e0bfff15 	stw	r2,-4(fp)
10011c18:	e0ffff17 	ldw	r3,-4(fp)
10011c1c:	00840074 	movhi	r2,4097
10011c20:	108ac004 	addi	r2,r2,11008
10011c24:	18bff62e 	bgeu	r3,r2,10011c00 <__alt_data_end+0xf8011c00>
10011c28:	0001883a 	nop
10011c2c:	e037883a 	mov	sp,fp
10011c30:	dfc00117 	ldw	ra,4(sp)
10011c34:	df000017 	ldw	fp,0(sp)
10011c38:	dec00204 	addi	sp,sp,8
10011c3c:	f800283a 	ret

10011c40 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10011c40:	deffff04 	addi	sp,sp,-4
10011c44:	df000015 	stw	fp,0(sp)
10011c48:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10011c4c:	e037883a 	mov	sp,fp
10011c50:	df000017 	ldw	fp,0(sp)
10011c54:	dec00104 	addi	sp,sp,4
10011c58:	f800283a 	ret

10011c5c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011c5c:	defff904 	addi	sp,sp,-28
10011c60:	dfc00615 	stw	ra,24(sp)
10011c64:	df000515 	stw	fp,20(sp)
10011c68:	df000504 	addi	fp,sp,20
10011c6c:	e13ffc15 	stw	r4,-16(fp)
10011c70:	e17ffd15 	stw	r5,-12(fp)
10011c74:	e1bffe15 	stw	r6,-8(fp)
10011c78:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10011c7c:	e0800217 	ldw	r2,8(fp)
10011c80:	d8800015 	stw	r2,0(sp)
10011c84:	e13ffc17 	ldw	r4,-16(fp)
10011c88:	e17ffd17 	ldw	r5,-12(fp)
10011c8c:	e1bffe17 	ldw	r6,-8(fp)
10011c90:	e1ffff17 	ldw	r7,-4(fp)
10011c94:	0011e3c0 	call	10011e3c <alt_iic_isr_register>
}  
10011c98:	e037883a 	mov	sp,fp
10011c9c:	dfc00117 	ldw	ra,4(sp)
10011ca0:	df000017 	ldw	fp,0(sp)
10011ca4:	dec00204 	addi	sp,sp,8
10011ca8:	f800283a 	ret

10011cac <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10011cac:	defff904 	addi	sp,sp,-28
10011cb0:	df000615 	stw	fp,24(sp)
10011cb4:	df000604 	addi	fp,sp,24
10011cb8:	e13ffe15 	stw	r4,-8(fp)
10011cbc:	e17fff15 	stw	r5,-4(fp)
10011cc0:	e0bfff17 	ldw	r2,-4(fp)
10011cc4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011cc8:	0005303a 	rdctl	r2,status
10011ccc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011cd0:	e0fffb17 	ldw	r3,-20(fp)
10011cd4:	00bfff84 	movi	r2,-2
10011cd8:	1884703a 	and	r2,r3,r2
10011cdc:	1001703a 	wrctl	status,r2
  
  return context;
10011ce0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011ce4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10011ce8:	e0bffa17 	ldw	r2,-24(fp)
10011cec:	00c00044 	movi	r3,1
10011cf0:	1884983a 	sll	r2,r3,r2
10011cf4:	1007883a 	mov	r3,r2
10011cf8:	008400b4 	movhi	r2,4098
10011cfc:	10a16c04 	addi	r2,r2,-31312
10011d00:	10800017 	ldw	r2,0(r2)
10011d04:	1886b03a 	or	r3,r3,r2
10011d08:	008400b4 	movhi	r2,4098
10011d0c:	10a16c04 	addi	r2,r2,-31312
10011d10:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10011d14:	008400b4 	movhi	r2,4098
10011d18:	10a16c04 	addi	r2,r2,-31312
10011d1c:	10800017 	ldw	r2,0(r2)
10011d20:	100170fa 	wrctl	ienable,r2
10011d24:	e0bffc17 	ldw	r2,-16(fp)
10011d28:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011d2c:	e0bffd17 	ldw	r2,-12(fp)
10011d30:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10011d34:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10011d38:	0001883a 	nop
}
10011d3c:	e037883a 	mov	sp,fp
10011d40:	df000017 	ldw	fp,0(sp)
10011d44:	dec00104 	addi	sp,sp,4
10011d48:	f800283a 	ret

10011d4c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10011d4c:	defff904 	addi	sp,sp,-28
10011d50:	df000615 	stw	fp,24(sp)
10011d54:	df000604 	addi	fp,sp,24
10011d58:	e13ffe15 	stw	r4,-8(fp)
10011d5c:	e17fff15 	stw	r5,-4(fp)
10011d60:	e0bfff17 	ldw	r2,-4(fp)
10011d64:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011d68:	0005303a 	rdctl	r2,status
10011d6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011d70:	e0fffb17 	ldw	r3,-20(fp)
10011d74:	00bfff84 	movi	r2,-2
10011d78:	1884703a 	and	r2,r3,r2
10011d7c:	1001703a 	wrctl	status,r2
  
  return context;
10011d80:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10011d84:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10011d88:	e0bffa17 	ldw	r2,-24(fp)
10011d8c:	00c00044 	movi	r3,1
10011d90:	1884983a 	sll	r2,r3,r2
10011d94:	0084303a 	nor	r2,zero,r2
10011d98:	1007883a 	mov	r3,r2
10011d9c:	008400b4 	movhi	r2,4098
10011da0:	10a16c04 	addi	r2,r2,-31312
10011da4:	10800017 	ldw	r2,0(r2)
10011da8:	1886703a 	and	r3,r3,r2
10011dac:	008400b4 	movhi	r2,4098
10011db0:	10a16c04 	addi	r2,r2,-31312
10011db4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10011db8:	008400b4 	movhi	r2,4098
10011dbc:	10a16c04 	addi	r2,r2,-31312
10011dc0:	10800017 	ldw	r2,0(r2)
10011dc4:	100170fa 	wrctl	ienable,r2
10011dc8:	e0bffc17 	ldw	r2,-16(fp)
10011dcc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011dd0:	e0bffd17 	ldw	r2,-12(fp)
10011dd4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10011dd8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10011ddc:	0001883a 	nop
}
10011de0:	e037883a 	mov	sp,fp
10011de4:	df000017 	ldw	fp,0(sp)
10011de8:	dec00104 	addi	sp,sp,4
10011dec:	f800283a 	ret

10011df0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10011df0:	defffc04 	addi	sp,sp,-16
10011df4:	df000315 	stw	fp,12(sp)
10011df8:	df000304 	addi	fp,sp,12
10011dfc:	e13ffe15 	stw	r4,-8(fp)
10011e00:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10011e04:	000530fa 	rdctl	r2,ienable
10011e08:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10011e0c:	e0bfff17 	ldw	r2,-4(fp)
10011e10:	00c00044 	movi	r3,1
10011e14:	1884983a 	sll	r2,r3,r2
10011e18:	1007883a 	mov	r3,r2
10011e1c:	e0bffd17 	ldw	r2,-12(fp)
10011e20:	1884703a 	and	r2,r3,r2
10011e24:	1004c03a 	cmpne	r2,r2,zero
10011e28:	10803fcc 	andi	r2,r2,255
}
10011e2c:	e037883a 	mov	sp,fp
10011e30:	df000017 	ldw	fp,0(sp)
10011e34:	dec00104 	addi	sp,sp,4
10011e38:	f800283a 	ret

10011e3c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011e3c:	defff504 	addi	sp,sp,-44
10011e40:	dfc00a15 	stw	ra,40(sp)
10011e44:	df000915 	stw	fp,36(sp)
10011e48:	df000904 	addi	fp,sp,36
10011e4c:	e13ffc15 	stw	r4,-16(fp)
10011e50:	e17ffd15 	stw	r5,-12(fp)
10011e54:	e1bffe15 	stw	r6,-8(fp)
10011e58:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10011e5c:	00bffa84 	movi	r2,-22
10011e60:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10011e64:	e0bffd17 	ldw	r2,-12(fp)
10011e68:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10011e6c:	e0bff817 	ldw	r2,-32(fp)
10011e70:	10800808 	cmpgei	r2,r2,32
10011e74:	1000271e 	bne	r2,zero,10011f14 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011e78:	0005303a 	rdctl	r2,status
10011e7c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011e80:	e0fffa17 	ldw	r3,-24(fp)
10011e84:	00bfff84 	movi	r2,-2
10011e88:	1884703a 	and	r2,r3,r2
10011e8c:	1001703a 	wrctl	status,r2
  
  return context;
10011e90:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10011e94:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
10011e98:	008400b4 	movhi	r2,4098
10011e9c:	10a17904 	addi	r2,r2,-31260
10011ea0:	e0fff817 	ldw	r3,-32(fp)
10011ea4:	180690fa 	slli	r3,r3,3
10011ea8:	10c5883a 	add	r2,r2,r3
10011eac:	e0fffe17 	ldw	r3,-8(fp)
10011eb0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10011eb4:	008400b4 	movhi	r2,4098
10011eb8:	10a17904 	addi	r2,r2,-31260
10011ebc:	e0fff817 	ldw	r3,-32(fp)
10011ec0:	180690fa 	slli	r3,r3,3
10011ec4:	10c5883a 	add	r2,r2,r3
10011ec8:	10800104 	addi	r2,r2,4
10011ecc:	e0ffff17 	ldw	r3,-4(fp)
10011ed0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10011ed4:	e0bffe17 	ldw	r2,-8(fp)
10011ed8:	10000526 	beq	r2,zero,10011ef0 <alt_iic_isr_register+0xb4>
10011edc:	e0bff817 	ldw	r2,-32(fp)
10011ee0:	e13ffc17 	ldw	r4,-16(fp)
10011ee4:	100b883a 	mov	r5,r2
10011ee8:	0011cac0 	call	10011cac <alt_ic_irq_enable>
10011eec:	00000406 	br	10011f00 <alt_iic_isr_register+0xc4>
10011ef0:	e0bff817 	ldw	r2,-32(fp)
10011ef4:	e13ffc17 	ldw	r4,-16(fp)
10011ef8:	100b883a 	mov	r5,r2
10011efc:	0011d4c0 	call	10011d4c <alt_ic_irq_disable>
10011f00:	e0bff715 	stw	r2,-36(fp)
10011f04:	e0bff917 	ldw	r2,-28(fp)
10011f08:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011f0c:	e0bffb17 	ldw	r2,-20(fp)
10011f10:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10011f14:	e0bff717 	ldw	r2,-36(fp)
}
10011f18:	e037883a 	mov	sp,fp
10011f1c:	dfc00117 	ldw	ra,4(sp)
10011f20:	df000017 	ldw	fp,0(sp)
10011f24:	dec00204 	addi	sp,sp,8
10011f28:	f800283a 	ret

10011f2c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10011f2c:	defff804 	addi	sp,sp,-32
10011f30:	dfc00715 	stw	ra,28(sp)
10011f34:	df000615 	stw	fp,24(sp)
10011f38:	dc000515 	stw	r16,20(sp)
10011f3c:	df000604 	addi	fp,sp,24
10011f40:	e13ffb15 	stw	r4,-20(fp)
10011f44:	e17ffc15 	stw	r5,-16(fp)
10011f48:	e1bffd15 	stw	r6,-12(fp)
10011f4c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10011f50:	e13ffc17 	ldw	r4,-16(fp)
10011f54:	e17ffd17 	ldw	r5,-12(fp)
10011f58:	e1bffe17 	ldw	r6,-8(fp)
10011f5c:	00121c80 	call	100121c8 <open>
10011f60:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10011f64:	e0bffa17 	ldw	r2,-24(fp)
10011f68:	10002216 	blt	r2,zero,10011ff4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10011f6c:	04040074 	movhi	r16,4097
10011f70:	84161e04 	addi	r16,r16,22648
10011f74:	e0bffa17 	ldw	r2,-24(fp)
10011f78:	1009883a 	mov	r4,r2
10011f7c:	01400304 	movi	r5,12
10011f80:	00030800 	call	10003080 <__mulsi3>
10011f84:	8085883a 	add	r2,r16,r2
10011f88:	10c00017 	ldw	r3,0(r2)
10011f8c:	e0bffb17 	ldw	r2,-20(fp)
10011f90:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10011f94:	04040074 	movhi	r16,4097
10011f98:	84161e04 	addi	r16,r16,22648
10011f9c:	e0bffa17 	ldw	r2,-24(fp)
10011fa0:	1009883a 	mov	r4,r2
10011fa4:	01400304 	movi	r5,12
10011fa8:	00030800 	call	10003080 <__mulsi3>
10011fac:	8085883a 	add	r2,r16,r2
10011fb0:	10800104 	addi	r2,r2,4
10011fb4:	10c00017 	ldw	r3,0(r2)
10011fb8:	e0bffb17 	ldw	r2,-20(fp)
10011fbc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10011fc0:	04040074 	movhi	r16,4097
10011fc4:	84161e04 	addi	r16,r16,22648
10011fc8:	e0bffa17 	ldw	r2,-24(fp)
10011fcc:	1009883a 	mov	r4,r2
10011fd0:	01400304 	movi	r5,12
10011fd4:	00030800 	call	10003080 <__mulsi3>
10011fd8:	8085883a 	add	r2,r16,r2
10011fdc:	10800204 	addi	r2,r2,8
10011fe0:	10c00017 	ldw	r3,0(r2)
10011fe4:	e0bffb17 	ldw	r2,-20(fp)
10011fe8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10011fec:	e13ffa17 	ldw	r4,-24(fp)
10011ff0:	0010a280 	call	10010a28 <alt_release_fd>
  }
} 
10011ff4:	e6ffff04 	addi	sp,fp,-4
10011ff8:	dfc00217 	ldw	ra,8(sp)
10011ffc:	df000117 	ldw	fp,4(sp)
10012000:	dc000017 	ldw	r16,0(sp)
10012004:	dec00304 	addi	sp,sp,12
10012008:	f800283a 	ret

1001200c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1001200c:	defffb04 	addi	sp,sp,-20
10012010:	dfc00415 	stw	ra,16(sp)
10012014:	df000315 	stw	fp,12(sp)
10012018:	df000304 	addi	fp,sp,12
1001201c:	e13ffd15 	stw	r4,-12(fp)
10012020:	e17ffe15 	stw	r5,-8(fp)
10012024:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10012028:	01040074 	movhi	r4,4097
1001202c:	21162104 	addi	r4,r4,22660
10012030:	e17ffd17 	ldw	r5,-12(fp)
10012034:	01800044 	movi	r6,1
10012038:	01c07fc4 	movi	r7,511
1001203c:	0011f2c0 	call	10011f2c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10012040:	01040074 	movhi	r4,4097
10012044:	21161e04 	addi	r4,r4,22648
10012048:	e17ffe17 	ldw	r5,-8(fp)
1001204c:	000d883a 	mov	r6,zero
10012050:	01c07fc4 	movi	r7,511
10012054:	0011f2c0 	call	10011f2c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10012058:	01040074 	movhi	r4,4097
1001205c:	21162404 	addi	r4,r4,22672
10012060:	e17fff17 	ldw	r5,-4(fp)
10012064:	01800044 	movi	r6,1
10012068:	01c07fc4 	movi	r7,511
1001206c:	0011f2c0 	call	10011f2c <alt_open_fd>
}  
10012070:	e037883a 	mov	sp,fp
10012074:	dfc00117 	ldw	ra,4(sp)
10012078:	df000017 	ldw	fp,0(sp)
1001207c:	dec00204 	addi	sp,sp,8
10012080:	f800283a 	ret

10012084 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10012084:	defffe04 	addi	sp,sp,-8
10012088:	dfc00115 	stw	ra,4(sp)
1001208c:	df000015 	stw	fp,0(sp)
10012090:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10012094:	00840074 	movhi	r2,4097
10012098:	109aa104 	addi	r2,r2,27268
1001209c:	10800017 	ldw	r2,0(r2)
100120a0:	10000526 	beq	r2,zero,100120b8 <alt_get_errno+0x34>
100120a4:	00840074 	movhi	r2,4097
100120a8:	109aa104 	addi	r2,r2,27268
100120ac:	10800017 	ldw	r2,0(r2)
100120b0:	103ee83a 	callr	r2
100120b4:	00000206 	br	100120c0 <alt_get_errno+0x3c>
100120b8:	008400b4 	movhi	r2,4098
100120bc:	10a16804 	addi	r2,r2,-31328
}
100120c0:	e037883a 	mov	sp,fp
100120c4:	dfc00117 	ldw	ra,4(sp)
100120c8:	df000017 	ldw	fp,0(sp)
100120cc:	dec00204 	addi	sp,sp,8
100120d0:	f800283a 	ret

100120d4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
100120d4:	defffb04 	addi	sp,sp,-20
100120d8:	dfc00415 	stw	ra,16(sp)
100120dc:	df000315 	stw	fp,12(sp)
100120e0:	dc000215 	stw	r16,8(sp)
100120e4:	df000304 	addi	fp,sp,12
100120e8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
100120ec:	e0bffe17 	ldw	r2,-8(fp)
100120f0:	10800217 	ldw	r2,8(r2)
100120f4:	10d00034 	orhi	r3,r2,16384
100120f8:	e0bffe17 	ldw	r2,-8(fp)
100120fc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10012100:	e03ffd15 	stw	zero,-12(fp)
10012104:	00002306 	br	10012194 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10012108:	04040074 	movhi	r16,4097
1001210c:	84161e04 	addi	r16,r16,22648
10012110:	e0bffd17 	ldw	r2,-12(fp)
10012114:	1009883a 	mov	r4,r2
10012118:	01400304 	movi	r5,12
1001211c:	00030800 	call	10003080 <__mulsi3>
10012120:	8085883a 	add	r2,r16,r2
10012124:	10c00017 	ldw	r3,0(r2)
10012128:	e0bffe17 	ldw	r2,-8(fp)
1001212c:	10800017 	ldw	r2,0(r2)
10012130:	1880151e 	bne	r3,r2,10012188 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10012134:	04040074 	movhi	r16,4097
10012138:	84161e04 	addi	r16,r16,22648
1001213c:	e0bffd17 	ldw	r2,-12(fp)
10012140:	1009883a 	mov	r4,r2
10012144:	01400304 	movi	r5,12
10012148:	00030800 	call	10003080 <__mulsi3>
1001214c:	8085883a 	add	r2,r16,r2
10012150:	10800204 	addi	r2,r2,8
10012154:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10012158:	10000b0e 	bge	r2,zero,10012188 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1001215c:	e13ffd17 	ldw	r4,-12(fp)
10012160:	01400304 	movi	r5,12
10012164:	00030800 	call	10003080 <__mulsi3>
10012168:	1007883a 	mov	r3,r2
1001216c:	00840074 	movhi	r2,4097
10012170:	10961e04 	addi	r2,r2,22648
10012174:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10012178:	e0bffe17 	ldw	r2,-8(fp)
1001217c:	18800226 	beq	r3,r2,10012188 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10012180:	00bffcc4 	movi	r2,-13
10012184:	00000a06 	br	100121b0 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10012188:	e0bffd17 	ldw	r2,-12(fp)
1001218c:	10800044 	addi	r2,r2,1
10012190:	e0bffd15 	stw	r2,-12(fp)
10012194:	00840074 	movhi	r2,4097
10012198:	109aa004 	addi	r2,r2,27264
1001219c:	10800017 	ldw	r2,0(r2)
100121a0:	1007883a 	mov	r3,r2
100121a4:	e0bffd17 	ldw	r2,-12(fp)
100121a8:	18bfd72e 	bgeu	r3,r2,10012108 <__alt_data_end+0xf8012108>
    }
  }
  
  /* The device is not locked */
 
  return 0;
100121ac:	0005883a 	mov	r2,zero
}
100121b0:	e6ffff04 	addi	sp,fp,-4
100121b4:	dfc00217 	ldw	ra,8(sp)
100121b8:	df000117 	ldw	fp,4(sp)
100121bc:	dc000017 	ldw	r16,0(sp)
100121c0:	dec00304 	addi	sp,sp,12
100121c4:	f800283a 	ret

100121c8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
100121c8:	defff604 	addi	sp,sp,-40
100121cc:	dfc00915 	stw	ra,36(sp)
100121d0:	df000815 	stw	fp,32(sp)
100121d4:	df000804 	addi	fp,sp,32
100121d8:	e13ffd15 	stw	r4,-12(fp)
100121dc:	e17ffe15 	stw	r5,-8(fp)
100121e0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
100121e4:	00bfffc4 	movi	r2,-1
100121e8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
100121ec:	00bffb44 	movi	r2,-19
100121f0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
100121f4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
100121f8:	e13ffd17 	ldw	r4,-12(fp)
100121fc:	01440074 	movhi	r5,4097
10012200:	295a9e04 	addi	r5,r5,27256
10012204:	00124e40 	call	100124e4 <alt_find_dev>
10012208:	e0bff815 	stw	r2,-32(fp)
1001220c:	e0bff817 	ldw	r2,-32(fp)
10012210:	1000051e 	bne	r2,zero,10012228 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10012214:	e13ffd17 	ldw	r4,-12(fp)
10012218:	00125740 	call	10012574 <alt_find_file>
1001221c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10012220:	00800044 	movi	r2,1
10012224:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10012228:	e0bff817 	ldw	r2,-32(fp)
1001222c:	10002b26 	beq	r2,zero,100122dc <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10012230:	e13ff817 	ldw	r4,-32(fp)
10012234:	00126880 	call	10012688 <alt_get_fd>
10012238:	e0bff915 	stw	r2,-28(fp)
1001223c:	e0bff917 	ldw	r2,-28(fp)
10012240:	1000030e 	bge	r2,zero,10012250 <open+0x88>
    {
      status = index;
10012244:	e0bff917 	ldw	r2,-28(fp)
10012248:	e0bffa15 	stw	r2,-24(fp)
1001224c:	00002506 	br	100122e4 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10012250:	e13ff917 	ldw	r4,-28(fp)
10012254:	01400304 	movi	r5,12
10012258:	00030800 	call	10003080 <__mulsi3>
1001225c:	1007883a 	mov	r3,r2
10012260:	00840074 	movhi	r2,4097
10012264:	10961e04 	addi	r2,r2,22648
10012268:	1885883a 	add	r2,r3,r2
1001226c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10012270:	e0fffe17 	ldw	r3,-8(fp)
10012274:	00900034 	movhi	r2,16384
10012278:	10bfffc4 	addi	r2,r2,-1
1001227c:	1886703a 	and	r3,r3,r2
10012280:	e0bffc17 	ldw	r2,-16(fp)
10012284:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10012288:	e0bffb17 	ldw	r2,-20(fp)
1001228c:	1000051e 	bne	r2,zero,100122a4 <open+0xdc>
10012290:	e13ffc17 	ldw	r4,-16(fp)
10012294:	00120d40 	call	100120d4 <alt_file_locked>
10012298:	e0bffa15 	stw	r2,-24(fp)
1001229c:	e0bffa17 	ldw	r2,-24(fp)
100122a0:	10001016 	blt	r2,zero,100122e4 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
100122a4:	e0bff817 	ldw	r2,-32(fp)
100122a8:	10800317 	ldw	r2,12(r2)
100122ac:	10000826 	beq	r2,zero,100122d0 <open+0x108>
100122b0:	e0bff817 	ldw	r2,-32(fp)
100122b4:	10800317 	ldw	r2,12(r2)
100122b8:	e13ffc17 	ldw	r4,-16(fp)
100122bc:	e17ffd17 	ldw	r5,-12(fp)
100122c0:	e1bffe17 	ldw	r6,-8(fp)
100122c4:	e1ffff17 	ldw	r7,-4(fp)
100122c8:	103ee83a 	callr	r2
100122cc:	00000106 	br	100122d4 <open+0x10c>
100122d0:	0005883a 	mov	r2,zero
100122d4:	e0bffa15 	stw	r2,-24(fp)
100122d8:	00000206 	br	100122e4 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
100122dc:	00bffb44 	movi	r2,-19
100122e0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
100122e4:	e0bffa17 	ldw	r2,-24(fp)
100122e8:	1000090e 	bge	r2,zero,10012310 <open+0x148>
  {
    alt_release_fd (index);  
100122ec:	e13ff917 	ldw	r4,-28(fp)
100122f0:	0010a280 	call	10010a28 <alt_release_fd>
    ALT_ERRNO = -status;
100122f4:	00120840 	call	10012084 <alt_get_errno>
100122f8:	1007883a 	mov	r3,r2
100122fc:	e0bffa17 	ldw	r2,-24(fp)
10012300:	0085c83a 	sub	r2,zero,r2
10012304:	18800015 	stw	r2,0(r3)
    return -1;
10012308:	00bfffc4 	movi	r2,-1
1001230c:	00000106 	br	10012314 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10012310:	e0bff917 	ldw	r2,-28(fp)
}
10012314:	e037883a 	mov	sp,fp
10012318:	dfc00117 	ldw	ra,4(sp)
1001231c:	df000017 	ldw	fp,0(sp)
10012320:	dec00204 	addi	sp,sp,8
10012324:	f800283a 	ret

10012328 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10012328:	defffa04 	addi	sp,sp,-24
1001232c:	df000515 	stw	fp,20(sp)
10012330:	df000504 	addi	fp,sp,20
10012334:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012338:	0005303a 	rdctl	r2,status
1001233c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012340:	e0fffc17 	ldw	r3,-16(fp)
10012344:	00bfff84 	movi	r2,-2
10012348:	1884703a 	and	r2,r3,r2
1001234c:	1001703a 	wrctl	status,r2
  
  return context;
10012350:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10012354:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10012358:	e0bfff17 	ldw	r2,-4(fp)
1001235c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10012360:	e0bffd17 	ldw	r2,-12(fp)
10012364:	10800017 	ldw	r2,0(r2)
10012368:	e0fffd17 	ldw	r3,-12(fp)
1001236c:	18c00117 	ldw	r3,4(r3)
10012370:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10012374:	e0bffd17 	ldw	r2,-12(fp)
10012378:	10800117 	ldw	r2,4(r2)
1001237c:	e0fffd17 	ldw	r3,-12(fp)
10012380:	18c00017 	ldw	r3,0(r3)
10012384:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10012388:	e0bffd17 	ldw	r2,-12(fp)
1001238c:	e0fffd17 	ldw	r3,-12(fp)
10012390:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10012394:	e0bffd17 	ldw	r2,-12(fp)
10012398:	e0fffd17 	ldw	r3,-12(fp)
1001239c:	10c00015 	stw	r3,0(r2)
100123a0:	e0bffb17 	ldw	r2,-20(fp)
100123a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100123a8:	e0bffe17 	ldw	r2,-8(fp)
100123ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
100123b0:	e037883a 	mov	sp,fp
100123b4:	df000017 	ldw	fp,0(sp)
100123b8:	dec00104 	addi	sp,sp,4
100123bc:	f800283a 	ret

100123c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100123c0:	defffb04 	addi	sp,sp,-20
100123c4:	dfc00415 	stw	ra,16(sp)
100123c8:	df000315 	stw	fp,12(sp)
100123cc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
100123d0:	d0a00e17 	ldw	r2,-32712(gp)
100123d4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
100123d8:	d0a6d817 	ldw	r2,-25760(gp)
100123dc:	10800044 	addi	r2,r2,1
100123e0:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100123e4:	00002e06 	br	100124a0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
100123e8:	e0bffd17 	ldw	r2,-12(fp)
100123ec:	10800017 	ldw	r2,0(r2)
100123f0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
100123f4:	e0bffd17 	ldw	r2,-12(fp)
100123f8:	10800403 	ldbu	r2,16(r2)
100123fc:	10803fcc 	andi	r2,r2,255
10012400:	10000426 	beq	r2,zero,10012414 <alt_tick+0x54>
10012404:	d0a6d817 	ldw	r2,-25760(gp)
10012408:	1000021e 	bne	r2,zero,10012414 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1001240c:	e0bffd17 	ldw	r2,-12(fp)
10012410:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10012414:	e0bffd17 	ldw	r2,-12(fp)
10012418:	10800217 	ldw	r2,8(r2)
1001241c:	d0e6d817 	ldw	r3,-25760(gp)
10012420:	18801d36 	bltu	r3,r2,10012498 <alt_tick+0xd8>
10012424:	e0bffd17 	ldw	r2,-12(fp)
10012428:	10800403 	ldbu	r2,16(r2)
1001242c:	10803fcc 	andi	r2,r2,255
10012430:	1000191e 	bne	r2,zero,10012498 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10012434:	e0bffd17 	ldw	r2,-12(fp)
10012438:	10800317 	ldw	r2,12(r2)
1001243c:	e0fffd17 	ldw	r3,-12(fp)
10012440:	18c00517 	ldw	r3,20(r3)
10012444:	1809883a 	mov	r4,r3
10012448:	103ee83a 	callr	r2
1001244c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10012450:	e0bfff17 	ldw	r2,-4(fp)
10012454:	1000031e 	bne	r2,zero,10012464 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10012458:	e13ffd17 	ldw	r4,-12(fp)
1001245c:	00123280 	call	10012328 <alt_alarm_stop>
10012460:	00000d06 	br	10012498 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10012464:	e0bffd17 	ldw	r2,-12(fp)
10012468:	10c00217 	ldw	r3,8(r2)
1001246c:	e0bfff17 	ldw	r2,-4(fp)
10012470:	1887883a 	add	r3,r3,r2
10012474:	e0bffd17 	ldw	r2,-12(fp)
10012478:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1001247c:	e0bffd17 	ldw	r2,-12(fp)
10012480:	10c00217 	ldw	r3,8(r2)
10012484:	d0a6d817 	ldw	r2,-25760(gp)
10012488:	1880032e 	bgeu	r3,r2,10012498 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1001248c:	e0bffd17 	ldw	r2,-12(fp)
10012490:	00c00044 	movi	r3,1
10012494:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10012498:	e0bffe17 	ldw	r2,-8(fp)
1001249c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100124a0:	e0fffd17 	ldw	r3,-12(fp)
100124a4:	d0a00e04 	addi	r2,gp,-32712
100124a8:	18bfcf1e 	bne	r3,r2,100123e8 <__alt_data_end+0xf80123e8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100124ac:	0001883a 	nop
}
100124b0:	e037883a 	mov	sp,fp
100124b4:	dfc00117 	ldw	ra,4(sp)
100124b8:	df000017 	ldw	fp,0(sp)
100124bc:	dec00204 	addi	sp,sp,8
100124c0:	f800283a 	ret

100124c4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
100124c4:	deffff04 	addi	sp,sp,-4
100124c8:	df000015 	stw	fp,0(sp)
100124cc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100124d0:	000170fa 	wrctl	ienable,zero
}
100124d4:	e037883a 	mov	sp,fp
100124d8:	df000017 	ldw	fp,0(sp)
100124dc:	dec00104 	addi	sp,sp,4
100124e0:	f800283a 	ret

100124e4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
100124e4:	defffa04 	addi	sp,sp,-24
100124e8:	dfc00515 	stw	ra,20(sp)
100124ec:	df000415 	stw	fp,16(sp)
100124f0:	df000404 	addi	fp,sp,16
100124f4:	e13ffe15 	stw	r4,-8(fp)
100124f8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
100124fc:	e0bfff17 	ldw	r2,-4(fp)
10012500:	10800017 	ldw	r2,0(r2)
10012504:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10012508:	e13ffe17 	ldw	r4,-8(fp)
1001250c:	00046000 	call	10004600 <strlen>
10012510:	10800044 	addi	r2,r2,1
10012514:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10012518:	00000d06 	br	10012550 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1001251c:	e0bffc17 	ldw	r2,-16(fp)
10012520:	10c00217 	ldw	r3,8(r2)
10012524:	e0bffd17 	ldw	r2,-12(fp)
10012528:	1809883a 	mov	r4,r3
1001252c:	e17ffe17 	ldw	r5,-8(fp)
10012530:	100d883a 	mov	r6,r2
10012534:	00127a80 	call	100127a8 <memcmp>
10012538:	1000021e 	bne	r2,zero,10012544 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1001253c:	e0bffc17 	ldw	r2,-16(fp)
10012540:	00000706 	br	10012560 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10012544:	e0bffc17 	ldw	r2,-16(fp)
10012548:	10800017 	ldw	r2,0(r2)
1001254c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10012550:	e0fffc17 	ldw	r3,-16(fp)
10012554:	e0bfff17 	ldw	r2,-4(fp)
10012558:	18bff01e 	bne	r3,r2,1001251c <__alt_data_end+0xf801251c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1001255c:	0005883a 	mov	r2,zero
}
10012560:	e037883a 	mov	sp,fp
10012564:	dfc00117 	ldw	ra,4(sp)
10012568:	df000017 	ldw	fp,0(sp)
1001256c:	dec00204 	addi	sp,sp,8
10012570:	f800283a 	ret

10012574 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10012574:	defffb04 	addi	sp,sp,-20
10012578:	dfc00415 	stw	ra,16(sp)
1001257c:	df000315 	stw	fp,12(sp)
10012580:	df000304 	addi	fp,sp,12
10012584:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10012588:	00840074 	movhi	r2,4097
1001258c:	109a9c04 	addi	r2,r2,27248
10012590:	10800017 	ldw	r2,0(r2)
10012594:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10012598:	00003106 	br	10012660 <alt_find_file+0xec>
  {
    len = strlen(next->name);
1001259c:	e0bffd17 	ldw	r2,-12(fp)
100125a0:	10800217 	ldw	r2,8(r2)
100125a4:	1009883a 	mov	r4,r2
100125a8:	00046000 	call	10004600 <strlen>
100125ac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
100125b0:	e0bffd17 	ldw	r2,-12(fp)
100125b4:	10c00217 	ldw	r3,8(r2)
100125b8:	e0bffe17 	ldw	r2,-8(fp)
100125bc:	10bfffc4 	addi	r2,r2,-1
100125c0:	1885883a 	add	r2,r3,r2
100125c4:	10800003 	ldbu	r2,0(r2)
100125c8:	10803fcc 	andi	r2,r2,255
100125cc:	1080201c 	xori	r2,r2,128
100125d0:	10bfe004 	addi	r2,r2,-128
100125d4:	10800bd8 	cmpnei	r2,r2,47
100125d8:	1000031e 	bne	r2,zero,100125e8 <alt_find_file+0x74>
    {
      len -= 1;
100125dc:	e0bffe17 	ldw	r2,-8(fp)
100125e0:	10bfffc4 	addi	r2,r2,-1
100125e4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100125e8:	e0bffe17 	ldw	r2,-8(fp)
100125ec:	e0ffff17 	ldw	r3,-4(fp)
100125f0:	1885883a 	add	r2,r3,r2
100125f4:	10800003 	ldbu	r2,0(r2)
100125f8:	10803fcc 	andi	r2,r2,255
100125fc:	1080201c 	xori	r2,r2,128
10012600:	10bfe004 	addi	r2,r2,-128
10012604:	10800be0 	cmpeqi	r2,r2,47
10012608:	1000081e 	bne	r2,zero,1001262c <alt_find_file+0xb8>
1001260c:	e0bffe17 	ldw	r2,-8(fp)
10012610:	e0ffff17 	ldw	r3,-4(fp)
10012614:	1885883a 	add	r2,r3,r2
10012618:	10800003 	ldbu	r2,0(r2)
1001261c:	10803fcc 	andi	r2,r2,255
10012620:	1080201c 	xori	r2,r2,128
10012624:	10bfe004 	addi	r2,r2,-128
10012628:	10000a1e 	bne	r2,zero,10012654 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
1001262c:	e0bffd17 	ldw	r2,-12(fp)
10012630:	10c00217 	ldw	r3,8(r2)
10012634:	e0bffe17 	ldw	r2,-8(fp)
10012638:	1809883a 	mov	r4,r3
1001263c:	e17fff17 	ldw	r5,-4(fp)
10012640:	100d883a 	mov	r6,r2
10012644:	00127a80 	call	100127a8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10012648:	1000021e 	bne	r2,zero,10012654 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1001264c:	e0bffd17 	ldw	r2,-12(fp)
10012650:	00000806 	br	10012674 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10012654:	e0bffd17 	ldw	r2,-12(fp)
10012658:	10800017 	ldw	r2,0(r2)
1001265c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10012660:	e0fffd17 	ldw	r3,-12(fp)
10012664:	00840074 	movhi	r2,4097
10012668:	109a9c04 	addi	r2,r2,27248
1001266c:	18bfcb1e 	bne	r3,r2,1001259c <__alt_data_end+0xf801259c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10012670:	0005883a 	mov	r2,zero
}
10012674:	e037883a 	mov	sp,fp
10012678:	dfc00117 	ldw	ra,4(sp)
1001267c:	df000017 	ldw	fp,0(sp)
10012680:	dec00204 	addi	sp,sp,8
10012684:	f800283a 	ret

10012688 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10012688:	defffa04 	addi	sp,sp,-24
1001268c:	dfc00515 	stw	ra,20(sp)
10012690:	df000415 	stw	fp,16(sp)
10012694:	dc000315 	stw	r16,12(sp)
10012698:	df000404 	addi	fp,sp,16
1001269c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
100126a0:	00bffa04 	movi	r2,-24
100126a4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100126a8:	e03ffc15 	stw	zero,-16(fp)
100126ac:	00002106 	br	10012734 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
100126b0:	04040074 	movhi	r16,4097
100126b4:	84161e04 	addi	r16,r16,22648
100126b8:	e0bffc17 	ldw	r2,-16(fp)
100126bc:	1009883a 	mov	r4,r2
100126c0:	01400304 	movi	r5,12
100126c4:	00030800 	call	10003080 <__mulsi3>
100126c8:	8085883a 	add	r2,r16,r2
100126cc:	10800017 	ldw	r2,0(r2)
100126d0:	1000151e 	bne	r2,zero,10012728 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
100126d4:	04040074 	movhi	r16,4097
100126d8:	84161e04 	addi	r16,r16,22648
100126dc:	e0bffc17 	ldw	r2,-16(fp)
100126e0:	1009883a 	mov	r4,r2
100126e4:	01400304 	movi	r5,12
100126e8:	00030800 	call	10003080 <__mulsi3>
100126ec:	8085883a 	add	r2,r16,r2
100126f0:	e0fffe17 	ldw	r3,-8(fp)
100126f4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
100126f8:	00840074 	movhi	r2,4097
100126fc:	109aa004 	addi	r2,r2,27264
10012700:	10c00017 	ldw	r3,0(r2)
10012704:	e0bffc17 	ldw	r2,-16(fp)
10012708:	1880040e 	bge	r3,r2,1001271c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
1001270c:	00840074 	movhi	r2,4097
10012710:	109aa004 	addi	r2,r2,27264
10012714:	e0fffc17 	ldw	r3,-16(fp)
10012718:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
1001271c:	e0bffc17 	ldw	r2,-16(fp)
10012720:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10012724:	00000606 	br	10012740 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10012728:	e0bffc17 	ldw	r2,-16(fp)
1001272c:	10800044 	addi	r2,r2,1
10012730:	e0bffc15 	stw	r2,-16(fp)
10012734:	e0bffc17 	ldw	r2,-16(fp)
10012738:	10800810 	cmplti	r2,r2,32
1001273c:	103fdc1e 	bne	r2,zero,100126b0 <__alt_data_end+0xf80126b0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10012740:	e0bffd17 	ldw	r2,-12(fp)
}
10012744:	e6ffff04 	addi	sp,fp,-4
10012748:	dfc00217 	ldw	ra,8(sp)
1001274c:	df000117 	ldw	fp,4(sp)
10012750:	dc000017 	ldw	r16,0(sp)
10012754:	dec00304 	addi	sp,sp,12
10012758:	f800283a 	ret

1001275c <atexit>:
1001275c:	200b883a 	mov	r5,r4
10012760:	000d883a 	mov	r6,zero
10012764:	0009883a 	mov	r4,zero
10012768:	000f883a 	mov	r7,zero
1001276c:	00128241 	jmpi	10012824 <__register_exitproc>

10012770 <exit>:
10012770:	defffe04 	addi	sp,sp,-8
10012774:	000b883a 	mov	r5,zero
10012778:	dc000015 	stw	r16,0(sp)
1001277c:	dfc00115 	stw	ra,4(sp)
10012780:	2021883a 	mov	r16,r4
10012784:	00129380 	call	10012938 <__call_exitprocs>
10012788:	00840074 	movhi	r2,4097
1001278c:	109a9604 	addi	r2,r2,27224
10012790:	11000017 	ldw	r4,0(r2)
10012794:	20800f17 	ldw	r2,60(r4)
10012798:	10000126 	beq	r2,zero,100127a0 <exit+0x30>
1001279c:	103ee83a 	callr	r2
100127a0:	8009883a 	mov	r4,r16
100127a4:	0012acc0 	call	10012acc <_exit>

100127a8 <memcmp>:
100127a8:	01c000c4 	movi	r7,3
100127ac:	3980192e 	bgeu	r7,r6,10012814 <memcmp+0x6c>
100127b0:	2144b03a 	or	r2,r4,r5
100127b4:	11c4703a 	and	r2,r2,r7
100127b8:	10000f26 	beq	r2,zero,100127f8 <memcmp+0x50>
100127bc:	20800003 	ldbu	r2,0(r4)
100127c0:	28c00003 	ldbu	r3,0(r5)
100127c4:	10c0151e 	bne	r2,r3,1001281c <memcmp+0x74>
100127c8:	31bfff84 	addi	r6,r6,-2
100127cc:	01ffffc4 	movi	r7,-1
100127d0:	00000406 	br	100127e4 <memcmp+0x3c>
100127d4:	20800003 	ldbu	r2,0(r4)
100127d8:	28c00003 	ldbu	r3,0(r5)
100127dc:	31bfffc4 	addi	r6,r6,-1
100127e0:	10c00e1e 	bne	r2,r3,1001281c <memcmp+0x74>
100127e4:	21000044 	addi	r4,r4,1
100127e8:	29400044 	addi	r5,r5,1
100127ec:	31fff91e 	bne	r6,r7,100127d4 <__alt_data_end+0xf80127d4>
100127f0:	0005883a 	mov	r2,zero
100127f4:	f800283a 	ret
100127f8:	20c00017 	ldw	r3,0(r4)
100127fc:	28800017 	ldw	r2,0(r5)
10012800:	1880041e 	bne	r3,r2,10012814 <memcmp+0x6c>
10012804:	31bfff04 	addi	r6,r6,-4
10012808:	21000104 	addi	r4,r4,4
1001280c:	29400104 	addi	r5,r5,4
10012810:	39bff936 	bltu	r7,r6,100127f8 <__alt_data_end+0xf80127f8>
10012814:	303fe91e 	bne	r6,zero,100127bc <__alt_data_end+0xf80127bc>
10012818:	003ff506 	br	100127f0 <__alt_data_end+0xf80127f0>
1001281c:	10c5c83a 	sub	r2,r2,r3
10012820:	f800283a 	ret

10012824 <__register_exitproc>:
10012824:	00840074 	movhi	r2,4097
10012828:	defffa04 	addi	sp,sp,-24
1001282c:	109a9604 	addi	r2,r2,27224
10012830:	dc000315 	stw	r16,12(sp)
10012834:	14000017 	ldw	r16,0(r2)
10012838:	dc400415 	stw	r17,16(sp)
1001283c:	dfc00515 	stw	ra,20(sp)
10012840:	80805217 	ldw	r2,328(r16)
10012844:	2023883a 	mov	r17,r4
10012848:	10003626 	beq	r2,zero,10012924 <__register_exitproc+0x100>
1001284c:	10c00117 	ldw	r3,4(r2)
10012850:	010007c4 	movi	r4,31
10012854:	20c00e16 	blt	r4,r3,10012890 <__register_exitproc+0x6c>
10012858:	1a400044 	addi	r9,r3,1
1001285c:	8800211e 	bne	r17,zero,100128e4 <__register_exitproc+0xc0>
10012860:	18c00084 	addi	r3,r3,2
10012864:	18c7883a 	add	r3,r3,r3
10012868:	18c7883a 	add	r3,r3,r3
1001286c:	12400115 	stw	r9,4(r2)
10012870:	10c7883a 	add	r3,r2,r3
10012874:	19400015 	stw	r5,0(r3)
10012878:	0005883a 	mov	r2,zero
1001287c:	dfc00517 	ldw	ra,20(sp)
10012880:	dc400417 	ldw	r17,16(sp)
10012884:	dc000317 	ldw	r16,12(sp)
10012888:	dec00604 	addi	sp,sp,24
1001288c:	f800283a 	ret
10012890:	00800034 	movhi	r2,0
10012894:	10800004 	addi	r2,r2,0
10012898:	10002526 	beq	r2,zero,10012930 <__register_exitproc+0x10c>
1001289c:	01006404 	movi	r4,400
100128a0:	d9400015 	stw	r5,0(sp)
100128a4:	d9800115 	stw	r6,4(sp)
100128a8:	d9c00215 	stw	r7,8(sp)
100128ac:	00000000 	call	10000000 <__reset>
100128b0:	d9400017 	ldw	r5,0(sp)
100128b4:	d9800117 	ldw	r6,4(sp)
100128b8:	d9c00217 	ldw	r7,8(sp)
100128bc:	10001c26 	beq	r2,zero,10012930 <__register_exitproc+0x10c>
100128c0:	80c05217 	ldw	r3,328(r16)
100128c4:	10000115 	stw	zero,4(r2)
100128c8:	02400044 	movi	r9,1
100128cc:	10c00015 	stw	r3,0(r2)
100128d0:	80805215 	stw	r2,328(r16)
100128d4:	10006215 	stw	zero,392(r2)
100128d8:	10006315 	stw	zero,396(r2)
100128dc:	0007883a 	mov	r3,zero
100128e0:	883fdf26 	beq	r17,zero,10012860 <__alt_data_end+0xf8012860>
100128e4:	18d1883a 	add	r8,r3,r3
100128e8:	4211883a 	add	r8,r8,r8
100128ec:	1211883a 	add	r8,r2,r8
100128f0:	41802215 	stw	r6,136(r8)
100128f4:	01000044 	movi	r4,1
100128f8:	11806217 	ldw	r6,392(r2)
100128fc:	20c8983a 	sll	r4,r4,r3
10012900:	310cb03a 	or	r6,r6,r4
10012904:	11806215 	stw	r6,392(r2)
10012908:	41c04215 	stw	r7,264(r8)
1001290c:	01800084 	movi	r6,2
10012910:	89bfd31e 	bne	r17,r6,10012860 <__alt_data_end+0xf8012860>
10012914:	11806317 	ldw	r6,396(r2)
10012918:	3108b03a 	or	r4,r6,r4
1001291c:	11006315 	stw	r4,396(r2)
10012920:	003fcf06 	br	10012860 <__alt_data_end+0xf8012860>
10012924:	80805304 	addi	r2,r16,332
10012928:	80805215 	stw	r2,328(r16)
1001292c:	003fc706 	br	1001284c <__alt_data_end+0xf801284c>
10012930:	00bfffc4 	movi	r2,-1
10012934:	003fd106 	br	1001287c <__alt_data_end+0xf801287c>

10012938 <__call_exitprocs>:
10012938:	00840074 	movhi	r2,4097
1001293c:	109a9604 	addi	r2,r2,27224
10012940:	10800017 	ldw	r2,0(r2)
10012944:	defff404 	addi	sp,sp,-48
10012948:	dd800815 	stw	r22,32(sp)
1001294c:	d8800015 	stw	r2,0(sp)
10012950:	10805204 	addi	r2,r2,328
10012954:	dd000615 	stw	r20,24(sp)
10012958:	dc800415 	stw	r18,16(sp)
1001295c:	dfc00b15 	stw	ra,44(sp)
10012960:	df000a15 	stw	fp,40(sp)
10012964:	ddc00915 	stw	r23,36(sp)
10012968:	dd400715 	stw	r21,28(sp)
1001296c:	dcc00515 	stw	r19,20(sp)
10012970:	dc400315 	stw	r17,12(sp)
10012974:	dc000215 	stw	r16,8(sp)
10012978:	2025883a 	mov	r18,r4
1001297c:	2829883a 	mov	r20,r5
10012980:	d8800115 	stw	r2,4(sp)
10012984:	05bfffc4 	movi	r22,-1
10012988:	d8800017 	ldw	r2,0(sp)
1001298c:	14c05217 	ldw	r19,328(r2)
10012990:	98001d26 	beq	r19,zero,10012a08 <__call_exitprocs+0xd0>
10012994:	dd400117 	ldw	r21,4(sp)
10012998:	98800117 	ldw	r2,4(r19)
1001299c:	173fffc4 	addi	fp,r2,-1
100129a0:	e0000d16 	blt	fp,zero,100129d8 <__call_exitprocs+0xa0>
100129a4:	14000044 	addi	r16,r2,1
100129a8:	8421883a 	add	r16,r16,r16
100129ac:	8421883a 	add	r16,r16,r16
100129b0:	84402004 	addi	r17,r16,128
100129b4:	9c63883a 	add	r17,r19,r17
100129b8:	9c21883a 	add	r16,r19,r16
100129bc:	a0001e26 	beq	r20,zero,10012a38 <__call_exitprocs+0x100>
100129c0:	80804017 	ldw	r2,256(r16)
100129c4:	15001c26 	beq	r2,r20,10012a38 <__call_exitprocs+0x100>
100129c8:	e73fffc4 	addi	fp,fp,-1
100129cc:	843fff04 	addi	r16,r16,-4
100129d0:	8c7fff04 	addi	r17,r17,-4
100129d4:	e5bff91e 	bne	fp,r22,100129bc <__alt_data_end+0xf80129bc>
100129d8:	00800034 	movhi	r2,0
100129dc:	10800004 	addi	r2,r2,0
100129e0:	10000926 	beq	r2,zero,10012a08 <__call_exitprocs+0xd0>
100129e4:	98800117 	ldw	r2,4(r19)
100129e8:	1000311e 	bne	r2,zero,10012ab0 <__call_exitprocs+0x178>
100129ec:	98800017 	ldw	r2,0(r19)
100129f0:	10003426 	beq	r2,zero,10012ac4 <__call_exitprocs+0x18c>
100129f4:	9809883a 	mov	r4,r19
100129f8:	a8800015 	stw	r2,0(r21)
100129fc:	00000000 	call	10000000 <__reset>
10012a00:	acc00017 	ldw	r19,0(r21)
10012a04:	983fe41e 	bne	r19,zero,10012998 <__alt_data_end+0xf8012998>
10012a08:	dfc00b17 	ldw	ra,44(sp)
10012a0c:	df000a17 	ldw	fp,40(sp)
10012a10:	ddc00917 	ldw	r23,36(sp)
10012a14:	dd800817 	ldw	r22,32(sp)
10012a18:	dd400717 	ldw	r21,28(sp)
10012a1c:	dd000617 	ldw	r20,24(sp)
10012a20:	dcc00517 	ldw	r19,20(sp)
10012a24:	dc800417 	ldw	r18,16(sp)
10012a28:	dc400317 	ldw	r17,12(sp)
10012a2c:	dc000217 	ldw	r16,8(sp)
10012a30:	dec00c04 	addi	sp,sp,48
10012a34:	f800283a 	ret
10012a38:	98800117 	ldw	r2,4(r19)
10012a3c:	80c00017 	ldw	r3,0(r16)
10012a40:	10bfffc4 	addi	r2,r2,-1
10012a44:	17001526 	beq	r2,fp,10012a9c <__call_exitprocs+0x164>
10012a48:	80000015 	stw	zero,0(r16)
10012a4c:	183fde26 	beq	r3,zero,100129c8 <__alt_data_end+0xf80129c8>
10012a50:	00800044 	movi	r2,1
10012a54:	1708983a 	sll	r4,r2,fp
10012a58:	98806217 	ldw	r2,392(r19)
10012a5c:	9dc00117 	ldw	r23,4(r19)
10012a60:	2084703a 	and	r2,r4,r2
10012a64:	1000061e 	bne	r2,zero,10012a80 <__call_exitprocs+0x148>
10012a68:	183ee83a 	callr	r3
10012a6c:	98800117 	ldw	r2,4(r19)
10012a70:	15ffc51e 	bne	r2,r23,10012988 <__alt_data_end+0xf8012988>
10012a74:	a8800017 	ldw	r2,0(r21)
10012a78:	14ffd326 	beq	r2,r19,100129c8 <__alt_data_end+0xf80129c8>
10012a7c:	003fc206 	br	10012988 <__alt_data_end+0xf8012988>
10012a80:	98806317 	ldw	r2,396(r19)
10012a84:	2084703a 	and	r2,r4,r2
10012a88:	1000061e 	bne	r2,zero,10012aa4 <__call_exitprocs+0x16c>
10012a8c:	89400017 	ldw	r5,0(r17)
10012a90:	9009883a 	mov	r4,r18
10012a94:	183ee83a 	callr	r3
10012a98:	003ff406 	br	10012a6c <__alt_data_end+0xf8012a6c>
10012a9c:	9f000115 	stw	fp,4(r19)
10012aa0:	003fea06 	br	10012a4c <__alt_data_end+0xf8012a4c>
10012aa4:	89000017 	ldw	r4,0(r17)
10012aa8:	183ee83a 	callr	r3
10012aac:	003fef06 	br	10012a6c <__alt_data_end+0xf8012a6c>
10012ab0:	98800017 	ldw	r2,0(r19)
10012ab4:	982b883a 	mov	r21,r19
10012ab8:	1027883a 	mov	r19,r2
10012abc:	983fb61e 	bne	r19,zero,10012998 <__alt_data_end+0xf8012998>
10012ac0:	003fd106 	br	10012a08 <__alt_data_end+0xf8012a08>
10012ac4:	0005883a 	mov	r2,zero
10012ac8:	003ffa06 	br	10012ab4 <__alt_data_end+0xf8012ab4>

10012acc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10012acc:	defffd04 	addi	sp,sp,-12
10012ad0:	df000215 	stw	fp,8(sp)
10012ad4:	df000204 	addi	fp,sp,8
10012ad8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10012adc:	0001883a 	nop
10012ae0:	e0bfff17 	ldw	r2,-4(fp)
10012ae4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10012ae8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10012aec:	10000226 	beq	r2,zero,10012af8 <_exit+0x2c>
    ALT_SIM_FAIL();
10012af0:	002af070 	cmpltui	zero,zero,43969
10012af4:	00000106 	br	10012afc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10012af8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10012afc:	003fff06 	br	10012afc <__alt_data_end+0xf8012afc>
