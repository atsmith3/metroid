
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x0001945c memsz 0x0001945c flags r-x
    LOAD off    0x0001a47c vaddr 0x1001947c paddr 0x1001af68 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x0001ca54 vaddr 0x1001ca54 paddr 0x1001ca54 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00016df0  100001bc  100001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000024d0  10016fac  10016fac  00017fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  1001947c  1001af68  0001a47c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  1001ca54  1001ca54  0001ca54  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0001bf68  2**0
                  CONTENTS
  7 .sdram        00000000  1001cbb4  1001cbb4  0001bf68  2**0
                  CONTENTS
  8 .comment      00000046  00000000  00000000  0001bf68  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000e68  00000000  00000000  0001bfb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00025730  00000000  00000000  0001ce18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009b25  00000000  00000000  00042548  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c6ab  00000000  00000000  0004c06d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000024d4  00000000  00000000  00058718  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000039eb  00000000  00000000  0005abec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000191aa  00000000  00000000  0005e5d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00077784  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001890  00000000  00000000  000777c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007c62f  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0007c632  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007c63e  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007c63f  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007c640  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007c644  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007c648  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0007c64c  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0007c657  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0007c662  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0007c66d  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001b  00000000  00000000  0007c678  2**0
                  CONTENTS, READONLY
 30 .jdi          00004442  00000000  00000000  0007c693  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001d240a  00000000  00000000  00080ad5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001bc l    d  .text	00000000 .text
10016fac l    d  .rodata	00000000 .rodata
1001947c l    d  .rwdata	00000000 .rwdata
1001ca54 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
1001cbb4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
100001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
1001ca54 l     O .bss	00000002 ctl_reg.3318
1001ca56 l     O .bss	00000002 no_device.3319
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
10006cc4 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
100192c2 l     O .rodata	00000010 zeroes.4181
100192d2 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1000b528 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1000d0d0 l     F .text	00000008 __fp_lock
1000d0d8 l     F .text	00000008 __fp_unlock
1000d0ec l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
1001947c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
100198c0 l     O .rwdata	00000020 lc_ctype_charset
100198a0 l     O .rwdata	00000020 lc_message_charset
100198e0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10019304 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
100104e4 l     F .text	000000fc __sprint_r.part.0
10019438 l     O .rodata	00000010 blanks.4125
10019428 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
10014750 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10014878 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
100148a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
100149ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10014aa8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10014b94 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10014d80 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
1001af58 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
10015034 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10015184 l     F .text	00000038 alt_dev_reg
10019ec8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10015460 l     F .text	00000204 altera_avalon_jtag_uart_irq
10015664 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10015f38 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
100163d8 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10016530 l     F .text	00000050 alt_get_errno
10016580 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
1000fb24 g     F .text	00000074 _mprec_log10
1000fc10 g     F .text	0000008c __any_on
10011f10 g     F .text	00000054 _isatty_r
10019310 g     O .rodata	00000028 __mprec_tinytens
10014cc0 g     F .text	00000078 alt_main
100090f8 g     F .text	000000b8 _puts_r
1001cab4 g     O .bss	00000100 alt_irq
10011f64 g     F .text	0000005c _lseek_r
1001af68 g       *ABS*	00000000 __flash_rwdata_start
10014310 g     F .text	00000084 .hidden __eqdf2
1001cbb4 g       *ABS*	00000000 __alt_heap_start
100090bc g     F .text	0000003c printf
1001218c g     F .text	0000009c _wcrtomb_r
100103dc g     F .text	0000005c __sseek
1000d434 g     F .text	00000010 __sinit
1001201c g     F .text	00000154 __swbuf_r
1000deac g     F .text	0000007c _setlocale_r
1000d28c g     F .text	00000078 __sfmoreglue
10014d5c g     F .text	00000024 __malloc_unlock
10006bc8 g     F .text	00000080 UsbGetRetryCnt
1000e9d4 g     F .text	0000015c memmove
100001f8 g     F .text	00000050 IO_init
1000d41c g     F .text	00000018 _cleanup
1000ec54 g     F .text	000000a8 _Balloc
10007964 g     F .text	00000078 .hidden __fixsfsi
10014394 g     F .text	000000e0 .hidden __gtdf2
10016970 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10011eb8 g     F .text	00000058 _fstat_r
1001ca70 g     O .bss	00000004 errno
10010358 g     F .text	00000008 __seofread
1001ca78 g     O .bss	00000004 alt_argv
10022f28 g       *ABS*	00000000 _gp
10015004 g     F .text	00000030 usleep
10007468 g     F .text	000004fc .hidden __subsf3
10019d48 g     O .rwdata	00000180 alt_fd_list
10016990 g     F .text	00000090 alt_find_dev
10008f58 g     F .text	00000138 memcpy
1000d0e0 g     F .text	0000000c _cleanup_r
100145dc g     F .text	000000d0 .hidden __floatsidf
100164b8 g     F .text	00000078 alt_io_redirect
10014474 g     F .text	000000e0 .hidden __ltdf2
10016fac g       *ABS*	00000000 __DTOR_END__
100091b0 g     F .text	00000014 puts
1001023c g     F .text	00000074 __fpclassifyd
1000fa80 g     F .text	000000a4 __ratio
10011a1c g     F .text	00000024 __vfiprintf_internal
10015860 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
10009090 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10006de0 g     F .text	00000008 .hidden __udivsi3
100149fc g     F .text	000000ac isatty
10019360 g     O .rodata	000000c8 __mprec_tens
1000df28 g     F .text	0000000c __locale_charset
100073b0 g     F .text	000000b8 .hidden __lesf2
1001ca6c g     O .bss	00000004 __malloc_top_pad
10006268 g     F .text	00000264 UsbGetConfigDesc2
1001af30 g     O .rwdata	00000004 __mb_cur_max
1000df58 g     F .text	0000000c _localeconv_r
1000f07c g     F .text	0000003c __i2b
1000d898 g     F .text	000004a4 __sfvwrite_r
100102b0 g     F .text	00000054 _sbrk_r
10011fc0 g     F .text	0000005c _read_r
1001af50 g     O .rwdata	00000004 alt_max_fd
10011bc8 g     F .text	00000100 _fclose_r
1000d0a0 g     F .text	00000030 fflush
1001ca68 g     O .bss	00000004 __malloc_max_sbrked_mem
10008c4c g     F .text	00000110 .hidden __extendsfdf2
100130f4 g     F .text	0000089c .hidden __adddf3
1000f828 g     F .text	0000011c __b2d
10012ad8 g     F .text	0000061c .hidden __umoddi3
10014be4 g     F .text	000000dc lseek
1001af28 g     O .rwdata	00000004 _global_impure_ptr
1000fc9c g     F .text	000005a0 _realloc_r
1001cbb4 g       *ABS*	00000000 __bss_end
100162e8 g     F .text	000000f0 alt_iic_isr_register
1001686c g     F .text	00000104 alt_tick
10012498 g     F .text	00000640 .hidden __udivdi3
10011cdc g     F .text	00000184 _fputwc_r
10019338 g     O .rodata	00000028 __mprec_bigtens
1000ee60 g     F .text	00000104 __s2b
100146ac g     F .text	000000a4 .hidden __floatunsidf
1000f5d0 g     F .text	00000060 __mcmp
10005cc8 g     F .text	000000fc UsbSetAddress
1000d454 g     F .text	00000018 __fp_lock_all
1001629c g     F .text	0000004c alt_ic_irq_enabled
100167d4 g     F .text	00000098 alt_alarm_stop
1001ca80 g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000d0 alt_irq_handler
10019d20 g     O .rwdata	00000028 alt_dev_null
10015f1c g     F .text	0000001c alt_dcache_flush_all
1000ef64 g     F .text	00000068 __hi0bits
100002c0 g     F .text	00000074 IO_read
10014554 g     F .text	00000088 .hidden __fixdfsi
1001af68 g       *ABS*	00000000 __ram_rwdata_end
1001af48 g     O .rwdata	00000008 alt_dev_list
10015084 g     F .text	00000100 write
100072f8 g     F .text	000000b8 .hidden __gtsf2
1001947c g       *ABS*	00000000 __ram_rodata_end
100148f4 g     F .text	000000b8 fstat
10014474 g     F .text	000000e0 .hidden __ledf2
10006c48 g     F .text	0000007c UsbPrintMem
1000f348 g     F .text	00000140 __pow5mult
100105f8 g     F .text	00001424 ___vfiprintf_internal_r
1001ca60 g     O .bss	00000004 __nlocale_changed
10006de8 g     F .text	00000008 .hidden __umodsi3
1001cbb4 g       *ABS*	00000000 end
1001539c g     F .text	000000c4 altera_avalon_jtag_uart_init
10016fac g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10008ef4 g     F .text	00000064 .hidden __clzsi2
10015a6c g     F .text	00000218 altera_avalon_jtag_uart_write
1000d444 g     F .text	00000004 __sfp_lock_acquire
1000e8ec g     F .text	000000e8 memchr
100092d8 g     F .text	000020fc ___vfprintf_internal_r
100065c8 g     F .text	000000fc UsbClassRequest
1000d5a8 g     F .text	000002f0 _free_r
1000df34 g     F .text	00000010 __locale_mb_cur_max
10016de4 g     F .text	00000194 __call_exitprocs
1001ca5c g     O .bss	00000004 __mlocale_changed
1001af34 g     O .rwdata	00000004 __malloc_sbrk_base
100001bc g     F .text	0000003c _start
1001ca84 g     O .bss	00000004 _alt_tick_rate
100091dc g     F .text	00000064 rand
1000f488 g     F .text	00000148 __lshift
1001ca88 g     O .bss	00000004 _alt_nticks
10014dd0 g     F .text	00000104 read
100151f0 g     F .text	00000048 alt_sys_init
100079dc g     F .text	00000134 .hidden __floatsisf
10016cd0 g     F .text	00000114 __register_exitproc
1000f0b8 g     F .text	00000290 __multiply
1001570c g     F .text	00000068 altera_avalon_jtag_uart_close
10006df0 g     F .text	00000028 .hidden __mulsi3
1001947c g       *ABS*	00000000 __ram_rwdata_start
10016fac g       *ABS*	00000000 __ram_rodata_start
1001ca8c g     O .bss	00000028 __malloc_current_mallinfo
1000f944 g     F .text	0000013c __d2b
10005dc4 g     F .text	00000144 UsbGetDeviceDesc1
10015238 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10016b34 g     F .text	000000d4 alt_get_fd
10015dc4 g     F .text	00000158 alt_busy_sleep
10011a9c g     F .text	00000054 _close_r
10016c54 g     F .text	0000007c memcmp
100152f8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1001cbb4 g       *ABS*	00000000 __alt_stack_base
10015348 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
1000b3f8 g     F .text	00000130 __swsetup_r
10013990 g     F .text	00000980 .hidden __divdf3
1000d304 g     F .text	00000118 __sfp
1000fb98 g     F .text	00000078 __copybits
10019918 g     O .rwdata	00000408 __malloc_av_
1000d450 g     F .text	00000004 __sinit_lock_release
10007b10 g     F .text	0000086c .hidden __muldf3
10010304 g     F .text	00000054 __sread
10006b44 g     F .text	00000084 UsbWaitTDListDone
10016a20 g     F .text	00000114 alt_find_file
10015f88 g     F .text	000000a4 alt_dev_llist_insert
10014d38 g     F .text	00000024 __malloc_lock
10014f54 g     F .text	000000b0 sbrk
1000ce78 g     F .text	00000228 _fflush_r
10011af0 g     F .text	000000d8 _calloc_r
1001ca54 g       *ABS*	00000000 __bss_start
1000eb30 g     F .text	00000124 memset
10000334 g     F .text	0000584c main
1001ca7c g     O .bss	00000004 alt_envp
1001ca64 g     O .bss	00000004 __malloc_max_total_mem
10015298 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
100064cc g     F .text	000000fc UsbSetConfig
10012170 g     F .text	0000001c __swbuf
100091c4 g     F .text	00000018 srand
100073b0 g     F .text	000000b8 .hidden __ltsf2
10010438 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
10011cc8 g     F .text	00000014 fclose
10008d5c g     F .text	00000198 .hidden __truncdfsf2
1000b750 g     F .text	00001728 _dtoa_r
1000e144 g     F .text	000007a8 _malloc_r
10012300 g     F .text	00000030 __ascii_wctomb
1001af54 g     O .rwdata	00000004 alt_errno
1000dd3c g     F .text	000000b8 _fwalk
10006d30 g     F .text	00000054 .hidden __divsi3
1000d484 g     F .text	00000124 _malloc_trim_r
100066c4 g     F .text	00000144 UsbGetHidDesc
10016fac g       *ABS*	00000000 __CTOR_END__
10010440 g     F .text	000000a4 strcmp
10016fac g       *ABS*	00000000 __flash_rodata_start
10016fac g       *ABS*	00000000 __DTOR_LIST__
10014310 g     F .text	00000084 .hidden __nedf2
10005bd4 g     F .text	00000044 UsbRead
100151bc g     F .text	00000034 alt_irq_init
10014ed4 g     F .text	00000080 alt_release_fd
1001917c g     O .rodata	00000100 .hidden __clz_tab
1001ca58 g     O .bss	00000004 _PathLocale
10016c08 g     F .text	00000014 atexit
100072f8 g     F .text	000000b8 .hidden __gesf2
10011a40 g     F .text	0000005c _write_r
1000df64 g     F .text	0000001c setlocale
1001af2c g     O .rwdata	00000004 _impure_ptr
1001ca74 g     O .bss	00000004 alt_argc
1001608c g     F .text	00000060 _do_dtors
1000df50 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
1000f7c8 g     F .text	00000060 __ulp
1000d46c g     F .text	00000018 __fp_unlock_all
1001af40 g     O .rwdata	00000008 alt_fs_list
10006808 g     F .text	0000033c UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000df80 g     F .text	0000000c localeconv
10016108 g     F .text	00000050 alt_ic_isr_register
1001af68 g       *ABS*	00000000 _edata
1001cbb4 g       *ABS*	00000000 _end
10005b80 g     F .text	00000054 UsbWrite
100001bc g       *ABS*	00000000 __ram_exceptions_end
10015774 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
100161f8 g     F .text	000000a4 alt_ic_irq_disable
10010360 g     F .text	0000007c __swrite
1001af38 g     O .rwdata	00000004 __malloc_trim_threshold
1000df44 g     F .text	0000000c __locale_msgcharset
10016c1c g     F .text	00000038 exit
1000ddf4 g     F .text	000000b8 _fwalk_reent
1000f630 g     F .text	00000198 __mdiff
10006d84 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
1000d448 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10000248 g     F .text	00000078 IO_write
10016f78 g     F .text	00000034 _exit
10015c84 g     F .text	00000140 alt_alarm_start
1001238c g     F .text	0000010c .hidden __muldi3
1000df8c g     F .text	000001b8 __smakebuf_r
10009240 g     F .text	00000098 strlen
10016674 g     F .text	00000160 open
10014394 g     F .text	000000e0 .hidden __gedf2
1001af3c g     O .rwdata	00000004 __wctomb
100105e0 g     F .text	00000018 __sprint_r
100160ec g     F .text	0000001c alt_icache_flush_all
1001af5c g     O .rwdata	00000004 alt_priority_mask
10016158 g     F .text	000000a0 alt_ic_irq_enable
1000b3d4 g     F .text	00000024 __vfprintf_internal
10012330 g     F .text	0000005c _wctomb_r
1000837c g     F .text	000008d0 .hidden __subdf3
1000efcc g     F .text	000000b0 __lo0bits
100060dc g     F .text	0000018c UsbGetConfigDesc1
1001af60 g     O .rwdata	00000008 alt_alarm_list
1001602c g     F .text	00000060 _do_ctors
10005c18 g     F .text	000000b0 UsbSoftReset
10012228 g     F .text	000000d8 wcrtomb
100147a0 g     F .text	000000d8 close
10006e18 g     F .text	000004e0 .hidden __addsf3
10005f08 g     F .text	000001d4 UsbGetDeviceDesc2
10014b10 g     F .text	00000084 alt_load
10011e60 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
1000d44c g     F .text	00000004 __sinit_lock_acquire
1000ed24 g     F .text	0000013c __multadd
1000ecfc g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406f14 	ori	at,at,444
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001426 	beq	r2,zero,1000017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	008400b4 	movhi	r2,4098
10000130:	10b2ad04 	addi	r2,r2,-13644
10000134:	e0fffd17 	ldw	r3,-12(fp)
10000138:	180690fa 	slli	r3,r3,3
1000013c:	10c5883a 	add	r2,r2,r3
10000140:	10c00017 	ldw	r3,0(r2)
10000144:	008400b4 	movhi	r2,4098
10000148:	10b2ad04 	addi	r2,r2,-13644
1000014c:	e13ffd17 	ldw	r4,-12(fp)
10000150:	200890fa 	slli	r4,r4,3
10000154:	1105883a 	add	r2,r2,r4
10000158:	10800104 	addi	r2,r2,4
1000015c:	10800017 	ldw	r2,0(r2)
10000160:	1009883a 	mov	r4,r2
10000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
10000178:	00000706 	br	10000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000017c:	e0bffc17 	ldw	r2,-16(fp)
10000180:	1085883a 	add	r2,r2,r2
10000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000188:	e0bffd17 	ldw	r2,-12(fp)
1000018c:	10800044 	addi	r2,r2,1
10000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
10000194:	003fe106 	br	1000011c <__alt_data_end+0xf800011c>

    active = alt_irq_pending ();
10000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000019c:	e0bffb17 	ldw	r2,-20(fp)
100001a0:	103fdb1e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	e037883a 	mov	sp,fp
100001ac:	dfc00117 	ldw	ra,4(sp)
100001b0:	df000017 	ldw	fp,0(sp)
100001b4:	dec00204 	addi	sp,sp,8
100001b8:	f800283a 	ret

Disassembly of section .text:

100001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001bc:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c4:	068400b4 	movhi	gp,4098
    ori gp, gp, %lo(_gp)
100001c8:	d68bca14 	ori	gp,gp,12072
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001cc:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001d0:	10b29514 	ori	r2,r2,51796

    movhi r3, %hi(__bss_end)
100001d4:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001d8:	18f2ed14 	ori	r3,r3,52148

    beq r2, r3, 1f
100001dc:	10c00326 	beq	r2,r3,100001ec <_start+0x30>

0:
    stw zero, (r2)
100001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e8:	10fffd36 	bltu	r2,r3,100001e0 <__alt_data_end+0xf80001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001ec:	0014b100 	call	10014b10 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001f0:	0014cc00 	call	10014cc0 <alt_main>

100001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f4:	003fff06 	br	100001f4 <__alt_data_end+0xf80001f4>

100001f8 <IO_init>:
#define otg_hpi_cs			(volatile char*)	OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*)	OTG_HPI_W_BASE


void IO_init(void)
{
100001f8:	deffff04 	addi	sp,sp,-4
100001fc:	df000015 	stw	fp,0(sp)
10000200:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 1;
10000204:	0080f404 	movi	r2,976
10000208:	00c00044 	movi	r3,1
1000020c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10000210:	0080fc04 	movi	r2,1008
10000214:	00c00044 	movi	r3,1
10000218:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
1000021c:	0080f804 	movi	r2,992
10000220:	00c00044 	movi	r3,1
10000224:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
10000228:	00810404 	movi	r2,1040
1000022c:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
10000230:	00810004 	movi	r2,1024
10000234:	10000015 	stw	zero,0(r2)
}
10000238:	e037883a 	mov	sp,fp
1000023c:	df000017 	ldw	fp,0(sp)
10000240:	dec00104 	addi	sp,sp,4
10000244:	f800283a 	ret

10000248 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
10000248:	defffd04 	addi	sp,sp,-12
1000024c:	df000215 	stw	fp,8(sp)
10000250:	df000204 	addi	fp,sp,8
10000254:	2007883a 	mov	r3,r4
10000258:	2805883a 	mov	r2,r5
1000025c:	e0fffe05 	stb	r3,-8(fp)
10000260:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
10000264:	00810404 	movi	r2,1040
10000268:	e0fffe03 	ldbu	r3,-8(fp)
1000026c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
10000270:	00810004 	movi	r2,1024
10000274:	e0ffff0b 	ldhu	r3,-4(fp)
10000278:	10c00015 	stw	r3,0(r2)
	
	*otg_hpi_r = 1;
1000027c:	0080fc04 	movi	r2,1008
10000280:	00c00044 	movi	r3,1
10000284:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 0;
10000288:	0080f404 	movi	r2,976
1000028c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10000290:	0080f804 	movi	r2,992
10000294:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
10000298:	0080f804 	movi	r2,992
1000029c:	00c00044 	movi	r3,1
100002a0:	10c00005 	stb	r3,0(r2)
	
	*otg_hpi_cs = 1;
100002a4:	0080f404 	movi	r2,976
100002a8:	00c00044 	movi	r3,1
100002ac:	10c00005 	stb	r3,0(r2)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
}
100002b0:	e037883a 	mov	sp,fp
100002b4:	df000017 	ldw	fp,0(sp)
100002b8:	dec00104 	addi	sp,sp,4
100002bc:	f800283a 	ret

100002c0 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
100002c0:	defffd04 	addi	sp,sp,-12
100002c4:	df000215 	stw	fp,8(sp)
100002c8:	df000204 	addi	fp,sp,8
100002cc:	2005883a 	mov	r2,r4
100002d0:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	
	*otg_hpi_address = Address;
100002d4:	00810404 	movi	r2,1040
100002d8:	e0ffff03 	ldbu	r3,-4(fp)
100002dc:	10c00015 	stw	r3,0(r2)
		
	*otg_hpi_w = 1;
100002e0:	0080f804 	movi	r2,992
100002e4:	00c00044 	movi	r3,1
100002e8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 0;
100002ec:	0080f404 	movi	r2,976
100002f0:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
100002f4:	0080fc04 	movi	r2,1008
100002f8:	10000005 	stb	zero,0(r2)
	
	temp = *otg_hpi_data;
100002fc:	00810004 	movi	r2,1024
10000300:	10800017 	ldw	r2,0(r2)
10000304:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
10000308:	0080fc04 	movi	r2,1008
1000030c:	00c00044 	movi	r3,1
10000310:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000314:	0080f404 	movi	r2,976
10000318:	00c00044 	movi	r3,1
1000031c:	10c00005 	stb	r3,0(r2)
	
	return temp;
10000320:	e0bffe0b 	ldhu	r2,-8(fp)
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	//printf("%x\n",temp);
	return temp;
}
10000324:	e037883a 	mov	sp,fp
10000328:	df000017 	ldw	fp,0(sp)
1000032c:	dec00104 	addi	sp,sp,4
10000330:	f800283a 	ret

10000334 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
10000334:	def91104 	addi	sp,sp,-7100
10000338:	dfc6ee15 	stw	ra,7096(sp)
1000033c:	df06ed15 	stw	fp,7092(sp)
10000340:	dc86ec15 	stw	r18,7088(sp)
10000344:	dc46eb15 	stw	r17,7084(sp)
10000348:	dc06ea15 	stw	r16,7080(sp)
1000034c:	df06ed04 	addi	fp,sp,7092
	IO_init();
10000350:	00001f80 	call	100001f8 <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
10000354:	e039480d 	sth	zero,-6880(fp)
	long keycode = 0;
10000358:	e0394915 	stw	zero,-6876(fp)
	alt_u8 toggle = 0;
1000035c:	e0391385 	stb	zero,-7090(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
10000360:	01040074 	movhi	r4,4097
10000364:	211beb04 	addi	r4,r4,28588
10000368:	00091b00 	call	100091b0 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
1000036c:	0005c180 	call	10005c18 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10000370:	01005104 	movi	r4,324
10000374:	000b883a 	mov	r5,zero
10000378:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
1000037c:	01302414 	movui	r4,49296
10000380:	017fffd4 	movui	r5,65535
10000384:	0005b800 	call	10005b80 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10000388:	01006d04 	movi	r4,436
1000038c:	01409604 	movi	r5,600
10000390:	0005b800 	call	10005b80 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10000394:	00811004 	movi	r2,1088
10000398:	e0b9130d 	sth	r2,-7092(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
1000039c:	e0b9130b 	ldhu	r2,-7092(fp)
100003a0:	01005084 	movi	r4,322
100003a4:	100b883a 	mov	r5,r2
100003a8:	0005b800 	call	10005b80 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
100003ac:	00808404 	movi	r2,528
100003b0:	e0b94a0d 	sth	r2,-6872(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
100003b4:	e0b94a0b 	ldhu	r2,-6872(fp)
100003b8:	01302314 	movui	r4,49292
100003bc:	100b883a 	mov	r5,r2
100003c0:	0005b800 	call	10005b80 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
100003c4:	01007104 	movi	r4,452
100003c8:	000b883a 	mov	r5,zero
100003cc:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100003d0:	01007184 	movi	r4,454
100003d4:	000b883a 	mov	r5,zero
100003d8:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
100003dc:	01007204 	movi	r4,456
100003e0:	000b883a 	mov	r5,zero
100003e4:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
100003e8:	01007284 	movi	r4,458
100003ec:	000b883a 	mov	r5,zero
100003f0:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
100003f4:	01007304 	movi	r4,460
100003f8:	000b883a 	mov	r5,zero
100003fc:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000400:	01007384 	movi	r4,462
10000404:	000b883a 	mov	r5,zero
10000408:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
1000040c:	01007404 	movi	r4,464
10000410:	000b883a 	mov	r5,zero
10000414:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10000418:	01007484 	movi	r4,466
1000041c:	000b883a 	mov	r5,zero
10000420:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000424:	01007504 	movi	r4,468
10000428:	000b883a 	mov	r5,zero
1000042c:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10000430:	01007584 	movi	r4,470
10000434:	000b883a 	mov	r5,zero
10000438:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
1000043c:	01007604 	movi	r4,472
10000440:	000b883a 	mov	r5,zero
10000444:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10000448:	01007684 	movi	r4,474
1000044c:	000b883a 	mov	r5,zero
10000450:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000454:	01007704 	movi	r4,476
10000458:	000b883a 	mov	r5,zero
1000045c:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10000460:	01007784 	movi	r4,478
10000464:	000b883a 	mov	r5,zero
10000468:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
1000046c:	01007084 	movi	r4,450
10000470:	01401c84 	movi	r5,114
10000474:	0005b800 	call	10005b80 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000478:	01000044 	movi	r4,1
1000047c:	01738054 	movui	r5,52737
10000480:	00002480 	call	10000248 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10000484:	0001883a 	nop
10000488:	010000c4 	movi	r4,3
1000048c:	00002c00 	call	100002c0 <IO_read>
10000490:	10bfffcc 	andi	r2,r2,65535
10000494:	103ffc26 	beq	r2,zero,10000488 <__alt_data_end+0xf8000488>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000498:	0001883a 	nop
1000049c:	01000044 	movi	r4,1
100004a0:	00002c00 	call	100002c0 <IO_read>
100004a4:	10bfffcc 	andi	r2,r2,65535
100004a8:	1083fb58 	cmpnei	r2,r2,4077
100004ac:	10000826 	beq	r2,zero,100004d0 <main+0x19c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100004b0:	01000044 	movi	r4,1
100004b4:	00002c00 	call	100002c0 <IO_read>
100004b8:	10bfffcc 	andi	r2,r2,65535
100004bc:	01040074 	movhi	r4,4097
100004c0:	211bf104 	addi	r4,r4,28612
100004c4:	100b883a 	mov	r5,r2
100004c8:	00090bc0 	call	100090bc <printf>
		goto USB_HOT_PLUG;
100004cc:	003fa706 	br	1000036c <__alt_data_end+0xf800036c>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
100004d0:	01040074 	movhi	r4,4097
100004d4:	211bfa04 	addi	r4,r4,28648
100004d8:	00090bc0 	call	100090bc <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
100004dc:	01007084 	movi	r4,450
100004e0:	01401d04 	movi	r5,116
100004e4:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
100004e8:	01007104 	movi	r4,452
100004ec:	01400f04 	movi	r5,60
100004f0:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100004f4:	01007184 	movi	r4,454
100004f8:	000b883a 	mov	r5,zero
100004fc:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000500:	01007204 	movi	r4,456
10000504:	000b883a 	mov	r5,zero
10000508:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
1000050c:	01007284 	movi	r4,458
10000510:	000b883a 	mov	r5,zero
10000514:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10000518:	01007304 	movi	r4,460
1000051c:	000b883a 	mov	r5,zero
10000520:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000524:	01007384 	movi	r4,462
10000528:	000b883a 	mov	r5,zero
1000052c:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000530:	01007404 	movi	r4,464
10000534:	000b883a 	mov	r5,zero
10000538:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
1000053c:	01007484 	movi	r4,466
10000540:	000b883a 	mov	r5,zero
10000544:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000548:	01007504 	movi	r4,468
1000054c:	000b883a 	mov	r5,zero
10000550:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10000554:	01007584 	movi	r4,470
10000558:	000b883a 	mov	r5,zero
1000055c:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10000560:	01007604 	movi	r4,472
10000564:	000b883a 	mov	r5,zero
10000568:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
1000056c:	01007684 	movi	r4,474
10000570:	000b883a 	mov	r5,zero
10000574:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000578:	01007704 	movi	r4,476
1000057c:	000b883a 	mov	r5,zero
10000580:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10000584:	01007784 	movi	r4,478
10000588:	000b883a 	mov	r5,zero
1000058c:	0005b800 	call	10005b80 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000590:	01000044 	movi	r4,1
10000594:	01738054 	movui	r5,52737
10000598:	00002480 	call	10000248 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
1000059c:	0001883a 	nop
100005a0:	01000044 	movi	r4,1
100005a4:	00002c00 	call	100002c0 <IO_read>
100005a8:	10bfffcc 	andi	r2,r2,65535
100005ac:	1083fb58 	cmpnei	r2,r2,4077
100005b0:	10000826 	beq	r2,zero,100005d4 <main+0x2a0>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100005b4:	01000044 	movi	r4,1
100005b8:	00002c00 	call	100002c0 <IO_read>
100005bc:	10bfffcc 	andi	r2,r2,65535
100005c0:	01040074 	movhi	r4,4097
100005c4:	211bf104 	addi	r4,r4,28612
100005c8:	100b883a 	mov	r5,r2
100005cc:	00090bc0 	call	100090bc <printf>
		goto USB_HOT_PLUG;
100005d0:	003f6606 	br	1000036c <__alt_data_end+0xf800036c>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
100005d4:	00b02284 	movi	r2,-16246
100005d8:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
100005dc:	008c0004 	movi	r2,12288
100005e0:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
100005e4:	00880004 	movi	r2,8192
100005e8:	e0b9480d 	sth	r2,-6880(fp)
	usb_ctl_val = UsbRead(ctl_reg);
100005ec:	d0a6cb0b 	ldhu	r2,-25812(gp)
100005f0:	10bfffcc 	andi	r2,r2,65535
100005f4:	1009883a 	mov	r4,r2
100005f8:	0005bd40 	call	10005bd4 <UsbRead>
100005fc:	e0b9130d 	sth	r2,-7092(fp)

	if (!(usb_ctl_val & no_device))
10000600:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000604:	e0f9130b 	ldhu	r3,-7092(fp)
10000608:	1884703a 	and	r2,r3,r2
1000060c:	10bfffcc 	andi	r2,r2,65535
10000610:	1000341e 	bne	r2,zero,100006e4 <main+0x3b0>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000614:	e03913c5 	stb	zero,-7089(fp)
10000618:	00001006 	br	1000065c <main+0x328>
		{
			usleep(5*1000);
1000061c:	0104e204 	movi	r4,5000
10000620:	00150040 	call	10015004 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10000624:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000628:	10bfffcc 	andi	r2,r2,65535
1000062c:	1009883a 	mov	r4,r2
10000630:	0005bd40 	call	10005bd4 <UsbRead>
10000634:	e0b9130d 	sth	r2,-7092(fp)
			if(usb_ctl_val & no_device) break;
10000638:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000063c:	e0f9130b 	ldhu	r3,-7092(fp)
10000640:	1884703a 	and	r2,r3,r2
10000644:	10bfffcc 	andi	r2,r2,65535
10000648:	10000126 	beq	r2,zero,10000650 <main+0x31c>
1000064c:	00000606 	br	10000668 <main+0x334>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000650:	e0b913c3 	ldbu	r2,-7089(fp)
10000654:	10800044 	addi	r2,r2,1
10000658:	e0b913c5 	stb	r2,-7089(fp)
1000065c:	e0b913c3 	ldbu	r2,-7089(fp)
10000660:	10800170 	cmpltui	r2,r2,5
10000664:	103fed1e 	bne	r2,zero,1000061c <__alt_data_end+0xf800061c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
		}
		if(!(usb_ctl_val & no_device))
10000668:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000066c:	e0f9130b 	ldhu	r3,-7092(fp)
10000670:	1884703a 	and	r2,r3,r2
10000674:	10bfffcc 	andi	r2,r2,65535
10000678:	1000261e 	bne	r2,zero,10000714 <main+0x3e0>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
1000067c:	01040074 	movhi	r4,4097
10000680:	211bfe04 	addi	r4,r4,28664
10000684:	00091b00 	call	100091b0 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10000688:	01040074 	movhi	r4,4097
1000068c:	211c0804 	addi	r4,r4,28704
10000690:	00091b00 	call	100091b0 <puts>
			while (!(usb_ctl_val & no_device))
10000694:	00000d06 	br	100006cc <main+0x398>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10000698:	d0a6cb0b 	ldhu	r2,-25812(gp)
1000069c:	10bfffcc 	andi	r2,r2,65535
100006a0:	1009883a 	mov	r4,r2
100006a4:	0005bd40 	call	10005bd4 <UsbRead>
100006a8:	e0b9130d 	sth	r2,-7092(fp)
				if(usb_ctl_val & no_device)
100006ac:	d0a6cb8b 	ldhu	r2,-25810(gp)
100006b0:	e0f9130b 	ldhu	r3,-7092(fp)
100006b4:	1884703a 	and	r2,r3,r2
100006b8:	10bfffcc 	andi	r2,r2,65535
100006bc:	10000126 	beq	r2,zero,100006c4 <main+0x390>
					goto USB_HOT_PLUG;
100006c0:	003f2a06 	br	1000036c <__alt_data_end+0xf800036c>

				usleep(2000);
100006c4:	0101f404 	movi	r4,2000
100006c8:	00150040 	call	10015004 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
100006cc:	d0a6cb8b 	ldhu	r2,-25810(gp)
100006d0:	e0f9130b 	ldhu	r3,-7092(fp)
100006d4:	1884703a 	and	r2,r3,r2
100006d8:	10bfffcc 	andi	r2,r2,65535
100006dc:	103fee26 	beq	r2,zero,10000698 <__alt_data_end+0xf8000698>
100006e0:	00000c06 	br	10000714 <main+0x3e0>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
100006e4:	e0f9130b 	ldhu	r3,-7092(fp)
100006e8:	e0b9480b 	ldhu	r2,-6880(fp)
100006ec:	1884703a 	and	r2,r3,r2
100006f0:	10bfffcc 	andi	r2,r2,65535
100006f4:	10000426 	beq	r2,zero,10000708 <main+0x3d4>
		{
			printf("[INFO]: full speed device\n");
100006f8:	01040074 	movhi	r4,4097
100006fc:	211c1404 	addi	r4,r4,28752
10000700:	00091b00 	call	100091b0 <puts>
10000704:	00000306 	br	10000714 <main+0x3e0>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10000708:	01040074 	movhi	r4,4097
1000070c:	211c1b04 	addi	r4,r4,28780
10000710:	00091b00 	call	100091b0 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10000714:	0005cc80 	call	10005cc8 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000718:	00000306 	br	10000728 <main+0x3f4>
	{
		UsbSetAddress();
1000071c:	0005cc80 	call	10005cc8 <UsbSetAddress>
		usleep(10*1000);
10000720:	0109c404 	movi	r4,10000
10000724:	00150040 	call	10015004 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000728:	010000c4 	movi	r4,3
1000072c:	00002c00 	call	100002c0 <IO_read>
10000730:	10bfffcc 	andi	r2,r2,65535
10000734:	1080040c 	andi	r2,r2,16
10000738:	103ff826 	beq	r2,zero,1000071c <__alt_data_end+0xf800071c>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000073c:	0006b440 	call	10006b44 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
10000740:	01000084 	movi	r4,2
10000744:	01414184 	movi	r5,1286
10000748:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000074c:	0009883a 	mov	r4,zero
10000750:	00002c00 	call	100002c0 <IO_read>
10000754:	10bfffcc 	andi	r2,r2,65535
10000758:	01040074 	movhi	r4,4097
1000075c:	211c2204 	addi	r4,r4,28808
10000760:	100b883a 	mov	r5,r2
10000764:	00090bc0 	call	100090bc <printf>

	IO_write(HPI_ADDR,0x0508); // n
10000768:	01000084 	movi	r4,2
1000076c:	01414204 	movi	r5,1288
10000770:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000774:	0009883a 	mov	r4,zero
10000778:	00002c00 	call	100002c0 <IO_read>
1000077c:	e0b9130d 	sth	r2,-7092(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10000780:	e0b9130b 	ldhu	r2,-7092(fp)
10000784:	01040074 	movhi	r4,4097
10000788:	211c2d04 	addi	r4,r4,28852
1000078c:	100b883a 	mov	r5,r2
10000790:	00090bc0 	call	100090bc <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10000794:	e0b9130b 	ldhu	r2,-7092(fp)
10000798:	108000e0 	cmpeqi	r2,r2,3
1000079c:	1000031e 	bne	r2,zero,100007ac <main+0x478>
	{
		usb_ctl_val = UsbGetRetryCnt();
100007a0:	0006bc80 	call	10006bc8 <UsbGetRetryCnt>
100007a4:	e0b9130d 	sth	r2,-7092(fp)

		goto USB_HOT_PLUG;
100007a8:	003ef006 	br	1000036c <__alt_data_end+0xf800036c>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
100007ac:	01040074 	movhi	r4,4097
100007b0:	211c3904 	addi	r4,r4,28900
100007b4:	00091b00 	call	100091b0 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
100007b8:	0005dc40 	call	10005dc4 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007bc:	00000306 	br	100007cc <main+0x498>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
100007c0:	0005dc40 	call	10005dc4 <UsbGetDeviceDesc1>
		usleep(10*1000);
100007c4:	0109c404 	movi	r4,10000
100007c8:	00150040 	call	10015004 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007cc:	010000c4 	movi	r4,3
100007d0:	00002c00 	call	100002c0 <IO_read>
100007d4:	10bfffcc 	andi	r2,r2,65535
100007d8:	1080040c 	andi	r2,r2,16
100007dc:	103ff826 	beq	r2,zero,100007c0 <__alt_data_end+0xf80007c0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100007e0:	0006b440 	call	10006b44 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100007e4:	01000084 	movi	r4,2
100007e8:	01414184 	movi	r5,1286
100007ec:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
100007f0:	0009883a 	mov	r4,zero
100007f4:	00002c00 	call	100002c0 <IO_read>
100007f8:	10bfffcc 	andi	r2,r2,65535
100007fc:	01040074 	movhi	r4,4097
10000800:	211c4804 	addi	r4,r4,28960
10000804:	100b883a 	mov	r5,r2
10000808:	00090bc0 	call	100090bc <printf>

	IO_write(HPI_ADDR,0x0508);
1000080c:	01000084 	movi	r4,2
10000810:	01414204 	movi	r5,1288
10000814:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000818:	0009883a 	mov	r4,zero
1000081c:	00002c00 	call	100002c0 <IO_read>
10000820:	e0b9130d 	sth	r2,-7092(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000824:	e0b9130b 	ldhu	r2,-7092(fp)
10000828:	01040074 	movhi	r4,4097
1000082c:	211c5304 	addi	r4,r4,29004
10000830:	100b883a 	mov	r5,r2
10000834:	00090bc0 	call	100090bc <printf>
	while (usb_ctl_val != 0x03)
10000838:	00000206 	br	10000844 <main+0x510>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000083c:	0006bc80 	call	10006bc8 <UsbGetRetryCnt>
10000840:	e0b9130d 	sth	r2,-7092(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000844:	e0b9130b 	ldhu	r2,-7092(fp)
10000848:	108000d8 	cmpnei	r2,r2,3
1000084c:	103ffb1e 	bne	r2,zero,1000083c <__alt_data_end+0xf800083c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10000850:	01040074 	movhi	r4,4097
10000854:	211c5f04 	addi	r4,r4,29052
10000858:	00091b00 	call	100091b0 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
1000085c:	0005f080 	call	10005f08 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000860:	00000306 	br	10000870 <main+0x53c>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10000864:	0005f080 	call	10005f08 <UsbGetDeviceDesc2>
		usleep(10*1000);
10000868:	0109c404 	movi	r4,10000
1000086c:	00150040 	call	10015004 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000870:	010000c4 	movi	r4,3
10000874:	00002c00 	call	100002c0 <IO_read>
10000878:	10bfffcc 	andi	r2,r2,65535
1000087c:	1080040c 	andi	r2,r2,16
10000880:	103ff826 	beq	r2,zero,10000864 <__alt_data_end+0xf8000864>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000884:	0006b440 	call	10006b44 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000888:	01000084 	movi	r4,2
1000088c:	01414184 	movi	r5,1286
10000890:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000894:	0009883a 	mov	r4,zero
10000898:	00002c00 	call	100002c0 <IO_read>
1000089c:	10bfffcc 	andi	r2,r2,65535
100008a0:	01040074 	movhi	r4,4097
100008a4:	211c4804 	addi	r4,r4,28960
100008a8:	100b883a 	mov	r5,r2
100008ac:	00090bc0 	call	100090bc <printf>

	IO_write(HPI_ADDR,0x0508);
100008b0:	01000084 	movi	r4,2
100008b4:	01414204 	movi	r5,1288
100008b8:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100008bc:	0009883a 	mov	r4,zero
100008c0:	00002c00 	call	100002c0 <IO_read>
100008c4:	e0b9130d 	sth	r2,-7092(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100008c8:	e0b9130b 	ldhu	r2,-7092(fp)
100008cc:	01040074 	movhi	r4,4097
100008d0:	211c5304 	addi	r4,r4,29004
100008d4:	100b883a 	mov	r5,r2
100008d8:	00090bc0 	call	100090bc <printf>
	while (usb_ctl_val != 0x03)
100008dc:	00000206 	br	100008e8 <main+0x5b4>
	{
		usb_ctl_val = UsbGetRetryCnt();
100008e0:	0006bc80 	call	10006bc8 <UsbGetRetryCnt>
100008e4:	e0b9130d 	sth	r2,-7092(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100008e8:	e0b9130b 	ldhu	r2,-7092(fp)
100008ec:	108000d8 	cmpnei	r2,r2,3
100008f0:	103ffb1e 	bne	r2,zero,100008e0 <__alt_data_end+0xf80008e0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
100008f4:	01040074 	movhi	r4,4097
100008f8:	211c7304 	addi	r4,r4,29132
100008fc:	00091b00 	call	100091b0 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
10000900:	00060dc0 	call	100060dc <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000904:	00000306 	br	10000914 <main+0x5e0>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
10000908:	00060dc0 	call	100060dc <UsbGetConfigDesc1>
		usleep(10*1000);
1000090c:	0109c404 	movi	r4,10000
10000910:	00150040 	call	10015004 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000914:	010000c4 	movi	r4,3
10000918:	00002c00 	call	100002c0 <IO_read>
1000091c:	10bfffcc 	andi	r2,r2,65535
10000920:	1080040c 	andi	r2,r2,16
10000924:	103ff826 	beq	r2,zero,10000908 <__alt_data_end+0xf8000908>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000928:	0006b440 	call	10006b44 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000092c:	01000084 	movi	r4,2
10000930:	01414184 	movi	r5,1286
10000934:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000938:	0009883a 	mov	r4,zero
1000093c:	00002c00 	call	100002c0 <IO_read>
10000940:	10bfffcc 	andi	r2,r2,65535
10000944:	01040074 	movhi	r4,4097
10000948:	211c8504 	addi	r4,r4,29204
1000094c:	100b883a 	mov	r5,r2
10000950:	00090bc0 	call	100090bc <printf>

	IO_write(HPI_ADDR,0x0508);
10000954:	01000084 	movi	r4,2
10000958:	01414204 	movi	r5,1288
1000095c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000960:	0009883a 	mov	r4,zero
10000964:	00002c00 	call	100002c0 <IO_read>
10000968:	e0b9130d 	sth	r2,-7092(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
1000096c:	e0b9130b 	ldhu	r2,-7092(fp)
10000970:	01040074 	movhi	r4,4097
10000974:	211c9004 	addi	r4,r4,29248
10000978:	100b883a 	mov	r5,r2
1000097c:	00090bc0 	call	100090bc <printf>
	while (usb_ctl_val != 0x03)
10000980:	00000206 	br	1000098c <main+0x658>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000984:	0006bc80 	call	10006bc8 <UsbGetRetryCnt>
10000988:	e0b9130d 	sth	r2,-7092(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
1000098c:	e0b9130b 	ldhu	r2,-7092(fp)
10000990:	108000d8 	cmpnei	r2,r2,3
10000994:	103ffb1e 	bne	r2,zero,10000984 <__alt_data_end+0xf8000984>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10000998:	01040074 	movhi	r4,4097
1000099c:	211c9c04 	addi	r4,r4,29296
100009a0:	00091b00 	call	100091b0 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
100009a4:	00062680 	call	10006268 <UsbGetConfigDesc2>

	usleep(100*1000);
100009a8:	010000b4 	movhi	r4,2
100009ac:	2121a804 	addi	r4,r4,-31072
100009b0:	00150040 	call	10015004 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009b4:	00000306 	br	100009c4 <main+0x690>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
100009b8:	00062680 	call	10006268 <UsbGetConfigDesc2>
		usleep(10*1000);
100009bc:	0109c404 	movi	r4,10000
100009c0:	00150040 	call	10015004 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009c4:	010000c4 	movi	r4,3
100009c8:	00002c00 	call	100002c0 <IO_read>
100009cc:	10bfffcc 	andi	r2,r2,65535
100009d0:	1080040c 	andi	r2,r2,16
100009d4:	103ff826 	beq	r2,zero,100009b8 <__alt_data_end+0xf80009b8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100009d8:	0006b440 	call	10006b44 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100009dc:	01000084 	movi	r4,2
100009e0:	01414184 	movi	r5,1286
100009e4:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
100009e8:	0009883a 	mov	r4,zero
100009ec:	00002c00 	call	100002c0 <IO_read>
100009f0:	10bfffcc 	andi	r2,r2,65535
100009f4:	01040074 	movhi	r4,4097
100009f8:	211caf04 	addi	r4,r4,29372
100009fc:	100b883a 	mov	r5,r2
10000a00:	00090bc0 	call	100090bc <printf>

	IO_write(HPI_ADDR,0x0508);
10000a04:	01000084 	movi	r4,2
10000a08:	01414204 	movi	r5,1288
10000a0c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000a10:	0009883a 	mov	r4,zero
10000a14:	00002c00 	call	100002c0 <IO_read>
10000a18:	e0b9130d 	sth	r2,-7092(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10000a1c:	e0b9130b 	ldhu	r2,-7092(fp)
10000a20:	01040074 	movhi	r4,4097
10000a24:	211cba04 	addi	r4,r4,29416
10000a28:	100b883a 	mov	r5,r2
10000a2c:	00090bc0 	call	100090bc <printf>
	while (usb_ctl_val != 0x03)
10000a30:	00000206 	br	10000a3c <main+0x708>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000a34:	0006bc80 	call	10006bc8 <UsbGetRetryCnt>
10000a38:	e0b9130d 	sth	r2,-7092(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000a3c:	e0b9130b 	ldhu	r2,-7092(fp)
10000a40:	108000d8 	cmpnei	r2,r2,3
10000a44:	103ffb1e 	bne	r2,zero,10000a34 <__alt_data_end+0xf8000a34>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000a48:	01040074 	movhi	r4,4097
10000a4c:	211cc604 	addi	r4,r4,29464
10000a50:	00091b00 	call	100091b0 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000a54:	01000084 	movi	r4,2
10000a58:	01415b04 	movi	r5,1388
10000a5c:	00002480 	call	10000248 <IO_write>
	code = IO_read(HPI_DATA);
10000a60:	0009883a 	mov	r4,zero
10000a64:	00002c00 	call	100002c0 <IO_read>
10000a68:	e0b94a8d 	sth	r2,-6870(fp)
	code = code & 0x003;
10000a6c:	e0b94a8b 	ldhu	r2,-6870(fp)
10000a70:	108000cc 	andi	r2,r2,3
10000a74:	e0b94a8d 	sth	r2,-6870(fp)
	printf("\ncode = %x\n", code);
10000a78:	e0b94a8b 	ldhu	r2,-6870(fp)
10000a7c:	01040074 	movhi	r4,4097
10000a80:	211cd904 	addi	r4,r4,29540
10000a84:	100b883a 	mov	r5,r2
10000a88:	00090bc0 	call	100090bc <printf>

	if (code == 0x01)
10000a8c:	e0b94a8b 	ldhu	r2,-6870(fp)
10000a90:	10800058 	cmpnei	r2,r2,1
10000a94:	1000041e 	bne	r2,zero,10000aa8 <main+0x774>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000a98:	01040074 	movhi	r4,4097
10000a9c:	211cdc04 	addi	r4,r4,29552
10000aa0:	00091b00 	call	100091b0 <puts>
10000aa4:	00000306 	br	10000ab4 <main+0x780>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000aa8:	01040074 	movhi	r4,4097
10000aac:	211ceb04 	addi	r4,r4,29612
10000ab0:	00091b00 	call	100091b0 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000ab4:	01000084 	movi	r4,2
10000ab8:	01415d84 	movi	r5,1398
10000abc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x073F);
10000ac0:	0009883a 	mov	r4,zero
10000ac4:	0141cfc4 	movi	r5,1855
10000ac8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x8105);
10000acc:	0009883a 	mov	r4,zero
10000ad0:	01604154 	movui	r5,33029
10000ad4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0003);
10000ad8:	0009883a 	mov	r4,zero
10000adc:	014000c4 	movi	r5,3
10000ae0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);
10000ae4:	0009883a 	mov	r4,zero
10000ae8:	01400204 	movi	r5,8
10000aec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10000af0:	0009883a 	mov	r4,zero
10000af4:	016b0294 	movui	r5,44042
10000af8:	00002480 	call	10000248 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000afc:	01006c04 	movi	r4,432
10000b00:	01415d84 	movi	r5,1398
10000b04:	0005b800 	call	10005b80 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000b08:	01000084 	movi	r4,2
10000b0c:	01415f04 	movi	r5,1404
10000b10:	00002480 	call	10000248 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000b14:	0009883a 	mov	r4,zero
10000b18:	00002c00 	call	100002c0 <IO_read>
10000b1c:	e0b94b05 	stb	r2,-6868(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000b20:	e0b94b03 	ldbu	r2,-6868(fp)
10000b24:	01040074 	movhi	r4,4097
10000b28:	211cf404 	addi	r4,r4,29648
10000b2c:	100b883a 	mov	r5,r2
10000b30:	00090bc0 	call	100090bc <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000b34:	00064cc0 	call	100064cc <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b38:	00000306 	br	10000b48 <main+0x814>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000b3c:	00064cc0 	call	100064cc <UsbSetConfig>
		usleep(10*1000);
10000b40:	0109c404 	movi	r4,10000
10000b44:	00150040 	call	10015004 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b48:	010000c4 	movi	r4,3
10000b4c:	00002c00 	call	100002c0 <IO_read>
10000b50:	10bfffcc 	andi	r2,r2,65535
10000b54:	1080040c 	andi	r2,r2,16
10000b58:	103ff826 	beq	r2,zero,10000b3c <__alt_data_end+0xf8000b3c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000b5c:	0006b440 	call	10006b44 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000b60:	01000084 	movi	r4,2
10000b64:	01414184 	movi	r5,1286
10000b68:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000b6c:	0009883a 	mov	r4,zero
10000b70:	00002c00 	call	100002c0 <IO_read>
10000b74:	10bfffcc 	andi	r2,r2,65535
10000b78:	01040074 	movhi	r4,4097
10000b7c:	211cfe04 	addi	r4,r4,29688
10000b80:	100b883a 	mov	r5,r2
10000b84:	00090bc0 	call	100090bc <printf>

	IO_write(HPI_ADDR,0x0508);
10000b88:	01000084 	movi	r4,2
10000b8c:	01414204 	movi	r5,1288
10000b90:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000b94:	0009883a 	mov	r4,zero
10000b98:	00002c00 	call	100002c0 <IO_read>
10000b9c:	e0b9130d 	sth	r2,-7092(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000ba0:	e0b9130b 	ldhu	r2,-7092(fp)
10000ba4:	01040074 	movhi	r4,4097
10000ba8:	211d0904 	addi	r4,r4,29732
10000bac:	100b883a 	mov	r5,r2
10000bb0:	00090bc0 	call	100090bc <printf>
	while (usb_ctl_val != 0x03)
10000bb4:	00000206 	br	10000bc0 <main+0x88c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000bb8:	0006bc80 	call	10006bc8 <UsbGetRetryCnt>
10000bbc:	e0b9130d 	sth	r2,-7092(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000bc0:	e0b9130b 	ldhu	r2,-7092(fp)
10000bc4:	108000d8 	cmpnei	r2,r2,3
10000bc8:	103ffb1e 	bne	r2,zero,10000bb8 <__alt_data_end+0xf8000bb8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000bcc:	01040074 	movhi	r4,4097
10000bd0:	211d1504 	addi	r4,r4,29780
10000bd4:	00091b00 	call	100091b0 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000bd8:	00065c80 	call	100065c8 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bdc:	00000306 	br	10000bec <main+0x8b8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000be0:	00065c80 	call	100065c8 <UsbClassRequest>
		usleep(10*1000);
10000be4:	0109c404 	movi	r4,10000
10000be8:	00150040 	call	10015004 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bec:	010000c4 	movi	r4,3
10000bf0:	00002c00 	call	100002c0 <IO_read>
10000bf4:	10bfffcc 	andi	r2,r2,65535
10000bf8:	1080040c 	andi	r2,r2,16
10000bfc:	103ff826 	beq	r2,zero,10000be0 <__alt_data_end+0xf8000be0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000c00:	0006b440 	call	10006b44 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000c04:	01000084 	movi	r4,2
10000c08:	01414184 	movi	r5,1286
10000c0c:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000c10:	0009883a 	mov	r4,zero
10000c14:	00002c00 	call	100002c0 <IO_read>
10000c18:	10bfffcc 	andi	r2,r2,65535
10000c1c:	01040074 	movhi	r4,4097
10000c20:	211d2704 	addi	r4,r4,29852
10000c24:	100b883a 	mov	r5,r2
10000c28:	00090bc0 	call	100090bc <printf>

	IO_write(HPI_ADDR,0x0508);
10000c2c:	01000084 	movi	r4,2
10000c30:	01414204 	movi	r5,1288
10000c34:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000c38:	0009883a 	mov	r4,zero
10000c3c:	00002c00 	call	100002c0 <IO_read>
10000c40:	e0b9130d 	sth	r2,-7092(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000c44:	e0b9130b 	ldhu	r2,-7092(fp)
10000c48:	01040074 	movhi	r4,4097
10000c4c:	211d3204 	addi	r4,r4,29896
10000c50:	100b883a 	mov	r5,r2
10000c54:	00090bc0 	call	100090bc <printf>
	while (usb_ctl_val != 0x03)
10000c58:	00000206 	br	10000c64 <main+0x930>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000c5c:	0006bc80 	call	10006bc8 <UsbGetRetryCnt>
10000c60:	e0b9130d 	sth	r2,-7092(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000c64:	e0b9130b 	ldhu	r2,-7092(fp)
10000c68:	108000d8 	cmpnei	r2,r2,3
10000c6c:	103ffb1e 	bne	r2,zero,10000c5c <__alt_data_end+0xf8000c5c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000c70:	01040074 	movhi	r4,4097
10000c74:	211d3e04 	addi	r4,r4,29944
10000c78:	00091b00 	call	100091b0 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10000c7c:	00066c40 	call	100066c4 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c80:	00000306 	br	10000c90 <main+0x95c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10000c84:	00066c40 	call	100066c4 <UsbGetHidDesc>
		usleep(10*1000);
10000c88:	0109c404 	movi	r4,10000
10000c8c:	00150040 	call	10015004 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c90:	010000c4 	movi	r4,3
10000c94:	00002c00 	call	100002c0 <IO_read>
10000c98:	10bfffcc 	andi	r2,r2,65535
10000c9c:	1080040c 	andi	r2,r2,16
10000ca0:	103ff826 	beq	r2,zero,10000c84 <__alt_data_end+0xf8000c84>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000ca4:	0006b440 	call	10006b44 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000ca8:	01000084 	movi	r4,2
10000cac:	01414184 	movi	r5,1286
10000cb0:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000cb4:	0009883a 	mov	r4,zero
10000cb8:	00002c00 	call	100002c0 <IO_read>
10000cbc:	10bfffcc 	andi	r2,r2,65535
10000cc0:	01040074 	movhi	r4,4097
10000cc4:	211d2704 	addi	r4,r4,29852
10000cc8:	100b883a 	mov	r5,r2
10000ccc:	00090bc0 	call	100090bc <printf>

	IO_write(HPI_ADDR,0x0508);
10000cd0:	01000084 	movi	r4,2
10000cd4:	01414204 	movi	r5,1288
10000cd8:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000cdc:	0009883a 	mov	r4,zero
10000ce0:	00002c00 	call	100002c0 <IO_read>
10000ce4:	e0b9130d 	sth	r2,-7092(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000ce8:	e0b9130b 	ldhu	r2,-7092(fp)
10000cec:	01040074 	movhi	r4,4097
10000cf0:	211d3204 	addi	r4,r4,29896
10000cf4:	100b883a 	mov	r5,r2
10000cf8:	00090bc0 	call	100090bc <printf>
	while (usb_ctl_val != 0x03)
10000cfc:	00000206 	br	10000d08 <main+0x9d4>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d00:	0006bc80 	call	10006bc8 <UsbGetRetryCnt>
10000d04:	e0b9130d 	sth	r2,-7092(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000d08:	e0b9130b 	ldhu	r2,-7092(fp)
10000d0c:	108000d8 	cmpnei	r2,r2,3
10000d10:	103ffb1e 	bne	r2,zero,10000d00 <__alt_data_end+0xf8000d00>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10000d14:	01040074 	movhi	r4,4097
10000d18:	211d5004 	addi	r4,r4,30016
10000d1c:	00091b00 	call	100091b0 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10000d20:	00068080 	call	10006808 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d24:	00000306 	br	10000d34 <main+0xa00>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10000d28:	00068080 	call	10006808 <UsbGetReportDesc>
		usleep(10*1000);
10000d2c:	0109c404 	movi	r4,10000
10000d30:	00150040 	call	10015004 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d34:	010000c4 	movi	r4,3
10000d38:	00002c00 	call	100002c0 <IO_read>
10000d3c:	10bfffcc 	andi	r2,r2,65535
10000d40:	1080040c 	andi	r2,r2,16
10000d44:	103ff826 	beq	r2,zero,10000d28 <__alt_data_end+0xf8000d28>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000d48:	0006b440 	call	10006b44 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000d4c:	01000084 	movi	r4,2
10000d50:	01414184 	movi	r5,1286
10000d54:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d58:	0009883a 	mov	r4,zero
10000d5c:	00002c00 	call	100002c0 <IO_read>
10000d60:	10bfffcc 	andi	r2,r2,65535
10000d64:	01040074 	movhi	r4,4097
10000d68:	211d6404 	addi	r4,r4,30096
10000d6c:	100b883a 	mov	r5,r2
10000d70:	00090bc0 	call	100090bc <printf>

	IO_write(HPI_ADDR,0x0508);
10000d74:	01000084 	movi	r4,2
10000d78:	01414204 	movi	r5,1288
10000d7c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000d80:	0009883a 	mov	r4,zero
10000d84:	00002c00 	call	100002c0 <IO_read>
10000d88:	e0b9130d 	sth	r2,-7092(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10000d8c:	e0b9130b 	ldhu	r2,-7092(fp)
10000d90:	01040074 	movhi	r4,4097
10000d94:	211d7004 	addi	r4,r4,30144
10000d98:	100b883a 	mov	r5,r2
10000d9c:	00090bc0 	call	100090bc <printf>
	while (usb_ctl_val != 0x03)
10000da0:	00000206 	br	10000dac <main+0xa78>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000da4:	0006bc80 	call	10006bc8 <UsbGetRetryCnt>
10000da8:	e0b9130d 	sth	r2,-7092(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000dac:	e0b9130b 	ldhu	r2,-7092(fp)
10000db0:	108000d8 	cmpnei	r2,r2,3
10000db4:	103ffb1e 	bne	r2,zero,10000da4 <__alt_data_end+0xf8000da4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10000db8:	01040074 	movhi	r4,4097
10000dbc:	211d7c04 	addi	r4,r4,30192
10000dc0:	00091b00 	call	100091b0 <puts>
	 *
	 *
	 *
	 *
	 */
	int scene[5][16][21] = 	{
10000dc4:	00840074 	movhi	r2,4097
10000dc8:	109db204 	addi	r2,r2,30408
10000dcc:	e0f96d04 	addi	r3,fp,-6732
10000dd0:	100b883a 	mov	r5,r2
10000dd4:	00869004 	movi	r2,6720
10000dd8:	1809883a 	mov	r4,r3
10000ddc:	100d883a 	mov	r6,r2
10000de0:	0008f580 	call	10008f58 <memcpy>
							{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
							{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}
							}
							};

	usleep(10000);
10000de4:	0109c404 	movi	r4,10000
10000de8:	00150040 	call	10015004 <usleep>
	*HEALTH = 3;
10000dec:	00806804 	movi	r2,416
10000df0:	00c000c4 	movi	r3,3
10000df4:	10c00015 	stw	r3,0(r2)
	*SAMUS_EN = 1;
10000df8:	0080e804 	movi	r2,928
10000dfc:	00c00044 	movi	r3,1
10000e00:	10c00005 	stb	r3,0(r2)
	*SAMUS_X = 150;
10000e04:	0080e404 	movi	r2,912
10000e08:	00c02584 	movi	r3,150
10000e0c:	10c00015 	stw	r3,0(r2)
	*SAMUS_Y = 400;
10000e10:	0080e004 	movi	r2,896
10000e14:	00c06404 	movi	r3,400
10000e18:	10c00015 	stw	r3,0(r2)
    *SCENE_SELECT = 3;
10000e1c:	00805404 	movi	r2,336
10000e20:	00c000c4 	movi	r3,3
10000e24:	10c00015 	stw	r3,0(r2)
	*LOSS_EN = False;
10000e28:	00806004 	movi	r2,384
10000e2c:	10000015 	stw	zero,0(r2)
	*TIT_EN = False;
10000e30:	00806404 	movi	r2,400
10000e34:	10000015 	stw	zero,0(r2)
	int SAMUS_BOT = 70;
10000e38:	00801184 	movi	r2,70
10000e3c:	e0b94c15 	stw	r2,-6864(fp)
	int SAMUS_RIGHT = 35;
10000e40:	008008c4 	movi	r2,35
10000e44:	e0b94d15 	stw	r2,-6860(fp)
	int samus_inv_counter = 0;
10000e48:	e0391415 	stw	zero,-7088(fp)
	int samus_inv_counter_start = False;
10000e4c:	e0391515 	stw	zero,-7084(fp)
	float y_inc = 0;
10000e50:	e0391615 	stw	zero,-7080(fp)
	float gravity = .8;
10000e54:	008fd374 	movhi	r2,16205
10000e58:	10b33344 	addi	r2,r2,-13107
10000e5c:	e0b94e15 	stw	r2,-6856(fp)
	float jump_height = 0;
10000e60:	e0391715 	stw	zero,-7076(fp)
	float max_jump_height = 100;
10000e64:	0090b234 	movhi	r2,17096
10000e68:	e0b94f15 	stw	r2,-6852(fp)
	int grounded = False;
10000e6c:	e0391815 	stw	zero,-7072(fp)
	int let_go = False;
10000e70:	e0391915 	stw	zero,-7068(fp)
	int has_control = True;
10000e74:	00800044 	movi	r2,1
10000e78:	e0b91a15 	stw	r2,-7064(fp)
	int y_set = False;
10000e7c:	e0391b15 	stw	zero,-7060(fp)
	int button_let_go = True;
10000e80:	00800044 	movi	r2,1
10000e84:	e0b91c15 	stw	r2,-7056(fp)
	int bulinc = 12;
10000e88:	00800304 	movi	r2,12
10000e8c:	e0b95015 	stw	r2,-6848(fp)
	int bul1Left = 0;
10000e90:	e0391d15 	stw	zero,-7052(fp)
	int bul1Up = 0;
10000e94:	e0391e15 	stw	zero,-7048(fp)
	int bul1start = 0;
10000e98:	e0391f15 	stw	zero,-7044(fp)
	int bul2Left = 0;
10000e9c:	e0392015 	stw	zero,-7040(fp)
	int bul2Up = 0;
10000ea0:	e0392115 	stw	zero,-7036(fp)
	int bul2start = 0;
10000ea4:	e0392215 	stw	zero,-7032(fp)
	int bul3Left = 0;
10000ea8:	e0392315 	stw	zero,-7028(fp)
	int bul3Up = 0;
10000eac:	e0392415 	stw	zero,-7024(fp)
	int bul3start = 0;
10000eb0:	e0392515 	stw	zero,-7020(fp)
	int bullet_en = True;
10000eb4:	00800044 	movi	r2,1
10000eb8:	e0b92615 	stw	r2,-7016(fp)
	int sceneNum = 4;
10000ebc:	00800104 	movi	r2,4
10000ec0:	e0b95115 	stw	r2,-6844(fp)
	int sceneStart = True;
10000ec4:	00800044 	movi	r2,1
10000ec8:	e0b92715 	stw	r2,-7012(fp)
	int scenVictory = False;
10000ecc:	e0395215 	stw	zero,-6840(fp)
	int finalVictory = False;
10000ed0:	e0395315 	stw	zero,-6836(fp)
	int scene0_x = 0;
10000ed4:	e0395415 	stw	zero,-6832(fp)
	int scene0_y = 0;
10000ed8:	e0395515 	stw	zero,-6828(fp)
	int scene0_dir = 0;
10000edc:	e0395615 	stw	zero,-6824(fp)
	int scene1_dir = 0;
10000ee0:	e0395715 	stw	zero,-6820(fp)
	int scene2_dir = 0;
10000ee4:	e0395815 	stw	zero,-6816(fp)
	int scene3_dir = 0;
10000ee8:	e0395915 	stw	zero,-6812(fp)
	int scene4_dir = 0;
10000eec:	e0395a15 	stw	zero,-6808(fp)
	int scene1_x = 0;
10000ef0:	e0395b15 	stw	zero,-6804(fp)
	int scene1_y = 0;
10000ef4:	e0395c15 	stw	zero,-6800(fp)
	int scene2_x = 0;
10000ef8:	e0395d15 	stw	zero,-6796(fp)
	int scene2_y = 0;
10000efc:	e0395e15 	stw	zero,-6792(fp)
	int scene3_x = 10;
10000f00:	00800284 	movi	r2,10
10000f04:	e0b95f15 	stw	r2,-6788(fp)
	int scene3_y = 110;
10000f08:	00801b84 	movi	r2,110
10000f0c:	e0b96015 	stw	r2,-6784(fp)
	int scene4_x = 40;
10000f10:	00800a04 	movi	r2,40
10000f14:	e0b96115 	stw	r2,-6780(fp)
	int scene4_y = 300;
10000f18:	00804b04 	movi	r2,300
10000f1c:	e0b96215 	stw	r2,-6776(fp)
	int monster1_1_x_scene3 = 420;
10000f20:	00806904 	movi	r2,420
10000f24:	e0b96315 	stw	r2,-6772(fp)
	int monster1_1_y_scene3 = 185;
10000f28:	00802e44 	movi	r2,185
10000f2c:	e0b96415 	stw	r2,-6768(fp)
	int monster1_1_x = 420;
10000f30:	00806904 	movi	r2,420
10000f34:	e0b92815 	stw	r2,-7008(fp)
	int monster1_1_y = 185;
10000f38:	00802e44 	movi	r2,185
10000f3c:	e0b92915 	stw	r2,-7004(fp)
	int monster1_1_left = True;
10000f40:	00800044 	movi	r2,1
10000f44:	e0b92a15 	stw	r2,-7000(fp)
	int monster1_1_health = 3;
10000f48:	008000c4 	movi	r2,3
10000f4c:	e0b92b15 	stw	r2,-6996(fp)
	int monster2_1_x_scene3 = 420;
10000f50:	00806904 	movi	r2,420
10000f54:	e0b96515 	stw	r2,-6764(fp)
	int monster2_1_y_scene3 = 30;
10000f58:	00800784 	movi	r2,30
10000f5c:	e0b96615 	stw	r2,-6760(fp)
	int monster2_1_x = 220;
10000f60:	00803704 	movi	r2,220
10000f64:	e0b92c15 	stw	r2,-6992(fp)
	int monster2_1_y = 55;
10000f68:	00800dc4 	movi	r2,55
10000f6c:	e0b92d15 	stw	r2,-6988(fp)
	int monster2_1_left = True;
10000f70:	00800044 	movi	r2,1
10000f74:	e0b92e15 	stw	r2,-6984(fp)
	int monster2_jump_counter = 0;
10000f78:	e0392f15 	stw	zero,-6980(fp)
	int monster2_grounded = True;
10000f7c:	00800044 	movi	r2,1
10000f80:	e0b96715 	stw	r2,-6756(fp)
	int mon2_at_top = True;
10000f84:	00800044 	movi	r2,1
10000f88:	e0b93015 	stw	r2,-6976(fp)
	int mon2_hit_bot = False;
10000f8c:	e0393115 	stw	zero,-6972(fp)
	float mon_2_y_inc = 0;
10000f90:	e0393215 	stw	zero,-6968(fp)
	int monster2_1_health = 3;
10000f94:	008000c4 	movi	r2,3
10000f98:	e0b93315 	stw	r2,-6964(fp)
	int monster3_1_x_scene3 = 180;
10000f9c:	00802d04 	movi	r2,180
10000fa0:	e0b96815 	stw	r2,-6752(fp)
	int monster3_1_y_scene3 = 215;
10000fa4:	008035c4 	movi	r2,215
10000fa8:	e0b96915 	stw	r2,-6748(fp)
	int monster3_1_x = 220;
10000fac:	00803704 	movi	r2,220
10000fb0:	e0b93415 	stw	r2,-6960(fp)
	int monster3_1_y = 55;
10000fb4:	00800dc4 	movi	r2,55
10000fb8:	e0b93515 	stw	r2,-6956(fp)
	int monster3_1_left = False;
10000fbc:	e0393615 	stw	zero,-6952(fp)
	int kraid_health = 0;
10000fc0:	e0393715 	stw	zero,-6948(fp)
	int kraid_move_counter = 0;
10000fc4:	e0393815 	stw	zero,-6944(fp)
	int kraid_move_left = True;
10000fc8:	00800044 	movi	r2,1
10000fcc:	e0b93915 	stw	r2,-6940(fp)
	int kraid_blink = False;
10000fd0:	e0393a15 	stw	zero,-6936(fp)
	int kraid_counter_max = 10;
10000fd4:	00800284 	movi	r2,10
10000fd8:	e0b96a15 	stw	r2,-6744(fp)
	int kraid_kill_counter = 120;
10000fdc:	00801e04 	movi	r2,120
10000fe0:	e0b96b15 	stw	r2,-6740(fp)
	int kraid_counter = 0;
10000fe4:	e0393b15 	stw	zero,-6932(fp)
	int nail_one_inc = 0;
10000fe8:	e0393c15 	stw	zero,-6928(fp)
	int nail_two_inc = 0;
10000fec:	e0393d15 	stw	zero,-6924(fp)
	int nail_counter = 100;
10000ff0:	00801904 	movi	r2,100
10000ff4:	e0b96c15 	stw	r2,-6736(fp)
	int bullet_counter = 100;
10000ff8:	00801904 	movi	r2,100
10000ffc:	e0b93e15 	stw	r2,-6920(fp)
	int attack_counter_nail = 0;
10001000:	e0393f15 	stw	zero,-6916(fp)
	int attack_counter_bullet = 0;
10001004:	e0394015 	stw	zero,-6912(fp)
	int kraid_bul_start = 0;
10001008:	e0394115 	stw	zero,-6908(fp)
	int throw_dir_1 = 1;
1000100c:	00800044 	movi	r2,1
10001010:	e0b94215 	stw	r2,-6904(fp)
	int throw_dir_2 = 1;
10001014:	00800044 	movi	r2,1
10001018:	e0b94315 	stw	r2,-6900(fp)
	int attack_counter_nail_2 = 0;
1000101c:	e0394415 	stw	zero,-6896(fp)


	int god_mode = False;
10001020:	e0394515 	stw	zero,-6892(fp)
	int m_let_go = True;
10001024:	00800044 	movi	r2,1
10001028:	e0b94615 	stw	r2,-6888(fp)
	int game_win = False;
1000102c:	e0394715 	stw	zero,-6884(fp)

	while(1)
	{
		toggle++;
10001030:	e0b91383 	ldbu	r2,-7090(fp)
10001034:	10800044 	addi	r2,r2,1
10001038:	e0b91385 	stb	r2,-7090(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
1000103c:	01000084 	movi	r4,2
10001040:	01414004 	movi	r5,1280
10001044:	00002480 	call	10000248 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10001048:	0009883a 	mov	r4,zero
1000104c:	01414704 	movi	r5,1308
10001050:	00002480 	call	10000248 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10001054:	e0b94b03 	ldbu	r2,-6868(fp)
10001058:	108003cc 	andi	r2,r2,15
1000105c:	0009883a 	mov	r4,zero
10001060:	100b883a 	mov	r5,r2
10001064:	00002480 	call	10000248 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10001068:	0009883a 	mov	r4,zero
1000106c:	0140a444 	movi	r5,657
10001070:	00002480 	call	10000248 <IO_write>
		if(toggle%2)
10001074:	e0b91383 	ldbu	r2,-7090(fp)
10001078:	1080004c 	andi	r2,r2,1
1000107c:	10803fcc 	andi	r2,r2,255
10001080:	10000426 	beq	r2,zero,10001094 <main+0xd60>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10001084:	0009883a 	mov	r4,zero
10001088:	01400044 	movi	r5,1
1000108c:	00002480 	call	10000248 <IO_write>
10001090:	00000306 	br	100010a0 <main+0xd6c>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10001094:	0009883a 	mov	r4,zero
10001098:	01401044 	movi	r5,65
1000109c:	00002480 	call	10000248 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
100010a0:	0009883a 	mov	r4,zero
100010a4:	014004c4 	movi	r5,19
100010a8:	00002480 	call	10000248 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
100010ac:	0009883a 	mov	r4,zero
100010b0:	000b883a 	mov	r5,zero
100010b4:	00002480 	call	10000248 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100010b8:	01006c04 	movi	r4,432
100010bc:	01414004 	movi	r5,1280
100010c0:	0005b800 	call	10005b80 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100010c4:	00002406 	br	10001158 <main+0xe24>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
100010c8:	01000084 	movi	r4,2
100010cc:	01414004 	movi	r5,1280
100010d0:	00002480 	call	10000248 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
100010d4:	0009883a 	mov	r4,zero
100010d8:	01414704 	movi	r5,1308
100010dc:	00002480 	call	10000248 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
100010e0:	e0b94b03 	ldbu	r2,-6868(fp)
100010e4:	108003cc 	andi	r2,r2,15
100010e8:	0009883a 	mov	r4,zero
100010ec:	100b883a 	mov	r5,r2
100010f0:	00002480 	call	10000248 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
100010f4:	0009883a 	mov	r4,zero
100010f8:	0140a444 	movi	r5,657
100010fc:	00002480 	call	10000248 <IO_write>
			if(toggle%2)
10001100:	e0b91383 	ldbu	r2,-7090(fp)
10001104:	1080004c 	andi	r2,r2,1
10001108:	10803fcc 	andi	r2,r2,255
1000110c:	10000426 	beq	r2,zero,10001120 <main+0xdec>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10001110:	0009883a 	mov	r4,zero
10001114:	01400044 	movi	r5,1
10001118:	00002480 	call	10000248 <IO_write>
1000111c:	00000306 	br	1000112c <main+0xdf8>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10001120:	0009883a 	mov	r4,zero
10001124:	01401044 	movi	r5,65
10001128:	00002480 	call	10000248 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
1000112c:	0009883a 	mov	r4,zero
10001130:	014004c4 	movi	r5,19
10001134:	00002480 	call	10000248 <IO_write>
			IO_write(HPI_DATA,0x0000);//
10001138:	0009883a 	mov	r4,zero
1000113c:	000b883a 	mov	r5,zero
10001140:	00002480 	call	10000248 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001144:	01006c04 	movi	r4,432
10001148:	01414004 	movi	r5,1280
1000114c:	0005b800 	call	10005b80 <UsbWrite>
			usleep(10*1000);
10001150:	0109c404 	movi	r4,10000
10001154:	00150040 	call	10015004 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10001158:	010000c4 	movi	r4,3
1000115c:	00002c00 	call	100002c0 <IO_read>
10001160:	10bfffcc 	andi	r2,r2,65535
10001164:	1080040c 	andi	r2,r2,16
10001168:	103fd726 	beq	r2,zero,100010c8 <__alt_data_end+0xf80010c8>
			usleep(10*1000);
		}//end while



		usb_ctl_val = UsbWaitTDListDone();
1000116c:	0006b440 	call	10006b44 <UsbWaitTDListDone>
10001170:	e0b9130d 	sth	r2,-7092(fp)

		// packet starts from 0x051c, reading third byte
		// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
		IO_write(HPI_ADDR,0x051e); //the start address
10001174:	01000084 	movi	r4,2
10001178:	01414784 	movi	r5,1310
1000117c:	00002480 	call	10000248 <IO_write>
		keycode = IO_read(HPI_DATA);
10001180:	0009883a 	mov	r4,zero
10001184:	00002c00 	call	100002c0 <IO_read>
10001188:	10bfffcc 	andi	r2,r2,65535
1000118c:	e0b94915 	stw	r2,-6876(fp)
		printf("\nkeycode value is %x\n",keycode);
10001190:	01040074 	movhi	r4,4097
10001194:	211d9004 	addi	r4,r4,30272
10001198:	e1794917 	ldw	r5,-6876(fp)
1000119c:	00090bc0 	call	100090bc <printf>
		IOWR(KEYCODE_BASE, 0, keycode & 0xff);
100011a0:	e0b94917 	ldw	r2,-6876(fp)
100011a4:	10c03fcc 	andi	r3,r2,255
100011a8:	0080f004 	movi	r2,960
100011ac:	10c00035 	stwio	r3,0(r2)


		usleep(200);//usleep(5000);
100011b0:	01003204 	movi	r4,200
100011b4:	00150040 	call	10015004 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
100011b8:	d0a6cb0b 	ldhu	r2,-25812(gp)
100011bc:	10bfffcc 	andi	r2,r2,65535
100011c0:	1009883a 	mov	r4,r2
100011c4:	0005bd40 	call	10005bd4 <UsbRead>
100011c8:	e0b9130d 	sth	r2,-7092(fp)

		if(!(usb_ctl_val & no_device))
100011cc:	d0a6cb8b 	ldhu	r2,-25810(gp)
100011d0:	e0f9130b 	ldhu	r3,-7092(fp)
100011d4:	1884703a 	and	r2,r3,r2
100011d8:	10bfffcc 	andi	r2,r2,65535
100011dc:	1000201e 	bne	r2,zero,10001260 <main+0xf2c>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
100011e0:	e03913c5 	stb	zero,-7089(fp)
100011e4:	00001006 	br	10001228 <main+0xef4>
			{
				usleep(5*1000);
100011e8:	0104e204 	movi	r4,5000
100011ec:	00150040 	call	10015004 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
100011f0:	d0a6cb0b 	ldhu	r2,-25812(gp)
100011f4:	10bfffcc 	andi	r2,r2,65535
100011f8:	1009883a 	mov	r4,r2
100011fc:	0005bd40 	call	10005bd4 <UsbRead>
10001200:	e0b9130d 	sth	r2,-7092(fp)
				if(usb_ctl_val & no_device) break;
10001204:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001208:	e0f9130b 	ldhu	r3,-7092(fp)
1000120c:	1884703a 	and	r2,r3,r2
10001210:	10bfffcc 	andi	r2,r2,65535
10001214:	10000126 	beq	r2,zero,1000121c <main+0xee8>
10001218:	00000606 	br	10001234 <main+0xf00>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
1000121c:	e0b913c3 	ldbu	r2,-7089(fp)
10001220:	10800044 	addi	r2,r2,1
10001224:	e0b913c5 	stb	r2,-7089(fp)
10001228:	e0b913c3 	ldbu	r2,-7089(fp)
1000122c:	108001f0 	cmpltui	r2,r2,7
10001230:	103fed1e 	bne	r2,zero,100011e8 <__alt_data_end+0xf80011e8>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
			}
			if(!(usb_ctl_val & no_device))
10001234:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001238:	e0f9130b 	ldhu	r3,-7092(fp)
1000123c:	1884703a 	and	r2,r3,r2
10001240:	10bfffcc 	andi	r2,r2,65535
10001244:	1000061e 	bne	r2,zero,10001260 <main+0xf2c>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
10001248:	01040074 	movhi	r4,4097
1000124c:	211d9604 	addi	r4,r4,30296
10001250:	00091b00 	call	100091b0 <puts>
				printf("[INFO]: please insert again!!! \n");
10001254:	01040074 	movhi	r4,4097
10001258:	211da104 	addi	r4,r4,30340
1000125c:	00091b00 	call	100091b0 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
10001260:	00001d06 	br	100012d8 <main+0xfa4>
		{

			usb_ctl_val = UsbRead(ctl_reg);
10001264:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001268:	10bfffcc 	andi	r2,r2,65535
1000126c:	1009883a 	mov	r4,r2
10001270:	0005bd40 	call	10005bd4 <UsbRead>
10001274:	e0b9130d 	sth	r2,-7092(fp)
			usleep(5*1000);
10001278:	0104e204 	movi	r4,5000
1000127c:	00150040 	call	10015004 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001280:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001284:	10bfffcc 	andi	r2,r2,65535
10001288:	1009883a 	mov	r4,r2
1000128c:	0005bd40 	call	10005bd4 <UsbRead>
10001290:	e0b9130d 	sth	r2,-7092(fp)
			usleep(5*1000);
10001294:	0104e204 	movi	r4,5000
10001298:	00150040 	call	10015004 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
1000129c:	d0a6cb0b 	ldhu	r2,-25812(gp)
100012a0:	10bfffcc 	andi	r2,r2,65535
100012a4:	1009883a 	mov	r4,r2
100012a8:	0005bd40 	call	10005bd4 <UsbRead>
100012ac:	e0b9130d 	sth	r2,-7092(fp)
			usleep(5*1000);
100012b0:	0104e204 	movi	r4,5000
100012b4:	00150040 	call	10015004 <usleep>

			if(usb_ctl_val & no_device)
100012b8:	d0a6cb8b 	ldhu	r2,-25810(gp)
100012bc:	e0f9130b 	ldhu	r3,-7092(fp)
100012c0:	1884703a 	and	r2,r3,r2
100012c4:	10bfffcc 	andi	r2,r2,65535
100012c8:	10000126 	beq	r2,zero,100012d0 <main+0xf9c>
				goto USB_HOT_PLUG;
100012cc:	003c2706 	br	1000036c <__alt_data_end+0xf800036c>

			usleep(200);
100012d0:	01003204 	movi	r4,200
100012d4:	00150040 	call	10015004 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
100012d8:	d0a6cb8b 	ldhu	r2,-25810(gp)
100012dc:	e0f9130b 	ldhu	r3,-7092(fp)
100012e0:	1884703a 	and	r2,r3,r2
100012e4:	10bfffcc 	andi	r2,r2,65535
100012e8:	103fde26 	beq	r2,zero,10001264 <__alt_data_end+0xf8001264>
			usleep(200);
		}


    // GAME START
	if(*HEALTH == 0){
100012ec:	00806804 	movi	r2,416
100012f0:	10800017 	ldw	r2,0(r2)
100012f4:	10000f1e 	bne	r2,zero,10001334 <main+0x1000>
		if (keycode == 0x15){
100012f8:	e0b94917 	ldw	r2,-6876(fp)
100012fc:	10800558 	cmpnei	r2,r2,21
10001300:	1000081e 	bne	r2,zero,10001324 <main+0xff0>
			sceneStart = True;
10001304:	00800044 	movi	r2,1
10001308:	e0b92715 	stw	r2,-7012(fp)
			*HEALTH = 3;
1000130c:	00806804 	movi	r2,416
10001310:	00c000c4 	movi	r3,3
10001314:	10c00015 	stw	r3,0(r2)
			*LOSS_EN = False;
10001318:	00806004 	movi	r2,384
1000131c:	10000015 	stw	zero,0(r2)
		}
		else{
			*LOSS_EN = True;
		}
		continue;
10001320:	00121606 	br	10005b7c <main+0x5848>
			sceneStart = True;
			*HEALTH = 3;
			*LOSS_EN = False;
		}
		else{
			*LOSS_EN = True;
10001324:	00806004 	movi	r2,384
10001328:	00c00044 	movi	r3,1
1000132c:	10c00015 	stw	r3,0(r2)
		}
		continue;
10001330:	00121206 	br	10005b7c <main+0x5848>
	}
	if(keycode==0x17){
10001334:	e0b94917 	ldw	r2,-6876(fp)
10001338:	108005d8 	cmpnei	r2,r2,23
1000133c:	1000041e 	bne	r2,zero,10001350 <main+0x101c>
		*TIT_EN = True;
10001340:	00806404 	movi	r2,400
10001344:	00c00044 	movi	r3,1
10001348:	10c00015 	stw	r3,0(r2)
		continue;
1000134c:	00120b06 	br	10005b7c <main+0x5848>
	}
	else{
		*TIT_EN = False;
10001350:	00806404 	movi	r2,400
10001354:	10000015 	stw	zero,0(r2)
	}
	if(game_win == True){
10001358:	e0b94717 	ldw	r2,-6884(fp)
1000135c:	10800058 	cmpnei	r2,r2,1
10001360:	1000041e 	bne	r2,zero,10001374 <main+0x1040>
		*WIN_EN = True;
10001364:	00805c04 	movi	r2,368
10001368:	00c00044 	movi	r3,1
1000136c:	10c00015 	stw	r3,0(r2)
10001370:	00000206 	br	1000137c <main+0x1048>
	}
	else{
		*WIN_EN = False;
10001374:	00805c04 	movi	r2,368
10001378:	10000015 	stw	zero,0(r2)
	}

	if(keycode == 0x10 && m_let_go == True){
1000137c:	e0b94917 	ldw	r2,-6876(fp)
10001380:	10800418 	cmpnei	r2,r2,16
10001384:	10000b1e 	bne	r2,zero,100013b4 <main+0x1080>
10001388:	e0b94617 	ldw	r2,-6888(fp)
1000138c:	10800058 	cmpnei	r2,r2,1
10001390:	1000081e 	bne	r2,zero,100013b4 <main+0x1080>
		if(god_mode == True){
10001394:	e0b94517 	ldw	r2,-6892(fp)
10001398:	10800058 	cmpnei	r2,r2,1
1000139c:	1000021e 	bne	r2,zero,100013a8 <main+0x1074>
			god_mode = False;
100013a0:	e0394515 	stw	zero,-6892(fp)
100013a4:	00000206 	br	100013b0 <main+0x107c>
		}
		else{
			god_mode = True;
100013a8:	00800044 	movi	r2,1
100013ac:	e0b94515 	stw	r2,-6892(fp)
		}
		m_let_go = False;
100013b0:	e0394615 	stw	zero,-6888(fp)
	}

	if(((keycode&0x0000FF)!=0x10 && (keycode&0x00FF00)>>8 != 0x10 && (keycode&0xFF0000)>>16 != 0x10) && m_let_go == False){
100013b4:	e0b94917 	ldw	r2,-6876(fp)
100013b8:	10803fcc 	andi	r2,r2,255
100013bc:	10800420 	cmpeqi	r2,r2,16
100013c0:	10000e1e 	bne	r2,zero,100013fc <main+0x10c8>
100013c4:	e0b94917 	ldw	r2,-6876(fp)
100013c8:	10bfc00c 	andi	r2,r2,65280
100013cc:	1005d23a 	srai	r2,r2,8
100013d0:	10800420 	cmpeqi	r2,r2,16
100013d4:	1000091e 	bne	r2,zero,100013fc <main+0x10c8>
100013d8:	e0b94917 	ldw	r2,-6876(fp)
100013dc:	10803fec 	andhi	r2,r2,255
100013e0:	1005d43a 	srai	r2,r2,16
100013e4:	10800420 	cmpeqi	r2,r2,16
100013e8:	1000041e 	bne	r2,zero,100013fc <main+0x10c8>
100013ec:	e0b94617 	ldw	r2,-6888(fp)
100013f0:	1000021e 	bne	r2,zero,100013fc <main+0x10c8>
		m_let_go = True;
100013f4:	00800044 	movi	r2,1
100013f8:	e0b94615 	stw	r2,-6888(fp)
	}

	//Scene Init
	if(sceneStart == True){
100013fc:	e0b92717 	ldw	r2,-7012(fp)
10001400:	10800058 	cmpnei	r2,r2,1
10001404:	1000621e 	bne	r2,zero,10001590 <main+0x125c>
		if(sceneNum == 3){
10001408:	e0b95117 	ldw	r2,-6844(fp)
1000140c:	108000d8 	cmpnei	r2,r2,3
10001410:	10002c1e 	bne	r2,zero,100014c4 <main+0x1190>
			*SAMUS_EN = 1;
10001414:	0080e804 	movi	r2,928
10001418:	00c00044 	movi	r3,1
1000141c:	10c00005 	stb	r3,0(r2)
			*SCENE_SELECT = 3;
10001420:	00805404 	movi	r2,336
10001424:	00c000c4 	movi	r3,3
10001428:	10c00015 	stw	r3,0(r2)
			*SAMUS_X = scene3_x;
1000142c:	0080e404 	movi	r2,912
10001430:	e0f95f17 	ldw	r3,-6788(fp)
10001434:	10c00015 	stw	r3,0(r2)
			*SAMUS_Y = scene3_y;
10001438:	0080e004 	movi	r2,896
1000143c:	e0f96017 	ldw	r3,-6784(fp)
10001440:	10c00015 	stw	r3,0(r2)
			*SAMUS_DIR = scene3_dir;
10001444:	00805804 	movi	r2,352
10001448:	e0f95917 	ldw	r3,-6812(fp)
1000144c:	10c00005 	stb	r3,0(r2)
			monster1_1_x = monster1_1_x_scene3;
10001450:	e0b96317 	ldw	r2,-6772(fp)
10001454:	e0b92815 	stw	r2,-7008(fp)
			monster1_1_y = monster1_1_y_scene3;
10001458:	e0b96417 	ldw	r2,-6768(fp)
1000145c:	e0b92915 	stw	r2,-7004(fp)
			monster1_1_health = 3;
10001460:	008000c4 	movi	r2,3
10001464:	e0b92b15 	stw	r2,-6996(fp)
			monster2_1_x = monster2_1_x_scene3;
10001468:	e0b96517 	ldw	r2,-6764(fp)
1000146c:	e0b92c15 	stw	r2,-6992(fp)
			monster2_1_y = monster2_1_y_scene3;
10001470:	e0b96617 	ldw	r2,-6760(fp)
10001474:	e0b92d15 	stw	r2,-6988(fp)
			monster2_1_health = 3;
10001478:	008000c4 	movi	r2,3
1000147c:	e0b93315 	stw	r2,-6964(fp)
			mon2_at_top = True;
10001480:	00800044 	movi	r2,1
10001484:	e0b93015 	stw	r2,-6976(fp)
			monster3_1_x = monster3_1_x_scene3;
10001488:	e0b96817 	ldw	r2,-6752(fp)
1000148c:	e0b93415 	stw	r2,-6960(fp)
			monster3_1_y = monster3_1_y_scene3;
10001490:	e0b96917 	ldw	r2,-6748(fp)
10001494:	e0b93515 	stw	r2,-6956(fp)
			*MON1_EN = 1;
10001498:	0080d404 	movi	r2,848
1000149c:	00c00044 	movi	r3,1
100014a0:	10c00005 	stb	r3,0(r2)
			*MON2_EN = 1;
100014a4:	0080c804 	movi	r2,800
100014a8:	00c00044 	movi	r3,1
100014ac:	10c00005 	stb	r3,0(r2)
			*MON3_EN = 1;
100014b0:	0080bc04 	movi	r2,752
100014b4:	00c00044 	movi	r3,1
100014b8:	10c00005 	stb	r3,0(r2)
			has_control = True;
100014bc:	00800044 	movi	r2,1
100014c0:	e0b91a15 	stw	r2,-7064(fp)
		}
		if(sceneNum == 4){
100014c4:	e0b95117 	ldw	r2,-6844(fp)
100014c8:	10800118 	cmpnei	r2,r2,4
100014cc:	1000291e 	bne	r2,zero,10001574 <main+0x1240>
			*SAMUS_EN = 1;
100014d0:	0080e804 	movi	r2,928
100014d4:	00c00044 	movi	r3,1
100014d8:	10c00005 	stb	r3,0(r2)
			*SCENE_SELECT = 4;
100014dc:	00805404 	movi	r2,336
100014e0:	00c00104 	movi	r3,4
100014e4:	10c00015 	stw	r3,0(r2)
			*SAMUS_X = scene4_x;
100014e8:	0080e404 	movi	r2,912
100014ec:	e0f96117 	ldw	r3,-6780(fp)
100014f0:	10c00015 	stw	r3,0(r2)
			*SAMUS_Y = scene4_y;
100014f4:	0080e004 	movi	r2,896
100014f8:	e0f96217 	ldw	r3,-6776(fp)
100014fc:	10c00015 	stw	r3,0(r2)
			*SAMUS_DIR = scene4_dir;
10001500:	00805804 	movi	r2,352
10001504:	e0f95a17 	ldw	r3,-6808(fp)
10001508:	10c00005 	stb	r3,0(r2)
			*MON1_EN = 0;
1000150c:	0080d404 	movi	r2,848
10001510:	10000005 	stb	zero,0(r2)
			*MON2_EN = 0;
10001514:	0080c804 	movi	r2,800
10001518:	10000005 	stb	zero,0(r2)
			*MON3_EN = 0;
1000151c:	0080bc04 	movi	r2,752
10001520:	10000005 	stb	zero,0(r2)
			*KRAID_X = 400;
10001524:	00802804 	movi	r2,160
10001528:	00c06404 	movi	r3,400
1000152c:	10c00015 	stw	r3,0(r2)
			*KRAID_Y = 330;
10001530:	00802404 	movi	r2,144
10001534:	00c05284 	movi	r3,330
10001538:	10c00015 	stw	r3,0(r2)
			*KRAID_R_EN = True;
1000153c:	00803c04 	movi	r2,240
10001540:	00c00044 	movi	r3,1
10001544:	10c00015 	stw	r3,0(r2)
			*KRAID_DIR = 1;
10001548:	00804404 	movi	r2,272
1000154c:	00c00044 	movi	r3,1
10001550:	10c00015 	stw	r3,0(r2)
			kraid_health = 15;
10001554:	008003c4 	movi	r2,15
10001558:	e0b93715 	stw	r2,-6948(fp)
			has_control = True;
1000155c:	00800044 	movi	r2,1
10001560:	e0b91a15 	stw	r2,-7064(fp)
			kraid_move_counter = 100;
10001564:	00801904 	movi	r2,100
10001568:	e0b93815 	stw	r2,-6944(fp)
			kraid_move_left = True;
1000156c:	00800044 	movi	r2,1
10001570:	e0b93915 	stw	r2,-6940(fp)
		}
		sceneStart = False;
10001574:	e0392715 	stw	zero,-7012(fp)
		*EXP1_EN = 0;
10001578:	0080b004 	movi	r2,704
1000157c:	10000015 	stw	zero,0(r2)
		*EXP2_EN = 0;
10001580:	0080a404 	movi	r2,656
10001584:	10000015 	stw	zero,0(r2)
		*EXP3_EN = 0;
10001588:	00809804 	movi	r2,608
1000158c:	10000015 	stw	zero,0(r2)
	}


    //SAMUS MOVEMENT
    //Move Right
    if(((keycode&0x0000FF)==0x1A || (keycode&0x00FF00)>>8 == 0x1A || (keycode&0xFF0000)>>16 == 0x1A) && has_control == True){
10001590:	e0b94917 	ldw	r2,-6876(fp)
10001594:	10803fcc 	andi	r2,r2,255
10001598:	108006a0 	cmpeqi	r2,r2,26
1000159c:	10000a1e 	bne	r2,zero,100015c8 <main+0x1294>
100015a0:	e0b94917 	ldw	r2,-6876(fp)
100015a4:	10bfc00c 	andi	r2,r2,65280
100015a8:	1005d23a 	srai	r2,r2,8
100015ac:	108006a0 	cmpeqi	r2,r2,26
100015b0:	1000051e 	bne	r2,zero,100015c8 <main+0x1294>
100015b4:	e0b94917 	ldw	r2,-6876(fp)
100015b8:	10803fec 	andhi	r2,r2,255
100015bc:	1005d43a 	srai	r2,r2,16
100015c0:	10800698 	cmpnei	r2,r2,26
100015c4:	1000071e 	bne	r2,zero,100015e4 <main+0x12b0>
100015c8:	e0b91a17 	ldw	r2,-7064(fp)
100015cc:	10800058 	cmpnei	r2,r2,1
100015d0:	1000041e 	bne	r2,zero,100015e4 <main+0x12b0>
    	*SAMUS_UP = 1;
100015d4:	00805004 	movi	r2,320
100015d8:	00c00044 	movi	r3,1
100015dc:	10c00005 	stb	r3,0(r2)
100015e0:	00000206 	br	100015ec <main+0x12b8>
    }
    else{
    	*SAMUS_UP = 0;
100015e4:	00805004 	movi	r2,320
100015e8:	10000005 	stb	zero,0(r2)
    }
    //Move right
    if(((keycode&0x0000FF)==7 || (keycode&0x00FF00)>>8 == 7 || (keycode&0xFF0000)>>16 == 7) && has_control == True){
100015ec:	e0b94917 	ldw	r2,-6876(fp)
100015f0:	10803fcc 	andi	r2,r2,255
100015f4:	108001e0 	cmpeqi	r2,r2,7
100015f8:	10000a1e 	bne	r2,zero,10001624 <main+0x12f0>
100015fc:	e0b94917 	ldw	r2,-6876(fp)
10001600:	10bfc00c 	andi	r2,r2,65280
10001604:	1005d23a 	srai	r2,r2,8
10001608:	108001e0 	cmpeqi	r2,r2,7
1000160c:	1000051e 	bne	r2,zero,10001624 <main+0x12f0>
10001610:	e0b94917 	ldw	r2,-6876(fp)
10001614:	10803fec 	andhi	r2,r2,255
10001618:	1005d43a 	srai	r2,r2,16
1000161c:	108001d8 	cmpnei	r2,r2,7
10001620:	1000941e 	bne	r2,zero,10001874 <main+0x1540>
10001624:	e0b91a17 	ldw	r2,-7064(fp)
10001628:	10800058 	cmpnei	r2,r2,1
1000162c:	1000911e 	bne	r2,zero,10001874 <main+0x1540>
    	printf("HERE");
10001630:	01040074 	movhi	r4,4097
10001634:	211da904 	addi	r4,r4,30372
10001638:	00090bc0 	call	100090bc <printf>
    	if(scene[sceneNum][(*SAMUS_Y+10)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+25)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+50)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+70)/30][(*SAMUS_X+40)/30]==0){
1000163c:	0080e004 	movi	r2,896
10001640:	10800017 	ldw	r2,0(r2)
10001644:	10800284 	addi	r2,r2,10
10001648:	1009883a 	mov	r4,r2
1000164c:	01400784 	movi	r5,30
10001650:	0006d300 	call	10006d30 <__divsi3>
10001654:	1023883a 	mov	r17,r2
10001658:	0080e404 	movi	r2,912
1000165c:	10800017 	ldw	r2,0(r2)
10001660:	10800a04 	addi	r2,r2,40
10001664:	1009883a 	mov	r4,r2
10001668:	01400784 	movi	r5,30
1000166c:	0006d300 	call	10006d30 <__divsi3>
10001670:	1021883a 	mov	r16,r2
10001674:	e4b95117 	ldw	r18,-6844(fp)
10001678:	8809883a 	mov	r4,r17
1000167c:	01400544 	movi	r5,21
10001680:	0006df00 	call	10006df0 <__mulsi3>
10001684:	1023883a 	mov	r17,r2
10001688:	9009883a 	mov	r4,r18
1000168c:	01405404 	movi	r5,336
10001690:	0006df00 	call	10006df0 <__mulsi3>
10001694:	8885883a 	add	r2,r17,r2
10001698:	1405883a 	add	r2,r2,r16
1000169c:	1085883a 	add	r2,r2,r2
100016a0:	1085883a 	add	r2,r2,r2
100016a4:	e0f91304 	addi	r3,fp,-7092
100016a8:	1885883a 	add	r2,r3,r2
100016ac:	10805a04 	addi	r2,r2,360
100016b0:	10800017 	ldw	r2,0(r2)
100016b4:	10006e1e 	bne	r2,zero,10001870 <main+0x153c>
100016b8:	0080e004 	movi	r2,896
100016bc:	10800017 	ldw	r2,0(r2)
100016c0:	10800644 	addi	r2,r2,25
100016c4:	1009883a 	mov	r4,r2
100016c8:	01400784 	movi	r5,30
100016cc:	0006d300 	call	10006d30 <__divsi3>
100016d0:	1023883a 	mov	r17,r2
100016d4:	0080e404 	movi	r2,912
100016d8:	10800017 	ldw	r2,0(r2)
100016dc:	10800a04 	addi	r2,r2,40
100016e0:	1009883a 	mov	r4,r2
100016e4:	01400784 	movi	r5,30
100016e8:	0006d300 	call	10006d30 <__divsi3>
100016ec:	1021883a 	mov	r16,r2
100016f0:	e4b95117 	ldw	r18,-6844(fp)
100016f4:	8809883a 	mov	r4,r17
100016f8:	01400544 	movi	r5,21
100016fc:	0006df00 	call	10006df0 <__mulsi3>
10001700:	1023883a 	mov	r17,r2
10001704:	9009883a 	mov	r4,r18
10001708:	01405404 	movi	r5,336
1000170c:	0006df00 	call	10006df0 <__mulsi3>
10001710:	8885883a 	add	r2,r17,r2
10001714:	1405883a 	add	r2,r2,r16
10001718:	1085883a 	add	r2,r2,r2
1000171c:	1085883a 	add	r2,r2,r2
10001720:	e0f91304 	addi	r3,fp,-7092
10001724:	1885883a 	add	r2,r3,r2
10001728:	10805a04 	addi	r2,r2,360
1000172c:	10800017 	ldw	r2,0(r2)
10001730:	10004f1e 	bne	r2,zero,10001870 <main+0x153c>
10001734:	0080e004 	movi	r2,896
10001738:	10800017 	ldw	r2,0(r2)
1000173c:	10800c84 	addi	r2,r2,50
10001740:	1009883a 	mov	r4,r2
10001744:	01400784 	movi	r5,30
10001748:	0006d300 	call	10006d30 <__divsi3>
1000174c:	1023883a 	mov	r17,r2
10001750:	0080e404 	movi	r2,912
10001754:	10800017 	ldw	r2,0(r2)
10001758:	10800a04 	addi	r2,r2,40
1000175c:	1009883a 	mov	r4,r2
10001760:	01400784 	movi	r5,30
10001764:	0006d300 	call	10006d30 <__divsi3>
10001768:	1021883a 	mov	r16,r2
1000176c:	e4b95117 	ldw	r18,-6844(fp)
10001770:	8809883a 	mov	r4,r17
10001774:	01400544 	movi	r5,21
10001778:	0006df00 	call	10006df0 <__mulsi3>
1000177c:	1023883a 	mov	r17,r2
10001780:	9009883a 	mov	r4,r18
10001784:	01405404 	movi	r5,336
10001788:	0006df00 	call	10006df0 <__mulsi3>
1000178c:	8885883a 	add	r2,r17,r2
10001790:	1405883a 	add	r2,r2,r16
10001794:	1085883a 	add	r2,r2,r2
10001798:	1085883a 	add	r2,r2,r2
1000179c:	e0f91304 	addi	r3,fp,-7092
100017a0:	1885883a 	add	r2,r3,r2
100017a4:	10805a04 	addi	r2,r2,360
100017a8:	10800017 	ldw	r2,0(r2)
100017ac:	1000301e 	bne	r2,zero,10001870 <main+0x153c>
100017b0:	0080e004 	movi	r2,896
100017b4:	10800017 	ldw	r2,0(r2)
100017b8:	10801184 	addi	r2,r2,70
100017bc:	1009883a 	mov	r4,r2
100017c0:	01400784 	movi	r5,30
100017c4:	0006d300 	call	10006d30 <__divsi3>
100017c8:	1023883a 	mov	r17,r2
100017cc:	0080e404 	movi	r2,912
100017d0:	10800017 	ldw	r2,0(r2)
100017d4:	10800a04 	addi	r2,r2,40
100017d8:	1009883a 	mov	r4,r2
100017dc:	01400784 	movi	r5,30
100017e0:	0006d300 	call	10006d30 <__divsi3>
100017e4:	1021883a 	mov	r16,r2
100017e8:	e4b95117 	ldw	r18,-6844(fp)
100017ec:	8809883a 	mov	r4,r17
100017f0:	01400544 	movi	r5,21
100017f4:	0006df00 	call	10006df0 <__mulsi3>
100017f8:	1023883a 	mov	r17,r2
100017fc:	9009883a 	mov	r4,r18
10001800:	01405404 	movi	r5,336
10001804:	0006df00 	call	10006df0 <__mulsi3>
10001808:	8885883a 	add	r2,r17,r2
1000180c:	1405883a 	add	r2,r2,r16
10001810:	1085883a 	add	r2,r2,r2
10001814:	1085883a 	add	r2,r2,r2
10001818:	e0f91304 	addi	r3,fp,-7092
1000181c:	1885883a 	add	r2,r3,r2
10001820:	10805a04 	addi	r2,r2,360
10001824:	10800017 	ldw	r2,0(r2)
10001828:	1000111e 	bne	r2,zero,10001870 <main+0x153c>
    		printf("HERE2");
1000182c:	01040074 	movhi	r4,4097
10001830:	211dab04 	addi	r4,r4,30380
10001834:	00090bc0 	call	100090bc <printf>
    		*SAMUS_DIR = 0;
10001838:	00805804 	movi	r2,352
1000183c:	10000005 	stb	zero,0(r2)
    		*SAMUS_X+=6;
10001840:	0080e404 	movi	r2,912
10001844:	00c0e404 	movi	r3,912
10001848:	18c00017 	ldw	r3,0(r3)
1000184c:	18c00184 	addi	r3,r3,6
10001850:	10c00015 	stw	r3,0(r2)
    		if(grounded == True){
10001854:	e0b91817 	ldw	r2,-7072(fp)
10001858:	10800058 	cmpnei	r2,r2,1
1000185c:	1000041e 	bne	r2,zero,10001870 <main+0x153c>
    			*SAMUS_WALK = 1;
10001860:	0080dc04 	movi	r2,880
10001864:	00c00044 	movi	r3,1
10001868:	10c00005 	stb	r3,0(r2)
    	*SAMUS_UP = 0;
    }
    //Move right
    if(((keycode&0x0000FF)==7 || (keycode&0x00FF00)>>8 == 7 || (keycode&0xFF0000)>>16 == 7) && has_control == True){
    	printf("HERE");
    	if(scene[sceneNum][(*SAMUS_Y+10)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+25)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+50)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+70)/30][(*SAMUS_X+40)/30]==0){
1000186c:	0000a706 	br	10001b0c <main+0x17d8>
10001870:	0000a606 	br	10001b0c <main+0x17d8>
    			*SAMUS_WALK = 1;
    		}
    	}
    }
    //Move Left
    else if(((keycode&0x0000FF)==4 || (keycode&0x00FF00)>>8 == 4 || (keycode&0xFF0000)>>16 == 4) && has_control == True){
10001874:	e0b94917 	ldw	r2,-6876(fp)
10001878:	10803fcc 	andi	r2,r2,255
1000187c:	10800120 	cmpeqi	r2,r2,4
10001880:	10000a1e 	bne	r2,zero,100018ac <main+0x1578>
10001884:	e0b94917 	ldw	r2,-6876(fp)
10001888:	10bfc00c 	andi	r2,r2,65280
1000188c:	1005d23a 	srai	r2,r2,8
10001890:	10800120 	cmpeqi	r2,r2,4
10001894:	1000051e 	bne	r2,zero,100018ac <main+0x1578>
10001898:	e0b94917 	ldw	r2,-6876(fp)
1000189c:	10803fec 	andhi	r2,r2,255
100018a0:	1005d43a 	srai	r2,r2,16
100018a4:	10800118 	cmpnei	r2,r2,4
100018a8:	10008f1e 	bne	r2,zero,10001ae8 <main+0x17b4>
100018ac:	e0b91a17 	ldw	r2,-7064(fp)
100018b0:	10800058 	cmpnei	r2,r2,1
100018b4:	10008c1e 	bne	r2,zero,10001ae8 <main+0x17b4>
    	if(scene[sceneNum][(*SAMUS_Y+15)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+25)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+50)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+70)/30][(*SAMUS_X-3)/30]==0){
100018b8:	0080e004 	movi	r2,896
100018bc:	10800017 	ldw	r2,0(r2)
100018c0:	108003c4 	addi	r2,r2,15
100018c4:	1009883a 	mov	r4,r2
100018c8:	01400784 	movi	r5,30
100018cc:	0006d300 	call	10006d30 <__divsi3>
100018d0:	1023883a 	mov	r17,r2
100018d4:	0080e404 	movi	r2,912
100018d8:	10800017 	ldw	r2,0(r2)
100018dc:	10bfff44 	addi	r2,r2,-3
100018e0:	1009883a 	mov	r4,r2
100018e4:	01400784 	movi	r5,30
100018e8:	0006d300 	call	10006d30 <__divsi3>
100018ec:	1021883a 	mov	r16,r2
100018f0:	e4b95117 	ldw	r18,-6844(fp)
100018f4:	8809883a 	mov	r4,r17
100018f8:	01400544 	movi	r5,21
100018fc:	0006df00 	call	10006df0 <__mulsi3>
10001900:	1023883a 	mov	r17,r2
10001904:	9009883a 	mov	r4,r18
10001908:	01405404 	movi	r5,336
1000190c:	0006df00 	call	10006df0 <__mulsi3>
10001910:	8885883a 	add	r2,r17,r2
10001914:	1405883a 	add	r2,r2,r16
10001918:	1085883a 	add	r2,r2,r2
1000191c:	1085883a 	add	r2,r2,r2
10001920:	e0f91304 	addi	r3,fp,-7092
10001924:	1885883a 	add	r2,r3,r2
10001928:	10805a04 	addi	r2,r2,360
1000192c:	10800017 	ldw	r2,0(r2)
10001930:	10006c1e 	bne	r2,zero,10001ae4 <main+0x17b0>
10001934:	0080e004 	movi	r2,896
10001938:	10800017 	ldw	r2,0(r2)
1000193c:	10800644 	addi	r2,r2,25
10001940:	1009883a 	mov	r4,r2
10001944:	01400784 	movi	r5,30
10001948:	0006d300 	call	10006d30 <__divsi3>
1000194c:	1023883a 	mov	r17,r2
10001950:	0080e404 	movi	r2,912
10001954:	10800017 	ldw	r2,0(r2)
10001958:	10bfff44 	addi	r2,r2,-3
1000195c:	1009883a 	mov	r4,r2
10001960:	01400784 	movi	r5,30
10001964:	0006d300 	call	10006d30 <__divsi3>
10001968:	1021883a 	mov	r16,r2
1000196c:	e4b95117 	ldw	r18,-6844(fp)
10001970:	8809883a 	mov	r4,r17
10001974:	01400544 	movi	r5,21
10001978:	0006df00 	call	10006df0 <__mulsi3>
1000197c:	1023883a 	mov	r17,r2
10001980:	9009883a 	mov	r4,r18
10001984:	01405404 	movi	r5,336
10001988:	0006df00 	call	10006df0 <__mulsi3>
1000198c:	8885883a 	add	r2,r17,r2
10001990:	1405883a 	add	r2,r2,r16
10001994:	1085883a 	add	r2,r2,r2
10001998:	1085883a 	add	r2,r2,r2
1000199c:	e0f91304 	addi	r3,fp,-7092
100019a0:	1885883a 	add	r2,r3,r2
100019a4:	10805a04 	addi	r2,r2,360
100019a8:	10800017 	ldw	r2,0(r2)
100019ac:	10004d1e 	bne	r2,zero,10001ae4 <main+0x17b0>
100019b0:	0080e004 	movi	r2,896
100019b4:	10800017 	ldw	r2,0(r2)
100019b8:	10800c84 	addi	r2,r2,50
100019bc:	1009883a 	mov	r4,r2
100019c0:	01400784 	movi	r5,30
100019c4:	0006d300 	call	10006d30 <__divsi3>
100019c8:	1023883a 	mov	r17,r2
100019cc:	0080e404 	movi	r2,912
100019d0:	10800017 	ldw	r2,0(r2)
100019d4:	10bfff44 	addi	r2,r2,-3
100019d8:	1009883a 	mov	r4,r2
100019dc:	01400784 	movi	r5,30
100019e0:	0006d300 	call	10006d30 <__divsi3>
100019e4:	1021883a 	mov	r16,r2
100019e8:	e4b95117 	ldw	r18,-6844(fp)
100019ec:	8809883a 	mov	r4,r17
100019f0:	01400544 	movi	r5,21
100019f4:	0006df00 	call	10006df0 <__mulsi3>
100019f8:	1023883a 	mov	r17,r2
100019fc:	9009883a 	mov	r4,r18
10001a00:	01405404 	movi	r5,336
10001a04:	0006df00 	call	10006df0 <__mulsi3>
10001a08:	8885883a 	add	r2,r17,r2
10001a0c:	1405883a 	add	r2,r2,r16
10001a10:	1085883a 	add	r2,r2,r2
10001a14:	1085883a 	add	r2,r2,r2
10001a18:	e0f91304 	addi	r3,fp,-7092
10001a1c:	1885883a 	add	r2,r3,r2
10001a20:	10805a04 	addi	r2,r2,360
10001a24:	10800017 	ldw	r2,0(r2)
10001a28:	10002e1e 	bne	r2,zero,10001ae4 <main+0x17b0>
10001a2c:	0080e004 	movi	r2,896
10001a30:	10800017 	ldw	r2,0(r2)
10001a34:	10801184 	addi	r2,r2,70
10001a38:	1009883a 	mov	r4,r2
10001a3c:	01400784 	movi	r5,30
10001a40:	0006d300 	call	10006d30 <__divsi3>
10001a44:	1023883a 	mov	r17,r2
10001a48:	0080e404 	movi	r2,912
10001a4c:	10800017 	ldw	r2,0(r2)
10001a50:	10bfff44 	addi	r2,r2,-3
10001a54:	1009883a 	mov	r4,r2
10001a58:	01400784 	movi	r5,30
10001a5c:	0006d300 	call	10006d30 <__divsi3>
10001a60:	1021883a 	mov	r16,r2
10001a64:	e4b95117 	ldw	r18,-6844(fp)
10001a68:	8809883a 	mov	r4,r17
10001a6c:	01400544 	movi	r5,21
10001a70:	0006df00 	call	10006df0 <__mulsi3>
10001a74:	1023883a 	mov	r17,r2
10001a78:	9009883a 	mov	r4,r18
10001a7c:	01405404 	movi	r5,336
10001a80:	0006df00 	call	10006df0 <__mulsi3>
10001a84:	8885883a 	add	r2,r17,r2
10001a88:	1405883a 	add	r2,r2,r16
10001a8c:	1085883a 	add	r2,r2,r2
10001a90:	1085883a 	add	r2,r2,r2
10001a94:	e0f91304 	addi	r3,fp,-7092
10001a98:	1885883a 	add	r2,r3,r2
10001a9c:	10805a04 	addi	r2,r2,360
10001aa0:	10800017 	ldw	r2,0(r2)
10001aa4:	10000f1e 	bne	r2,zero,10001ae4 <main+0x17b0>
    		*SAMUS_DIR = 1;
10001aa8:	00805804 	movi	r2,352
10001aac:	00c00044 	movi	r3,1
10001ab0:	10c00005 	stb	r3,0(r2)
    		*SAMUS_X-=6;
10001ab4:	0080e404 	movi	r2,912
10001ab8:	00c0e404 	movi	r3,912
10001abc:	18c00017 	ldw	r3,0(r3)
10001ac0:	18fffe84 	addi	r3,r3,-6
10001ac4:	10c00015 	stw	r3,0(r2)
    		if(grounded == True){
10001ac8:	e0b91817 	ldw	r2,-7072(fp)
10001acc:	10800058 	cmpnei	r2,r2,1
10001ad0:	1000041e 	bne	r2,zero,10001ae4 <main+0x17b0>
				*SAMUS_WALK = 1;
10001ad4:	0080dc04 	movi	r2,880
10001ad8:	00c00044 	movi	r3,1
10001adc:	10c00005 	stb	r3,0(r2)
    		}
    	}
    }
    //Move Left
    else if(((keycode&0x0000FF)==4 || (keycode&0x00FF00)>>8 == 4 || (keycode&0xFF0000)>>16 == 4) && has_control == True){
    	if(scene[sceneNum][(*SAMUS_Y+15)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+25)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+50)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+70)/30][(*SAMUS_X-3)/30]==0){
10001ae0:	00000a06 	br	10001b0c <main+0x17d8>
10001ae4:	00000906 	br	10001b0c <main+0x17d8>
    		if(grounded == True){
				*SAMUS_WALK = 1;
			}
    	}
    }
    else if(grounded == True){
10001ae8:	e0b91817 	ldw	r2,-7072(fp)
10001aec:	10800058 	cmpnei	r2,r2,1
10001af0:	1000031e 	bne	r2,zero,10001b00 <main+0x17cc>
        *SAMUS_WALK = 0;
10001af4:	0080dc04 	movi	r2,880
10001af8:	10000005 	stb	zero,0(r2)
10001afc:	00000306 	br	10001b0c <main+0x17d8>
    }
    else{
    	*SAMUS_WALK = 1;
10001b00:	0080dc04 	movi	r2,880
10001b04:	00c00044 	movi	r3,1
10001b08:	10c00005 	stb	r3,0(r2)
    }

    // Jump code
    if(grounded == False){
10001b0c:	e0b91817 	ldw	r2,-7072(fp)
10001b10:	1000041e 	bne	r2,zero,10001b24 <main+0x17f0>
    	*SAMUS_JUMP = 1;
10001b14:	0080d804 	movi	r2,864
10001b18:	00c00044 	movi	r3,1
10001b1c:	10c00005 	stb	r3,0(r2)
10001b20:	00000206 	br	10001b2c <main+0x17f8>
    }
    else{
    	*SAMUS_JUMP = 0;
10001b24:	0080d804 	movi	r2,864
10001b28:	10000005 	stb	zero,0(r2)
    }
    if(((keycode&0x0000FF)==0x2c || (keycode&0x00FF00)>>8 == 0x2c || (keycode&0xFF0000)>>16 == 0x2c) && grounded == True && let_go == False && button_let_go == True && has_control == True){
10001b2c:	e0b94917 	ldw	r2,-6876(fp)
10001b30:	10803fcc 	andi	r2,r2,255
10001b34:	10800b20 	cmpeqi	r2,r2,44
10001b38:	10000a1e 	bne	r2,zero,10001b64 <main+0x1830>
10001b3c:	e0b94917 	ldw	r2,-6876(fp)
10001b40:	10bfc00c 	andi	r2,r2,65280
10001b44:	1005d23a 	srai	r2,r2,8
10001b48:	10800b20 	cmpeqi	r2,r2,44
10001b4c:	1000051e 	bne	r2,zero,10001b64 <main+0x1830>
10001b50:	e0b94917 	ldw	r2,-6876(fp)
10001b54:	10803fec 	andhi	r2,r2,255
10001b58:	1005d43a 	srai	r2,r2,16
10001b5c:	10800b18 	cmpnei	r2,r2,44
10001b60:	1000121e 	bne	r2,zero,10001bac <main+0x1878>
10001b64:	e0b91817 	ldw	r2,-7072(fp)
10001b68:	10800058 	cmpnei	r2,r2,1
10001b6c:	10000f1e 	bne	r2,zero,10001bac <main+0x1878>
10001b70:	e0b91917 	ldw	r2,-7068(fp)
10001b74:	10000d1e 	bne	r2,zero,10001bac <main+0x1878>
10001b78:	e0b91c17 	ldw	r2,-7056(fp)
10001b7c:	10800058 	cmpnei	r2,r2,1
10001b80:	10000a1e 	bne	r2,zero,10001bac <main+0x1878>
10001b84:	e0b91a17 	ldw	r2,-7064(fp)
10001b88:	10800058 	cmpnei	r2,r2,1
10001b8c:	1000071e 	bne	r2,zero,10001bac <main+0x1878>
    	y_inc = -12;
10001b90:	00b05034 	movhi	r2,49472
10001b94:	e0b91615 	stw	r2,-7080(fp)
    	grounded = False;
10001b98:	e0391815 	stw	zero,-7072(fp)
    	let_go = True;
10001b9c:	00800044 	movi	r2,1
10001ba0:	e0b91915 	stw	r2,-7068(fp)
    	jump_height = 0;
10001ba4:	e0391715 	stw	zero,-7076(fp)
    	button_let_go = False;
10001ba8:	e0391c15 	stw	zero,-7056(fp)
    }
    if((((keycode&0x0000FF)!=0x2c && (keycode&0x00FF00)>>8 != 0x2c && (keycode&0xFF0000)>>16 != 0x2c))){
10001bac:	e0b94917 	ldw	r2,-6876(fp)
10001bb0:	10803fcc 	andi	r2,r2,255
10001bb4:	10800b20 	cmpeqi	r2,r2,44
10001bb8:	10000c1e 	bne	r2,zero,10001bec <main+0x18b8>
10001bbc:	e0b94917 	ldw	r2,-6876(fp)
10001bc0:	10bfc00c 	andi	r2,r2,65280
10001bc4:	1005d23a 	srai	r2,r2,8
10001bc8:	10800b20 	cmpeqi	r2,r2,44
10001bcc:	1000071e 	bne	r2,zero,10001bec <main+0x18b8>
10001bd0:	e0b94917 	ldw	r2,-6876(fp)
10001bd4:	10803fec 	andhi	r2,r2,255
10001bd8:	1005d43a 	srai	r2,r2,16
10001bdc:	10800b20 	cmpeqi	r2,r2,44
10001be0:	1000021e 	bne	r2,zero,10001bec <main+0x18b8>
    	button_let_go = True;
10001be4:	00800044 	movi	r2,1
10001be8:	e0b91c15 	stw	r2,-7056(fp)
    }
    if((((keycode&0x0000FF)!=0x2c && (keycode&0x00FF00)>>8 != 0x2c && (keycode&0xFF0000)>>16 != 0x2c) && let_go == True)){
10001bec:	e0b94917 	ldw	r2,-6876(fp)
10001bf0:	10803fcc 	andi	r2,r2,255
10001bf4:	10800b20 	cmpeqi	r2,r2,44
10001bf8:	10000e1e 	bne	r2,zero,10001c34 <main+0x1900>
10001bfc:	e0b94917 	ldw	r2,-6876(fp)
10001c00:	10bfc00c 	andi	r2,r2,65280
10001c04:	1005d23a 	srai	r2,r2,8
10001c08:	10800b20 	cmpeqi	r2,r2,44
10001c0c:	1000091e 	bne	r2,zero,10001c34 <main+0x1900>
10001c10:	e0b94917 	ldw	r2,-6876(fp)
10001c14:	10803fec 	andhi	r2,r2,255
10001c18:	1005d43a 	srai	r2,r2,16
10001c1c:	10800b20 	cmpeqi	r2,r2,44
10001c20:	1000041e 	bne	r2,zero,10001c34 <main+0x1900>
10001c24:	e0b91917 	ldw	r2,-7068(fp)
10001c28:	10800058 	cmpnei	r2,r2,1
10001c2c:	1000011e 	bne	r2,zero,10001c34 <main+0x1900>
    	let_go = False;
10001c30:	e0391915 	stw	zero,-7068(fp)
    }
    if(grounded == False){
10001c34:	e0b91817 	ldw	r2,-7072(fp)
10001c38:	1000141e 	bne	r2,zero,10001c8c <main+0x1958>
    	if((keycode&0x0000FF)!=0x1A && (keycode&0x00FF00)>>8 != 0x1A && (keycode&0xFF0000)>>16 != 0x1A){
10001c3c:	e0b94917 	ldw	r2,-6876(fp)
10001c40:	10803fcc 	andi	r2,r2,255
10001c44:	108006a0 	cmpeqi	r2,r2,26
10001c48:	10000e1e 	bne	r2,zero,10001c84 <main+0x1950>
10001c4c:	e0b94917 	ldw	r2,-6876(fp)
10001c50:	10bfc00c 	andi	r2,r2,65280
10001c54:	1005d23a 	srai	r2,r2,8
10001c58:	108006a0 	cmpeqi	r2,r2,26
10001c5c:	1000091e 	bne	r2,zero,10001c84 <main+0x1950>
10001c60:	e0b94917 	ldw	r2,-6876(fp)
10001c64:	10803fec 	andhi	r2,r2,255
10001c68:	1005d43a 	srai	r2,r2,16
10001c6c:	108006a0 	cmpeqi	r2,r2,26
10001c70:	1000041e 	bne	r2,zero,10001c84 <main+0x1950>
    		*SAMUS_WALK = True;
10001c74:	0080dc04 	movi	r2,880
10001c78:	00c00044 	movi	r3,1
10001c7c:	10c00005 	stb	r3,0(r2)
10001c80:	00000206 	br	10001c8c <main+0x1958>
    	}
    	else{
    		*SAMUS_WALK = False;
10001c84:	0080dc04 	movi	r2,880
10001c88:	10000005 	stb	zero,0(r2)
    	}
    }

    if(let_go == False || jump_height >= max_jump_height){
10001c8c:	e0b91917 	ldw	r2,-7068(fp)
10001c90:	10000426 	beq	r2,zero,10001ca4 <main+0x1970>
10001c94:	e1391717 	ldw	r4,-7076(fp)
10001c98:	e1794f17 	ldw	r5,-6852(fp)
10001c9c:	00072f80 	call	100072f8 <__gesf2>
10001ca0:	10000c16 	blt	r2,zero,10001cd4 <main+0x19a0>
    	if(y_inc < -6){
10001ca4:	e1391617 	ldw	r4,-7080(fp)
10001ca8:	01703034 	movhi	r5,49344
10001cac:	00073b00 	call	100073b0 <__lesf2>
10001cb0:	1000020e 	bge	r2,zero,10001cbc <main+0x1988>
    		y_inc = -6;
10001cb4:	00b03034 	movhi	r2,49344
10001cb8:	e0b91615 	stw	r2,-7080(fp)
    	}
    	y_inc += gravity;
10001cbc:	e1391617 	ldw	r4,-7080(fp)
10001cc0:	e1794e17 	ldw	r5,-6856(fp)
10001cc4:	0006e180 	call	10006e18 <__addsf3>
10001cc8:	1007883a 	mov	r3,r2
10001ccc:	e0f91615 	stw	r3,-7080(fp)
    	let_go = False;
10001cd0:	e0391915 	stw	zero,-7068(fp)
    }

    if(grounded == True){
10001cd4:	e0b91817 	ldw	r2,-7072(fp)
10001cd8:	10800058 	cmpnei	r2,r2,1
10001cdc:	1000011e 	bne	r2,zero,10001ce4 <main+0x19b0>
    	y_inc = 0;
10001ce0:	e0391615 	stw	zero,-7080(fp)
    }
    if(y_inc > 12){
10001ce4:	e1391617 	ldw	r4,-7080(fp)
10001ce8:	01505034 	movhi	r5,16704
10001cec:	00072f80 	call	100072f8 <__gesf2>
10001cf0:	0080020e 	bge	zero,r2,10001cfc <main+0x19c8>
    	y_inc = 12;
10001cf4:	00905034 	movhi	r2,16704
10001cf8:	e0b91615 	stw	r2,-7080(fp)
    }

    *SAMUS_Y += y_inc;
10001cfc:	0400e004 	movi	r16,896
10001d00:	0080e004 	movi	r2,896
10001d04:	10800017 	ldw	r2,0(r2)
10001d08:	1009883a 	mov	r4,r2
10001d0c:	00079dc0 	call	100079dc <__floatsisf>
10001d10:	1007883a 	mov	r3,r2
10001d14:	1809883a 	mov	r4,r3
10001d18:	e1791617 	ldw	r5,-7080(fp)
10001d1c:	0006e180 	call	10006e18 <__addsf3>
10001d20:	1007883a 	mov	r3,r2
10001d24:	1805883a 	mov	r2,r3
10001d28:	1009883a 	mov	r4,r2
10001d2c:	00079640 	call	10007964 <__fixsfsi>
10001d30:	80800015 	stw	r2,0(r16)
    jump_height -= y_inc;
10001d34:	e1391717 	ldw	r4,-7076(fp)
10001d38:	e1791617 	ldw	r5,-7080(fp)
10001d3c:	00074680 	call	10007468 <__subsf3>
10001d40:	1007883a 	mov	r3,r2
10001d44:	e0f91715 	stw	r3,-7076(fp)

    //bot collision detection
    if((scene[sceneNum][(*SAMUS_Y+80)/30][(*SAMUS_X+5)/30] != 0 || scene[sceneNum][(*SAMUS_Y+80)/30][(*SAMUS_X+33)/30] != 0)){
10001d48:	0080e004 	movi	r2,896
10001d4c:	10800017 	ldw	r2,0(r2)
10001d50:	10801404 	addi	r2,r2,80
10001d54:	1009883a 	mov	r4,r2
10001d58:	01400784 	movi	r5,30
10001d5c:	0006d300 	call	10006d30 <__divsi3>
10001d60:	1023883a 	mov	r17,r2
10001d64:	0080e404 	movi	r2,912
10001d68:	10800017 	ldw	r2,0(r2)
10001d6c:	10800144 	addi	r2,r2,5
10001d70:	1009883a 	mov	r4,r2
10001d74:	01400784 	movi	r5,30
10001d78:	0006d300 	call	10006d30 <__divsi3>
10001d7c:	1021883a 	mov	r16,r2
10001d80:	e4b95117 	ldw	r18,-6844(fp)
10001d84:	8809883a 	mov	r4,r17
10001d88:	01400544 	movi	r5,21
10001d8c:	0006df00 	call	10006df0 <__mulsi3>
10001d90:	1023883a 	mov	r17,r2
10001d94:	9009883a 	mov	r4,r18
10001d98:	01405404 	movi	r5,336
10001d9c:	0006df00 	call	10006df0 <__mulsi3>
10001da0:	8885883a 	add	r2,r17,r2
10001da4:	1405883a 	add	r2,r2,r16
10001da8:	1085883a 	add	r2,r2,r2
10001dac:	1085883a 	add	r2,r2,r2
10001db0:	e0f91304 	addi	r3,fp,-7092
10001db4:	1885883a 	add	r2,r3,r2
10001db8:	10805a04 	addi	r2,r2,360
10001dbc:	10800017 	ldw	r2,0(r2)
10001dc0:	10001f1e 	bne	r2,zero,10001e40 <main+0x1b0c>
10001dc4:	0080e004 	movi	r2,896
10001dc8:	10800017 	ldw	r2,0(r2)
10001dcc:	10801404 	addi	r2,r2,80
10001dd0:	1009883a 	mov	r4,r2
10001dd4:	01400784 	movi	r5,30
10001dd8:	0006d300 	call	10006d30 <__divsi3>
10001ddc:	1023883a 	mov	r17,r2
10001de0:	0080e404 	movi	r2,912
10001de4:	10800017 	ldw	r2,0(r2)
10001de8:	10800844 	addi	r2,r2,33
10001dec:	1009883a 	mov	r4,r2
10001df0:	01400784 	movi	r5,30
10001df4:	0006d300 	call	10006d30 <__divsi3>
10001df8:	1021883a 	mov	r16,r2
10001dfc:	e4b95117 	ldw	r18,-6844(fp)
10001e00:	8809883a 	mov	r4,r17
10001e04:	01400544 	movi	r5,21
10001e08:	0006df00 	call	10006df0 <__mulsi3>
10001e0c:	1023883a 	mov	r17,r2
10001e10:	9009883a 	mov	r4,r18
10001e14:	01405404 	movi	r5,336
10001e18:	0006df00 	call	10006df0 <__mulsi3>
10001e1c:	8885883a 	add	r2,r17,r2
10001e20:	1405883a 	add	r2,r2,r16
10001e24:	1085883a 	add	r2,r2,r2
10001e28:	1085883a 	add	r2,r2,r2
10001e2c:	e0f91304 	addi	r3,fp,-7092
10001e30:	1885883a 	add	r2,r3,r2
10001e34:	10805a04 	addi	r2,r2,360
10001e38:	10800017 	ldw	r2,0(r2)
10001e3c:	10000e26 	beq	r2,zero,10001e78 <main+0x1b44>
    	*SAMUS_Y = (*SAMUS_Y/30)*30+19;
10001e40:	0400e004 	movi	r16,896
10001e44:	0080e004 	movi	r2,896
10001e48:	10800017 	ldw	r2,0(r2)
10001e4c:	1009883a 	mov	r4,r2
10001e50:	01400784 	movi	r5,30
10001e54:	0006d300 	call	10006d30 <__divsi3>
10001e58:	1009883a 	mov	r4,r2
10001e5c:	01400784 	movi	r5,30
10001e60:	0006df00 	call	10006df0 <__mulsi3>
10001e64:	108004c4 	addi	r2,r2,19
10001e68:	80800015 	stw	r2,0(r16)
    	grounded = True;
10001e6c:	00800044 	movi	r2,1
10001e70:	e0b91815 	stw	r2,-7072(fp)
10001e74:	00000106 	br	10001e7c <main+0x1b48>
    }
    else{
    	grounded = False;
10001e78:	e0391815 	stw	zero,-7072(fp)
    }

    //If hits head
    if(scene[sceneNum][(*SAMUS_Y+5)/30][(*SAMUS_X+2)/30] != 0 || scene[sceneNum][(*SAMUS_Y+5)/30][(*SAMUS_X+33)/30] != 0){
10001e7c:	0080e004 	movi	r2,896
10001e80:	10800017 	ldw	r2,0(r2)
10001e84:	10800144 	addi	r2,r2,5
10001e88:	1009883a 	mov	r4,r2
10001e8c:	01400784 	movi	r5,30
10001e90:	0006d300 	call	10006d30 <__divsi3>
10001e94:	1023883a 	mov	r17,r2
10001e98:	0080e404 	movi	r2,912
10001e9c:	10800017 	ldw	r2,0(r2)
10001ea0:	10800084 	addi	r2,r2,2
10001ea4:	1009883a 	mov	r4,r2
10001ea8:	01400784 	movi	r5,30
10001eac:	0006d300 	call	10006d30 <__divsi3>
10001eb0:	1021883a 	mov	r16,r2
10001eb4:	e4b95117 	ldw	r18,-6844(fp)
10001eb8:	8809883a 	mov	r4,r17
10001ebc:	01400544 	movi	r5,21
10001ec0:	0006df00 	call	10006df0 <__mulsi3>
10001ec4:	1023883a 	mov	r17,r2
10001ec8:	9009883a 	mov	r4,r18
10001ecc:	01405404 	movi	r5,336
10001ed0:	0006df00 	call	10006df0 <__mulsi3>
10001ed4:	8885883a 	add	r2,r17,r2
10001ed8:	1405883a 	add	r2,r2,r16
10001edc:	1085883a 	add	r2,r2,r2
10001ee0:	1085883a 	add	r2,r2,r2
10001ee4:	e0f91304 	addi	r3,fp,-7092
10001ee8:	1885883a 	add	r2,r3,r2
10001eec:	10805a04 	addi	r2,r2,360
10001ef0:	10800017 	ldw	r2,0(r2)
10001ef4:	10001f1e 	bne	r2,zero,10001f74 <main+0x1c40>
10001ef8:	0080e004 	movi	r2,896
10001efc:	10800017 	ldw	r2,0(r2)
10001f00:	10800144 	addi	r2,r2,5
10001f04:	1009883a 	mov	r4,r2
10001f08:	01400784 	movi	r5,30
10001f0c:	0006d300 	call	10006d30 <__divsi3>
10001f10:	1023883a 	mov	r17,r2
10001f14:	0080e404 	movi	r2,912
10001f18:	10800017 	ldw	r2,0(r2)
10001f1c:	10800844 	addi	r2,r2,33
10001f20:	1009883a 	mov	r4,r2
10001f24:	01400784 	movi	r5,30
10001f28:	0006d300 	call	10006d30 <__divsi3>
10001f2c:	1021883a 	mov	r16,r2
10001f30:	e4b95117 	ldw	r18,-6844(fp)
10001f34:	8809883a 	mov	r4,r17
10001f38:	01400544 	movi	r5,21
10001f3c:	0006df00 	call	10006df0 <__mulsi3>
10001f40:	1023883a 	mov	r17,r2
10001f44:	9009883a 	mov	r4,r18
10001f48:	01405404 	movi	r5,336
10001f4c:	0006df00 	call	10006df0 <__mulsi3>
10001f50:	8885883a 	add	r2,r17,r2
10001f54:	1405883a 	add	r2,r2,r16
10001f58:	1085883a 	add	r2,r2,r2
10001f5c:	1085883a 	add	r2,r2,r2
10001f60:	e0f91304 	addi	r3,fp,-7092
10001f64:	1885883a 	add	r2,r3,r2
10001f68:	10805a04 	addi	r2,r2,360
10001f6c:	10800017 	ldw	r2,0(r2)
10001f70:	10000426 	beq	r2,zero,10001f84 <main+0x1c50>
    	y_inc = -y_inc;
10001f74:	e0b91617 	ldw	r2,-7080(fp)
10001f78:	10a0003c 	xorhi	r2,r2,32768
10001f7c:	e0b91615 	stw	r2,-7080(fp)
    	let_go = False;
10001f80:	e0391915 	stw	zero,-7068(fp)
    }


    //Bullet code
    if(!((keycode&0x0000FF)==0x0d || (keycode&0x00FF00)>>8 == 0x0d || (keycode&0xFF0000)>>16 == 0x0d)){
10001f84:	e0b94917 	ldw	r2,-6876(fp)
10001f88:	10803fcc 	andi	r2,r2,255
10001f8c:	10800360 	cmpeqi	r2,r2,13
10001f90:	10000c1e 	bne	r2,zero,10001fc4 <main+0x1c90>
10001f94:	e0b94917 	ldw	r2,-6876(fp)
10001f98:	10bfc00c 	andi	r2,r2,65280
10001f9c:	1005d23a 	srai	r2,r2,8
10001fa0:	10800360 	cmpeqi	r2,r2,13
10001fa4:	1000071e 	bne	r2,zero,10001fc4 <main+0x1c90>
10001fa8:	e0b94917 	ldw	r2,-6876(fp)
10001fac:	10803fec 	andhi	r2,r2,255
10001fb0:	1005d43a 	srai	r2,r2,16
10001fb4:	10800360 	cmpeqi	r2,r2,13
10001fb8:	1000021e 	bne	r2,zero,10001fc4 <main+0x1c90>
    	bullet_en = True;
10001fbc:	00800044 	movi	r2,1
10001fc0:	e0b92615 	stw	r2,-7016(fp)
    }
    if(((keycode&0x0000FF)==0x0d || (keycode&0x00FF00)>>8 == 0x0d || (keycode&0xFF0000)>>16 == 0x0d) && bullet_en == True){
10001fc4:	e0b94917 	ldw	r2,-6876(fp)
10001fc8:	10803fcc 	andi	r2,r2,255
10001fcc:	10800360 	cmpeqi	r2,r2,13
10001fd0:	10000a1e 	bne	r2,zero,10001ffc <main+0x1cc8>
10001fd4:	e0b94917 	ldw	r2,-6876(fp)
10001fd8:	10bfc00c 	andi	r2,r2,65280
10001fdc:	1005d23a 	srai	r2,r2,8
10001fe0:	10800360 	cmpeqi	r2,r2,13
10001fe4:	1000051e 	bne	r2,zero,10001ffc <main+0x1cc8>
10001fe8:	e0b94917 	ldw	r2,-6876(fp)
10001fec:	10803fec 	andhi	r2,r2,255
10001ff0:	1005d43a 	srai	r2,r2,16
10001ff4:	10800358 	cmpnei	r2,r2,13
10001ff8:	1000f01e 	bne	r2,zero,100023bc <main+0x2088>
10001ffc:	e0b92617 	ldw	r2,-7016(fp)
10002000:	10800058 	cmpnei	r2,r2,1
10002004:	1000ed1e 	bne	r2,zero,100023bc <main+0x2088>
    	if(*BUL1_EN == True && *BUL2_EN == True && *BUL3_EN == False){
10002008:	00808c04 	movi	r2,560
1000200c:	10800017 	ldw	r2,0(r2)
10002010:	10800058 	cmpnei	r2,r2,1
10002014:	10004f1e 	bne	r2,zero,10002154 <main+0x1e20>
10002018:	00808004 	movi	r2,512
1000201c:	10800017 	ldw	r2,0(r2)
10002020:	10800058 	cmpnei	r2,r2,1
10002024:	10004b1e 	bne	r2,zero,10002154 <main+0x1e20>
10002028:	00807404 	movi	r2,464
1000202c:	10800017 	ldw	r2,0(r2)
10002030:	1000481e 	bne	r2,zero,10002154 <main+0x1e20>
    		if(*SAMUS_DIR == 1){
10002034:	00805804 	movi	r2,352
10002038:	10800003 	ldbu	r2,0(r2)
1000203c:	10803fcc 	andi	r2,r2,255
10002040:	1080201c 	xori	r2,r2,128
10002044:	10bfe004 	addi	r2,r2,-128
10002048:	10800058 	cmpnei	r2,r2,1
1000204c:	10000f1e 	bne	r2,zero,1000208c <main+0x1d58>
    			*BUL3_EN = True;
10002050:	00807404 	movi	r2,464
10002054:	00c00044 	movi	r3,1
10002058:	10c00015 	stw	r3,0(r2)
    			*BUL3_X = *SAMUS_X;
1000205c:	00807004 	movi	r2,448
10002060:	00c0e404 	movi	r3,912
10002064:	18c00017 	ldw	r3,0(r3)
10002068:	10c00015 	stw	r3,0(r2)
    			*BUL3_Y = *SAMUS_Y+25;
1000206c:	00806c04 	movi	r2,432
10002070:	00c0e004 	movi	r3,896
10002074:	18c00017 	ldw	r3,0(r3)
10002078:	18c00644 	addi	r3,r3,25
1000207c:	10c00015 	stw	r3,0(r2)
    			bul3Left = True;
10002080:	00800044 	movi	r2,1
10002084:	e0b92315 	stw	r2,-7028(fp)
10002088:	00000e06 	br	100020c4 <main+0x1d90>
    		}
    		else{
    			*BUL3_EN = True;
1000208c:	00807404 	movi	r2,464
10002090:	00c00044 	movi	r3,1
10002094:	10c00015 	stw	r3,0(r2)
    			*BUL3_X = *SAMUS_X+30;
10002098:	00807004 	movi	r2,448
1000209c:	00c0e404 	movi	r3,912
100020a0:	18c00017 	ldw	r3,0(r3)
100020a4:	18c00784 	addi	r3,r3,30
100020a8:	10c00015 	stw	r3,0(r2)
    			*BUL3_Y = *SAMUS_Y+25;
100020ac:	00806c04 	movi	r2,432
100020b0:	00c0e004 	movi	r3,896
100020b4:	18c00017 	ldw	r3,0(r3)
100020b8:	18c00644 	addi	r3,r3,25
100020bc:	10c00015 	stw	r3,0(r2)
    			bul3Left = False;
100020c0:	e0392315 	stw	zero,-7028(fp)
    		}
			if(grounded == False){
100020c4:	e0b91817 	ldw	r2,-7072(fp)
100020c8:	1000051e 	bne	r2,zero,100020e0 <main+0x1dac>
				*BUL3_Y = *SAMUS_Y+22;
100020cc:	00806c04 	movi	r2,432
100020d0:	00c0e004 	movi	r3,896
100020d4:	18c00017 	ldw	r3,0(r3)
100020d8:	18c00584 	addi	r3,r3,22
100020dc:	10c00015 	stw	r3,0(r2)
			}

    		if((keycode&0x0000FF)==0x1A || (keycode&0x00FF00)>>8 == 0x1A || (keycode&0xFF0000)>>16 == 0x1A){
100020e0:	e0b94917 	ldw	r2,-6876(fp)
100020e4:	10803fcc 	andi	r2,r2,255
100020e8:	108006a0 	cmpeqi	r2,r2,26
100020ec:	10000a1e 	bne	r2,zero,10002118 <main+0x1de4>
100020f0:	e0b94917 	ldw	r2,-6876(fp)
100020f4:	10bfc00c 	andi	r2,r2,65280
100020f8:	1005d23a 	srai	r2,r2,8
100020fc:	108006a0 	cmpeqi	r2,r2,26
10002100:	1000051e 	bne	r2,zero,10002118 <main+0x1de4>
10002104:	e0b94917 	ldw	r2,-6876(fp)
10002108:	10803fec 	andhi	r2,r2,255
1000210c:	1005d43a 	srai	r2,r2,16
10002110:	10800698 	cmpnei	r2,r2,26
10002114:	10000c1e 	bne	r2,zero,10002148 <main+0x1e14>
    			bul3Up = True;
10002118:	00800044 	movi	r2,1
1000211c:	e0b92415 	stw	r2,-7024(fp)
    			*BUL3_Y = *SAMUS_Y;
10002120:	00806c04 	movi	r2,432
10002124:	00c0e004 	movi	r3,896
10002128:	18c00017 	ldw	r3,0(r3)
1000212c:	10c00015 	stw	r3,0(r2)
    			*BUL3_X = *SAMUS_X+18;
10002130:	00807004 	movi	r2,448
10002134:	00c0e404 	movi	r3,912
10002138:	18c00017 	ldw	r3,0(r3)
1000213c:	18c00484 	addi	r3,r3,18
10002140:	10c00015 	stw	r3,0(r2)
10002144:	00000106 	br	1000214c <main+0x1e18>
    		}
    		else{
    			bul3Up = False;
10002148:	e0392415 	stw	zero,-7024(fp)
    		}
    		bul3start = 0;
1000214c:	e0392515 	stw	zero,-7020(fp)
10002150:	00009906 	br	100023b8 <main+0x2084>
    	}
    	else if(*BUL1_EN == True && *BUL2_EN == False){
10002154:	00808c04 	movi	r2,560
10002158:	10800017 	ldw	r2,0(r2)
1000215c:	10800058 	cmpnei	r2,r2,1
10002160:	10004b1e 	bne	r2,zero,10002290 <main+0x1f5c>
10002164:	00808004 	movi	r2,512
10002168:	10800017 	ldw	r2,0(r2)
1000216c:	1000481e 	bne	r2,zero,10002290 <main+0x1f5c>

			if(*SAMUS_DIR == 1){
10002170:	00805804 	movi	r2,352
10002174:	10800003 	ldbu	r2,0(r2)
10002178:	10803fcc 	andi	r2,r2,255
1000217c:	1080201c 	xori	r2,r2,128
10002180:	10bfe004 	addi	r2,r2,-128
10002184:	10800058 	cmpnei	r2,r2,1
10002188:	10000f1e 	bne	r2,zero,100021c8 <main+0x1e94>
				*BUL2_EN = True;
1000218c:	00808004 	movi	r2,512
10002190:	00c00044 	movi	r3,1
10002194:	10c00015 	stw	r3,0(r2)
				*BUL2_X = *SAMUS_X;
10002198:	00807c04 	movi	r2,496
1000219c:	00c0e404 	movi	r3,912
100021a0:	18c00017 	ldw	r3,0(r3)
100021a4:	10c00015 	stw	r3,0(r2)
				*BUL2_Y = *SAMUS_Y+25;
100021a8:	00807804 	movi	r2,480
100021ac:	00c0e004 	movi	r3,896
100021b0:	18c00017 	ldw	r3,0(r3)
100021b4:	18c00644 	addi	r3,r3,25
100021b8:	10c00015 	stw	r3,0(r2)
				bul2Left = True;
100021bc:	00800044 	movi	r2,1
100021c0:	e0b92015 	stw	r2,-7040(fp)
100021c4:	00000e06 	br	10002200 <main+0x1ecc>
			}
			else{
				*BUL2_EN = True;
100021c8:	00808004 	movi	r2,512
100021cc:	00c00044 	movi	r3,1
100021d0:	10c00015 	stw	r3,0(r2)
				*BUL2_X = *SAMUS_X+30;
100021d4:	00807c04 	movi	r2,496
100021d8:	00c0e404 	movi	r3,912
100021dc:	18c00017 	ldw	r3,0(r3)
100021e0:	18c00784 	addi	r3,r3,30
100021e4:	10c00015 	stw	r3,0(r2)
				*BUL2_Y = *SAMUS_Y+25;
100021e8:	00807804 	movi	r2,480
100021ec:	00c0e004 	movi	r3,896
100021f0:	18c00017 	ldw	r3,0(r3)
100021f4:	18c00644 	addi	r3,r3,25
100021f8:	10c00015 	stw	r3,0(r2)
				bul2Left = False;
100021fc:	e0392015 	stw	zero,-7040(fp)
			}
			if(grounded == False){
10002200:	e0b91817 	ldw	r2,-7072(fp)
10002204:	1000051e 	bne	r2,zero,1000221c <main+0x1ee8>
				*BUL2_Y = *SAMUS_Y+22;
10002208:	00807804 	movi	r2,480
1000220c:	00c0e004 	movi	r3,896
10002210:	18c00017 	ldw	r3,0(r3)
10002214:	18c00584 	addi	r3,r3,22
10002218:	10c00015 	stw	r3,0(r2)
			}

			if((keycode&0x0000FF)==0x1A || (keycode&0x00FF00)>>8 == 0x1A || (keycode&0xFF0000)>>16 == 0x1A){
1000221c:	e0b94917 	ldw	r2,-6876(fp)
10002220:	10803fcc 	andi	r2,r2,255
10002224:	108006a0 	cmpeqi	r2,r2,26
10002228:	10000a1e 	bne	r2,zero,10002254 <main+0x1f20>
1000222c:	e0b94917 	ldw	r2,-6876(fp)
10002230:	10bfc00c 	andi	r2,r2,65280
10002234:	1005d23a 	srai	r2,r2,8
10002238:	108006a0 	cmpeqi	r2,r2,26
1000223c:	1000051e 	bne	r2,zero,10002254 <main+0x1f20>
10002240:	e0b94917 	ldw	r2,-6876(fp)
10002244:	10803fec 	andhi	r2,r2,255
10002248:	1005d43a 	srai	r2,r2,16
1000224c:	10800698 	cmpnei	r2,r2,26
10002250:	10000c1e 	bne	r2,zero,10002284 <main+0x1f50>
				bul2Up = True;
10002254:	00800044 	movi	r2,1
10002258:	e0b92115 	stw	r2,-7036(fp)
				*BUL2_Y = *SAMUS_Y;
1000225c:	00807804 	movi	r2,480
10002260:	00c0e004 	movi	r3,896
10002264:	18c00017 	ldw	r3,0(r3)
10002268:	10c00015 	stw	r3,0(r2)
				*BUL2_X = *SAMUS_X+18;
1000226c:	00807c04 	movi	r2,496
10002270:	00c0e404 	movi	r3,912
10002274:	18c00017 	ldw	r3,0(r3)
10002278:	18c00484 	addi	r3,r3,18
1000227c:	10c00015 	stw	r3,0(r2)
10002280:	00000106 	br	10002288 <main+0x1f54>
			}
			else{
				bul2Up = False;
10002284:	e0392115 	stw	zero,-7036(fp)
			}
			bul2start = 0;
10002288:	e0392215 	stw	zero,-7032(fp)
1000228c:	00004a06 	br	100023b8 <main+0x2084>
		}
    	else if(*BUL1_EN == False){
10002290:	00808c04 	movi	r2,560
10002294:	10800017 	ldw	r2,0(r2)
10002298:	1000471e 	bne	r2,zero,100023b8 <main+0x2084>
			if(*SAMUS_DIR == 1){
1000229c:	00805804 	movi	r2,352
100022a0:	10800003 	ldbu	r2,0(r2)
100022a4:	10803fcc 	andi	r2,r2,255
100022a8:	1080201c 	xori	r2,r2,128
100022ac:	10bfe004 	addi	r2,r2,-128
100022b0:	10800058 	cmpnei	r2,r2,1
100022b4:	10000f1e 	bne	r2,zero,100022f4 <main+0x1fc0>
				*BUL1_EN = True;
100022b8:	00808c04 	movi	r2,560
100022bc:	00c00044 	movi	r3,1
100022c0:	10c00015 	stw	r3,0(r2)
				*BUL1_X = *SAMUS_X;
100022c4:	00808804 	movi	r2,544
100022c8:	00c0e404 	movi	r3,912
100022cc:	18c00017 	ldw	r3,0(r3)
100022d0:	10c00015 	stw	r3,0(r2)
				*BUL1_Y = *SAMUS_Y+25;
100022d4:	00808404 	movi	r2,528
100022d8:	00c0e004 	movi	r3,896
100022dc:	18c00017 	ldw	r3,0(r3)
100022e0:	18c00644 	addi	r3,r3,25
100022e4:	10c00015 	stw	r3,0(r2)
				bul1Left = True;
100022e8:	00800044 	movi	r2,1
100022ec:	e0b91d15 	stw	r2,-7052(fp)
100022f0:	00000e06 	br	1000232c <main+0x1ff8>
			}
			else{
				*BUL1_EN = True;
100022f4:	00808c04 	movi	r2,560
100022f8:	00c00044 	movi	r3,1
100022fc:	10c00015 	stw	r3,0(r2)
				*BUL1_X = *SAMUS_X+30;
10002300:	00808804 	movi	r2,544
10002304:	00c0e404 	movi	r3,912
10002308:	18c00017 	ldw	r3,0(r3)
1000230c:	18c00784 	addi	r3,r3,30
10002310:	10c00015 	stw	r3,0(r2)
				*BUL1_Y = *SAMUS_Y+25;
10002314:	00808404 	movi	r2,528
10002318:	00c0e004 	movi	r3,896
1000231c:	18c00017 	ldw	r3,0(r3)
10002320:	18c00644 	addi	r3,r3,25
10002324:	10c00015 	stw	r3,0(r2)
				bul1Left = False;
10002328:	e0391d15 	stw	zero,-7052(fp)
			}
			if(grounded == False){
1000232c:	e0b91817 	ldw	r2,-7072(fp)
10002330:	1000051e 	bne	r2,zero,10002348 <main+0x2014>
				*BUL1_Y = *SAMUS_Y+22;
10002334:	00808404 	movi	r2,528
10002338:	00c0e004 	movi	r3,896
1000233c:	18c00017 	ldw	r3,0(r3)
10002340:	18c00584 	addi	r3,r3,22
10002344:	10c00015 	stw	r3,0(r2)
			}

			bul1start = 0;
10002348:	e0391f15 	stw	zero,-7044(fp)
			if((keycode&0x0000FF)==0x1A || (keycode&0x00FF00)>>8 == 0x1A || (keycode&0xFF0000)>>16 == 0x1A){
1000234c:	e0b94917 	ldw	r2,-6876(fp)
10002350:	10803fcc 	andi	r2,r2,255
10002354:	108006a0 	cmpeqi	r2,r2,26
10002358:	10000a1e 	bne	r2,zero,10002384 <main+0x2050>
1000235c:	e0b94917 	ldw	r2,-6876(fp)
10002360:	10bfc00c 	andi	r2,r2,65280
10002364:	1005d23a 	srai	r2,r2,8
10002368:	108006a0 	cmpeqi	r2,r2,26
1000236c:	1000051e 	bne	r2,zero,10002384 <main+0x2050>
10002370:	e0b94917 	ldw	r2,-6876(fp)
10002374:	10803fec 	andhi	r2,r2,255
10002378:	1005d43a 	srai	r2,r2,16
1000237c:	10800698 	cmpnei	r2,r2,26
10002380:	10000c1e 	bne	r2,zero,100023b4 <main+0x2080>
				bul1Up = True;
10002384:	00800044 	movi	r2,1
10002388:	e0b91e15 	stw	r2,-7048(fp)
				*BUL1_Y = *SAMUS_Y;
1000238c:	00808404 	movi	r2,528
10002390:	00c0e004 	movi	r3,896
10002394:	18c00017 	ldw	r3,0(r3)
10002398:	10c00015 	stw	r3,0(r2)
				*BUL1_X = *SAMUS_X+18;
1000239c:	00808804 	movi	r2,544
100023a0:	00c0e404 	movi	r3,912
100023a4:	18c00017 	ldw	r3,0(r3)
100023a8:	18c00484 	addi	r3,r3,18
100023ac:	10c00015 	stw	r3,0(r2)
100023b0:	00000106 	br	100023b8 <main+0x2084>
			}
			else{
				bul1Up = False;
100023b4:	e0391e15 	stw	zero,-7048(fp)
			}
		}
    	bullet_en = False;
100023b8:	e0392615 	stw	zero,-7016(fp)
    }
    //Left collisions
    if(*BUL3_EN == True && bul1Up == False && bul3Left == True && (scene[sceneNum][(*BUL3_Y)/30][(*BUL3_X-8)/30]!=0 || scene[sceneNum][(*BUL3_Y+8)/30][(*BUL3_X-8)/30]!=0)){
100023bc:	00807404 	movi	r2,464
100023c0:	10800017 	ldw	r2,0(r2)
100023c4:	10800058 	cmpnei	r2,r2,1
100023c8:	1000441e 	bne	r2,zero,100024dc <main+0x21a8>
100023cc:	e0b91e17 	ldw	r2,-7048(fp)
100023d0:	1000421e 	bne	r2,zero,100024dc <main+0x21a8>
100023d4:	e0b92317 	ldw	r2,-7028(fp)
100023d8:	10800058 	cmpnei	r2,r2,1
100023dc:	10003f1e 	bne	r2,zero,100024dc <main+0x21a8>
100023e0:	00806c04 	movi	r2,432
100023e4:	10800017 	ldw	r2,0(r2)
100023e8:	1009883a 	mov	r4,r2
100023ec:	01400784 	movi	r5,30
100023f0:	0006d300 	call	10006d30 <__divsi3>
100023f4:	1023883a 	mov	r17,r2
100023f8:	00807004 	movi	r2,448
100023fc:	10800017 	ldw	r2,0(r2)
10002400:	10bffe04 	addi	r2,r2,-8
10002404:	1009883a 	mov	r4,r2
10002408:	01400784 	movi	r5,30
1000240c:	0006d300 	call	10006d30 <__divsi3>
10002410:	1021883a 	mov	r16,r2
10002414:	e4b95117 	ldw	r18,-6844(fp)
10002418:	8809883a 	mov	r4,r17
1000241c:	01400544 	movi	r5,21
10002420:	0006df00 	call	10006df0 <__mulsi3>
10002424:	1023883a 	mov	r17,r2
10002428:	9009883a 	mov	r4,r18
1000242c:	01405404 	movi	r5,336
10002430:	0006df00 	call	10006df0 <__mulsi3>
10002434:	8885883a 	add	r2,r17,r2
10002438:	1405883a 	add	r2,r2,r16
1000243c:	1085883a 	add	r2,r2,r2
10002440:	1085883a 	add	r2,r2,r2
10002444:	e0f91304 	addi	r3,fp,-7092
10002448:	1885883a 	add	r2,r3,r2
1000244c:	10805a04 	addi	r2,r2,360
10002450:	10800017 	ldw	r2,0(r2)
10002454:	10001f1e 	bne	r2,zero,100024d4 <main+0x21a0>
10002458:	00806c04 	movi	r2,432
1000245c:	10800017 	ldw	r2,0(r2)
10002460:	10800204 	addi	r2,r2,8
10002464:	1009883a 	mov	r4,r2
10002468:	01400784 	movi	r5,30
1000246c:	0006d300 	call	10006d30 <__divsi3>
10002470:	1023883a 	mov	r17,r2
10002474:	00807004 	movi	r2,448
10002478:	10800017 	ldw	r2,0(r2)
1000247c:	10bffe04 	addi	r2,r2,-8
10002480:	1009883a 	mov	r4,r2
10002484:	01400784 	movi	r5,30
10002488:	0006d300 	call	10006d30 <__divsi3>
1000248c:	1021883a 	mov	r16,r2
10002490:	e4b95117 	ldw	r18,-6844(fp)
10002494:	8809883a 	mov	r4,r17
10002498:	01400544 	movi	r5,21
1000249c:	0006df00 	call	10006df0 <__mulsi3>
100024a0:	1023883a 	mov	r17,r2
100024a4:	9009883a 	mov	r4,r18
100024a8:	01405404 	movi	r5,336
100024ac:	0006df00 	call	10006df0 <__mulsi3>
100024b0:	8885883a 	add	r2,r17,r2
100024b4:	1405883a 	add	r2,r2,r16
100024b8:	1085883a 	add	r2,r2,r2
100024bc:	1085883a 	add	r2,r2,r2
100024c0:	e0f91304 	addi	r3,fp,-7092
100024c4:	1885883a 	add	r2,r3,r2
100024c8:	10805a04 	addi	r2,r2,360
100024cc:	10800017 	ldw	r2,0(r2)
100024d0:	10000226 	beq	r2,zero,100024dc <main+0x21a8>
    	*BUL3_EN = False;
100024d4:	00807404 	movi	r2,464
100024d8:	10000015 	stw	zero,0(r2)
    }
    if(*BUL1_EN == True && bul1Up == False && bul1Left == True && (scene[sceneNum][(*BUL1_Y)/30][(*BUL1_X-8)/30]!=0 || scene[sceneNum][(*BUL1_Y+8)/30][(*BUL1_X-8)/30]!=0)){
100024dc:	00808c04 	movi	r2,560
100024e0:	10800017 	ldw	r2,0(r2)
100024e4:	10800058 	cmpnei	r2,r2,1
100024e8:	1000441e 	bne	r2,zero,100025fc <main+0x22c8>
100024ec:	e0b91e17 	ldw	r2,-7048(fp)
100024f0:	1000421e 	bne	r2,zero,100025fc <main+0x22c8>
100024f4:	e0b91d17 	ldw	r2,-7052(fp)
100024f8:	10800058 	cmpnei	r2,r2,1
100024fc:	10003f1e 	bne	r2,zero,100025fc <main+0x22c8>
10002500:	00808404 	movi	r2,528
10002504:	10800017 	ldw	r2,0(r2)
10002508:	1009883a 	mov	r4,r2
1000250c:	01400784 	movi	r5,30
10002510:	0006d300 	call	10006d30 <__divsi3>
10002514:	1023883a 	mov	r17,r2
10002518:	00808804 	movi	r2,544
1000251c:	10800017 	ldw	r2,0(r2)
10002520:	10bffe04 	addi	r2,r2,-8
10002524:	1009883a 	mov	r4,r2
10002528:	01400784 	movi	r5,30
1000252c:	0006d300 	call	10006d30 <__divsi3>
10002530:	1021883a 	mov	r16,r2
10002534:	e4b95117 	ldw	r18,-6844(fp)
10002538:	8809883a 	mov	r4,r17
1000253c:	01400544 	movi	r5,21
10002540:	0006df00 	call	10006df0 <__mulsi3>
10002544:	1023883a 	mov	r17,r2
10002548:	9009883a 	mov	r4,r18
1000254c:	01405404 	movi	r5,336
10002550:	0006df00 	call	10006df0 <__mulsi3>
10002554:	8885883a 	add	r2,r17,r2
10002558:	1405883a 	add	r2,r2,r16
1000255c:	1085883a 	add	r2,r2,r2
10002560:	1085883a 	add	r2,r2,r2
10002564:	e0f91304 	addi	r3,fp,-7092
10002568:	1885883a 	add	r2,r3,r2
1000256c:	10805a04 	addi	r2,r2,360
10002570:	10800017 	ldw	r2,0(r2)
10002574:	10001f1e 	bne	r2,zero,100025f4 <main+0x22c0>
10002578:	00808404 	movi	r2,528
1000257c:	10800017 	ldw	r2,0(r2)
10002580:	10800204 	addi	r2,r2,8
10002584:	1009883a 	mov	r4,r2
10002588:	01400784 	movi	r5,30
1000258c:	0006d300 	call	10006d30 <__divsi3>
10002590:	1023883a 	mov	r17,r2
10002594:	00808804 	movi	r2,544
10002598:	10800017 	ldw	r2,0(r2)
1000259c:	10bffe04 	addi	r2,r2,-8
100025a0:	1009883a 	mov	r4,r2
100025a4:	01400784 	movi	r5,30
100025a8:	0006d300 	call	10006d30 <__divsi3>
100025ac:	1021883a 	mov	r16,r2
100025b0:	e4b95117 	ldw	r18,-6844(fp)
100025b4:	8809883a 	mov	r4,r17
100025b8:	01400544 	movi	r5,21
100025bc:	0006df00 	call	10006df0 <__mulsi3>
100025c0:	1023883a 	mov	r17,r2
100025c4:	9009883a 	mov	r4,r18
100025c8:	01405404 	movi	r5,336
100025cc:	0006df00 	call	10006df0 <__mulsi3>
100025d0:	8885883a 	add	r2,r17,r2
100025d4:	1405883a 	add	r2,r2,r16
100025d8:	1085883a 	add	r2,r2,r2
100025dc:	1085883a 	add	r2,r2,r2
100025e0:	e0f91304 	addi	r3,fp,-7092
100025e4:	1885883a 	add	r2,r3,r2
100025e8:	10805a04 	addi	r2,r2,360
100025ec:	10800017 	ldw	r2,0(r2)
100025f0:	10000226 	beq	r2,zero,100025fc <main+0x22c8>
		*BUL1_EN = False;
100025f4:	00808c04 	movi	r2,560
100025f8:	10000015 	stw	zero,0(r2)
	}
    if(*BUL2_EN == True && bul2Up == False && bul2Left == True && (scene[sceneNum][(*BUL2_Y)/30][(*BUL2_X-8)/30]!=0 || scene[sceneNum][(*BUL2_Y+8)/30][(*BUL2_X-8)/30]!=0)){
100025fc:	00808004 	movi	r2,512
10002600:	10800017 	ldw	r2,0(r2)
10002604:	10800058 	cmpnei	r2,r2,1
10002608:	1000441e 	bne	r2,zero,1000271c <main+0x23e8>
1000260c:	e0b92117 	ldw	r2,-7036(fp)
10002610:	1000421e 	bne	r2,zero,1000271c <main+0x23e8>
10002614:	e0b92017 	ldw	r2,-7040(fp)
10002618:	10800058 	cmpnei	r2,r2,1
1000261c:	10003f1e 	bne	r2,zero,1000271c <main+0x23e8>
10002620:	00807804 	movi	r2,480
10002624:	10800017 	ldw	r2,0(r2)
10002628:	1009883a 	mov	r4,r2
1000262c:	01400784 	movi	r5,30
10002630:	0006d300 	call	10006d30 <__divsi3>
10002634:	1023883a 	mov	r17,r2
10002638:	00807c04 	movi	r2,496
1000263c:	10800017 	ldw	r2,0(r2)
10002640:	10bffe04 	addi	r2,r2,-8
10002644:	1009883a 	mov	r4,r2
10002648:	01400784 	movi	r5,30
1000264c:	0006d300 	call	10006d30 <__divsi3>
10002650:	1021883a 	mov	r16,r2
10002654:	e4b95117 	ldw	r18,-6844(fp)
10002658:	8809883a 	mov	r4,r17
1000265c:	01400544 	movi	r5,21
10002660:	0006df00 	call	10006df0 <__mulsi3>
10002664:	1023883a 	mov	r17,r2
10002668:	9009883a 	mov	r4,r18
1000266c:	01405404 	movi	r5,336
10002670:	0006df00 	call	10006df0 <__mulsi3>
10002674:	8885883a 	add	r2,r17,r2
10002678:	1405883a 	add	r2,r2,r16
1000267c:	1085883a 	add	r2,r2,r2
10002680:	1085883a 	add	r2,r2,r2
10002684:	e0f91304 	addi	r3,fp,-7092
10002688:	1885883a 	add	r2,r3,r2
1000268c:	10805a04 	addi	r2,r2,360
10002690:	10800017 	ldw	r2,0(r2)
10002694:	10001f1e 	bne	r2,zero,10002714 <main+0x23e0>
10002698:	00807804 	movi	r2,480
1000269c:	10800017 	ldw	r2,0(r2)
100026a0:	10800204 	addi	r2,r2,8
100026a4:	1009883a 	mov	r4,r2
100026a8:	01400784 	movi	r5,30
100026ac:	0006d300 	call	10006d30 <__divsi3>
100026b0:	1023883a 	mov	r17,r2
100026b4:	00807c04 	movi	r2,496
100026b8:	10800017 	ldw	r2,0(r2)
100026bc:	10bffe04 	addi	r2,r2,-8
100026c0:	1009883a 	mov	r4,r2
100026c4:	01400784 	movi	r5,30
100026c8:	0006d300 	call	10006d30 <__divsi3>
100026cc:	1021883a 	mov	r16,r2
100026d0:	e4b95117 	ldw	r18,-6844(fp)
100026d4:	8809883a 	mov	r4,r17
100026d8:	01400544 	movi	r5,21
100026dc:	0006df00 	call	10006df0 <__mulsi3>
100026e0:	1023883a 	mov	r17,r2
100026e4:	9009883a 	mov	r4,r18
100026e8:	01405404 	movi	r5,336
100026ec:	0006df00 	call	10006df0 <__mulsi3>
100026f0:	8885883a 	add	r2,r17,r2
100026f4:	1405883a 	add	r2,r2,r16
100026f8:	1085883a 	add	r2,r2,r2
100026fc:	1085883a 	add	r2,r2,r2
10002700:	e0f91304 	addi	r3,fp,-7092
10002704:	1885883a 	add	r2,r3,r2
10002708:	10805a04 	addi	r2,r2,360
1000270c:	10800017 	ldw	r2,0(r2)
10002710:	10000226 	beq	r2,zero,1000271c <main+0x23e8>
		*BUL2_EN = False;
10002714:	00808004 	movi	r2,512
10002718:	10000015 	stw	zero,0(r2)
	}
    //Right collisions
    if(*BUL3_EN == True && bul3Up == False && bul3Left == False && (scene[sceneNum][(*BUL3_Y)/30][(*BUL3_X+18)/30]!=0 || scene[sceneNum][(*BUL3_Y+8)/30][(*BUL3_X+18)/30]!=0)){
1000271c:	00807404 	movi	r2,464
10002720:	10800017 	ldw	r2,0(r2)
10002724:	10800058 	cmpnei	r2,r2,1
10002728:	1000431e 	bne	r2,zero,10002838 <main+0x2504>
1000272c:	e0b92417 	ldw	r2,-7024(fp)
10002730:	1000411e 	bne	r2,zero,10002838 <main+0x2504>
10002734:	e0b92317 	ldw	r2,-7028(fp)
10002738:	10003f1e 	bne	r2,zero,10002838 <main+0x2504>
1000273c:	00806c04 	movi	r2,432
10002740:	10800017 	ldw	r2,0(r2)
10002744:	1009883a 	mov	r4,r2
10002748:	01400784 	movi	r5,30
1000274c:	0006d300 	call	10006d30 <__divsi3>
10002750:	1023883a 	mov	r17,r2
10002754:	00807004 	movi	r2,448
10002758:	10800017 	ldw	r2,0(r2)
1000275c:	10800484 	addi	r2,r2,18
10002760:	1009883a 	mov	r4,r2
10002764:	01400784 	movi	r5,30
10002768:	0006d300 	call	10006d30 <__divsi3>
1000276c:	1021883a 	mov	r16,r2
10002770:	e4b95117 	ldw	r18,-6844(fp)
10002774:	8809883a 	mov	r4,r17
10002778:	01400544 	movi	r5,21
1000277c:	0006df00 	call	10006df0 <__mulsi3>
10002780:	1023883a 	mov	r17,r2
10002784:	9009883a 	mov	r4,r18
10002788:	01405404 	movi	r5,336
1000278c:	0006df00 	call	10006df0 <__mulsi3>
10002790:	8885883a 	add	r2,r17,r2
10002794:	1405883a 	add	r2,r2,r16
10002798:	1085883a 	add	r2,r2,r2
1000279c:	1085883a 	add	r2,r2,r2
100027a0:	e0f91304 	addi	r3,fp,-7092
100027a4:	1885883a 	add	r2,r3,r2
100027a8:	10805a04 	addi	r2,r2,360
100027ac:	10800017 	ldw	r2,0(r2)
100027b0:	10001f1e 	bne	r2,zero,10002830 <main+0x24fc>
100027b4:	00806c04 	movi	r2,432
100027b8:	10800017 	ldw	r2,0(r2)
100027bc:	10800204 	addi	r2,r2,8
100027c0:	1009883a 	mov	r4,r2
100027c4:	01400784 	movi	r5,30
100027c8:	0006d300 	call	10006d30 <__divsi3>
100027cc:	1023883a 	mov	r17,r2
100027d0:	00807004 	movi	r2,448
100027d4:	10800017 	ldw	r2,0(r2)
100027d8:	10800484 	addi	r2,r2,18
100027dc:	1009883a 	mov	r4,r2
100027e0:	01400784 	movi	r5,30
100027e4:	0006d300 	call	10006d30 <__divsi3>
100027e8:	1021883a 	mov	r16,r2
100027ec:	e4b95117 	ldw	r18,-6844(fp)
100027f0:	8809883a 	mov	r4,r17
100027f4:	01400544 	movi	r5,21
100027f8:	0006df00 	call	10006df0 <__mulsi3>
100027fc:	1023883a 	mov	r17,r2
10002800:	9009883a 	mov	r4,r18
10002804:	01405404 	movi	r5,336
10002808:	0006df00 	call	10006df0 <__mulsi3>
1000280c:	8885883a 	add	r2,r17,r2
10002810:	1405883a 	add	r2,r2,r16
10002814:	1085883a 	add	r2,r2,r2
10002818:	1085883a 	add	r2,r2,r2
1000281c:	e0f91304 	addi	r3,fp,-7092
10002820:	1885883a 	add	r2,r3,r2
10002824:	10805a04 	addi	r2,r2,360
10002828:	10800017 	ldw	r2,0(r2)
1000282c:	10000226 	beq	r2,zero,10002838 <main+0x2504>
		*BUL3_EN = False;
10002830:	00807404 	movi	r2,464
10002834:	10000015 	stw	zero,0(r2)
	}
	if(*BUL1_EN == True && bul1Up == False && bul1Left == False && (scene[sceneNum][(*BUL1_Y)/30][(*BUL1_X+18)/30]!=0 || scene[sceneNum][(*BUL1_Y+8)/30][((*BUL1_X+18)/30)]!=0)){
10002838:	00808c04 	movi	r2,560
1000283c:	10800017 	ldw	r2,0(r2)
10002840:	10800058 	cmpnei	r2,r2,1
10002844:	1000431e 	bne	r2,zero,10002954 <main+0x2620>
10002848:	e0b91e17 	ldw	r2,-7048(fp)
1000284c:	1000411e 	bne	r2,zero,10002954 <main+0x2620>
10002850:	e0b91d17 	ldw	r2,-7052(fp)
10002854:	10003f1e 	bne	r2,zero,10002954 <main+0x2620>
10002858:	00808404 	movi	r2,528
1000285c:	10800017 	ldw	r2,0(r2)
10002860:	1009883a 	mov	r4,r2
10002864:	01400784 	movi	r5,30
10002868:	0006d300 	call	10006d30 <__divsi3>
1000286c:	1023883a 	mov	r17,r2
10002870:	00808804 	movi	r2,544
10002874:	10800017 	ldw	r2,0(r2)
10002878:	10800484 	addi	r2,r2,18
1000287c:	1009883a 	mov	r4,r2
10002880:	01400784 	movi	r5,30
10002884:	0006d300 	call	10006d30 <__divsi3>
10002888:	1021883a 	mov	r16,r2
1000288c:	e4b95117 	ldw	r18,-6844(fp)
10002890:	8809883a 	mov	r4,r17
10002894:	01400544 	movi	r5,21
10002898:	0006df00 	call	10006df0 <__mulsi3>
1000289c:	1023883a 	mov	r17,r2
100028a0:	9009883a 	mov	r4,r18
100028a4:	01405404 	movi	r5,336
100028a8:	0006df00 	call	10006df0 <__mulsi3>
100028ac:	8885883a 	add	r2,r17,r2
100028b0:	1405883a 	add	r2,r2,r16
100028b4:	1085883a 	add	r2,r2,r2
100028b8:	1085883a 	add	r2,r2,r2
100028bc:	e0f91304 	addi	r3,fp,-7092
100028c0:	1885883a 	add	r2,r3,r2
100028c4:	10805a04 	addi	r2,r2,360
100028c8:	10800017 	ldw	r2,0(r2)
100028cc:	10001f1e 	bne	r2,zero,1000294c <main+0x2618>
100028d0:	00808404 	movi	r2,528
100028d4:	10800017 	ldw	r2,0(r2)
100028d8:	10800204 	addi	r2,r2,8
100028dc:	1009883a 	mov	r4,r2
100028e0:	01400784 	movi	r5,30
100028e4:	0006d300 	call	10006d30 <__divsi3>
100028e8:	1023883a 	mov	r17,r2
100028ec:	00808804 	movi	r2,544
100028f0:	10800017 	ldw	r2,0(r2)
100028f4:	10800484 	addi	r2,r2,18
100028f8:	1009883a 	mov	r4,r2
100028fc:	01400784 	movi	r5,30
10002900:	0006d300 	call	10006d30 <__divsi3>
10002904:	1021883a 	mov	r16,r2
10002908:	e4b95117 	ldw	r18,-6844(fp)
1000290c:	8809883a 	mov	r4,r17
10002910:	01400544 	movi	r5,21
10002914:	0006df00 	call	10006df0 <__mulsi3>
10002918:	1023883a 	mov	r17,r2
1000291c:	9009883a 	mov	r4,r18
10002920:	01405404 	movi	r5,336
10002924:	0006df00 	call	10006df0 <__mulsi3>
10002928:	8885883a 	add	r2,r17,r2
1000292c:	1405883a 	add	r2,r2,r16
10002930:	1085883a 	add	r2,r2,r2
10002934:	1085883a 	add	r2,r2,r2
10002938:	e0f91304 	addi	r3,fp,-7092
1000293c:	1885883a 	add	r2,r3,r2
10002940:	10805a04 	addi	r2,r2,360
10002944:	10800017 	ldw	r2,0(r2)
10002948:	10000226 	beq	r2,zero,10002954 <main+0x2620>
		*BUL1_EN = False;
1000294c:	00808c04 	movi	r2,560
10002950:	10000015 	stw	zero,0(r2)
	}
	if(*BUL2_EN == True && bul2Up == False && bul2Left == False && (scene[sceneNum][(*BUL2_Y)/30][(*BUL2_X+18)/30]!=0 || scene[sceneNum][(*BUL2_Y+8)/30][((*BUL2_X+18)/30)]!=0)){
10002954:	00808004 	movi	r2,512
10002958:	10800017 	ldw	r2,0(r2)
1000295c:	10800058 	cmpnei	r2,r2,1
10002960:	1000431e 	bne	r2,zero,10002a70 <main+0x273c>
10002964:	e0b92117 	ldw	r2,-7036(fp)
10002968:	1000411e 	bne	r2,zero,10002a70 <main+0x273c>
1000296c:	e0b92017 	ldw	r2,-7040(fp)
10002970:	10003f1e 	bne	r2,zero,10002a70 <main+0x273c>
10002974:	00807804 	movi	r2,480
10002978:	10800017 	ldw	r2,0(r2)
1000297c:	1009883a 	mov	r4,r2
10002980:	01400784 	movi	r5,30
10002984:	0006d300 	call	10006d30 <__divsi3>
10002988:	1023883a 	mov	r17,r2
1000298c:	00807c04 	movi	r2,496
10002990:	10800017 	ldw	r2,0(r2)
10002994:	10800484 	addi	r2,r2,18
10002998:	1009883a 	mov	r4,r2
1000299c:	01400784 	movi	r5,30
100029a0:	0006d300 	call	10006d30 <__divsi3>
100029a4:	1021883a 	mov	r16,r2
100029a8:	e4b95117 	ldw	r18,-6844(fp)
100029ac:	8809883a 	mov	r4,r17
100029b0:	01400544 	movi	r5,21
100029b4:	0006df00 	call	10006df0 <__mulsi3>
100029b8:	1023883a 	mov	r17,r2
100029bc:	9009883a 	mov	r4,r18
100029c0:	01405404 	movi	r5,336
100029c4:	0006df00 	call	10006df0 <__mulsi3>
100029c8:	8885883a 	add	r2,r17,r2
100029cc:	1405883a 	add	r2,r2,r16
100029d0:	1085883a 	add	r2,r2,r2
100029d4:	1085883a 	add	r2,r2,r2
100029d8:	e0f91304 	addi	r3,fp,-7092
100029dc:	1885883a 	add	r2,r3,r2
100029e0:	10805a04 	addi	r2,r2,360
100029e4:	10800017 	ldw	r2,0(r2)
100029e8:	10001f1e 	bne	r2,zero,10002a68 <main+0x2734>
100029ec:	00807804 	movi	r2,480
100029f0:	10800017 	ldw	r2,0(r2)
100029f4:	10800204 	addi	r2,r2,8
100029f8:	1009883a 	mov	r4,r2
100029fc:	01400784 	movi	r5,30
10002a00:	0006d300 	call	10006d30 <__divsi3>
10002a04:	1023883a 	mov	r17,r2
10002a08:	00807c04 	movi	r2,496
10002a0c:	10800017 	ldw	r2,0(r2)
10002a10:	10800484 	addi	r2,r2,18
10002a14:	1009883a 	mov	r4,r2
10002a18:	01400784 	movi	r5,30
10002a1c:	0006d300 	call	10006d30 <__divsi3>
10002a20:	1021883a 	mov	r16,r2
10002a24:	e4b95117 	ldw	r18,-6844(fp)
10002a28:	8809883a 	mov	r4,r17
10002a2c:	01400544 	movi	r5,21
10002a30:	0006df00 	call	10006df0 <__mulsi3>
10002a34:	1023883a 	mov	r17,r2
10002a38:	9009883a 	mov	r4,r18
10002a3c:	01405404 	movi	r5,336
10002a40:	0006df00 	call	10006df0 <__mulsi3>
10002a44:	8885883a 	add	r2,r17,r2
10002a48:	1405883a 	add	r2,r2,r16
10002a4c:	1085883a 	add	r2,r2,r2
10002a50:	1085883a 	add	r2,r2,r2
10002a54:	e0f91304 	addi	r3,fp,-7092
10002a58:	1885883a 	add	r2,r3,r2
10002a5c:	10805a04 	addi	r2,r2,360
10002a60:	10800017 	ldw	r2,0(r2)
10002a64:	10000226 	beq	r2,zero,10002a70 <main+0x273c>
		*BUL2_EN = False;
10002a68:	00808004 	movi	r2,512
10002a6c:	10000015 	stw	zero,0(r2)
	}
	//Top collisions
	if(*BUL1_EN == True && bul1Up == True && (scene[sceneNum][(*BUL1_Y-8)/30][(*BUL1_X)/30]!=0 || scene[sceneNum][(*BUL1_Y-8)/30][(*BUL1_X+8)/30]!=0)){
10002a70:	00808c04 	movi	r2,560
10002a74:	10800017 	ldw	r2,0(r2)
10002a78:	10800058 	cmpnei	r2,r2,1
10002a7c:	1000421e 	bne	r2,zero,10002b88 <main+0x2854>
10002a80:	e0b91e17 	ldw	r2,-7048(fp)
10002a84:	10800058 	cmpnei	r2,r2,1
10002a88:	10003f1e 	bne	r2,zero,10002b88 <main+0x2854>
10002a8c:	00808404 	movi	r2,528
10002a90:	10800017 	ldw	r2,0(r2)
10002a94:	10bffe04 	addi	r2,r2,-8
10002a98:	1009883a 	mov	r4,r2
10002a9c:	01400784 	movi	r5,30
10002aa0:	0006d300 	call	10006d30 <__divsi3>
10002aa4:	1023883a 	mov	r17,r2
10002aa8:	00808804 	movi	r2,544
10002aac:	10800017 	ldw	r2,0(r2)
10002ab0:	1009883a 	mov	r4,r2
10002ab4:	01400784 	movi	r5,30
10002ab8:	0006d300 	call	10006d30 <__divsi3>
10002abc:	1021883a 	mov	r16,r2
10002ac0:	e4b95117 	ldw	r18,-6844(fp)
10002ac4:	8809883a 	mov	r4,r17
10002ac8:	01400544 	movi	r5,21
10002acc:	0006df00 	call	10006df0 <__mulsi3>
10002ad0:	1023883a 	mov	r17,r2
10002ad4:	9009883a 	mov	r4,r18
10002ad8:	01405404 	movi	r5,336
10002adc:	0006df00 	call	10006df0 <__mulsi3>
10002ae0:	8885883a 	add	r2,r17,r2
10002ae4:	1405883a 	add	r2,r2,r16
10002ae8:	1085883a 	add	r2,r2,r2
10002aec:	1085883a 	add	r2,r2,r2
10002af0:	e0f91304 	addi	r3,fp,-7092
10002af4:	1885883a 	add	r2,r3,r2
10002af8:	10805a04 	addi	r2,r2,360
10002afc:	10800017 	ldw	r2,0(r2)
10002b00:	10001f1e 	bne	r2,zero,10002b80 <main+0x284c>
10002b04:	00808404 	movi	r2,528
10002b08:	10800017 	ldw	r2,0(r2)
10002b0c:	10bffe04 	addi	r2,r2,-8
10002b10:	1009883a 	mov	r4,r2
10002b14:	01400784 	movi	r5,30
10002b18:	0006d300 	call	10006d30 <__divsi3>
10002b1c:	1023883a 	mov	r17,r2
10002b20:	00808804 	movi	r2,544
10002b24:	10800017 	ldw	r2,0(r2)
10002b28:	10800204 	addi	r2,r2,8
10002b2c:	1009883a 	mov	r4,r2
10002b30:	01400784 	movi	r5,30
10002b34:	0006d300 	call	10006d30 <__divsi3>
10002b38:	1021883a 	mov	r16,r2
10002b3c:	e4b95117 	ldw	r18,-6844(fp)
10002b40:	8809883a 	mov	r4,r17
10002b44:	01400544 	movi	r5,21
10002b48:	0006df00 	call	10006df0 <__mulsi3>
10002b4c:	1023883a 	mov	r17,r2
10002b50:	9009883a 	mov	r4,r18
10002b54:	01405404 	movi	r5,336
10002b58:	0006df00 	call	10006df0 <__mulsi3>
10002b5c:	8885883a 	add	r2,r17,r2
10002b60:	1405883a 	add	r2,r2,r16
10002b64:	1085883a 	add	r2,r2,r2
10002b68:	1085883a 	add	r2,r2,r2
10002b6c:	e0f91304 	addi	r3,fp,-7092
10002b70:	1885883a 	add	r2,r3,r2
10002b74:	10805a04 	addi	r2,r2,360
10002b78:	10800017 	ldw	r2,0(r2)
10002b7c:	10000226 	beq	r2,zero,10002b88 <main+0x2854>
		*BUL1_EN = False;
10002b80:	00808c04 	movi	r2,560
10002b84:	10000015 	stw	zero,0(r2)
	}
	if(*BUL2_EN == True && bul2Up == True && (scene[sceneNum][(*BUL2_Y-8)/30][(*BUL2_X)/30]!=0 || scene[sceneNum][(*BUL2_Y-8)/30][(*BUL2_X+8)/30]!=0)){
10002b88:	00808004 	movi	r2,512
10002b8c:	10800017 	ldw	r2,0(r2)
10002b90:	10800058 	cmpnei	r2,r2,1
10002b94:	1000421e 	bne	r2,zero,10002ca0 <main+0x296c>
10002b98:	e0b92117 	ldw	r2,-7036(fp)
10002b9c:	10800058 	cmpnei	r2,r2,1
10002ba0:	10003f1e 	bne	r2,zero,10002ca0 <main+0x296c>
10002ba4:	00807804 	movi	r2,480
10002ba8:	10800017 	ldw	r2,0(r2)
10002bac:	10bffe04 	addi	r2,r2,-8
10002bb0:	1009883a 	mov	r4,r2
10002bb4:	01400784 	movi	r5,30
10002bb8:	0006d300 	call	10006d30 <__divsi3>
10002bbc:	1023883a 	mov	r17,r2
10002bc0:	00807c04 	movi	r2,496
10002bc4:	10800017 	ldw	r2,0(r2)
10002bc8:	1009883a 	mov	r4,r2
10002bcc:	01400784 	movi	r5,30
10002bd0:	0006d300 	call	10006d30 <__divsi3>
10002bd4:	1021883a 	mov	r16,r2
10002bd8:	e4b95117 	ldw	r18,-6844(fp)
10002bdc:	8809883a 	mov	r4,r17
10002be0:	01400544 	movi	r5,21
10002be4:	0006df00 	call	10006df0 <__mulsi3>
10002be8:	1023883a 	mov	r17,r2
10002bec:	9009883a 	mov	r4,r18
10002bf0:	01405404 	movi	r5,336
10002bf4:	0006df00 	call	10006df0 <__mulsi3>
10002bf8:	8885883a 	add	r2,r17,r2
10002bfc:	1405883a 	add	r2,r2,r16
10002c00:	1085883a 	add	r2,r2,r2
10002c04:	1085883a 	add	r2,r2,r2
10002c08:	e0f91304 	addi	r3,fp,-7092
10002c0c:	1885883a 	add	r2,r3,r2
10002c10:	10805a04 	addi	r2,r2,360
10002c14:	10800017 	ldw	r2,0(r2)
10002c18:	10001f1e 	bne	r2,zero,10002c98 <main+0x2964>
10002c1c:	00807804 	movi	r2,480
10002c20:	10800017 	ldw	r2,0(r2)
10002c24:	10bffe04 	addi	r2,r2,-8
10002c28:	1009883a 	mov	r4,r2
10002c2c:	01400784 	movi	r5,30
10002c30:	0006d300 	call	10006d30 <__divsi3>
10002c34:	1023883a 	mov	r17,r2
10002c38:	00807c04 	movi	r2,496
10002c3c:	10800017 	ldw	r2,0(r2)
10002c40:	10800204 	addi	r2,r2,8
10002c44:	1009883a 	mov	r4,r2
10002c48:	01400784 	movi	r5,30
10002c4c:	0006d300 	call	10006d30 <__divsi3>
10002c50:	1021883a 	mov	r16,r2
10002c54:	e4b95117 	ldw	r18,-6844(fp)
10002c58:	8809883a 	mov	r4,r17
10002c5c:	01400544 	movi	r5,21
10002c60:	0006df00 	call	10006df0 <__mulsi3>
10002c64:	1023883a 	mov	r17,r2
10002c68:	9009883a 	mov	r4,r18
10002c6c:	01405404 	movi	r5,336
10002c70:	0006df00 	call	10006df0 <__mulsi3>
10002c74:	8885883a 	add	r2,r17,r2
10002c78:	1405883a 	add	r2,r2,r16
10002c7c:	1085883a 	add	r2,r2,r2
10002c80:	1085883a 	add	r2,r2,r2
10002c84:	e0f91304 	addi	r3,fp,-7092
10002c88:	1885883a 	add	r2,r3,r2
10002c8c:	10805a04 	addi	r2,r2,360
10002c90:	10800017 	ldw	r2,0(r2)
10002c94:	10000226 	beq	r2,zero,10002ca0 <main+0x296c>
		*BUL2_EN = False;
10002c98:	00808004 	movi	r2,512
10002c9c:	10000015 	stw	zero,0(r2)
	}
	if(*BUL3_EN == True && bul3Up == True && (scene[sceneNum][(*BUL3_Y-8)/30][(*BUL3_X)/30]!=0 || scene[sceneNum][(*BUL3_Y-8)/30][(*BUL3_X+8)/30]!=0)){
10002ca0:	00807404 	movi	r2,464
10002ca4:	10800017 	ldw	r2,0(r2)
10002ca8:	10800058 	cmpnei	r2,r2,1
10002cac:	1000421e 	bne	r2,zero,10002db8 <main+0x2a84>
10002cb0:	e0b92417 	ldw	r2,-7024(fp)
10002cb4:	10800058 	cmpnei	r2,r2,1
10002cb8:	10003f1e 	bne	r2,zero,10002db8 <main+0x2a84>
10002cbc:	00806c04 	movi	r2,432
10002cc0:	10800017 	ldw	r2,0(r2)
10002cc4:	10bffe04 	addi	r2,r2,-8
10002cc8:	1009883a 	mov	r4,r2
10002ccc:	01400784 	movi	r5,30
10002cd0:	0006d300 	call	10006d30 <__divsi3>
10002cd4:	1023883a 	mov	r17,r2
10002cd8:	00807004 	movi	r2,448
10002cdc:	10800017 	ldw	r2,0(r2)
10002ce0:	1009883a 	mov	r4,r2
10002ce4:	01400784 	movi	r5,30
10002ce8:	0006d300 	call	10006d30 <__divsi3>
10002cec:	1021883a 	mov	r16,r2
10002cf0:	e4b95117 	ldw	r18,-6844(fp)
10002cf4:	8809883a 	mov	r4,r17
10002cf8:	01400544 	movi	r5,21
10002cfc:	0006df00 	call	10006df0 <__mulsi3>
10002d00:	1023883a 	mov	r17,r2
10002d04:	9009883a 	mov	r4,r18
10002d08:	01405404 	movi	r5,336
10002d0c:	0006df00 	call	10006df0 <__mulsi3>
10002d10:	8885883a 	add	r2,r17,r2
10002d14:	1405883a 	add	r2,r2,r16
10002d18:	1085883a 	add	r2,r2,r2
10002d1c:	1085883a 	add	r2,r2,r2
10002d20:	e0f91304 	addi	r3,fp,-7092
10002d24:	1885883a 	add	r2,r3,r2
10002d28:	10805a04 	addi	r2,r2,360
10002d2c:	10800017 	ldw	r2,0(r2)
10002d30:	10001f1e 	bne	r2,zero,10002db0 <main+0x2a7c>
10002d34:	00806c04 	movi	r2,432
10002d38:	10800017 	ldw	r2,0(r2)
10002d3c:	10bffe04 	addi	r2,r2,-8
10002d40:	1009883a 	mov	r4,r2
10002d44:	01400784 	movi	r5,30
10002d48:	0006d300 	call	10006d30 <__divsi3>
10002d4c:	1023883a 	mov	r17,r2
10002d50:	00807004 	movi	r2,448
10002d54:	10800017 	ldw	r2,0(r2)
10002d58:	10800204 	addi	r2,r2,8
10002d5c:	1009883a 	mov	r4,r2
10002d60:	01400784 	movi	r5,30
10002d64:	0006d300 	call	10006d30 <__divsi3>
10002d68:	1021883a 	mov	r16,r2
10002d6c:	e4b95117 	ldw	r18,-6844(fp)
10002d70:	8809883a 	mov	r4,r17
10002d74:	01400544 	movi	r5,21
10002d78:	0006df00 	call	10006df0 <__mulsi3>
10002d7c:	1023883a 	mov	r17,r2
10002d80:	9009883a 	mov	r4,r18
10002d84:	01405404 	movi	r5,336
10002d88:	0006df00 	call	10006df0 <__mulsi3>
10002d8c:	8885883a 	add	r2,r17,r2
10002d90:	1405883a 	add	r2,r2,r16
10002d94:	1085883a 	add	r2,r2,r2
10002d98:	1085883a 	add	r2,r2,r2
10002d9c:	e0f91304 	addi	r3,fp,-7092
10002da0:	1885883a 	add	r2,r3,r2
10002da4:	10805a04 	addi	r2,r2,360
10002da8:	10800017 	ldw	r2,0(r2)
10002dac:	10000226 	beq	r2,zero,10002db8 <main+0x2a84>
		*BUL3_EN = False;
10002db0:	00807404 	movi	r2,464
10002db4:	10000015 	stw	zero,0(r2)
	}

    if(*BUL3_EN == True){
10002db8:	00807404 	movi	r2,464
10002dbc:	10800017 	ldw	r2,0(r2)
10002dc0:	10800058 	cmpnei	r2,r2,1
10002dc4:	1000241e 	bne	r2,zero,10002e58 <main+0x2b24>
    	if(bul3start >= 105)
10002dc8:	e0b92517 	ldw	r2,-7020(fp)
10002dcc:	10801a50 	cmplti	r2,r2,105
10002dd0:	1000031e 	bne	r2,zero,10002de0 <main+0x2aac>
    		*BUL3_EN = False;
10002dd4:	00807404 	movi	r2,464
10002dd8:	10000015 	stw	zero,0(r2)
10002ddc:	00001e06 	br	10002e58 <main+0x2b24>
    	else{
    		if(bul3Up == True){
10002de0:	e0b92417 	ldw	r2,-7024(fp)
10002de4:	10800058 	cmpnei	r2,r2,1
10002de8:	1000071e 	bne	r2,zero,10002e08 <main+0x2ad4>
    			*BUL3_Y -= bulinc;
10002dec:	00806c04 	movi	r2,432
10002df0:	00c06c04 	movi	r3,432
10002df4:	19000017 	ldw	r4,0(r3)
10002df8:	e0f95017 	ldw	r3,-6848(fp)
10002dfc:	20c7c83a 	sub	r3,r4,r3
10002e00:	10c00015 	stw	r3,0(r2)
10002e04:	00001006 	br	10002e48 <main+0x2b14>
    		}
    		else if(bul3Left == True){
10002e08:	e0b92317 	ldw	r2,-7028(fp)
10002e0c:	10800058 	cmpnei	r2,r2,1
10002e10:	1000071e 	bne	r2,zero,10002e30 <main+0x2afc>
    			*BUL3_X -= bulinc;
10002e14:	00807004 	movi	r2,448
10002e18:	00c07004 	movi	r3,448
10002e1c:	19000017 	ldw	r4,0(r3)
10002e20:	e0f95017 	ldw	r3,-6848(fp)
10002e24:	20c7c83a 	sub	r3,r4,r3
10002e28:	10c00015 	stw	r3,0(r2)
10002e2c:	00000606 	br	10002e48 <main+0x2b14>
    		}
    		else{
    			*BUL3_X += bulinc;
10002e30:	00807004 	movi	r2,448
10002e34:	00c07004 	movi	r3,448
10002e38:	19000017 	ldw	r4,0(r3)
10002e3c:	e0f95017 	ldw	r3,-6848(fp)
10002e40:	20c7883a 	add	r3,r4,r3
10002e44:	10c00015 	stw	r3,0(r2)
    		}
    		bul3start += bulinc;
10002e48:	e0f92517 	ldw	r3,-7020(fp)
10002e4c:	e0b95017 	ldw	r2,-6848(fp)
10002e50:	1885883a 	add	r2,r3,r2
10002e54:	e0b92515 	stw	r2,-7020(fp)
    	}
    }
    if(*BUL2_EN == True){
10002e58:	00808004 	movi	r2,512
10002e5c:	10800017 	ldw	r2,0(r2)
10002e60:	10800058 	cmpnei	r2,r2,1
10002e64:	1000241e 	bne	r2,zero,10002ef8 <main+0x2bc4>
		if(bul2start >= 105)
10002e68:	e0b92217 	ldw	r2,-7032(fp)
10002e6c:	10801a50 	cmplti	r2,r2,105
10002e70:	1000031e 	bne	r2,zero,10002e80 <main+0x2b4c>
			*BUL2_EN = False;
10002e74:	00808004 	movi	r2,512
10002e78:	10000015 	stw	zero,0(r2)
10002e7c:	00001e06 	br	10002ef8 <main+0x2bc4>
		else{
			if(bul2Up == True){
10002e80:	e0b92117 	ldw	r2,-7036(fp)
10002e84:	10800058 	cmpnei	r2,r2,1
10002e88:	1000071e 	bne	r2,zero,10002ea8 <main+0x2b74>
				*BUL2_Y -= bulinc;
10002e8c:	00807804 	movi	r2,480
10002e90:	00c07804 	movi	r3,480
10002e94:	19000017 	ldw	r4,0(r3)
10002e98:	e0f95017 	ldw	r3,-6848(fp)
10002e9c:	20c7c83a 	sub	r3,r4,r3
10002ea0:	10c00015 	stw	r3,0(r2)
10002ea4:	00001006 	br	10002ee8 <main+0x2bb4>
			}
			else if(bul2Left == True){
10002ea8:	e0b92017 	ldw	r2,-7040(fp)
10002eac:	10800058 	cmpnei	r2,r2,1
10002eb0:	1000071e 	bne	r2,zero,10002ed0 <main+0x2b9c>
				*BUL2_X -= bulinc;
10002eb4:	00807c04 	movi	r2,496
10002eb8:	00c07c04 	movi	r3,496
10002ebc:	19000017 	ldw	r4,0(r3)
10002ec0:	e0f95017 	ldw	r3,-6848(fp)
10002ec4:	20c7c83a 	sub	r3,r4,r3
10002ec8:	10c00015 	stw	r3,0(r2)
10002ecc:	00000606 	br	10002ee8 <main+0x2bb4>
			}
			else{
				*BUL2_X += bulinc;
10002ed0:	00807c04 	movi	r2,496
10002ed4:	00c07c04 	movi	r3,496
10002ed8:	19000017 	ldw	r4,0(r3)
10002edc:	e0f95017 	ldw	r3,-6848(fp)
10002ee0:	20c7883a 	add	r3,r4,r3
10002ee4:	10c00015 	stw	r3,0(r2)
			}
			bul2start += bulinc;
10002ee8:	e0f92217 	ldw	r3,-7032(fp)
10002eec:	e0b95017 	ldw	r2,-6848(fp)
10002ef0:	1885883a 	add	r2,r3,r2
10002ef4:	e0b92215 	stw	r2,-7032(fp)
		}
	}
    if(*BUL1_EN == True){
10002ef8:	00808c04 	movi	r2,560
10002efc:	10800017 	ldw	r2,0(r2)
10002f00:	10800058 	cmpnei	r2,r2,1
10002f04:	1000241e 	bne	r2,zero,10002f98 <main+0x2c64>
		if(bul1start >= 105)
10002f08:	e0b91f17 	ldw	r2,-7044(fp)
10002f0c:	10801a50 	cmplti	r2,r2,105
10002f10:	1000031e 	bne	r2,zero,10002f20 <main+0x2bec>
			*BUL1_EN = False;
10002f14:	00808c04 	movi	r2,560
10002f18:	10000015 	stw	zero,0(r2)
10002f1c:	00001e06 	br	10002f98 <main+0x2c64>
		else{
			if(bul1Up == True){
10002f20:	e0b91e17 	ldw	r2,-7048(fp)
10002f24:	10800058 	cmpnei	r2,r2,1
10002f28:	1000071e 	bne	r2,zero,10002f48 <main+0x2c14>
				*BUL1_Y -= bulinc;
10002f2c:	00808404 	movi	r2,528
10002f30:	00c08404 	movi	r3,528
10002f34:	19000017 	ldw	r4,0(r3)
10002f38:	e0f95017 	ldw	r3,-6848(fp)
10002f3c:	20c7c83a 	sub	r3,r4,r3
10002f40:	10c00015 	stw	r3,0(r2)
10002f44:	00001006 	br	10002f88 <main+0x2c54>
			}
			else if(bul1Left == True){
10002f48:	e0b91d17 	ldw	r2,-7052(fp)
10002f4c:	10800058 	cmpnei	r2,r2,1
10002f50:	1000071e 	bne	r2,zero,10002f70 <main+0x2c3c>
				*BUL1_X -= bulinc;
10002f54:	00808804 	movi	r2,544
10002f58:	00c08804 	movi	r3,544
10002f5c:	19000017 	ldw	r4,0(r3)
10002f60:	e0f95017 	ldw	r3,-6848(fp)
10002f64:	20c7c83a 	sub	r3,r4,r3
10002f68:	10c00015 	stw	r3,0(r2)
10002f6c:	00000606 	br	10002f88 <main+0x2c54>
			}
			else{
				*BUL1_X += bulinc;
10002f70:	00808804 	movi	r2,544
10002f74:	00c08804 	movi	r3,544
10002f78:	19000017 	ldw	r4,0(r3)
10002f7c:	e0f95017 	ldw	r3,-6848(fp)
10002f80:	20c7883a 	add	r3,r4,r3
10002f84:	10c00015 	stw	r3,0(r2)
			}
			bul1start += bulinc;
10002f88:	e0f91f17 	ldw	r3,-7044(fp)
10002f8c:	e0b95017 	ldw	r2,-6848(fp)
10002f90:	1885883a 	add	r2,r3,r2
10002f94:	e0b91f15 	stw	r2,-7044(fp)
		}
	}


    //monsters code
    *MON1_X = monster1_1_x;
10002f98:	0080d004 	movi	r2,832
10002f9c:	e0f92817 	ldw	r3,-7008(fp)
10002fa0:	10c00015 	stw	r3,0(r2)
    *MON1_Y = monster1_1_y;
10002fa4:	0080cc04 	movi	r2,816
10002fa8:	e0f92917 	ldw	r3,-7004(fp)
10002fac:	10c00015 	stw	r3,0(r2)
    if(*MON1_EN == True){
10002fb0:	0080d404 	movi	r2,848
10002fb4:	10800003 	ldbu	r2,0(r2)
10002fb8:	10803fcc 	andi	r2,r2,255
10002fbc:	1080201c 	xori	r2,r2,128
10002fc0:	10bfe004 	addi	r2,r2,-128
10002fc4:	10800058 	cmpnei	r2,r2,1
10002fc8:	10000a1e 	bne	r2,zero,10002ff4 <main+0x2cc0>
		if(monster1_1_left == True){
10002fcc:	e0b92a17 	ldw	r2,-7000(fp)
10002fd0:	10800058 	cmpnei	r2,r2,1
10002fd4:	1000041e 	bne	r2,zero,10002fe8 <main+0x2cb4>
			monster1_1_x-=2;
10002fd8:	e0b92817 	ldw	r2,-7008(fp)
10002fdc:	10bfff84 	addi	r2,r2,-2
10002fe0:	e0b92815 	stw	r2,-7008(fp)
10002fe4:	00000306 	br	10002ff4 <main+0x2cc0>
		}
		else{
			monster1_1_x+=2;
10002fe8:	e0b92817 	ldw	r2,-7008(fp)
10002fec:	10800084 	addi	r2,r2,2
10002ff0:	e0b92815 	stw	r2,-7008(fp)
		}
    }
    //Monster 1
    if(scene[sceneNum][(monster1_1_y+35)/30][monster1_1_x/30]==0){
10002ff4:	e0b92917 	ldw	r2,-7004(fp)
10002ff8:	108008c4 	addi	r2,r2,35
10002ffc:	1009883a 	mov	r4,r2
10003000:	01400784 	movi	r5,30
10003004:	0006d300 	call	10006d30 <__divsi3>
10003008:	1023883a 	mov	r17,r2
1000300c:	e0b92817 	ldw	r2,-7008(fp)
10003010:	1009883a 	mov	r4,r2
10003014:	01400784 	movi	r5,30
10003018:	0006d300 	call	10006d30 <__divsi3>
1000301c:	1021883a 	mov	r16,r2
10003020:	e4b95117 	ldw	r18,-6844(fp)
10003024:	8809883a 	mov	r4,r17
10003028:	01400544 	movi	r5,21
1000302c:	0006df00 	call	10006df0 <__mulsi3>
10003030:	1023883a 	mov	r17,r2
10003034:	9009883a 	mov	r4,r18
10003038:	01405404 	movi	r5,336
1000303c:	0006df00 	call	10006df0 <__mulsi3>
10003040:	8885883a 	add	r2,r17,r2
10003044:	1405883a 	add	r2,r2,r16
10003048:	1085883a 	add	r2,r2,r2
1000304c:	1085883a 	add	r2,r2,r2
10003050:	e0f91304 	addi	r3,fp,-7092
10003054:	1885883a 	add	r2,r3,r2
10003058:	10805a04 	addi	r2,r2,360
1000305c:	10800017 	ldw	r2,0(r2)
10003060:	1000021e 	bne	r2,zero,1000306c <main+0x2d38>
    	monster1_1_left = False;
10003064:	e0392a15 	stw	zero,-7000(fp)
10003068:	00001f06 	br	100030e8 <main+0x2db4>
    }
    else if(scene[sceneNum][(monster1_1_y+35)/30][(monster1_1_x+30)/30]==0){
1000306c:	e0b92917 	ldw	r2,-7004(fp)
10003070:	108008c4 	addi	r2,r2,35
10003074:	1009883a 	mov	r4,r2
10003078:	01400784 	movi	r5,30
1000307c:	0006d300 	call	10006d30 <__divsi3>
10003080:	1023883a 	mov	r17,r2
10003084:	e0b92817 	ldw	r2,-7008(fp)
10003088:	10800784 	addi	r2,r2,30
1000308c:	1009883a 	mov	r4,r2
10003090:	01400784 	movi	r5,30
10003094:	0006d300 	call	10006d30 <__divsi3>
10003098:	1021883a 	mov	r16,r2
1000309c:	e4b95117 	ldw	r18,-6844(fp)
100030a0:	8809883a 	mov	r4,r17
100030a4:	01400544 	movi	r5,21
100030a8:	0006df00 	call	10006df0 <__mulsi3>
100030ac:	1023883a 	mov	r17,r2
100030b0:	9009883a 	mov	r4,r18
100030b4:	01405404 	movi	r5,336
100030b8:	0006df00 	call	10006df0 <__mulsi3>
100030bc:	8885883a 	add	r2,r17,r2
100030c0:	1405883a 	add	r2,r2,r16
100030c4:	1085883a 	add	r2,r2,r2
100030c8:	1085883a 	add	r2,r2,r2
100030cc:	e0f91304 	addi	r3,fp,-7092
100030d0:	1885883a 	add	r2,r3,r2
100030d4:	10805a04 	addi	r2,r2,360
100030d8:	10800017 	ldw	r2,0(r2)
100030dc:	1000021e 	bne	r2,zero,100030e8 <main+0x2db4>
    	monster1_1_left = True;
100030e0:	00800044 	movi	r2,1
100030e4:	e0b92a15 	stw	r2,-7000(fp)
    }
    //Monster 2
    *MON2_X = monster2_1_x;
100030e8:	0080c404 	movi	r2,784
100030ec:	e0f92c17 	ldw	r3,-6992(fp)
100030f0:	10c00015 	stw	r3,0(r2)
	*MON2_Y = monster2_1_y;
100030f4:	0080c004 	movi	r2,768
100030f8:	e0f92d17 	ldw	r3,-6988(fp)
100030fc:	10c00015 	stw	r3,0(r2)
	if(*MON2_EN == True){
10003100:	0080c804 	movi	r2,800
10003104:	10800003 	ldbu	r2,0(r2)
10003108:	10803fcc 	andi	r2,r2,255
1000310c:	1080201c 	xori	r2,r2,128
10003110:	10bfe004 	addi	r2,r2,-128
10003114:	10800058 	cmpnei	r2,r2,1
10003118:	1000101e 	bne	r2,zero,1000315c <main+0x2e28>
		if(monster2_1_left == True && mon2_at_top == False){
1000311c:	e0b92e17 	ldw	r2,-6984(fp)
10003120:	10800058 	cmpnei	r2,r2,1
10003124:	1000061e 	bne	r2,zero,10003140 <main+0x2e0c>
10003128:	e0b93017 	ldw	r2,-6976(fp)
1000312c:	1000041e 	bne	r2,zero,10003140 <main+0x2e0c>
			monster2_1_x-=3;
10003130:	e0b92c17 	ldw	r2,-6992(fp)
10003134:	10bfff44 	addi	r2,r2,-3
10003138:	e0b92c15 	stw	r2,-6992(fp)
1000313c:	00000706 	br	1000315c <main+0x2e28>
		}
		else if(monster2_1_left == False && mon2_at_top == False){
10003140:	e0b92e17 	ldw	r2,-6984(fp)
10003144:	1000051e 	bne	r2,zero,1000315c <main+0x2e28>
10003148:	e0b93017 	ldw	r2,-6976(fp)
1000314c:	1000031e 	bne	r2,zero,1000315c <main+0x2e28>
			monster2_1_x+=3;
10003150:	e0b92c17 	ldw	r2,-6992(fp)
10003154:	108000c4 	addi	r2,r2,3
10003158:	e0b92c15 	stw	r2,-6992(fp)
		}
	}
	//Monster 3
	*MON3_X = monster3_1_x;
1000315c:	0080b804 	movi	r2,736
10003160:	e0f93417 	ldw	r3,-6960(fp)
10003164:	10c00015 	stw	r3,0(r2)
	*MON3_Y = monster3_1_y;
10003168:	0080b404 	movi	r2,720
1000316c:	e0f93517 	ldw	r3,-6956(fp)
10003170:	10c00015 	stw	r3,0(r2)
	if(*MON3_EN == True){
10003174:	0080bc04 	movi	r2,752
10003178:	10800003 	ldbu	r2,0(r2)
1000317c:	10803fcc 	andi	r2,r2,255
10003180:	1080201c 	xori	r2,r2,128
10003184:	10bfe004 	addi	r2,r2,-128
10003188:	10800058 	cmpnei	r2,r2,1
1000318c:	10000a1e 	bne	r2,zero,100031b8 <main+0x2e84>
		if(monster3_1_left == True){
10003190:	e0b93617 	ldw	r2,-6952(fp)
10003194:	10800058 	cmpnei	r2,r2,1
10003198:	1000041e 	bne	r2,zero,100031ac <main+0x2e78>
			monster3_1_x-=5;
1000319c:	e0b93417 	ldw	r2,-6960(fp)
100031a0:	10bffec4 	addi	r2,r2,-5
100031a4:	e0b93415 	stw	r2,-6960(fp)
100031a8:	00000306 	br	100031b8 <main+0x2e84>
		}
		else{
			monster3_1_x+=5;
100031ac:	e0b93417 	ldw	r2,-6960(fp)
100031b0:	10800144 	addi	r2,r2,5
100031b4:	e0b93415 	stw	r2,-6960(fp)
		}
	}
	//Kraid
	if(*KRAID_G_EN == True || *KRAID_R_EN == True || *KRAID_N_EN == True){
100031b8:	00804004 	movi	r2,256
100031bc:	10800017 	ldw	r2,0(r2)
100031c0:	10800060 	cmpeqi	r2,r2,1
100031c4:	1000081e 	bne	r2,zero,100031e8 <main+0x2eb4>
100031c8:	00803c04 	movi	r2,240
100031cc:	10800017 	ldw	r2,0(r2)
100031d0:	10800060 	cmpeqi	r2,r2,1
100031d4:	1000041e 	bne	r2,zero,100031e8 <main+0x2eb4>
100031d8:	00803804 	movi	r2,224
100031dc:	10800017 	ldw	r2,0(r2)
100031e0:	10800058 	cmpnei	r2,r2,1
100031e4:	10002a1e 	bne	r2,zero,10003290 <main+0x2f5c>
		if(kraid_move_left == False){
100031e8:	e0b93917 	ldw	r2,-6940(fp)
100031ec:	1000091e 	bne	r2,zero,10003214 <main+0x2ee0>
			*KRAID_X+=4;
100031f0:	00802804 	movi	r2,160
100031f4:	00c02804 	movi	r3,160
100031f8:	18c00017 	ldw	r3,0(r3)
100031fc:	18c00104 	addi	r3,r3,4
10003200:	10c00015 	stw	r3,0(r2)
			kraid_move_counter-=7;
10003204:	e0b93817 	ldw	r2,-6944(fp)
10003208:	10bffe44 	addi	r2,r2,-7
1000320c:	e0b93815 	stw	r2,-6944(fp)
10003210:	00000806 	br	10003234 <main+0x2f00>
		}
		else{
			*KRAID_X-=4;
10003214:	00802804 	movi	r2,160
10003218:	00c02804 	movi	r3,160
1000321c:	18c00017 	ldw	r3,0(r3)
10003220:	18ffff04 	addi	r3,r3,-4
10003224:	10c00015 	stw	r3,0(r2)
			kraid_move_counter-=7;
10003228:	e0b93817 	ldw	r2,-6944(fp)
1000322c:	10bffe44 	addi	r2,r2,-7
10003230:	e0b93815 	stw	r2,-6944(fp)
		}
		if(kraid_move_counter < 0 || *KRAID_X < 200 || *KRAID_X > 550){
10003234:	e0b93817 	ldw	r2,-6944(fp)
10003238:	10000816 	blt	r2,zero,1000325c <main+0x2f28>
1000323c:	00802804 	movi	r2,160
10003240:	10800017 	ldw	r2,0(r2)
10003244:	10803210 	cmplti	r2,r2,200
10003248:	1000041e 	bne	r2,zero,1000325c <main+0x2f28>
1000324c:	00802804 	movi	r2,160
10003250:	10800017 	ldw	r2,0(r2)
10003254:	108089d0 	cmplti	r2,r2,551
10003258:	10000d1e 	bne	r2,zero,10003290 <main+0x2f5c>
			if(kraid_move_left == True){
1000325c:	e0b93917 	ldw	r2,-6940(fp)
10003260:	10800058 	cmpnei	r2,r2,1
10003264:	1000021e 	bne	r2,zero,10003270 <main+0x2f3c>
				kraid_move_left = False;
10003268:	e0393915 	stw	zero,-6940(fp)
1000326c:	00000206 	br	10003278 <main+0x2f44>
			}
			else{
				kraid_move_left = True;
10003270:	00800044 	movi	r2,1
10003274:	e0b93915 	stw	r2,-6940(fp)
			}
			kraid_move_counter = rand()%200+50;
10003278:	00091dc0 	call	100091dc <rand>
1000327c:	1009883a 	mov	r4,r2
10003280:	01403204 	movi	r5,200
10003284:	0006d840 	call	10006d84 <__modsi3>
10003288:	10800c84 	addi	r2,r2,50
1000328c:	e0b93815 	stw	r2,-6944(fp)
		}
	}

	if(*SAMUS_X > *KRAID_X+20){
10003290:	0080e404 	movi	r2,912
10003294:	10800017 	ldw	r2,0(r2)
10003298:	00c02804 	movi	r3,160
1000329c:	18c00017 	ldw	r3,0(r3)
100032a0:	18c00504 	addi	r3,r3,20
100032a4:	1880030e 	bge	r3,r2,100032b4 <main+0x2f80>
		*KRAID_DIR = 0;
100032a8:	00804404 	movi	r2,272
100032ac:	10000015 	stw	zero,0(r2)
100032b0:	00000306 	br	100032c0 <main+0x2f8c>
	}
	else{
		*KRAID_DIR = 1;
100032b4:	00804404 	movi	r2,272
100032b8:	00c00044 	movi	r3,1
100032bc:	10c00015 	stw	r3,0(r2)
	}


	//Monster 1 collision detection
	if(scene[sceneNum][(monster1_1_y+35)/30][monster1_1_x/30]==0){
100032c0:	e0b92917 	ldw	r2,-7004(fp)
100032c4:	108008c4 	addi	r2,r2,35
100032c8:	1009883a 	mov	r4,r2
100032cc:	01400784 	movi	r5,30
100032d0:	0006d300 	call	10006d30 <__divsi3>
100032d4:	1023883a 	mov	r17,r2
100032d8:	e0b92817 	ldw	r2,-7008(fp)
100032dc:	1009883a 	mov	r4,r2
100032e0:	01400784 	movi	r5,30
100032e4:	0006d300 	call	10006d30 <__divsi3>
100032e8:	1021883a 	mov	r16,r2
100032ec:	e4b95117 	ldw	r18,-6844(fp)
100032f0:	8809883a 	mov	r4,r17
100032f4:	01400544 	movi	r5,21
100032f8:	0006df00 	call	10006df0 <__mulsi3>
100032fc:	1023883a 	mov	r17,r2
10003300:	9009883a 	mov	r4,r18
10003304:	01405404 	movi	r5,336
10003308:	0006df00 	call	10006df0 <__mulsi3>
1000330c:	8885883a 	add	r2,r17,r2
10003310:	1405883a 	add	r2,r2,r16
10003314:	1085883a 	add	r2,r2,r2
10003318:	1085883a 	add	r2,r2,r2
1000331c:	e0f91304 	addi	r3,fp,-7092
10003320:	1885883a 	add	r2,r3,r2
10003324:	10805a04 	addi	r2,r2,360
10003328:	10800017 	ldw	r2,0(r2)
1000332c:	1000021e 	bne	r2,zero,10003338 <main+0x3004>
		monster1_1_left = False;
10003330:	e0392a15 	stw	zero,-7000(fp)
10003334:	00001f06 	br	100033b4 <main+0x3080>
	}
	else if(scene[sceneNum][(monster1_1_y+35)/30][(monster1_1_x+30)/30]==0){
10003338:	e0b92917 	ldw	r2,-7004(fp)
1000333c:	108008c4 	addi	r2,r2,35
10003340:	1009883a 	mov	r4,r2
10003344:	01400784 	movi	r5,30
10003348:	0006d300 	call	10006d30 <__divsi3>
1000334c:	1023883a 	mov	r17,r2
10003350:	e0b92817 	ldw	r2,-7008(fp)
10003354:	10800784 	addi	r2,r2,30
10003358:	1009883a 	mov	r4,r2
1000335c:	01400784 	movi	r5,30
10003360:	0006d300 	call	10006d30 <__divsi3>
10003364:	1021883a 	mov	r16,r2
10003368:	e4b95117 	ldw	r18,-6844(fp)
1000336c:	8809883a 	mov	r4,r17
10003370:	01400544 	movi	r5,21
10003374:	0006df00 	call	10006df0 <__mulsi3>
10003378:	1023883a 	mov	r17,r2
1000337c:	9009883a 	mov	r4,r18
10003380:	01405404 	movi	r5,336
10003384:	0006df00 	call	10006df0 <__mulsi3>
10003388:	8885883a 	add	r2,r17,r2
1000338c:	1405883a 	add	r2,r2,r16
10003390:	1085883a 	add	r2,r2,r2
10003394:	1085883a 	add	r2,r2,r2
10003398:	e0f91304 	addi	r3,fp,-7092
1000339c:	1885883a 	add	r2,r3,r2
100033a0:	10805a04 	addi	r2,r2,360
100033a4:	10800017 	ldw	r2,0(r2)
100033a8:	1000021e 	bne	r2,zero,100033b4 <main+0x3080>
		monster1_1_left = True;
100033ac:	00800044 	movi	r2,1
100033b0:	e0b92a15 	stw	r2,-7000(fp)
	}
	//Monster 2 collision detection
	if(scene[sceneNum][(monster2_1_y+25)/30][monster2_1_x/30]!=0 || scene[sceneNum][(monster2_1_y)/30][monster2_1_x/30]!=0){
100033b4:	e0b92d17 	ldw	r2,-6988(fp)
100033b8:	10800644 	addi	r2,r2,25
100033bc:	1009883a 	mov	r4,r2
100033c0:	01400784 	movi	r5,30
100033c4:	0006d300 	call	10006d30 <__divsi3>
100033c8:	1023883a 	mov	r17,r2
100033cc:	e0b92c17 	ldw	r2,-6992(fp)
100033d0:	1009883a 	mov	r4,r2
100033d4:	01400784 	movi	r5,30
100033d8:	0006d300 	call	10006d30 <__divsi3>
100033dc:	1021883a 	mov	r16,r2
100033e0:	e4b95117 	ldw	r18,-6844(fp)
100033e4:	8809883a 	mov	r4,r17
100033e8:	01400544 	movi	r5,21
100033ec:	0006df00 	call	10006df0 <__mulsi3>
100033f0:	1023883a 	mov	r17,r2
100033f4:	9009883a 	mov	r4,r18
100033f8:	01405404 	movi	r5,336
100033fc:	0006df00 	call	10006df0 <__mulsi3>
10003400:	8885883a 	add	r2,r17,r2
10003404:	1405883a 	add	r2,r2,r16
10003408:	1085883a 	add	r2,r2,r2
1000340c:	1085883a 	add	r2,r2,r2
10003410:	e0f91304 	addi	r3,fp,-7092
10003414:	1885883a 	add	r2,r3,r2
10003418:	10805a04 	addi	r2,r2,360
1000341c:	10800017 	ldw	r2,0(r2)
10003420:	10001b1e 	bne	r2,zero,10003490 <main+0x315c>
10003424:	e0b92d17 	ldw	r2,-6988(fp)
10003428:	1009883a 	mov	r4,r2
1000342c:	01400784 	movi	r5,30
10003430:	0006d300 	call	10006d30 <__divsi3>
10003434:	1023883a 	mov	r17,r2
10003438:	e0b92c17 	ldw	r2,-6992(fp)
1000343c:	1009883a 	mov	r4,r2
10003440:	01400784 	movi	r5,30
10003444:	0006d300 	call	10006d30 <__divsi3>
10003448:	1021883a 	mov	r16,r2
1000344c:	e4b95117 	ldw	r18,-6844(fp)
10003450:	8809883a 	mov	r4,r17
10003454:	01400544 	movi	r5,21
10003458:	0006df00 	call	10006df0 <__mulsi3>
1000345c:	1023883a 	mov	r17,r2
10003460:	9009883a 	mov	r4,r18
10003464:	01405404 	movi	r5,336
10003468:	0006df00 	call	10006df0 <__mulsi3>
1000346c:	8885883a 	add	r2,r17,r2
10003470:	1405883a 	add	r2,r2,r16
10003474:	1085883a 	add	r2,r2,r2
10003478:	1085883a 	add	r2,r2,r2
1000347c:	e0f91304 	addi	r3,fp,-7092
10003480:	1885883a 	add	r2,r3,r2
10003484:	10805a04 	addi	r2,r2,360
10003488:	10800017 	ldw	r2,0(r2)
1000348c:	10000226 	beq	r2,zero,10003498 <main+0x3164>
		monster2_1_left = False;
10003490:	e0392e15 	stw	zero,-6984(fp)
10003494:	00003b06 	br	10003584 <main+0x3250>
	}
	else if(scene[sceneNum][(monster2_1_y+25)/30][(monster2_1_x+45)/30]!=0 || scene[sceneNum][(monster2_1_y)/30][(monster2_1_x+45)/30]!=0){
10003498:	e0b92d17 	ldw	r2,-6988(fp)
1000349c:	10800644 	addi	r2,r2,25
100034a0:	1009883a 	mov	r4,r2
100034a4:	01400784 	movi	r5,30
100034a8:	0006d300 	call	10006d30 <__divsi3>
100034ac:	1023883a 	mov	r17,r2
100034b0:	e0b92c17 	ldw	r2,-6992(fp)
100034b4:	10800b44 	addi	r2,r2,45
100034b8:	1009883a 	mov	r4,r2
100034bc:	01400784 	movi	r5,30
100034c0:	0006d300 	call	10006d30 <__divsi3>
100034c4:	1021883a 	mov	r16,r2
100034c8:	e4b95117 	ldw	r18,-6844(fp)
100034cc:	8809883a 	mov	r4,r17
100034d0:	01400544 	movi	r5,21
100034d4:	0006df00 	call	10006df0 <__mulsi3>
100034d8:	1023883a 	mov	r17,r2
100034dc:	9009883a 	mov	r4,r18
100034e0:	01405404 	movi	r5,336
100034e4:	0006df00 	call	10006df0 <__mulsi3>
100034e8:	8885883a 	add	r2,r17,r2
100034ec:	1405883a 	add	r2,r2,r16
100034f0:	1085883a 	add	r2,r2,r2
100034f4:	1085883a 	add	r2,r2,r2
100034f8:	e0f91304 	addi	r3,fp,-7092
100034fc:	1885883a 	add	r2,r3,r2
10003500:	10805a04 	addi	r2,r2,360
10003504:	10800017 	ldw	r2,0(r2)
10003508:	10001c1e 	bne	r2,zero,1000357c <main+0x3248>
1000350c:	e0b92d17 	ldw	r2,-6988(fp)
10003510:	1009883a 	mov	r4,r2
10003514:	01400784 	movi	r5,30
10003518:	0006d300 	call	10006d30 <__divsi3>
1000351c:	1023883a 	mov	r17,r2
10003520:	e0b92c17 	ldw	r2,-6992(fp)
10003524:	10800b44 	addi	r2,r2,45
10003528:	1009883a 	mov	r4,r2
1000352c:	01400784 	movi	r5,30
10003530:	0006d300 	call	10006d30 <__divsi3>
10003534:	1021883a 	mov	r16,r2
10003538:	e4b95117 	ldw	r18,-6844(fp)
1000353c:	8809883a 	mov	r4,r17
10003540:	01400544 	movi	r5,21
10003544:	0006df00 	call	10006df0 <__mulsi3>
10003548:	1023883a 	mov	r17,r2
1000354c:	9009883a 	mov	r4,r18
10003550:	01405404 	movi	r5,336
10003554:	0006df00 	call	10006df0 <__mulsi3>
10003558:	8885883a 	add	r2,r17,r2
1000355c:	1405883a 	add	r2,r2,r16
10003560:	1085883a 	add	r2,r2,r2
10003564:	1085883a 	add	r2,r2,r2
10003568:	e0f91304 	addi	r3,fp,-7092
1000356c:	1885883a 	add	r2,r3,r2
10003570:	10805a04 	addi	r2,r2,360
10003574:	10800017 	ldw	r2,0(r2)
10003578:	10000226 	beq	r2,zero,10003584 <main+0x3250>
		monster2_1_left = True;
1000357c:	00800044 	movi	r2,1
10003580:	e0b92e15 	stw	r2,-6984(fp)
	}
	//Monster 2 Jump Code
	if(*MON2_EN == True){
10003584:	0080c804 	movi	r2,800
10003588:	10800003 	ldbu	r2,0(r2)
1000358c:	10803fcc 	andi	r2,r2,255
10003590:	1080201c 	xori	r2,r2,128
10003594:	10bfe004 	addi	r2,r2,-128
10003598:	10800058 	cmpnei	r2,r2,1
1000359c:	1000e11e 	bne	r2,zero,10003924 <main+0x35f0>
		if (monster2_jump_counter >= 40 && mon2_at_top == True){
100035a0:	e0b92f17 	ldw	r2,-6980(fp)
100035a4:	10800a10 	cmplti	r2,r2,40
100035a8:	1000131e 	bne	r2,zero,100035f8 <main+0x32c4>
100035ac:	e0b93017 	ldw	r2,-6976(fp)
100035b0:	10800058 	cmpnei	r2,r2,1
100035b4:	1000101e 	bne	r2,zero,100035f8 <main+0x32c4>
			mon_2_y_inc = 15;
100035b8:	00905c34 	movhi	r2,16752
100035bc:	e0b93215 	stw	r2,-6968(fp)
			monster2_grounded = False;
100035c0:	e0396715 	stw	zero,-6756(fp)
			mon2_hit_bot = False;
100035c4:	e0393115 	stw	zero,-6972(fp)
			monster2_1_left = rand()%2;
100035c8:	00091dc0 	call	100091dc <rand>
100035cc:	1007883a 	mov	r3,r2
100035d0:	00a00034 	movhi	r2,32768
100035d4:	10800044 	addi	r2,r2,1
100035d8:	1884703a 	and	r2,r3,r2
100035dc:	1000040e 	bge	r2,zero,100035f0 <main+0x32bc>
100035e0:	10bfffc4 	addi	r2,r2,-1
100035e4:	00ffff84 	movi	r3,-2
100035e8:	10c4b03a 	or	r2,r2,r3
100035ec:	10800044 	addi	r2,r2,1
100035f0:	e0b92e15 	stw	r2,-6984(fp)
			mon2_at_top = False;
100035f4:	e0393015 	stw	zero,-6976(fp)
		}
		if(mon2_at_top == False){
100035f8:	e0b93017 	ldw	r2,-6976(fp)
100035fc:	1000231e 	bne	r2,zero,1000368c <main+0x3358>
			monster2_jump_counter = 0;
10003600:	e0392f15 	stw	zero,-6980(fp)
			mon_2_y_inc -= (gravity*.35);
10003604:	e1393217 	ldw	r4,-6968(fp)
10003608:	0008c4c0 	call	10008c4c <__extendsfdf2>
1000360c:	1021883a 	mov	r16,r2
10003610:	1823883a 	mov	r17,r3
10003614:	e1394e17 	ldw	r4,-6856(fp)
10003618:	0008c4c0 	call	10008c4c <__extendsfdf2>
1000361c:	100b883a 	mov	r5,r2
10003620:	180d883a 	mov	r6,r3
10003624:	2809883a 	mov	r4,r5
10003628:	300b883a 	mov	r5,r6
1000362c:	019999b4 	movhi	r6,26214
10003630:	31999984 	addi	r6,r6,26214
10003634:	01cff5b4 	movhi	r7,16342
10003638:	39d99984 	addi	r7,r7,26214
1000363c:	0007b100 	call	10007b10 <__muldf3>
10003640:	1009883a 	mov	r4,r2
10003644:	180b883a 	mov	r5,r3
10003648:	2005883a 	mov	r2,r4
1000364c:	2807883a 	mov	r3,r5
10003650:	8009883a 	mov	r4,r16
10003654:	880b883a 	mov	r5,r17
10003658:	100d883a 	mov	r6,r2
1000365c:	180f883a 	mov	r7,r3
10003660:	000837c0 	call	1000837c <__subdf3>
10003664:	1009883a 	mov	r4,r2
10003668:	180b883a 	mov	r5,r3
1000366c:	2005883a 	mov	r2,r4
10003670:	2807883a 	mov	r3,r5
10003674:	1009883a 	mov	r4,r2
10003678:	180b883a 	mov	r5,r3
1000367c:	0008d5c0 	call	10008d5c <__truncdfsf2>
10003680:	1007883a 	mov	r3,r2
10003684:	e0f93215 	stw	r3,-6968(fp)
10003688:	00000106 	br	10003690 <main+0x335c>
		}
		else{
			mon_2_y_inc = 0;
1000368c:	e0393215 	stw	zero,-6968(fp)
		}

		if(mon_2_y_inc < -15){
10003690:	e1393217 	ldw	r4,-6968(fp)
10003694:	01705c34 	movhi	r5,49520
10003698:	00073b00 	call	100073b0 <__lesf2>
1000369c:	1000020e 	bge	r2,zero,100036a8 <main+0x3374>
			mon_2_y_inc = -15;
100036a0:	00b05c34 	movhi	r2,49520
100036a4:	e0b93215 	stw	r2,-6968(fp)
		}
		if(mon_2_y_inc > 15){
100036a8:	e1393217 	ldw	r4,-6968(fp)
100036ac:	01505c34 	movhi	r5,16752
100036b0:	00072f80 	call	100072f8 <__gesf2>
100036b4:	0080020e 	bge	zero,r2,100036c0 <main+0x338c>
			mon_2_y_inc = 15;
100036b8:	00905c34 	movhi	r2,16752
100036bc:	e0b93215 	stw	r2,-6968(fp)
		}
		if(mon2_hit_bot == False || mon_2_y_inc < 0){
100036c0:	e0b93117 	ldw	r2,-6972(fp)
100036c4:	10000426 	beq	r2,zero,100036d8 <main+0x33a4>
100036c8:	e1393217 	ldw	r4,-6968(fp)
100036cc:	000b883a 	mov	r5,zero
100036d0:	00073b00 	call	100073b0 <__lesf2>
100036d4:	10000b0e 	bge	r2,zero,10003704 <main+0x33d0>
			monster2_1_y += mon_2_y_inc;
100036d8:	e1392d17 	ldw	r4,-6988(fp)
100036dc:	00079dc0 	call	100079dc <__floatsisf>
100036e0:	1007883a 	mov	r3,r2
100036e4:	1809883a 	mov	r4,r3
100036e8:	e1793217 	ldw	r5,-6968(fp)
100036ec:	0006e180 	call	10006e18 <__addsf3>
100036f0:	1007883a 	mov	r3,r2
100036f4:	1805883a 	mov	r2,r3
100036f8:	1009883a 	mov	r4,r2
100036fc:	00079640 	call	10007964 <__fixsfsi>
10003700:	e0b92d15 	stw	r2,-6988(fp)
		}

		//mon2 bot collision detection
		if((scene[sceneNum][(monster2_1_y+30)/30][(monster2_1_x+5)/30] != 0 || scene[sceneNum][(monster2_1_y+30)/30][(monster2_1_x+40)/30] != 0)){
10003704:	e0b92d17 	ldw	r2,-6988(fp)
10003708:	10800784 	addi	r2,r2,30
1000370c:	1009883a 	mov	r4,r2
10003710:	01400784 	movi	r5,30
10003714:	0006d300 	call	10006d30 <__divsi3>
10003718:	1023883a 	mov	r17,r2
1000371c:	e0b92c17 	ldw	r2,-6992(fp)
10003720:	10800144 	addi	r2,r2,5
10003724:	1009883a 	mov	r4,r2
10003728:	01400784 	movi	r5,30
1000372c:	0006d300 	call	10006d30 <__divsi3>
10003730:	1021883a 	mov	r16,r2
10003734:	e4b95117 	ldw	r18,-6844(fp)
10003738:	8809883a 	mov	r4,r17
1000373c:	01400544 	movi	r5,21
10003740:	0006df00 	call	10006df0 <__mulsi3>
10003744:	1023883a 	mov	r17,r2
10003748:	9009883a 	mov	r4,r18
1000374c:	01405404 	movi	r5,336
10003750:	0006df00 	call	10006df0 <__mulsi3>
10003754:	8885883a 	add	r2,r17,r2
10003758:	1405883a 	add	r2,r2,r16
1000375c:	1085883a 	add	r2,r2,r2
10003760:	1085883a 	add	r2,r2,r2
10003764:	e0f91304 	addi	r3,fp,-7092
10003768:	1885883a 	add	r2,r3,r2
1000376c:	10805a04 	addi	r2,r2,360
10003770:	10800017 	ldw	r2,0(r2)
10003774:	10001d1e 	bne	r2,zero,100037ec <main+0x34b8>
10003778:	e0b92d17 	ldw	r2,-6988(fp)
1000377c:	10800784 	addi	r2,r2,30
10003780:	1009883a 	mov	r4,r2
10003784:	01400784 	movi	r5,30
10003788:	0006d300 	call	10006d30 <__divsi3>
1000378c:	1023883a 	mov	r17,r2
10003790:	e0b92c17 	ldw	r2,-6992(fp)
10003794:	10800a04 	addi	r2,r2,40
10003798:	1009883a 	mov	r4,r2
1000379c:	01400784 	movi	r5,30
100037a0:	0006d300 	call	10006d30 <__divsi3>
100037a4:	1021883a 	mov	r16,r2
100037a8:	e4b95117 	ldw	r18,-6844(fp)
100037ac:	8809883a 	mov	r4,r17
100037b0:	01400544 	movi	r5,21
100037b4:	0006df00 	call	10006df0 <__mulsi3>
100037b8:	1023883a 	mov	r17,r2
100037bc:	9009883a 	mov	r4,r18
100037c0:	01405404 	movi	r5,336
100037c4:	0006df00 	call	10006df0 <__mulsi3>
100037c8:	8885883a 	add	r2,r17,r2
100037cc:	1405883a 	add	r2,r2,r16
100037d0:	1085883a 	add	r2,r2,r2
100037d4:	1085883a 	add	r2,r2,r2
100037d8:	e0f91304 	addi	r3,fp,-7092
100037dc:	1885883a 	add	r2,r3,r2
100037e0:	10805a04 	addi	r2,r2,360
100037e4:	10800017 	ldw	r2,0(r2)
100037e8:	10000a26 	beq	r2,zero,10003814 <main+0x34e0>
			monster2_1_y = (monster2_1_y/30)*30;
100037ec:	e0b92d17 	ldw	r2,-6988(fp)
100037f0:	1009883a 	mov	r4,r2
100037f4:	01400784 	movi	r5,30
100037f8:	0006d300 	call	10006d30 <__divsi3>
100037fc:	1009883a 	mov	r4,r2
10003800:	01400784 	movi	r5,30
10003804:	0006df00 	call	10006df0 <__mulsi3>
10003808:	e0b92d15 	stw	r2,-6988(fp)
			mon2_hit_bot = True;
1000380c:	00800044 	movi	r2,1
10003810:	e0b93115 	stw	r2,-6972(fp)
		}

		//If hits head
		if((scene[sceneNum][(monster2_1_y-5)/30][(monster2_1_x+5)/30] != 0 || scene[sceneNum][(monster2_1_y-5)/30][(monster2_1_x+40)/30] != 0) && mon_2_y_inc < 0){
10003814:	e0b92d17 	ldw	r2,-6988(fp)
10003818:	10bffec4 	addi	r2,r2,-5
1000381c:	1009883a 	mov	r4,r2
10003820:	01400784 	movi	r5,30
10003824:	0006d300 	call	10006d30 <__divsi3>
10003828:	1023883a 	mov	r17,r2
1000382c:	e0b92c17 	ldw	r2,-6992(fp)
10003830:	10800144 	addi	r2,r2,5
10003834:	1009883a 	mov	r4,r2
10003838:	01400784 	movi	r5,30
1000383c:	0006d300 	call	10006d30 <__divsi3>
10003840:	1021883a 	mov	r16,r2
10003844:	e4b95117 	ldw	r18,-6844(fp)
10003848:	8809883a 	mov	r4,r17
1000384c:	01400544 	movi	r5,21
10003850:	0006df00 	call	10006df0 <__mulsi3>
10003854:	1023883a 	mov	r17,r2
10003858:	9009883a 	mov	r4,r18
1000385c:	01405404 	movi	r5,336
10003860:	0006df00 	call	10006df0 <__mulsi3>
10003864:	8885883a 	add	r2,r17,r2
10003868:	1405883a 	add	r2,r2,r16
1000386c:	1085883a 	add	r2,r2,r2
10003870:	1085883a 	add	r2,r2,r2
10003874:	e0f91304 	addi	r3,fp,-7092
10003878:	1885883a 	add	r2,r3,r2
1000387c:	10805a04 	addi	r2,r2,360
10003880:	10800017 	ldw	r2,0(r2)
10003884:	10001d1e 	bne	r2,zero,100038fc <main+0x35c8>
10003888:	e0b92d17 	ldw	r2,-6988(fp)
1000388c:	10bffec4 	addi	r2,r2,-5
10003890:	1009883a 	mov	r4,r2
10003894:	01400784 	movi	r5,30
10003898:	0006d300 	call	10006d30 <__divsi3>
1000389c:	1023883a 	mov	r17,r2
100038a0:	e0b92c17 	ldw	r2,-6992(fp)
100038a4:	10800a04 	addi	r2,r2,40
100038a8:	1009883a 	mov	r4,r2
100038ac:	01400784 	movi	r5,30
100038b0:	0006d300 	call	10006d30 <__divsi3>
100038b4:	1021883a 	mov	r16,r2
100038b8:	e4b95117 	ldw	r18,-6844(fp)
100038bc:	8809883a 	mov	r4,r17
100038c0:	01400544 	movi	r5,21
100038c4:	0006df00 	call	10006df0 <__mulsi3>
100038c8:	1023883a 	mov	r17,r2
100038cc:	9009883a 	mov	r4,r18
100038d0:	01405404 	movi	r5,336
100038d4:	0006df00 	call	10006df0 <__mulsi3>
100038d8:	8885883a 	add	r2,r17,r2
100038dc:	1405883a 	add	r2,r2,r16
100038e0:	1085883a 	add	r2,r2,r2
100038e4:	1085883a 	add	r2,r2,r2
100038e8:	e0f91304 	addi	r3,fp,-7092
100038ec:	1885883a 	add	r2,r3,r2
100038f0:	10805a04 	addi	r2,r2,360
100038f4:	10800017 	ldw	r2,0(r2)
100038f8:	10000726 	beq	r2,zero,10003918 <main+0x35e4>
100038fc:	e1393217 	ldw	r4,-6968(fp)
10003900:	000b883a 	mov	r5,zero
10003904:	00073b00 	call	100073b0 <__lesf2>
10003908:	1000030e 	bge	r2,zero,10003918 <main+0x35e4>
			mon_2_y_inc = 0;
1000390c:	e0393215 	stw	zero,-6968(fp)
			mon2_at_top = True;
10003910:	00800044 	movi	r2,1
10003914:	e0b93015 	stw	r2,-6976(fp)
		}

		monster2_jump_counter+=1;
10003918:	e0b92f17 	ldw	r2,-6980(fp)
1000391c:	10800044 	addi	r2,r2,1
10003920:	e0b92f15 	stw	r2,-6980(fp)
		}
		//Monster 3 collision detection
		if(scene[sceneNum][(monster3_1_y)/30][(monster3_1_x-5)/30]!=0 || scene[sceneNum][(monster3_1_y+10)/30][(monster3_1_x-5)/30]!=0){
10003924:	e0b93517 	ldw	r2,-6956(fp)
10003928:	1009883a 	mov	r4,r2
1000392c:	01400784 	movi	r5,30
10003930:	0006d300 	call	10006d30 <__divsi3>
10003934:	1023883a 	mov	r17,r2
10003938:	e0b93417 	ldw	r2,-6960(fp)
1000393c:	10bffec4 	addi	r2,r2,-5
10003940:	1009883a 	mov	r4,r2
10003944:	01400784 	movi	r5,30
10003948:	0006d300 	call	10006d30 <__divsi3>
1000394c:	1021883a 	mov	r16,r2
10003950:	e4b95117 	ldw	r18,-6844(fp)
10003954:	8809883a 	mov	r4,r17
10003958:	01400544 	movi	r5,21
1000395c:	0006df00 	call	10006df0 <__mulsi3>
10003960:	1023883a 	mov	r17,r2
10003964:	9009883a 	mov	r4,r18
10003968:	01405404 	movi	r5,336
1000396c:	0006df00 	call	10006df0 <__mulsi3>
10003970:	8885883a 	add	r2,r17,r2
10003974:	1405883a 	add	r2,r2,r16
10003978:	1085883a 	add	r2,r2,r2
1000397c:	1085883a 	add	r2,r2,r2
10003980:	e0f91304 	addi	r3,fp,-7092
10003984:	1885883a 	add	r2,r3,r2
10003988:	10805a04 	addi	r2,r2,360
1000398c:	10800017 	ldw	r2,0(r2)
10003990:	10001d1e 	bne	r2,zero,10003a08 <main+0x36d4>
10003994:	e0b93517 	ldw	r2,-6956(fp)
10003998:	10800284 	addi	r2,r2,10
1000399c:	1009883a 	mov	r4,r2
100039a0:	01400784 	movi	r5,30
100039a4:	0006d300 	call	10006d30 <__divsi3>
100039a8:	1023883a 	mov	r17,r2
100039ac:	e0b93417 	ldw	r2,-6960(fp)
100039b0:	10bffec4 	addi	r2,r2,-5
100039b4:	1009883a 	mov	r4,r2
100039b8:	01400784 	movi	r5,30
100039bc:	0006d300 	call	10006d30 <__divsi3>
100039c0:	1021883a 	mov	r16,r2
100039c4:	e4b95117 	ldw	r18,-6844(fp)
100039c8:	8809883a 	mov	r4,r17
100039cc:	01400544 	movi	r5,21
100039d0:	0006df00 	call	10006df0 <__mulsi3>
100039d4:	1023883a 	mov	r17,r2
100039d8:	9009883a 	mov	r4,r18
100039dc:	01405404 	movi	r5,336
100039e0:	0006df00 	call	10006df0 <__mulsi3>
100039e4:	8885883a 	add	r2,r17,r2
100039e8:	1405883a 	add	r2,r2,r16
100039ec:	1085883a 	add	r2,r2,r2
100039f0:	1085883a 	add	r2,r2,r2
100039f4:	e0f91304 	addi	r3,fp,-7092
100039f8:	1885883a 	add	r2,r3,r2
100039fc:	10805a04 	addi	r2,r2,360
10003a00:	10800017 	ldw	r2,0(r2)
10003a04:	10000226 	beq	r2,zero,10003a10 <main+0x36dc>
			monster3_1_left = False;
10003a08:	e0393615 	stw	zero,-6952(fp)
10003a0c:	00003b06 	br	10003afc <main+0x37c8>
		}
		else if(scene[sceneNum][(monster3_1_y)/30][(monster3_1_x+35)/30]!=0 || scene[sceneNum][(monster3_1_y+10)/30][(monster3_1_x+35)/30]!=0){
10003a10:	e0b93517 	ldw	r2,-6956(fp)
10003a14:	1009883a 	mov	r4,r2
10003a18:	01400784 	movi	r5,30
10003a1c:	0006d300 	call	10006d30 <__divsi3>
10003a20:	1023883a 	mov	r17,r2
10003a24:	e0b93417 	ldw	r2,-6960(fp)
10003a28:	108008c4 	addi	r2,r2,35
10003a2c:	1009883a 	mov	r4,r2
10003a30:	01400784 	movi	r5,30
10003a34:	0006d300 	call	10006d30 <__divsi3>
10003a38:	1021883a 	mov	r16,r2
10003a3c:	e4b95117 	ldw	r18,-6844(fp)
10003a40:	8809883a 	mov	r4,r17
10003a44:	01400544 	movi	r5,21
10003a48:	0006df00 	call	10006df0 <__mulsi3>
10003a4c:	1023883a 	mov	r17,r2
10003a50:	9009883a 	mov	r4,r18
10003a54:	01405404 	movi	r5,336
10003a58:	0006df00 	call	10006df0 <__mulsi3>
10003a5c:	8885883a 	add	r2,r17,r2
10003a60:	1405883a 	add	r2,r2,r16
10003a64:	1085883a 	add	r2,r2,r2
10003a68:	1085883a 	add	r2,r2,r2
10003a6c:	e0f91304 	addi	r3,fp,-7092
10003a70:	1885883a 	add	r2,r3,r2
10003a74:	10805a04 	addi	r2,r2,360
10003a78:	10800017 	ldw	r2,0(r2)
10003a7c:	10001d1e 	bne	r2,zero,10003af4 <main+0x37c0>
10003a80:	e0b93517 	ldw	r2,-6956(fp)
10003a84:	10800284 	addi	r2,r2,10
10003a88:	1009883a 	mov	r4,r2
10003a8c:	01400784 	movi	r5,30
10003a90:	0006d300 	call	10006d30 <__divsi3>
10003a94:	1023883a 	mov	r17,r2
10003a98:	e0b93417 	ldw	r2,-6960(fp)
10003a9c:	108008c4 	addi	r2,r2,35
10003aa0:	1009883a 	mov	r4,r2
10003aa4:	01400784 	movi	r5,30
10003aa8:	0006d300 	call	10006d30 <__divsi3>
10003aac:	1021883a 	mov	r16,r2
10003ab0:	e4b95117 	ldw	r18,-6844(fp)
10003ab4:	8809883a 	mov	r4,r17
10003ab8:	01400544 	movi	r5,21
10003abc:	0006df00 	call	10006df0 <__mulsi3>
10003ac0:	1023883a 	mov	r17,r2
10003ac4:	9009883a 	mov	r4,r18
10003ac8:	01405404 	movi	r5,336
10003acc:	0006df00 	call	10006df0 <__mulsi3>
10003ad0:	8885883a 	add	r2,r17,r2
10003ad4:	1405883a 	add	r2,r2,r16
10003ad8:	1085883a 	add	r2,r2,r2
10003adc:	1085883a 	add	r2,r2,r2
10003ae0:	e0f91304 	addi	r3,fp,-7092
10003ae4:	1885883a 	add	r2,r3,r2
10003ae8:	10805a04 	addi	r2,r2,360
10003aec:	10800017 	ldw	r2,0(r2)
10003af0:	10000226 	beq	r2,zero,10003afc <main+0x37c8>
			monster3_1_left = True;
10003af4:	00800044 	movi	r2,1
10003af8:	e0b93615 	stw	r2,-6952(fp)
		}


		//bullet collision with monsters
		if(*BUL1_X+12 > monster1_1_x && *BUL1_X < monster1_1_x+30 && *BUL1_Y+12 > monster1_1_y && *BUL1_Y < monster1_1_y+30 && *MON1_EN == True && *BUL1_EN == 1){
10003afc:	00808804 	movi	r2,544
10003b00:	10800017 	ldw	r2,0(r2)
10003b04:	10800304 	addi	r2,r2,12
10003b08:	e0f92817 	ldw	r3,-7008(fp)
10003b0c:	18801f0e 	bge	r3,r2,10003b8c <main+0x3858>
10003b10:	00808804 	movi	r2,544
10003b14:	10c00017 	ldw	r3,0(r2)
10003b18:	e0b92817 	ldw	r2,-7008(fp)
10003b1c:	10800784 	addi	r2,r2,30
10003b20:	18801a0e 	bge	r3,r2,10003b8c <main+0x3858>
10003b24:	00808404 	movi	r2,528
10003b28:	10800017 	ldw	r2,0(r2)
10003b2c:	10800304 	addi	r2,r2,12
10003b30:	e0f92917 	ldw	r3,-7004(fp)
10003b34:	1880150e 	bge	r3,r2,10003b8c <main+0x3858>
10003b38:	00808404 	movi	r2,528
10003b3c:	10c00017 	ldw	r3,0(r2)
10003b40:	e0b92917 	ldw	r2,-7004(fp)
10003b44:	10800784 	addi	r2,r2,30
10003b48:	1880100e 	bge	r3,r2,10003b8c <main+0x3858>
10003b4c:	0080d404 	movi	r2,848
10003b50:	10800003 	ldbu	r2,0(r2)
10003b54:	10803fcc 	andi	r2,r2,255
10003b58:	1080201c 	xori	r2,r2,128
10003b5c:	10bfe004 	addi	r2,r2,-128
10003b60:	10800058 	cmpnei	r2,r2,1
10003b64:	1000091e 	bne	r2,zero,10003b8c <main+0x3858>
10003b68:	00808c04 	movi	r2,560
10003b6c:	10800017 	ldw	r2,0(r2)
10003b70:	10800058 	cmpnei	r2,r2,1
10003b74:	1000051e 	bne	r2,zero,10003b8c <main+0x3858>
			*BUL1_EN=0;
10003b78:	00808c04 	movi	r2,560
10003b7c:	10000015 	stw	zero,0(r2)
			monster1_1_health-=1;
10003b80:	e0b92b17 	ldw	r2,-6996(fp)
10003b84:	10bfffc4 	addi	r2,r2,-1
10003b88:	e0b92b15 	stw	r2,-6996(fp)
		}
		if(*BUL2_X+12 > monster1_1_x && *BUL2_X < monster1_1_x+30 && *BUL2_Y+12 > monster1_1_y && *BUL2_Y < monster1_1_y+30 && *MON1_EN == True && *BUL2_EN == 1){
10003b8c:	00807c04 	movi	r2,496
10003b90:	10800017 	ldw	r2,0(r2)
10003b94:	10800304 	addi	r2,r2,12
10003b98:	e0f92817 	ldw	r3,-7008(fp)
10003b9c:	18801f0e 	bge	r3,r2,10003c1c <main+0x38e8>
10003ba0:	00807c04 	movi	r2,496
10003ba4:	10c00017 	ldw	r3,0(r2)
10003ba8:	e0b92817 	ldw	r2,-7008(fp)
10003bac:	10800784 	addi	r2,r2,30
10003bb0:	18801a0e 	bge	r3,r2,10003c1c <main+0x38e8>
10003bb4:	00807804 	movi	r2,480
10003bb8:	10800017 	ldw	r2,0(r2)
10003bbc:	10800304 	addi	r2,r2,12
10003bc0:	e0f92917 	ldw	r3,-7004(fp)
10003bc4:	1880150e 	bge	r3,r2,10003c1c <main+0x38e8>
10003bc8:	00807804 	movi	r2,480
10003bcc:	10c00017 	ldw	r3,0(r2)
10003bd0:	e0b92917 	ldw	r2,-7004(fp)
10003bd4:	10800784 	addi	r2,r2,30
10003bd8:	1880100e 	bge	r3,r2,10003c1c <main+0x38e8>
10003bdc:	0080d404 	movi	r2,848
10003be0:	10800003 	ldbu	r2,0(r2)
10003be4:	10803fcc 	andi	r2,r2,255
10003be8:	1080201c 	xori	r2,r2,128
10003bec:	10bfe004 	addi	r2,r2,-128
10003bf0:	10800058 	cmpnei	r2,r2,1
10003bf4:	1000091e 	bne	r2,zero,10003c1c <main+0x38e8>
10003bf8:	00808004 	movi	r2,512
10003bfc:	10800017 	ldw	r2,0(r2)
10003c00:	10800058 	cmpnei	r2,r2,1
10003c04:	1000051e 	bne	r2,zero,10003c1c <main+0x38e8>
			*BUL2_EN=0;
10003c08:	00808004 	movi	r2,512
10003c0c:	10000015 	stw	zero,0(r2)
			monster1_1_health-=1;
10003c10:	e0b92b17 	ldw	r2,-6996(fp)
10003c14:	10bfffc4 	addi	r2,r2,-1
10003c18:	e0b92b15 	stw	r2,-6996(fp)
		}
		if(*BUL3_X+12 > monster1_1_x && *BUL3_X < monster1_1_x+30 && *BUL3_Y+12 > monster1_1_y && *BUL3_Y < monster1_1_y+30 && *MON1_EN == True && *BUL3_EN == 1){
10003c1c:	00807004 	movi	r2,448
10003c20:	10800017 	ldw	r2,0(r2)
10003c24:	10800304 	addi	r2,r2,12
10003c28:	e0f92817 	ldw	r3,-7008(fp)
10003c2c:	18801f0e 	bge	r3,r2,10003cac <main+0x3978>
10003c30:	00807004 	movi	r2,448
10003c34:	10c00017 	ldw	r3,0(r2)
10003c38:	e0b92817 	ldw	r2,-7008(fp)
10003c3c:	10800784 	addi	r2,r2,30
10003c40:	18801a0e 	bge	r3,r2,10003cac <main+0x3978>
10003c44:	00806c04 	movi	r2,432
10003c48:	10800017 	ldw	r2,0(r2)
10003c4c:	10800304 	addi	r2,r2,12
10003c50:	e0f92917 	ldw	r3,-7004(fp)
10003c54:	1880150e 	bge	r3,r2,10003cac <main+0x3978>
10003c58:	00806c04 	movi	r2,432
10003c5c:	10c00017 	ldw	r3,0(r2)
10003c60:	e0b92917 	ldw	r2,-7004(fp)
10003c64:	10800784 	addi	r2,r2,30
10003c68:	1880100e 	bge	r3,r2,10003cac <main+0x3978>
10003c6c:	0080d404 	movi	r2,848
10003c70:	10800003 	ldbu	r2,0(r2)
10003c74:	10803fcc 	andi	r2,r2,255
10003c78:	1080201c 	xori	r2,r2,128
10003c7c:	10bfe004 	addi	r2,r2,-128
10003c80:	10800058 	cmpnei	r2,r2,1
10003c84:	1000091e 	bne	r2,zero,10003cac <main+0x3978>
10003c88:	00807404 	movi	r2,464
10003c8c:	10800017 	ldw	r2,0(r2)
10003c90:	10800058 	cmpnei	r2,r2,1
10003c94:	1000051e 	bne	r2,zero,10003cac <main+0x3978>
			*BUL3_EN=0;
10003c98:	00807404 	movi	r2,464
10003c9c:	10000015 	stw	zero,0(r2)
			monster1_1_health-=1;
10003ca0:	e0b92b17 	ldw	r2,-6996(fp)
10003ca4:	10bfffc4 	addi	r2,r2,-1
10003ca8:	e0b92b15 	stw	r2,-6996(fp)
		}
		if(*BUL1_X+12 > monster2_1_x && *BUL1_X < monster2_1_x+30 && *BUL1_Y+12 > monster2_1_y && *BUL1_Y < monster2_1_y+30 && *MON2_EN == True && *BUL1_EN == 1){
10003cac:	00808804 	movi	r2,544
10003cb0:	10800017 	ldw	r2,0(r2)
10003cb4:	10800304 	addi	r2,r2,12
10003cb8:	e0f92c17 	ldw	r3,-6992(fp)
10003cbc:	18801f0e 	bge	r3,r2,10003d3c <main+0x3a08>
10003cc0:	00808804 	movi	r2,544
10003cc4:	10c00017 	ldw	r3,0(r2)
10003cc8:	e0b92c17 	ldw	r2,-6992(fp)
10003ccc:	10800784 	addi	r2,r2,30
10003cd0:	18801a0e 	bge	r3,r2,10003d3c <main+0x3a08>
10003cd4:	00808404 	movi	r2,528
10003cd8:	10800017 	ldw	r2,0(r2)
10003cdc:	10800304 	addi	r2,r2,12
10003ce0:	e0f92d17 	ldw	r3,-6988(fp)
10003ce4:	1880150e 	bge	r3,r2,10003d3c <main+0x3a08>
10003ce8:	00808404 	movi	r2,528
10003cec:	10c00017 	ldw	r3,0(r2)
10003cf0:	e0b92d17 	ldw	r2,-6988(fp)
10003cf4:	10800784 	addi	r2,r2,30
10003cf8:	1880100e 	bge	r3,r2,10003d3c <main+0x3a08>
10003cfc:	0080c804 	movi	r2,800
10003d00:	10800003 	ldbu	r2,0(r2)
10003d04:	10803fcc 	andi	r2,r2,255
10003d08:	1080201c 	xori	r2,r2,128
10003d0c:	10bfe004 	addi	r2,r2,-128
10003d10:	10800058 	cmpnei	r2,r2,1
10003d14:	1000091e 	bne	r2,zero,10003d3c <main+0x3a08>
10003d18:	00808c04 	movi	r2,560
10003d1c:	10800017 	ldw	r2,0(r2)
10003d20:	10800058 	cmpnei	r2,r2,1
10003d24:	1000051e 	bne	r2,zero,10003d3c <main+0x3a08>
			*BUL1_EN=0;
10003d28:	00808c04 	movi	r2,560
10003d2c:	10000015 	stw	zero,0(r2)
			monster2_1_health-=1;
10003d30:	e0b93317 	ldw	r2,-6964(fp)
10003d34:	10bfffc4 	addi	r2,r2,-1
10003d38:	e0b93315 	stw	r2,-6964(fp)
		}
		if(*BUL2_X+12 > monster2_1_x && *BUL2_X < monster2_1_x+30 && *BUL2_Y+12 > monster2_1_y && *BUL2_Y < monster2_1_y+30 && *MON2_EN == True && *BUL2_EN == 1){
10003d3c:	00807c04 	movi	r2,496
10003d40:	10800017 	ldw	r2,0(r2)
10003d44:	10800304 	addi	r2,r2,12
10003d48:	e0f92c17 	ldw	r3,-6992(fp)
10003d4c:	18801f0e 	bge	r3,r2,10003dcc <main+0x3a98>
10003d50:	00807c04 	movi	r2,496
10003d54:	10c00017 	ldw	r3,0(r2)
10003d58:	e0b92c17 	ldw	r2,-6992(fp)
10003d5c:	10800784 	addi	r2,r2,30
10003d60:	18801a0e 	bge	r3,r2,10003dcc <main+0x3a98>
10003d64:	00807804 	movi	r2,480
10003d68:	10800017 	ldw	r2,0(r2)
10003d6c:	10800304 	addi	r2,r2,12
10003d70:	e0f92d17 	ldw	r3,-6988(fp)
10003d74:	1880150e 	bge	r3,r2,10003dcc <main+0x3a98>
10003d78:	00807804 	movi	r2,480
10003d7c:	10c00017 	ldw	r3,0(r2)
10003d80:	e0b92d17 	ldw	r2,-6988(fp)
10003d84:	10800784 	addi	r2,r2,30
10003d88:	1880100e 	bge	r3,r2,10003dcc <main+0x3a98>
10003d8c:	0080c804 	movi	r2,800
10003d90:	10800003 	ldbu	r2,0(r2)
10003d94:	10803fcc 	andi	r2,r2,255
10003d98:	1080201c 	xori	r2,r2,128
10003d9c:	10bfe004 	addi	r2,r2,-128
10003da0:	10800058 	cmpnei	r2,r2,1
10003da4:	1000091e 	bne	r2,zero,10003dcc <main+0x3a98>
10003da8:	00808004 	movi	r2,512
10003dac:	10800017 	ldw	r2,0(r2)
10003db0:	10800058 	cmpnei	r2,r2,1
10003db4:	1000051e 	bne	r2,zero,10003dcc <main+0x3a98>
			*BUL2_EN=0;
10003db8:	00808004 	movi	r2,512
10003dbc:	10000015 	stw	zero,0(r2)
			monster2_1_health-=1;
10003dc0:	e0b93317 	ldw	r2,-6964(fp)
10003dc4:	10bfffc4 	addi	r2,r2,-1
10003dc8:	e0b93315 	stw	r2,-6964(fp)
		}
		if(*BUL3_X+12 > monster2_1_x && *BUL3_X < monster2_1_x+30 && *BUL3_Y+12 > monster2_1_y && *BUL3_Y < monster2_1_y+30 && *MON2_EN == True && *BUL3_EN == 1){
10003dcc:	00807004 	movi	r2,448
10003dd0:	10800017 	ldw	r2,0(r2)
10003dd4:	10800304 	addi	r2,r2,12
10003dd8:	e0f92c17 	ldw	r3,-6992(fp)
10003ddc:	18801f0e 	bge	r3,r2,10003e5c <main+0x3b28>
10003de0:	00807004 	movi	r2,448
10003de4:	10c00017 	ldw	r3,0(r2)
10003de8:	e0b92c17 	ldw	r2,-6992(fp)
10003dec:	10800784 	addi	r2,r2,30
10003df0:	18801a0e 	bge	r3,r2,10003e5c <main+0x3b28>
10003df4:	00806c04 	movi	r2,432
10003df8:	10800017 	ldw	r2,0(r2)
10003dfc:	10800304 	addi	r2,r2,12
10003e00:	e0f92d17 	ldw	r3,-6988(fp)
10003e04:	1880150e 	bge	r3,r2,10003e5c <main+0x3b28>
10003e08:	00806c04 	movi	r2,432
10003e0c:	10c00017 	ldw	r3,0(r2)
10003e10:	e0b92d17 	ldw	r2,-6988(fp)
10003e14:	10800784 	addi	r2,r2,30
10003e18:	1880100e 	bge	r3,r2,10003e5c <main+0x3b28>
10003e1c:	0080c804 	movi	r2,800
10003e20:	10800003 	ldbu	r2,0(r2)
10003e24:	10803fcc 	andi	r2,r2,255
10003e28:	1080201c 	xori	r2,r2,128
10003e2c:	10bfe004 	addi	r2,r2,-128
10003e30:	10800058 	cmpnei	r2,r2,1
10003e34:	1000091e 	bne	r2,zero,10003e5c <main+0x3b28>
10003e38:	00807404 	movi	r2,464
10003e3c:	10800017 	ldw	r2,0(r2)
10003e40:	10800058 	cmpnei	r2,r2,1
10003e44:	1000051e 	bne	r2,zero,10003e5c <main+0x3b28>
			*BUL3_EN=0;
10003e48:	00807404 	movi	r2,464
10003e4c:	10000015 	stw	zero,0(r2)
			monster2_1_health-=1;
10003e50:	e0b93317 	ldw	r2,-6964(fp)
10003e54:	10bfffc4 	addi	r2,r2,-1
10003e58:	e0b93315 	stw	r2,-6964(fp)
		}
		if(*BUL1_X+12 > monster3_1_x && *BUL1_X < monster3_1_x+30 && *BUL1_Y+12 > monster3_1_y && *BUL1_Y < monster3_1_y+10 && *MON3_EN == True && *BUL1_EN == 1){
10003e5c:	00808804 	movi	r2,544
10003e60:	10800017 	ldw	r2,0(r2)
10003e64:	10800304 	addi	r2,r2,12
10003e68:	e0f93417 	ldw	r3,-6960(fp)
10003e6c:	18801c0e 	bge	r3,r2,10003ee0 <main+0x3bac>
10003e70:	00808804 	movi	r2,544
10003e74:	10c00017 	ldw	r3,0(r2)
10003e78:	e0b93417 	ldw	r2,-6960(fp)
10003e7c:	10800784 	addi	r2,r2,30
10003e80:	1880170e 	bge	r3,r2,10003ee0 <main+0x3bac>
10003e84:	00808404 	movi	r2,528
10003e88:	10800017 	ldw	r2,0(r2)
10003e8c:	10800304 	addi	r2,r2,12
10003e90:	e0f93517 	ldw	r3,-6956(fp)
10003e94:	1880120e 	bge	r3,r2,10003ee0 <main+0x3bac>
10003e98:	00808404 	movi	r2,528
10003e9c:	10c00017 	ldw	r3,0(r2)
10003ea0:	e0b93517 	ldw	r2,-6956(fp)
10003ea4:	10800284 	addi	r2,r2,10
10003ea8:	18800d0e 	bge	r3,r2,10003ee0 <main+0x3bac>
10003eac:	0080bc04 	movi	r2,752
10003eb0:	10800003 	ldbu	r2,0(r2)
10003eb4:	10803fcc 	andi	r2,r2,255
10003eb8:	1080201c 	xori	r2,r2,128
10003ebc:	10bfe004 	addi	r2,r2,-128
10003ec0:	10800058 	cmpnei	r2,r2,1
10003ec4:	1000061e 	bne	r2,zero,10003ee0 <main+0x3bac>
10003ec8:	00808c04 	movi	r2,560
10003ecc:	10800017 	ldw	r2,0(r2)
10003ed0:	10800058 	cmpnei	r2,r2,1
10003ed4:	1000021e 	bne	r2,zero,10003ee0 <main+0x3bac>
			*BUL1_EN=0;
10003ed8:	00808c04 	movi	r2,560
10003edc:	10000015 	stw	zero,0(r2)
		}
		if(*BUL2_X+12 > monster3_1_x && *BUL2_X < monster3_1_x+30 && *BUL2_Y+12 > monster3_1_y && *BUL2_Y < monster3_1_y+10 && *MON3_EN == True && *BUL2_EN == 1){
10003ee0:	00807c04 	movi	r2,496
10003ee4:	10800017 	ldw	r2,0(r2)
10003ee8:	10800304 	addi	r2,r2,12
10003eec:	e0f93417 	ldw	r3,-6960(fp)
10003ef0:	18801c0e 	bge	r3,r2,10003f64 <main+0x3c30>
10003ef4:	00807c04 	movi	r2,496
10003ef8:	10c00017 	ldw	r3,0(r2)
10003efc:	e0b93417 	ldw	r2,-6960(fp)
10003f00:	10800784 	addi	r2,r2,30
10003f04:	1880170e 	bge	r3,r2,10003f64 <main+0x3c30>
10003f08:	00807804 	movi	r2,480
10003f0c:	10800017 	ldw	r2,0(r2)
10003f10:	10800304 	addi	r2,r2,12
10003f14:	e0f93517 	ldw	r3,-6956(fp)
10003f18:	1880120e 	bge	r3,r2,10003f64 <main+0x3c30>
10003f1c:	00807804 	movi	r2,480
10003f20:	10c00017 	ldw	r3,0(r2)
10003f24:	e0b93517 	ldw	r2,-6956(fp)
10003f28:	10800284 	addi	r2,r2,10
10003f2c:	18800d0e 	bge	r3,r2,10003f64 <main+0x3c30>
10003f30:	0080bc04 	movi	r2,752
10003f34:	10800003 	ldbu	r2,0(r2)
10003f38:	10803fcc 	andi	r2,r2,255
10003f3c:	1080201c 	xori	r2,r2,128
10003f40:	10bfe004 	addi	r2,r2,-128
10003f44:	10800058 	cmpnei	r2,r2,1
10003f48:	1000061e 	bne	r2,zero,10003f64 <main+0x3c30>
10003f4c:	00808004 	movi	r2,512
10003f50:	10800017 	ldw	r2,0(r2)
10003f54:	10800058 	cmpnei	r2,r2,1
10003f58:	1000021e 	bne	r2,zero,10003f64 <main+0x3c30>
			*BUL2_EN=0;
10003f5c:	00808004 	movi	r2,512
10003f60:	10000015 	stw	zero,0(r2)
		}
		if(*BUL3_X+12 > monster3_1_x && *BUL3_X < monster3_1_x+30 && *BUL3_Y+12 > monster3_1_y && *BUL3_Y < monster3_1_y+10 && *MON3_EN == True && *BUL3_EN == 1){
10003f64:	00807004 	movi	r2,448
10003f68:	10800017 	ldw	r2,0(r2)
10003f6c:	10800304 	addi	r2,r2,12
10003f70:	e0f93417 	ldw	r3,-6960(fp)
10003f74:	18801c0e 	bge	r3,r2,10003fe8 <main+0x3cb4>
10003f78:	00807004 	movi	r2,448
10003f7c:	10c00017 	ldw	r3,0(r2)
10003f80:	e0b93417 	ldw	r2,-6960(fp)
10003f84:	10800784 	addi	r2,r2,30
10003f88:	1880170e 	bge	r3,r2,10003fe8 <main+0x3cb4>
10003f8c:	00806c04 	movi	r2,432
10003f90:	10800017 	ldw	r2,0(r2)
10003f94:	10800304 	addi	r2,r2,12
10003f98:	e0f93517 	ldw	r3,-6956(fp)
10003f9c:	1880120e 	bge	r3,r2,10003fe8 <main+0x3cb4>
10003fa0:	00806c04 	movi	r2,432
10003fa4:	10c00017 	ldw	r3,0(r2)
10003fa8:	e0b93517 	ldw	r2,-6956(fp)
10003fac:	10800284 	addi	r2,r2,10
10003fb0:	18800d0e 	bge	r3,r2,10003fe8 <main+0x3cb4>
10003fb4:	0080bc04 	movi	r2,752
10003fb8:	10800003 	ldbu	r2,0(r2)
10003fbc:	10803fcc 	andi	r2,r2,255
10003fc0:	1080201c 	xori	r2,r2,128
10003fc4:	10bfe004 	addi	r2,r2,-128
10003fc8:	10800058 	cmpnei	r2,r2,1
10003fcc:	1000061e 	bne	r2,zero,10003fe8 <main+0x3cb4>
10003fd0:	00807404 	movi	r2,464
10003fd4:	10800017 	ldw	r2,0(r2)
10003fd8:	10800058 	cmpnei	r2,r2,1
10003fdc:	1000021e 	bne	r2,zero,10003fe8 <main+0x3cb4>
			*BUL3_EN=0;
10003fe0:	00807404 	movi	r2,464
10003fe4:	10000015 	stw	zero,0(r2)
		}
		if(*BUL1_X+12 > *KRAID_X && *BUL1_X < *KRAID_X+50 && *BUL1_Y+12 > *KRAID_Y && *BUL1_Y < *KRAID_Y+70 && (*KRAID_G_EN == True || *KRAID_N_EN == True || *KRAID_R_EN == True) && *BUL1_EN == 1){
10003fe8:	00808804 	movi	r2,544
10003fec:	10800017 	ldw	r2,0(r2)
10003ff0:	10800304 	addi	r2,r2,12
10003ff4:	00c02804 	movi	r3,160
10003ff8:	18c00017 	ldw	r3,0(r3)
10003ffc:	18802c0e 	bge	r3,r2,100040b0 <main+0x3d7c>
10004000:	00808804 	movi	r2,544
10004004:	10c00017 	ldw	r3,0(r2)
10004008:	00802804 	movi	r2,160
1000400c:	10800017 	ldw	r2,0(r2)
10004010:	10800c84 	addi	r2,r2,50
10004014:	1880260e 	bge	r3,r2,100040b0 <main+0x3d7c>
10004018:	00808404 	movi	r2,528
1000401c:	10800017 	ldw	r2,0(r2)
10004020:	10800304 	addi	r2,r2,12
10004024:	00c02404 	movi	r3,144
10004028:	18c00017 	ldw	r3,0(r3)
1000402c:	1880200e 	bge	r3,r2,100040b0 <main+0x3d7c>
10004030:	00808404 	movi	r2,528
10004034:	10c00017 	ldw	r3,0(r2)
10004038:	00802404 	movi	r2,144
1000403c:	10800017 	ldw	r2,0(r2)
10004040:	10801184 	addi	r2,r2,70
10004044:	18801a0e 	bge	r3,r2,100040b0 <main+0x3d7c>
10004048:	00804004 	movi	r2,256
1000404c:	10800017 	ldw	r2,0(r2)
10004050:	10800060 	cmpeqi	r2,r2,1
10004054:	1000081e 	bne	r2,zero,10004078 <main+0x3d44>
10004058:	00803804 	movi	r2,224
1000405c:	10800017 	ldw	r2,0(r2)
10004060:	10800060 	cmpeqi	r2,r2,1
10004064:	1000041e 	bne	r2,zero,10004078 <main+0x3d44>
10004068:	00803c04 	movi	r2,240
1000406c:	10800017 	ldw	r2,0(r2)
10004070:	10800058 	cmpnei	r2,r2,1
10004074:	10000e1e 	bne	r2,zero,100040b0 <main+0x3d7c>
10004078:	00808c04 	movi	r2,560
1000407c:	10800017 	ldw	r2,0(r2)
10004080:	10800058 	cmpnei	r2,r2,1
10004084:	10000a1e 	bne	r2,zero,100040b0 <main+0x3d7c>
			if(kraid_blink == False)
10004088:	e0b93a17 	ldw	r2,-6936(fp)
1000408c:	1000031e 	bne	r2,zero,1000409c <main+0x3d68>
				kraid_health-=1;
10004090:	e0b93717 	ldw	r2,-6948(fp)
10004094:	10bfffc4 	addi	r2,r2,-1
10004098:	e0b93715 	stw	r2,-6948(fp)
			*BUL1_EN=0;
1000409c:	00808c04 	movi	r2,560
100040a0:	10000015 	stw	zero,0(r2)
			kraid_blink = True;
100040a4:	00800044 	movi	r2,1
100040a8:	e0b93a15 	stw	r2,-6936(fp)
			kraid_counter = 0;
100040ac:	e0393b15 	stw	zero,-6932(fp)
		}
		if(*BUL2_X+12 > *KRAID_X && *BUL2_X < *KRAID_X+50 && *BUL2_Y+12 > *KRAID_Y && *BUL2_Y < *KRAID_Y+70 && (*KRAID_G_EN == True || *KRAID_N_EN == True || *KRAID_R_EN == True) && *BUL2_EN == 1){
100040b0:	00807c04 	movi	r2,496
100040b4:	10800017 	ldw	r2,0(r2)
100040b8:	10800304 	addi	r2,r2,12
100040bc:	00c02804 	movi	r3,160
100040c0:	18c00017 	ldw	r3,0(r3)
100040c4:	18802c0e 	bge	r3,r2,10004178 <main+0x3e44>
100040c8:	00807c04 	movi	r2,496
100040cc:	10c00017 	ldw	r3,0(r2)
100040d0:	00802804 	movi	r2,160
100040d4:	10800017 	ldw	r2,0(r2)
100040d8:	10800c84 	addi	r2,r2,50
100040dc:	1880260e 	bge	r3,r2,10004178 <main+0x3e44>
100040e0:	00807804 	movi	r2,480
100040e4:	10800017 	ldw	r2,0(r2)
100040e8:	10800304 	addi	r2,r2,12
100040ec:	00c02404 	movi	r3,144
100040f0:	18c00017 	ldw	r3,0(r3)
100040f4:	1880200e 	bge	r3,r2,10004178 <main+0x3e44>
100040f8:	00807804 	movi	r2,480
100040fc:	10c00017 	ldw	r3,0(r2)
10004100:	00802404 	movi	r2,144
10004104:	10800017 	ldw	r2,0(r2)
10004108:	10801184 	addi	r2,r2,70
1000410c:	18801a0e 	bge	r3,r2,10004178 <main+0x3e44>
10004110:	00804004 	movi	r2,256
10004114:	10800017 	ldw	r2,0(r2)
10004118:	10800060 	cmpeqi	r2,r2,1
1000411c:	1000081e 	bne	r2,zero,10004140 <main+0x3e0c>
10004120:	00803804 	movi	r2,224
10004124:	10800017 	ldw	r2,0(r2)
10004128:	10800060 	cmpeqi	r2,r2,1
1000412c:	1000041e 	bne	r2,zero,10004140 <main+0x3e0c>
10004130:	00803c04 	movi	r2,240
10004134:	10800017 	ldw	r2,0(r2)
10004138:	10800058 	cmpnei	r2,r2,1
1000413c:	10000e1e 	bne	r2,zero,10004178 <main+0x3e44>
10004140:	00808004 	movi	r2,512
10004144:	10800017 	ldw	r2,0(r2)
10004148:	10800058 	cmpnei	r2,r2,1
1000414c:	10000a1e 	bne	r2,zero,10004178 <main+0x3e44>
			if(kraid_blink == False)
10004150:	e0b93a17 	ldw	r2,-6936(fp)
10004154:	1000031e 	bne	r2,zero,10004164 <main+0x3e30>
				kraid_health-=1;
10004158:	e0b93717 	ldw	r2,-6948(fp)
1000415c:	10bfffc4 	addi	r2,r2,-1
10004160:	e0b93715 	stw	r2,-6948(fp)
			*BUL2_EN=0;
10004164:	00808004 	movi	r2,512
10004168:	10000015 	stw	zero,0(r2)
			kraid_blink = True;
1000416c:	00800044 	movi	r2,1
10004170:	e0b93a15 	stw	r2,-6936(fp)
			kraid_counter = 0;
10004174:	e0393b15 	stw	zero,-6932(fp)
		}
		if(*BUL3_X+12 > *KRAID_X && *BUL3_X < *KRAID_X+50 && *BUL3_Y+12 > *KRAID_Y && *BUL3_Y < *KRAID_Y+70 && (*KRAID_G_EN == True || *KRAID_N_EN == True || *KRAID_R_EN == True) && *BUL3_EN == 1){			if(kraid_blink == False)
10004178:	00807004 	movi	r2,448
1000417c:	10800017 	ldw	r2,0(r2)
10004180:	10800304 	addi	r2,r2,12
10004184:	00c02804 	movi	r3,160
10004188:	18c00017 	ldw	r3,0(r3)
1000418c:	18802c0e 	bge	r3,r2,10004240 <main+0x3f0c>
10004190:	00807004 	movi	r2,448
10004194:	10c00017 	ldw	r3,0(r2)
10004198:	00802804 	movi	r2,160
1000419c:	10800017 	ldw	r2,0(r2)
100041a0:	10800c84 	addi	r2,r2,50
100041a4:	1880260e 	bge	r3,r2,10004240 <main+0x3f0c>
100041a8:	00806c04 	movi	r2,432
100041ac:	10800017 	ldw	r2,0(r2)
100041b0:	10800304 	addi	r2,r2,12
100041b4:	00c02404 	movi	r3,144
100041b8:	18c00017 	ldw	r3,0(r3)
100041bc:	1880200e 	bge	r3,r2,10004240 <main+0x3f0c>
100041c0:	00806c04 	movi	r2,432
100041c4:	10c00017 	ldw	r3,0(r2)
100041c8:	00802404 	movi	r2,144
100041cc:	10800017 	ldw	r2,0(r2)
100041d0:	10801184 	addi	r2,r2,70
100041d4:	18801a0e 	bge	r3,r2,10004240 <main+0x3f0c>
100041d8:	00804004 	movi	r2,256
100041dc:	10800017 	ldw	r2,0(r2)
100041e0:	10800060 	cmpeqi	r2,r2,1
100041e4:	1000081e 	bne	r2,zero,10004208 <main+0x3ed4>
100041e8:	00803804 	movi	r2,224
100041ec:	10800017 	ldw	r2,0(r2)
100041f0:	10800060 	cmpeqi	r2,r2,1
100041f4:	1000041e 	bne	r2,zero,10004208 <main+0x3ed4>
100041f8:	00803c04 	movi	r2,240
100041fc:	10800017 	ldw	r2,0(r2)
10004200:	10800058 	cmpnei	r2,r2,1
10004204:	10000e1e 	bne	r2,zero,10004240 <main+0x3f0c>
10004208:	00807404 	movi	r2,464
1000420c:	10800017 	ldw	r2,0(r2)
10004210:	10800058 	cmpnei	r2,r2,1
10004214:	10000a1e 	bne	r2,zero,10004240 <main+0x3f0c>
10004218:	e0b93a17 	ldw	r2,-6936(fp)
1000421c:	1000031e 	bne	r2,zero,1000422c <main+0x3ef8>
				kraid_health-=1;
10004220:	e0b93717 	ldw	r2,-6948(fp)
10004224:	10bfffc4 	addi	r2,r2,-1
10004228:	e0b93715 	stw	r2,-6948(fp)
			*BUL3_EN=0;
1000422c:	00807404 	movi	r2,464
10004230:	10000015 	stw	zero,0(r2)
			kraid_blink = True;
10004234:	00800044 	movi	r2,1
10004238:	e0b93a15 	stw	r2,-6936(fp)
			kraid_counter = 0;
1000423c:	e0393b15 	stw	zero,-6932(fp)
		}

		if(monster1_1_health == 0){
10004240:	e0b92b17 	ldw	r2,-6996(fp)
10004244:	10000d1e 	bne	r2,zero,1000427c <main+0x3f48>
			*MON1_EN = 0;
10004248:	0080d404 	movi	r2,848
1000424c:	10000005 	stb	zero,0(r2)
			*EXP1_X = monster1_1_x-10;
10004250:	0080ac04 	movi	r2,688
10004254:	e0f92817 	ldw	r3,-7008(fp)
10004258:	18fffd84 	addi	r3,r3,-10
1000425c:	10c00015 	stw	r3,0(r2)
			*EXP1_Y = monster1_1_y-10;
10004260:	0080a804 	movi	r2,672
10004264:	e0f92917 	ldw	r3,-7004(fp)
10004268:	18fffd84 	addi	r3,r3,-10
1000426c:	10c00015 	stw	r3,0(r2)
			*EXP1_EN = 1;
10004270:	0080b004 	movi	r2,704
10004274:	00c00044 	movi	r3,1
10004278:	10c00015 	stw	r3,0(r2)
		}
		if(monster2_1_health == 0){
1000427c:	e0b93317 	ldw	r2,-6964(fp)
10004280:	10000b1e 	bne	r2,zero,100042b0 <main+0x3f7c>
			*MON2_EN = 0;
10004284:	0080c804 	movi	r2,800
10004288:	10000005 	stb	zero,0(r2)
			*EXP2_X = monster2_1_x;
1000428c:	0080a004 	movi	r2,640
10004290:	e0f92c17 	ldw	r3,-6992(fp)
10004294:	10c00015 	stw	r3,0(r2)
			*EXP2_Y = monster2_1_y;
10004298:	00809c04 	movi	r2,624
1000429c:	e0f92d17 	ldw	r3,-6988(fp)
100042a0:	10c00015 	stw	r3,0(r2)
			*EXP2_EN = 1;
100042a4:	0080a404 	movi	r2,656
100042a8:	00c00044 	movi	r3,1
100042ac:	10c00015 	stw	r3,0(r2)
		}
		if(kraid_health == 0){
100042b0:	e0b93717 	ldw	r2,-6948(fp)
100042b4:	10003a1e 	bne	r2,zero,100043a0 <main+0x406c>
			kraid_counter+=1;
100042b8:	e0b93b17 	ldw	r2,-6932(fp)
100042bc:	10800044 	addi	r2,r2,1
100042c0:	e0b93b15 	stw	r2,-6932(fp)
			if(kraid_counter > kraid_kill_counter){
100042c4:	e0b93b17 	ldw	r2,-6932(fp)
100042c8:	e0f96b17 	ldw	r3,-6740(fp)
100042cc:	1880020e 	bge	r3,r2,100042d8 <main+0x3fa4>
				game_win = True;
100042d0:	00800044 	movi	r2,1
100042d4:	e0b94715 	stw	r2,-6884(fp)
			}
			*KRAID_G_EN = 0;
100042d8:	00804004 	movi	r2,256
100042dc:	10000015 	stw	zero,0(r2)
			*KRAID_N_EN = 0;
100042e0:	00803804 	movi	r2,224
100042e4:	10000015 	stw	zero,0(r2)
			*KRAID_R_EN = 0;
100042e8:	00803c04 	movi	r2,240
100042ec:	10000015 	stw	zero,0(r2)
			has_control = False;
100042f0:	e0391a15 	stw	zero,-7064(fp)
			if(*EXP1_EN == 0){
100042f4:	0080b004 	movi	r2,704
100042f8:	10800017 	ldw	r2,0(r2)
100042fc:	1000481e 	bne	r2,zero,10004420 <main+0x40ec>
				*EXP1_X = *KRAID_X-20;
10004300:	0080ac04 	movi	r2,688
10004304:	00c02804 	movi	r3,160
10004308:	18c00017 	ldw	r3,0(r3)
1000430c:	18fffb04 	addi	r3,r3,-20
10004310:	10c00015 	stw	r3,0(r2)
				*EXP1_Y = *KRAID_Y-20;
10004314:	0080a804 	movi	r2,672
10004318:	00c02404 	movi	r3,144
1000431c:	18c00017 	ldw	r3,0(r3)
10004320:	18fffb04 	addi	r3,r3,-20
10004324:	10c00015 	stw	r3,0(r2)
				*EXP1_EN = 1;
10004328:	0080b004 	movi	r2,704
1000432c:	00c00044 	movi	r3,1
10004330:	10c00015 	stw	r3,0(r2)

				*EXP2_X = *KRAID_X+50;
10004334:	0080a004 	movi	r2,640
10004338:	00c02804 	movi	r3,160
1000433c:	18c00017 	ldw	r3,0(r3)
10004340:	18c00c84 	addi	r3,r3,50
10004344:	10c00015 	stw	r3,0(r2)
				*EXP2_Y = *KRAID_Y+10;
10004348:	00809c04 	movi	r2,624
1000434c:	00c02404 	movi	r3,144
10004350:	18c00017 	ldw	r3,0(r3)
10004354:	18c00284 	addi	r3,r3,10
10004358:	10c00015 	stw	r3,0(r2)
				*EXP2_EN = 1;
1000435c:	0080a404 	movi	r2,656
10004360:	00c00044 	movi	r3,1
10004364:	10c00015 	stw	r3,0(r2)

				*EXP3_X = *KRAID_X+15;
10004368:	00809404 	movi	r2,592
1000436c:	00c02804 	movi	r3,160
10004370:	18c00017 	ldw	r3,0(r3)
10004374:	18c003c4 	addi	r3,r3,15
10004378:	10c00015 	stw	r3,0(r2)
				*EXP3_Y = *KRAID_Y+40;
1000437c:	00809004 	movi	r2,576
10004380:	00c02404 	movi	r3,144
10004384:	18c00017 	ldw	r3,0(r3)
10004388:	18c00a04 	addi	r3,r3,40
1000438c:	10c00015 	stw	r3,0(r2)
				*EXP3_EN = 1;
10004390:	00809804 	movi	r2,608
10004394:	00c00044 	movi	r3,1
10004398:	10c00015 	stw	r3,0(r2)
1000439c:	00002006 	br	10004420 <main+0x40ec>
			}
		}
		else if(kraid_health <= 5){
100043a0:	e0b93717 	ldw	r2,-6948(fp)
100043a4:	10800188 	cmpgei	r2,r2,6
100043a8:	1000081e 	bne	r2,zero,100043cc <main+0x4098>
			*KRAID_G_EN = 1;
100043ac:	00804004 	movi	r2,256
100043b0:	00c00044 	movi	r3,1
100043b4:	10c00015 	stw	r3,0(r2)
			*KRAID_N_EN = 0;
100043b8:	00803804 	movi	r2,224
100043bc:	10000015 	stw	zero,0(r2)
			*KRAID_R_EN = 0;
100043c0:	00803c04 	movi	r2,240
100043c4:	10000015 	stw	zero,0(r2)
100043c8:	00001506 	br	10004420 <main+0x40ec>
		}
		else if(kraid_health <= 10){
100043cc:	e0b93717 	ldw	r2,-6948(fp)
100043d0:	108002c8 	cmpgei	r2,r2,11
100043d4:	1000081e 	bne	r2,zero,100043f8 <main+0x40c4>
			*KRAID_G_EN = 0;
100043d8:	00804004 	movi	r2,256
100043dc:	10000015 	stw	zero,0(r2)
			*KRAID_N_EN = 1;
100043e0:	00803804 	movi	r2,224
100043e4:	00c00044 	movi	r3,1
100043e8:	10c00015 	stw	r3,0(r2)
			*KRAID_R_EN = 0;
100043ec:	00803c04 	movi	r2,240
100043f0:	10000015 	stw	zero,0(r2)
100043f4:	00000a06 	br	10004420 <main+0x40ec>
		}
		else if(kraid_health <= 15){
100043f8:	e0b93717 	ldw	r2,-6948(fp)
100043fc:	10800408 	cmpgei	r2,r2,16
10004400:	1000071e 	bne	r2,zero,10004420 <main+0x40ec>
			*KRAID_G_EN = 0;
10004404:	00804004 	movi	r2,256
10004408:	10000015 	stw	zero,0(r2)
			*KRAID_N_EN = 0;
1000440c:	00803804 	movi	r2,224
10004410:	10000015 	stw	zero,0(r2)
			*KRAID_R_EN = 1;
10004414:	00803c04 	movi	r2,240
10004418:	00c00044 	movi	r3,1
1000441c:	10c00015 	stw	r3,0(r2)
		}

		//Samus Collision with monster
		if(*SAMUS_X+45 > monster3_1_x && *SAMUS_X < monster3_1_x+30 && ((*SAMUS_Y+70 > monster3_1_y && *SAMUS_Y < monster3_1_y+10 && grounded == True) || (*SAMUS_Y+45 > monster3_1_y && *SAMUS_Y < monster3_1_y+10 && grounded == False)) && *MON3_EN == True && *SAMUS_EN == 1 && samus_inv_counter_start == False){
10004420:	0080e404 	movi	r2,912
10004424:	10800017 	ldw	r2,0(r2)
10004428:	10800b44 	addi	r2,r2,45
1000442c:	e0f93417 	ldw	r3,-6960(fp)
10004430:	1880370e 	bge	r3,r2,10004510 <main+0x41dc>
10004434:	0080e404 	movi	r2,912
10004438:	10c00017 	ldw	r3,0(r2)
1000443c:	e0b93417 	ldw	r2,-6960(fp)
10004440:	10800784 	addi	r2,r2,30
10004444:	1880320e 	bge	r3,r2,10004510 <main+0x41dc>
10004448:	0080e004 	movi	r2,896
1000444c:	10800017 	ldw	r2,0(r2)
10004450:	10801184 	addi	r2,r2,70
10004454:	e0f93517 	ldw	r3,-6956(fp)
10004458:	1880080e 	bge	r3,r2,1000447c <main+0x4148>
1000445c:	0080e004 	movi	r2,896
10004460:	10c00017 	ldw	r3,0(r2)
10004464:	e0b93517 	ldw	r2,-6956(fp)
10004468:	10800284 	addi	r2,r2,10
1000446c:	1880030e 	bge	r3,r2,1000447c <main+0x4148>
10004470:	e0b91817 	ldw	r2,-7072(fp)
10004474:	10800060 	cmpeqi	r2,r2,1
10004478:	10000c1e 	bne	r2,zero,100044ac <main+0x4178>
1000447c:	0080e004 	movi	r2,896
10004480:	10800017 	ldw	r2,0(r2)
10004484:	10800b44 	addi	r2,r2,45
10004488:	e0f93517 	ldw	r3,-6956(fp)
1000448c:	1880200e 	bge	r3,r2,10004510 <main+0x41dc>
10004490:	0080e004 	movi	r2,896
10004494:	10c00017 	ldw	r3,0(r2)
10004498:	e0b93517 	ldw	r2,-6956(fp)
1000449c:	10800284 	addi	r2,r2,10
100044a0:	18801b0e 	bge	r3,r2,10004510 <main+0x41dc>
100044a4:	e0b91817 	ldw	r2,-7072(fp)
100044a8:	1000191e 	bne	r2,zero,10004510 <main+0x41dc>
100044ac:	0080bc04 	movi	r2,752
100044b0:	10800003 	ldbu	r2,0(r2)
100044b4:	10803fcc 	andi	r2,r2,255
100044b8:	1080201c 	xori	r2,r2,128
100044bc:	10bfe004 	addi	r2,r2,-128
100044c0:	10800058 	cmpnei	r2,r2,1
100044c4:	1000121e 	bne	r2,zero,10004510 <main+0x41dc>
100044c8:	0080e804 	movi	r2,928
100044cc:	10800003 	ldbu	r2,0(r2)
100044d0:	10803fcc 	andi	r2,r2,255
100044d4:	1080201c 	xori	r2,r2,128
100044d8:	10bfe004 	addi	r2,r2,-128
100044dc:	10800058 	cmpnei	r2,r2,1
100044e0:	10000b1e 	bne	r2,zero,10004510 <main+0x41dc>
100044e4:	e0b91517 	ldw	r2,-7084(fp)
100044e8:	1000091e 	bne	r2,zero,10004510 <main+0x41dc>
			samus_inv_counter_start = True;
100044ec:	00800044 	movi	r2,1
100044f0:	e0b91515 	stw	r2,-7084(fp)
			y_set = False;
100044f4:	e0391b15 	stw	zero,-7060(fp)
			*HEALTH = *HEALTH-1;
100044f8:	00806804 	movi	r2,416
100044fc:	00c06804 	movi	r3,416
10004500:	18c00017 	ldw	r3,0(r3)
10004504:	18ffffc4 	addi	r3,r3,-1
10004508:	10c00015 	stw	r3,0(r2)
1000450c:	0000ff06 	br	1000490c <main+0x45d8>
		}
		else if(*SAMUS_X+45 > monster2_1_x && *SAMUS_X < monster2_1_x+45 && ((*SAMUS_Y+70 > monster2_1_y && *SAMUS_Y < monster2_1_y+33 && grounded == True) || (*SAMUS_Y+45 > monster2_1_y && *SAMUS_Y < monster2_1_y+33 && grounded == False)) && *MON2_EN == True && *SAMUS_EN == 1 && samus_inv_counter_start == False){
10004510:	0080e404 	movi	r2,912
10004514:	10800017 	ldw	r2,0(r2)
10004518:	10800b44 	addi	r2,r2,45
1000451c:	e0f92c17 	ldw	r3,-6992(fp)
10004520:	1880370e 	bge	r3,r2,10004600 <main+0x42cc>
10004524:	0080e404 	movi	r2,912
10004528:	10c00017 	ldw	r3,0(r2)
1000452c:	e0b92c17 	ldw	r2,-6992(fp)
10004530:	10800b44 	addi	r2,r2,45
10004534:	1880320e 	bge	r3,r2,10004600 <main+0x42cc>
10004538:	0080e004 	movi	r2,896
1000453c:	10800017 	ldw	r2,0(r2)
10004540:	10801184 	addi	r2,r2,70
10004544:	e0f92d17 	ldw	r3,-6988(fp)
10004548:	1880080e 	bge	r3,r2,1000456c <main+0x4238>
1000454c:	0080e004 	movi	r2,896
10004550:	10c00017 	ldw	r3,0(r2)
10004554:	e0b92d17 	ldw	r2,-6988(fp)
10004558:	10800844 	addi	r2,r2,33
1000455c:	1880030e 	bge	r3,r2,1000456c <main+0x4238>
10004560:	e0b91817 	ldw	r2,-7072(fp)
10004564:	10800060 	cmpeqi	r2,r2,1
10004568:	10000c1e 	bne	r2,zero,1000459c <main+0x4268>
1000456c:	0080e004 	movi	r2,896
10004570:	10800017 	ldw	r2,0(r2)
10004574:	10800b44 	addi	r2,r2,45
10004578:	e0f92d17 	ldw	r3,-6988(fp)
1000457c:	1880200e 	bge	r3,r2,10004600 <main+0x42cc>
10004580:	0080e004 	movi	r2,896
10004584:	10c00017 	ldw	r3,0(r2)
10004588:	e0b92d17 	ldw	r2,-6988(fp)
1000458c:	10800844 	addi	r2,r2,33
10004590:	18801b0e 	bge	r3,r2,10004600 <main+0x42cc>
10004594:	e0b91817 	ldw	r2,-7072(fp)
10004598:	1000191e 	bne	r2,zero,10004600 <main+0x42cc>
1000459c:	0080c804 	movi	r2,800
100045a0:	10800003 	ldbu	r2,0(r2)
100045a4:	10803fcc 	andi	r2,r2,255
100045a8:	1080201c 	xori	r2,r2,128
100045ac:	10bfe004 	addi	r2,r2,-128
100045b0:	10800058 	cmpnei	r2,r2,1
100045b4:	1000121e 	bne	r2,zero,10004600 <main+0x42cc>
100045b8:	0080e804 	movi	r2,928
100045bc:	10800003 	ldbu	r2,0(r2)
100045c0:	10803fcc 	andi	r2,r2,255
100045c4:	1080201c 	xori	r2,r2,128
100045c8:	10bfe004 	addi	r2,r2,-128
100045cc:	10800058 	cmpnei	r2,r2,1
100045d0:	10000b1e 	bne	r2,zero,10004600 <main+0x42cc>
100045d4:	e0b91517 	ldw	r2,-7084(fp)
100045d8:	1000091e 	bne	r2,zero,10004600 <main+0x42cc>
			samus_inv_counter_start = True;
100045dc:	00800044 	movi	r2,1
100045e0:	e0b91515 	stw	r2,-7084(fp)
			y_set = False;
100045e4:	e0391b15 	stw	zero,-7060(fp)
			*HEALTH = *HEALTH-1;
100045e8:	00806804 	movi	r2,416
100045ec:	00c06804 	movi	r3,416
100045f0:	18c00017 	ldw	r3,0(r3)
100045f4:	18ffffc4 	addi	r3,r3,-1
100045f8:	10c00015 	stw	r3,0(r2)
100045fc:	0000c306 	br	1000490c <main+0x45d8>
		}
		else if(*SAMUS_X+45 > monster1_1_x && *SAMUS_X < monster1_1_x+30 && ((*SAMUS_Y+70 > monster1_1_y && *SAMUS_Y < monster1_1_y+30 && grounded == True) || (*SAMUS_Y+45 > monster1_1_y && *SAMUS_Y < monster1_1_y+30 && grounded == False)) && *MON1_EN == True && *SAMUS_EN == 1 && samus_inv_counter_start == False){
10004600:	0080e404 	movi	r2,912
10004604:	10800017 	ldw	r2,0(r2)
10004608:	10800b44 	addi	r2,r2,45
1000460c:	e0f92817 	ldw	r3,-7008(fp)
10004610:	1880370e 	bge	r3,r2,100046f0 <main+0x43bc>
10004614:	0080e404 	movi	r2,912
10004618:	10c00017 	ldw	r3,0(r2)
1000461c:	e0b92817 	ldw	r2,-7008(fp)
10004620:	10800784 	addi	r2,r2,30
10004624:	1880320e 	bge	r3,r2,100046f0 <main+0x43bc>
10004628:	0080e004 	movi	r2,896
1000462c:	10800017 	ldw	r2,0(r2)
10004630:	10801184 	addi	r2,r2,70
10004634:	e0f92917 	ldw	r3,-7004(fp)
10004638:	1880080e 	bge	r3,r2,1000465c <main+0x4328>
1000463c:	0080e004 	movi	r2,896
10004640:	10c00017 	ldw	r3,0(r2)
10004644:	e0b92917 	ldw	r2,-7004(fp)
10004648:	10800784 	addi	r2,r2,30
1000464c:	1880030e 	bge	r3,r2,1000465c <main+0x4328>
10004650:	e0b91817 	ldw	r2,-7072(fp)
10004654:	10800060 	cmpeqi	r2,r2,1
10004658:	10000c1e 	bne	r2,zero,1000468c <main+0x4358>
1000465c:	0080e004 	movi	r2,896
10004660:	10800017 	ldw	r2,0(r2)
10004664:	10800b44 	addi	r2,r2,45
10004668:	e0f92917 	ldw	r3,-7004(fp)
1000466c:	1880200e 	bge	r3,r2,100046f0 <main+0x43bc>
10004670:	0080e004 	movi	r2,896
10004674:	10c00017 	ldw	r3,0(r2)
10004678:	e0b92917 	ldw	r2,-7004(fp)
1000467c:	10800784 	addi	r2,r2,30
10004680:	18801b0e 	bge	r3,r2,100046f0 <main+0x43bc>
10004684:	e0b91817 	ldw	r2,-7072(fp)
10004688:	1000191e 	bne	r2,zero,100046f0 <main+0x43bc>
1000468c:	0080d404 	movi	r2,848
10004690:	10800003 	ldbu	r2,0(r2)
10004694:	10803fcc 	andi	r2,r2,255
10004698:	1080201c 	xori	r2,r2,128
1000469c:	10bfe004 	addi	r2,r2,-128
100046a0:	10800058 	cmpnei	r2,r2,1
100046a4:	1000121e 	bne	r2,zero,100046f0 <main+0x43bc>
100046a8:	0080e804 	movi	r2,928
100046ac:	10800003 	ldbu	r2,0(r2)
100046b0:	10803fcc 	andi	r2,r2,255
100046b4:	1080201c 	xori	r2,r2,128
100046b8:	10bfe004 	addi	r2,r2,-128
100046bc:	10800058 	cmpnei	r2,r2,1
100046c0:	10000b1e 	bne	r2,zero,100046f0 <main+0x43bc>
100046c4:	e0b91517 	ldw	r2,-7084(fp)
100046c8:	1000091e 	bne	r2,zero,100046f0 <main+0x43bc>
			samus_inv_counter_start = True;
100046cc:	00800044 	movi	r2,1
100046d0:	e0b91515 	stw	r2,-7084(fp)
			y_set = False;
100046d4:	e0391b15 	stw	zero,-7060(fp)
			*HEALTH = *HEALTH-1;
100046d8:	00806804 	movi	r2,416
100046dc:	00c06804 	movi	r3,416
100046e0:	18c00017 	ldw	r3,0(r3)
100046e4:	18ffffc4 	addi	r3,r3,-1
100046e8:	10c00015 	stw	r3,0(r2)
100046ec:	00008706 	br	1000490c <main+0x45d8>
		}
		else if(*SAMUS_X+45 > *KRAID_X && *SAMUS_X < *KRAID_X+60 && ((*SAMUS_Y+70 > *KRAID_Y && *SAMUS_Y < *KRAID_Y+70 && grounded == True) || (*SAMUS_Y+45 > *KRAID_Y && *SAMUS_Y < *KRAID_Y+70 && grounded == False)) && (*KRAID_G_EN == True || *KRAID_N_EN == True || *KRAID_R_EN == True)&& *SAMUS_EN == 1 && samus_inv_counter_start == False){
100046f0:	0080e404 	movi	r2,912
100046f4:	10800017 	ldw	r2,0(r2)
100046f8:	10800b44 	addi	r2,r2,45
100046fc:	00c02804 	movi	r3,160
10004700:	18c00017 	ldw	r3,0(r3)
10004704:	1880410e 	bge	r3,r2,1000480c <main+0x44d8>
10004708:	0080e404 	movi	r2,912
1000470c:	10c00017 	ldw	r3,0(r2)
10004710:	00802804 	movi	r2,160
10004714:	10800017 	ldw	r2,0(r2)
10004718:	10800f04 	addi	r2,r2,60
1000471c:	18803b0e 	bge	r3,r2,1000480c <main+0x44d8>
10004720:	0080e004 	movi	r2,896
10004724:	10800017 	ldw	r2,0(r2)
10004728:	10801184 	addi	r2,r2,70
1000472c:	00c02404 	movi	r3,144
10004730:	18c00017 	ldw	r3,0(r3)
10004734:	1880090e 	bge	r3,r2,1000475c <main+0x4428>
10004738:	0080e004 	movi	r2,896
1000473c:	10c00017 	ldw	r3,0(r2)
10004740:	00802404 	movi	r2,144
10004744:	10800017 	ldw	r2,0(r2)
10004748:	10801184 	addi	r2,r2,70
1000474c:	1880030e 	bge	r3,r2,1000475c <main+0x4428>
10004750:	e0b91817 	ldw	r2,-7072(fp)
10004754:	10800060 	cmpeqi	r2,r2,1
10004758:	10000e1e 	bne	r2,zero,10004794 <main+0x4460>
1000475c:	0080e004 	movi	r2,896
10004760:	10800017 	ldw	r2,0(r2)
10004764:	10800b44 	addi	r2,r2,45
10004768:	00c02404 	movi	r3,144
1000476c:	18c00017 	ldw	r3,0(r3)
10004770:	1880260e 	bge	r3,r2,1000480c <main+0x44d8>
10004774:	0080e004 	movi	r2,896
10004778:	10c00017 	ldw	r3,0(r2)
1000477c:	00802404 	movi	r2,144
10004780:	10800017 	ldw	r2,0(r2)
10004784:	10801184 	addi	r2,r2,70
10004788:	1880200e 	bge	r3,r2,1000480c <main+0x44d8>
1000478c:	e0b91817 	ldw	r2,-7072(fp)
10004790:	10001e1e 	bne	r2,zero,1000480c <main+0x44d8>
10004794:	00804004 	movi	r2,256
10004798:	10800017 	ldw	r2,0(r2)
1000479c:	10800060 	cmpeqi	r2,r2,1
100047a0:	1000081e 	bne	r2,zero,100047c4 <main+0x4490>
100047a4:	00803804 	movi	r2,224
100047a8:	10800017 	ldw	r2,0(r2)
100047ac:	10800060 	cmpeqi	r2,r2,1
100047b0:	1000041e 	bne	r2,zero,100047c4 <main+0x4490>
100047b4:	00803c04 	movi	r2,240
100047b8:	10800017 	ldw	r2,0(r2)
100047bc:	10800058 	cmpnei	r2,r2,1
100047c0:	1000121e 	bne	r2,zero,1000480c <main+0x44d8>
100047c4:	0080e804 	movi	r2,928
100047c8:	10800003 	ldbu	r2,0(r2)
100047cc:	10803fcc 	andi	r2,r2,255
100047d0:	1080201c 	xori	r2,r2,128
100047d4:	10bfe004 	addi	r2,r2,-128
100047d8:	10800058 	cmpnei	r2,r2,1
100047dc:	10000b1e 	bne	r2,zero,1000480c <main+0x44d8>
100047e0:	e0b91517 	ldw	r2,-7084(fp)
100047e4:	1000091e 	bne	r2,zero,1000480c <main+0x44d8>
			samus_inv_counter_start = True;
100047e8:	00800044 	movi	r2,1
100047ec:	e0b91515 	stw	r2,-7084(fp)
			y_set = False;
100047f0:	e0391b15 	stw	zero,-7060(fp)
			*HEALTH = *HEALTH-1;
100047f4:	00806804 	movi	r2,416
100047f8:	00c06804 	movi	r3,416
100047fc:	18c00017 	ldw	r3,0(r3)
10004800:	18ffffc4 	addi	r3,r3,-1
10004804:	10c00015 	stw	r3,0(r2)
10004808:	00004006 	br	1000490c <main+0x45d8>
		}
		else if(*SAMUS_X+45 > *KRAID_SPIKE_X && *SAMUS_X < *KRAID_SPIKE_X+10 && ((*SAMUS_Y+70 > *KRAID_SPIKE_Y && *SAMUS_Y < *KRAID_SPIKE_Y+10 && grounded == True) || (*SAMUS_Y+45 > *KRAID_SPIKE_Y && *SAMUS_Y < *KRAID_SPIKE_Y+10 && grounded == False)) && *KRAID_SHOOT_EN == True && *SAMUS_EN == 1 && samus_inv_counter_start == False){
1000480c:	0080e404 	movi	r2,912
10004810:	10800017 	ldw	r2,0(r2)
10004814:	10800b44 	addi	r2,r2,45
10004818:	00c02004 	movi	r3,128
1000481c:	18c00017 	ldw	r3,0(r3)
10004820:	18803a0e 	bge	r3,r2,1000490c <main+0x45d8>
10004824:	0080e404 	movi	r2,912
10004828:	10c00017 	ldw	r3,0(r2)
1000482c:	00802004 	movi	r2,128
10004830:	10800017 	ldw	r2,0(r2)
10004834:	10800284 	addi	r2,r2,10
10004838:	1880340e 	bge	r3,r2,1000490c <main+0x45d8>
1000483c:	0080e004 	movi	r2,896
10004840:	10800017 	ldw	r2,0(r2)
10004844:	10801184 	addi	r2,r2,70
10004848:	00c01c04 	movi	r3,112
1000484c:	18c00017 	ldw	r3,0(r3)
10004850:	1880090e 	bge	r3,r2,10004878 <main+0x4544>
10004854:	0080e004 	movi	r2,896
10004858:	10c00017 	ldw	r3,0(r2)
1000485c:	00801c04 	movi	r2,112
10004860:	10800017 	ldw	r2,0(r2)
10004864:	10800284 	addi	r2,r2,10
10004868:	1880030e 	bge	r3,r2,10004878 <main+0x4544>
1000486c:	e0b91817 	ldw	r2,-7072(fp)
10004870:	10800060 	cmpeqi	r2,r2,1
10004874:	10000e1e 	bne	r2,zero,100048b0 <main+0x457c>
10004878:	0080e004 	movi	r2,896
1000487c:	10800017 	ldw	r2,0(r2)
10004880:	10800b44 	addi	r2,r2,45
10004884:	00c01c04 	movi	r3,112
10004888:	18c00017 	ldw	r3,0(r3)
1000488c:	18801f0e 	bge	r3,r2,1000490c <main+0x45d8>
10004890:	0080e004 	movi	r2,896
10004894:	10c00017 	ldw	r3,0(r2)
10004898:	00801c04 	movi	r2,112
1000489c:	10800017 	ldw	r2,0(r2)
100048a0:	10800284 	addi	r2,r2,10
100048a4:	1880190e 	bge	r3,r2,1000490c <main+0x45d8>
100048a8:	e0b91817 	ldw	r2,-7072(fp)
100048ac:	1000171e 	bne	r2,zero,1000490c <main+0x45d8>
100048b0:	00803404 	movi	r2,208
100048b4:	10800017 	ldw	r2,0(r2)
100048b8:	10800058 	cmpnei	r2,r2,1
100048bc:	1000131e 	bne	r2,zero,1000490c <main+0x45d8>
100048c0:	0080e804 	movi	r2,928
100048c4:	10800003 	ldbu	r2,0(r2)
100048c8:	10803fcc 	andi	r2,r2,255
100048cc:	1080201c 	xori	r2,r2,128
100048d0:	10bfe004 	addi	r2,r2,-128
100048d4:	10800058 	cmpnei	r2,r2,1
100048d8:	10000c1e 	bne	r2,zero,1000490c <main+0x45d8>
100048dc:	e0b91517 	ldw	r2,-7084(fp)
100048e0:	10000a1e 	bne	r2,zero,1000490c <main+0x45d8>
			samus_inv_counter_start = True;
100048e4:	00800044 	movi	r2,1
100048e8:	e0b91515 	stw	r2,-7084(fp)
			y_set = False;
100048ec:	e0391b15 	stw	zero,-7060(fp)
			*HEALTH = *HEALTH-1;
100048f0:	00806804 	movi	r2,416
100048f4:	00c06804 	movi	r3,416
100048f8:	18c00017 	ldw	r3,0(r3)
100048fc:	18ffffc4 	addi	r3,r3,-1
10004900:	10c00015 	stw	r3,0(r2)
			*KRAID_SHOOT_EN = False;
10004904:	00803404 	movi	r2,208
10004908:	10000015 	stw	zero,0(r2)
		}


		if(samus_inv_counter_start == True){
1000490c:	e0b91517 	ldw	r2,-7084(fp)
10004910:	10800058 	cmpnei	r2,r2,1
10004914:	10017f1e 	bne	r2,zero,10004f14 <main+0x4be0>
			if(*SAMUS_EN == False){
10004918:	0080e804 	movi	r2,928
1000491c:	10800003 	ldbu	r2,0(r2)
10004920:	10803fcc 	andi	r2,r2,255
10004924:	1080201c 	xori	r2,r2,128
10004928:	10bfe004 	addi	r2,r2,-128
1000492c:	1000041e 	bne	r2,zero,10004940 <main+0x460c>
				*SAMUS_EN = True;
10004930:	0080e804 	movi	r2,928
10004934:	00c00044 	movi	r3,1
10004938:	10c00005 	stb	r3,0(r2)
1000493c:	00000206 	br	10004948 <main+0x4614>
			}
			else{
				*SAMUS_EN = False;
10004940:	0080e804 	movi	r2,928
10004944:	10000005 	stb	zero,0(r2)
			}

			if(samus_inv_counter < 15){
10004948:	e0b91417 	ldw	r2,-7088(fp)
1000494c:	108003c8 	cmpgei	r2,r2,15
10004950:	1001621e 	bne	r2,zero,10004edc <main+0x4ba8>
				if(scene[sceneNum][(*SAMUS_Y+15)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+25)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+50)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+70)/30][(*SAMUS_X-3)/30]==0 && *SAMUS_DIR == 0){
10004954:	0080e004 	movi	r2,896
10004958:	10800017 	ldw	r2,0(r2)
1000495c:	108003c4 	addi	r2,r2,15
10004960:	1009883a 	mov	r4,r2
10004964:	01400784 	movi	r5,30
10004968:	0006d300 	call	10006d30 <__divsi3>
1000496c:	1023883a 	mov	r17,r2
10004970:	0080e404 	movi	r2,912
10004974:	10800017 	ldw	r2,0(r2)
10004978:	10bfff44 	addi	r2,r2,-3
1000497c:	1009883a 	mov	r4,r2
10004980:	01400784 	movi	r5,30
10004984:	0006d300 	call	10006d30 <__divsi3>
10004988:	1021883a 	mov	r16,r2
1000498c:	e4b95117 	ldw	r18,-6844(fp)
10004990:	8809883a 	mov	r4,r17
10004994:	01400544 	movi	r5,21
10004998:	0006df00 	call	10006df0 <__mulsi3>
1000499c:	1023883a 	mov	r17,r2
100049a0:	9009883a 	mov	r4,r18
100049a4:	01405404 	movi	r5,336
100049a8:	0006df00 	call	10006df0 <__mulsi3>
100049ac:	8885883a 	add	r2,r17,r2
100049b0:	1405883a 	add	r2,r2,r16
100049b4:	1085883a 	add	r2,r2,r2
100049b8:	1085883a 	add	r2,r2,r2
100049bc:	e0f91304 	addi	r3,fp,-7092
100049c0:	1885883a 	add	r2,r3,r2
100049c4:	10805a04 	addi	r2,r2,360
100049c8:	10800017 	ldw	r2,0(r2)
100049cc:	10006f1e 	bne	r2,zero,10004b8c <main+0x4858>
100049d0:	0080e004 	movi	r2,896
100049d4:	10800017 	ldw	r2,0(r2)
100049d8:	10800644 	addi	r2,r2,25
100049dc:	1009883a 	mov	r4,r2
100049e0:	01400784 	movi	r5,30
100049e4:	0006d300 	call	10006d30 <__divsi3>
100049e8:	1023883a 	mov	r17,r2
100049ec:	0080e404 	movi	r2,912
100049f0:	10800017 	ldw	r2,0(r2)
100049f4:	10bfff44 	addi	r2,r2,-3
100049f8:	1009883a 	mov	r4,r2
100049fc:	01400784 	movi	r5,30
10004a00:	0006d300 	call	10006d30 <__divsi3>
10004a04:	1021883a 	mov	r16,r2
10004a08:	e4b95117 	ldw	r18,-6844(fp)
10004a0c:	8809883a 	mov	r4,r17
10004a10:	01400544 	movi	r5,21
10004a14:	0006df00 	call	10006df0 <__mulsi3>
10004a18:	1023883a 	mov	r17,r2
10004a1c:	9009883a 	mov	r4,r18
10004a20:	01405404 	movi	r5,336
10004a24:	0006df00 	call	10006df0 <__mulsi3>
10004a28:	8885883a 	add	r2,r17,r2
10004a2c:	1405883a 	add	r2,r2,r16
10004a30:	1085883a 	add	r2,r2,r2
10004a34:	1085883a 	add	r2,r2,r2
10004a38:	e0f91304 	addi	r3,fp,-7092
10004a3c:	1885883a 	add	r2,r3,r2
10004a40:	10805a04 	addi	r2,r2,360
10004a44:	10800017 	ldw	r2,0(r2)
10004a48:	1000501e 	bne	r2,zero,10004b8c <main+0x4858>
10004a4c:	0080e004 	movi	r2,896
10004a50:	10800017 	ldw	r2,0(r2)
10004a54:	10800c84 	addi	r2,r2,50
10004a58:	1009883a 	mov	r4,r2
10004a5c:	01400784 	movi	r5,30
10004a60:	0006d300 	call	10006d30 <__divsi3>
10004a64:	1023883a 	mov	r17,r2
10004a68:	0080e404 	movi	r2,912
10004a6c:	10800017 	ldw	r2,0(r2)
10004a70:	10bfff44 	addi	r2,r2,-3
10004a74:	1009883a 	mov	r4,r2
10004a78:	01400784 	movi	r5,30
10004a7c:	0006d300 	call	10006d30 <__divsi3>
10004a80:	1021883a 	mov	r16,r2
10004a84:	e4b95117 	ldw	r18,-6844(fp)
10004a88:	8809883a 	mov	r4,r17
10004a8c:	01400544 	movi	r5,21
10004a90:	0006df00 	call	10006df0 <__mulsi3>
10004a94:	1023883a 	mov	r17,r2
10004a98:	9009883a 	mov	r4,r18
10004a9c:	01405404 	movi	r5,336
10004aa0:	0006df00 	call	10006df0 <__mulsi3>
10004aa4:	8885883a 	add	r2,r17,r2
10004aa8:	1405883a 	add	r2,r2,r16
10004aac:	1085883a 	add	r2,r2,r2
10004ab0:	1085883a 	add	r2,r2,r2
10004ab4:	e0f91304 	addi	r3,fp,-7092
10004ab8:	1885883a 	add	r2,r3,r2
10004abc:	10805a04 	addi	r2,r2,360
10004ac0:	10800017 	ldw	r2,0(r2)
10004ac4:	1000311e 	bne	r2,zero,10004b8c <main+0x4858>
10004ac8:	0080e004 	movi	r2,896
10004acc:	10800017 	ldw	r2,0(r2)
10004ad0:	10801184 	addi	r2,r2,70
10004ad4:	1009883a 	mov	r4,r2
10004ad8:	01400784 	movi	r5,30
10004adc:	0006d300 	call	10006d30 <__divsi3>
10004ae0:	1023883a 	mov	r17,r2
10004ae4:	0080e404 	movi	r2,912
10004ae8:	10800017 	ldw	r2,0(r2)
10004aec:	10bfff44 	addi	r2,r2,-3
10004af0:	1009883a 	mov	r4,r2
10004af4:	01400784 	movi	r5,30
10004af8:	0006d300 	call	10006d30 <__divsi3>
10004afc:	1021883a 	mov	r16,r2
10004b00:	e4b95117 	ldw	r18,-6844(fp)
10004b04:	8809883a 	mov	r4,r17
10004b08:	01400544 	movi	r5,21
10004b0c:	0006df00 	call	10006df0 <__mulsi3>
10004b10:	1023883a 	mov	r17,r2
10004b14:	9009883a 	mov	r4,r18
10004b18:	01405404 	movi	r5,336
10004b1c:	0006df00 	call	10006df0 <__mulsi3>
10004b20:	8885883a 	add	r2,r17,r2
10004b24:	1405883a 	add	r2,r2,r16
10004b28:	1085883a 	add	r2,r2,r2
10004b2c:	1085883a 	add	r2,r2,r2
10004b30:	e0f91304 	addi	r3,fp,-7092
10004b34:	1885883a 	add	r2,r3,r2
10004b38:	10805a04 	addi	r2,r2,360
10004b3c:	10800017 	ldw	r2,0(r2)
10004b40:	1000121e 	bne	r2,zero,10004b8c <main+0x4858>
10004b44:	00805804 	movi	r2,352
10004b48:	10800003 	ldbu	r2,0(r2)
10004b4c:	10803fcc 	andi	r2,r2,255
10004b50:	1080201c 	xori	r2,r2,128
10004b54:	10bfe004 	addi	r2,r2,-128
10004b58:	10000c1e 	bne	r2,zero,10004b8c <main+0x4858>
					*SAMUS_X-=((25-samus_inv_counter)/2);
10004b5c:	00c0e404 	movi	r3,912
10004b60:	0080e404 	movi	r2,912
10004b64:	11000017 	ldw	r4,0(r2)
10004b68:	01400644 	movi	r5,25
10004b6c:	e0b91417 	ldw	r2,-7088(fp)
10004b70:	2885c83a 	sub	r2,r5,r2
10004b74:	100ad7fa 	srli	r5,r2,31
10004b78:	2885883a 	add	r2,r5,r2
10004b7c:	1005d07a 	srai	r2,r2,1
10004b80:	2085c83a 	sub	r2,r4,r2
10004b84:	18800015 	stw	r2,0(r3)
10004b88:	00008e06 	br	10004dc4 <main+0x4a90>
				}
				else if(scene[sceneNum][(*SAMUS_Y+10)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+25)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+50)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+70)/30][(*SAMUS_X+40)/30]==0 && *SAMUS_DIR == 1){
10004b8c:	0080e004 	movi	r2,896
10004b90:	10800017 	ldw	r2,0(r2)
10004b94:	10800284 	addi	r2,r2,10
10004b98:	1009883a 	mov	r4,r2
10004b9c:	01400784 	movi	r5,30
10004ba0:	0006d300 	call	10006d30 <__divsi3>
10004ba4:	1023883a 	mov	r17,r2
10004ba8:	0080e404 	movi	r2,912
10004bac:	10800017 	ldw	r2,0(r2)
10004bb0:	10800a04 	addi	r2,r2,40
10004bb4:	1009883a 	mov	r4,r2
10004bb8:	01400784 	movi	r5,30
10004bbc:	0006d300 	call	10006d30 <__divsi3>
10004bc0:	1021883a 	mov	r16,r2
10004bc4:	e4b95117 	ldw	r18,-6844(fp)
10004bc8:	8809883a 	mov	r4,r17
10004bcc:	01400544 	movi	r5,21
10004bd0:	0006df00 	call	10006df0 <__mulsi3>
10004bd4:	1023883a 	mov	r17,r2
10004bd8:	9009883a 	mov	r4,r18
10004bdc:	01405404 	movi	r5,336
10004be0:	0006df00 	call	10006df0 <__mulsi3>
10004be4:	8885883a 	add	r2,r17,r2
10004be8:	1405883a 	add	r2,r2,r16
10004bec:	1085883a 	add	r2,r2,r2
10004bf0:	1085883a 	add	r2,r2,r2
10004bf4:	e0f91304 	addi	r3,fp,-7092
10004bf8:	1885883a 	add	r2,r3,r2
10004bfc:	10805a04 	addi	r2,r2,360
10004c00:	10800017 	ldw	r2,0(r2)
10004c04:	10006f1e 	bne	r2,zero,10004dc4 <main+0x4a90>
10004c08:	0080e004 	movi	r2,896
10004c0c:	10800017 	ldw	r2,0(r2)
10004c10:	10800644 	addi	r2,r2,25
10004c14:	1009883a 	mov	r4,r2
10004c18:	01400784 	movi	r5,30
10004c1c:	0006d300 	call	10006d30 <__divsi3>
10004c20:	1023883a 	mov	r17,r2
10004c24:	0080e404 	movi	r2,912
10004c28:	10800017 	ldw	r2,0(r2)
10004c2c:	10800a04 	addi	r2,r2,40
10004c30:	1009883a 	mov	r4,r2
10004c34:	01400784 	movi	r5,30
10004c38:	0006d300 	call	10006d30 <__divsi3>
10004c3c:	1021883a 	mov	r16,r2
10004c40:	e4b95117 	ldw	r18,-6844(fp)
10004c44:	8809883a 	mov	r4,r17
10004c48:	01400544 	movi	r5,21
10004c4c:	0006df00 	call	10006df0 <__mulsi3>
10004c50:	1023883a 	mov	r17,r2
10004c54:	9009883a 	mov	r4,r18
10004c58:	01405404 	movi	r5,336
10004c5c:	0006df00 	call	10006df0 <__mulsi3>
10004c60:	8885883a 	add	r2,r17,r2
10004c64:	1405883a 	add	r2,r2,r16
10004c68:	1085883a 	add	r2,r2,r2
10004c6c:	1085883a 	add	r2,r2,r2
10004c70:	e0f91304 	addi	r3,fp,-7092
10004c74:	1885883a 	add	r2,r3,r2
10004c78:	10805a04 	addi	r2,r2,360
10004c7c:	10800017 	ldw	r2,0(r2)
10004c80:	1000501e 	bne	r2,zero,10004dc4 <main+0x4a90>
10004c84:	0080e004 	movi	r2,896
10004c88:	10800017 	ldw	r2,0(r2)
10004c8c:	10800c84 	addi	r2,r2,50
10004c90:	1009883a 	mov	r4,r2
10004c94:	01400784 	movi	r5,30
10004c98:	0006d300 	call	10006d30 <__divsi3>
10004c9c:	1023883a 	mov	r17,r2
10004ca0:	0080e404 	movi	r2,912
10004ca4:	10800017 	ldw	r2,0(r2)
10004ca8:	10800a04 	addi	r2,r2,40
10004cac:	1009883a 	mov	r4,r2
10004cb0:	01400784 	movi	r5,30
10004cb4:	0006d300 	call	10006d30 <__divsi3>
10004cb8:	1021883a 	mov	r16,r2
10004cbc:	e4b95117 	ldw	r18,-6844(fp)
10004cc0:	8809883a 	mov	r4,r17
10004cc4:	01400544 	movi	r5,21
10004cc8:	0006df00 	call	10006df0 <__mulsi3>
10004ccc:	1023883a 	mov	r17,r2
10004cd0:	9009883a 	mov	r4,r18
10004cd4:	01405404 	movi	r5,336
10004cd8:	0006df00 	call	10006df0 <__mulsi3>
10004cdc:	8885883a 	add	r2,r17,r2
10004ce0:	1405883a 	add	r2,r2,r16
10004ce4:	1085883a 	add	r2,r2,r2
10004ce8:	1085883a 	add	r2,r2,r2
10004cec:	e0f91304 	addi	r3,fp,-7092
10004cf0:	1885883a 	add	r2,r3,r2
10004cf4:	10805a04 	addi	r2,r2,360
10004cf8:	10800017 	ldw	r2,0(r2)
10004cfc:	1000311e 	bne	r2,zero,10004dc4 <main+0x4a90>
10004d00:	0080e004 	movi	r2,896
10004d04:	10800017 	ldw	r2,0(r2)
10004d08:	10801184 	addi	r2,r2,70
10004d0c:	1009883a 	mov	r4,r2
10004d10:	01400784 	movi	r5,30
10004d14:	0006d300 	call	10006d30 <__divsi3>
10004d18:	1023883a 	mov	r17,r2
10004d1c:	0080e404 	movi	r2,912
10004d20:	10800017 	ldw	r2,0(r2)
10004d24:	10800a04 	addi	r2,r2,40
10004d28:	1009883a 	mov	r4,r2
10004d2c:	01400784 	movi	r5,30
10004d30:	0006d300 	call	10006d30 <__divsi3>
10004d34:	1021883a 	mov	r16,r2
10004d38:	e4b95117 	ldw	r18,-6844(fp)
10004d3c:	8809883a 	mov	r4,r17
10004d40:	01400544 	movi	r5,21
10004d44:	0006df00 	call	10006df0 <__mulsi3>
10004d48:	1023883a 	mov	r17,r2
10004d4c:	9009883a 	mov	r4,r18
10004d50:	01405404 	movi	r5,336
10004d54:	0006df00 	call	10006df0 <__mulsi3>
10004d58:	8885883a 	add	r2,r17,r2
10004d5c:	1405883a 	add	r2,r2,r16
10004d60:	1085883a 	add	r2,r2,r2
10004d64:	1085883a 	add	r2,r2,r2
10004d68:	e0f91304 	addi	r3,fp,-7092
10004d6c:	1885883a 	add	r2,r3,r2
10004d70:	10805a04 	addi	r2,r2,360
10004d74:	10800017 	ldw	r2,0(r2)
10004d78:	1000121e 	bne	r2,zero,10004dc4 <main+0x4a90>
10004d7c:	00805804 	movi	r2,352
10004d80:	10800003 	ldbu	r2,0(r2)
10004d84:	10803fcc 	andi	r2,r2,255
10004d88:	1080201c 	xori	r2,r2,128
10004d8c:	10bfe004 	addi	r2,r2,-128
10004d90:	10800058 	cmpnei	r2,r2,1
10004d94:	10000b1e 	bne	r2,zero,10004dc4 <main+0x4a90>
						*SAMUS_X+=((25-samus_inv_counter)/2);
10004d98:	00c0e404 	movi	r3,912
10004d9c:	0080e404 	movi	r2,912
10004da0:	11000017 	ldw	r4,0(r2)
10004da4:	01400644 	movi	r5,25
10004da8:	e0b91417 	ldw	r2,-7088(fp)
10004dac:	2885c83a 	sub	r2,r5,r2
10004db0:	100ad7fa 	srli	r5,r2,31
10004db4:	2885883a 	add	r2,r5,r2
10004db8:	1005d07a 	srai	r2,r2,1
10004dbc:	2085883a 	add	r2,r4,r2
10004dc0:	18800015 	stw	r2,0(r3)
				}
				if(scene[sceneNum][(*SAMUS_Y+5)/30][(*SAMUS_X+2)/30] != 0 || scene[sceneNum][(*SAMUS_Y+5)/30][(*SAMUS_X+33)/30] == 0 && y_set == False){
10004dc4:	0080e004 	movi	r2,896
10004dc8:	10800017 	ldw	r2,0(r2)
10004dcc:	10800144 	addi	r2,r2,5
10004dd0:	1009883a 	mov	r4,r2
10004dd4:	01400784 	movi	r5,30
10004dd8:	0006d300 	call	10006d30 <__divsi3>
10004ddc:	1023883a 	mov	r17,r2
10004de0:	0080e404 	movi	r2,912
10004de4:	10800017 	ldw	r2,0(r2)
10004de8:	10800084 	addi	r2,r2,2
10004dec:	1009883a 	mov	r4,r2
10004df0:	01400784 	movi	r5,30
10004df4:	0006d300 	call	10006d30 <__divsi3>
10004df8:	1021883a 	mov	r16,r2
10004dfc:	e4b95117 	ldw	r18,-6844(fp)
10004e00:	8809883a 	mov	r4,r17
10004e04:	01400544 	movi	r5,21
10004e08:	0006df00 	call	10006df0 <__mulsi3>
10004e0c:	1023883a 	mov	r17,r2
10004e10:	9009883a 	mov	r4,r18
10004e14:	01405404 	movi	r5,336
10004e18:	0006df00 	call	10006df0 <__mulsi3>
10004e1c:	8885883a 	add	r2,r17,r2
10004e20:	1405883a 	add	r2,r2,r16
10004e24:	1085883a 	add	r2,r2,r2
10004e28:	1085883a 	add	r2,r2,r2
10004e2c:	e0f91304 	addi	r3,fp,-7092
10004e30:	1885883a 	add	r2,r3,r2
10004e34:	10805a04 	addi	r2,r2,360
10004e38:	10800017 	ldw	r2,0(r2)
10004e3c:	1000211e 	bne	r2,zero,10004ec4 <main+0x4b90>
10004e40:	0080e004 	movi	r2,896
10004e44:	10800017 	ldw	r2,0(r2)
10004e48:	10800144 	addi	r2,r2,5
10004e4c:	1009883a 	mov	r4,r2
10004e50:	01400784 	movi	r5,30
10004e54:	0006d300 	call	10006d30 <__divsi3>
10004e58:	1023883a 	mov	r17,r2
10004e5c:	0080e404 	movi	r2,912
10004e60:	10800017 	ldw	r2,0(r2)
10004e64:	10800844 	addi	r2,r2,33
10004e68:	1009883a 	mov	r4,r2
10004e6c:	01400784 	movi	r5,30
10004e70:	0006d300 	call	10006d30 <__divsi3>
10004e74:	1021883a 	mov	r16,r2
10004e78:	e4b95117 	ldw	r18,-6844(fp)
10004e7c:	8809883a 	mov	r4,r17
10004e80:	01400544 	movi	r5,21
10004e84:	0006df00 	call	10006df0 <__mulsi3>
10004e88:	1023883a 	mov	r17,r2
10004e8c:	9009883a 	mov	r4,r18
10004e90:	01405404 	movi	r5,336
10004e94:	0006df00 	call	10006df0 <__mulsi3>
10004e98:	8885883a 	add	r2,r17,r2
10004e9c:	1405883a 	add	r2,r2,r16
10004ea0:	1085883a 	add	r2,r2,r2
10004ea4:	1085883a 	add	r2,r2,r2
10004ea8:	e0f91304 	addi	r3,fp,-7092
10004eac:	1885883a 	add	r2,r3,r2
10004eb0:	10805a04 	addi	r2,r2,360
10004eb4:	10800017 	ldw	r2,0(r2)
10004eb8:	1000061e 	bne	r2,zero,10004ed4 <main+0x4ba0>
10004ebc:	e0b91b17 	ldw	r2,-7060(fp)
10004ec0:	1000041e 	bne	r2,zero,10004ed4 <main+0x4ba0>
					y_inc= -5;
10004ec4:	00b02834 	movhi	r2,49312
10004ec8:	e0b91615 	stw	r2,-7080(fp)
					y_set = True;
10004ecc:	00800044 	movi	r2,1
10004ed0:	e0b91b15 	stw	r2,-7060(fp)
				}
				has_control = False;
10004ed4:	e0391a15 	stw	zero,-7064(fp)
10004ed8:	00000206 	br	10004ee4 <main+0x4bb0>
			}
			else{
				has_control = True;
10004edc:	00800044 	movi	r2,1
10004ee0:	e0b91a15 	stw	r2,-7064(fp)
			}

			if(samus_inv_counter >= 50){
10004ee4:	e0b91417 	ldw	r2,-7088(fp)
10004ee8:	10800c90 	cmplti	r2,r2,50
10004eec:	1000061e 	bne	r2,zero,10004f08 <main+0x4bd4>
				samus_inv_counter = 0;
10004ef0:	e0391415 	stw	zero,-7088(fp)
				samus_inv_counter_start = False;
10004ef4:	e0391515 	stw	zero,-7084(fp)
				*SAMUS_EN = True;
10004ef8:	0080e804 	movi	r2,928
10004efc:	00c00044 	movi	r3,1
10004f00:	10c00005 	stb	r3,0(r2)
10004f04:	00000306 	br	10004f14 <main+0x4be0>
			}
			else{
				samus_inv_counter+=1;
10004f08:	e0b91417 	ldw	r2,-7088(fp)
10004f0c:	10800044 	addi	r2,r2,1
10004f10:	e0b91415 	stw	r2,-7088(fp)
			}
		}
		//Kraid inv frames
		if(kraid_blink == True){
10004f14:	e0b93a17 	ldw	r2,-6936(fp)
10004f18:	10800058 	cmpnei	r2,r2,1
10004f1c:	10004d1e 	bne	r2,zero,10005054 <main+0x4d20>
			if(kraid_health <= 5){
10004f20:	e0b93717 	ldw	r2,-6948(fp)
10004f24:	10800188 	cmpgei	r2,r2,6
10004f28:	10000a1e 	bne	r2,zero,10004f54 <main+0x4c20>
				if(*KRAID_G_EN == True){
10004f2c:	00804004 	movi	r2,256
10004f30:	10800017 	ldw	r2,0(r2)
10004f34:	10800058 	cmpnei	r2,r2,1
10004f38:	10001f1e 	bne	r2,zero,10004fb8 <main+0x4c84>
					*KRAID_G_EN = False;
10004f3c:	00804004 	movi	r2,256
10004f40:	10000015 	stw	zero,0(r2)
					*KRAID_R_EN = True;
10004f44:	00803c04 	movi	r2,240
10004f48:	00c00044 	movi	r3,1
10004f4c:	10c00015 	stw	r3,0(r2)
10004f50:	00001906 	br	10004fb8 <main+0x4c84>
				}
			}
			else if(kraid_health <= 10){
10004f54:	e0b93717 	ldw	r2,-6948(fp)
10004f58:	108002c8 	cmpgei	r2,r2,11
10004f5c:	10000a1e 	bne	r2,zero,10004f88 <main+0x4c54>
				if(*KRAID_N_EN == True){
10004f60:	00803804 	movi	r2,224
10004f64:	10800017 	ldw	r2,0(r2)
10004f68:	10800058 	cmpnei	r2,r2,1
10004f6c:	1000121e 	bne	r2,zero,10004fb8 <main+0x4c84>
					*KRAID_N_EN = False;
10004f70:	00803804 	movi	r2,224
10004f74:	10000015 	stw	zero,0(r2)
					*KRAID_G_EN = True;
10004f78:	00804004 	movi	r2,256
10004f7c:	00c00044 	movi	r3,1
10004f80:	10c00015 	stw	r3,0(r2)
10004f84:	00000c06 	br	10004fb8 <main+0x4c84>
				}
			}
			else if(kraid_health <= 15){
10004f88:	e0b93717 	ldw	r2,-6948(fp)
10004f8c:	10800408 	cmpgei	r2,r2,16
10004f90:	1000091e 	bne	r2,zero,10004fb8 <main+0x4c84>
				if(*KRAID_R_EN == True){
10004f94:	00803c04 	movi	r2,240
10004f98:	10800017 	ldw	r2,0(r2)
10004f9c:	10800058 	cmpnei	r2,r2,1
10004fa0:	1000051e 	bne	r2,zero,10004fb8 <main+0x4c84>
					*KRAID_R_EN = False;
10004fa4:	00803c04 	movi	r2,240
10004fa8:	10000015 	stw	zero,0(r2)
					*KRAID_G_EN = True;
10004fac:	00804004 	movi	r2,256
10004fb0:	00c00044 	movi	r3,1
10004fb4:	10c00015 	stw	r3,0(r2)
				}
			}
			kraid_counter+=1;
10004fb8:	e0b93b17 	ldw	r2,-6932(fp)
10004fbc:	10800044 	addi	r2,r2,1
10004fc0:	e0b93b15 	stw	r2,-6932(fp)
			if(kraid_counter > kraid_counter_max){
10004fc4:	e0b93b17 	ldw	r2,-6932(fp)
10004fc8:	e0f96a17 	ldw	r3,-6744(fp)
10004fcc:	1880210e 	bge	r3,r2,10005054 <main+0x4d20>
				if(kraid_health <= 5){
10004fd0:	e0b93717 	ldw	r2,-6948(fp)
10004fd4:	10800188 	cmpgei	r2,r2,6
10004fd8:	1000081e 	bne	r2,zero,10004ffc <main+0x4cc8>
					*KRAID_G_EN = True;
10004fdc:	00804004 	movi	r2,256
10004fe0:	00c00044 	movi	r3,1
10004fe4:	10c00015 	stw	r3,0(r2)
					*KRAID_R_EN = False;
10004fe8:	00803c04 	movi	r2,240
10004fec:	10000015 	stw	zero,0(r2)
					*KRAID_N_EN = False;
10004ff0:	00803804 	movi	r2,224
10004ff4:	10000015 	stw	zero,0(r2)
10004ff8:	00001506 	br	10005050 <main+0x4d1c>
				}
				else if(kraid_health <= 10){
10004ffc:	e0b93717 	ldw	r2,-6948(fp)
10005000:	108002c8 	cmpgei	r2,r2,11
10005004:	1000081e 	bne	r2,zero,10005028 <main+0x4cf4>
					*KRAID_G_EN = False;
10005008:	00804004 	movi	r2,256
1000500c:	10000015 	stw	zero,0(r2)
					*KRAID_R_EN = False;
10005010:	00803c04 	movi	r2,240
10005014:	10000015 	stw	zero,0(r2)
					*KRAID_N_EN = True;
10005018:	00803804 	movi	r2,224
1000501c:	00c00044 	movi	r3,1
10005020:	10c00015 	stw	r3,0(r2)
10005024:	00000a06 	br	10005050 <main+0x4d1c>
				}
				else if(kraid_health <= 15){
10005028:	e0b93717 	ldw	r2,-6948(fp)
1000502c:	10800408 	cmpgei	r2,r2,16
10005030:	1000071e 	bne	r2,zero,10005050 <main+0x4d1c>
					*KRAID_R_EN = True;
10005034:	00803c04 	movi	r2,240
10005038:	00c00044 	movi	r3,1
1000503c:	10c00015 	stw	r3,0(r2)
					*KRAID_G_EN = False;
10005040:	00804004 	movi	r2,256
10005044:	10000015 	stw	zero,0(r2)
					*KRAID_N_EN = False;
10005048:	00803804 	movi	r2,224
1000504c:	10000015 	stw	zero,0(r2)
				}
				kraid_blink = False;
10005050:	e0393a15 	stw	zero,-6936(fp)
		//int attack_counter_nail = 0;
		//int attack_coutner_bullet = 0;
		//int kraid_bul_start = 0;


		attack_counter_nail+=1;
10005054:	e0b93f17 	ldw	r2,-6916(fp)
10005058:	10800044 	addi	r2,r2,1
1000505c:	e0b93f15 	stw	r2,-6916(fp)
		attack_counter_nail_2+=1;
10005060:	e0b94417 	ldw	r2,-6896(fp)
10005064:	10800044 	addi	r2,r2,1
10005068:	e0b94415 	stw	r2,-6896(fp)
		attack_counter_bullet+=1;
1000506c:	e0b94017 	ldw	r2,-6912(fp)
10005070:	10800044 	addi	r2,r2,1
10005074:	e0b94015 	stw	r2,-6912(fp)
		//nail
		if((attack_counter_nail > nail_counter || attack_counter_nail_2 > nail_counter)&& (*KRAID_G_EN == True || *KRAID_R_EN == True || *KRAID_N_EN == True)){
10005078:	e0b93f17 	ldw	r2,-6916(fp)
1000507c:	e0f96c17 	ldw	r3,-6736(fp)
10005080:	18800316 	blt	r3,r2,10005090 <main+0x4d5c>
10005084:	e0b94417 	ldw	r2,-6896(fp)
10005088:	e0f96c17 	ldw	r3,-6736(fp)
1000508c:	1880720e 	bge	r3,r2,10005258 <main+0x4f24>
10005090:	00804004 	movi	r2,256
10005094:	10800017 	ldw	r2,0(r2)
10005098:	10800060 	cmpeqi	r2,r2,1
1000509c:	1000081e 	bne	r2,zero,100050c0 <main+0x4d8c>
100050a0:	00803c04 	movi	r2,240
100050a4:	10800017 	ldw	r2,0(r2)
100050a8:	10800060 	cmpeqi	r2,r2,1
100050ac:	1000041e 	bne	r2,zero,100050c0 <main+0x4d8c>
100050b0:	00803804 	movi	r2,224
100050b4:	10800017 	ldw	r2,0(r2)
100050b8:	10800058 	cmpnei	r2,r2,1
100050bc:	1000661e 	bne	r2,zero,10005258 <main+0x4f24>
			if(*KRAID_THROW_EN == False){
100050c0:	00803004 	movi	r2,192
100050c4:	10800017 	ldw	r2,0(r2)
100050c8:	1000231e 	bne	r2,zero,10005158 <main+0x4e24>
				*KRAID_THROW_EN = True;
100050cc:	00803004 	movi	r2,192
100050d0:	00c00044 	movi	r3,1
100050d4:	10c00015 	stw	r3,0(r2)
				if(*KRAID_DIR == 1){
100050d8:	00804404 	movi	r2,272
100050dc:	10800017 	ldw	r2,0(r2)
100050e0:	10800058 	cmpnei	r2,r2,1
100050e4:	10000c1e 	bne	r2,zero,10005118 <main+0x4de4>
					throw_dir_1 = 1;
100050e8:	00800044 	movi	r2,1
100050ec:	e0b94215 	stw	r2,-6904(fp)
					*KRAID_THROW_X = *KRAID_X;
100050f0:	00801804 	movi	r2,96
100050f4:	00c02804 	movi	r3,160
100050f8:	18c00017 	ldw	r3,0(r3)
100050fc:	10c00015 	stw	r3,0(r2)
					*KRAID_THROW_Y = *KRAID_Y+5;
10005100:	00801404 	movi	r2,80
10005104:	00c02404 	movi	r3,144
10005108:	18c00017 	ldw	r3,0(r3)
1000510c:	18c00144 	addi	r3,r3,5
10005110:	10c00015 	stw	r3,0(r2)
10005114:	00000c06 	br	10005148 <main+0x4e14>
				}
				else{
					*KRAID_BUL_DIR = 0;
10005118:	00802c04 	movi	r2,176
1000511c:	10000015 	stw	zero,0(r2)
					*KRAID_THROW_X = *KRAID_X+60;
10005120:	00801804 	movi	r2,96
10005124:	00c02804 	movi	r3,160
10005128:	18c00017 	ldw	r3,0(r3)
1000512c:	18c00f04 	addi	r3,r3,60
10005130:	10c00015 	stw	r3,0(r2)
					*KRAID_THROW_Y = *KRAID_Y+5;
10005134:	00801404 	movi	r2,80
10005138:	00c02404 	movi	r3,144
1000513c:	18c00017 	ldw	r3,0(r3)
10005140:	18c00144 	addi	r3,r3,5
10005144:	10c00015 	stw	r3,0(r2)
				}
				nail_one_inc = -2;
10005148:	00bfff84 	movi	r2,-2
1000514c:	e0b93c15 	stw	r2,-6928(fp)
				attack_counter_nail = 0;
10005150:	e0393f15 	stw	zero,-6916(fp)
10005154:	00002506 	br	100051ec <main+0x4eb8>
			}
			else if(*KRAID_THROW_2_EN == False){
10005158:	00801004 	movi	r2,64
1000515c:	10800017 	ldw	r2,0(r2)
10005160:	1000221e 	bne	r2,zero,100051ec <main+0x4eb8>
				*KRAID_THROW_2_EN = True;
10005164:	00801004 	movi	r2,64
10005168:	00c00044 	movi	r3,1
1000516c:	10c00015 	stw	r3,0(r2)
				if(*KRAID_DIR == 1){
10005170:	00804404 	movi	r2,272
10005174:	10800017 	ldw	r2,0(r2)
10005178:	10800058 	cmpnei	r2,r2,1
1000517c:	10000c1e 	bne	r2,zero,100051b0 <main+0x4e7c>
					throw_dir_2 = 1;
10005180:	00800044 	movi	r2,1
10005184:	e0b94315 	stw	r2,-6900(fp)
					*KRAID_THROW_2_X = *KRAID_X;
10005188:	00800c04 	movi	r2,48
1000518c:	00c02804 	movi	r3,160
10005190:	18c00017 	ldw	r3,0(r3)
10005194:	10c00015 	stw	r3,0(r2)
					*KRAID_THROW_2_Y = *KRAID_Y+5;
10005198:	00800804 	movi	r2,32
1000519c:	00c02404 	movi	r3,144
100051a0:	18c00017 	ldw	r3,0(r3)
100051a4:	18c00144 	addi	r3,r3,5
100051a8:	10c00015 	stw	r3,0(r2)
100051ac:	00000c06 	br	100051e0 <main+0x4eac>
				}
				else{
					*KRAID_BUL_DIR = 0;
100051b0:	00802c04 	movi	r2,176
100051b4:	10000015 	stw	zero,0(r2)
					*KRAID_THROW_2_X = *KRAID_X+60;
100051b8:	00800c04 	movi	r2,48
100051bc:	00c02804 	movi	r3,160
100051c0:	18c00017 	ldw	r3,0(r3)
100051c4:	18c00f04 	addi	r3,r3,60
100051c8:	10c00015 	stw	r3,0(r2)
					*KRAID_THROW_2_Y = *KRAID_Y+5;
100051cc:	00800804 	movi	r2,32
100051d0:	00c02404 	movi	r3,144
100051d4:	18c00017 	ldw	r3,0(r3)
100051d8:	18c00144 	addi	r3,r3,5
100051dc:	10c00015 	stw	r3,0(r2)
				}
				nail_two_inc = -3;
100051e0:	00bfff44 	movi	r2,-3
100051e4:	e0b93d15 	stw	r2,-6924(fp)
				attack_counter_nail_2 = 0;
100051e8:	e0394415 	stw	zero,-6896(fp)
			}
			if(kraid_health <=5){
100051ec:	e0b93717 	ldw	r2,-6948(fp)
100051f0:	10800188 	cmpgei	r2,r2,6
100051f4:	1000061e 	bne	r2,zero,10005210 <main+0x4edc>
				attack_counter_nail = rand()%50+100;
100051f8:	00091dc0 	call	100091dc <rand>
100051fc:	1009883a 	mov	r4,r2
10005200:	01400c84 	movi	r5,50
10005204:	0006d840 	call	10006d84 <__modsi3>
10005208:	10801904 	addi	r2,r2,100
1000520c:	e0b93f15 	stw	r2,-6916(fp)
			}
			if(kraid_health <=10){
10005210:	e0b93717 	ldw	r2,-6948(fp)
10005214:	108002c8 	cmpgei	r2,r2,11
10005218:	1000061e 	bne	r2,zero,10005234 <main+0x4f00>
				attack_counter_nail = rand()%100+100;
1000521c:	00091dc0 	call	100091dc <rand>
10005220:	1009883a 	mov	r4,r2
10005224:	01401904 	movi	r5,100
10005228:	0006d840 	call	10006d84 <__modsi3>
1000522c:	10801904 	addi	r2,r2,100
10005230:	e0b93f15 	stw	r2,-6916(fp)
			}
			if(kraid_health <=5){
10005234:	e0b93717 	ldw	r2,-6948(fp)
10005238:	10800188 	cmpgei	r2,r2,6
1000523c:	1000061e 	bne	r2,zero,10005258 <main+0x4f24>
				attack_counter_nail = rand()%150+100;
10005240:	00091dc0 	call	100091dc <rand>
10005244:	1009883a 	mov	r4,r2
10005248:	01402584 	movi	r5,150
1000524c:	0006d840 	call	10006d84 <__modsi3>
10005250:	10801904 	addi	r2,r2,100
10005254:	e0b93f15 	stw	r2,-6916(fp)
			}
	    }
		if(*KRAID_THROW_EN == True){
10005258:	00803004 	movi	r2,192
1000525c:	10800017 	ldw	r2,0(r2)
10005260:	10800058 	cmpnei	r2,r2,1
10005264:	10001f1e 	bne	r2,zero,100052e4 <main+0x4fb0>
			if(throw_dir_1 == 1){
10005268:	e0b94217 	ldw	r2,-6904(fp)
1000526c:	10800058 	cmpnei	r2,r2,1
10005270:	1000061e 	bne	r2,zero,1000528c <main+0x4f58>
				*KRAID_THROW_X-=4;
10005274:	00801804 	movi	r2,96
10005278:	00c01804 	movi	r3,96
1000527c:	18c00017 	ldw	r3,0(r3)
10005280:	18ffff04 	addi	r3,r3,-4
10005284:	10c00015 	stw	r3,0(r2)
10005288:	00000506 	br	100052a0 <main+0x4f6c>
			}
			else{
				*KRAID_THROW_X+=4;
1000528c:	00801804 	movi	r2,96
10005290:	00c01804 	movi	r3,96
10005294:	18c00017 	ldw	r3,0(r3)
10005298:	18c00104 	addi	r3,r3,4
1000529c:	10c00015 	stw	r3,0(r2)
			}
			*KRAID_THROW_Y+=nail_one_inc;
100052a0:	00801404 	movi	r2,80
100052a4:	00c01404 	movi	r3,80
100052a8:	19000017 	ldw	r4,0(r3)
100052ac:	e0f93c17 	ldw	r3,-6928(fp)
100052b0:	20c7883a 	add	r3,r4,r3
100052b4:	10c00015 	stw	r3,0(r2)
			nail_one_inc+=gravity;
100052b8:	e1393c17 	ldw	r4,-6928(fp)
100052bc:	00079dc0 	call	100079dc <__floatsisf>
100052c0:	1007883a 	mov	r3,r2
100052c4:	1809883a 	mov	r4,r3
100052c8:	e1794e17 	ldw	r5,-6856(fp)
100052cc:	0006e180 	call	10006e18 <__addsf3>
100052d0:	1007883a 	mov	r3,r2
100052d4:	1805883a 	mov	r2,r3
100052d8:	1009883a 	mov	r4,r2
100052dc:	00079640 	call	10007964 <__fixsfsi>
100052e0:	e0b93c15 	stw	r2,-6928(fp)
		}
		if(*KRAID_THROW_2_EN == True){
100052e4:	00801004 	movi	r2,64
100052e8:	10800017 	ldw	r2,0(r2)
100052ec:	10800058 	cmpnei	r2,r2,1
100052f0:	10001f1e 	bne	r2,zero,10005370 <main+0x503c>
			if(throw_dir_2 == 1){
100052f4:	e0b94317 	ldw	r2,-6900(fp)
100052f8:	10800058 	cmpnei	r2,r2,1
100052fc:	1000061e 	bne	r2,zero,10005318 <main+0x4fe4>
				*KRAID_THROW_2_X-=4;
10005300:	00800c04 	movi	r2,48
10005304:	00c00c04 	movi	r3,48
10005308:	18c00017 	ldw	r3,0(r3)
1000530c:	18ffff04 	addi	r3,r3,-4
10005310:	10c00015 	stw	r3,0(r2)
10005314:	00000506 	br	1000532c <main+0x4ff8>
			}
			else{
				*KRAID_THROW_2_X+=4;
10005318:	00800c04 	movi	r2,48
1000531c:	00c00c04 	movi	r3,48
10005320:	18c00017 	ldw	r3,0(r3)
10005324:	18c00104 	addi	r3,r3,4
10005328:	10c00015 	stw	r3,0(r2)
			}
			*KRAID_THROW_2_Y+=nail_two_inc;
1000532c:	00800804 	movi	r2,32
10005330:	00c00804 	movi	r3,32
10005334:	19000017 	ldw	r4,0(r3)
10005338:	e0f93d17 	ldw	r3,-6924(fp)
1000533c:	20c7883a 	add	r3,r4,r3
10005340:	10c00015 	stw	r3,0(r2)
			nail_two_inc+=gravity;
10005344:	e1393d17 	ldw	r4,-6924(fp)
10005348:	00079dc0 	call	100079dc <__floatsisf>
1000534c:	1007883a 	mov	r3,r2
10005350:	1809883a 	mov	r4,r3
10005354:	e1794e17 	ldw	r5,-6856(fp)
10005358:	0006e180 	call	10006e18 <__addsf3>
1000535c:	1007883a 	mov	r3,r2
10005360:	1805883a 	mov	r2,r3
10005364:	1009883a 	mov	r4,r2
10005368:	00079640 	call	10007964 <__fixsfsi>
1000536c:	e0b93d15 	stw	r2,-6924(fp)
		}
	    if(*KRAID_THROW_EN == True && (scene[sceneNum][(*KRAID_THROW_Y)/30][(*KRAID_THROW_X)/30]!=0 || scene[sceneNum][(*KRAID_THROW_Y+8)/30][(*KRAID_THROW_X)/30]!=0 || scene[sceneNum][(*KRAID_THROW_Y)/30][(*KRAID_THROW_X+8)/30]!=0 || scene[sceneNum][(*KRAID_THROW_Y+8)/30][(*KRAID_THROW_X+8)/30]!=0)){
10005370:	00803004 	movi	r2,192
10005374:	10800017 	ldw	r2,0(r2)
10005378:	10800058 	cmpnei	r2,r2,1
1000537c:	10007a1e 	bne	r2,zero,10005568 <main+0x5234>
10005380:	00801404 	movi	r2,80
10005384:	10800017 	ldw	r2,0(r2)
10005388:	1009883a 	mov	r4,r2
1000538c:	01400784 	movi	r5,30
10005390:	0006d300 	call	10006d30 <__divsi3>
10005394:	1023883a 	mov	r17,r2
10005398:	00801804 	movi	r2,96
1000539c:	10800017 	ldw	r2,0(r2)
100053a0:	1009883a 	mov	r4,r2
100053a4:	01400784 	movi	r5,30
100053a8:	0006d300 	call	10006d30 <__divsi3>
100053ac:	1021883a 	mov	r16,r2
100053b0:	e4b95117 	ldw	r18,-6844(fp)
100053b4:	8809883a 	mov	r4,r17
100053b8:	01400544 	movi	r5,21
100053bc:	0006df00 	call	10006df0 <__mulsi3>
100053c0:	1023883a 	mov	r17,r2
100053c4:	9009883a 	mov	r4,r18
100053c8:	01405404 	movi	r5,336
100053cc:	0006df00 	call	10006df0 <__mulsi3>
100053d0:	8885883a 	add	r2,r17,r2
100053d4:	1405883a 	add	r2,r2,r16
100053d8:	1085883a 	add	r2,r2,r2
100053dc:	1085883a 	add	r2,r2,r2
100053e0:	e0f91304 	addi	r3,fp,-7092
100053e4:	1885883a 	add	r2,r3,r2
100053e8:	10805a04 	addi	r2,r2,360
100053ec:	10800017 	ldw	r2,0(r2)
100053f0:	10005b1e 	bne	r2,zero,10005560 <main+0x522c>
100053f4:	00801404 	movi	r2,80
100053f8:	10800017 	ldw	r2,0(r2)
100053fc:	10800204 	addi	r2,r2,8
10005400:	1009883a 	mov	r4,r2
10005404:	01400784 	movi	r5,30
10005408:	0006d300 	call	10006d30 <__divsi3>
1000540c:	1023883a 	mov	r17,r2
10005410:	00801804 	movi	r2,96
10005414:	10800017 	ldw	r2,0(r2)
10005418:	1009883a 	mov	r4,r2
1000541c:	01400784 	movi	r5,30
10005420:	0006d300 	call	10006d30 <__divsi3>
10005424:	1021883a 	mov	r16,r2
10005428:	e4b95117 	ldw	r18,-6844(fp)
1000542c:	8809883a 	mov	r4,r17
10005430:	01400544 	movi	r5,21
10005434:	0006df00 	call	10006df0 <__mulsi3>
10005438:	1023883a 	mov	r17,r2
1000543c:	9009883a 	mov	r4,r18
10005440:	01405404 	movi	r5,336
10005444:	0006df00 	call	10006df0 <__mulsi3>
10005448:	8885883a 	add	r2,r17,r2
1000544c:	1405883a 	add	r2,r2,r16
10005450:	1085883a 	add	r2,r2,r2
10005454:	1085883a 	add	r2,r2,r2
10005458:	e0f91304 	addi	r3,fp,-7092
1000545c:	1885883a 	add	r2,r3,r2
10005460:	10805a04 	addi	r2,r2,360
10005464:	10800017 	ldw	r2,0(r2)
10005468:	10003d1e 	bne	r2,zero,10005560 <main+0x522c>
1000546c:	00801404 	movi	r2,80
10005470:	10800017 	ldw	r2,0(r2)
10005474:	1009883a 	mov	r4,r2
10005478:	01400784 	movi	r5,30
1000547c:	0006d300 	call	10006d30 <__divsi3>
10005480:	1023883a 	mov	r17,r2
10005484:	00801804 	movi	r2,96
10005488:	10800017 	ldw	r2,0(r2)
1000548c:	10800204 	addi	r2,r2,8
10005490:	1009883a 	mov	r4,r2
10005494:	01400784 	movi	r5,30
10005498:	0006d300 	call	10006d30 <__divsi3>
1000549c:	1021883a 	mov	r16,r2
100054a0:	e4b95117 	ldw	r18,-6844(fp)
100054a4:	8809883a 	mov	r4,r17
100054a8:	01400544 	movi	r5,21
100054ac:	0006df00 	call	10006df0 <__mulsi3>
100054b0:	1023883a 	mov	r17,r2
100054b4:	9009883a 	mov	r4,r18
100054b8:	01405404 	movi	r5,336
100054bc:	0006df00 	call	10006df0 <__mulsi3>
100054c0:	8885883a 	add	r2,r17,r2
100054c4:	1405883a 	add	r2,r2,r16
100054c8:	1085883a 	add	r2,r2,r2
100054cc:	1085883a 	add	r2,r2,r2
100054d0:	e0f91304 	addi	r3,fp,-7092
100054d4:	1885883a 	add	r2,r3,r2
100054d8:	10805a04 	addi	r2,r2,360
100054dc:	10800017 	ldw	r2,0(r2)
100054e0:	10001f1e 	bne	r2,zero,10005560 <main+0x522c>
100054e4:	00801404 	movi	r2,80
100054e8:	10800017 	ldw	r2,0(r2)
100054ec:	10800204 	addi	r2,r2,8
100054f0:	1009883a 	mov	r4,r2
100054f4:	01400784 	movi	r5,30
100054f8:	0006d300 	call	10006d30 <__divsi3>
100054fc:	1023883a 	mov	r17,r2
10005500:	00801804 	movi	r2,96
10005504:	10800017 	ldw	r2,0(r2)
10005508:	10800204 	addi	r2,r2,8
1000550c:	1009883a 	mov	r4,r2
10005510:	01400784 	movi	r5,30
10005514:	0006d300 	call	10006d30 <__divsi3>
10005518:	1021883a 	mov	r16,r2
1000551c:	e4b95117 	ldw	r18,-6844(fp)
10005520:	8809883a 	mov	r4,r17
10005524:	01400544 	movi	r5,21
10005528:	0006df00 	call	10006df0 <__mulsi3>
1000552c:	1023883a 	mov	r17,r2
10005530:	9009883a 	mov	r4,r18
10005534:	01405404 	movi	r5,336
10005538:	0006df00 	call	10006df0 <__mulsi3>
1000553c:	8885883a 	add	r2,r17,r2
10005540:	1405883a 	add	r2,r2,r16
10005544:	1085883a 	add	r2,r2,r2
10005548:	1085883a 	add	r2,r2,r2
1000554c:	e0f91304 	addi	r3,fp,-7092
10005550:	1885883a 	add	r2,r3,r2
10005554:	10805a04 	addi	r2,r2,360
10005558:	10800017 	ldw	r2,0(r2)
1000555c:	10000226 	beq	r2,zero,10005568 <main+0x5234>
	    	*KRAID_THROW_EN = False;
10005560:	00803004 	movi	r2,192
10005564:	10000015 	stw	zero,0(r2)
	    }
	    if(*KRAID_THROW_2_EN == True && (scene[sceneNum][(*KRAID_THROW_2_Y)/30][(*KRAID_THROW_2_X)/30]!=0 || scene[sceneNum][(*KRAID_THROW_2_Y+8)/30][(*KRAID_THROW_2_X)/30]!=0 || scene[sceneNum][(*KRAID_THROW_2_Y)/30][(*KRAID_THROW_2_X+8)/30]!=0 || scene[sceneNum][(*KRAID_THROW_2_Y+8)/30][(*KRAID_THROW_2_X+8)/30]!=0)){
10005568:	00801004 	movi	r2,64
1000556c:	10800017 	ldw	r2,0(r2)
10005570:	10800058 	cmpnei	r2,r2,1
10005574:	10007a1e 	bne	r2,zero,10005760 <main+0x542c>
10005578:	00800804 	movi	r2,32
1000557c:	10800017 	ldw	r2,0(r2)
10005580:	1009883a 	mov	r4,r2
10005584:	01400784 	movi	r5,30
10005588:	0006d300 	call	10006d30 <__divsi3>
1000558c:	1023883a 	mov	r17,r2
10005590:	00800c04 	movi	r2,48
10005594:	10800017 	ldw	r2,0(r2)
10005598:	1009883a 	mov	r4,r2
1000559c:	01400784 	movi	r5,30
100055a0:	0006d300 	call	10006d30 <__divsi3>
100055a4:	1021883a 	mov	r16,r2
100055a8:	e4b95117 	ldw	r18,-6844(fp)
100055ac:	8809883a 	mov	r4,r17
100055b0:	01400544 	movi	r5,21
100055b4:	0006df00 	call	10006df0 <__mulsi3>
100055b8:	1023883a 	mov	r17,r2
100055bc:	9009883a 	mov	r4,r18
100055c0:	01405404 	movi	r5,336
100055c4:	0006df00 	call	10006df0 <__mulsi3>
100055c8:	8885883a 	add	r2,r17,r2
100055cc:	1405883a 	add	r2,r2,r16
100055d0:	1085883a 	add	r2,r2,r2
100055d4:	1085883a 	add	r2,r2,r2
100055d8:	e0f91304 	addi	r3,fp,-7092
100055dc:	1885883a 	add	r2,r3,r2
100055e0:	10805a04 	addi	r2,r2,360
100055e4:	10800017 	ldw	r2,0(r2)
100055e8:	10005b1e 	bne	r2,zero,10005758 <main+0x5424>
100055ec:	00800804 	movi	r2,32
100055f0:	10800017 	ldw	r2,0(r2)
100055f4:	10800204 	addi	r2,r2,8
100055f8:	1009883a 	mov	r4,r2
100055fc:	01400784 	movi	r5,30
10005600:	0006d300 	call	10006d30 <__divsi3>
10005604:	1023883a 	mov	r17,r2
10005608:	00800c04 	movi	r2,48
1000560c:	10800017 	ldw	r2,0(r2)
10005610:	1009883a 	mov	r4,r2
10005614:	01400784 	movi	r5,30
10005618:	0006d300 	call	10006d30 <__divsi3>
1000561c:	1021883a 	mov	r16,r2
10005620:	e4b95117 	ldw	r18,-6844(fp)
10005624:	8809883a 	mov	r4,r17
10005628:	01400544 	movi	r5,21
1000562c:	0006df00 	call	10006df0 <__mulsi3>
10005630:	1023883a 	mov	r17,r2
10005634:	9009883a 	mov	r4,r18
10005638:	01405404 	movi	r5,336
1000563c:	0006df00 	call	10006df0 <__mulsi3>
10005640:	8885883a 	add	r2,r17,r2
10005644:	1405883a 	add	r2,r2,r16
10005648:	1085883a 	add	r2,r2,r2
1000564c:	1085883a 	add	r2,r2,r2
10005650:	e0f91304 	addi	r3,fp,-7092
10005654:	1885883a 	add	r2,r3,r2
10005658:	10805a04 	addi	r2,r2,360
1000565c:	10800017 	ldw	r2,0(r2)
10005660:	10003d1e 	bne	r2,zero,10005758 <main+0x5424>
10005664:	00800804 	movi	r2,32
10005668:	10800017 	ldw	r2,0(r2)
1000566c:	1009883a 	mov	r4,r2
10005670:	01400784 	movi	r5,30
10005674:	0006d300 	call	10006d30 <__divsi3>
10005678:	1023883a 	mov	r17,r2
1000567c:	00800c04 	movi	r2,48
10005680:	10800017 	ldw	r2,0(r2)
10005684:	10800204 	addi	r2,r2,8
10005688:	1009883a 	mov	r4,r2
1000568c:	01400784 	movi	r5,30
10005690:	0006d300 	call	10006d30 <__divsi3>
10005694:	1021883a 	mov	r16,r2
10005698:	e4b95117 	ldw	r18,-6844(fp)
1000569c:	8809883a 	mov	r4,r17
100056a0:	01400544 	movi	r5,21
100056a4:	0006df00 	call	10006df0 <__mulsi3>
100056a8:	1023883a 	mov	r17,r2
100056ac:	9009883a 	mov	r4,r18
100056b0:	01405404 	movi	r5,336
100056b4:	0006df00 	call	10006df0 <__mulsi3>
100056b8:	8885883a 	add	r2,r17,r2
100056bc:	1405883a 	add	r2,r2,r16
100056c0:	1085883a 	add	r2,r2,r2
100056c4:	1085883a 	add	r2,r2,r2
100056c8:	e0f91304 	addi	r3,fp,-7092
100056cc:	1885883a 	add	r2,r3,r2
100056d0:	10805a04 	addi	r2,r2,360
100056d4:	10800017 	ldw	r2,0(r2)
100056d8:	10001f1e 	bne	r2,zero,10005758 <main+0x5424>
100056dc:	00800804 	movi	r2,32
100056e0:	10800017 	ldw	r2,0(r2)
100056e4:	10800204 	addi	r2,r2,8
100056e8:	1009883a 	mov	r4,r2
100056ec:	01400784 	movi	r5,30
100056f0:	0006d300 	call	10006d30 <__divsi3>
100056f4:	1023883a 	mov	r17,r2
100056f8:	00800c04 	movi	r2,48
100056fc:	10800017 	ldw	r2,0(r2)
10005700:	10800204 	addi	r2,r2,8
10005704:	1009883a 	mov	r4,r2
10005708:	01400784 	movi	r5,30
1000570c:	0006d300 	call	10006d30 <__divsi3>
10005710:	1021883a 	mov	r16,r2
10005714:	e4b95117 	ldw	r18,-6844(fp)
10005718:	8809883a 	mov	r4,r17
1000571c:	01400544 	movi	r5,21
10005720:	0006df00 	call	10006df0 <__mulsi3>
10005724:	1023883a 	mov	r17,r2
10005728:	9009883a 	mov	r4,r18
1000572c:	01405404 	movi	r5,336
10005730:	0006df00 	call	10006df0 <__mulsi3>
10005734:	8885883a 	add	r2,r17,r2
10005738:	1405883a 	add	r2,r2,r16
1000573c:	1085883a 	add	r2,r2,r2
10005740:	1085883a 	add	r2,r2,r2
10005744:	e0f91304 	addi	r3,fp,-7092
10005748:	1885883a 	add	r2,r3,r2
1000574c:	10805a04 	addi	r2,r2,360
10005750:	10800017 	ldw	r2,0(r2)
10005754:	10000226 	beq	r2,zero,10005760 <main+0x542c>
	    	*KRAID_THROW_2_EN = False;
10005758:	00801004 	movi	r2,64
1000575c:	10000015 	stw	zero,0(r2)
	    }

	    //spike
		if(attack_counter_bullet > bullet_counter && (*KRAID_G_EN == True || *KRAID_R_EN == True || *KRAID_N_EN == True)){
10005760:	e0b94017 	ldw	r2,-6912(fp)
10005764:	e0f93e17 	ldw	r3,-6920(fp)
10005768:	18804c0e 	bge	r3,r2,1000589c <main+0x5568>
1000576c:	00804004 	movi	r2,256
10005770:	10800017 	ldw	r2,0(r2)
10005774:	10800060 	cmpeqi	r2,r2,1
10005778:	1000081e 	bne	r2,zero,1000579c <main+0x5468>
1000577c:	00803c04 	movi	r2,240
10005780:	10800017 	ldw	r2,0(r2)
10005784:	10800060 	cmpeqi	r2,r2,1
10005788:	1000041e 	bne	r2,zero,1000579c <main+0x5468>
1000578c:	00803804 	movi	r2,224
10005790:	10800017 	ldw	r2,0(r2)
10005794:	10800058 	cmpnei	r2,r2,1
10005798:	1000401e 	bne	r2,zero,1000589c <main+0x5568>
			if(*KRAID_SHOOT_EN == False){
1000579c:	00803404 	movi	r2,208
100057a0:	10800017 	ldw	r2,0(r2)
100057a4:	1000211e 	bne	r2,zero,1000582c <main+0x54f8>
				*KRAID_SHOOT_EN = True;
100057a8:	00803404 	movi	r2,208
100057ac:	00c00044 	movi	r3,1
100057b0:	10c00015 	stw	r3,0(r2)
				if(*KRAID_DIR == 1){
100057b4:	00804404 	movi	r2,272
100057b8:	10800017 	ldw	r2,0(r2)
100057bc:	10800058 	cmpnei	r2,r2,1
100057c0:	10000d1e 	bne	r2,zero,100057f8 <main+0x54c4>
					*KRAID_BUL_DIR = 1;
100057c4:	00802c04 	movi	r2,176
100057c8:	00c00044 	movi	r3,1
100057cc:	10c00015 	stw	r3,0(r2)
					*KRAID_SPIKE_X = *KRAID_X;
100057d0:	00802004 	movi	r2,128
100057d4:	00c02804 	movi	r3,160
100057d8:	18c00017 	ldw	r3,0(r3)
100057dc:	10c00015 	stw	r3,0(r2)
					*KRAID_SPIKE_Y = *KRAID_Y+25;
100057e0:	00801c04 	movi	r2,112
100057e4:	00c02404 	movi	r3,144
100057e8:	18c00017 	ldw	r3,0(r3)
100057ec:	18c00644 	addi	r3,r3,25
100057f0:	10c00015 	stw	r3,0(r2)
100057f4:	00000c06 	br	10005828 <main+0x54f4>
				}
				else{
					*KRAID_BUL_DIR = 0;
100057f8:	00802c04 	movi	r2,176
100057fc:	10000015 	stw	zero,0(r2)
					*KRAID_SPIKE_X = *KRAID_X+60;
10005800:	00802004 	movi	r2,128
10005804:	00c02804 	movi	r3,160
10005808:	18c00017 	ldw	r3,0(r3)
1000580c:	18c00f04 	addi	r3,r3,60
10005810:	10c00015 	stw	r3,0(r2)
					*KRAID_SPIKE_Y = *KRAID_Y+25;
10005814:	00801c04 	movi	r2,112
10005818:	00c02404 	movi	r3,144
1000581c:	18c00017 	ldw	r3,0(r3)
10005820:	18c00644 	addi	r3,r3,25
10005824:	10c00015 	stw	r3,0(r2)
				}
				kraid_bul_start = 0;
10005828:	e0394115 	stw	zero,-6908(fp)
			}
			attack_counter_bullet = 0;
1000582c:	e0394015 	stw	zero,-6912(fp)
			if(kraid_health <=5){
10005830:	e0b93717 	ldw	r2,-6948(fp)
10005834:	10800188 	cmpgei	r2,r2,6
10005838:	1000061e 	bne	r2,zero,10005854 <main+0x5520>
				bullet_counter = rand()%50+100;
1000583c:	00091dc0 	call	100091dc <rand>
10005840:	1009883a 	mov	r4,r2
10005844:	01400c84 	movi	r5,50
10005848:	0006d840 	call	10006d84 <__modsi3>
1000584c:	10801904 	addi	r2,r2,100
10005850:	e0b93e15 	stw	r2,-6920(fp)
			}
			if(kraid_health <=10){
10005854:	e0b93717 	ldw	r2,-6948(fp)
10005858:	108002c8 	cmpgei	r2,r2,11
1000585c:	1000061e 	bne	r2,zero,10005878 <main+0x5544>
				bullet_counter = rand()%100+100;
10005860:	00091dc0 	call	100091dc <rand>
10005864:	1009883a 	mov	r4,r2
10005868:	01401904 	movi	r5,100
1000586c:	0006d840 	call	10006d84 <__modsi3>
10005870:	10801904 	addi	r2,r2,100
10005874:	e0b93e15 	stw	r2,-6920(fp)
			}
			if(kraid_health <=5){
10005878:	e0b93717 	ldw	r2,-6948(fp)
1000587c:	10800188 	cmpgei	r2,r2,6
10005880:	1000061e 	bne	r2,zero,1000589c <main+0x5568>
				bullet_counter = rand()%150+100;
10005884:	00091dc0 	call	100091dc <rand>
10005888:	1009883a 	mov	r4,r2
1000588c:	01402584 	movi	r5,150
10005890:	0006d840 	call	10006d84 <__modsi3>
10005894:	10801904 	addi	r2,r2,100
10005898:	e0b93e15 	stw	r2,-6920(fp)
			}
	    }
		if(*KRAID_SHOOT_EN == True){
1000589c:	00803404 	movi	r2,208
100058a0:	10800017 	ldw	r2,0(r2)
100058a4:	10800058 	cmpnei	r2,r2,1
100058a8:	1000151e 	bne	r2,zero,10005900 <main+0x55cc>
			if(*KRAID_BUL_DIR == 1){
100058ac:	00802c04 	movi	r2,176
100058b0:	10800017 	ldw	r2,0(r2)
100058b4:	10800058 	cmpnei	r2,r2,1
100058b8:	1000091e 	bne	r2,zero,100058e0 <main+0x55ac>
				*KRAID_SPIKE_X-=6;
100058bc:	00802004 	movi	r2,128
100058c0:	00c02004 	movi	r3,128
100058c4:	18c00017 	ldw	r3,0(r3)
100058c8:	18fffe84 	addi	r3,r3,-6
100058cc:	10c00015 	stw	r3,0(r2)
				kraid_bul_start+=6;
100058d0:	e0b94117 	ldw	r2,-6908(fp)
100058d4:	10800184 	addi	r2,r2,6
100058d8:	e0b94115 	stw	r2,-6908(fp)
100058dc:	00000806 	br	10005900 <main+0x55cc>
			}
			else{
				*KRAID_SPIKE_X+=6;
100058e0:	00802004 	movi	r2,128
100058e4:	00c02004 	movi	r3,128
100058e8:	18c00017 	ldw	r3,0(r3)
100058ec:	18c00184 	addi	r3,r3,6
100058f0:	10c00015 	stw	r3,0(r2)
				kraid_bul_start+=6;
100058f4:	e0b94117 	ldw	r2,-6908(fp)
100058f8:	10800184 	addi	r2,r2,6
100058fc:	e0b94115 	stw	r2,-6908(fp)
			}
		}
		if(kraid_bul_start >= 200){
10005900:	e0b94117 	ldw	r2,-6908(fp)
10005904:	10803210 	cmplti	r2,r2,200
10005908:	1000021e 	bne	r2,zero,10005914 <main+0x55e0>
			*KRAID_SHOOT_EN = False;
1000590c:	00803404 	movi	r2,208
10005910:	10000015 	stw	zero,0(r2)
		}
	    if(*KRAID_SHOOT_EN == True && *KRAID_BUL_DIR == True && (scene[sceneNum][(*KRAID_SPIKE_Y)/30][(*KRAID_SPIKE_X)/30]!=0 || scene[sceneNum][(*KRAID_SPIKE_Y+8)/30][(*KRAID_SPIKE_X)/30]!=0)){
10005914:	00803404 	movi	r2,208
10005918:	10800017 	ldw	r2,0(r2)
1000591c:	10800058 	cmpnei	r2,r2,1
10005920:	1000411e 	bne	r2,zero,10005a28 <main+0x56f4>
10005924:	00802c04 	movi	r2,176
10005928:	10800017 	ldw	r2,0(r2)
1000592c:	10800058 	cmpnei	r2,r2,1
10005930:	10003d1e 	bne	r2,zero,10005a28 <main+0x56f4>
10005934:	00801c04 	movi	r2,112
10005938:	10800017 	ldw	r2,0(r2)
1000593c:	1009883a 	mov	r4,r2
10005940:	01400784 	movi	r5,30
10005944:	0006d300 	call	10006d30 <__divsi3>
10005948:	1023883a 	mov	r17,r2
1000594c:	00802004 	movi	r2,128
10005950:	10800017 	ldw	r2,0(r2)
10005954:	1009883a 	mov	r4,r2
10005958:	01400784 	movi	r5,30
1000595c:	0006d300 	call	10006d30 <__divsi3>
10005960:	1021883a 	mov	r16,r2
10005964:	e4b95117 	ldw	r18,-6844(fp)
10005968:	8809883a 	mov	r4,r17
1000596c:	01400544 	movi	r5,21
10005970:	0006df00 	call	10006df0 <__mulsi3>
10005974:	1023883a 	mov	r17,r2
10005978:	9009883a 	mov	r4,r18
1000597c:	01405404 	movi	r5,336
10005980:	0006df00 	call	10006df0 <__mulsi3>
10005984:	8885883a 	add	r2,r17,r2
10005988:	1405883a 	add	r2,r2,r16
1000598c:	1085883a 	add	r2,r2,r2
10005990:	1085883a 	add	r2,r2,r2
10005994:	e0f91304 	addi	r3,fp,-7092
10005998:	1885883a 	add	r2,r3,r2
1000599c:	10805a04 	addi	r2,r2,360
100059a0:	10800017 	ldw	r2,0(r2)
100059a4:	10001e1e 	bne	r2,zero,10005a20 <main+0x56ec>
100059a8:	00801c04 	movi	r2,112
100059ac:	10800017 	ldw	r2,0(r2)
100059b0:	10800204 	addi	r2,r2,8
100059b4:	1009883a 	mov	r4,r2
100059b8:	01400784 	movi	r5,30
100059bc:	0006d300 	call	10006d30 <__divsi3>
100059c0:	1023883a 	mov	r17,r2
100059c4:	00802004 	movi	r2,128
100059c8:	10800017 	ldw	r2,0(r2)
100059cc:	1009883a 	mov	r4,r2
100059d0:	01400784 	movi	r5,30
100059d4:	0006d300 	call	10006d30 <__divsi3>
100059d8:	1021883a 	mov	r16,r2
100059dc:	e4b95117 	ldw	r18,-6844(fp)
100059e0:	8809883a 	mov	r4,r17
100059e4:	01400544 	movi	r5,21
100059e8:	0006df00 	call	10006df0 <__mulsi3>
100059ec:	1023883a 	mov	r17,r2
100059f0:	9009883a 	mov	r4,r18
100059f4:	01405404 	movi	r5,336
100059f8:	0006df00 	call	10006df0 <__mulsi3>
100059fc:	8885883a 	add	r2,r17,r2
10005a00:	1405883a 	add	r2,r2,r16
10005a04:	1085883a 	add	r2,r2,r2
10005a08:	1085883a 	add	r2,r2,r2
10005a0c:	e0f91304 	addi	r3,fp,-7092
10005a10:	1885883a 	add	r2,r3,r2
10005a14:	10805a04 	addi	r2,r2,360
10005a18:	10800017 	ldw	r2,0(r2)
10005a1c:	10000226 	beq	r2,zero,10005a28 <main+0x56f4>
	    	*KRAID_SHOOT_EN = False;
10005a20:	00803404 	movi	r2,208
10005a24:	10000015 	stw	zero,0(r2)
	    }
	    if(*KRAID_SHOOT_EN == True && *KRAID_BUL_DIR == False && (scene[sceneNum][(*KRAID_SPIKE_Y)/30][(*KRAID_SPIKE_X+10)/30]!=0 || scene[sceneNum][(*KRAID_SPIKE_Y+8)/30][(*KRAID_SPIKE_X+10)/30]!=0)){
10005a28:	00803404 	movi	r2,208
10005a2c:	10800017 	ldw	r2,0(r2)
10005a30:	10800058 	cmpnei	r2,r2,1
10005a34:	1000421e 	bne	r2,zero,10005b40 <main+0x580c>
10005a38:	00802c04 	movi	r2,176
10005a3c:	10800017 	ldw	r2,0(r2)
10005a40:	10003f1e 	bne	r2,zero,10005b40 <main+0x580c>
10005a44:	00801c04 	movi	r2,112
10005a48:	10800017 	ldw	r2,0(r2)
10005a4c:	1009883a 	mov	r4,r2
10005a50:	01400784 	movi	r5,30
10005a54:	0006d300 	call	10006d30 <__divsi3>
10005a58:	1023883a 	mov	r17,r2
10005a5c:	00802004 	movi	r2,128
10005a60:	10800017 	ldw	r2,0(r2)
10005a64:	10800284 	addi	r2,r2,10
10005a68:	1009883a 	mov	r4,r2
10005a6c:	01400784 	movi	r5,30
10005a70:	0006d300 	call	10006d30 <__divsi3>
10005a74:	1021883a 	mov	r16,r2
10005a78:	e4b95117 	ldw	r18,-6844(fp)
10005a7c:	8809883a 	mov	r4,r17
10005a80:	01400544 	movi	r5,21
10005a84:	0006df00 	call	10006df0 <__mulsi3>
10005a88:	1023883a 	mov	r17,r2
10005a8c:	9009883a 	mov	r4,r18
10005a90:	01405404 	movi	r5,336
10005a94:	0006df00 	call	10006df0 <__mulsi3>
10005a98:	8885883a 	add	r2,r17,r2
10005a9c:	1405883a 	add	r2,r2,r16
10005aa0:	1085883a 	add	r2,r2,r2
10005aa4:	1085883a 	add	r2,r2,r2
10005aa8:	e0f91304 	addi	r3,fp,-7092
10005aac:	1885883a 	add	r2,r3,r2
10005ab0:	10805a04 	addi	r2,r2,360
10005ab4:	10800017 	ldw	r2,0(r2)
10005ab8:	10001f1e 	bne	r2,zero,10005b38 <main+0x5804>
10005abc:	00801c04 	movi	r2,112
10005ac0:	10800017 	ldw	r2,0(r2)
10005ac4:	10800204 	addi	r2,r2,8
10005ac8:	1009883a 	mov	r4,r2
10005acc:	01400784 	movi	r5,30
10005ad0:	0006d300 	call	10006d30 <__divsi3>
10005ad4:	1023883a 	mov	r17,r2
10005ad8:	00802004 	movi	r2,128
10005adc:	10800017 	ldw	r2,0(r2)
10005ae0:	10800284 	addi	r2,r2,10
10005ae4:	1009883a 	mov	r4,r2
10005ae8:	01400784 	movi	r5,30
10005aec:	0006d300 	call	10006d30 <__divsi3>
10005af0:	1021883a 	mov	r16,r2
10005af4:	e4b95117 	ldw	r18,-6844(fp)
10005af8:	8809883a 	mov	r4,r17
10005afc:	01400544 	movi	r5,21
10005b00:	0006df00 	call	10006df0 <__mulsi3>
10005b04:	1023883a 	mov	r17,r2
10005b08:	9009883a 	mov	r4,r18
10005b0c:	01405404 	movi	r5,336
10005b10:	0006df00 	call	10006df0 <__mulsi3>
10005b14:	8885883a 	add	r2,r17,r2
10005b18:	1405883a 	add	r2,r2,r16
10005b1c:	1085883a 	add	r2,r2,r2
10005b20:	1085883a 	add	r2,r2,r2
10005b24:	e0f91304 	addi	r3,fp,-7092
10005b28:	1885883a 	add	r2,r3,r2
10005b2c:	10805a04 	addi	r2,r2,360
10005b30:	10800017 	ldw	r2,0(r2)
10005b34:	10000226 	beq	r2,zero,10005b40 <main+0x580c>
	    	*KRAID_SHOOT_EN = False;
10005b38:	00803404 	movi	r2,208
10005b3c:	10000015 	stw	zero,0(r2)
	    }


		//EXTRA
		//debugging reset
		if (keycode == 0x15){
10005b40:	e0b94917 	ldw	r2,-6876(fp)
10005b44:	10800558 	cmpnei	r2,r2,21
10005b48:	1000031e 	bne	r2,zero,10005b58 <main+0x5824>
			sceneStart = True;
10005b4c:	00800044 	movi	r2,1
10005b50:	e0b92715 	stw	r2,-7012(fp)
			game_win = False;
10005b54:	e0394715 	stw	zero,-6884(fp)
		}
		if(god_mode == True){
10005b58:	e0b94517 	ldw	r2,-6892(fp)
10005b5c:	10800058 	cmpnei	r2,r2,1
10005b60:	1000061e 	bne	r2,zero,10005b7c <main+0x5848>
			*HEALTH = 3;
10005b64:	00806804 	movi	r2,416
10005b68:	00c000c4 	movi	r3,3
10005b6c:	10c00015 	stw	r3,0(r2)
			printf("God-Mode enabled.");
10005b70:	01040074 	movhi	r4,4097
10005b74:	211dad04 	addi	r4,r4,30388
10005b78:	00090bc0 	call	100090bc <printf>
		}

	}//end while
10005b7c:	002d2c06 	br	10001030 <__alt_data_end+0xf8001030>

10005b80 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
10005b80:	defffc04 	addi	sp,sp,-16
10005b84:	dfc00315 	stw	ra,12(sp)
10005b88:	df000215 	stw	fp,8(sp)
10005b8c:	df000204 	addi	fp,sp,8
10005b90:	2007883a 	mov	r3,r4
10005b94:	2805883a 	mov	r2,r5
10005b98:	e0fffe0d 	sth	r3,-8(fp)
10005b9c:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
10005ba0:	e0bffe0b 	ldhu	r2,-8(fp)
10005ba4:	01000084 	movi	r4,2
10005ba8:	100b883a 	mov	r5,r2
10005bac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA, Data);
10005bb0:	e0bfff0b 	ldhu	r2,-4(fp)
10005bb4:	0009883a 	mov	r4,zero
10005bb8:	100b883a 	mov	r5,r2
10005bbc:	00002480 	call	10000248 <IO_write>
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
}
10005bc0:	e037883a 	mov	sp,fp
10005bc4:	dfc00117 	ldw	ra,4(sp)
10005bc8:	df000017 	ldw	fp,0(sp)
10005bcc:	dec00204 	addi	sp,sp,8
10005bd0:	f800283a 	ret

10005bd4 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10005bd4:	defffd04 	addi	sp,sp,-12
10005bd8:	dfc00215 	stw	ra,8(sp)
10005bdc:	df000115 	stw	fp,4(sp)
10005be0:	df000104 	addi	fp,sp,4
10005be4:	2005883a 	mov	r2,r4
10005be8:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
10005bec:	e0bfff0b 	ldhu	r2,-4(fp)
10005bf0:	01000084 	movi	r4,2
10005bf4:	100b883a 	mov	r5,r2
10005bf8:	00002480 	call	10000248 <IO_write>
	return IO_read(HPI_DATA);
10005bfc:	0009883a 	mov	r4,zero
10005c00:	00002c00 	call	100002c0 <IO_read>
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
}
10005c04:	e037883a 	mov	sp,fp
10005c08:	dfc00117 	ldw	ra,4(sp)
10005c0c:	df000017 	ldw	fp,0(sp)
10005c10:	dec00204 	addi	sp,sp,8
10005c14:	f800283a 	ret

10005c18 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10005c18:	defffe04 	addi	sp,sp,-8
10005c1c:	dfc00115 	stw	ra,4(sp)
10005c20:	df000015 	stw	fp,0(sp)
10005c24:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10005c28:	01000044 	movi	r4,1
10005c2c:	017e9414 	movui	r5,64080
10005c30:	00002480 	call	10000248 <IO_write>
	usleep(100000);
10005c34:	010000b4 	movhi	r4,2
10005c38:	2121a804 	addi	r4,r4,-31072
10005c3c:	00150040 	call	10015004 <usleep>
	printf("[USB INIT]:reset finished!\n");
10005c40:	010400b4 	movhi	r4,4098
10005c44:	21244204 	addi	r4,r4,-28408
10005c48:	00091b00 	call	100091b0 <puts>

	usleep(500000);
10005c4c:	01000234 	movhi	r4,8
10005c50:	21284804 	addi	r4,r4,-24288
10005c54:	00150040 	call	10015004 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
10005c58:	010400b4 	movhi	r4,4098
10005c5c:	21244904 	addi	r4,r4,-28380
10005c60:	00091b00 	call	100091b0 <puts>
	IO_read(HPI_MAILBOX);
10005c64:	01000044 	movi	r4,1
10005c68:	00002c00 	call	100002c0 <IO_read>
	IO_read(HPI_STATUS);
10005c6c:	010000c4 	movi	r4,3
10005c70:	00002c00 	call	100002c0 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10005c74:	01005104 	movi	r4,324
10005c78:	0005bd40 	call	10005bd4 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10005c7c:	01005104 	movi	r4,324
10005c80:	000b883a 	mov	r5,zero
10005c84:	0005b800 	call	10005b80 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
10005c88:	01005204 	movi	r4,328
10005c8c:	0005bd40 	call	10005bd4 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10005c90:	01005204 	movi	r4,328
10005c94:	000b883a 	mov	r5,zero
10005c98:	0005b800 	call	10005b80 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10005c9c:	01302414 	movui	r4,49296
10005ca0:	017fffd4 	movui	r5,65535
10005ca4:	0005b800 	call	10005b80 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10005ca8:	01302c14 	movui	r4,49328
10005cac:	017fffd4 	movui	r5,65535
10005cb0:	0005b800 	call	10005b80 <UsbWrite>
}
10005cb4:	e037883a 	mov	sp,fp
10005cb8:	dfc00117 	ldw	ra,4(sp)
10005cbc:	df000017 	ldw	fp,0(sp)
10005cc0:	dec00204 	addi	sp,sp,8
10005cc4:	f800283a 	ret

10005cc8 <UsbSetAddress>:


void UsbSetAddress()
{
10005cc8:	defffe04 	addi	sp,sp,-8
10005ccc:	dfc00115 	stw	ra,4(sp)
10005cd0:	df000015 	stw	fp,0(sp)
10005cd4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10005cd8:	01000084 	movi	r4,2
10005cdc:	01414004 	movi	r5,1280
10005ce0:	00002480 	call	10000248 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
10005ce4:	0009883a 	mov	r4,zero
10005ce8:	01414304 	movi	r5,1292
10005cec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10005cf0:	0009883a 	mov	r4,zero
10005cf4:	01400204 	movi	r5,8
10005cf8:	00002480 	call	10000248 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
10005cfc:	0009883a 	mov	r4,zero
10005d00:	01403404 	movi	r5,208
10005d04:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10005d08:	0009883a 	mov	r4,zero
10005d0c:	01400044 	movi	r5,1
10005d10:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10005d14:	0009883a 	mov	r4,zero
10005d18:	014004c4 	movi	r5,19
10005d1c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10005d20:	0009883a 	mov	r4,zero
10005d24:	01414504 	movi	r5,1300
10005d28:	00002480 	call	10000248 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10005d2c:	0009883a 	mov	r4,zero
10005d30:	01414004 	movi	r5,1280
10005d34:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);
10005d38:	0009883a 	mov	r4,zero
10005d3c:	01400084 	movi	r5,2
10005d40:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10005d44:	0009883a 	mov	r4,zero
10005d48:	000b883a 	mov	r5,zero
10005d4c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10005d50:	0009883a 	mov	r4,zero
10005d54:	000b883a 	mov	r5,zero
10005d58:	00002480 	call	10000248 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10005d5c:	0009883a 	mov	r4,zero
10005d60:	000b883a 	mov	r5,zero
10005d64:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10005d68:	0009883a 	mov	r4,zero
10005d6c:	000b883a 	mov	r5,zero
10005d70:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10005d74:	0009883a 	mov	r4,zero
10005d78:	01402404 	movi	r5,144
10005d7c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
10005d80:	0009883a 	mov	r4,zero
10005d84:	01401044 	movi	r5,65
10005d88:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10005d8c:	0009883a 	mov	r4,zero
10005d90:	014004c4 	movi	r5,19
10005d94:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10005d98:	0009883a 	mov	r4,zero
10005d9c:	000b883a 	mov	r5,zero
10005da0:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10005da4:	01006c04 	movi	r4,432
10005da8:	01414004 	movi	r5,1280
10005dac:	0005b800 	call	10005b80 <UsbWrite>
}
10005db0:	e037883a 	mov	sp,fp
10005db4:	dfc00117 	ldw	ra,4(sp)
10005db8:	df000017 	ldw	fp,0(sp)
10005dbc:	dec00204 	addi	sp,sp,8
10005dc0:	f800283a 	ret

10005dc4 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
10005dc4:	defffe04 	addi	sp,sp,-8
10005dc8:	dfc00115 	stw	ra,4(sp)
10005dcc:	df000015 	stw	fp,0(sp)
10005dd0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10005dd4:	01000084 	movi	r4,2
10005dd8:	01414004 	movi	r5,1280
10005ddc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10005de0:	0009883a 	mov	r4,zero
10005de4:	01414304 	movi	r5,1292
10005de8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10005dec:	0009883a 	mov	r4,zero
10005df0:	01400204 	movi	r5,8
10005df4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10005df8:	0009883a 	mov	r4,zero
10005dfc:	0140b404 	movi	r5,720
10005e00:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10005e04:	0009883a 	mov	r4,zero
10005e08:	01400044 	movi	r5,1
10005e0c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10005e10:	0009883a 	mov	r4,zero
10005e14:	014004c4 	movi	r5,19
10005e18:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10005e1c:	0009883a 	mov	r4,zero
10005e20:	01414504 	movi	r5,1300
10005e24:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10005e28:	0009883a 	mov	r4,zero
10005e2c:	0141a004 	movi	r5,1664
10005e30:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
10005e34:	0009883a 	mov	r4,zero
10005e38:	01404004 	movi	r5,256
10005e3c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10005e40:	0009883a 	mov	r4,zero
10005e44:	000b883a 	mov	r5,zero
10005e48:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);
10005e4c:	0009883a 	mov	r4,zero
10005e50:	01400204 	movi	r5,8
10005e54:	00002480 	call	10000248 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10005e58:	0009883a 	mov	r4,zero
10005e5c:	01414b04 	movi	r5,1324
10005e60:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//
10005e64:	0009883a 	mov	r4,zero
10005e68:	01400204 	movi	r5,8
10005e6c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//
10005e70:	0009883a 	mov	r4,zero
10005e74:	0140a404 	movi	r5,656
10005e78:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
10005e7c:	0009883a 	mov	r4,zero
10005e80:	01401044 	movi	r5,65
10005e84:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10005e88:	0009883a 	mov	r4,zero
10005e8c:	014004c4 	movi	r5,19
10005e90:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);
10005e94:	0009883a 	mov	r4,zero
10005e98:	01414804 	movi	r5,1312
10005e9c:	00002480 	call	10000248 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10005ea0:	0009883a 	mov	r4,zero
10005ea4:	000b883a 	mov	r5,zero
10005ea8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10005eac:	0009883a 	mov	r4,zero
10005eb0:	000b883a 	mov	r5,zero
10005eb4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
10005eb8:	0009883a 	mov	r4,zero
10005ebc:	01408404 	movi	r5,528
10005ec0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
10005ec4:	0009883a 	mov	r4,zero
10005ec8:	01401044 	movi	r5,65
10005ecc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10005ed0:	0009883a 	mov	r4,zero
10005ed4:	014004c4 	movi	r5,19
10005ed8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10005edc:	0009883a 	mov	r4,zero
10005ee0:	000b883a 	mov	r5,zero
10005ee4:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10005ee8:	01006c04 	movi	r4,432
10005eec:	01414004 	movi	r5,1280
10005ef0:	0005b800 	call	10005b80 <UsbWrite>
}
10005ef4:	e037883a 	mov	sp,fp
10005ef8:	dfc00117 	ldw	ra,4(sp)
10005efc:	df000017 	ldw	fp,0(sp)
10005f00:	dec00204 	addi	sp,sp,8
10005f04:	f800283a 	ret

10005f08 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
10005f08:	defffe04 	addi	sp,sp,-8
10005f0c:	dfc00115 	stw	ra,4(sp)
10005f10:	df000015 	stw	fp,0(sp)
10005f14:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10005f18:	01000084 	movi	r4,2
10005f1c:	01414004 	movi	r5,1280
10005f20:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10005f24:	0009883a 	mov	r4,zero
10005f28:	01414304 	movi	r5,1292
10005f2c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10005f30:	0009883a 	mov	r4,zero
10005f34:	01400204 	movi	r5,8
10005f38:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10005f3c:	0009883a 	mov	r4,zero
10005f40:	0140b404 	movi	r5,720
10005f44:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10005f48:	0009883a 	mov	r4,zero
10005f4c:	01400044 	movi	r5,1
10005f50:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10005f54:	0009883a 	mov	r4,zero
10005f58:	014004c4 	movi	r5,19
10005f5c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10005f60:	0009883a 	mov	r4,zero
10005f64:	01414504 	movi	r5,1300
10005f68:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10005f6c:	0009883a 	mov	r4,zero
10005f70:	0141a004 	movi	r5,1664
10005f74:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
10005f78:	0009883a 	mov	r4,zero
10005f7c:	01404004 	movi	r5,256
10005f80:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10005f84:	0009883a 	mov	r4,zero
10005f88:	000b883a 	mov	r5,zero
10005f8c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10005f90:	0009883a 	mov	r4,zero
10005f94:	01400484 	movi	r5,18
10005f98:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10005f9c:	0009883a 	mov	r4,zero
10005fa0:	01415104 	movi	r5,1348
10005fa4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10005fa8:	0009883a 	mov	r4,zero
10005fac:	01400204 	movi	r5,8
10005fb0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10005fb4:	0009883a 	mov	r4,zero
10005fb8:	0140a404 	movi	r5,656
10005fbc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10005fc0:	0009883a 	mov	r4,zero
10005fc4:	01401044 	movi	r5,65
10005fc8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10005fcc:	0009883a 	mov	r4,zero
10005fd0:	014004c4 	movi	r5,19
10005fd4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10005fd8:	0009883a 	mov	r4,zero
10005fdc:	01414804 	movi	r5,1312
10005fe0:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10005fe4:	0009883a 	mov	r4,zero
10005fe8:	01415304 	movi	r5,1356
10005fec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10005ff0:	0009883a 	mov	r4,zero
10005ff4:	01400204 	movi	r5,8
10005ff8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10005ffc:	0009883a 	mov	r4,zero
10006000:	0140a404 	movi	r5,656
10006004:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
10006008:	0009883a 	mov	r4,zero
1000600c:	01400044 	movi	r5,1
10006010:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10006014:	0009883a 	mov	r4,zero
10006018:	014004c4 	movi	r5,19
1000601c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10006020:	0009883a 	mov	r4,zero
10006024:	01414b04 	movi	r5,1324
10006028:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
1000602c:	0009883a 	mov	r4,zero
10006030:	01415504 	movi	r5,1364
10006034:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
10006038:	0009883a 	mov	r4,zero
1000603c:	01400084 	movi	r5,2
10006040:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10006044:	0009883a 	mov	r4,zero
10006048:	0140a404 	movi	r5,656
1000604c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10006050:	0009883a 	mov	r4,zero
10006054:	01401044 	movi	r5,65
10006058:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
1000605c:	0009883a 	mov	r4,zero
10006060:	014004c4 	movi	r5,19
10006064:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10006068:	0009883a 	mov	r4,zero
1000606c:	01414e04 	movi	r5,1336
10006070:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10006074:	0009883a 	mov	r4,zero
10006078:	000b883a 	mov	r5,zero
1000607c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10006080:	0009883a 	mov	r4,zero
10006084:	000b883a 	mov	r5,zero
10006088:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
1000608c:	0009883a 	mov	r4,zero
10006090:	01408404 	movi	r5,528
10006094:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10006098:	0009883a 	mov	r4,zero
1000609c:	01401044 	movi	r5,65
100060a0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
100060a4:	0009883a 	mov	r4,zero
100060a8:	014004c4 	movi	r5,19
100060ac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
100060b0:	0009883a 	mov	r4,zero
100060b4:	000b883a 	mov	r5,zero
100060b8:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100060bc:	01006c04 	movi	r4,432
100060c0:	01414004 	movi	r5,1280
100060c4:	0005b800 	call	10005b80 <UsbWrite>
}
100060c8:	e037883a 	mov	sp,fp
100060cc:	dfc00117 	ldw	ra,4(sp)
100060d0:	df000017 	ldw	fp,0(sp)
100060d4:	dec00204 	addi	sp,sp,8
100060d8:	f800283a 	ret

100060dc <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
100060dc:	defffe04 	addi	sp,sp,-8
100060e0:	dfc00115 	stw	ra,4(sp)
100060e4:	df000015 	stw	fp,0(sp)
100060e8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100060ec:	01000084 	movi	r4,2
100060f0:	01414004 	movi	r5,1280
100060f4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100060f8:	0009883a 	mov	r4,zero
100060fc:	01414304 	movi	r5,1292
10006100:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10006104:	0009883a 	mov	r4,zero
10006108:	01400204 	movi	r5,8
1000610c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10006110:	0009883a 	mov	r4,zero
10006114:	0140b404 	movi	r5,720
10006118:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000611c:	0009883a 	mov	r4,zero
10006120:	01400044 	movi	r5,1
10006124:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10006128:	0009883a 	mov	r4,zero
1000612c:	014004c4 	movi	r5,19
10006130:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10006134:	0009883a 	mov	r4,zero
10006138:	01414504 	movi	r5,1300
1000613c:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10006140:	0009883a 	mov	r4,zero
10006144:	0141a004 	movi	r5,1664
10006148:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
1000614c:	0009883a 	mov	r4,zero
10006150:	01408004 	movi	r5,512
10006154:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10006158:	0009883a 	mov	r4,zero
1000615c:	000b883a 	mov	r5,zero
10006160:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10006164:	0009883a 	mov	r4,zero
10006168:	01400244 	movi	r5,9
1000616c:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10006170:	0009883a 	mov	r4,zero
10006174:	01415104 	movi	r5,1348
10006178:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
1000617c:	0009883a 	mov	r4,zero
10006180:	01400204 	movi	r5,8
10006184:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10006188:	0009883a 	mov	r4,zero
1000618c:	0140a404 	movi	r5,656
10006190:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10006194:	0009883a 	mov	r4,zero
10006198:	01401044 	movi	r5,65
1000619c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100061a0:	0009883a 	mov	r4,zero
100061a4:	014004c4 	movi	r5,19
100061a8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100061ac:	0009883a 	mov	r4,zero
100061b0:	01414804 	movi	r5,1312
100061b4:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100061b8:	0009883a 	mov	r4,zero
100061bc:	01415304 	movi	r5,1356
100061c0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
100061c4:	0009883a 	mov	r4,zero
100061c8:	01400044 	movi	r5,1
100061cc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100061d0:	0009883a 	mov	r4,zero
100061d4:	0140a404 	movi	r5,656
100061d8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100061dc:	0009883a 	mov	r4,zero
100061e0:	01400044 	movi	r5,1
100061e4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100061e8:	0009883a 	mov	r4,zero
100061ec:	014004c4 	movi	r5,19
100061f0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100061f4:	0009883a 	mov	r4,zero
100061f8:	01414b04 	movi	r5,1324
100061fc:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10006200:	0009883a 	mov	r4,zero
10006204:	000b883a 	mov	r5,zero
10006208:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
1000620c:	0009883a 	mov	r4,zero
10006210:	000b883a 	mov	r5,zero
10006214:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10006218:	0009883a 	mov	r4,zero
1000621c:	01408404 	movi	r5,528
10006220:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10006224:	0009883a 	mov	r4,zero
10006228:	01401044 	movi	r5,65
1000622c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10006230:	0009883a 	mov	r4,zero
10006234:	014004c4 	movi	r5,19
10006238:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
1000623c:	0009883a 	mov	r4,zero
10006240:	000b883a 	mov	r5,zero
10006244:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10006248:	01006c04 	movi	r4,432
1000624c:	01414004 	movi	r5,1280
10006250:	0005b800 	call	10005b80 <UsbWrite>
}
10006254:	e037883a 	mov	sp,fp
10006258:	dfc00117 	ldw	ra,4(sp)
1000625c:	df000017 	ldw	fp,0(sp)
10006260:	dec00204 	addi	sp,sp,8
10006264:	f800283a 	ret

10006268 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
10006268:	defffe04 	addi	sp,sp,-8
1000626c:	dfc00115 	stw	ra,4(sp)
10006270:	df000015 	stw	fp,0(sp)
10006274:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10006278:	01000084 	movi	r4,2
1000627c:	01414004 	movi	r5,1280
10006280:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10006284:	0009883a 	mov	r4,zero
10006288:	01414304 	movi	r5,1292
1000628c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10006290:	0009883a 	mov	r4,zero
10006294:	01400204 	movi	r5,8
10006298:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
1000629c:	0009883a 	mov	r4,zero
100062a0:	0140b404 	movi	r5,720
100062a4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
100062a8:	0009883a 	mov	r4,zero
100062ac:	01400044 	movi	r5,1
100062b0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
100062b4:	0009883a 	mov	r4,zero
100062b8:	014004c4 	movi	r5,19
100062bc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
100062c0:	0009883a 	mov	r4,zero
100062c4:	01414504 	movi	r5,1300
100062c8:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100062cc:	0009883a 	mov	r4,zero
100062d0:	0141a004 	movi	r5,1664
100062d4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
100062d8:	0009883a 	mov	r4,zero
100062dc:	01408004 	movi	r5,512
100062e0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100062e4:	0009883a 	mov	r4,zero
100062e8:	000b883a 	mov	r5,zero
100062ec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
100062f0:	0009883a 	mov	r4,zero
100062f4:	01403fc4 	movi	r5,255
100062f8:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
100062fc:	0009883a 	mov	r4,zero
10006300:	01415704 	movi	r5,1372
10006304:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10006308:	0009883a 	mov	r4,zero
1000630c:	01400204 	movi	r5,8
10006310:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10006314:	0009883a 	mov	r4,zero
10006318:	0140a404 	movi	r5,656
1000631c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10006320:	0009883a 	mov	r4,zero
10006324:	01401044 	movi	r5,65
10006328:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
1000632c:	0009883a 	mov	r4,zero
10006330:	014004c4 	movi	r5,19
10006334:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10006338:	0009883a 	mov	r4,zero
1000633c:	01414804 	movi	r5,1312
10006340:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10006344:	0009883a 	mov	r4,zero
10006348:	01415904 	movi	r5,1380
1000634c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10006350:	0009883a 	mov	r4,zero
10006354:	01400204 	movi	r5,8
10006358:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
1000635c:	0009883a 	mov	r4,zero
10006360:	0140a404 	movi	r5,656
10006364:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10006368:	0009883a 	mov	r4,zero
1000636c:	01400044 	movi	r5,1
10006370:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10006374:	0009883a 	mov	r4,zero
10006378:	014004c4 	movi	r5,19
1000637c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10006380:	0009883a 	mov	r4,zero
10006384:	01414b04 	movi	r5,1324
10006388:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
1000638c:	0009883a 	mov	r4,zero
10006390:	01415b04 	movi	r5,1388
10006394:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10006398:	0009883a 	mov	r4,zero
1000639c:	01400204 	movi	r5,8
100063a0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100063a4:	0009883a 	mov	r4,zero
100063a8:	0140a404 	movi	r5,656
100063ac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100063b0:	0009883a 	mov	r4,zero
100063b4:	01401044 	movi	r5,65
100063b8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100063bc:	0009883a 	mov	r4,zero
100063c0:	014004c4 	movi	r5,19
100063c4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
100063c8:	0009883a 	mov	r4,zero
100063cc:	01414e04 	movi	r5,1336
100063d0:	00002480 	call	10000248 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
100063d4:	0009883a 	mov	r4,zero
100063d8:	01415d04 	movi	r5,1396
100063dc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
100063e0:	0009883a 	mov	r4,zero
100063e4:	01400204 	movi	r5,8
100063e8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
100063ec:	0009883a 	mov	r4,zero
100063f0:	0140a404 	movi	r5,656
100063f4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
100063f8:	0009883a 	mov	r4,zero
100063fc:	01400044 	movi	r5,1
10006400:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10006404:	0009883a 	mov	r4,zero
10006408:	014004c4 	movi	r5,19
1000640c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10006410:	0009883a 	mov	r4,zero
10006414:	01415104 	movi	r5,1348
10006418:	00002480 	call	10000248 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
1000641c:	0009883a 	mov	r4,zero
10006420:	01415f04 	movi	r5,1404
10006424:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10006428:	0009883a 	mov	r4,zero
1000642c:	01400084 	movi	r5,2
10006430:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10006434:	0009883a 	mov	r4,zero
10006438:	0140a404 	movi	r5,656
1000643c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10006440:	0009883a 	mov	r4,zero
10006444:	01401044 	movi	r5,65
10006448:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
1000644c:	0009883a 	mov	r4,zero
10006450:	014004c4 	movi	r5,19
10006454:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10006458:	0009883a 	mov	r4,zero
1000645c:	01415404 	movi	r5,1360
10006460:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10006464:	0009883a 	mov	r4,zero
10006468:	000b883a 	mov	r5,zero
1000646c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10006470:	0009883a 	mov	r4,zero
10006474:	000b883a 	mov	r5,zero
10006478:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
1000647c:	0009883a 	mov	r4,zero
10006480:	01408404 	movi	r5,528
10006484:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10006488:	0009883a 	mov	r4,zero
1000648c:	01401044 	movi	r5,65
10006490:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10006494:	0009883a 	mov	r4,zero
10006498:	014004c4 	movi	r5,19
1000649c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
100064a0:	0009883a 	mov	r4,zero
100064a4:	000b883a 	mov	r5,zero
100064a8:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100064ac:	01006c04 	movi	r4,432
100064b0:	01414004 	movi	r5,1280
100064b4:	0005b800 	call	10005b80 <UsbWrite>
}
100064b8:	e037883a 	mov	sp,fp
100064bc:	dfc00117 	ldw	ra,4(sp)
100064c0:	df000017 	ldw	fp,0(sp)
100064c4:	dec00204 	addi	sp,sp,8
100064c8:	f800283a 	ret

100064cc <UsbSetConfig>:

void UsbSetConfig()
{
100064cc:	defffe04 	addi	sp,sp,-8
100064d0:	dfc00115 	stw	ra,4(sp)
100064d4:	df000015 	stw	fp,0(sp)
100064d8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100064dc:	01000084 	movi	r4,2
100064e0:	01414004 	movi	r5,1280
100064e4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100064e8:	0009883a 	mov	r4,zero
100064ec:	01414304 	movi	r5,1292
100064f0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100064f4:	0009883a 	mov	r4,zero
100064f8:	01400204 	movi	r5,8
100064fc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10006500:	0009883a 	mov	r4,zero
10006504:	0140b404 	movi	r5,720
10006508:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000650c:	0009883a 	mov	r4,zero
10006510:	01400044 	movi	r5,1
10006514:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10006518:	0009883a 	mov	r4,zero
1000651c:	014004c4 	movi	r5,19
10006520:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10006524:	0009883a 	mov	r4,zero
10006528:	01414504 	movi	r5,1300
1000652c:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10006530:	0009883a 	mov	r4,zero
10006534:	01424004 	movi	r5,2304
10006538:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
1000653c:	0009883a 	mov	r4,zero
10006540:	01400044 	movi	r5,1
10006544:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10006548:	0009883a 	mov	r4,zero
1000654c:	000b883a 	mov	r5,zero
10006550:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10006554:	0009883a 	mov	r4,zero
10006558:	000b883a 	mov	r5,zero
1000655c:	00002480 	call	10000248 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10006560:	0009883a 	mov	r4,zero
10006564:	000b883a 	mov	r5,zero
10006568:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
1000656c:	0009883a 	mov	r4,zero
10006570:	000b883a 	mov	r5,zero
10006574:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10006578:	0009883a 	mov	r4,zero
1000657c:	0140a404 	movi	r5,656
10006580:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10006584:	0009883a 	mov	r4,zero
10006588:	01401044 	movi	r5,65
1000658c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10006590:	0009883a 	mov	r4,zero
10006594:	014004c4 	movi	r5,19
10006598:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000659c:	0009883a 	mov	r4,zero
100065a0:	000b883a 	mov	r5,zero
100065a4:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100065a8:	01006c04 	movi	r4,432
100065ac:	01414004 	movi	r5,1280
100065b0:	0005b800 	call	10005b80 <UsbWrite>

}
100065b4:	e037883a 	mov	sp,fp
100065b8:	dfc00117 	ldw	ra,4(sp)
100065bc:	df000017 	ldw	fp,0(sp)
100065c0:	dec00204 	addi	sp,sp,8
100065c4:	f800283a 	ret

100065c8 <UsbClassRequest>:

void UsbClassRequest()
{
100065c8:	defffe04 	addi	sp,sp,-8
100065cc:	dfc00115 	stw	ra,4(sp)
100065d0:	df000015 	stw	fp,0(sp)
100065d4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100065d8:	01000084 	movi	r4,2
100065dc:	01414004 	movi	r5,1280
100065e0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100065e4:	0009883a 	mov	r4,zero
100065e8:	01414304 	movi	r5,1292
100065ec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100065f0:	0009883a 	mov	r4,zero
100065f4:	01400204 	movi	r5,8
100065f8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100065fc:	0009883a 	mov	r4,zero
10006600:	0140b404 	movi	r5,720
10006604:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10006608:	0009883a 	mov	r4,zero
1000660c:	01400044 	movi	r5,1
10006610:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10006614:	0009883a 	mov	r4,zero
10006618:	014004c4 	movi	r5,19
1000661c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10006620:	0009883a 	mov	r4,zero
10006624:	01414504 	movi	r5,1300
10006628:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
1000662c:	0009883a 	mov	r4,zero
10006630:	01428844 	movi	r5,2593
10006634:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10006638:	0009883a 	mov	r4,zero
1000663c:	000b883a 	mov	r5,zero
10006640:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10006644:	0009883a 	mov	r4,zero
10006648:	000b883a 	mov	r5,zero
1000664c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10006650:	0009883a 	mov	r4,zero
10006654:	000b883a 	mov	r5,zero
10006658:	00002480 	call	10000248 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
1000665c:	0009883a 	mov	r4,zero
10006660:	000b883a 	mov	r5,zero
10006664:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10006668:	0009883a 	mov	r4,zero
1000666c:	000b883a 	mov	r5,zero
10006670:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10006674:	0009883a 	mov	r4,zero
10006678:	0140a404 	movi	r5,656
1000667c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10006680:	0009883a 	mov	r4,zero
10006684:	01401044 	movi	r5,65
10006688:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000668c:	0009883a 	mov	r4,zero
10006690:	014004c4 	movi	r5,19
10006694:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10006698:	0009883a 	mov	r4,zero
1000669c:	000b883a 	mov	r5,zero
100066a0:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100066a4:	01006c04 	movi	r4,432
100066a8:	01414004 	movi	r5,1280
100066ac:	0005b800 	call	10005b80 <UsbWrite>
}
100066b0:	e037883a 	mov	sp,fp
100066b4:	dfc00117 	ldw	ra,4(sp)
100066b8:	df000017 	ldw	fp,0(sp)
100066bc:	dec00204 	addi	sp,sp,8
100066c0:	f800283a 	ret

100066c4 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
100066c4:	defffe04 	addi	sp,sp,-8
100066c8:	dfc00115 	stw	ra,4(sp)
100066cc:	df000015 	stw	fp,0(sp)
100066d0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100066d4:	01000084 	movi	r4,2
100066d8:	01414004 	movi	r5,1280
100066dc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100066e0:	0009883a 	mov	r4,zero
100066e4:	01414304 	movi	r5,1292
100066e8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100066ec:	0009883a 	mov	r4,zero
100066f0:	01400204 	movi	r5,8
100066f4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100066f8:	0009883a 	mov	r4,zero
100066fc:	0140b404 	movi	r5,720
10006700:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10006704:	0009883a 	mov	r4,zero
10006708:	01400044 	movi	r5,1
1000670c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10006710:	0009883a 	mov	r4,zero
10006714:	014004c4 	movi	r5,19
10006718:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000671c:	0009883a 	mov	r4,zero
10006720:	01414504 	movi	r5,1300
10006724:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10006728:	0009883a 	mov	r4,zero
1000672c:	0141a044 	movi	r5,1665
10006730:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10006734:	0009883a 	mov	r4,zero
10006738:	01484004 	movi	r5,8448
1000673c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10006740:	0009883a 	mov	r4,zero
10006744:	000b883a 	mov	r5,zero
10006748:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
1000674c:	0009883a 	mov	r4,zero
10006750:	01401ec4 	movi	r5,123
10006754:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10006758:	0009883a 	mov	r4,zero
1000675c:	01415104 	movi	r5,1348
10006760:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10006764:	0009883a 	mov	r4,zero
10006768:	01400204 	movi	r5,8
1000676c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10006770:	0009883a 	mov	r4,zero
10006774:	0140a404 	movi	r5,656
10006778:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000677c:	0009883a 	mov	r4,zero
10006780:	01401044 	movi	r5,65
10006784:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10006788:	0009883a 	mov	r4,zero
1000678c:	014004c4 	movi	r5,19
10006790:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10006794:	0009883a 	mov	r4,zero
10006798:	01414804 	movi	r5,1312
1000679c:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
100067a0:	0009883a 	mov	r4,zero
100067a4:	000b883a 	mov	r5,zero
100067a8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100067ac:	0009883a 	mov	r4,zero
100067b0:	000b883a 	mov	r5,zero
100067b4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
100067b8:	0009883a 	mov	r4,zero
100067bc:	01408404 	movi	r5,528
100067c0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100067c4:	0009883a 	mov	r4,zero
100067c8:	01401044 	movi	r5,65
100067cc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100067d0:	0009883a 	mov	r4,zero
100067d4:	014004c4 	movi	r5,19
100067d8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100067dc:	0009883a 	mov	r4,zero
100067e0:	000b883a 	mov	r5,zero
100067e4:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100067e8:	01006c04 	movi	r4,432
100067ec:	01414004 	movi	r5,1280
100067f0:	0005b800 	call	10005b80 <UsbWrite>

}
100067f4:	e037883a 	mov	sp,fp
100067f8:	dfc00117 	ldw	ra,4(sp)
100067fc:	df000017 	ldw	fp,0(sp)
10006800:	dec00204 	addi	sp,sp,8
10006804:	f800283a 	ret

10006808 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10006808:	defffe04 	addi	sp,sp,-8
1000680c:	dfc00115 	stw	ra,4(sp)
10006810:	df000015 	stw	fp,0(sp)
10006814:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10006818:	01000084 	movi	r4,2
1000681c:	01414004 	movi	r5,1280
10006820:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10006824:	0009883a 	mov	r4,zero
10006828:	01414304 	movi	r5,1292
1000682c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10006830:	0009883a 	mov	r4,zero
10006834:	01400204 	movi	r5,8
10006838:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
1000683c:	0009883a 	mov	r4,zero
10006840:	0140b404 	movi	r5,720
10006844:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10006848:	0009883a 	mov	r4,zero
1000684c:	01400044 	movi	r5,1
10006850:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10006854:	0009883a 	mov	r4,zero
10006858:	014004c4 	movi	r5,19
1000685c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10006860:	0009883a 	mov	r4,zero
10006864:	01414504 	movi	r5,1300
10006868:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
1000686c:	0009883a 	mov	r4,zero
10006870:	0141a044 	movi	r5,1665
10006874:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10006878:	0009883a 	mov	r4,zero
1000687c:	01488004 	movi	r5,8704
10006880:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10006884:	0009883a 	mov	r4,zero
10006888:	000b883a 	mov	r5,zero
1000688c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10006890:	0009883a 	mov	r4,zero
10006894:	01401ec4 	movi	r5,123
10006898:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
1000689c:	0009883a 	mov	r4,zero
100068a0:	01416004 	movi	r5,1408
100068a4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100068a8:	0009883a 	mov	r4,zero
100068ac:	01400204 	movi	r5,8
100068b0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100068b4:	0009883a 	mov	r4,zero
100068b8:	0140a404 	movi	r5,656
100068bc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100068c0:	0009883a 	mov	r4,zero
100068c4:	01401044 	movi	r5,65
100068c8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100068cc:	0009883a 	mov	r4,zero
100068d0:	014004c4 	movi	r5,19
100068d4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100068d8:	0009883a 	mov	r4,zero
100068dc:	01414804 	movi	r5,1312
100068e0:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
100068e4:	0009883a 	mov	r4,zero
100068e8:	01416204 	movi	r5,1416
100068ec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100068f0:	0009883a 	mov	r4,zero
100068f4:	01400204 	movi	r5,8
100068f8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100068fc:	0009883a 	mov	r4,zero
10006900:	0140a404 	movi	r5,656
10006904:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10006908:	0009883a 	mov	r4,zero
1000690c:	01400044 	movi	r5,1
10006910:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10006914:	0009883a 	mov	r4,zero
10006918:	014004c4 	movi	r5,19
1000691c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10006920:	0009883a 	mov	r4,zero
10006924:	01414b04 	movi	r5,1324
10006928:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
1000692c:	0009883a 	mov	r4,zero
10006930:	01416404 	movi	r5,1424
10006934:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10006938:	0009883a 	mov	r4,zero
1000693c:	01400204 	movi	r5,8
10006940:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10006944:	0009883a 	mov	r4,zero
10006948:	0140a404 	movi	r5,656
1000694c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10006950:	0009883a 	mov	r4,zero
10006954:	01401044 	movi	r5,65
10006958:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
1000695c:	0009883a 	mov	r4,zero
10006960:	014004c4 	movi	r5,19
10006964:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10006968:	0009883a 	mov	r4,zero
1000696c:	01414e04 	movi	r5,1336
10006970:	00002480 	call	10000248 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10006974:	0009883a 	mov	r4,zero
10006978:	01416604 	movi	r5,1432
1000697c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10006980:	0009883a 	mov	r4,zero
10006984:	01400204 	movi	r5,8
10006988:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
1000698c:	0009883a 	mov	r4,zero
10006990:	0140a404 	movi	r5,656
10006994:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10006998:	0009883a 	mov	r4,zero
1000699c:	01400044 	movi	r5,1
100069a0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
100069a4:	0009883a 	mov	r4,zero
100069a8:	014004c4 	movi	r5,19
100069ac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
100069b0:	0009883a 	mov	r4,zero
100069b4:	01415104 	movi	r5,1348
100069b8:	00002480 	call	10000248 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
100069bc:	0009883a 	mov	r4,zero
100069c0:	01416804 	movi	r5,1440
100069c4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100069c8:	0009883a 	mov	r4,zero
100069cc:	01400204 	movi	r5,8
100069d0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100069d4:	0009883a 	mov	r4,zero
100069d8:	0140a404 	movi	r5,656
100069dc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
100069e0:	0009883a 	mov	r4,zero
100069e4:	01401044 	movi	r5,65
100069e8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100069ec:	0009883a 	mov	r4,zero
100069f0:	014004c4 	movi	r5,19
100069f4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
100069f8:	0009883a 	mov	r4,zero
100069fc:	01415404 	movi	r5,1360
10006a00:	00002480 	call	10000248 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10006a04:	0009883a 	mov	r4,zero
10006a08:	01416a04 	movi	r5,1448
10006a0c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10006a10:	0009883a 	mov	r4,zero
10006a14:	01400204 	movi	r5,8
10006a18:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10006a1c:	0009883a 	mov	r4,zero
10006a20:	0140a404 	movi	r5,656
10006a24:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10006a28:	0009883a 	mov	r4,zero
10006a2c:	01400044 	movi	r5,1
10006a30:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10006a34:	0009883a 	mov	r4,zero
10006a38:	014004c4 	movi	r5,19
10006a3c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10006a40:	0009883a 	mov	r4,zero
10006a44:	01415704 	movi	r5,1372
10006a48:	00002480 	call	10000248 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10006a4c:	0009883a 	mov	r4,zero
10006a50:	01416c04 	movi	r5,1456
10006a54:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10006a58:	0009883a 	mov	r4,zero
10006a5c:	01400204 	movi	r5,8
10006a60:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10006a64:	0009883a 	mov	r4,zero
10006a68:	0140a404 	movi	r5,656
10006a6c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10006a70:	0009883a 	mov	r4,zero
10006a74:	01401044 	movi	r5,65
10006a78:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10006a7c:	0009883a 	mov	r4,zero
10006a80:	014004c4 	movi	r5,19
10006a84:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10006a88:	0009883a 	mov	r4,zero
10006a8c:	01415a04 	movi	r5,1384
10006a90:	00002480 	call	10000248 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10006a94:	0009883a 	mov	r4,zero
10006a98:	01416e04 	movi	r5,1464
10006a9c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10006aa0:	0009883a 	mov	r4,zero
10006aa4:	014000c4 	movi	r5,3
10006aa8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10006aac:	0009883a 	mov	r4,zero
10006ab0:	0140a404 	movi	r5,656
10006ab4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10006ab8:	0009883a 	mov	r4,zero
10006abc:	01400044 	movi	r5,1
10006ac0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10006ac4:	0009883a 	mov	r4,zero
10006ac8:	014004c4 	movi	r5,19
10006acc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10006ad0:	0009883a 	mov	r4,zero
10006ad4:	01415d04 	movi	r5,1396
10006ad8:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10006adc:	0009883a 	mov	r4,zero
10006ae0:	000b883a 	mov	r5,zero
10006ae4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10006ae8:	0009883a 	mov	r4,zero
10006aec:	000b883a 	mov	r5,zero
10006af0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
10006af4:	0009883a 	mov	r4,zero
10006af8:	01408404 	movi	r5,528
10006afc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10006b00:	0009883a 	mov	r4,zero
10006b04:	01401044 	movi	r5,65
10006b08:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10006b0c:	0009883a 	mov	r4,zero
10006b10:	014004c4 	movi	r5,19
10006b14:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10006b18:	0009883a 	mov	r4,zero
10006b1c:	000b883a 	mov	r5,zero
10006b20:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10006b24:	01006c04 	movi	r4,432
10006b28:	01414004 	movi	r5,1280
10006b2c:	0005b800 	call	10005b80 <UsbWrite>

}
10006b30:	e037883a 	mov	sp,fp
10006b34:	dfc00117 	ldw	ra,4(sp)
10006b38:	df000017 	ldw	fp,0(sp)
10006b3c:	dec00204 	addi	sp,sp,8
10006b40:	f800283a 	ret

10006b44 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10006b44:	defffd04 	addi	sp,sp,-12
10006b48:	dfc00215 	stw	ra,8(sp)
10006b4c:	df000115 	stw	fp,4(sp)
10006b50:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10006b54:	01005104 	movi	r4,324
10006b58:	0005bd40 	call	10005bd4 <UsbRead>
10006b5c:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
10006b60:	01005104 	movi	r4,324
10006b64:	000b883a 	mov	r5,zero
10006b68:	0005b800 	call	10005b80 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10006b6c:	00000d06 	br	10006ba4 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
10006b70:	e0bfff0b 	ldhu	r2,-4(fp)
10006b74:	10000526 	beq	r2,zero,10006b8c <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
10006b78:	e0bfff0b 	ldhu	r2,-4(fp)
10006b7c:	010400b4 	movhi	r4,4098
10006b80:	21245204 	addi	r4,r4,-28344
10006b84:	100b883a 	mov	r5,r2
10006b88:	00090bc0 	call	100090bc <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10006b8c:	01005104 	movi	r4,324
10006b90:	0005bd40 	call	10005bd4 <UsbRead>
10006b94:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10006b98:	01005104 	movi	r4,324
10006b9c:	000b883a 	mov	r5,zero
10006ba0:	0005b800 	call	10005b80 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10006ba4:	e0bfff0b 	ldhu	r2,-4(fp)
10006ba8:	10840018 	cmpnei	r2,r2,4096
10006bac:	103ff01e 	bne	r2,zero,10006b70 <__alt_data_end+0xf8006b70>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
10006bb0:	e0bfff0b 	ldhu	r2,-4(fp)
}
10006bb4:	e037883a 	mov	sp,fp
10006bb8:	dfc00117 	ldw	ra,4(sp)
10006bbc:	df000017 	ldw	fp,0(sp)
10006bc0:	dec00204 	addi	sp,sp,8
10006bc4:	f800283a 	ret

10006bc8 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10006bc8:	defffd04 	addi	sp,sp,-12
10006bcc:	dfc00215 	stw	ra,8(sp)
10006bd0:	df000115 	stw	fp,4(sp)
10006bd4:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10006bd8:	010000c4 	movi	r4,3
10006bdc:	00002c00 	call	100002c0 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10006be0:	01005104 	movi	r4,324
10006be4:	0005bd40 	call	10005bd4 <UsbRead>
10006be8:	10bfffcc 	andi	r2,r2,65535
10006bec:	10840018 	cmpnei	r2,r2,4096
10006bf0:	1000091e 	bne	r2,zero,10006c18 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10006bf4:	01005104 	movi	r4,324
10006bf8:	000b883a 	mov	r5,zero
10006bfc:	0005b800 	call	10005b80 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10006c00:	0001883a 	nop
10006c04:	010000c4 	movi	r4,3
10006c08:	00002c00 	call	100002c0 <IO_read>
10006c0c:	10bfffcc 	andi	r2,r2,65535
10006c10:	1080040c 	andi	r2,r2,16
10006c14:	103ffb26 	beq	r2,zero,10006c04 <__alt_data_end+0xf8006c04>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10006c18:	01000084 	movi	r4,2
10006c1c:	01414204 	movi	r5,1288
10006c20:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10006c24:	0009883a 	mov	r4,zero
10006c28:	00002c00 	call	100002c0 <IO_read>
10006c2c:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
10006c30:	e0bfff0b 	ldhu	r2,-4(fp)
}
10006c34:	e037883a 	mov	sp,fp
10006c38:	dfc00117 	ldw	ra,4(sp)
10006c3c:	df000017 	ldw	fp,0(sp)
10006c40:	dec00204 	addi	sp,sp,8
10006c44:	f800283a 	ret

10006c48 <UsbPrintMem>:


void UsbPrintMem()
{
10006c48:	defffc04 	addi	sp,sp,-16
10006c4c:	dfc00315 	stw	ra,12(sp)
10006c50:	df000215 	stw	fp,8(sp)
10006c54:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10006c58:	01000084 	movi	r4,2
10006c5c:	01414004 	movi	r5,1280
10006c60:	00002480 	call	10000248 <IO_write>
	for (i = 0; i <= 200; i += 2)
10006c64:	e03ffe15 	stw	zero,-8(fp)
10006c68:	00000e06 	br	10006ca4 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
10006c6c:	0009883a 	mov	r4,zero
10006c70:	00002c00 	call	100002c0 <IO_read>
10006c74:	10bfffcc 	andi	r2,r2,65535
10006c78:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10006c7c:	e0bffe17 	ldw	r2,-8(fp)
10006c80:	10814004 	addi	r2,r2,1280
10006c84:	010400b4 	movhi	r4,4098
10006c88:	21245a04 	addi	r4,r4,-28312
10006c8c:	100b883a 	mov	r5,r2
10006c90:	e1bfff17 	ldw	r6,-4(fp)
10006c94:	00090bc0 	call	100090bc <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10006c98:	e0bffe17 	ldw	r2,-8(fp)
10006c9c:	10800084 	addi	r2,r2,2
10006ca0:	e0bffe15 	stw	r2,-8(fp)
10006ca4:	e0bffe17 	ldw	r2,-8(fp)
10006ca8:	10803250 	cmplti	r2,r2,201
10006cac:	103fef1e 	bne	r2,zero,10006c6c <__alt_data_end+0xf8006c6c>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
10006cb0:	e037883a 	mov	sp,fp
10006cb4:	dfc00117 	ldw	ra,4(sp)
10006cb8:	df000017 	ldw	fp,0(sp)
10006cbc:	dec00204 	addi	sp,sp,8
10006cc0:	f800283a 	ret

10006cc4 <udivmodsi4>:
10006cc4:	2900182e 	bgeu	r5,r4,10006d28 <udivmodsi4+0x64>
10006cc8:	28001716 	blt	r5,zero,10006d28 <udivmodsi4+0x64>
10006ccc:	00800804 	movi	r2,32
10006cd0:	00c00044 	movi	r3,1
10006cd4:	00000206 	br	10006ce0 <udivmodsi4+0x1c>
10006cd8:	10001126 	beq	r2,zero,10006d20 <udivmodsi4+0x5c>
10006cdc:	28000516 	blt	r5,zero,10006cf4 <udivmodsi4+0x30>
10006ce0:	294b883a 	add	r5,r5,r5
10006ce4:	10bfffc4 	addi	r2,r2,-1
10006ce8:	18c7883a 	add	r3,r3,r3
10006cec:	293ffa36 	bltu	r5,r4,10006cd8 <__alt_data_end+0xf8006cd8>
10006cf0:	18000b26 	beq	r3,zero,10006d20 <udivmodsi4+0x5c>
10006cf4:	0005883a 	mov	r2,zero
10006cf8:	21400236 	bltu	r4,r5,10006d04 <udivmodsi4+0x40>
10006cfc:	2149c83a 	sub	r4,r4,r5
10006d00:	10c4b03a 	or	r2,r2,r3
10006d04:	1806d07a 	srli	r3,r3,1
10006d08:	280ad07a 	srli	r5,r5,1
10006d0c:	183ffa1e 	bne	r3,zero,10006cf8 <__alt_data_end+0xf8006cf8>
10006d10:	3000011e 	bne	r6,zero,10006d18 <udivmodsi4+0x54>
10006d14:	f800283a 	ret
10006d18:	2005883a 	mov	r2,r4
10006d1c:	f800283a 	ret
10006d20:	0005883a 	mov	r2,zero
10006d24:	003ffa06 	br	10006d10 <__alt_data_end+0xf8006d10>
10006d28:	00c00044 	movi	r3,1
10006d2c:	003ff106 	br	10006cf4 <__alt_data_end+0xf8006cf4>

10006d30 <__divsi3>:
10006d30:	defffe04 	addi	sp,sp,-8
10006d34:	dfc00115 	stw	ra,4(sp)
10006d38:	dc000015 	stw	r16,0(sp)
10006d3c:	20000b16 	blt	r4,zero,10006d6c <__divsi3+0x3c>
10006d40:	0021883a 	mov	r16,zero
10006d44:	28000c16 	blt	r5,zero,10006d78 <__divsi3+0x48>
10006d48:	000d883a 	mov	r6,zero
10006d4c:	0006cc40 	call	10006cc4 <udivmodsi4>
10006d50:	0407c83a 	sub	r3,zero,r16
10006d54:	1884f03a 	xor	r2,r3,r2
10006d58:	1405883a 	add	r2,r2,r16
10006d5c:	dfc00117 	ldw	ra,4(sp)
10006d60:	dc000017 	ldw	r16,0(sp)
10006d64:	dec00204 	addi	sp,sp,8
10006d68:	f800283a 	ret
10006d6c:	0109c83a 	sub	r4,zero,r4
10006d70:	04000044 	movi	r16,1
10006d74:	283ff40e 	bge	r5,zero,10006d48 <__alt_data_end+0xf8006d48>
10006d78:	014bc83a 	sub	r5,zero,r5
10006d7c:	8400005c 	xori	r16,r16,1
10006d80:	003ff106 	br	10006d48 <__alt_data_end+0xf8006d48>

10006d84 <__modsi3>:
10006d84:	defffd04 	addi	sp,sp,-12
10006d88:	dfc00215 	stw	ra,8(sp)
10006d8c:	dc400115 	stw	r17,4(sp)
10006d90:	dc000015 	stw	r16,0(sp)
10006d94:	20000c16 	blt	r4,zero,10006dc8 <__modsi3+0x44>
10006d98:	0023883a 	mov	r17,zero
10006d9c:	0021883a 	mov	r16,zero
10006da0:	28000d16 	blt	r5,zero,10006dd8 <__modsi3+0x54>
10006da4:	01800044 	movi	r6,1
10006da8:	0006cc40 	call	10006cc4 <udivmodsi4>
10006dac:	1404f03a 	xor	r2,r2,r16
10006db0:	8885883a 	add	r2,r17,r2
10006db4:	dfc00217 	ldw	ra,8(sp)
10006db8:	dc400117 	ldw	r17,4(sp)
10006dbc:	dc000017 	ldw	r16,0(sp)
10006dc0:	dec00304 	addi	sp,sp,12
10006dc4:	f800283a 	ret
10006dc8:	0109c83a 	sub	r4,zero,r4
10006dcc:	04400044 	movi	r17,1
10006dd0:	043fffc4 	movi	r16,-1
10006dd4:	283ff30e 	bge	r5,zero,10006da4 <__alt_data_end+0xf8006da4>
10006dd8:	014bc83a 	sub	r5,zero,r5
10006ddc:	003ff106 	br	10006da4 <__alt_data_end+0xf8006da4>

10006de0 <__udivsi3>:
10006de0:	000d883a 	mov	r6,zero
10006de4:	0006cc41 	jmpi	10006cc4 <udivmodsi4>

10006de8 <__umodsi3>:
10006de8:	01800044 	movi	r6,1
10006dec:	0006cc41 	jmpi	10006cc4 <udivmodsi4>

10006df0 <__mulsi3>:
10006df0:	0005883a 	mov	r2,zero
10006df4:	20000726 	beq	r4,zero,10006e14 <__mulsi3+0x24>
10006df8:	20c0004c 	andi	r3,r4,1
10006dfc:	2008d07a 	srli	r4,r4,1
10006e00:	18000126 	beq	r3,zero,10006e08 <__mulsi3+0x18>
10006e04:	1145883a 	add	r2,r2,r5
10006e08:	294b883a 	add	r5,r5,r5
10006e0c:	203ffa1e 	bne	r4,zero,10006df8 <__alt_data_end+0xf8006df8>
10006e10:	f800283a 	ret
10006e14:	f800283a 	ret

10006e18 <__addsf3>:
10006e18:	defffc04 	addi	sp,sp,-16
10006e1c:	2004d7fa 	srli	r2,r4,31
10006e20:	280ed5fa 	srli	r7,r5,23
10006e24:	dc000015 	stw	r16,0(sp)
10006e28:	01802034 	movhi	r6,128
10006e2c:	2020d5fa 	srli	r16,r4,23
10006e30:	31bfffc4 	addi	r6,r6,-1
10006e34:	2810d7fa 	srli	r8,r5,31
10006e38:	3108703a 	and	r4,r6,r4
10006e3c:	dc800215 	stw	r18,8(sp)
10006e40:	314c703a 	and	r6,r6,r5
10006e44:	84003fcc 	andi	r16,r16,255
10006e48:	200690fa 	slli	r3,r4,3
10006e4c:	dfc00315 	stw	ra,12(sp)
10006e50:	39003fcc 	andi	r4,r7,255
10006e54:	dc400115 	stw	r17,4(sp)
10006e58:	14803fcc 	andi	r18,r2,255
10006e5c:	300c90fa 	slli	r6,r6,3
10006e60:	810bc83a 	sub	r5,r16,r4
10006e64:	92004826 	beq	r18,r8,10006f88 <__addsf3+0x170>
10006e68:	01406c0e 	bge	zero,r5,1000701c <__addsf3+0x204>
10006e6c:	20001e1e 	bne	r4,zero,10006ee8 <__addsf3+0xd0>
10006e70:	3000611e 	bne	r6,zero,10006ff8 <__addsf3+0x1e0>
10006e74:	188001cc 	andi	r2,r3,7
10006e78:	10000426 	beq	r2,zero,10006e8c <__addsf3+0x74>
10006e7c:	190003cc 	andi	r4,r3,15
10006e80:	00800104 	movi	r2,4
10006e84:	20800126 	beq	r4,r2,10006e8c <__addsf3+0x74>
10006e88:	18c00104 	addi	r3,r3,4
10006e8c:	1901002c 	andhi	r4,r3,1024
10006e90:	9005883a 	mov	r2,r18
10006e94:	20003426 	beq	r4,zero,10006f68 <__addsf3+0x150>
10006e98:	81400044 	addi	r5,r16,1
10006e9c:	01003fc4 	movi	r4,255
10006ea0:	29006926 	beq	r5,r4,10007048 <__addsf3+0x230>
10006ea4:	180691ba 	slli	r3,r3,6
10006ea8:	1808d27a 	srli	r4,r3,9
10006eac:	29403fcc 	andi	r5,r5,255
10006eb0:	280a95fa 	slli	r5,r5,23
10006eb4:	10803fcc 	andi	r2,r2,255
10006eb8:	00c02034 	movhi	r3,128
10006ebc:	100497fa 	slli	r2,r2,31
10006ec0:	18ffffc4 	addi	r3,r3,-1
10006ec4:	20c6703a 	and	r3,r4,r3
10006ec8:	1946b03a 	or	r3,r3,r5
10006ecc:	1884b03a 	or	r2,r3,r2
10006ed0:	dfc00317 	ldw	ra,12(sp)
10006ed4:	dc800217 	ldw	r18,8(sp)
10006ed8:	dc400117 	ldw	r17,4(sp)
10006edc:	dc000017 	ldw	r16,0(sp)
10006ee0:	dec00404 	addi	sp,sp,16
10006ee4:	f800283a 	ret
10006ee8:	00803fc4 	movi	r2,255
10006eec:	80bfe126 	beq	r16,r2,10006e74 <__alt_data_end+0xf8006e74>
10006ef0:	31810034 	orhi	r6,r6,1024
10006ef4:	008006c4 	movi	r2,27
10006ef8:	11405b0e 	bge	r2,r5,10007068 <__addsf3+0x250>
10006efc:	01400044 	movi	r5,1
10006f00:	1947c83a 	sub	r3,r3,r5
10006f04:	1881002c 	andhi	r2,r3,1024
10006f08:	10001426 	beq	r2,zero,10006f5c <__addsf3+0x144>
10006f0c:	04410034 	movhi	r17,1024
10006f10:	8c7fffc4 	addi	r17,r17,-1
10006f14:	1c62703a 	and	r17,r3,r17
10006f18:	8809883a 	mov	r4,r17
10006f1c:	0008ef40 	call	10008ef4 <__clzsi2>
10006f20:	10bffec4 	addi	r2,r2,-5
10006f24:	88a2983a 	sll	r17,r17,r2
10006f28:	14004a16 	blt	r2,r16,10007054 <__addsf3+0x23c>
10006f2c:	140bc83a 	sub	r5,r2,r16
10006f30:	00c007c4 	movi	r3,31
10006f34:	1947c83a 	sub	r3,r3,r5
10006f38:	88c6983a 	sll	r3,r17,r3
10006f3c:	29400044 	addi	r5,r5,1
10006f40:	8962d83a 	srl	r17,r17,r5
10006f44:	1806c03a 	cmpne	r3,r3,zero
10006f48:	0021883a 	mov	r16,zero
10006f4c:	1c46b03a 	or	r3,r3,r17
10006f50:	003fc806 	br	10006e74 <__alt_data_end+0xf8006e74>
10006f54:	1000e526 	beq	r2,zero,100072ec <__addsf3+0x4d4>
10006f58:	1007883a 	mov	r3,r2
10006f5c:	188001cc 	andi	r2,r3,7
10006f60:	103fc61e 	bne	r2,zero,10006e7c <__alt_data_end+0xf8006e7c>
10006f64:	9005883a 	mov	r2,r18
10006f68:	01003fc4 	movi	r4,255
10006f6c:	1806d0fa 	srli	r3,r3,3
10006f70:	81001a26 	beq	r16,r4,10006fdc <__addsf3+0x1c4>
10006f74:	01002034 	movhi	r4,128
10006f78:	213fffc4 	addi	r4,r4,-1
10006f7c:	800b883a 	mov	r5,r16
10006f80:	1908703a 	and	r4,r3,r4
10006f84:	003fc906 	br	10006eac <__alt_data_end+0xf8006eac>
10006f88:	01403e0e 	bge	zero,r5,10007084 <__addsf3+0x26c>
10006f8c:	20001e26 	beq	r4,zero,10007008 <__addsf3+0x1f0>
10006f90:	01003fc4 	movi	r4,255
10006f94:	813fb726 	beq	r16,r4,10006e74 <__alt_data_end+0xf8006e74>
10006f98:	31810034 	orhi	r6,r6,1024
10006f9c:	010006c4 	movi	r4,27
10006fa0:	2140570e 	bge	r4,r5,10007100 <__addsf3+0x2e8>
10006fa4:	01400044 	movi	r5,1
10006fa8:	1947883a 	add	r3,r3,r5
10006fac:	1901002c 	andhi	r4,r3,1024
10006fb0:	203fea26 	beq	r4,zero,10006f5c <__alt_data_end+0xf8006f5c>
10006fb4:	84000044 	addi	r16,r16,1
10006fb8:	01003fc4 	movi	r4,255
10006fbc:	81007526 	beq	r16,r4,10007194 <__addsf3+0x37c>
10006fc0:	00bf0034 	movhi	r2,64512
10006fc4:	10bfffc4 	addi	r2,r2,-1
10006fc8:	1900004c 	andi	r4,r3,1
10006fcc:	1886703a 	and	r3,r3,r2
10006fd0:	1806d07a 	srli	r3,r3,1
10006fd4:	1906b03a 	or	r3,r3,r4
10006fd8:	003fa606 	br	10006e74 <__alt_data_end+0xf8006e74>
10006fdc:	18001a26 	beq	r3,zero,10007048 <__addsf3+0x230>
10006fe0:	19001034 	orhi	r4,r3,64
10006fe4:	00c02034 	movhi	r3,128
10006fe8:	18ffffc4 	addi	r3,r3,-1
10006fec:	017fffc4 	movi	r5,-1
10006ff0:	20c8703a 	and	r4,r4,r3
10006ff4:	003fad06 	br	10006eac <__alt_data_end+0xf8006eac>
10006ff8:	297fffc4 	addi	r5,r5,-1
10006ffc:	28002c1e 	bne	r5,zero,100070b0 <__addsf3+0x298>
10007000:	1987c83a 	sub	r3,r3,r6
10007004:	003fbf06 	br	10006f04 <__alt_data_end+0xf8006f04>
10007008:	303f9a26 	beq	r6,zero,10006e74 <__alt_data_end+0xf8006e74>
1000700c:	297fffc4 	addi	r5,r5,-1
10007010:	28004b1e 	bne	r5,zero,10007140 <__addsf3+0x328>
10007014:	1987883a 	add	r3,r3,r6
10007018:	003fe406 	br	10006fac <__alt_data_end+0xf8006fac>
1000701c:	2800271e 	bne	r5,zero,100070bc <__addsf3+0x2a4>
10007020:	80800044 	addi	r2,r16,1
10007024:	10803fcc 	andi	r2,r2,255
10007028:	01000044 	movi	r4,1
1000702c:	2080520e 	bge	r4,r2,10007178 <__addsf3+0x360>
10007030:	19a3c83a 	sub	r17,r3,r6
10007034:	8881002c 	andhi	r2,r17,1024
10007038:	10002c26 	beq	r2,zero,100070ec <__addsf3+0x2d4>
1000703c:	30e3c83a 	sub	r17,r6,r3
10007040:	4025883a 	mov	r18,r8
10007044:	003fb406 	br	10006f18 <__alt_data_end+0xf8006f18>
10007048:	017fffc4 	movi	r5,-1
1000704c:	0009883a 	mov	r4,zero
10007050:	003f9606 	br	10006eac <__alt_data_end+0xf8006eac>
10007054:	00ff0034 	movhi	r3,64512
10007058:	18ffffc4 	addi	r3,r3,-1
1000705c:	80a1c83a 	sub	r16,r16,r2
10007060:	88c6703a 	and	r3,r17,r3
10007064:	003f8306 	br	10006e74 <__alt_data_end+0xf8006e74>
10007068:	00800804 	movi	r2,32
1000706c:	1145c83a 	sub	r2,r2,r5
10007070:	3084983a 	sll	r2,r6,r2
10007074:	314cd83a 	srl	r6,r6,r5
10007078:	100ac03a 	cmpne	r5,r2,zero
1000707c:	298ab03a 	or	r5,r5,r6
10007080:	003f9f06 	br	10006f00 <__alt_data_end+0xf8006f00>
10007084:	2800451e 	bne	r5,zero,1000719c <__addsf3+0x384>
10007088:	81000044 	addi	r4,r16,1
1000708c:	21c03fcc 	andi	r7,r4,255
10007090:	01400044 	movi	r5,1
10007094:	29c02d0e 	bge	r5,r7,1000714c <__addsf3+0x334>
10007098:	01403fc4 	movi	r5,255
1000709c:	21403c26 	beq	r4,r5,10007190 <__addsf3+0x378>
100070a0:	30c7883a 	add	r3,r6,r3
100070a4:	1806d07a 	srli	r3,r3,1
100070a8:	2021883a 	mov	r16,r4
100070ac:	003f7106 	br	10006e74 <__alt_data_end+0xf8006e74>
100070b0:	00803fc4 	movi	r2,255
100070b4:	80bf8f1e 	bne	r16,r2,10006ef4 <__alt_data_end+0xf8006ef4>
100070b8:	003f6e06 	br	10006e74 <__alt_data_end+0xf8006e74>
100070bc:	80001726 	beq	r16,zero,1000711c <__addsf3+0x304>
100070c0:	00803fc4 	movi	r2,255
100070c4:	20801a26 	beq	r4,r2,10007130 <__addsf3+0x318>
100070c8:	014bc83a 	sub	r5,zero,r5
100070cc:	18c10034 	orhi	r3,r3,1024
100070d0:	008006c4 	movi	r2,27
100070d4:	1140430e 	bge	r2,r5,100071e4 <__addsf3+0x3cc>
100070d8:	00c00044 	movi	r3,1
100070dc:	30c7c83a 	sub	r3,r6,r3
100070e0:	2021883a 	mov	r16,r4
100070e4:	4025883a 	mov	r18,r8
100070e8:	003f8606 	br	10006f04 <__alt_data_end+0xf8006f04>
100070ec:	883f8a1e 	bne	r17,zero,10006f18 <__alt_data_end+0xf8006f18>
100070f0:	0007883a 	mov	r3,zero
100070f4:	0005883a 	mov	r2,zero
100070f8:	0021883a 	mov	r16,zero
100070fc:	003f9a06 	br	10006f68 <__alt_data_end+0xf8006f68>
10007100:	01000804 	movi	r4,32
10007104:	2149c83a 	sub	r4,r4,r5
10007108:	3108983a 	sll	r4,r6,r4
1000710c:	314cd83a 	srl	r6,r6,r5
10007110:	200ac03a 	cmpne	r5,r4,zero
10007114:	298ab03a 	or	r5,r5,r6
10007118:	003fa306 	br	10006fa8 <__alt_data_end+0xf8006fa8>
1000711c:	18000426 	beq	r3,zero,10007130 <__addsf3+0x318>
10007120:	014a303a 	nor	r5,zero,r5
10007124:	283fed26 	beq	r5,zero,100070dc <__alt_data_end+0xf80070dc>
10007128:	00803fc4 	movi	r2,255
1000712c:	20bfe81e 	bne	r4,r2,100070d0 <__alt_data_end+0xf80070d0>
10007130:	3007883a 	mov	r3,r6
10007134:	2021883a 	mov	r16,r4
10007138:	4025883a 	mov	r18,r8
1000713c:	003f4d06 	br	10006e74 <__alt_data_end+0xf8006e74>
10007140:	01003fc4 	movi	r4,255
10007144:	813f951e 	bne	r16,r4,10006f9c <__alt_data_end+0xf8006f9c>
10007148:	003f4a06 	br	10006e74 <__alt_data_end+0xf8006e74>
1000714c:	8000471e 	bne	r16,zero,1000726c <__addsf3+0x454>
10007150:	18006126 	beq	r3,zero,100072d8 <__addsf3+0x4c0>
10007154:	303f4726 	beq	r6,zero,10006e74 <__alt_data_end+0xf8006e74>
10007158:	1987883a 	add	r3,r3,r6
1000715c:	1881002c 	andhi	r2,r3,1024
10007160:	103f7e26 	beq	r2,zero,10006f5c <__alt_data_end+0xf8006f5c>
10007164:	00bf0034 	movhi	r2,64512
10007168:	10bfffc4 	addi	r2,r2,-1
1000716c:	2821883a 	mov	r16,r5
10007170:	1886703a 	and	r3,r3,r2
10007174:	003f3f06 	br	10006e74 <__alt_data_end+0xf8006e74>
10007178:	8000141e 	bne	r16,zero,100071cc <__addsf3+0x3b4>
1000717c:	1800311e 	bne	r3,zero,10007244 <__addsf3+0x42c>
10007180:	30004626 	beq	r6,zero,1000729c <__addsf3+0x484>
10007184:	3007883a 	mov	r3,r6
10007188:	4025883a 	mov	r18,r8
1000718c:	003f3906 	br	10006e74 <__alt_data_end+0xf8006e74>
10007190:	2021883a 	mov	r16,r4
10007194:	0007883a 	mov	r3,zero
10007198:	003f7306 	br	10006f68 <__alt_data_end+0xf8006f68>
1000719c:	8000181e 	bne	r16,zero,10007200 <__addsf3+0x3e8>
100071a0:	18002f26 	beq	r3,zero,10007260 <__addsf3+0x448>
100071a4:	014a303a 	nor	r5,zero,r5
100071a8:	28000526 	beq	r5,zero,100071c0 <__addsf3+0x3a8>
100071ac:	01c03fc4 	movi	r7,255
100071b0:	21c02b26 	beq	r4,r7,10007260 <__addsf3+0x448>
100071b4:	01c006c4 	movi	r7,27
100071b8:	3940400e 	bge	r7,r5,100072bc <__addsf3+0x4a4>
100071bc:	00c00044 	movi	r3,1
100071c0:	1987883a 	add	r3,r3,r6
100071c4:	2021883a 	mov	r16,r4
100071c8:	003f7806 	br	10006fac <__alt_data_end+0xf8006fac>
100071cc:	1800111e 	bne	r3,zero,10007214 <__addsf3+0x3fc>
100071d0:	30003526 	beq	r6,zero,100072a8 <__addsf3+0x490>
100071d4:	3007883a 	mov	r3,r6
100071d8:	4025883a 	mov	r18,r8
100071dc:	04003fc4 	movi	r16,255
100071e0:	003f2406 	br	10006e74 <__alt_data_end+0xf8006e74>
100071e4:	00800804 	movi	r2,32
100071e8:	1145c83a 	sub	r2,r2,r5
100071ec:	1884983a 	sll	r2,r3,r2
100071f0:	194ad83a 	srl	r5,r3,r5
100071f4:	1006c03a 	cmpne	r3,r2,zero
100071f8:	1946b03a 	or	r3,r3,r5
100071fc:	003fb706 	br	100070dc <__alt_data_end+0xf80070dc>
10007200:	01c03fc4 	movi	r7,255
10007204:	21c01626 	beq	r4,r7,10007260 <__addsf3+0x448>
10007208:	014bc83a 	sub	r5,zero,r5
1000720c:	18c10034 	orhi	r3,r3,1024
10007210:	003fe806 	br	100071b4 <__alt_data_end+0xf80071b4>
10007214:	30001f26 	beq	r6,zero,10007294 <__addsf3+0x47c>
10007218:	1806d0fa 	srli	r3,r3,3
1000721c:	1880102c 	andhi	r2,r3,64
10007220:	10000526 	beq	r2,zero,10007238 <__addsf3+0x420>
10007224:	300cd0fa 	srli	r6,r6,3
10007228:	3080102c 	andhi	r2,r6,64
1000722c:	1000021e 	bne	r2,zero,10007238 <__addsf3+0x420>
10007230:	3007883a 	mov	r3,r6
10007234:	4025883a 	mov	r18,r8
10007238:	180690fa 	slli	r3,r3,3
1000723c:	04003fc4 	movi	r16,255
10007240:	003f0c06 	br	10006e74 <__alt_data_end+0xf8006e74>
10007244:	303f0b26 	beq	r6,zero,10006e74 <__alt_data_end+0xf8006e74>
10007248:	1985c83a 	sub	r2,r3,r6
1000724c:	1101002c 	andhi	r4,r2,1024
10007250:	203f4026 	beq	r4,zero,10006f54 <__alt_data_end+0xf8006f54>
10007254:	30c7c83a 	sub	r3,r6,r3
10007258:	4025883a 	mov	r18,r8
1000725c:	003f0506 	br	10006e74 <__alt_data_end+0xf8006e74>
10007260:	3007883a 	mov	r3,r6
10007264:	2021883a 	mov	r16,r4
10007268:	003f0206 	br	10006e74 <__alt_data_end+0xf8006e74>
1000726c:	18001c26 	beq	r3,zero,100072e0 <__addsf3+0x4c8>
10007270:	30000826 	beq	r6,zero,10007294 <__addsf3+0x47c>
10007274:	1806d0fa 	srli	r3,r3,3
10007278:	1880102c 	andhi	r2,r3,64
1000727c:	103fee26 	beq	r2,zero,10007238 <__alt_data_end+0xf8007238>
10007280:	300cd0fa 	srli	r6,r6,3
10007284:	3080102c 	andhi	r2,r6,64
10007288:	103feb1e 	bne	r2,zero,10007238 <__alt_data_end+0xf8007238>
1000728c:	3007883a 	mov	r3,r6
10007290:	003fe906 	br	10007238 <__alt_data_end+0xf8007238>
10007294:	04003fc4 	movi	r16,255
10007298:	003ef606 	br	10006e74 <__alt_data_end+0xf8006e74>
1000729c:	8007883a 	mov	r3,r16
100072a0:	0005883a 	mov	r2,zero
100072a4:	003f3006 	br	10006f68 <__alt_data_end+0xf8006f68>
100072a8:	00c10034 	movhi	r3,1024
100072ac:	0005883a 	mov	r2,zero
100072b0:	18fffe04 	addi	r3,r3,-8
100072b4:	04003fc4 	movi	r16,255
100072b8:	003f2b06 	br	10006f68 <__alt_data_end+0xf8006f68>
100072bc:	01c00804 	movi	r7,32
100072c0:	394fc83a 	sub	r7,r7,r5
100072c4:	19ce983a 	sll	r7,r3,r7
100072c8:	194ad83a 	srl	r5,r3,r5
100072cc:	3806c03a 	cmpne	r3,r7,zero
100072d0:	1946b03a 	or	r3,r3,r5
100072d4:	003fba06 	br	100071c0 <__alt_data_end+0xf80071c0>
100072d8:	3007883a 	mov	r3,r6
100072dc:	003ee506 	br	10006e74 <__alt_data_end+0xf8006e74>
100072e0:	3007883a 	mov	r3,r6
100072e4:	04003fc4 	movi	r16,255
100072e8:	003ee206 	br	10006e74 <__alt_data_end+0xf8006e74>
100072ec:	0007883a 	mov	r3,zero
100072f0:	0005883a 	mov	r2,zero
100072f4:	003f1c06 	br	10006f68 <__alt_data_end+0xf8006f68>

100072f8 <__gesf2>:
100072f8:	2004d5fa 	srli	r2,r4,23
100072fc:	2806d5fa 	srli	r3,r5,23
10007300:	01802034 	movhi	r6,128
10007304:	31bfffc4 	addi	r6,r6,-1
10007308:	10803fcc 	andi	r2,r2,255
1000730c:	01c03fc4 	movi	r7,255
10007310:	3110703a 	and	r8,r6,r4
10007314:	18c03fcc 	andi	r3,r3,255
10007318:	314c703a 	and	r6,r6,r5
1000731c:	2008d7fa 	srli	r4,r4,31
10007320:	280ad7fa 	srli	r5,r5,31
10007324:	11c00926 	beq	r2,r7,1000734c <__gesf2+0x54>
10007328:	19c01226 	beq	r3,r7,10007374 <__gesf2+0x7c>
1000732c:	1000091e 	bne	r2,zero,10007354 <__gesf2+0x5c>
10007330:	4013003a 	cmpeq	r9,r8,zero
10007334:	480f883a 	mov	r7,r9
10007338:	1800091e 	bne	r3,zero,10007360 <__gesf2+0x68>
1000733c:	3000081e 	bne	r6,zero,10007360 <__gesf2+0x68>
10007340:	48001026 	beq	r9,zero,10007384 <__gesf2+0x8c>
10007344:	0005883a 	mov	r2,zero
10007348:	f800283a 	ret
1000734c:	4000161e 	bne	r8,zero,100073a8 <__gesf2+0xb0>
10007350:	18800826 	beq	r3,r2,10007374 <__gesf2+0x7c>
10007354:	1800091e 	bne	r3,zero,1000737c <__gesf2+0x84>
10007358:	000f883a 	mov	r7,zero
1000735c:	30000926 	beq	r6,zero,10007384 <__gesf2+0x8c>
10007360:	29403fcc 	andi	r5,r5,255
10007364:	38000626 	beq	r7,zero,10007380 <__gesf2+0x88>
10007368:	2800071e 	bne	r5,zero,10007388 <__gesf2+0x90>
1000736c:	00bfffc4 	movi	r2,-1
10007370:	f800283a 	ret
10007374:	30000c1e 	bne	r6,zero,100073a8 <__gesf2+0xb0>
10007378:	103fed26 	beq	r2,zero,10007330 <__alt_data_end+0xf8007330>
1000737c:	29403fcc 	andi	r5,r5,255
10007380:	21400326 	beq	r4,r5,10007390 <__gesf2+0x98>
10007384:	203ff91e 	bne	r4,zero,1000736c <__alt_data_end+0xf800736c>
10007388:	00800044 	movi	r2,1
1000738c:	f800283a 	ret
10007390:	18bffc16 	blt	r3,r2,10007384 <__alt_data_end+0xf8007384>
10007394:	10c00216 	blt	r2,r3,100073a0 <__gesf2+0xa8>
10007398:	323ffa36 	bltu	r6,r8,10007384 <__alt_data_end+0xf8007384>
1000739c:	41bfe92e 	bgeu	r8,r6,10007344 <__alt_data_end+0xf8007344>
100073a0:	203ff226 	beq	r4,zero,1000736c <__alt_data_end+0xf800736c>
100073a4:	003ff806 	br	10007388 <__alt_data_end+0xf8007388>
100073a8:	00bfff84 	movi	r2,-2
100073ac:	f800283a 	ret

100073b0 <__lesf2>:
100073b0:	2004d5fa 	srli	r2,r4,23
100073b4:	280cd5fa 	srli	r6,r5,23
100073b8:	00c02034 	movhi	r3,128
100073bc:	18ffffc4 	addi	r3,r3,-1
100073c0:	10803fcc 	andi	r2,r2,255
100073c4:	01c03fc4 	movi	r7,255
100073c8:	1910703a 	and	r8,r3,r4
100073cc:	31803fcc 	andi	r6,r6,255
100073d0:	1946703a 	and	r3,r3,r5
100073d4:	2008d7fa 	srli	r4,r4,31
100073d8:	280ad7fa 	srli	r5,r5,31
100073dc:	11c00a26 	beq	r2,r7,10007408 <__lesf2+0x58>
100073e0:	31c01526 	beq	r6,r7,10007438 <__lesf2+0x88>
100073e4:	10000a1e 	bne	r2,zero,10007410 <__lesf2+0x60>
100073e8:	4013003a 	cmpeq	r9,r8,zero
100073ec:	480f883a 	mov	r7,r9
100073f0:	30000d26 	beq	r6,zero,10007428 <__lesf2+0x78>
100073f4:	29403fcc 	andi	r5,r5,255
100073f8:	38001426 	beq	r7,zero,1000744c <__lesf2+0x9c>
100073fc:	2800081e 	bne	r5,zero,10007420 <__lesf2+0x70>
10007400:	00bfffc4 	movi	r2,-1
10007404:	f800283a 	ret
10007408:	40000c1e 	bne	r8,zero,1000743c <__lesf2+0x8c>
1000740c:	30800a26 	beq	r6,r2,10007438 <__lesf2+0x88>
10007410:	30000d1e 	bne	r6,zero,10007448 <__lesf2+0x98>
10007414:	000f883a 	mov	r7,zero
10007418:	183ff61e 	bne	r3,zero,100073f4 <__alt_data_end+0xf80073f4>
1000741c:	203ff81e 	bne	r4,zero,10007400 <__alt_data_end+0xf8007400>
10007420:	00800044 	movi	r2,1
10007424:	f800283a 	ret
10007428:	183ff21e 	bne	r3,zero,100073f4 <__alt_data_end+0xf80073f4>
1000742c:	483ffb26 	beq	r9,zero,1000741c <__alt_data_end+0xf800741c>
10007430:	0005883a 	mov	r2,zero
10007434:	f800283a 	ret
10007438:	18000226 	beq	r3,zero,10007444 <__lesf2+0x94>
1000743c:	00800084 	movi	r2,2
10007440:	f800283a 	ret
10007444:	103fe826 	beq	r2,zero,100073e8 <__alt_data_end+0xf80073e8>
10007448:	29403fcc 	andi	r5,r5,255
1000744c:	217ff31e 	bne	r4,r5,1000741c <__alt_data_end+0xf800741c>
10007450:	30bff216 	blt	r6,r2,1000741c <__alt_data_end+0xf800741c>
10007454:	11800216 	blt	r2,r6,10007460 <__lesf2+0xb0>
10007458:	1a3ff036 	bltu	r3,r8,1000741c <__alt_data_end+0xf800741c>
1000745c:	40fff42e 	bgeu	r8,r3,10007430 <__alt_data_end+0xf8007430>
10007460:	203fe726 	beq	r4,zero,10007400 <__alt_data_end+0xf8007400>
10007464:	003fee06 	br	10007420 <__alt_data_end+0xf8007420>

10007468 <__subsf3>:
10007468:	defffc04 	addi	sp,sp,-16
1000746c:	280ed5fa 	srli	r7,r5,23
10007470:	02002034 	movhi	r8,128
10007474:	280d883a 	mov	r6,r5
10007478:	423fffc4 	addi	r8,r8,-1
1000747c:	200ad5fa 	srli	r5,r4,23
10007480:	dc400115 	stw	r17,4(sp)
10007484:	2022d7fa 	srli	r17,r4,31
10007488:	4108703a 	and	r4,r8,r4
1000748c:	dc000015 	stw	r16,0(sp)
10007490:	4190703a 	and	r8,r8,r6
10007494:	200690fa 	slli	r3,r4,3
10007498:	dfc00315 	stw	ra,12(sp)
1000749c:	dc800215 	stw	r18,8(sp)
100074a0:	39c03fcc 	andi	r7,r7,255
100074a4:	01003fc4 	movi	r4,255
100074a8:	8805883a 	mov	r2,r17
100074ac:	2c003fcc 	andi	r16,r5,255
100074b0:	8c403fcc 	andi	r17,r17,255
100074b4:	300cd7fa 	srli	r6,r6,31
100074b8:	401090fa 	slli	r8,r8,3
100074bc:	39006126 	beq	r7,r4,10007644 <__subsf3+0x1dc>
100074c0:	3180005c 	xori	r6,r6,1
100074c4:	89804926 	beq	r17,r6,100075ec <__subsf3+0x184>
100074c8:	81c5c83a 	sub	r2,r16,r7
100074cc:	0080710e 	bge	zero,r2,10007694 <__subsf3+0x22c>
100074d0:	38001e1e 	bne	r7,zero,1000754c <__subsf3+0xe4>
100074d4:	4000651e 	bne	r8,zero,1000766c <__subsf3+0x204>
100074d8:	188001cc 	andi	r2,r3,7
100074dc:	10000426 	beq	r2,zero,100074f0 <__subsf3+0x88>
100074e0:	190003cc 	andi	r4,r3,15
100074e4:	00800104 	movi	r2,4
100074e8:	20800126 	beq	r4,r2,100074f0 <__subsf3+0x88>
100074ec:	18c00104 	addi	r3,r3,4
100074f0:	1901002c 	andhi	r4,r3,1024
100074f4:	8880004c 	andi	r2,r17,1
100074f8:	20003426 	beq	r4,zero,100075cc <__subsf3+0x164>
100074fc:	81400044 	addi	r5,r16,1
10007500:	01003fc4 	movi	r4,255
10007504:	29006e26 	beq	r5,r4,100076c0 <__subsf3+0x258>
10007508:	180691ba 	slli	r3,r3,6
1000750c:	1808d27a 	srli	r4,r3,9
10007510:	29403fcc 	andi	r5,r5,255
10007514:	280a95fa 	slli	r5,r5,23
10007518:	10803fcc 	andi	r2,r2,255
1000751c:	00c02034 	movhi	r3,128
10007520:	100497fa 	slli	r2,r2,31
10007524:	18ffffc4 	addi	r3,r3,-1
10007528:	20c6703a 	and	r3,r4,r3
1000752c:	1946b03a 	or	r3,r3,r5
10007530:	1884b03a 	or	r2,r3,r2
10007534:	dfc00317 	ldw	ra,12(sp)
10007538:	dc800217 	ldw	r18,8(sp)
1000753c:	dc400117 	ldw	r17,4(sp)
10007540:	dc000017 	ldw	r16,0(sp)
10007544:	dec00404 	addi	sp,sp,16
10007548:	f800283a 	ret
1000754c:	01003fc4 	movi	r4,255
10007550:	813fe126 	beq	r16,r4,100074d8 <__alt_data_end+0xf80074d8>
10007554:	42010034 	orhi	r8,r8,1024
10007558:	010006c4 	movi	r4,27
1000755c:	2080600e 	bge	r4,r2,100076e0 <__subsf3+0x278>
10007560:	02000044 	movi	r8,1
10007564:	1a07c83a 	sub	r3,r3,r8
10007568:	1881002c 	andhi	r2,r3,1024
1000756c:	10001426 	beq	r2,zero,100075c0 <__subsf3+0x158>
10007570:	04810034 	movhi	r18,1024
10007574:	94bfffc4 	addi	r18,r18,-1
10007578:	1ca4703a 	and	r18,r3,r18
1000757c:	9009883a 	mov	r4,r18
10007580:	0008ef40 	call	10008ef4 <__clzsi2>
10007584:	10bffec4 	addi	r2,r2,-5
10007588:	90a4983a 	sll	r18,r18,r2
1000758c:	14004f16 	blt	r2,r16,100076cc <__subsf3+0x264>
10007590:	140bc83a 	sub	r5,r2,r16
10007594:	00c007c4 	movi	r3,31
10007598:	1947c83a 	sub	r3,r3,r5
1000759c:	90c6983a 	sll	r3,r18,r3
100075a0:	29400044 	addi	r5,r5,1
100075a4:	9164d83a 	srl	r18,r18,r5
100075a8:	1806c03a 	cmpne	r3,r3,zero
100075ac:	0021883a 	mov	r16,zero
100075b0:	1c86b03a 	or	r3,r3,r18
100075b4:	003fc806 	br	100074d8 <__alt_data_end+0xf80074d8>
100075b8:	1000e726 	beq	r2,zero,10007958 <__subsf3+0x4f0>
100075bc:	1007883a 	mov	r3,r2
100075c0:	188001cc 	andi	r2,r3,7
100075c4:	103fc61e 	bne	r2,zero,100074e0 <__alt_data_end+0xf80074e0>
100075c8:	8880004c 	andi	r2,r17,1
100075cc:	01003fc4 	movi	r4,255
100075d0:	1806d0fa 	srli	r3,r3,3
100075d4:	81001e26 	beq	r16,r4,10007650 <__subsf3+0x1e8>
100075d8:	01002034 	movhi	r4,128
100075dc:	213fffc4 	addi	r4,r4,-1
100075e0:	800b883a 	mov	r5,r16
100075e4:	1908703a 	and	r4,r3,r4
100075e8:	003fc906 	br	10007510 <__alt_data_end+0xf8007510>
100075ec:	81c9c83a 	sub	r4,r16,r7
100075f0:	0100420e 	bge	zero,r4,100076fc <__subsf3+0x294>
100075f4:	38002226 	beq	r7,zero,10007680 <__subsf3+0x218>
100075f8:	01403fc4 	movi	r5,255
100075fc:	817fb626 	beq	r16,r5,100074d8 <__alt_data_end+0xf80074d8>
10007600:	42010034 	orhi	r8,r8,1024
10007604:	014006c4 	movi	r5,27
10007608:	2900580e 	bge	r5,r4,1000776c <__subsf3+0x304>
1000760c:	01000044 	movi	r4,1
10007610:	1907883a 	add	r3,r3,r4
10007614:	1901002c 	andhi	r4,r3,1024
10007618:	203fe926 	beq	r4,zero,100075c0 <__alt_data_end+0xf80075c0>
1000761c:	84000044 	addi	r16,r16,1
10007620:	01003fc4 	movi	r4,255
10007624:	81007626 	beq	r16,r4,10007800 <__subsf3+0x398>
10007628:	00bf0034 	movhi	r2,64512
1000762c:	10bfffc4 	addi	r2,r2,-1
10007630:	1900004c 	andi	r4,r3,1
10007634:	1886703a 	and	r3,r3,r2
10007638:	1806d07a 	srli	r3,r3,1
1000763c:	1906b03a 	or	r3,r3,r4
10007640:	003fa506 	br	100074d8 <__alt_data_end+0xf80074d8>
10007644:	403f9e26 	beq	r8,zero,100074c0 <__alt_data_end+0xf80074c0>
10007648:	31803fcc 	andi	r6,r6,255
1000764c:	003f9d06 	br	100074c4 <__alt_data_end+0xf80074c4>
10007650:	18001b26 	beq	r3,zero,100076c0 <__subsf3+0x258>
10007654:	19001034 	orhi	r4,r3,64
10007658:	00c02034 	movhi	r3,128
1000765c:	18ffffc4 	addi	r3,r3,-1
10007660:	017fffc4 	movi	r5,-1
10007664:	20c8703a 	and	r4,r4,r3
10007668:	003fa906 	br	10007510 <__alt_data_end+0xf8007510>
1000766c:	10bfffc4 	addi	r2,r2,-1
10007670:	103fbc26 	beq	r2,zero,10007564 <__alt_data_end+0xf8007564>
10007674:	01003fc4 	movi	r4,255
10007678:	813fb71e 	bne	r16,r4,10007558 <__alt_data_end+0xf8007558>
1000767c:	003f9606 	br	100074d8 <__alt_data_end+0xf80074d8>
10007680:	403f9526 	beq	r8,zero,100074d8 <__alt_data_end+0xf80074d8>
10007684:	213fffc4 	addi	r4,r4,-1
10007688:	2000481e 	bne	r4,zero,100077ac <__subsf3+0x344>
1000768c:	1a07883a 	add	r3,r3,r8
10007690:	003fe006 	br	10007614 <__alt_data_end+0xf8007614>
10007694:	1000241e 	bne	r2,zero,10007728 <__subsf3+0x2c0>
10007698:	80800044 	addi	r2,r16,1
1000769c:	10803fcc 	andi	r2,r2,255
100076a0:	01000044 	movi	r4,1
100076a4:	20804f0e 	bge	r4,r2,100077e4 <__subsf3+0x37c>
100076a8:	1a25c83a 	sub	r18,r3,r8
100076ac:	9081002c 	andhi	r2,r18,1024
100076b0:	10002926 	beq	r2,zero,10007758 <__subsf3+0x2f0>
100076b4:	40e5c83a 	sub	r18,r8,r3
100076b8:	3023883a 	mov	r17,r6
100076bc:	003faf06 	br	1000757c <__alt_data_end+0xf800757c>
100076c0:	017fffc4 	movi	r5,-1
100076c4:	0009883a 	mov	r4,zero
100076c8:	003f9106 	br	10007510 <__alt_data_end+0xf8007510>
100076cc:	00ff0034 	movhi	r3,64512
100076d0:	18ffffc4 	addi	r3,r3,-1
100076d4:	80a1c83a 	sub	r16,r16,r2
100076d8:	90c6703a 	and	r3,r18,r3
100076dc:	003f7e06 	br	100074d8 <__alt_data_end+0xf80074d8>
100076e0:	01000804 	movi	r4,32
100076e4:	2089c83a 	sub	r4,r4,r2
100076e8:	4108983a 	sll	r4,r8,r4
100076ec:	4090d83a 	srl	r8,r8,r2
100076f0:	2004c03a 	cmpne	r2,r4,zero
100076f4:	1210b03a 	or	r8,r2,r8
100076f8:	003f9a06 	br	10007564 <__alt_data_end+0xf8007564>
100076fc:	2000421e 	bne	r4,zero,10007808 <__subsf3+0x3a0>
10007700:	81000044 	addi	r4,r16,1
10007704:	21803fcc 	andi	r6,r4,255
10007708:	01400044 	movi	r5,1
1000770c:	29802a0e 	bge	r5,r6,100077b8 <__subsf3+0x350>
10007710:	01403fc4 	movi	r5,255
10007714:	21403926 	beq	r4,r5,100077fc <__subsf3+0x394>
10007718:	40c7883a 	add	r3,r8,r3
1000771c:	1806d07a 	srli	r3,r3,1
10007720:	2021883a 	mov	r16,r4
10007724:	003f6c06 	br	100074d8 <__alt_data_end+0xf80074d8>
10007728:	80001726 	beq	r16,zero,10007788 <__subsf3+0x320>
1000772c:	01003fc4 	movi	r4,255
10007730:	39001a26 	beq	r7,r4,1000779c <__subsf3+0x334>
10007734:	0085c83a 	sub	r2,zero,r2
10007738:	18c10034 	orhi	r3,r3,1024
1000773c:	010006c4 	movi	r4,27
10007740:	2080430e 	bge	r4,r2,10007850 <__subsf3+0x3e8>
10007744:	00c00044 	movi	r3,1
10007748:	40c7c83a 	sub	r3,r8,r3
1000774c:	3821883a 	mov	r16,r7
10007750:	3023883a 	mov	r17,r6
10007754:	003f8406 	br	10007568 <__alt_data_end+0xf8007568>
10007758:	903f881e 	bne	r18,zero,1000757c <__alt_data_end+0xf800757c>
1000775c:	0007883a 	mov	r3,zero
10007760:	0005883a 	mov	r2,zero
10007764:	0021883a 	mov	r16,zero
10007768:	003f9806 	br	100075cc <__alt_data_end+0xf80075cc>
1000776c:	01400804 	movi	r5,32
10007770:	290bc83a 	sub	r5,r5,r4
10007774:	414a983a 	sll	r5,r8,r5
10007778:	4110d83a 	srl	r8,r8,r4
1000777c:	2808c03a 	cmpne	r4,r5,zero
10007780:	2208b03a 	or	r4,r4,r8
10007784:	003fa206 	br	10007610 <__alt_data_end+0xf8007610>
10007788:	18000426 	beq	r3,zero,1000779c <__subsf3+0x334>
1000778c:	0084303a 	nor	r2,zero,r2
10007790:	103fed26 	beq	r2,zero,10007748 <__alt_data_end+0xf8007748>
10007794:	01003fc4 	movi	r4,255
10007798:	393fe81e 	bne	r7,r4,1000773c <__alt_data_end+0xf800773c>
1000779c:	4007883a 	mov	r3,r8
100077a0:	3821883a 	mov	r16,r7
100077a4:	3023883a 	mov	r17,r6
100077a8:	003f4b06 	br	100074d8 <__alt_data_end+0xf80074d8>
100077ac:	01403fc4 	movi	r5,255
100077b0:	817f941e 	bne	r16,r5,10007604 <__alt_data_end+0xf8007604>
100077b4:	003f4806 	br	100074d8 <__alt_data_end+0xf80074d8>
100077b8:	8000471e 	bne	r16,zero,100078d8 <__subsf3+0x470>
100077bc:	18006126 	beq	r3,zero,10007944 <__subsf3+0x4dc>
100077c0:	403f4526 	beq	r8,zero,100074d8 <__alt_data_end+0xf80074d8>
100077c4:	1a07883a 	add	r3,r3,r8
100077c8:	1881002c 	andhi	r2,r3,1024
100077cc:	103f7c26 	beq	r2,zero,100075c0 <__alt_data_end+0xf80075c0>
100077d0:	00bf0034 	movhi	r2,64512
100077d4:	10bfffc4 	addi	r2,r2,-1
100077d8:	2821883a 	mov	r16,r5
100077dc:	1886703a 	and	r3,r3,r2
100077e0:	003f3d06 	br	100074d8 <__alt_data_end+0xf80074d8>
100077e4:	8000141e 	bne	r16,zero,10007838 <__subsf3+0x3d0>
100077e8:	1800311e 	bne	r3,zero,100078b0 <__subsf3+0x448>
100077ec:	40004626 	beq	r8,zero,10007908 <__subsf3+0x4a0>
100077f0:	4007883a 	mov	r3,r8
100077f4:	3023883a 	mov	r17,r6
100077f8:	003f3706 	br	100074d8 <__alt_data_end+0xf80074d8>
100077fc:	2021883a 	mov	r16,r4
10007800:	0007883a 	mov	r3,zero
10007804:	003f7106 	br	100075cc <__alt_data_end+0xf80075cc>
10007808:	8000181e 	bne	r16,zero,1000786c <__subsf3+0x404>
1000780c:	18002f26 	beq	r3,zero,100078cc <__subsf3+0x464>
10007810:	0108303a 	nor	r4,zero,r4
10007814:	20000526 	beq	r4,zero,1000782c <__subsf3+0x3c4>
10007818:	01403fc4 	movi	r5,255
1000781c:	39402b26 	beq	r7,r5,100078cc <__subsf3+0x464>
10007820:	014006c4 	movi	r5,27
10007824:	2900400e 	bge	r5,r4,10007928 <__subsf3+0x4c0>
10007828:	00c00044 	movi	r3,1
1000782c:	1a07883a 	add	r3,r3,r8
10007830:	3821883a 	mov	r16,r7
10007834:	003f7706 	br	10007614 <__alt_data_end+0xf8007614>
10007838:	1800111e 	bne	r3,zero,10007880 <__subsf3+0x418>
1000783c:	40003526 	beq	r8,zero,10007914 <__subsf3+0x4ac>
10007840:	4007883a 	mov	r3,r8
10007844:	3023883a 	mov	r17,r6
10007848:	04003fc4 	movi	r16,255
1000784c:	003f2206 	br	100074d8 <__alt_data_end+0xf80074d8>
10007850:	01000804 	movi	r4,32
10007854:	2089c83a 	sub	r4,r4,r2
10007858:	1908983a 	sll	r4,r3,r4
1000785c:	1884d83a 	srl	r2,r3,r2
10007860:	2006c03a 	cmpne	r3,r4,zero
10007864:	1886b03a 	or	r3,r3,r2
10007868:	003fb706 	br	10007748 <__alt_data_end+0xf8007748>
1000786c:	01403fc4 	movi	r5,255
10007870:	39401626 	beq	r7,r5,100078cc <__subsf3+0x464>
10007874:	0109c83a 	sub	r4,zero,r4
10007878:	18c10034 	orhi	r3,r3,1024
1000787c:	003fe806 	br	10007820 <__alt_data_end+0xf8007820>
10007880:	40001f26 	beq	r8,zero,10007900 <__subsf3+0x498>
10007884:	1806d0fa 	srli	r3,r3,3
10007888:	1880102c 	andhi	r2,r3,64
1000788c:	10000526 	beq	r2,zero,100078a4 <__subsf3+0x43c>
10007890:	4010d0fa 	srli	r8,r8,3
10007894:	4080102c 	andhi	r2,r8,64
10007898:	1000021e 	bne	r2,zero,100078a4 <__subsf3+0x43c>
1000789c:	4007883a 	mov	r3,r8
100078a0:	3023883a 	mov	r17,r6
100078a4:	180690fa 	slli	r3,r3,3
100078a8:	04003fc4 	movi	r16,255
100078ac:	003f0a06 	br	100074d8 <__alt_data_end+0xf80074d8>
100078b0:	403f0926 	beq	r8,zero,100074d8 <__alt_data_end+0xf80074d8>
100078b4:	1a05c83a 	sub	r2,r3,r8
100078b8:	1101002c 	andhi	r4,r2,1024
100078bc:	203f3e26 	beq	r4,zero,100075b8 <__alt_data_end+0xf80075b8>
100078c0:	40c7c83a 	sub	r3,r8,r3
100078c4:	3023883a 	mov	r17,r6
100078c8:	003f0306 	br	100074d8 <__alt_data_end+0xf80074d8>
100078cc:	4007883a 	mov	r3,r8
100078d0:	3821883a 	mov	r16,r7
100078d4:	003f0006 	br	100074d8 <__alt_data_end+0xf80074d8>
100078d8:	18001c26 	beq	r3,zero,1000794c <__subsf3+0x4e4>
100078dc:	40000826 	beq	r8,zero,10007900 <__subsf3+0x498>
100078e0:	1806d0fa 	srli	r3,r3,3
100078e4:	1880102c 	andhi	r2,r3,64
100078e8:	103fee26 	beq	r2,zero,100078a4 <__alt_data_end+0xf80078a4>
100078ec:	4010d0fa 	srli	r8,r8,3
100078f0:	4080102c 	andhi	r2,r8,64
100078f4:	103feb1e 	bne	r2,zero,100078a4 <__alt_data_end+0xf80078a4>
100078f8:	4007883a 	mov	r3,r8
100078fc:	003fe906 	br	100078a4 <__alt_data_end+0xf80078a4>
10007900:	04003fc4 	movi	r16,255
10007904:	003ef406 	br	100074d8 <__alt_data_end+0xf80074d8>
10007908:	8007883a 	mov	r3,r16
1000790c:	0005883a 	mov	r2,zero
10007910:	003f2e06 	br	100075cc <__alt_data_end+0xf80075cc>
10007914:	00c10034 	movhi	r3,1024
10007918:	0005883a 	mov	r2,zero
1000791c:	18fffe04 	addi	r3,r3,-8
10007920:	04003fc4 	movi	r16,255
10007924:	003f2906 	br	100075cc <__alt_data_end+0xf80075cc>
10007928:	01400804 	movi	r5,32
1000792c:	290bc83a 	sub	r5,r5,r4
10007930:	194a983a 	sll	r5,r3,r5
10007934:	1908d83a 	srl	r4,r3,r4
10007938:	2806c03a 	cmpne	r3,r5,zero
1000793c:	1906b03a 	or	r3,r3,r4
10007940:	003fba06 	br	1000782c <__alt_data_end+0xf800782c>
10007944:	4007883a 	mov	r3,r8
10007948:	003ee306 	br	100074d8 <__alt_data_end+0xf80074d8>
1000794c:	4007883a 	mov	r3,r8
10007950:	04003fc4 	movi	r16,255
10007954:	003ee006 	br	100074d8 <__alt_data_end+0xf80074d8>
10007958:	0007883a 	mov	r3,zero
1000795c:	0005883a 	mov	r2,zero
10007960:	003f1a06 	br	100075cc <__alt_data_end+0xf80075cc>

10007964 <__fixsfsi>:
10007964:	2006d5fa 	srli	r3,r4,23
10007968:	00802034 	movhi	r2,128
1000796c:	10bfffc4 	addi	r2,r2,-1
10007970:	18c03fcc 	andi	r3,r3,255
10007974:	01401f84 	movi	r5,126
10007978:	1104703a 	and	r2,r2,r4
1000797c:	2008d7fa 	srli	r4,r4,31
10007980:	28c0110e 	bge	r5,r3,100079c8 <__fixsfsi+0x64>
10007984:	01402744 	movi	r5,157
10007988:	28c00b16 	blt	r5,r3,100079b8 <__fixsfsi+0x54>
1000798c:	01402544 	movi	r5,149
10007990:	10802034 	orhi	r2,r2,128
10007994:	28c00e16 	blt	r5,r3,100079d0 <__fixsfsi+0x6c>
10007998:	01402584 	movi	r5,150
1000799c:	28c7c83a 	sub	r3,r5,r3
100079a0:	10c6d83a 	srl	r3,r2,r3
100079a4:	21003fcc 	andi	r4,r4,255
100079a8:	0105c83a 	sub	r2,zero,r4
100079ac:	1886f03a 	xor	r3,r3,r2
100079b0:	1905883a 	add	r2,r3,r4
100079b4:	f800283a 	ret
100079b8:	00a00034 	movhi	r2,32768
100079bc:	10bfffc4 	addi	r2,r2,-1
100079c0:	2085883a 	add	r2,r4,r2
100079c4:	f800283a 	ret
100079c8:	0005883a 	mov	r2,zero
100079cc:	f800283a 	ret
100079d0:	18ffda84 	addi	r3,r3,-150
100079d4:	10c6983a 	sll	r3,r2,r3
100079d8:	003ff206 	br	100079a4 <__alt_data_end+0xf80079a4>

100079dc <__floatsisf>:
100079dc:	defffd04 	addi	sp,sp,-12
100079e0:	dc000015 	stw	r16,0(sp)
100079e4:	dfc00215 	stw	ra,8(sp)
100079e8:	dc400115 	stw	r17,4(sp)
100079ec:	2021883a 	mov	r16,r4
100079f0:	20003a26 	beq	r4,zero,10007adc <__floatsisf+0x100>
100079f4:	2022d7fa 	srli	r17,r4,31
100079f8:	88000126 	beq	r17,zero,10007a00 <__floatsisf+0x24>
100079fc:	0121c83a 	sub	r16,zero,r4
10007a00:	8009883a 	mov	r4,r16
10007a04:	0008ef40 	call	10008ef4 <__clzsi2>
10007a08:	00c02784 	movi	r3,158
10007a0c:	1887c83a 	sub	r3,r3,r2
10007a10:	01802584 	movi	r6,150
10007a14:	800b883a 	mov	r5,r16
10007a18:	30c01616 	blt	r6,r3,10007a74 <__floatsisf+0x98>
10007a1c:	01000204 	movi	r4,8
10007a20:	2080020e 	bge	r4,r2,10007a2c <__floatsisf+0x50>
10007a24:	10bffe04 	addi	r2,r2,-8
10007a28:	80a0983a 	sll	r16,r16,r2
10007a2c:	00802034 	movhi	r2,128
10007a30:	10bfffc4 	addi	r2,r2,-1
10007a34:	8809883a 	mov	r4,r17
10007a38:	80a0703a 	and	r16,r16,r2
10007a3c:	18803fcc 	andi	r2,r3,255
10007a40:	100695fa 	slli	r3,r2,23
10007a44:	20803fcc 	andi	r2,r4,255
10007a48:	100897fa 	slli	r4,r2,31
10007a4c:	00802034 	movhi	r2,128
10007a50:	10bfffc4 	addi	r2,r2,-1
10007a54:	8084703a 	and	r2,r16,r2
10007a58:	10c4b03a 	or	r2,r2,r3
10007a5c:	1104b03a 	or	r2,r2,r4
10007a60:	dfc00217 	ldw	ra,8(sp)
10007a64:	dc400117 	ldw	r17,4(sp)
10007a68:	dc000017 	ldw	r16,0(sp)
10007a6c:	dec00304 	addi	sp,sp,12
10007a70:	f800283a 	ret
10007a74:	01002644 	movi	r4,153
10007a78:	20c01c16 	blt	r4,r3,10007aec <__floatsisf+0x110>
10007a7c:	01000144 	movi	r4,5
10007a80:	2080020e 	bge	r4,r2,10007a8c <__floatsisf+0xb0>
10007a84:	113ffec4 	addi	r4,r2,-5
10007a88:	290a983a 	sll	r5,r5,r4
10007a8c:	043f0034 	movhi	r16,64512
10007a90:	843fffc4 	addi	r16,r16,-1
10007a94:	298001cc 	andi	r6,r5,7
10007a98:	2c20703a 	and	r16,r5,r16
10007a9c:	30000426 	beq	r6,zero,10007ab0 <__floatsisf+0xd4>
10007aa0:	294003cc 	andi	r5,r5,15
10007aa4:	01000104 	movi	r4,4
10007aa8:	29000126 	beq	r5,r4,10007ab0 <__floatsisf+0xd4>
10007aac:	8121883a 	add	r16,r16,r4
10007ab0:	8101002c 	andhi	r4,r16,1024
10007ab4:	20000526 	beq	r4,zero,10007acc <__floatsisf+0xf0>
10007ab8:	00c027c4 	movi	r3,159
10007abc:	1887c83a 	sub	r3,r3,r2
10007ac0:	00bf0034 	movhi	r2,64512
10007ac4:	10bfffc4 	addi	r2,r2,-1
10007ac8:	80a0703a 	and	r16,r16,r2
10007acc:	802091ba 	slli	r16,r16,6
10007ad0:	8809883a 	mov	r4,r17
10007ad4:	8020d27a 	srli	r16,r16,9
10007ad8:	003fd806 	br	10007a3c <__alt_data_end+0xf8007a3c>
10007adc:	0009883a 	mov	r4,zero
10007ae0:	0007883a 	mov	r3,zero
10007ae4:	0021883a 	mov	r16,zero
10007ae8:	003fd406 	br	10007a3c <__alt_data_end+0xf8007a3c>
10007aec:	01800144 	movi	r6,5
10007af0:	110006c4 	addi	r4,r2,27
10007af4:	8108983a 	sll	r4,r16,r4
10007af8:	308fc83a 	sub	r7,r6,r2
10007afc:	81cad83a 	srl	r5,r16,r7
10007b00:	2008c03a 	cmpne	r4,r4,zero
10007b04:	214ab03a 	or	r5,r4,r5
10007b08:	30bfe00e 	bge	r6,r2,10007a8c <__alt_data_end+0xf8007a8c>
10007b0c:	003fdd06 	br	10007a84 <__alt_data_end+0xf8007a84>

10007b10 <__muldf3>:
10007b10:	deffee04 	addi	sp,sp,-72
10007b14:	dd000c15 	stw	r20,48(sp)
10007b18:	2828d53a 	srli	r20,r5,20
10007b1c:	dd400d15 	stw	r21,52(sp)
10007b20:	282ad7fa 	srli	r21,r5,31
10007b24:	dc000815 	stw	r16,32(sp)
10007b28:	04000434 	movhi	r16,16
10007b2c:	ddc00f15 	stw	r23,60(sp)
10007b30:	dcc00b15 	stw	r19,44(sp)
10007b34:	dc800a15 	stw	r18,40(sp)
10007b38:	843fffc4 	addi	r16,r16,-1
10007b3c:	dfc01115 	stw	ra,68(sp)
10007b40:	df001015 	stw	fp,64(sp)
10007b44:	dd800e15 	stw	r22,56(sp)
10007b48:	dc400915 	stw	r17,36(sp)
10007b4c:	a501ffcc 	andi	r20,r20,2047
10007b50:	2025883a 	mov	r18,r4
10007b54:	202f883a 	mov	r23,r4
10007b58:	2c20703a 	and	r16,r5,r16
10007b5c:	a827883a 	mov	r19,r21
10007b60:	aa403fcc 	andi	r9,r21,255
10007b64:	a0005926 	beq	r20,zero,10007ccc <__muldf3+0x1bc>
10007b68:	0081ffc4 	movi	r2,2047
10007b6c:	a0803426 	beq	r20,r2,10007c40 <__muldf3+0x130>
10007b70:	84000434 	orhi	r16,r16,16
10007b74:	2004d77a 	srli	r2,r4,29
10007b78:	802090fa 	slli	r16,r16,3
10007b7c:	202e90fa 	slli	r23,r4,3
10007b80:	a53f0044 	addi	r20,r20,-1023
10007b84:	80a0b03a 	or	r16,r16,r2
10007b88:	000b883a 	mov	r5,zero
10007b8c:	0039883a 	mov	fp,zero
10007b90:	3806d53a 	srli	r3,r7,20
10007b94:	382cd7fa 	srli	r22,r7,31
10007b98:	00800434 	movhi	r2,16
10007b9c:	10bfffc4 	addi	r2,r2,-1
10007ba0:	18c1ffcc 	andi	r3,r3,2047
10007ba4:	3025883a 	mov	r18,r6
10007ba8:	38a2703a 	and	r17,r7,r2
10007bac:	b2803fcc 	andi	r10,r22,255
10007bb0:	18006426 	beq	r3,zero,10007d44 <__muldf3+0x234>
10007bb4:	0081ffc4 	movi	r2,2047
10007bb8:	18805c26 	beq	r3,r2,10007d2c <__muldf3+0x21c>
10007bbc:	8c400434 	orhi	r17,r17,16
10007bc0:	3004d77a 	srli	r2,r6,29
10007bc4:	882290fa 	slli	r17,r17,3
10007bc8:	302490fa 	slli	r18,r6,3
10007bcc:	18ff0044 	addi	r3,r3,-1023
10007bd0:	88a2b03a 	or	r17,r17,r2
10007bd4:	000f883a 	mov	r7,zero
10007bd8:	394ab03a 	or	r5,r7,r5
10007bdc:	280a90ba 	slli	r5,r5,2
10007be0:	00840034 	movhi	r2,4096
10007be4:	109f0004 	addi	r2,r2,31744
10007be8:	288b883a 	add	r5,r5,r2
10007bec:	28800017 	ldw	r2,0(r5)
10007bf0:	a0c7883a 	add	r3,r20,r3
10007bf4:	b54cf03a 	xor	r6,r22,r21
10007bf8:	1a000044 	addi	r8,r3,1
10007bfc:	1000683a 	jmp	r2
10007c00:	10007e44 	addi	zero,r2,505
10007c04:	10007e30 	cmpltui	zero,r2,504
10007c08:	10007e30 	cmpltui	zero,r2,504
10007c0c:	10007e1c 	xori	zero,r2,504
10007c10:	10007c5c 	xori	zero,r2,497
10007c14:	10007c5c 	xori	zero,r2,497
10007c18:	10007e04 	addi	zero,r2,504
10007c1c:	10007e1c 	xori	zero,r2,504
10007c20:	10007c5c 	xori	zero,r2,497
10007c24:	10007e04 	addi	zero,r2,504
10007c28:	10007c5c 	xori	zero,r2,497
10007c2c:	10007e1c 	xori	zero,r2,504
10007c30:	10007c60 	cmpeqi	zero,r2,497
10007c34:	10007c60 	cmpeqi	zero,r2,497
10007c38:	10007c60 	cmpeqi	zero,r2,497
10007c3c:	10008180 	call	11000818 <_gp+0xfdd8f0>
10007c40:	8104b03a 	or	r2,r16,r4
10007c44:	10006c1e 	bne	r2,zero,10007df8 <__muldf3+0x2e8>
10007c48:	01400204 	movi	r5,8
10007c4c:	0021883a 	mov	r16,zero
10007c50:	002f883a 	mov	r23,zero
10007c54:	07000084 	movi	fp,2
10007c58:	003fcd06 	br	10007b90 <__alt_data_end+0xf8007b90>
10007c5c:	3013883a 	mov	r9,r6
10007c60:	00800084 	movi	r2,2
10007c64:	e080501e 	bne	fp,r2,10007da8 <__muldf3+0x298>
10007c68:	4cc0004c 	andi	r19,r9,1
10007c6c:	0101ffc4 	movi	r4,2047
10007c70:	0021883a 	mov	r16,zero
10007c74:	002f883a 	mov	r23,zero
10007c78:	2008953a 	slli	r4,r4,20
10007c7c:	98c03fcc 	andi	r3,r19,255
10007c80:	04400434 	movhi	r17,16
10007c84:	8c7fffc4 	addi	r17,r17,-1
10007c88:	180697fa 	slli	r3,r3,31
10007c8c:	8460703a 	and	r16,r16,r17
10007c90:	8120b03a 	or	r16,r16,r4
10007c94:	80c6b03a 	or	r3,r16,r3
10007c98:	b805883a 	mov	r2,r23
10007c9c:	dfc01117 	ldw	ra,68(sp)
10007ca0:	df001017 	ldw	fp,64(sp)
10007ca4:	ddc00f17 	ldw	r23,60(sp)
10007ca8:	dd800e17 	ldw	r22,56(sp)
10007cac:	dd400d17 	ldw	r21,52(sp)
10007cb0:	dd000c17 	ldw	r20,48(sp)
10007cb4:	dcc00b17 	ldw	r19,44(sp)
10007cb8:	dc800a17 	ldw	r18,40(sp)
10007cbc:	dc400917 	ldw	r17,36(sp)
10007cc0:	dc000817 	ldw	r16,32(sp)
10007cc4:	dec01204 	addi	sp,sp,72
10007cc8:	f800283a 	ret
10007ccc:	8104b03a 	or	r2,r16,r4
10007cd0:	10004426 	beq	r2,zero,10007de4 <__muldf3+0x2d4>
10007cd4:	80014b26 	beq	r16,zero,10008204 <__muldf3+0x6f4>
10007cd8:	8009883a 	mov	r4,r16
10007cdc:	d9800715 	stw	r6,28(sp)
10007ce0:	d9c00215 	stw	r7,8(sp)
10007ce4:	da400415 	stw	r9,16(sp)
10007ce8:	0008ef40 	call	10008ef4 <__clzsi2>
10007cec:	d9800717 	ldw	r6,28(sp)
10007cf0:	d9c00217 	ldw	r7,8(sp)
10007cf4:	da400417 	ldw	r9,16(sp)
10007cf8:	1007883a 	mov	r3,r2
10007cfc:	01000a04 	movi	r4,40
10007d00:	1dfffe04 	addi	r23,r3,-8
10007d04:	20c9c83a 	sub	r4,r4,r3
10007d08:	85e0983a 	sll	r16,r16,r23
10007d0c:	9108d83a 	srl	r4,r18,r4
10007d10:	95ee983a 	sll	r23,r18,r23
10007d14:	2420b03a 	or	r16,r4,r16
10007d18:	053f0344 	movi	r20,-1011
10007d1c:	a0e9c83a 	sub	r20,r20,r3
10007d20:	000b883a 	mov	r5,zero
10007d24:	0039883a 	mov	fp,zero
10007d28:	003f9906 	br	10007b90 <__alt_data_end+0xf8007b90>
10007d2c:	8984b03a 	or	r2,r17,r6
10007d30:	10002a1e 	bne	r2,zero,10007ddc <__muldf3+0x2cc>
10007d34:	0023883a 	mov	r17,zero
10007d38:	0025883a 	mov	r18,zero
10007d3c:	01c00084 	movi	r7,2
10007d40:	003fa506 	br	10007bd8 <__alt_data_end+0xf8007bd8>
10007d44:	8984b03a 	or	r2,r17,r6
10007d48:	10002026 	beq	r2,zero,10007dcc <__muldf3+0x2bc>
10007d4c:	88011c26 	beq	r17,zero,100081c0 <__muldf3+0x6b0>
10007d50:	8809883a 	mov	r4,r17
10007d54:	d9400215 	stw	r5,8(sp)
10007d58:	d9800715 	stw	r6,28(sp)
10007d5c:	da400415 	stw	r9,16(sp)
10007d60:	da800315 	stw	r10,12(sp)
10007d64:	0008ef40 	call	10008ef4 <__clzsi2>
10007d68:	d9400217 	ldw	r5,8(sp)
10007d6c:	d9800717 	ldw	r6,28(sp)
10007d70:	da400417 	ldw	r9,16(sp)
10007d74:	da800317 	ldw	r10,12(sp)
10007d78:	1007883a 	mov	r3,r2
10007d7c:	01000a04 	movi	r4,40
10007d80:	1cbffe04 	addi	r18,r3,-8
10007d84:	20c9c83a 	sub	r4,r4,r3
10007d88:	8ca2983a 	sll	r17,r17,r18
10007d8c:	3108d83a 	srl	r4,r6,r4
10007d90:	34a4983a 	sll	r18,r6,r18
10007d94:	2462b03a 	or	r17,r4,r17
10007d98:	00bf0344 	movi	r2,-1011
10007d9c:	10c7c83a 	sub	r3,r2,r3
10007da0:	000f883a 	mov	r7,zero
10007da4:	003f8c06 	br	10007bd8 <__alt_data_end+0xf8007bd8>
10007da8:	008000c4 	movi	r2,3
10007dac:	e0816d26 	beq	fp,r2,10008364 <__muldf3+0x854>
10007db0:	00800044 	movi	r2,1
10007db4:	e081321e 	bne	fp,r2,10008280 <__muldf3+0x770>
10007db8:	48a6703a 	and	r19,r9,r2
10007dbc:	0009883a 	mov	r4,zero
10007dc0:	0021883a 	mov	r16,zero
10007dc4:	002f883a 	mov	r23,zero
10007dc8:	003fab06 	br	10007c78 <__alt_data_end+0xf8007c78>
10007dcc:	0023883a 	mov	r17,zero
10007dd0:	0025883a 	mov	r18,zero
10007dd4:	01c00044 	movi	r7,1
10007dd8:	003f7f06 	br	10007bd8 <__alt_data_end+0xf8007bd8>
10007ddc:	01c000c4 	movi	r7,3
10007de0:	003f7d06 	br	10007bd8 <__alt_data_end+0xf8007bd8>
10007de4:	01400104 	movi	r5,4
10007de8:	0021883a 	mov	r16,zero
10007dec:	002f883a 	mov	r23,zero
10007df0:	07000044 	movi	fp,1
10007df4:	003f6606 	br	10007b90 <__alt_data_end+0xf8007b90>
10007df8:	01400304 	movi	r5,12
10007dfc:	070000c4 	movi	fp,3
10007e00:	003f6306 	br	10007b90 <__alt_data_end+0xf8007b90>
10007e04:	04000434 	movhi	r16,16
10007e08:	0027883a 	mov	r19,zero
10007e0c:	843fffc4 	addi	r16,r16,-1
10007e10:	05ffffc4 	movi	r23,-1
10007e14:	0101ffc4 	movi	r4,2047
10007e18:	003f9706 	br	10007c78 <__alt_data_end+0xf8007c78>
10007e1c:	8821883a 	mov	r16,r17
10007e20:	902f883a 	mov	r23,r18
10007e24:	5013883a 	mov	r9,r10
10007e28:	3839883a 	mov	fp,r7
10007e2c:	003f8c06 	br	10007c60 <__alt_data_end+0xf8007c60>
10007e30:	8821883a 	mov	r16,r17
10007e34:	902f883a 	mov	r23,r18
10007e38:	3013883a 	mov	r9,r6
10007e3c:	3839883a 	mov	fp,r7
10007e40:	003f8706 	br	10007c60 <__alt_data_end+0xf8007c60>
10007e44:	b82ad43a 	srli	r21,r23,16
10007e48:	9038d43a 	srli	fp,r18,16
10007e4c:	bdffffcc 	andi	r23,r23,65535
10007e50:	94bfffcc 	andi	r18,r18,65535
10007e54:	9009883a 	mov	r4,r18
10007e58:	b80b883a 	mov	r5,r23
10007e5c:	d8c00515 	stw	r3,20(sp)
10007e60:	d9800715 	stw	r6,28(sp)
10007e64:	da000615 	stw	r8,24(sp)
10007e68:	0006df00 	call	10006df0 <__mulsi3>
10007e6c:	9009883a 	mov	r4,r18
10007e70:	a80b883a 	mov	r5,r21
10007e74:	1029883a 	mov	r20,r2
10007e78:	0006df00 	call	10006df0 <__mulsi3>
10007e7c:	e009883a 	mov	r4,fp
10007e80:	a80b883a 	mov	r5,r21
10007e84:	102d883a 	mov	r22,r2
10007e88:	0006df00 	call	10006df0 <__mulsi3>
10007e8c:	e009883a 	mov	r4,fp
10007e90:	b80b883a 	mov	r5,r23
10007e94:	1027883a 	mov	r19,r2
10007e98:	0006df00 	call	10006df0 <__mulsi3>
10007e9c:	a008d43a 	srli	r4,r20,16
10007ea0:	b085883a 	add	r2,r22,r2
10007ea4:	d8c00517 	ldw	r3,20(sp)
10007ea8:	110f883a 	add	r7,r2,r4
10007eac:	d9800717 	ldw	r6,28(sp)
10007eb0:	da000617 	ldw	r8,24(sp)
10007eb4:	3d80022e 	bgeu	r7,r22,10007ec0 <__muldf3+0x3b0>
10007eb8:	00800074 	movhi	r2,1
10007ebc:	98a7883a 	add	r19,r19,r2
10007ec0:	3804943a 	slli	r2,r7,16
10007ec4:	380ed43a 	srli	r7,r7,16
10007ec8:	882cd43a 	srli	r22,r17,16
10007ecc:	a53fffcc 	andi	r20,r20,65535
10007ed0:	8c7fffcc 	andi	r17,r17,65535
10007ed4:	1529883a 	add	r20,r2,r20
10007ed8:	8809883a 	mov	r4,r17
10007edc:	b80b883a 	mov	r5,r23
10007ee0:	d8c00515 	stw	r3,20(sp)
10007ee4:	d9800715 	stw	r6,28(sp)
10007ee8:	da000615 	stw	r8,24(sp)
10007eec:	d9c00015 	stw	r7,0(sp)
10007ef0:	dd000115 	stw	r20,4(sp)
10007ef4:	0006df00 	call	10006df0 <__mulsi3>
10007ef8:	a80b883a 	mov	r5,r21
10007efc:	8809883a 	mov	r4,r17
10007f00:	d8800415 	stw	r2,16(sp)
10007f04:	0006df00 	call	10006df0 <__mulsi3>
10007f08:	a80b883a 	mov	r5,r21
10007f0c:	b009883a 	mov	r4,r22
10007f10:	1029883a 	mov	r20,r2
10007f14:	0006df00 	call	10006df0 <__mulsi3>
10007f18:	b009883a 	mov	r4,r22
10007f1c:	b80b883a 	mov	r5,r23
10007f20:	102b883a 	mov	r21,r2
10007f24:	0006df00 	call	10006df0 <__mulsi3>
10007f28:	da400417 	ldw	r9,16(sp)
10007f2c:	a085883a 	add	r2,r20,r2
10007f30:	d8c00517 	ldw	r3,20(sp)
10007f34:	4808d43a 	srli	r4,r9,16
10007f38:	d9800717 	ldw	r6,28(sp)
10007f3c:	da000617 	ldw	r8,24(sp)
10007f40:	1109883a 	add	r4,r2,r4
10007f44:	2500022e 	bgeu	r4,r20,10007f50 <__muldf3+0x440>
10007f48:	00800074 	movhi	r2,1
10007f4c:	a8ab883a 	add	r21,r21,r2
10007f50:	200e943a 	slli	r7,r4,16
10007f54:	2004d43a 	srli	r2,r4,16
10007f58:	802ed43a 	srli	r23,r16,16
10007f5c:	843fffcc 	andi	r16,r16,65535
10007f60:	4d3fffcc 	andi	r20,r9,65535
10007f64:	9009883a 	mov	r4,r18
10007f68:	800b883a 	mov	r5,r16
10007f6c:	3d29883a 	add	r20,r7,r20
10007f70:	d8c00515 	stw	r3,20(sp)
10007f74:	d9800715 	stw	r6,28(sp)
10007f78:	da000615 	stw	r8,24(sp)
10007f7c:	a8ab883a 	add	r21,r21,r2
10007f80:	0006df00 	call	10006df0 <__mulsi3>
10007f84:	9009883a 	mov	r4,r18
10007f88:	b80b883a 	mov	r5,r23
10007f8c:	d8800315 	stw	r2,12(sp)
10007f90:	0006df00 	call	10006df0 <__mulsi3>
10007f94:	e009883a 	mov	r4,fp
10007f98:	b80b883a 	mov	r5,r23
10007f9c:	1025883a 	mov	r18,r2
10007fa0:	0006df00 	call	10006df0 <__mulsi3>
10007fa4:	e009883a 	mov	r4,fp
10007fa8:	800b883a 	mov	r5,r16
10007fac:	d8800215 	stw	r2,8(sp)
10007fb0:	0006df00 	call	10006df0 <__mulsi3>
10007fb4:	da800317 	ldw	r10,12(sp)
10007fb8:	d9400017 	ldw	r5,0(sp)
10007fbc:	9085883a 	add	r2,r18,r2
10007fc0:	5008d43a 	srli	r4,r10,16
10007fc4:	a153883a 	add	r9,r20,r5
10007fc8:	d8c00517 	ldw	r3,20(sp)
10007fcc:	1109883a 	add	r4,r2,r4
10007fd0:	d9800717 	ldw	r6,28(sp)
10007fd4:	da000617 	ldw	r8,24(sp)
10007fd8:	dac00217 	ldw	r11,8(sp)
10007fdc:	2480022e 	bgeu	r4,r18,10007fe8 <__muldf3+0x4d8>
10007fe0:	00800074 	movhi	r2,1
10007fe4:	5897883a 	add	r11,r11,r2
10007fe8:	200e943a 	slli	r7,r4,16
10007fec:	2038d43a 	srli	fp,r4,16
10007ff0:	52bfffcc 	andi	r10,r10,65535
10007ff4:	3a8f883a 	add	r7,r7,r10
10007ff8:	8809883a 	mov	r4,r17
10007ffc:	800b883a 	mov	r5,r16
10008000:	d8c00515 	stw	r3,20(sp)
10008004:	d9800715 	stw	r6,28(sp)
10008008:	d9c00215 	stw	r7,8(sp)
1000800c:	da000615 	stw	r8,24(sp)
10008010:	da400415 	stw	r9,16(sp)
10008014:	5f39883a 	add	fp,r11,fp
10008018:	0006df00 	call	10006df0 <__mulsi3>
1000801c:	8809883a 	mov	r4,r17
10008020:	b80b883a 	mov	r5,r23
10008024:	1025883a 	mov	r18,r2
10008028:	0006df00 	call	10006df0 <__mulsi3>
1000802c:	b009883a 	mov	r4,r22
10008030:	b80b883a 	mov	r5,r23
10008034:	d8800315 	stw	r2,12(sp)
10008038:	0006df00 	call	10006df0 <__mulsi3>
1000803c:	b009883a 	mov	r4,r22
10008040:	800b883a 	mov	r5,r16
10008044:	1023883a 	mov	r17,r2
10008048:	0006df00 	call	10006df0 <__mulsi3>
1000804c:	da800317 	ldw	r10,12(sp)
10008050:	9008d43a 	srli	r4,r18,16
10008054:	d8c00517 	ldw	r3,20(sp)
10008058:	5085883a 	add	r2,r10,r2
1000805c:	1109883a 	add	r4,r2,r4
10008060:	d9800717 	ldw	r6,28(sp)
10008064:	d9c00217 	ldw	r7,8(sp)
10008068:	da000617 	ldw	r8,24(sp)
1000806c:	da400417 	ldw	r9,16(sp)
10008070:	2280022e 	bgeu	r4,r10,1000807c <__muldf3+0x56c>
10008074:	00800074 	movhi	r2,1
10008078:	88a3883a 	add	r17,r17,r2
1000807c:	2004943a 	slli	r2,r4,16
10008080:	94bfffcc 	andi	r18,r18,65535
10008084:	4ce7883a 	add	r19,r9,r19
10008088:	14a5883a 	add	r18,r2,r18
1000808c:	9d29803a 	cmpltu	r20,r19,r20
10008090:	9565883a 	add	r18,r18,r21
10008094:	9505883a 	add	r2,r18,r20
10008098:	99e7883a 	add	r19,r19,r7
1000809c:	99cf803a 	cmpltu	r7,r19,r7
100080a0:	e08b883a 	add	r5,fp,r2
100080a4:	2008d43a 	srli	r4,r4,16
100080a8:	29ef883a 	add	r23,r5,r7
100080ac:	1529803a 	cmpltu	r20,r2,r20
100080b0:	956b803a 	cmpltu	r21,r18,r21
100080b4:	b9cf803a 	cmpltu	r7,r23,r7
100080b8:	a564b03a 	or	r18,r20,r21
100080bc:	2f39803a 	cmpltu	fp,r5,fp
100080c0:	9125883a 	add	r18,r18,r4
100080c4:	3f38b03a 	or	fp,r7,fp
100080c8:	9725883a 	add	r18,r18,fp
100080cc:	9804927a 	slli	r2,r19,9
100080d0:	9463883a 	add	r17,r18,r17
100080d4:	d9000117 	ldw	r4,4(sp)
100080d8:	b820d5fa 	srli	r16,r23,23
100080dc:	8822927a 	slli	r17,r17,9
100080e0:	9826d5fa 	srli	r19,r19,23
100080e4:	1104b03a 	or	r2,r2,r4
100080e8:	b82e927a 	slli	r23,r23,9
100080ec:	1004c03a 	cmpne	r2,r2,zero
100080f0:	8c20b03a 	or	r16,r17,r16
100080f4:	14e6b03a 	or	r19,r2,r19
100080f8:	8080402c 	andhi	r2,r16,256
100080fc:	9deeb03a 	or	r23,r19,r23
10008100:	10000726 	beq	r2,zero,10008120 <__muldf3+0x610>
10008104:	b804d07a 	srli	r2,r23,1
10008108:	800697fa 	slli	r3,r16,31
1000810c:	bdc0004c 	andi	r23,r23,1
10008110:	8020d07a 	srli	r16,r16,1
10008114:	b8aeb03a 	or	r23,r23,r2
10008118:	b8eeb03a 	or	r23,r23,r3
1000811c:	4007883a 	mov	r3,r8
10008120:	1900ffc4 	addi	r4,r3,1023
10008124:	01004d0e 	bge	zero,r4,1000825c <__muldf3+0x74c>
10008128:	b88001cc 	andi	r2,r23,7
1000812c:	10000726 	beq	r2,zero,1000814c <__muldf3+0x63c>
10008130:	b94003cc 	andi	r5,r23,15
10008134:	00800104 	movi	r2,4
10008138:	28800426 	beq	r5,r2,1000814c <__muldf3+0x63c>
1000813c:	b885883a 	add	r2,r23,r2
10008140:	15ef803a 	cmpltu	r23,r2,r23
10008144:	85e1883a 	add	r16,r16,r23
10008148:	102f883a 	mov	r23,r2
1000814c:	8080402c 	andhi	r2,r16,256
10008150:	10000426 	beq	r2,zero,10008164 <__muldf3+0x654>
10008154:	00bfc034 	movhi	r2,65280
10008158:	10bfffc4 	addi	r2,r2,-1
1000815c:	19010004 	addi	r4,r3,1024
10008160:	80a0703a 	and	r16,r16,r2
10008164:	0081ff84 	movi	r2,2046
10008168:	1100340e 	bge	r2,r4,1000823c <__muldf3+0x72c>
1000816c:	34c0004c 	andi	r19,r6,1
10008170:	0101ffc4 	movi	r4,2047
10008174:	0021883a 	mov	r16,zero
10008178:	002f883a 	mov	r23,zero
1000817c:	003ebe06 	br	10007c78 <__alt_data_end+0xf8007c78>
10008180:	8080022c 	andhi	r2,r16,8
10008184:	10000926 	beq	r2,zero,100081ac <__muldf3+0x69c>
10008188:	8880022c 	andhi	r2,r17,8
1000818c:	1000071e 	bne	r2,zero,100081ac <__muldf3+0x69c>
10008190:	00800434 	movhi	r2,16
10008194:	8c000234 	orhi	r16,r17,8
10008198:	10bfffc4 	addi	r2,r2,-1
1000819c:	b027883a 	mov	r19,r22
100081a0:	80a0703a 	and	r16,r16,r2
100081a4:	902f883a 	mov	r23,r18
100081a8:	003f1a06 	br	10007e14 <__alt_data_end+0xf8007e14>
100081ac:	00800434 	movhi	r2,16
100081b0:	84000234 	orhi	r16,r16,8
100081b4:	10bfffc4 	addi	r2,r2,-1
100081b8:	80a0703a 	and	r16,r16,r2
100081bc:	003f1506 	br	10007e14 <__alt_data_end+0xf8007e14>
100081c0:	3009883a 	mov	r4,r6
100081c4:	d9400215 	stw	r5,8(sp)
100081c8:	d9800715 	stw	r6,28(sp)
100081cc:	da400415 	stw	r9,16(sp)
100081d0:	da800315 	stw	r10,12(sp)
100081d4:	0008ef40 	call	10008ef4 <__clzsi2>
100081d8:	10c00804 	addi	r3,r2,32
100081dc:	010009c4 	movi	r4,39
100081e0:	d9400217 	ldw	r5,8(sp)
100081e4:	d9800717 	ldw	r6,28(sp)
100081e8:	da400417 	ldw	r9,16(sp)
100081ec:	da800317 	ldw	r10,12(sp)
100081f0:	20fee20e 	bge	r4,r3,10007d7c <__alt_data_end+0xf8007d7c>
100081f4:	147ffe04 	addi	r17,r2,-8
100081f8:	9462983a 	sll	r17,r18,r17
100081fc:	0025883a 	mov	r18,zero
10008200:	003ee506 	br	10007d98 <__alt_data_end+0xf8007d98>
10008204:	d9800715 	stw	r6,28(sp)
10008208:	d9c00215 	stw	r7,8(sp)
1000820c:	da400415 	stw	r9,16(sp)
10008210:	0008ef40 	call	10008ef4 <__clzsi2>
10008214:	10c00804 	addi	r3,r2,32
10008218:	010009c4 	movi	r4,39
1000821c:	d9800717 	ldw	r6,28(sp)
10008220:	d9c00217 	ldw	r7,8(sp)
10008224:	da400417 	ldw	r9,16(sp)
10008228:	20feb40e 	bge	r4,r3,10007cfc <__alt_data_end+0xf8007cfc>
1000822c:	143ffe04 	addi	r16,r2,-8
10008230:	9420983a 	sll	r16,r18,r16
10008234:	002f883a 	mov	r23,zero
10008238:	003eb706 	br	10007d18 <__alt_data_end+0xf8007d18>
1000823c:	8004977a 	slli	r2,r16,29
10008240:	b82ed0fa 	srli	r23,r23,3
10008244:	8020927a 	slli	r16,r16,9
10008248:	2101ffcc 	andi	r4,r4,2047
1000824c:	15eeb03a 	or	r23,r2,r23
10008250:	8020d33a 	srli	r16,r16,12
10008254:	34c0004c 	andi	r19,r6,1
10008258:	003e8706 	br	10007c78 <__alt_data_end+0xf8007c78>
1000825c:	00bf0084 	movi	r2,-1022
10008260:	10c5c83a 	sub	r2,r2,r3
10008264:	01000e04 	movi	r4,56
10008268:	2080080e 	bge	r4,r2,1000828c <__muldf3+0x77c>
1000826c:	34c0004c 	andi	r19,r6,1
10008270:	0009883a 	mov	r4,zero
10008274:	0021883a 	mov	r16,zero
10008278:	002f883a 	mov	r23,zero
1000827c:	003e7e06 	br	10007c78 <__alt_data_end+0xf8007c78>
10008280:	4007883a 	mov	r3,r8
10008284:	480d883a 	mov	r6,r9
10008288:	003fa506 	br	10008120 <__alt_data_end+0xf8008120>
1000828c:	010007c4 	movi	r4,31
10008290:	20801816 	blt	r4,r2,100082f4 <__muldf3+0x7e4>
10008294:	18c10784 	addi	r3,r3,1054
10008298:	80c8983a 	sll	r4,r16,r3
1000829c:	b88ad83a 	srl	r5,r23,r2
100082a0:	b8c6983a 	sll	r3,r23,r3
100082a4:	80a0d83a 	srl	r16,r16,r2
100082a8:	2908b03a 	or	r4,r5,r4
100082ac:	1804c03a 	cmpne	r2,r3,zero
100082b0:	2088b03a 	or	r4,r4,r2
100082b4:	208001cc 	andi	r2,r4,7
100082b8:	10000726 	beq	r2,zero,100082d8 <__muldf3+0x7c8>
100082bc:	20c003cc 	andi	r3,r4,15
100082c0:	00800104 	movi	r2,4
100082c4:	18800426 	beq	r3,r2,100082d8 <__muldf3+0x7c8>
100082c8:	20c00104 	addi	r3,r4,4
100082cc:	1905803a 	cmpltu	r2,r3,r4
100082d0:	80a1883a 	add	r16,r16,r2
100082d4:	1809883a 	mov	r4,r3
100082d8:	8080202c 	andhi	r2,r16,128
100082dc:	10001b26 	beq	r2,zero,1000834c <__muldf3+0x83c>
100082e0:	34c0004c 	andi	r19,r6,1
100082e4:	01000044 	movi	r4,1
100082e8:	0021883a 	mov	r16,zero
100082ec:	002f883a 	mov	r23,zero
100082f0:	003e6106 	br	10007c78 <__alt_data_end+0xf8007c78>
100082f4:	013ef884 	movi	r4,-1054
100082f8:	20c9c83a 	sub	r4,r4,r3
100082fc:	01400804 	movi	r5,32
10008300:	8108d83a 	srl	r4,r16,r4
10008304:	11401526 	beq	r2,r5,1000835c <__muldf3+0x84c>
10008308:	18c10f84 	addi	r3,r3,1086
1000830c:	80e0983a 	sll	r16,r16,r3
10008310:	85eeb03a 	or	r23,r16,r23
10008314:	b804c03a 	cmpne	r2,r23,zero
10008318:	1108b03a 	or	r4,r2,r4
1000831c:	20c001cc 	andi	r3,r4,7
10008320:	1800061e 	bne	r3,zero,1000833c <__muldf3+0x82c>
10008324:	0021883a 	mov	r16,zero
10008328:	202ed0fa 	srli	r23,r4,3
1000832c:	34c0004c 	andi	r19,r6,1
10008330:	0009883a 	mov	r4,zero
10008334:	b8eeb03a 	or	r23,r23,r3
10008338:	003e4f06 	br	10007c78 <__alt_data_end+0xf8007c78>
1000833c:	20c003cc 	andi	r3,r4,15
10008340:	00800104 	movi	r2,4
10008344:	0021883a 	mov	r16,zero
10008348:	18bfdf1e 	bne	r3,r2,100082c8 <__alt_data_end+0xf80082c8>
1000834c:	8004927a 	slli	r2,r16,9
10008350:	8006977a 	slli	r3,r16,29
10008354:	1020d33a 	srli	r16,r2,12
10008358:	003ff306 	br	10008328 <__alt_data_end+0xf8008328>
1000835c:	0021883a 	mov	r16,zero
10008360:	003feb06 	br	10008310 <__alt_data_end+0xf8008310>
10008364:	00800434 	movhi	r2,16
10008368:	84000234 	orhi	r16,r16,8
1000836c:	10bfffc4 	addi	r2,r2,-1
10008370:	4cc0004c 	andi	r19,r9,1
10008374:	80a0703a 	and	r16,r16,r2
10008378:	003ea606 	br	10007e14 <__alt_data_end+0xf8007e14>

1000837c <__subdf3>:
1000837c:	00c00434 	movhi	r3,16
10008380:	18ffffc4 	addi	r3,r3,-1
10008384:	defffb04 	addi	sp,sp,-20
10008388:	28d2703a 	and	r9,r5,r3
1000838c:	3814d53a 	srli	r10,r7,20
10008390:	38c6703a 	and	r3,r7,r3
10008394:	3004d77a 	srli	r2,r6,29
10008398:	dc800215 	stw	r18,8(sp)
1000839c:	dc000015 	stw	r16,0(sp)
100083a0:	2824d7fa 	srli	r18,r5,31
100083a4:	2820d53a 	srli	r16,r5,20
100083a8:	481290fa 	slli	r9,r9,3
100083ac:	200ad77a 	srli	r5,r4,29
100083b0:	180690fa 	slli	r3,r3,3
100083b4:	dc400115 	stw	r17,4(sp)
100083b8:	dfc00415 	stw	ra,16(sp)
100083bc:	202290fa 	slli	r17,r4,3
100083c0:	dcc00315 	stw	r19,12(sp)
100083c4:	5281ffcc 	andi	r10,r10,2047
100083c8:	0101ffc4 	movi	r4,2047
100083cc:	9011883a 	mov	r8,r18
100083d0:	8401ffcc 	andi	r16,r16,2047
100083d4:	94803fcc 	andi	r18,r18,255
100083d8:	494ab03a 	or	r5,r9,r5
100083dc:	380ed7fa 	srli	r7,r7,31
100083e0:	1886b03a 	or	r3,r3,r2
100083e4:	300c90fa 	slli	r6,r6,3
100083e8:	51009026 	beq	r10,r4,1000862c <__subdf3+0x2b0>
100083ec:	39c0005c 	xori	r7,r7,1
100083f0:	8285c83a 	sub	r2,r16,r10
100083f4:	91c06f26 	beq	r18,r7,100085b4 <__subdf3+0x238>
100083f8:	0080b10e 	bge	zero,r2,100086c0 <__subdf3+0x344>
100083fc:	50002a1e 	bne	r10,zero,100084a8 <__subdf3+0x12c>
10008400:	1988b03a 	or	r4,r3,r6
10008404:	2000941e 	bne	r4,zero,10008658 <__subdf3+0x2dc>
10008408:	888001cc 	andi	r2,r17,7
1000840c:	10005b26 	beq	r2,zero,1000857c <__subdf3+0x200>
10008410:	88c003cc 	andi	r3,r17,15
10008414:	00800104 	movi	r2,4
10008418:	18805826 	beq	r3,r2,1000857c <__subdf3+0x200>
1000841c:	88c00104 	addi	r3,r17,4
10008420:	1c63803a 	cmpltu	r17,r3,r17
10008424:	2c4b883a 	add	r5,r5,r17
10008428:	2880202c 	andhi	r2,r5,128
1000842c:	9200004c 	andi	r8,r18,1
10008430:	1823883a 	mov	r17,r3
10008434:	10005426 	beq	r2,zero,10008588 <__subdf3+0x20c>
10008438:	84000044 	addi	r16,r16,1
1000843c:	0081ffc4 	movi	r2,2047
10008440:	8080bf26 	beq	r16,r2,10008740 <__subdf3+0x3c4>
10008444:	013fe034 	movhi	r4,65408
10008448:	213fffc4 	addi	r4,r4,-1
1000844c:	290a703a 	and	r5,r5,r4
10008450:	2804977a 	slli	r2,r5,29
10008454:	280a927a 	slli	r5,r5,9
10008458:	8822d0fa 	srli	r17,r17,3
1000845c:	8401ffcc 	andi	r16,r16,2047
10008460:	2808d33a 	srli	r4,r5,12
10008464:	1444b03a 	or	r2,r2,r17
10008468:	8401ffcc 	andi	r16,r16,2047
1000846c:	800a953a 	slli	r5,r16,20
10008470:	40c03fcc 	andi	r3,r8,255
10008474:	04000434 	movhi	r16,16
10008478:	180697fa 	slli	r3,r3,31
1000847c:	843fffc4 	addi	r16,r16,-1
10008480:	2420703a 	and	r16,r4,r16
10008484:	8160b03a 	or	r16,r16,r5
10008488:	80c6b03a 	or	r3,r16,r3
1000848c:	dfc00417 	ldw	ra,16(sp)
10008490:	dcc00317 	ldw	r19,12(sp)
10008494:	dc800217 	ldw	r18,8(sp)
10008498:	dc400117 	ldw	r17,4(sp)
1000849c:	dc000017 	ldw	r16,0(sp)
100084a0:	dec00504 	addi	sp,sp,20
100084a4:	f800283a 	ret
100084a8:	0101ffc4 	movi	r4,2047
100084ac:	813fd626 	beq	r16,r4,10008408 <__alt_data_end+0xf8008408>
100084b0:	18c02034 	orhi	r3,r3,128
100084b4:	01000e04 	movi	r4,56
100084b8:	2080a416 	blt	r4,r2,1000874c <__subdf3+0x3d0>
100084bc:	010007c4 	movi	r4,31
100084c0:	2080c716 	blt	r4,r2,100087e0 <__subdf3+0x464>
100084c4:	01000804 	movi	r4,32
100084c8:	2089c83a 	sub	r4,r4,r2
100084cc:	1910983a 	sll	r8,r3,r4
100084d0:	308ed83a 	srl	r7,r6,r2
100084d4:	3108983a 	sll	r4,r6,r4
100084d8:	1884d83a 	srl	r2,r3,r2
100084dc:	41ccb03a 	or	r6,r8,r7
100084e0:	2008c03a 	cmpne	r4,r4,zero
100084e4:	310cb03a 	or	r6,r6,r4
100084e8:	898dc83a 	sub	r6,r17,r6
100084ec:	89a3803a 	cmpltu	r17,r17,r6
100084f0:	288bc83a 	sub	r5,r5,r2
100084f4:	2c4bc83a 	sub	r5,r5,r17
100084f8:	3023883a 	mov	r17,r6
100084fc:	2880202c 	andhi	r2,r5,128
10008500:	10006b26 	beq	r2,zero,100086b0 <__subdf3+0x334>
10008504:	04c02034 	movhi	r19,128
10008508:	9cffffc4 	addi	r19,r19,-1
1000850c:	2ce6703a 	and	r19,r5,r19
10008510:	98007c26 	beq	r19,zero,10008704 <__subdf3+0x388>
10008514:	9809883a 	mov	r4,r19
10008518:	0008ef40 	call	10008ef4 <__clzsi2>
1000851c:	10fffe04 	addi	r3,r2,-8
10008520:	010007c4 	movi	r4,31
10008524:	20c07d16 	blt	r4,r3,1000871c <__subdf3+0x3a0>
10008528:	01400a04 	movi	r5,40
1000852c:	2885c83a 	sub	r2,r5,r2
10008530:	888ad83a 	srl	r5,r17,r2
10008534:	98e6983a 	sll	r19,r19,r3
10008538:	88e2983a 	sll	r17,r17,r3
1000853c:	2ce6b03a 	or	r19,r5,r19
10008540:	1c007a16 	blt	r3,r16,1000872c <__subdf3+0x3b0>
10008544:	1c21c83a 	sub	r16,r3,r16
10008548:	81400044 	addi	r5,r16,1
1000854c:	00c007c4 	movi	r3,31
10008550:	19409616 	blt	r3,r5,100087ac <__subdf3+0x430>
10008554:	1c21c83a 	sub	r16,r3,r16
10008558:	8c08983a 	sll	r4,r17,r16
1000855c:	8946d83a 	srl	r3,r17,r5
10008560:	9c20983a 	sll	r16,r19,r16
10008564:	2008c03a 	cmpne	r4,r4,zero
10008568:	994ad83a 	srl	r5,r19,r5
1000856c:	1c06b03a 	or	r3,r3,r16
10008570:	1922b03a 	or	r17,r3,r4
10008574:	0021883a 	mov	r16,zero
10008578:	003fa306 	br	10008408 <__alt_data_end+0xf8008408>
1000857c:	2880202c 	andhi	r2,r5,128
10008580:	9200004c 	andi	r8,r18,1
10008584:	103fac1e 	bne	r2,zero,10008438 <__alt_data_end+0xf8008438>
10008588:	2804977a 	slli	r2,r5,29
1000858c:	8822d0fa 	srli	r17,r17,3
10008590:	00c1ffc4 	movi	r3,2047
10008594:	280ad0fa 	srli	r5,r5,3
10008598:	1444b03a 	or	r2,r2,r17
1000859c:	80c02726 	beq	r16,r3,1000863c <__subdf3+0x2c0>
100085a0:	01000434 	movhi	r4,16
100085a4:	213fffc4 	addi	r4,r4,-1
100085a8:	80e0703a 	and	r16,r16,r3
100085ac:	2908703a 	and	r4,r5,r4
100085b0:	003fad06 	br	10008468 <__alt_data_end+0xf8008468>
100085b4:	0080690e 	bge	zero,r2,1000875c <__subdf3+0x3e0>
100085b8:	50002f26 	beq	r10,zero,10008678 <__subdf3+0x2fc>
100085bc:	0101ffc4 	movi	r4,2047
100085c0:	813f9126 	beq	r16,r4,10008408 <__alt_data_end+0xf8008408>
100085c4:	18c02034 	orhi	r3,r3,128
100085c8:	01000e04 	movi	r4,56
100085cc:	2080b00e 	bge	r4,r2,10008890 <__subdf3+0x514>
100085d0:	198cb03a 	or	r6,r3,r6
100085d4:	300ec03a 	cmpne	r7,r6,zero
100085d8:	0005883a 	mov	r2,zero
100085dc:	3c4f883a 	add	r7,r7,r17
100085e0:	3c63803a 	cmpltu	r17,r7,r17
100085e4:	114b883a 	add	r5,r2,r5
100085e8:	2c4b883a 	add	r5,r5,r17
100085ec:	3823883a 	mov	r17,r7
100085f0:	2880202c 	andhi	r2,r5,128
100085f4:	10002e26 	beq	r2,zero,100086b0 <__subdf3+0x334>
100085f8:	84000044 	addi	r16,r16,1
100085fc:	0081ffc4 	movi	r2,2047
10008600:	8080de26 	beq	r16,r2,1000897c <__subdf3+0x600>
10008604:	00bfe034 	movhi	r2,65408
10008608:	10bfffc4 	addi	r2,r2,-1
1000860c:	288a703a 	and	r5,r5,r2
10008610:	880cd07a 	srli	r6,r17,1
10008614:	280897fa 	slli	r4,r5,31
10008618:	88c0004c 	andi	r3,r17,1
1000861c:	30e2b03a 	or	r17,r6,r3
10008620:	280ad07a 	srli	r5,r5,1
10008624:	8922b03a 	or	r17,r17,r4
10008628:	003f7706 	br	10008408 <__alt_data_end+0xf8008408>
1000862c:	1984b03a 	or	r2,r3,r6
10008630:	103f6e26 	beq	r2,zero,100083ec <__alt_data_end+0xf80083ec>
10008634:	39c03fcc 	andi	r7,r7,255
10008638:	003f6d06 	br	100083f0 <__alt_data_end+0xf80083f0>
1000863c:	1146b03a 	or	r3,r2,r5
10008640:	18003f26 	beq	r3,zero,10008740 <__subdf3+0x3c4>
10008644:	00c00434 	movhi	r3,16
10008648:	29000234 	orhi	r4,r5,8
1000864c:	18ffffc4 	addi	r3,r3,-1
10008650:	20c8703a 	and	r4,r4,r3
10008654:	003f8406 	br	10008468 <__alt_data_end+0xf8008468>
10008658:	10bfffc4 	addi	r2,r2,-1
1000865c:	1000501e 	bne	r2,zero,100087a0 <__subdf3+0x424>
10008660:	898fc83a 	sub	r7,r17,r6
10008664:	89e3803a 	cmpltu	r17,r17,r7
10008668:	28cbc83a 	sub	r5,r5,r3
1000866c:	2c4bc83a 	sub	r5,r5,r17
10008670:	3823883a 	mov	r17,r7
10008674:	003fa106 	br	100084fc <__alt_data_end+0xf80084fc>
10008678:	1988b03a 	or	r4,r3,r6
1000867c:	203f6226 	beq	r4,zero,10008408 <__alt_data_end+0xf8008408>
10008680:	10bfffc4 	addi	r2,r2,-1
10008684:	10009b1e 	bne	r2,zero,100088f4 <__subdf3+0x578>
10008688:	344d883a 	add	r6,r6,r17
1000868c:	3463803a 	cmpltu	r17,r6,r17
10008690:	194b883a 	add	r5,r3,r5
10008694:	2c4b883a 	add	r5,r5,r17
10008698:	3023883a 	mov	r17,r6
1000869c:	003fd406 	br	100085f0 <__alt_data_end+0xf80085f0>
100086a0:	1106b03a 	or	r3,r2,r4
100086a4:	1800b426 	beq	r3,zero,10008978 <__subdf3+0x5fc>
100086a8:	100b883a 	mov	r5,r2
100086ac:	2023883a 	mov	r17,r4
100086b0:	888001cc 	andi	r2,r17,7
100086b4:	103f561e 	bne	r2,zero,10008410 <__alt_data_end+0xf8008410>
100086b8:	9200004c 	andi	r8,r18,1
100086bc:	003fb206 	br	10008588 <__alt_data_end+0xf8008588>
100086c0:	1000531e 	bne	r2,zero,10008810 <__subdf3+0x494>
100086c4:	80800044 	addi	r2,r16,1
100086c8:	1081ffcc 	andi	r2,r2,2047
100086cc:	01000044 	movi	r4,1
100086d0:	2080a00e 	bge	r4,r2,10008954 <__subdf3+0x5d8>
100086d4:	8985c83a 	sub	r2,r17,r6
100086d8:	8889803a 	cmpltu	r4,r17,r2
100086dc:	28e7c83a 	sub	r19,r5,r3
100086e0:	9927c83a 	sub	r19,r19,r4
100086e4:	9900202c 	andhi	r4,r19,128
100086e8:	20006226 	beq	r4,zero,10008874 <__subdf3+0x4f8>
100086ec:	3463c83a 	sub	r17,r6,r17
100086f0:	194bc83a 	sub	r5,r3,r5
100086f4:	344d803a 	cmpltu	r6,r6,r17
100086f8:	29a7c83a 	sub	r19,r5,r6
100086fc:	3825883a 	mov	r18,r7
10008700:	983f841e 	bne	r19,zero,10008514 <__alt_data_end+0xf8008514>
10008704:	8809883a 	mov	r4,r17
10008708:	0008ef40 	call	10008ef4 <__clzsi2>
1000870c:	10800804 	addi	r2,r2,32
10008710:	10fffe04 	addi	r3,r2,-8
10008714:	010007c4 	movi	r4,31
10008718:	20ff830e 	bge	r4,r3,10008528 <__alt_data_end+0xf8008528>
1000871c:	14fff604 	addi	r19,r2,-40
10008720:	8ce6983a 	sll	r19,r17,r19
10008724:	0023883a 	mov	r17,zero
10008728:	1c3f860e 	bge	r3,r16,10008544 <__alt_data_end+0xf8008544>
1000872c:	017fe034 	movhi	r5,65408
10008730:	297fffc4 	addi	r5,r5,-1
10008734:	80e1c83a 	sub	r16,r16,r3
10008738:	994a703a 	and	r5,r19,r5
1000873c:	003f3206 	br	10008408 <__alt_data_end+0xf8008408>
10008740:	0009883a 	mov	r4,zero
10008744:	0005883a 	mov	r2,zero
10008748:	003f4706 	br	10008468 <__alt_data_end+0xf8008468>
1000874c:	198cb03a 	or	r6,r3,r6
10008750:	300cc03a 	cmpne	r6,r6,zero
10008754:	0005883a 	mov	r2,zero
10008758:	003f6306 	br	100084e8 <__alt_data_end+0xf80084e8>
1000875c:	10009d1e 	bne	r2,zero,100089d4 <__subdf3+0x658>
10008760:	81c00044 	addi	r7,r16,1
10008764:	3881ffcc 	andi	r2,r7,2047
10008768:	02400044 	movi	r9,1
1000876c:	4880680e 	bge	r9,r2,10008910 <__subdf3+0x594>
10008770:	0081ffc4 	movi	r2,2047
10008774:	3880ae26 	beq	r7,r2,10008a30 <__subdf3+0x6b4>
10008778:	344d883a 	add	r6,r6,r17
1000877c:	3463803a 	cmpltu	r17,r6,r17
10008780:	194b883a 	add	r5,r3,r5
10008784:	2c4b883a 	add	r5,r5,r17
10008788:	282297fa 	slli	r17,r5,31
1000878c:	300cd07a 	srli	r6,r6,1
10008790:	280ad07a 	srli	r5,r5,1
10008794:	3821883a 	mov	r16,r7
10008798:	89a2b03a 	or	r17,r17,r6
1000879c:	003f1a06 	br	10008408 <__alt_data_end+0xf8008408>
100087a0:	0101ffc4 	movi	r4,2047
100087a4:	813f431e 	bne	r16,r4,100084b4 <__alt_data_end+0xf80084b4>
100087a8:	003f1706 	br	10008408 <__alt_data_end+0xf8008408>
100087ac:	80bff844 	addi	r2,r16,-31
100087b0:	00c00804 	movi	r3,32
100087b4:	9884d83a 	srl	r2,r19,r2
100087b8:	28c05126 	beq	r5,r3,10008900 <__subdf3+0x584>
100087bc:	00c00fc4 	movi	r3,63
100087c0:	1c21c83a 	sub	r16,r3,r16
100087c4:	9c26983a 	sll	r19,r19,r16
100087c8:	9c62b03a 	or	r17,r19,r17
100087cc:	8822c03a 	cmpne	r17,r17,zero
100087d0:	88a2b03a 	or	r17,r17,r2
100087d4:	000b883a 	mov	r5,zero
100087d8:	0021883a 	mov	r16,zero
100087dc:	003fb406 	br	100086b0 <__alt_data_end+0xf80086b0>
100087e0:	113ff804 	addi	r4,r2,-32
100087e4:	01c00804 	movi	r7,32
100087e8:	1908d83a 	srl	r4,r3,r4
100087ec:	11c04626 	beq	r2,r7,10008908 <__subdf3+0x58c>
100087f0:	01c01004 	movi	r7,64
100087f4:	3885c83a 	sub	r2,r7,r2
100087f8:	1884983a 	sll	r2,r3,r2
100087fc:	118cb03a 	or	r6,r2,r6
10008800:	300cc03a 	cmpne	r6,r6,zero
10008804:	310cb03a 	or	r6,r6,r4
10008808:	0005883a 	mov	r2,zero
1000880c:	003f3606 	br	100084e8 <__alt_data_end+0xf80084e8>
10008810:	80002b26 	beq	r16,zero,100088c0 <__subdf3+0x544>
10008814:	0101ffc4 	movi	r4,2047
10008818:	51006926 	beq	r10,r4,100089c0 <__subdf3+0x644>
1000881c:	0085c83a 	sub	r2,zero,r2
10008820:	29402034 	orhi	r5,r5,128
10008824:	01000e04 	movi	r4,56
10008828:	20807d16 	blt	r4,r2,10008a20 <__subdf3+0x6a4>
1000882c:	010007c4 	movi	r4,31
10008830:	2080d916 	blt	r4,r2,10008b98 <__subdf3+0x81c>
10008834:	01000804 	movi	r4,32
10008838:	2089c83a 	sub	r4,r4,r2
1000883c:	2912983a 	sll	r9,r5,r4
10008840:	8890d83a 	srl	r8,r17,r2
10008844:	8908983a 	sll	r4,r17,r4
10008848:	2884d83a 	srl	r2,r5,r2
1000884c:	4a22b03a 	or	r17,r9,r8
10008850:	2008c03a 	cmpne	r4,r4,zero
10008854:	8922b03a 	or	r17,r17,r4
10008858:	3463c83a 	sub	r17,r6,r17
1000885c:	1885c83a 	sub	r2,r3,r2
10008860:	344d803a 	cmpltu	r6,r6,r17
10008864:	118bc83a 	sub	r5,r2,r6
10008868:	5021883a 	mov	r16,r10
1000886c:	3825883a 	mov	r18,r7
10008870:	003f2206 	br	100084fc <__alt_data_end+0xf80084fc>
10008874:	9886b03a 	or	r3,r19,r2
10008878:	18001c1e 	bne	r3,zero,100088ec <__subdf3+0x570>
1000887c:	0011883a 	mov	r8,zero
10008880:	000b883a 	mov	r5,zero
10008884:	0023883a 	mov	r17,zero
10008888:	0021883a 	mov	r16,zero
1000888c:	003f3e06 	br	10008588 <__alt_data_end+0xf8008588>
10008890:	010007c4 	movi	r4,31
10008894:	20803c16 	blt	r4,r2,10008988 <__subdf3+0x60c>
10008898:	01000804 	movi	r4,32
1000889c:	2089c83a 	sub	r4,r4,r2
100088a0:	1912983a 	sll	r9,r3,r4
100088a4:	308ed83a 	srl	r7,r6,r2
100088a8:	3108983a 	sll	r4,r6,r4
100088ac:	1884d83a 	srl	r2,r3,r2
100088b0:	49ceb03a 	or	r7,r9,r7
100088b4:	2008c03a 	cmpne	r4,r4,zero
100088b8:	390eb03a 	or	r7,r7,r4
100088bc:	003f4706 	br	100085dc <__alt_data_end+0xf80085dc>
100088c0:	2c48b03a 	or	r4,r5,r17
100088c4:	20003e26 	beq	r4,zero,100089c0 <__subdf3+0x644>
100088c8:	0084303a 	nor	r2,zero,r2
100088cc:	10003a1e 	bne	r2,zero,100089b8 <__subdf3+0x63c>
100088d0:	3463c83a 	sub	r17,r6,r17
100088d4:	194bc83a 	sub	r5,r3,r5
100088d8:	344d803a 	cmpltu	r6,r6,r17
100088dc:	298bc83a 	sub	r5,r5,r6
100088e0:	5021883a 	mov	r16,r10
100088e4:	3825883a 	mov	r18,r7
100088e8:	003f0406 	br	100084fc <__alt_data_end+0xf80084fc>
100088ec:	1023883a 	mov	r17,r2
100088f0:	003f0706 	br	10008510 <__alt_data_end+0xf8008510>
100088f4:	0101ffc4 	movi	r4,2047
100088f8:	813f331e 	bne	r16,r4,100085c8 <__alt_data_end+0xf80085c8>
100088fc:	003ec206 	br	10008408 <__alt_data_end+0xf8008408>
10008900:	0027883a 	mov	r19,zero
10008904:	003fb006 	br	100087c8 <__alt_data_end+0xf80087c8>
10008908:	0005883a 	mov	r2,zero
1000890c:	003fbb06 	br	100087fc <__alt_data_end+0xf80087fc>
10008910:	2c44b03a 	or	r2,r5,r17
10008914:	80008b1e 	bne	r16,zero,10008b44 <__subdf3+0x7c8>
10008918:	1000b526 	beq	r2,zero,10008bf0 <__subdf3+0x874>
1000891c:	1984b03a 	or	r2,r3,r6
10008920:	103eb926 	beq	r2,zero,10008408 <__alt_data_end+0xf8008408>
10008924:	3449883a 	add	r4,r6,r17
10008928:	2463803a 	cmpltu	r17,r4,r17
1000892c:	194b883a 	add	r5,r3,r5
10008930:	2c4b883a 	add	r5,r5,r17
10008934:	2880202c 	andhi	r2,r5,128
10008938:	2023883a 	mov	r17,r4
1000893c:	103f5c26 	beq	r2,zero,100086b0 <__alt_data_end+0xf80086b0>
10008940:	00bfe034 	movhi	r2,65408
10008944:	10bfffc4 	addi	r2,r2,-1
10008948:	4821883a 	mov	r16,r9
1000894c:	288a703a 	and	r5,r5,r2
10008950:	003ead06 	br	10008408 <__alt_data_end+0xf8008408>
10008954:	2c44b03a 	or	r2,r5,r17
10008958:	8000291e 	bne	r16,zero,10008a00 <__subdf3+0x684>
1000895c:	10004f1e 	bne	r2,zero,10008a9c <__subdf3+0x720>
10008960:	1984b03a 	or	r2,r3,r6
10008964:	10000426 	beq	r2,zero,10008978 <__subdf3+0x5fc>
10008968:	180b883a 	mov	r5,r3
1000896c:	3023883a 	mov	r17,r6
10008970:	3825883a 	mov	r18,r7
10008974:	003ea406 	br	10008408 <__alt_data_end+0xf8008408>
10008978:	0011883a 	mov	r8,zero
1000897c:	000b883a 	mov	r5,zero
10008980:	0023883a 	mov	r17,zero
10008984:	003f0006 	br	10008588 <__alt_data_end+0xf8008588>
10008988:	11fff804 	addi	r7,r2,-32
1000898c:	19c8d83a 	srl	r4,r3,r7
10008990:	01c00804 	movi	r7,32
10008994:	11c07e26 	beq	r2,r7,10008b90 <__subdf3+0x814>
10008998:	01c01004 	movi	r7,64
1000899c:	3885c83a 	sub	r2,r7,r2
100089a0:	1884983a 	sll	r2,r3,r2
100089a4:	118cb03a 	or	r6,r2,r6
100089a8:	300ec03a 	cmpne	r7,r6,zero
100089ac:	390eb03a 	or	r7,r7,r4
100089b0:	0005883a 	mov	r2,zero
100089b4:	003f0906 	br	100085dc <__alt_data_end+0xf80085dc>
100089b8:	0101ffc4 	movi	r4,2047
100089bc:	513f991e 	bne	r10,r4,10008824 <__alt_data_end+0xf8008824>
100089c0:	180b883a 	mov	r5,r3
100089c4:	3023883a 	mov	r17,r6
100089c8:	5021883a 	mov	r16,r10
100089cc:	3825883a 	mov	r18,r7
100089d0:	003e8d06 	br	10008408 <__alt_data_end+0xf8008408>
100089d4:	80001a1e 	bne	r16,zero,10008a40 <__subdf3+0x6c4>
100089d8:	2c48b03a 	or	r4,r5,r17
100089dc:	20005526 	beq	r4,zero,10008b34 <__subdf3+0x7b8>
100089e0:	0084303a 	nor	r2,zero,r2
100089e4:	1000511e 	bne	r2,zero,10008b2c <__subdf3+0x7b0>
100089e8:	89a3883a 	add	r17,r17,r6
100089ec:	194b883a 	add	r5,r3,r5
100089f0:	898d803a 	cmpltu	r6,r17,r6
100089f4:	298b883a 	add	r5,r5,r6
100089f8:	5021883a 	mov	r16,r10
100089fc:	003efc06 	br	100085f0 <__alt_data_end+0xf80085f0>
10008a00:	1000341e 	bne	r2,zero,10008ad4 <__subdf3+0x758>
10008a04:	1984b03a 	or	r2,r3,r6
10008a08:	10006f26 	beq	r2,zero,10008bc8 <__subdf3+0x84c>
10008a0c:	180b883a 	mov	r5,r3
10008a10:	3023883a 	mov	r17,r6
10008a14:	3825883a 	mov	r18,r7
10008a18:	0401ffc4 	movi	r16,2047
10008a1c:	003e7a06 	br	10008408 <__alt_data_end+0xf8008408>
10008a20:	2c62b03a 	or	r17,r5,r17
10008a24:	8822c03a 	cmpne	r17,r17,zero
10008a28:	0005883a 	mov	r2,zero
10008a2c:	003f8a06 	br	10008858 <__alt_data_end+0xf8008858>
10008a30:	3821883a 	mov	r16,r7
10008a34:	000b883a 	mov	r5,zero
10008a38:	0023883a 	mov	r17,zero
10008a3c:	003ed206 	br	10008588 <__alt_data_end+0xf8008588>
10008a40:	0101ffc4 	movi	r4,2047
10008a44:	51003b26 	beq	r10,r4,10008b34 <__subdf3+0x7b8>
10008a48:	0085c83a 	sub	r2,zero,r2
10008a4c:	29402034 	orhi	r5,r5,128
10008a50:	01000e04 	movi	r4,56
10008a54:	20806216 	blt	r4,r2,10008be0 <__subdf3+0x864>
10008a58:	010007c4 	movi	r4,31
10008a5c:	20806b16 	blt	r4,r2,10008c0c <__subdf3+0x890>
10008a60:	01000804 	movi	r4,32
10008a64:	2089c83a 	sub	r4,r4,r2
10008a68:	2912983a 	sll	r9,r5,r4
10008a6c:	888ed83a 	srl	r7,r17,r2
10008a70:	8908983a 	sll	r4,r17,r4
10008a74:	2884d83a 	srl	r2,r5,r2
10008a78:	49e2b03a 	or	r17,r9,r7
10008a7c:	2008c03a 	cmpne	r4,r4,zero
10008a80:	8922b03a 	or	r17,r17,r4
10008a84:	89a3883a 	add	r17,r17,r6
10008a88:	10c5883a 	add	r2,r2,r3
10008a8c:	898d803a 	cmpltu	r6,r17,r6
10008a90:	118b883a 	add	r5,r2,r6
10008a94:	5021883a 	mov	r16,r10
10008a98:	003ed506 	br	100085f0 <__alt_data_end+0xf80085f0>
10008a9c:	1984b03a 	or	r2,r3,r6
10008aa0:	103e5926 	beq	r2,zero,10008408 <__alt_data_end+0xf8008408>
10008aa4:	8989c83a 	sub	r4,r17,r6
10008aa8:	8911803a 	cmpltu	r8,r17,r4
10008aac:	28c5c83a 	sub	r2,r5,r3
10008ab0:	1205c83a 	sub	r2,r2,r8
10008ab4:	1200202c 	andhi	r8,r2,128
10008ab8:	403ef926 	beq	r8,zero,100086a0 <__alt_data_end+0xf80086a0>
10008abc:	3463c83a 	sub	r17,r6,r17
10008ac0:	194bc83a 	sub	r5,r3,r5
10008ac4:	344d803a 	cmpltu	r6,r6,r17
10008ac8:	298bc83a 	sub	r5,r5,r6
10008acc:	3825883a 	mov	r18,r7
10008ad0:	003e4d06 	br	10008408 <__alt_data_end+0xf8008408>
10008ad4:	1984b03a 	or	r2,r3,r6
10008ad8:	10002b26 	beq	r2,zero,10008b88 <__subdf3+0x80c>
10008adc:	2808d0fa 	srli	r4,r5,3
10008ae0:	8822d0fa 	srli	r17,r17,3
10008ae4:	280a977a 	slli	r5,r5,29
10008ae8:	2080022c 	andhi	r2,r4,8
10008aec:	2c62b03a 	or	r17,r5,r17
10008af0:	10000826 	beq	r2,zero,10008b14 <__subdf3+0x798>
10008af4:	1810d0fa 	srli	r8,r3,3
10008af8:	4080022c 	andhi	r2,r8,8
10008afc:	1000051e 	bne	r2,zero,10008b14 <__subdf3+0x798>
10008b00:	300cd0fa 	srli	r6,r6,3
10008b04:	1804977a 	slli	r2,r3,29
10008b08:	4009883a 	mov	r4,r8
10008b0c:	3825883a 	mov	r18,r7
10008b10:	11a2b03a 	or	r17,r2,r6
10008b14:	880ad77a 	srli	r5,r17,29
10008b18:	200890fa 	slli	r4,r4,3
10008b1c:	882290fa 	slli	r17,r17,3
10008b20:	0401ffc4 	movi	r16,2047
10008b24:	290ab03a 	or	r5,r5,r4
10008b28:	003e3706 	br	10008408 <__alt_data_end+0xf8008408>
10008b2c:	0101ffc4 	movi	r4,2047
10008b30:	513fc71e 	bne	r10,r4,10008a50 <__alt_data_end+0xf8008a50>
10008b34:	180b883a 	mov	r5,r3
10008b38:	3023883a 	mov	r17,r6
10008b3c:	5021883a 	mov	r16,r10
10008b40:	003e3106 	br	10008408 <__alt_data_end+0xf8008408>
10008b44:	10002d26 	beq	r2,zero,10008bfc <__subdf3+0x880>
10008b48:	1984b03a 	or	r2,r3,r6
10008b4c:	10000e26 	beq	r2,zero,10008b88 <__subdf3+0x80c>
10008b50:	2808d0fa 	srli	r4,r5,3
10008b54:	8822d0fa 	srli	r17,r17,3
10008b58:	280a977a 	slli	r5,r5,29
10008b5c:	2080022c 	andhi	r2,r4,8
10008b60:	2c62b03a 	or	r17,r5,r17
10008b64:	103feb26 	beq	r2,zero,10008b14 <__alt_data_end+0xf8008b14>
10008b68:	180ed0fa 	srli	r7,r3,3
10008b6c:	3880022c 	andhi	r2,r7,8
10008b70:	103fe81e 	bne	r2,zero,10008b14 <__alt_data_end+0xf8008b14>
10008b74:	300cd0fa 	srli	r6,r6,3
10008b78:	1804977a 	slli	r2,r3,29
10008b7c:	3809883a 	mov	r4,r7
10008b80:	11a2b03a 	or	r17,r2,r6
10008b84:	003fe306 	br	10008b14 <__alt_data_end+0xf8008b14>
10008b88:	0401ffc4 	movi	r16,2047
10008b8c:	003e1e06 	br	10008408 <__alt_data_end+0xf8008408>
10008b90:	0005883a 	mov	r2,zero
10008b94:	003f8306 	br	100089a4 <__alt_data_end+0xf80089a4>
10008b98:	113ff804 	addi	r4,r2,-32
10008b9c:	02000804 	movi	r8,32
10008ba0:	2908d83a 	srl	r4,r5,r4
10008ba4:	12002526 	beq	r2,r8,10008c3c <__subdf3+0x8c0>
10008ba8:	02001004 	movi	r8,64
10008bac:	4085c83a 	sub	r2,r8,r2
10008bb0:	288a983a 	sll	r5,r5,r2
10008bb4:	2c62b03a 	or	r17,r5,r17
10008bb8:	8822c03a 	cmpne	r17,r17,zero
10008bbc:	8922b03a 	or	r17,r17,r4
10008bc0:	0005883a 	mov	r2,zero
10008bc4:	003f2406 	br	10008858 <__alt_data_end+0xf8008858>
10008bc8:	01402034 	movhi	r5,128
10008bcc:	0011883a 	mov	r8,zero
10008bd0:	297fffc4 	addi	r5,r5,-1
10008bd4:	047ffe04 	movi	r17,-8
10008bd8:	0401ffc4 	movi	r16,2047
10008bdc:	003e6a06 	br	10008588 <__alt_data_end+0xf8008588>
10008be0:	2c62b03a 	or	r17,r5,r17
10008be4:	8822c03a 	cmpne	r17,r17,zero
10008be8:	0005883a 	mov	r2,zero
10008bec:	003fa506 	br	10008a84 <__alt_data_end+0xf8008a84>
10008bf0:	180b883a 	mov	r5,r3
10008bf4:	3023883a 	mov	r17,r6
10008bf8:	003e0306 	br	10008408 <__alt_data_end+0xf8008408>
10008bfc:	180b883a 	mov	r5,r3
10008c00:	3023883a 	mov	r17,r6
10008c04:	0401ffc4 	movi	r16,2047
10008c08:	003dff06 	br	10008408 <__alt_data_end+0xf8008408>
10008c0c:	113ff804 	addi	r4,r2,-32
10008c10:	01c00804 	movi	r7,32
10008c14:	2908d83a 	srl	r4,r5,r4
10008c18:	11c00a26 	beq	r2,r7,10008c44 <__subdf3+0x8c8>
10008c1c:	01c01004 	movi	r7,64
10008c20:	3885c83a 	sub	r2,r7,r2
10008c24:	288a983a 	sll	r5,r5,r2
10008c28:	2c62b03a 	or	r17,r5,r17
10008c2c:	8822c03a 	cmpne	r17,r17,zero
10008c30:	8922b03a 	or	r17,r17,r4
10008c34:	0005883a 	mov	r2,zero
10008c38:	003f9206 	br	10008a84 <__alt_data_end+0xf8008a84>
10008c3c:	000b883a 	mov	r5,zero
10008c40:	003fdc06 	br	10008bb4 <__alt_data_end+0xf8008bb4>
10008c44:	000b883a 	mov	r5,zero
10008c48:	003ff706 	br	10008c28 <__alt_data_end+0xf8008c28>

10008c4c <__extendsfdf2>:
10008c4c:	200ad5fa 	srli	r5,r4,23
10008c50:	defffd04 	addi	sp,sp,-12
10008c54:	dc400115 	stw	r17,4(sp)
10008c58:	29403fcc 	andi	r5,r5,255
10008c5c:	29800044 	addi	r6,r5,1
10008c60:	04402034 	movhi	r17,128
10008c64:	dc000015 	stw	r16,0(sp)
10008c68:	8c7fffc4 	addi	r17,r17,-1
10008c6c:	dfc00215 	stw	ra,8(sp)
10008c70:	31803fcc 	andi	r6,r6,255
10008c74:	00800044 	movi	r2,1
10008c78:	8922703a 	and	r17,r17,r4
10008c7c:	2020d7fa 	srli	r16,r4,31
10008c80:	1180110e 	bge	r2,r6,10008cc8 <__extendsfdf2+0x7c>
10008c84:	880ed0fa 	srli	r7,r17,3
10008c88:	8822977a 	slli	r17,r17,29
10008c8c:	2940e004 	addi	r5,r5,896
10008c90:	2941ffcc 	andi	r5,r5,2047
10008c94:	280c953a 	slli	r6,r5,20
10008c98:	01400434 	movhi	r5,16
10008c9c:	800697fa 	slli	r3,r16,31
10008ca0:	297fffc4 	addi	r5,r5,-1
10008ca4:	394a703a 	and	r5,r7,r5
10008ca8:	298ab03a 	or	r5,r5,r6
10008cac:	8805883a 	mov	r2,r17
10008cb0:	28c6b03a 	or	r3,r5,r3
10008cb4:	dfc00217 	ldw	ra,8(sp)
10008cb8:	dc400117 	ldw	r17,4(sp)
10008cbc:	dc000017 	ldw	r16,0(sp)
10008cc0:	dec00304 	addi	sp,sp,12
10008cc4:	f800283a 	ret
10008cc8:	2800111e 	bne	r5,zero,10008d10 <__extendsfdf2+0xc4>
10008ccc:	88001c26 	beq	r17,zero,10008d40 <__extendsfdf2+0xf4>
10008cd0:	8809883a 	mov	r4,r17
10008cd4:	0008ef40 	call	10008ef4 <__clzsi2>
10008cd8:	00c00284 	movi	r3,10
10008cdc:	18801b16 	blt	r3,r2,10008d4c <__extendsfdf2+0x100>
10008ce0:	01c002c4 	movi	r7,11
10008ce4:	388fc83a 	sub	r7,r7,r2
10008ce8:	10c00544 	addi	r3,r2,21
10008cec:	89ced83a 	srl	r7,r17,r7
10008cf0:	88e2983a 	sll	r17,r17,r3
10008cf4:	0180e244 	movi	r6,905
10008cf8:	308bc83a 	sub	r5,r6,r2
10008cfc:	01800434 	movhi	r6,16
10008d00:	31bfffc4 	addi	r6,r6,-1
10008d04:	398e703a 	and	r7,r7,r6
10008d08:	2941ffcc 	andi	r5,r5,2047
10008d0c:	003fe006 	br	10008c90 <__alt_data_end+0xf8008c90>
10008d10:	88000826 	beq	r17,zero,10008d34 <__extendsfdf2+0xe8>
10008d14:	880ed0fa 	srli	r7,r17,3
10008d18:	00800434 	movhi	r2,16
10008d1c:	10bfffc4 	addi	r2,r2,-1
10008d20:	39c00234 	orhi	r7,r7,8
10008d24:	8822977a 	slli	r17,r17,29
10008d28:	388e703a 	and	r7,r7,r2
10008d2c:	0141ffc4 	movi	r5,2047
10008d30:	003fd706 	br	10008c90 <__alt_data_end+0xf8008c90>
10008d34:	0141ffc4 	movi	r5,2047
10008d38:	000f883a 	mov	r7,zero
10008d3c:	003fd406 	br	10008c90 <__alt_data_end+0xf8008c90>
10008d40:	000b883a 	mov	r5,zero
10008d44:	000f883a 	mov	r7,zero
10008d48:	003fd106 	br	10008c90 <__alt_data_end+0xf8008c90>
10008d4c:	11fffd44 	addi	r7,r2,-11
10008d50:	89ce983a 	sll	r7,r17,r7
10008d54:	0023883a 	mov	r17,zero
10008d58:	003fe606 	br	10008cf4 <__alt_data_end+0xf8008cf4>

10008d5c <__truncdfsf2>:
10008d5c:	2810d53a 	srli	r8,r5,20
10008d60:	01c00434 	movhi	r7,16
10008d64:	39ffffc4 	addi	r7,r7,-1
10008d68:	29ce703a 	and	r7,r5,r7
10008d6c:	380e90fa 	slli	r7,r7,3
10008d70:	4201ffcc 	andi	r8,r8,2047
10008d74:	200cd77a 	srli	r6,r4,29
10008d78:	42400044 	addi	r9,r8,1
10008d7c:	4a41ffcc 	andi	r9,r9,2047
10008d80:	00800044 	movi	r2,1
10008d84:	398cb03a 	or	r6,r7,r6
10008d88:	280ad7fa 	srli	r5,r5,31
10008d8c:	200e90fa 	slli	r7,r4,3
10008d90:	1240230e 	bge	r2,r9,10008e20 <__truncdfsf2+0xc4>
10008d94:	40ff2004 	addi	r3,r8,-896
10008d98:	00803f84 	movi	r2,254
10008d9c:	10c01516 	blt	r2,r3,10008df4 <__truncdfsf2+0x98>
10008da0:	00c02d0e 	bge	zero,r3,10008e58 <__truncdfsf2+0xfc>
10008da4:	200891ba 	slli	r4,r4,6
10008da8:	300c90fa 	slli	r6,r6,3
10008dac:	380ed77a 	srli	r7,r7,29
10008db0:	2008c03a 	cmpne	r4,r4,zero
10008db4:	310cb03a 	or	r6,r6,r4
10008db8:	31ccb03a 	or	r6,r6,r7
10008dbc:	308001cc 	andi	r2,r6,7
10008dc0:	10000426 	beq	r2,zero,10008dd4 <__truncdfsf2+0x78>
10008dc4:	310003cc 	andi	r4,r6,15
10008dc8:	00800104 	movi	r2,4
10008dcc:	20800126 	beq	r4,r2,10008dd4 <__truncdfsf2+0x78>
10008dd0:	31800104 	addi	r6,r6,4
10008dd4:	3081002c 	andhi	r2,r6,1024
10008dd8:	10002326 	beq	r2,zero,10008e68 <__truncdfsf2+0x10c>
10008ddc:	18c00044 	addi	r3,r3,1
10008de0:	00803fc4 	movi	r2,255
10008de4:	18800326 	beq	r3,r2,10008df4 <__truncdfsf2+0x98>
10008de8:	300c91ba 	slli	r6,r6,6
10008dec:	300cd27a 	srli	r6,r6,9
10008df0:	00000206 	br	10008dfc <__truncdfsf2+0xa0>
10008df4:	00ffffc4 	movi	r3,-1
10008df8:	000d883a 	mov	r6,zero
10008dfc:	18c03fcc 	andi	r3,r3,255
10008e00:	180895fa 	slli	r4,r3,23
10008e04:	00c02034 	movhi	r3,128
10008e08:	280a97fa 	slli	r5,r5,31
10008e0c:	18ffffc4 	addi	r3,r3,-1
10008e10:	30c6703a 	and	r3,r6,r3
10008e14:	1906b03a 	or	r3,r3,r4
10008e18:	1944b03a 	or	r2,r3,r5
10008e1c:	f800283a 	ret
10008e20:	4000071e 	bne	r8,zero,10008e40 <__truncdfsf2+0xe4>
10008e24:	31ccb03a 	or	r6,r6,r7
10008e28:	30000d1e 	bne	r6,zero,10008e60 <__truncdfsf2+0x104>
10008e2c:	0007883a 	mov	r3,zero
10008e30:	00802034 	movhi	r2,128
10008e34:	10bfffc4 	addi	r2,r2,-1
10008e38:	308c703a 	and	r6,r6,r2
10008e3c:	003fef06 	br	10008dfc <__alt_data_end+0xf8008dfc>
10008e40:	31c8b03a 	or	r4,r6,r7
10008e44:	203feb26 	beq	r4,zero,10008df4 <__alt_data_end+0xf8008df4>
10008e48:	300c90fa 	slli	r6,r6,3
10008e4c:	00c03fc4 	movi	r3,255
10008e50:	31808034 	orhi	r6,r6,512
10008e54:	003fd906 	br	10008dbc <__alt_data_end+0xf8008dbc>
10008e58:	00bffa44 	movi	r2,-23
10008e5c:	1880090e 	bge	r3,r2,10008e84 <__truncdfsf2+0x128>
10008e60:	01800144 	movi	r6,5
10008e64:	0007883a 	mov	r3,zero
10008e68:	00803fc4 	movi	r2,255
10008e6c:	300cd0fa 	srli	r6,r6,3
10008e70:	18bfef1e 	bne	r3,r2,10008e30 <__alt_data_end+0xf8008e30>
10008e74:	303fdf26 	beq	r6,zero,10008df4 <__alt_data_end+0xf8008df4>
10008e78:	31801034 	orhi	r6,r6,64
10008e7c:	00ffffc4 	movi	r3,-1
10008e80:	003feb06 	br	10008e30 <__alt_data_end+0xf8008e30>
10008e84:	0080e784 	movi	r2,926
10008e88:	1205c83a 	sub	r2,r2,r8
10008e8c:	00c007c4 	movi	r3,31
10008e90:	31802034 	orhi	r6,r6,128
10008e94:	18800916 	blt	r3,r2,10008ebc <__truncdfsf2+0x160>
10008e98:	423f2084 	addi	r8,r8,-894
10008e9c:	3a06983a 	sll	r3,r7,r8
10008ea0:	3210983a 	sll	r8,r6,r8
10008ea4:	388ed83a 	srl	r7,r7,r2
10008ea8:	180cc03a 	cmpne	r6,r3,zero
10008eac:	418cb03a 	or	r6,r8,r6
10008eb0:	31ccb03a 	or	r6,r6,r7
10008eb4:	0007883a 	mov	r3,zero
10008eb8:	003fc006 	br	10008dbc <__alt_data_end+0xf8008dbc>
10008ebc:	00c0df84 	movi	r3,894
10008ec0:	1a07c83a 	sub	r3,r3,r8
10008ec4:	01000804 	movi	r4,32
10008ec8:	30c6d83a 	srl	r3,r6,r3
10008ecc:	11000726 	beq	r2,r4,10008eec <__truncdfsf2+0x190>
10008ed0:	423f2884 	addi	r8,r8,-862
10008ed4:	3210983a 	sll	r8,r6,r8
10008ed8:	41ceb03a 	or	r7,r8,r7
10008edc:	380ec03a 	cmpne	r7,r7,zero
10008ee0:	38ccb03a 	or	r6,r7,r3
10008ee4:	0007883a 	mov	r3,zero
10008ee8:	003fb406 	br	10008dbc <__alt_data_end+0xf8008dbc>
10008eec:	0011883a 	mov	r8,zero
10008ef0:	003ff906 	br	10008ed8 <__alt_data_end+0xf8008ed8>

10008ef4 <__clzsi2>:
10008ef4:	00bfffd4 	movui	r2,65535
10008ef8:	11000b36 	bltu	r2,r4,10008f28 <__clzsi2+0x34>
10008efc:	00803fc4 	movi	r2,255
10008f00:	1100122e 	bgeu	r2,r4,10008f4c <__clzsi2+0x58>
10008f04:	00c00204 	movi	r3,8
10008f08:	01400604 	movi	r5,24
10008f0c:	20c8d83a 	srl	r4,r4,r3
10008f10:	008400b4 	movhi	r2,4098
10008f14:	10a45f04 	addi	r2,r2,-28292
10008f18:	1109883a 	add	r4,r2,r4
10008f1c:	20800003 	ldbu	r2,0(r4)
10008f20:	2885c83a 	sub	r2,r5,r2
10008f24:	f800283a 	ret
10008f28:	00804034 	movhi	r2,256
10008f2c:	10bfffc4 	addi	r2,r2,-1
10008f30:	11000336 	bltu	r2,r4,10008f40 <__clzsi2+0x4c>
10008f34:	00c00404 	movi	r3,16
10008f38:	180b883a 	mov	r5,r3
10008f3c:	003ff306 	br	10008f0c <__alt_data_end+0xf8008f0c>
10008f40:	00c00604 	movi	r3,24
10008f44:	01400204 	movi	r5,8
10008f48:	003ff006 	br	10008f0c <__alt_data_end+0xf8008f0c>
10008f4c:	0007883a 	mov	r3,zero
10008f50:	01400804 	movi	r5,32
10008f54:	003fed06 	br	10008f0c <__alt_data_end+0xf8008f0c>

10008f58 <memcpy>:
10008f58:	deffff04 	addi	sp,sp,-4
10008f5c:	dc000015 	stw	r16,0(sp)
10008f60:	00c003c4 	movi	r3,15
10008f64:	2005883a 	mov	r2,r4
10008f68:	1980432e 	bgeu	r3,r6,10009078 <memcpy+0x120>
10008f6c:	2146b03a 	or	r3,r4,r5
10008f70:	18c000cc 	andi	r3,r3,3
10008f74:	1800421e 	bne	r3,zero,10009080 <memcpy+0x128>
10008f78:	343ffc04 	addi	r16,r6,-16
10008f7c:	8020d13a 	srli	r16,r16,4
10008f80:	28c00104 	addi	r3,r5,4
10008f84:	23400104 	addi	r13,r4,4
10008f88:	801e913a 	slli	r15,r16,4
10008f8c:	2b000204 	addi	r12,r5,8
10008f90:	22c00204 	addi	r11,r4,8
10008f94:	7bc00504 	addi	r15,r15,20
10008f98:	2a800304 	addi	r10,r5,12
10008f9c:	22400304 	addi	r9,r4,12
10008fa0:	2bdf883a 	add	r15,r5,r15
10008fa4:	2811883a 	mov	r8,r5
10008fa8:	200f883a 	mov	r7,r4
10008fac:	41000017 	ldw	r4,0(r8)
10008fb0:	39c00404 	addi	r7,r7,16
10008fb4:	18c00404 	addi	r3,r3,16
10008fb8:	393ffc15 	stw	r4,-16(r7)
10008fbc:	1bbffc17 	ldw	r14,-16(r3)
10008fc0:	6b400404 	addi	r13,r13,16
10008fc4:	5ac00404 	addi	r11,r11,16
10008fc8:	6bbffc15 	stw	r14,-16(r13)
10008fcc:	63800017 	ldw	r14,0(r12)
10008fd0:	4a400404 	addi	r9,r9,16
10008fd4:	42000404 	addi	r8,r8,16
10008fd8:	5bbffc15 	stw	r14,-16(r11)
10008fdc:	53800017 	ldw	r14,0(r10)
10008fe0:	63000404 	addi	r12,r12,16
10008fe4:	52800404 	addi	r10,r10,16
10008fe8:	4bbffc15 	stw	r14,-16(r9)
10008fec:	1bffef1e 	bne	r3,r15,10008fac <__alt_data_end+0xf8008fac>
10008ff0:	81c00044 	addi	r7,r16,1
10008ff4:	380e913a 	slli	r7,r7,4
10008ff8:	310003cc 	andi	r4,r6,15
10008ffc:	02c000c4 	movi	r11,3
10009000:	11c7883a 	add	r3,r2,r7
10009004:	29cb883a 	add	r5,r5,r7
10009008:	59001f2e 	bgeu	r11,r4,10009088 <memcpy+0x130>
1000900c:	1813883a 	mov	r9,r3
10009010:	2811883a 	mov	r8,r5
10009014:	200f883a 	mov	r7,r4
10009018:	42800017 	ldw	r10,0(r8)
1000901c:	4a400104 	addi	r9,r9,4
10009020:	39ffff04 	addi	r7,r7,-4
10009024:	4abfff15 	stw	r10,-4(r9)
10009028:	42000104 	addi	r8,r8,4
1000902c:	59fffa36 	bltu	r11,r7,10009018 <__alt_data_end+0xf8009018>
10009030:	213fff04 	addi	r4,r4,-4
10009034:	2008d0ba 	srli	r4,r4,2
10009038:	318000cc 	andi	r6,r6,3
1000903c:	21000044 	addi	r4,r4,1
10009040:	2109883a 	add	r4,r4,r4
10009044:	2109883a 	add	r4,r4,r4
10009048:	1907883a 	add	r3,r3,r4
1000904c:	290b883a 	add	r5,r5,r4
10009050:	30000626 	beq	r6,zero,1000906c <memcpy+0x114>
10009054:	198d883a 	add	r6,r3,r6
10009058:	29c00003 	ldbu	r7,0(r5)
1000905c:	18c00044 	addi	r3,r3,1
10009060:	29400044 	addi	r5,r5,1
10009064:	19ffffc5 	stb	r7,-1(r3)
10009068:	19bffb1e 	bne	r3,r6,10009058 <__alt_data_end+0xf8009058>
1000906c:	dc000017 	ldw	r16,0(sp)
10009070:	dec00104 	addi	sp,sp,4
10009074:	f800283a 	ret
10009078:	2007883a 	mov	r3,r4
1000907c:	003ff406 	br	10009050 <__alt_data_end+0xf8009050>
10009080:	2007883a 	mov	r3,r4
10009084:	003ff306 	br	10009054 <__alt_data_end+0xf8009054>
10009088:	200d883a 	mov	r6,r4
1000908c:	003ff006 	br	10009050 <__alt_data_end+0xf8009050>

10009090 <_printf_r>:
10009090:	defffd04 	addi	sp,sp,-12
10009094:	dfc00015 	stw	ra,0(sp)
10009098:	d9800115 	stw	r6,4(sp)
1000909c:	d9c00215 	stw	r7,8(sp)
100090a0:	280d883a 	mov	r6,r5
100090a4:	21400217 	ldw	r5,8(r4)
100090a8:	d9c00104 	addi	r7,sp,4
100090ac:	00092d80 	call	100092d8 <___vfprintf_internal_r>
100090b0:	dfc00017 	ldw	ra,0(sp)
100090b4:	dec00304 	addi	sp,sp,12
100090b8:	f800283a 	ret

100090bc <printf>:
100090bc:	defffc04 	addi	sp,sp,-16
100090c0:	dfc00015 	stw	ra,0(sp)
100090c4:	d9400115 	stw	r5,4(sp)
100090c8:	d9800215 	stw	r6,8(sp)
100090cc:	d9c00315 	stw	r7,12(sp)
100090d0:	008400b4 	movhi	r2,4098
100090d4:	10abcb04 	addi	r2,r2,-20692
100090d8:	10800017 	ldw	r2,0(r2)
100090dc:	200b883a 	mov	r5,r4
100090e0:	d9800104 	addi	r6,sp,4
100090e4:	11000217 	ldw	r4,8(r2)
100090e8:	000b3d40 	call	1000b3d4 <__vfprintf_internal>
100090ec:	dfc00017 	ldw	ra,0(sp)
100090f0:	dec00404 	addi	sp,sp,16
100090f4:	f800283a 	ret

100090f8 <_puts_r>:
100090f8:	defff604 	addi	sp,sp,-40
100090fc:	dc000715 	stw	r16,28(sp)
10009100:	2021883a 	mov	r16,r4
10009104:	2809883a 	mov	r4,r5
10009108:	dc400815 	stw	r17,32(sp)
1000910c:	dfc00915 	stw	ra,36(sp)
10009110:	2823883a 	mov	r17,r5
10009114:	00092400 	call	10009240 <strlen>
10009118:	00c400b4 	movhi	r3,4098
1000911c:	18ebcb04 	addi	r3,r3,-20692
10009120:	18c00017 	ldw	r3,0(r3)
10009124:	11000044 	addi	r4,r2,1
10009128:	d8800115 	stw	r2,4(sp)
1000912c:	18c00217 	ldw	r3,8(r3)
10009130:	014400b4 	movhi	r5,4098
10009134:	29649f04 	addi	r5,r5,-28036
10009138:	1880030b 	ldhu	r2,12(r3)
1000913c:	d9400215 	stw	r5,8(sp)
10009140:	d9000615 	stw	r4,24(sp)
10009144:	01400044 	movi	r5,1
10009148:	01000084 	movi	r4,2
1000914c:	d9000515 	stw	r4,20(sp)
10009150:	dc400015 	stw	r17,0(sp)
10009154:	d9400315 	stw	r5,12(sp)
10009158:	dec00415 	stw	sp,16(sp)
1000915c:	1108000c 	andi	r4,r2,8192
10009160:	2000061e 	bne	r4,zero,1000917c <_puts_r+0x84>
10009164:	19401917 	ldw	r5,100(r3)
10009168:	0137ffc4 	movi	r4,-8193
1000916c:	10880014 	ori	r2,r2,8192
10009170:	2908703a 	and	r4,r5,r4
10009174:	1880030d 	sth	r2,12(r3)
10009178:	19001915 	stw	r4,100(r3)
1000917c:	81400217 	ldw	r5,8(r16)
10009180:	8009883a 	mov	r4,r16
10009184:	d9800404 	addi	r6,sp,16
10009188:	000d8980 	call	1000d898 <__sfvwrite_r>
1000918c:	1000061e 	bne	r2,zero,100091a8 <_puts_r+0xb0>
10009190:	00800284 	movi	r2,10
10009194:	dfc00917 	ldw	ra,36(sp)
10009198:	dc400817 	ldw	r17,32(sp)
1000919c:	dc000717 	ldw	r16,28(sp)
100091a0:	dec00a04 	addi	sp,sp,40
100091a4:	f800283a 	ret
100091a8:	00bfffc4 	movi	r2,-1
100091ac:	003ff906 	br	10009194 <__alt_data_end+0xf8009194>

100091b0 <puts>:
100091b0:	008400b4 	movhi	r2,4098
100091b4:	10abcb04 	addi	r2,r2,-20692
100091b8:	200b883a 	mov	r5,r4
100091bc:	11000017 	ldw	r4,0(r2)
100091c0:	00090f81 	jmpi	100090f8 <_puts_r>

100091c4 <srand>:
100091c4:	008400b4 	movhi	r2,4098
100091c8:	10abcb04 	addi	r2,r2,-20692
100091cc:	10800017 	ldw	r2,0(r2)
100091d0:	11002915 	stw	r4,164(r2)
100091d4:	10002a15 	stw	zero,168(r2)
100091d8:	f800283a 	ret

100091dc <rand>:
100091dc:	008400b4 	movhi	r2,4098
100091e0:	defffe04 	addi	sp,sp,-8
100091e4:	10abcb04 	addi	r2,r2,-20692
100091e8:	dc000015 	stw	r16,0(sp)
100091ec:	14000017 	ldw	r16,0(r2)
100091f0:	dfc00115 	stw	ra,4(sp)
100091f4:	01932574 	movhi	r6,19605
100091f8:	81002917 	ldw	r4,164(r16)
100091fc:	81402a17 	ldw	r5,168(r16)
10009200:	01d614b4 	movhi	r7,22610
10009204:	319fcb44 	addi	r6,r6,32557
10009208:	39fd0b44 	addi	r7,r7,-3027
1000920c:	001238c0 	call	1001238c <__muldi3>
10009210:	11000044 	addi	r4,r2,1
10009214:	2085803a 	cmpltu	r2,r4,r2
10009218:	10c7883a 	add	r3,r2,r3
1000921c:	00a00034 	movhi	r2,32768
10009220:	10bfffc4 	addi	r2,r2,-1
10009224:	1884703a 	and	r2,r3,r2
10009228:	81002915 	stw	r4,164(r16)
1000922c:	80c02a15 	stw	r3,168(r16)
10009230:	dfc00117 	ldw	ra,4(sp)
10009234:	dc000017 	ldw	r16,0(sp)
10009238:	dec00204 	addi	sp,sp,8
1000923c:	f800283a 	ret

10009240 <strlen>:
10009240:	208000cc 	andi	r2,r4,3
10009244:	10002026 	beq	r2,zero,100092c8 <strlen+0x88>
10009248:	20800007 	ldb	r2,0(r4)
1000924c:	10002026 	beq	r2,zero,100092d0 <strlen+0x90>
10009250:	2005883a 	mov	r2,r4
10009254:	00000206 	br	10009260 <strlen+0x20>
10009258:	10c00007 	ldb	r3,0(r2)
1000925c:	18001826 	beq	r3,zero,100092c0 <strlen+0x80>
10009260:	10800044 	addi	r2,r2,1
10009264:	10c000cc 	andi	r3,r2,3
10009268:	183ffb1e 	bne	r3,zero,10009258 <__alt_data_end+0xf8009258>
1000926c:	10c00017 	ldw	r3,0(r2)
10009270:	01ffbff4 	movhi	r7,65279
10009274:	39ffbfc4 	addi	r7,r7,-257
10009278:	00ca303a 	nor	r5,zero,r3
1000927c:	01a02074 	movhi	r6,32897
10009280:	19c7883a 	add	r3,r3,r7
10009284:	31a02004 	addi	r6,r6,-32640
10009288:	1946703a 	and	r3,r3,r5
1000928c:	1986703a 	and	r3,r3,r6
10009290:	1800091e 	bne	r3,zero,100092b8 <strlen+0x78>
10009294:	10800104 	addi	r2,r2,4
10009298:	10c00017 	ldw	r3,0(r2)
1000929c:	19cb883a 	add	r5,r3,r7
100092a0:	00c6303a 	nor	r3,zero,r3
100092a4:	28c6703a 	and	r3,r5,r3
100092a8:	1986703a 	and	r3,r3,r6
100092ac:	183ff926 	beq	r3,zero,10009294 <__alt_data_end+0xf8009294>
100092b0:	00000106 	br	100092b8 <strlen+0x78>
100092b4:	10800044 	addi	r2,r2,1
100092b8:	10c00007 	ldb	r3,0(r2)
100092bc:	183ffd1e 	bne	r3,zero,100092b4 <__alt_data_end+0xf80092b4>
100092c0:	1105c83a 	sub	r2,r2,r4
100092c4:	f800283a 	ret
100092c8:	2005883a 	mov	r2,r4
100092cc:	003fe706 	br	1000926c <__alt_data_end+0xf800926c>
100092d0:	0005883a 	mov	r2,zero
100092d4:	f800283a 	ret

100092d8 <___vfprintf_internal_r>:
100092d8:	defeb604 	addi	sp,sp,-1320
100092dc:	dfc14915 	stw	ra,1316(sp)
100092e0:	ddc14715 	stw	r23,1308(sp)
100092e4:	dd814615 	stw	r22,1304(sp)
100092e8:	202f883a 	mov	r23,r4
100092ec:	282d883a 	mov	r22,r5
100092f0:	d9812a15 	stw	r6,1192(sp)
100092f4:	d9c12d15 	stw	r7,1204(sp)
100092f8:	df014815 	stw	fp,1312(sp)
100092fc:	dd414515 	stw	r21,1300(sp)
10009300:	dd014415 	stw	r20,1296(sp)
10009304:	dcc14315 	stw	r19,1292(sp)
10009308:	dc814215 	stw	r18,1288(sp)
1000930c:	dc414115 	stw	r17,1284(sp)
10009310:	dc014015 	stw	r16,1280(sp)
10009314:	000df580 	call	1000df58 <_localeconv_r>
10009318:	10800017 	ldw	r2,0(r2)
1000931c:	1009883a 	mov	r4,r2
10009320:	d8813515 	stw	r2,1236(sp)
10009324:	00092400 	call	10009240 <strlen>
10009328:	d8813815 	stw	r2,1248(sp)
1000932c:	b8000226 	beq	r23,zero,10009338 <___vfprintf_internal_r+0x60>
10009330:	b8800e17 	ldw	r2,56(r23)
10009334:	10010526 	beq	r2,zero,1000974c <___vfprintf_internal_r+0x474>
10009338:	b0c0030b 	ldhu	r3,12(r22)
1000933c:	1908000c 	andi	r4,r3,8192
10009340:	1805883a 	mov	r2,r3
10009344:	2000071e 	bne	r4,zero,10009364 <___vfprintf_internal_r+0x8c>
10009348:	b1001917 	ldw	r4,100(r22)
1000934c:	18880014 	ori	r2,r3,8192
10009350:	00f7ffc4 	movi	r3,-8193
10009354:	20c8703a 	and	r4,r4,r3
10009358:	b080030d 	sth	r2,12(r22)
1000935c:	1007883a 	mov	r3,r2
10009360:	b1001915 	stw	r4,100(r22)
10009364:	1100020c 	andi	r4,r2,8
10009368:	2000a826 	beq	r4,zero,1000960c <___vfprintf_internal_r+0x334>
1000936c:	b1000417 	ldw	r4,16(r22)
10009370:	2000a626 	beq	r4,zero,1000960c <___vfprintf_internal_r+0x334>
10009374:	1080068c 	andi	r2,r2,26
10009378:	01000284 	movi	r4,10
1000937c:	1100ac26 	beq	r2,r4,10009630 <___vfprintf_internal_r+0x358>
10009380:	d8c10e04 	addi	r3,sp,1080
10009384:	d9010dc4 	addi	r4,sp,1079
10009388:	d9400404 	addi	r5,sp,16
1000938c:	050400b4 	movhi	r20,4098
10009390:	1905c83a 	sub	r2,r3,r4
10009394:	a524b084 	addi	r20,r20,-27966
10009398:	d8c12815 	stw	r3,1184(sp)
1000939c:	d9012915 	stw	r4,1188(sp)
100093a0:	d9411e15 	stw	r5,1144(sp)
100093a4:	d8012015 	stw	zero,1152(sp)
100093a8:	d8011f15 	stw	zero,1148(sp)
100093ac:	d8013315 	stw	zero,1228(sp)
100093b0:	d8013715 	stw	zero,1244(sp)
100093b4:	d8013915 	stw	zero,1252(sp)
100093b8:	d8013b15 	stw	zero,1260(sp)
100093bc:	d8013a15 	stw	zero,1256(sp)
100093c0:	d8012f15 	stw	zero,1212(sp)
100093c4:	2811883a 	mov	r8,r5
100093c8:	d8813c15 	stw	r2,1264(sp)
100093cc:	d8c12a17 	ldw	r3,1192(sp)
100093d0:	18800007 	ldb	r2,0(r3)
100093d4:	10021326 	beq	r2,zero,10009c24 <___vfprintf_internal_r+0x94c>
100093d8:	00c00944 	movi	r3,37
100093dc:	dc012a17 	ldw	r16,1192(sp)
100093e0:	10c0021e 	bne	r2,r3,100093ec <___vfprintf_internal_r+0x114>
100093e4:	00001606 	br	10009440 <___vfprintf_internal_r+0x168>
100093e8:	10c08526 	beq	r2,r3,10009600 <___vfprintf_internal_r+0x328>
100093ec:	84000044 	addi	r16,r16,1
100093f0:	80800007 	ldb	r2,0(r16)
100093f4:	103ffc1e 	bne	r2,zero,100093e8 <__alt_data_end+0xf80093e8>
100093f8:	d9012a17 	ldw	r4,1192(sp)
100093fc:	8123c83a 	sub	r17,r16,r4
10009400:	88000f26 	beq	r17,zero,10009440 <___vfprintf_internal_r+0x168>
10009404:	d8812a17 	ldw	r2,1192(sp)
10009408:	d8c12017 	ldw	r3,1152(sp)
1000940c:	44400115 	stw	r17,4(r8)
10009410:	40800015 	stw	r2,0(r8)
10009414:	d8811f17 	ldw	r2,1148(sp)
10009418:	1c47883a 	add	r3,r3,r17
1000941c:	d8c12015 	stw	r3,1152(sp)
10009420:	10800044 	addi	r2,r2,1
10009424:	d8811f15 	stw	r2,1148(sp)
10009428:	00c001c4 	movi	r3,7
1000942c:	1880b516 	blt	r3,r2,10009704 <___vfprintf_internal_r+0x42c>
10009430:	42000204 	addi	r8,r8,8
10009434:	d8c12f17 	ldw	r3,1212(sp)
10009438:	1c47883a 	add	r3,r3,r17
1000943c:	d8c12f15 	stw	r3,1212(sp)
10009440:	80800007 	ldb	r2,0(r16)
10009444:	1000b626 	beq	r2,zero,10009720 <___vfprintf_internal_r+0x448>
10009448:	80800044 	addi	r2,r16,1
1000944c:	84000047 	ldb	r16,1(r16)
10009450:	0027883a 	mov	r19,zero
10009454:	0039883a 	mov	fp,zero
10009458:	dcc12b05 	stb	r19,1196(sp)
1000945c:	d8012785 	stb	zero,1182(sp)
10009460:	027fffc4 	movi	r9,-1
10009464:	d8012e15 	stw	zero,1208(sp)
10009468:	04401604 	movi	r17,88
1000946c:	04800244 	movi	r18,9
10009470:	da012a15 	stw	r8,1192(sp)
10009474:	e027883a 	mov	r19,fp
10009478:	17000044 	addi	fp,r2,1
1000947c:	80bff804 	addi	r2,r16,-32
10009480:	88831236 	bltu	r17,r2,1000a0cc <___vfprintf_internal_r+0xdf4>
10009484:	100490ba 	slli	r2,r2,2
10009488:	01040074 	movhi	r4,4097
1000948c:	21252704 	addi	r4,r4,-27492
10009490:	1105883a 	add	r2,r2,r4
10009494:	10800017 	ldw	r2,0(r2)
10009498:	1000683a 	jmp	r2
1000949c:	10009fe8 	cmpgeui	zero,r2,639
100094a0:	1000a0cc 	andi	zero,r2,643
100094a4:	1000a0cc 	andi	zero,r2,643
100094a8:	1000a004 	addi	zero,r2,640
100094ac:	1000a0cc 	andi	zero,r2,643
100094b0:	1000a0cc 	andi	zero,r2,643
100094b4:	1000a0cc 	andi	zero,r2,643
100094b8:	1000a0cc 	andi	zero,r2,643
100094bc:	1000a0cc 	andi	zero,r2,643
100094c0:	1000a0cc 	andi	zero,r2,643
100094c4:	1000a014 	ori	zero,r2,640
100094c8:	1000a03c 	xorhi	zero,r2,640
100094cc:	1000a0cc 	andi	zero,r2,643
100094d0:	10009758 	cmpnei	zero,r2,605
100094d4:	10009768 	cmpgeui	zero,r2,605
100094d8:	1000a0cc 	andi	zero,r2,643
100094dc:	100097b8 	rdprs	zero,r2,606
100094e0:	100097c8 	cmpgei	zero,r2,607
100094e4:	100097c8 	cmpgei	zero,r2,607
100094e8:	100097c8 	cmpgei	zero,r2,607
100094ec:	100097c8 	cmpgei	zero,r2,607
100094f0:	100097c8 	cmpgei	zero,r2,607
100094f4:	100097c8 	cmpgei	zero,r2,607
100094f8:	100097c8 	cmpgei	zero,r2,607
100094fc:	100097c8 	cmpgei	zero,r2,607
10009500:	100097c8 	cmpgei	zero,r2,607
10009504:	1000a0cc 	andi	zero,r2,643
10009508:	1000a0cc 	andi	zero,r2,643
1000950c:	1000a0cc 	andi	zero,r2,643
10009510:	1000a0cc 	andi	zero,r2,643
10009514:	1000a0cc 	andi	zero,r2,643
10009518:	1000a0cc 	andi	zero,r2,643
1000951c:	1000a0cc 	andi	zero,r2,643
10009520:	1000a0cc 	andi	zero,r2,643
10009524:	1000a0cc 	andi	zero,r2,643
10009528:	1000a0cc 	andi	zero,r2,643
1000952c:	1000980c 	andi	zero,r2,608
10009530:	10009c2c 	andhi	zero,r2,624
10009534:	1000a0cc 	andi	zero,r2,643
10009538:	10009c2c 	andhi	zero,r2,624
1000953c:	1000a0cc 	andi	zero,r2,643
10009540:	1000a0cc 	andi	zero,r2,643
10009544:	1000a0cc 	andi	zero,r2,643
10009548:	1000a0cc 	andi	zero,r2,643
1000954c:	10009cd4 	ori	zero,r2,627
10009550:	1000a0cc 	andi	zero,r2,643
10009554:	1000a0cc 	andi	zero,r2,643
10009558:	10009ce4 	muli	zero,r2,627
1000955c:	1000a0cc 	andi	zero,r2,643
10009560:	1000a0cc 	andi	zero,r2,643
10009564:	1000a0cc 	andi	zero,r2,643
10009568:	1000a0cc 	andi	zero,r2,643
1000956c:	1000a0cc 	andi	zero,r2,643
10009570:	10009d28 	cmpgeui	zero,r2,628
10009574:	1000a0cc 	andi	zero,r2,643
10009578:	1000a0cc 	andi	zero,r2,643
1000957c:	10009d60 	cmpeqi	zero,r2,629
10009580:	1000a0cc 	andi	zero,r2,643
10009584:	1000a0cc 	andi	zero,r2,643
10009588:	1000a0cc 	andi	zero,r2,643
1000958c:	1000a0cc 	andi	zero,r2,643
10009590:	1000a0cc 	andi	zero,r2,643
10009594:	1000a0cc 	andi	zero,r2,643
10009598:	1000a0cc 	andi	zero,r2,643
1000959c:	1000a0cc 	andi	zero,r2,643
100095a0:	1000a0cc 	andi	zero,r2,643
100095a4:	1000a0cc 	andi	zero,r2,643
100095a8:	10009f9c 	xori	zero,r2,638
100095ac:	10009f48 	cmpgei	zero,r2,637
100095b0:	10009c2c 	andhi	zero,r2,624
100095b4:	10009c2c 	andhi	zero,r2,624
100095b8:	10009c2c 	andhi	zero,r2,624
100095bc:	10009f8c 	andi	zero,r2,638
100095c0:	10009f48 	cmpgei	zero,r2,637
100095c4:	1000a0cc 	andi	zero,r2,643
100095c8:	1000a0cc 	andi	zero,r2,643
100095cc:	10009e64 	muli	zero,r2,633
100095d0:	1000a0cc 	andi	zero,r2,643
100095d4:	10009e7c 	xorhi	zero,r2,633
100095d8:	10009ebc 	xorhi	zero,r2,634
100095dc:	10009efc 	xorhi	zero,r2,635
100095e0:	10009dc8 	cmpgei	zero,r2,631
100095e4:	1000a0cc 	andi	zero,r2,643
100095e8:	1000a050 	cmplti	zero,r2,641
100095ec:	1000a0cc 	andi	zero,r2,643
100095f0:	10009dd8 	cmpnei	zero,r2,631
100095f4:	1000a0cc 	andi	zero,r2,643
100095f8:	1000a0cc 	andi	zero,r2,643
100095fc:	10009e18 	cmpnei	zero,r2,632
10009600:	d9412a17 	ldw	r5,1192(sp)
10009604:	8163c83a 	sub	r17,r16,r5
10009608:	003f7d06 	br	10009400 <__alt_data_end+0xf8009400>
1000960c:	b809883a 	mov	r4,r23
10009610:	b00b883a 	mov	r5,r22
10009614:	000b3f80 	call	1000b3f8 <__swsetup_r>
10009618:	10002d1e 	bne	r2,zero,100096d0 <___vfprintf_internal_r+0x3f8>
1000961c:	b0c0030b 	ldhu	r3,12(r22)
10009620:	01000284 	movi	r4,10
10009624:	1805883a 	mov	r2,r3
10009628:	1080068c 	andi	r2,r2,26
1000962c:	113f541e 	bne	r2,r4,10009380 <__alt_data_end+0xf8009380>
10009630:	b080038b 	ldhu	r2,14(r22)
10009634:	113fffcc 	andi	r4,r2,65535
10009638:	2120001c 	xori	r4,r4,32768
1000963c:	21200004 	addi	r4,r4,-32768
10009640:	203f4f16 	blt	r4,zero,10009380 <__alt_data_end+0xf8009380>
10009644:	b2c01917 	ldw	r11,100(r22)
10009648:	b2800717 	ldw	r10,28(r22)
1000964c:	b2400917 	ldw	r9,36(r22)
10009650:	d9812a17 	ldw	r6,1192(sp)
10009654:	d9c12d17 	ldw	r7,1204(sp)
10009658:	02010004 	movi	r8,1024
1000965c:	18ffff4c 	andi	r3,r3,65533
10009660:	d881078d 	sth	r2,1054(sp)
10009664:	b809883a 	mov	r4,r23
10009668:	d8800404 	addi	r2,sp,16
1000966c:	d9410404 	addi	r5,sp,1040
10009670:	d8c1070d 	sth	r3,1052(sp)
10009674:	dac11d15 	stw	r11,1140(sp)
10009678:	da810b15 	stw	r10,1068(sp)
1000967c:	da410d15 	stw	r9,1076(sp)
10009680:	d8810415 	stw	r2,1040(sp)
10009684:	d8810815 	stw	r2,1056(sp)
10009688:	da010615 	stw	r8,1048(sp)
1000968c:	da010915 	stw	r8,1060(sp)
10009690:	d8010a15 	stw	zero,1064(sp)
10009694:	00092d80 	call	100092d8 <___vfprintf_internal_r>
10009698:	1021883a 	mov	r16,r2
1000969c:	10000416 	blt	r2,zero,100096b0 <___vfprintf_internal_r+0x3d8>
100096a0:	b809883a 	mov	r4,r23
100096a4:	d9410404 	addi	r5,sp,1040
100096a8:	000ce780 	call	1000ce78 <_fflush_r>
100096ac:	1007301e 	bne	r2,zero,1000b370 <___vfprintf_internal_r+0x2098>
100096b0:	d881070b 	ldhu	r2,1052(sp)
100096b4:	1080100c 	andi	r2,r2,64
100096b8:	10000326 	beq	r2,zero,100096c8 <___vfprintf_internal_r+0x3f0>
100096bc:	b080030b 	ldhu	r2,12(r22)
100096c0:	10801014 	ori	r2,r2,64
100096c4:	b080030d 	sth	r2,12(r22)
100096c8:	8005883a 	mov	r2,r16
100096cc:	00000106 	br	100096d4 <___vfprintf_internal_r+0x3fc>
100096d0:	00bfffc4 	movi	r2,-1
100096d4:	dfc14917 	ldw	ra,1316(sp)
100096d8:	df014817 	ldw	fp,1312(sp)
100096dc:	ddc14717 	ldw	r23,1308(sp)
100096e0:	dd814617 	ldw	r22,1304(sp)
100096e4:	dd414517 	ldw	r21,1300(sp)
100096e8:	dd014417 	ldw	r20,1296(sp)
100096ec:	dcc14317 	ldw	r19,1292(sp)
100096f0:	dc814217 	ldw	r18,1288(sp)
100096f4:	dc414117 	ldw	r17,1284(sp)
100096f8:	dc014017 	ldw	r16,1280(sp)
100096fc:	dec14a04 	addi	sp,sp,1320
10009700:	f800283a 	ret
10009704:	b809883a 	mov	r4,r23
10009708:	b00b883a 	mov	r5,r22
1000970c:	d9811e04 	addi	r6,sp,1144
10009710:	00105e00 	call	100105e0 <__sprint_r>
10009714:	1000081e 	bne	r2,zero,10009738 <___vfprintf_internal_r+0x460>
10009718:	da000404 	addi	r8,sp,16
1000971c:	003f4506 	br	10009434 <__alt_data_end+0xf8009434>
10009720:	d8812017 	ldw	r2,1152(sp)
10009724:	10000426 	beq	r2,zero,10009738 <___vfprintf_internal_r+0x460>
10009728:	b809883a 	mov	r4,r23
1000972c:	b00b883a 	mov	r5,r22
10009730:	d9811e04 	addi	r6,sp,1144
10009734:	00105e00 	call	100105e0 <__sprint_r>
10009738:	b080030b 	ldhu	r2,12(r22)
1000973c:	1080100c 	andi	r2,r2,64
10009740:	103fe31e 	bne	r2,zero,100096d0 <__alt_data_end+0xf80096d0>
10009744:	d8812f17 	ldw	r2,1212(sp)
10009748:	003fe206 	br	100096d4 <__alt_data_end+0xf80096d4>
1000974c:	b809883a 	mov	r4,r23
10009750:	000d4340 	call	1000d434 <__sinit>
10009754:	003ef806 	br	10009338 <__alt_data_end+0xf8009338>
10009758:	e005883a 	mov	r2,fp
1000975c:	9cc00114 	ori	r19,r19,4
10009760:	e4000007 	ldb	r16,0(fp)
10009764:	003f4406 	br	10009478 <__alt_data_end+0xf8009478>
10009768:	e4000007 	ldb	r16,0(fp)
1000976c:	01000a84 	movi	r4,42
10009770:	e0800044 	addi	r2,fp,1
10009774:	8106f626 	beq	r16,r4,1000b350 <___vfprintf_internal_r+0x2078>
10009778:	857ff404 	addi	r21,r16,-48
1000977c:	1039883a 	mov	fp,r2
10009780:	0013883a 	mov	r9,zero
10009784:	957f3d36 	bltu	r18,r21,1000947c <__alt_data_end+0xf800947c>
10009788:	0009883a 	mov	r4,zero
1000978c:	01400284 	movi	r5,10
10009790:	0006df00 	call	10006df0 <__mulsi3>
10009794:	e4000007 	ldb	r16,0(fp)
10009798:	a889883a 	add	r4,r21,r2
1000979c:	e7000044 	addi	fp,fp,1
100097a0:	857ff404 	addi	r21,r16,-48
100097a4:	957ff92e 	bgeu	r18,r21,1000978c <__alt_data_end+0xf800978c>
100097a8:	2013883a 	mov	r9,r4
100097ac:	203f330e 	bge	r4,zero,1000947c <__alt_data_end+0xf800947c>
100097b0:	027fffc4 	movi	r9,-1
100097b4:	003f3106 	br	1000947c <__alt_data_end+0xf800947c>
100097b8:	9cc02014 	ori	r19,r19,128
100097bc:	e005883a 	mov	r2,fp
100097c0:	e4000007 	ldb	r16,0(fp)
100097c4:	003f2c06 	br	10009478 <__alt_data_end+0xf8009478>
100097c8:	857ff404 	addi	r21,r16,-48
100097cc:	d8012e15 	stw	zero,1208(sp)
100097d0:	e021883a 	mov	r16,fp
100097d4:	0009883a 	mov	r4,zero
100097d8:	da412c15 	stw	r9,1200(sp)
100097dc:	01400284 	movi	r5,10
100097e0:	0006df00 	call	10006df0 <__mulsi3>
100097e4:	81400007 	ldb	r5,0(r16)
100097e8:	1549883a 	add	r4,r2,r21
100097ec:	e7000044 	addi	fp,fp,1
100097f0:	2d7ff404 	addi	r21,r5,-48
100097f4:	e021883a 	mov	r16,fp
100097f8:	957ff82e 	bgeu	r18,r21,100097dc <__alt_data_end+0xf80097dc>
100097fc:	2821883a 	mov	r16,r5
10009800:	d9012e15 	stw	r4,1208(sp)
10009804:	da412c17 	ldw	r9,1200(sp)
10009808:	003f1c06 	br	1000947c <__alt_data_end+0xf800947c>
1000980c:	da012a17 	ldw	r8,1192(sp)
10009810:	df012a15 	stw	fp,1192(sp)
10009814:	9839883a 	mov	fp,r19
10009818:	dcc12b03 	ldbu	r19,1196(sp)
1000981c:	e7000414 	ori	fp,fp,16
10009820:	e080080c 	andi	r2,fp,32
10009824:	dcc12785 	stb	r19,1182(sp)
10009828:	d8c12d17 	ldw	r3,1204(sp)
1000982c:	1001ce26 	beq	r2,zero,10009f68 <___vfprintf_internal_r+0xc90>
10009830:	d9012d17 	ldw	r4,1204(sp)
10009834:	18800117 	ldw	r2,4(r3)
10009838:	1c800017 	ldw	r18,0(r3)
1000983c:	21000204 	addi	r4,r4,8
10009840:	d9012d15 	stw	r4,1204(sp)
10009844:	102b883a 	mov	r21,r2
10009848:	10044916 	blt	r2,zero,1000a970 <___vfprintf_internal_r+0x1698>
1000984c:	dcc12783 	ldbu	r19,1182(sp)
10009850:	da413215 	stw	r9,1224(sp)
10009854:	00800044 	movi	r2,1
10009858:	9546b03a 	or	r3,r18,r21
1000985c:	48000216 	blt	r9,zero,10009868 <___vfprintf_internal_r+0x590>
10009860:	013fdfc4 	movi	r4,-129
10009864:	e138703a 	and	fp,fp,r4
10009868:	1802251e 	bne	r3,zero,1000a100 <___vfprintf_internal_r+0xe28>
1000986c:	48031726 	beq	r9,zero,1000a4cc <___vfprintf_internal_r+0x11f4>
10009870:	10803fcc 	andi	r2,r2,255
10009874:	00c00044 	movi	r3,1
10009878:	10c24526 	beq	r2,r3,1000a190 <___vfprintf_internal_r+0xeb8>
1000987c:	00c00084 	movi	r3,2
10009880:	10c33426 	beq	r2,r3,1000a554 <___vfprintf_internal_r+0x127c>
10009884:	d8c10e04 	addi	r3,sp,1080
10009888:	9008d0fa 	srli	r4,r18,3
1000988c:	a80a977a 	slli	r5,r21,29
10009890:	a82ad0fa 	srli	r21,r21,3
10009894:	948001cc 	andi	r18,r18,7
10009898:	90800c04 	addi	r2,r18,48
1000989c:	18ffffc4 	addi	r3,r3,-1
100098a0:	2924b03a 	or	r18,r5,r4
100098a4:	18800005 	stb	r2,0(r3)
100098a8:	9548b03a 	or	r4,r18,r21
100098ac:	203ff61e 	bne	r4,zero,10009888 <__alt_data_end+0xf8009888>
100098b0:	e100004c 	andi	r4,fp,1
100098b4:	d8c13115 	stw	r3,1220(sp)
100098b8:	20039a1e 	bne	r4,zero,1000a724 <___vfprintf_internal_r+0x144c>
100098bc:	d8812817 	ldw	r2,1184(sp)
100098c0:	10e3c83a 	sub	r17,r2,r3
100098c4:	8805883a 	mov	r2,r17
100098c8:	8a40010e 	bge	r17,r9,100098d0 <___vfprintf_internal_r+0x5f8>
100098cc:	4805883a 	mov	r2,r9
100098d0:	d8812b15 	stw	r2,1196(sp)
100098d4:	d8013415 	stw	zero,1232(sp)
100098d8:	98803fcc 	andi	r2,r19,255
100098dc:	1080201c 	xori	r2,r2,128
100098e0:	10bfe004 	addi	r2,r2,-128
100098e4:	10000326 	beq	r2,zero,100098f4 <___vfprintf_internal_r+0x61c>
100098e8:	d8c12b17 	ldw	r3,1196(sp)
100098ec:	18c00044 	addi	r3,r3,1
100098f0:	d8c12b15 	stw	r3,1196(sp)
100098f4:	e0c0008c 	andi	r3,fp,2
100098f8:	d8c12c15 	stw	r3,1200(sp)
100098fc:	18000326 	beq	r3,zero,1000990c <___vfprintf_internal_r+0x634>
10009900:	d8c12b17 	ldw	r3,1196(sp)
10009904:	18c00084 	addi	r3,r3,2
10009908:	d8c12b15 	stw	r3,1196(sp)
1000990c:	e0c0210c 	andi	r3,fp,132
10009910:	d8c13015 	stw	r3,1216(sp)
10009914:	1801f81e 	bne	r3,zero,1000a0f8 <___vfprintf_internal_r+0xe20>
10009918:	d9012e17 	ldw	r4,1208(sp)
1000991c:	d8c12b17 	ldw	r3,1196(sp)
10009920:	20ebc83a 	sub	r21,r4,r3
10009924:	0541f40e 	bge	zero,r21,1000a0f8 <___vfprintf_internal_r+0xe20>
10009928:	02400404 	movi	r9,16
1000992c:	d8c12017 	ldw	r3,1152(sp)
10009930:	d8811f17 	ldw	r2,1148(sp)
10009934:	4d45750e 	bge	r9,r21,1000af0c <___vfprintf_internal_r+0x1c34>
10009938:	014400b4 	movhi	r5,4098
1000993c:	2964b484 	addi	r5,r5,-27950
10009940:	d9413615 	stw	r5,1240(sp)
10009944:	4827883a 	mov	r19,r9
10009948:	048001c4 	movi	r18,7
1000994c:	00000306 	br	1000995c <___vfprintf_internal_r+0x684>
10009950:	ad7ffc04 	addi	r21,r21,-16
10009954:	42000204 	addi	r8,r8,8
10009958:	9d40130e 	bge	r19,r21,100099a8 <___vfprintf_internal_r+0x6d0>
1000995c:	010400b4 	movhi	r4,4098
10009960:	18c00404 	addi	r3,r3,16
10009964:	10800044 	addi	r2,r2,1
10009968:	2124b484 	addi	r4,r4,-27950
1000996c:	41000015 	stw	r4,0(r8)
10009970:	44c00115 	stw	r19,4(r8)
10009974:	d8c12015 	stw	r3,1152(sp)
10009978:	d8811f15 	stw	r2,1148(sp)
1000997c:	90bff40e 	bge	r18,r2,10009950 <__alt_data_end+0xf8009950>
10009980:	b809883a 	mov	r4,r23
10009984:	b00b883a 	mov	r5,r22
10009988:	d9811e04 	addi	r6,sp,1144
1000998c:	00105e00 	call	100105e0 <__sprint_r>
10009990:	103f691e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
10009994:	ad7ffc04 	addi	r21,r21,-16
10009998:	d8c12017 	ldw	r3,1152(sp)
1000999c:	d8811f17 	ldw	r2,1148(sp)
100099a0:	da000404 	addi	r8,sp,16
100099a4:	9d7fed16 	blt	r19,r21,1000995c <__alt_data_end+0xf800995c>
100099a8:	d9413617 	ldw	r5,1240(sp)
100099ac:	a8c7883a 	add	r3,r21,r3
100099b0:	10800044 	addi	r2,r2,1
100099b4:	41400015 	stw	r5,0(r8)
100099b8:	45400115 	stw	r21,4(r8)
100099bc:	d8c12015 	stw	r3,1152(sp)
100099c0:	d8811f15 	stw	r2,1148(sp)
100099c4:	010001c4 	movi	r4,7
100099c8:	20832b16 	blt	r4,r2,1000a678 <___vfprintf_internal_r+0x13a0>
100099cc:	d8812787 	ldb	r2,1182(sp)
100099d0:	42000204 	addi	r8,r8,8
100099d4:	10000c26 	beq	r2,zero,10009a08 <___vfprintf_internal_r+0x730>
100099d8:	d8811f17 	ldw	r2,1148(sp)
100099dc:	d9012784 	addi	r4,sp,1182
100099e0:	18c00044 	addi	r3,r3,1
100099e4:	10800044 	addi	r2,r2,1
100099e8:	41000015 	stw	r4,0(r8)
100099ec:	01000044 	movi	r4,1
100099f0:	41000115 	stw	r4,4(r8)
100099f4:	d8c12015 	stw	r3,1152(sp)
100099f8:	d8811f15 	stw	r2,1148(sp)
100099fc:	010001c4 	movi	r4,7
10009a00:	2082c416 	blt	r4,r2,1000a514 <___vfprintf_internal_r+0x123c>
10009a04:	42000204 	addi	r8,r8,8
10009a08:	d8812c17 	ldw	r2,1200(sp)
10009a0c:	10000c26 	beq	r2,zero,10009a40 <___vfprintf_internal_r+0x768>
10009a10:	d8811f17 	ldw	r2,1148(sp)
10009a14:	d9012704 	addi	r4,sp,1180
10009a18:	18c00084 	addi	r3,r3,2
10009a1c:	10800044 	addi	r2,r2,1
10009a20:	41000015 	stw	r4,0(r8)
10009a24:	01000084 	movi	r4,2
10009a28:	41000115 	stw	r4,4(r8)
10009a2c:	d8c12015 	stw	r3,1152(sp)
10009a30:	d8811f15 	stw	r2,1148(sp)
10009a34:	010001c4 	movi	r4,7
10009a38:	2082be16 	blt	r4,r2,1000a534 <___vfprintf_internal_r+0x125c>
10009a3c:	42000204 	addi	r8,r8,8
10009a40:	d9013017 	ldw	r4,1216(sp)
10009a44:	00802004 	movi	r2,128
10009a48:	20822026 	beq	r4,r2,1000a2cc <___vfprintf_internal_r+0xff4>
10009a4c:	d9413217 	ldw	r5,1224(sp)
10009a50:	2c67c83a 	sub	r19,r5,r17
10009a54:	04c0260e 	bge	zero,r19,10009af0 <___vfprintf_internal_r+0x818>
10009a58:	05400404 	movi	r21,16
10009a5c:	d8811f17 	ldw	r2,1148(sp)
10009a60:	acc4720e 	bge	r21,r19,1000ac2c <___vfprintf_internal_r+0x1954>
10009a64:	014400b4 	movhi	r5,4098
10009a68:	2964b084 	addi	r5,r5,-27966
10009a6c:	d9412c15 	stw	r5,1200(sp)
10009a70:	048001c4 	movi	r18,7
10009a74:	00000306 	br	10009a84 <___vfprintf_internal_r+0x7ac>
10009a78:	9cfffc04 	addi	r19,r19,-16
10009a7c:	42000204 	addi	r8,r8,8
10009a80:	acc0110e 	bge	r21,r19,10009ac8 <___vfprintf_internal_r+0x7f0>
10009a84:	18c00404 	addi	r3,r3,16
10009a88:	10800044 	addi	r2,r2,1
10009a8c:	45000015 	stw	r20,0(r8)
10009a90:	45400115 	stw	r21,4(r8)
10009a94:	d8c12015 	stw	r3,1152(sp)
10009a98:	d8811f15 	stw	r2,1148(sp)
10009a9c:	90bff60e 	bge	r18,r2,10009a78 <__alt_data_end+0xf8009a78>
10009aa0:	b809883a 	mov	r4,r23
10009aa4:	b00b883a 	mov	r5,r22
10009aa8:	d9811e04 	addi	r6,sp,1144
10009aac:	00105e00 	call	100105e0 <__sprint_r>
10009ab0:	103f211e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
10009ab4:	9cfffc04 	addi	r19,r19,-16
10009ab8:	d8c12017 	ldw	r3,1152(sp)
10009abc:	d8811f17 	ldw	r2,1148(sp)
10009ac0:	da000404 	addi	r8,sp,16
10009ac4:	acffef16 	blt	r21,r19,10009a84 <__alt_data_end+0xf8009a84>
10009ac8:	d9012c17 	ldw	r4,1200(sp)
10009acc:	1cc7883a 	add	r3,r3,r19
10009ad0:	10800044 	addi	r2,r2,1
10009ad4:	41000015 	stw	r4,0(r8)
10009ad8:	44c00115 	stw	r19,4(r8)
10009adc:	d8c12015 	stw	r3,1152(sp)
10009ae0:	d8811f15 	stw	r2,1148(sp)
10009ae4:	010001c4 	movi	r4,7
10009ae8:	20828216 	blt	r4,r2,1000a4f4 <___vfprintf_internal_r+0x121c>
10009aec:	42000204 	addi	r8,r8,8
10009af0:	e080400c 	andi	r2,fp,256
10009af4:	1001ac1e 	bne	r2,zero,1000a1a8 <___vfprintf_internal_r+0xed0>
10009af8:	d8811f17 	ldw	r2,1148(sp)
10009afc:	d9413117 	ldw	r5,1220(sp)
10009b00:	1c47883a 	add	r3,r3,r17
10009b04:	10800044 	addi	r2,r2,1
10009b08:	41400015 	stw	r5,0(r8)
10009b0c:	44400115 	stw	r17,4(r8)
10009b10:	d8c12015 	stw	r3,1152(sp)
10009b14:	d8811f15 	stw	r2,1148(sp)
10009b18:	010001c4 	movi	r4,7
10009b1c:	20825d16 	blt	r4,r2,1000a494 <___vfprintf_internal_r+0x11bc>
10009b20:	42000204 	addi	r8,r8,8
10009b24:	e080010c 	andi	r2,fp,4
10009b28:	10003126 	beq	r2,zero,10009bf0 <___vfprintf_internal_r+0x918>
10009b2c:	d8812e17 	ldw	r2,1208(sp)
10009b30:	d9012b17 	ldw	r4,1196(sp)
10009b34:	1121c83a 	sub	r16,r2,r4
10009b38:	04002d0e 	bge	zero,r16,10009bf0 <___vfprintf_internal_r+0x918>
10009b3c:	04400404 	movi	r17,16
10009b40:	d8811f17 	ldw	r2,1148(sp)
10009b44:	8c05340e 	bge	r17,r16,1000b018 <___vfprintf_internal_r+0x1d40>
10009b48:	010400b4 	movhi	r4,4098
10009b4c:	2124b484 	addi	r4,r4,-27950
10009b50:	d9013615 	stw	r4,1240(sp)
10009b54:	048001c4 	movi	r18,7
10009b58:	00000306 	br	10009b68 <___vfprintf_internal_r+0x890>
10009b5c:	843ffc04 	addi	r16,r16,-16
10009b60:	42000204 	addi	r8,r8,8
10009b64:	8c00130e 	bge	r17,r16,10009bb4 <___vfprintf_internal_r+0x8dc>
10009b68:	014400b4 	movhi	r5,4098
10009b6c:	18c00404 	addi	r3,r3,16
10009b70:	10800044 	addi	r2,r2,1
10009b74:	2964b484 	addi	r5,r5,-27950
10009b78:	41400015 	stw	r5,0(r8)
10009b7c:	44400115 	stw	r17,4(r8)
10009b80:	d8c12015 	stw	r3,1152(sp)
10009b84:	d8811f15 	stw	r2,1148(sp)
10009b88:	90bff40e 	bge	r18,r2,10009b5c <__alt_data_end+0xf8009b5c>
10009b8c:	b809883a 	mov	r4,r23
10009b90:	b00b883a 	mov	r5,r22
10009b94:	d9811e04 	addi	r6,sp,1144
10009b98:	00105e00 	call	100105e0 <__sprint_r>
10009b9c:	103ee61e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
10009ba0:	843ffc04 	addi	r16,r16,-16
10009ba4:	d8c12017 	ldw	r3,1152(sp)
10009ba8:	d8811f17 	ldw	r2,1148(sp)
10009bac:	da000404 	addi	r8,sp,16
10009bb0:	8c3fed16 	blt	r17,r16,10009b68 <__alt_data_end+0xf8009b68>
10009bb4:	d9013617 	ldw	r4,1240(sp)
10009bb8:	1c07883a 	add	r3,r3,r16
10009bbc:	10800044 	addi	r2,r2,1
10009bc0:	41000015 	stw	r4,0(r8)
10009bc4:	44000115 	stw	r16,4(r8)
10009bc8:	d8c12015 	stw	r3,1152(sp)
10009bcc:	d8811f15 	stw	r2,1148(sp)
10009bd0:	010001c4 	movi	r4,7
10009bd4:	2080060e 	bge	r4,r2,10009bf0 <___vfprintf_internal_r+0x918>
10009bd8:	b809883a 	mov	r4,r23
10009bdc:	b00b883a 	mov	r5,r22
10009be0:	d9811e04 	addi	r6,sp,1144
10009be4:	00105e00 	call	100105e0 <__sprint_r>
10009be8:	103ed31e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
10009bec:	d8c12017 	ldw	r3,1152(sp)
10009bf0:	df012b17 	ldw	fp,1196(sp)
10009bf4:	d9412e17 	ldw	r5,1208(sp)
10009bf8:	e140010e 	bge	fp,r5,10009c00 <___vfprintf_internal_r+0x928>
10009bfc:	2839883a 	mov	fp,r5
10009c00:	d8812f17 	ldw	r2,1212(sp)
10009c04:	1705883a 	add	r2,r2,fp
10009c08:	d8812f15 	stw	r2,1212(sp)
10009c0c:	1802291e 	bne	r3,zero,1000a4b4 <___vfprintf_internal_r+0x11dc>
10009c10:	d8c12a17 	ldw	r3,1192(sp)
10009c14:	d8011f15 	stw	zero,1148(sp)
10009c18:	da000404 	addi	r8,sp,16
10009c1c:	18800007 	ldb	r2,0(r3)
10009c20:	103ded1e 	bne	r2,zero,100093d8 <__alt_data_end+0xf80093d8>
10009c24:	dc012a17 	ldw	r16,1192(sp)
10009c28:	003e0506 	br	10009440 <__alt_data_end+0xf8009440>
10009c2c:	d9012d17 	ldw	r4,1204(sp)
10009c30:	d9412d17 	ldw	r5,1204(sp)
10009c34:	da012a17 	ldw	r8,1192(sp)
10009c38:	21000017 	ldw	r4,0(r4)
10009c3c:	29400117 	ldw	r5,4(r5)
10009c40:	df012a15 	stw	fp,1192(sp)
10009c44:	9839883a 	mov	fp,r19
10009c48:	dcc12b03 	ldbu	r19,1196(sp)
10009c4c:	d9013715 	stw	r4,1244(sp)
10009c50:	d9413915 	stw	r5,1252(sp)
10009c54:	da013f15 	stw	r8,1276(sp)
10009c58:	da413e15 	stw	r9,1272(sp)
10009c5c:	dcc12785 	stb	r19,1182(sp)
10009c60:	001023c0 	call	1001023c <__fpclassifyd>
10009c64:	d8c12d17 	ldw	r3,1204(sp)
10009c68:	04400044 	movi	r17,1
10009c6c:	da013f17 	ldw	r8,1276(sp)
10009c70:	1c800204 	addi	r18,r3,8
10009c74:	da413e17 	ldw	r9,1272(sp)
10009c78:	d9013717 	ldw	r4,1244(sp)
10009c7c:	d9413917 	ldw	r5,1252(sp)
10009c80:	1443451e 	bne	r2,r17,1000a998 <___vfprintf_internal_r+0x16c0>
10009c84:	000d883a 	mov	r6,zero
10009c88:	000f883a 	mov	r7,zero
10009c8c:	00144740 	call	10014474 <__ledf2>
10009c90:	da013f17 	ldw	r8,1276(sp)
10009c94:	1004fe16 	blt	r2,zero,1000b090 <___vfprintf_internal_r+0x1db8>
10009c98:	dcc12783 	ldbu	r19,1182(sp)
10009c9c:	008011c4 	movi	r2,71
10009ca0:	14045d0e 	bge	r2,r16,1000ae18 <___vfprintf_internal_r+0x1b40>
10009ca4:	014400b4 	movhi	r5,4098
10009ca8:	2964a104 	addi	r5,r5,-28028
10009cac:	d9413115 	stw	r5,1220(sp)
10009cb0:	00c000c4 	movi	r3,3
10009cb4:	00bfdfc4 	movi	r2,-129
10009cb8:	d8c12b15 	stw	r3,1196(sp)
10009cbc:	e0b8703a 	and	fp,fp,r2
10009cc0:	dc812d15 	stw	r18,1204(sp)
10009cc4:	1823883a 	mov	r17,r3
10009cc8:	d8013215 	stw	zero,1224(sp)
10009ccc:	d8013415 	stw	zero,1232(sp)
10009cd0:	003f0106 	br	100098d8 <__alt_data_end+0xf80098d8>
10009cd4:	9cc00214 	ori	r19,r19,8
10009cd8:	e005883a 	mov	r2,fp
10009cdc:	e4000007 	ldb	r16,0(fp)
10009ce0:	003de506 	br	10009478 <__alt_data_end+0xf8009478>
10009ce4:	da012a17 	ldw	r8,1192(sp)
10009ce8:	df012a15 	stw	fp,1192(sp)
10009cec:	9f000414 	ori	fp,r19,16
10009cf0:	e0c0080c 	andi	r3,fp,32
10009cf4:	d8812d17 	ldw	r2,1204(sp)
10009cf8:	18007626 	beq	r3,zero,10009ed4 <___vfprintf_internal_r+0xbfc>
10009cfc:	d9412d17 	ldw	r5,1204(sp)
10009d00:	14800017 	ldw	r18,0(r2)
10009d04:	15400117 	ldw	r21,4(r2)
10009d08:	29400204 	addi	r5,r5,8
10009d0c:	d9412d15 	stw	r5,1204(sp)
10009d10:	0005883a 	mov	r2,zero
10009d14:	9546b03a 	or	r3,r18,r21
10009d18:	d8012785 	stb	zero,1182(sp)
10009d1c:	da413215 	stw	r9,1224(sp)
10009d20:	0027883a 	mov	r19,zero
10009d24:	003ecd06 	br	1000985c <__alt_data_end+0xf800985c>
10009d28:	da012a17 	ldw	r8,1192(sp)
10009d2c:	df012a15 	stw	fp,1192(sp)
10009d30:	9f000414 	ori	fp,r19,16
10009d34:	e0c0080c 	andi	r3,fp,32
10009d38:	d8812d17 	ldw	r2,1204(sp)
10009d3c:	18002c26 	beq	r3,zero,10009df0 <___vfprintf_internal_r+0xb18>
10009d40:	d9012d17 	ldw	r4,1204(sp)
10009d44:	14800017 	ldw	r18,0(r2)
10009d48:	15400117 	ldw	r21,4(r2)
10009d4c:	21000204 	addi	r4,r4,8
10009d50:	d9012d15 	stw	r4,1204(sp)
10009d54:	00800044 	movi	r2,1
10009d58:	9546b03a 	or	r3,r18,r21
10009d5c:	003fee06 	br	10009d18 <__alt_data_end+0xf8009d18>
10009d60:	da012a17 	ldw	r8,1192(sp)
10009d64:	df012a15 	stw	fp,1192(sp)
10009d68:	9839883a 	mov	fp,r19
10009d6c:	dcc12b03 	ldbu	r19,1196(sp)
10009d70:	014400b4 	movhi	r5,4098
10009d74:	2964a404 	addi	r5,r5,-28016
10009d78:	dcc12785 	stb	r19,1182(sp)
10009d7c:	d9413b15 	stw	r5,1260(sp)
10009d80:	e0c0080c 	andi	r3,fp,32
10009d84:	d8812d17 	ldw	r2,1204(sp)
10009d88:	18002e26 	beq	r3,zero,10009e44 <___vfprintf_internal_r+0xb6c>
10009d8c:	d9412d17 	ldw	r5,1204(sp)
10009d90:	14800017 	ldw	r18,0(r2)
10009d94:	15400117 	ldw	r21,4(r2)
10009d98:	29400204 	addi	r5,r5,8
10009d9c:	d9412d15 	stw	r5,1204(sp)
10009da0:	e080004c 	andi	r2,fp,1
10009da4:	10025c26 	beq	r2,zero,1000a718 <___vfprintf_internal_r+0x1440>
10009da8:	9546b03a 	or	r3,r18,r21
10009dac:	18038f26 	beq	r3,zero,1000abec <___vfprintf_internal_r+0x1914>
10009db0:	00800c04 	movi	r2,48
10009db4:	d8812705 	stb	r2,1180(sp)
10009db8:	dc012745 	stb	r16,1181(sp)
10009dbc:	e7000094 	ori	fp,fp,2
10009dc0:	00800084 	movi	r2,2
10009dc4:	003fd406 	br	10009d18 <__alt_data_end+0xf8009d18>
10009dc8:	9cc00814 	ori	r19,r19,32
10009dcc:	e005883a 	mov	r2,fp
10009dd0:	e4000007 	ldb	r16,0(fp)
10009dd4:	003da806 	br	10009478 <__alt_data_end+0xf8009478>
10009dd8:	da012a17 	ldw	r8,1192(sp)
10009ddc:	df012a15 	stw	fp,1192(sp)
10009de0:	9839883a 	mov	fp,r19
10009de4:	e0c0080c 	andi	r3,fp,32
10009de8:	d8812d17 	ldw	r2,1204(sp)
10009dec:	183fd41e 	bne	r3,zero,10009d40 <__alt_data_end+0xf8009d40>
10009df0:	e0c0040c 	andi	r3,fp,16
10009df4:	18035f26 	beq	r3,zero,1000ab74 <___vfprintf_internal_r+0x189c>
10009df8:	d9412d17 	ldw	r5,1204(sp)
10009dfc:	14800017 	ldw	r18,0(r2)
10009e00:	002b883a 	mov	r21,zero
10009e04:	29400104 	addi	r5,r5,4
10009e08:	d9412d15 	stw	r5,1204(sp)
10009e0c:	00800044 	movi	r2,1
10009e10:	9007883a 	mov	r3,r18
10009e14:	003fc006 	br	10009d18 <__alt_data_end+0xf8009d18>
10009e18:	da012a17 	ldw	r8,1192(sp)
10009e1c:	df012a15 	stw	fp,1192(sp)
10009e20:	9839883a 	mov	fp,r19
10009e24:	dcc12b03 	ldbu	r19,1196(sp)
10009e28:	010400b4 	movhi	r4,4098
10009e2c:	2124a904 	addi	r4,r4,-27996
10009e30:	d9013b15 	stw	r4,1260(sp)
10009e34:	dcc12785 	stb	r19,1182(sp)
10009e38:	e0c0080c 	andi	r3,fp,32
10009e3c:	d8812d17 	ldw	r2,1204(sp)
10009e40:	183fd21e 	bne	r3,zero,10009d8c <__alt_data_end+0xf8009d8c>
10009e44:	e0c0040c 	andi	r3,fp,16
10009e48:	18035426 	beq	r3,zero,1000ab9c <___vfprintf_internal_r+0x18c4>
10009e4c:	d8c12d17 	ldw	r3,1204(sp)
10009e50:	14800017 	ldw	r18,0(r2)
10009e54:	002b883a 	mov	r21,zero
10009e58:	18c00104 	addi	r3,r3,4
10009e5c:	d8c12d15 	stw	r3,1204(sp)
10009e60:	003fcf06 	br	10009da0 <__alt_data_end+0xf8009da0>
10009e64:	e4000007 	ldb	r16,0(fp)
10009e68:	00801b04 	movi	r2,108
10009e6c:	8083f726 	beq	r16,r2,1000ae4c <___vfprintf_internal_r+0x1b74>
10009e70:	9cc00414 	ori	r19,r19,16
10009e74:	e005883a 	mov	r2,fp
10009e78:	003d7f06 	br	10009478 <__alt_data_end+0xf8009478>
10009e7c:	da012a17 	ldw	r8,1192(sp)
10009e80:	df012a15 	stw	fp,1192(sp)
10009e84:	9839883a 	mov	fp,r19
10009e88:	dcc12b03 	ldbu	r19,1196(sp)
10009e8c:	e080080c 	andi	r2,fp,32
10009e90:	dcc12785 	stb	r19,1182(sp)
10009e94:	10032226 	beq	r2,zero,1000ab20 <___vfprintf_internal_r+0x1848>
10009e98:	d9412d17 	ldw	r5,1204(sp)
10009e9c:	d9012f17 	ldw	r4,1212(sp)
10009ea0:	28800017 	ldw	r2,0(r5)
10009ea4:	2007d7fa 	srai	r3,r4,31
10009ea8:	29400104 	addi	r5,r5,4
10009eac:	d9412d15 	stw	r5,1204(sp)
10009eb0:	11000015 	stw	r4,0(r2)
10009eb4:	10c00115 	stw	r3,4(r2)
10009eb8:	003d4406 	br	100093cc <__alt_data_end+0xf80093cc>
10009ebc:	da012a17 	ldw	r8,1192(sp)
10009ec0:	df012a15 	stw	fp,1192(sp)
10009ec4:	9839883a 	mov	fp,r19
10009ec8:	e0c0080c 	andi	r3,fp,32
10009ecc:	d8812d17 	ldw	r2,1204(sp)
10009ed0:	183f8a1e 	bne	r3,zero,10009cfc <__alt_data_end+0xf8009cfc>
10009ed4:	e0c0040c 	andi	r3,fp,16
10009ed8:	18031c26 	beq	r3,zero,1000ab4c <___vfprintf_internal_r+0x1874>
10009edc:	14800017 	ldw	r18,0(r2)
10009ee0:	d8812d17 	ldw	r2,1204(sp)
10009ee4:	002b883a 	mov	r21,zero
10009ee8:	9007883a 	mov	r3,r18
10009eec:	10800104 	addi	r2,r2,4
10009ef0:	d8812d15 	stw	r2,1204(sp)
10009ef4:	0005883a 	mov	r2,zero
10009ef8:	003f8706 	br	10009d18 <__alt_data_end+0xf8009d18>
10009efc:	d9412d17 	ldw	r5,1204(sp)
10009f00:	00800c04 	movi	r2,48
10009f04:	d8812705 	stb	r2,1180(sp)
10009f08:	2c800017 	ldw	r18,0(r5)
10009f0c:	00801e04 	movi	r2,120
10009f10:	d8812745 	stb	r2,1181(sp)
10009f14:	008400b4 	movhi	r2,4098
10009f18:	10a4a904 	addi	r2,r2,-27996
10009f1c:	29400104 	addi	r5,r5,4
10009f20:	da012a17 	ldw	r8,1192(sp)
10009f24:	d8813b15 	stw	r2,1260(sp)
10009f28:	df012a15 	stw	fp,1192(sp)
10009f2c:	002b883a 	mov	r21,zero
10009f30:	9f000094 	ori	fp,r19,2
10009f34:	d9412d15 	stw	r5,1204(sp)
10009f38:	00800084 	movi	r2,2
10009f3c:	04001e04 	movi	r16,120
10009f40:	9007883a 	mov	r3,r18
10009f44:	003f7406 	br	10009d18 <__alt_data_end+0xf8009d18>
10009f48:	da012a17 	ldw	r8,1192(sp)
10009f4c:	df012a15 	stw	fp,1192(sp)
10009f50:	9839883a 	mov	fp,r19
10009f54:	dcc12b03 	ldbu	r19,1196(sp)
10009f58:	e080080c 	andi	r2,fp,32
10009f5c:	d8c12d17 	ldw	r3,1204(sp)
10009f60:	dcc12785 	stb	r19,1182(sp)
10009f64:	103e321e 	bne	r2,zero,10009830 <__alt_data_end+0xf8009830>
10009f68:	e080040c 	andi	r2,fp,16
10009f6c:	10031326 	beq	r2,zero,1000abbc <___vfprintf_internal_r+0x18e4>
10009f70:	1c800017 	ldw	r18,0(r3)
10009f74:	d9412d17 	ldw	r5,1204(sp)
10009f78:	902bd7fa 	srai	r21,r18,31
10009f7c:	29400104 	addi	r5,r5,4
10009f80:	d9412d15 	stw	r5,1204(sp)
10009f84:	a805883a 	mov	r2,r21
10009f88:	003e2f06 	br	10009848 <__alt_data_end+0xf8009848>
10009f8c:	9cc01014 	ori	r19,r19,64
10009f90:	e005883a 	mov	r2,fp
10009f94:	e4000007 	ldb	r16,0(fp)
10009f98:	003d3706 	br	10009478 <__alt_data_end+0xf8009478>
10009f9c:	d8c12d17 	ldw	r3,1204(sp)
10009fa0:	d9012d17 	ldw	r4,1204(sp)
10009fa4:	da012a17 	ldw	r8,1192(sp)
10009fa8:	18800017 	ldw	r2,0(r3)
10009fac:	21000104 	addi	r4,r4,4
10009fb0:	00c00044 	movi	r3,1
10009fb4:	df012a15 	stw	fp,1192(sp)
10009fb8:	d8c12b15 	stw	r3,1196(sp)
10009fbc:	9839883a 	mov	fp,r19
10009fc0:	d8012785 	stb	zero,1182(sp)
10009fc4:	d8810405 	stb	r2,1040(sp)
10009fc8:	d9012d15 	stw	r4,1204(sp)
10009fcc:	1823883a 	mov	r17,r3
10009fd0:	d8c10404 	addi	r3,sp,1040
10009fd4:	d8013215 	stw	zero,1224(sp)
10009fd8:	d8013415 	stw	zero,1232(sp)
10009fdc:	d8c13115 	stw	r3,1220(sp)
10009fe0:	0005883a 	mov	r2,zero
10009fe4:	003e4306 	br	100098f4 <__alt_data_end+0xf80098f4>
10009fe8:	d8812b07 	ldb	r2,1196(sp)
10009fec:	1002fc1e 	bne	r2,zero,1000abe0 <___vfprintf_internal_r+0x1908>
10009ff0:	00c00804 	movi	r3,32
10009ff4:	d8c12b05 	stb	r3,1196(sp)
10009ff8:	e005883a 	mov	r2,fp
10009ffc:	e4000007 	ldb	r16,0(fp)
1000a000:	003d1d06 	br	10009478 <__alt_data_end+0xf8009478>
1000a004:	9cc00054 	ori	r19,r19,1
1000a008:	e005883a 	mov	r2,fp
1000a00c:	e4000007 	ldb	r16,0(fp)
1000a010:	003d1906 	br	10009478 <__alt_data_end+0xf8009478>
1000a014:	d9012d17 	ldw	r4,1204(sp)
1000a018:	d9412d17 	ldw	r5,1204(sp)
1000a01c:	21000017 	ldw	r4,0(r4)
1000a020:	28c00104 	addi	r3,r5,4
1000a024:	d9012e15 	stw	r4,1208(sp)
1000a028:	20038c16 	blt	r4,zero,1000ae5c <___vfprintf_internal_r+0x1b84>
1000a02c:	d8c12d15 	stw	r3,1204(sp)
1000a030:	e005883a 	mov	r2,fp
1000a034:	e4000007 	ldb	r16,0(fp)
1000a038:	003d0f06 	br	10009478 <__alt_data_end+0xf8009478>
1000a03c:	00c00ac4 	movi	r3,43
1000a040:	d8c12b05 	stb	r3,1196(sp)
1000a044:	e005883a 	mov	r2,fp
1000a048:	e4000007 	ldb	r16,0(fp)
1000a04c:	003d0a06 	br	10009478 <__alt_data_end+0xf8009478>
1000a050:	d8c12d17 	ldw	r3,1204(sp)
1000a054:	d9012d17 	ldw	r4,1204(sp)
1000a058:	da012a17 	ldw	r8,1192(sp)
1000a05c:	18c00017 	ldw	r3,0(r3)
1000a060:	df012a15 	stw	fp,1192(sp)
1000a064:	d8012785 	stb	zero,1182(sp)
1000a068:	d8c13115 	stw	r3,1220(sp)
1000a06c:	9839883a 	mov	fp,r19
1000a070:	24800104 	addi	r18,r4,4
1000a074:	1803f726 	beq	r3,zero,1000b054 <___vfprintf_internal_r+0x1d7c>
1000a078:	d9013117 	ldw	r4,1220(sp)
1000a07c:	48038916 	blt	r9,zero,1000aea4 <___vfprintf_internal_r+0x1bcc>
1000a080:	480d883a 	mov	r6,r9
1000a084:	000b883a 	mov	r5,zero
1000a088:	da013f15 	stw	r8,1276(sp)
1000a08c:	da413e15 	stw	r9,1272(sp)
1000a090:	000e8ec0 	call	1000e8ec <memchr>
1000a094:	da013f17 	ldw	r8,1276(sp)
1000a098:	da413e17 	ldw	r9,1272(sp)
1000a09c:	10045926 	beq	r2,zero,1000b204 <___vfprintf_internal_r+0x1f2c>
1000a0a0:	d8c13117 	ldw	r3,1220(sp)
1000a0a4:	10e3c83a 	sub	r17,r2,r3
1000a0a8:	4c433516 	blt	r9,r17,1000ad80 <___vfprintf_internal_r+0x1aa8>
1000a0ac:	8805883a 	mov	r2,r17
1000a0b0:	88038116 	blt	r17,zero,1000aeb8 <___vfprintf_internal_r+0x1be0>
1000a0b4:	dcc12783 	ldbu	r19,1182(sp)
1000a0b8:	d8812b15 	stw	r2,1196(sp)
1000a0bc:	dc812d15 	stw	r18,1204(sp)
1000a0c0:	d8013215 	stw	zero,1224(sp)
1000a0c4:	d8013415 	stw	zero,1232(sp)
1000a0c8:	003e0306 	br	100098d8 <__alt_data_end+0xf80098d8>
1000a0cc:	da012a17 	ldw	r8,1192(sp)
1000a0d0:	df012a15 	stw	fp,1192(sp)
1000a0d4:	9839883a 	mov	fp,r19
1000a0d8:	dcc12b03 	ldbu	r19,1196(sp)
1000a0dc:	dcc12785 	stb	r19,1182(sp)
1000a0e0:	803d8f26 	beq	r16,zero,10009720 <__alt_data_end+0xf8009720>
1000a0e4:	00c00044 	movi	r3,1
1000a0e8:	d8c12b15 	stw	r3,1196(sp)
1000a0ec:	dc010405 	stb	r16,1040(sp)
1000a0f0:	d8012785 	stb	zero,1182(sp)
1000a0f4:	003fb506 	br	10009fcc <__alt_data_end+0xf8009fcc>
1000a0f8:	d8c12017 	ldw	r3,1152(sp)
1000a0fc:	003e3506 	br	100099d4 <__alt_data_end+0xf80099d4>
1000a100:	10803fcc 	andi	r2,r2,255
1000a104:	00c00044 	movi	r3,1
1000a108:	10fddc1e 	bne	r2,r3,1000987c <__alt_data_end+0xf800987c>
1000a10c:	a800021e 	bne	r21,zero,1000a118 <___vfprintf_internal_r+0xe40>
1000a110:	00800244 	movi	r2,9
1000a114:	14801e2e 	bgeu	r2,r18,1000a190 <___vfprintf_internal_r+0xeb8>
1000a118:	dc012b15 	stw	r16,1196(sp)
1000a11c:	dc410e04 	addi	r17,sp,1080
1000a120:	9021883a 	mov	r16,r18
1000a124:	da012c15 	stw	r8,1200(sp)
1000a128:	a825883a 	mov	r18,r21
1000a12c:	482b883a 	mov	r21,r9
1000a130:	8009883a 	mov	r4,r16
1000a134:	900b883a 	mov	r5,r18
1000a138:	01800284 	movi	r6,10
1000a13c:	000f883a 	mov	r7,zero
1000a140:	0012ad80 	call	10012ad8 <__umoddi3>
1000a144:	10800c04 	addi	r2,r2,48
1000a148:	8c7fffc4 	addi	r17,r17,-1
1000a14c:	8009883a 	mov	r4,r16
1000a150:	900b883a 	mov	r5,r18
1000a154:	01800284 	movi	r6,10
1000a158:	000f883a 	mov	r7,zero
1000a15c:	88800005 	stb	r2,0(r17)
1000a160:	00124980 	call	10012498 <__udivdi3>
1000a164:	1021883a 	mov	r16,r2
1000a168:	10c4b03a 	or	r2,r2,r3
1000a16c:	1825883a 	mov	r18,r3
1000a170:	103fef1e 	bne	r2,zero,1000a130 <__alt_data_end+0xf800a130>
1000a174:	d9012817 	ldw	r4,1184(sp)
1000a178:	dc413115 	stw	r17,1220(sp)
1000a17c:	dc012b17 	ldw	r16,1196(sp)
1000a180:	da012c17 	ldw	r8,1200(sp)
1000a184:	a813883a 	mov	r9,r21
1000a188:	2463c83a 	sub	r17,r4,r17
1000a18c:	003dcd06 	br	100098c4 <__alt_data_end+0xf80098c4>
1000a190:	94800c04 	addi	r18,r18,48
1000a194:	d8c10dc4 	addi	r3,sp,1079
1000a198:	dc810dc5 	stb	r18,1079(sp)
1000a19c:	dc413c17 	ldw	r17,1264(sp)
1000a1a0:	d8c13115 	stw	r3,1220(sp)
1000a1a4:	003dc706 	br	100098c4 <__alt_data_end+0xf80098c4>
1000a1a8:	00801944 	movi	r2,101
1000a1ac:	1400720e 	bge	r2,r16,1000a378 <___vfprintf_internal_r+0x10a0>
1000a1b0:	d9013717 	ldw	r4,1244(sp)
1000a1b4:	d9413917 	ldw	r5,1252(sp)
1000a1b8:	000d883a 	mov	r6,zero
1000a1bc:	000f883a 	mov	r7,zero
1000a1c0:	d8c13d15 	stw	r3,1268(sp)
1000a1c4:	da013f15 	stw	r8,1276(sp)
1000a1c8:	00143100 	call	10014310 <__eqdf2>
1000a1cc:	d8c13d17 	ldw	r3,1268(sp)
1000a1d0:	da013f17 	ldw	r8,1276(sp)
1000a1d4:	1000f41e 	bne	r2,zero,1000a5a8 <___vfprintf_internal_r+0x12d0>
1000a1d8:	d8811f17 	ldw	r2,1148(sp)
1000a1dc:	010400b4 	movhi	r4,4098
1000a1e0:	2124b004 	addi	r4,r4,-27968
1000a1e4:	18c00044 	addi	r3,r3,1
1000a1e8:	10800044 	addi	r2,r2,1
1000a1ec:	41000015 	stw	r4,0(r8)
1000a1f0:	01000044 	movi	r4,1
1000a1f4:	41000115 	stw	r4,4(r8)
1000a1f8:	d8c12015 	stw	r3,1152(sp)
1000a1fc:	d8811f15 	stw	r2,1148(sp)
1000a200:	010001c4 	movi	r4,7
1000a204:	20828d16 	blt	r4,r2,1000ac3c <___vfprintf_internal_r+0x1964>
1000a208:	42000204 	addi	r8,r8,8
1000a20c:	d8812617 	ldw	r2,1176(sp)
1000a210:	d9413317 	ldw	r5,1228(sp)
1000a214:	11400216 	blt	r2,r5,1000a220 <___vfprintf_internal_r+0xf48>
1000a218:	e080004c 	andi	r2,fp,1
1000a21c:	103e4126 	beq	r2,zero,10009b24 <__alt_data_end+0xf8009b24>
1000a220:	d8813817 	ldw	r2,1248(sp)
1000a224:	d9013517 	ldw	r4,1236(sp)
1000a228:	d9413817 	ldw	r5,1248(sp)
1000a22c:	1887883a 	add	r3,r3,r2
1000a230:	d8811f17 	ldw	r2,1148(sp)
1000a234:	41000015 	stw	r4,0(r8)
1000a238:	41400115 	stw	r5,4(r8)
1000a23c:	10800044 	addi	r2,r2,1
1000a240:	d8c12015 	stw	r3,1152(sp)
1000a244:	d8811f15 	stw	r2,1148(sp)
1000a248:	010001c4 	movi	r4,7
1000a24c:	20830916 	blt	r4,r2,1000ae74 <___vfprintf_internal_r+0x1b9c>
1000a250:	42000204 	addi	r8,r8,8
1000a254:	d8813317 	ldw	r2,1228(sp)
1000a258:	143fffc4 	addi	r16,r2,-1
1000a25c:	043e310e 	bge	zero,r16,10009b24 <__alt_data_end+0xf8009b24>
1000a260:	04400404 	movi	r17,16
1000a264:	d8811f17 	ldw	r2,1148(sp)
1000a268:	8c007e0e 	bge	r17,r16,1000a464 <___vfprintf_internal_r+0x118c>
1000a26c:	014400b4 	movhi	r5,4098
1000a270:	2964b084 	addi	r5,r5,-27966
1000a274:	d9412c15 	stw	r5,1200(sp)
1000a278:	04c001c4 	movi	r19,7
1000a27c:	00000306 	br	1000a28c <___vfprintf_internal_r+0xfb4>
1000a280:	42000204 	addi	r8,r8,8
1000a284:	843ffc04 	addi	r16,r16,-16
1000a288:	8c00790e 	bge	r17,r16,1000a470 <___vfprintf_internal_r+0x1198>
1000a28c:	18c00404 	addi	r3,r3,16
1000a290:	10800044 	addi	r2,r2,1
1000a294:	45000015 	stw	r20,0(r8)
1000a298:	44400115 	stw	r17,4(r8)
1000a29c:	d8c12015 	stw	r3,1152(sp)
1000a2a0:	d8811f15 	stw	r2,1148(sp)
1000a2a4:	98bff60e 	bge	r19,r2,1000a280 <__alt_data_end+0xf800a280>
1000a2a8:	b809883a 	mov	r4,r23
1000a2ac:	b00b883a 	mov	r5,r22
1000a2b0:	d9811e04 	addi	r6,sp,1144
1000a2b4:	00105e00 	call	100105e0 <__sprint_r>
1000a2b8:	103d1f1e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
1000a2bc:	d8c12017 	ldw	r3,1152(sp)
1000a2c0:	d8811f17 	ldw	r2,1148(sp)
1000a2c4:	da000404 	addi	r8,sp,16
1000a2c8:	003fee06 	br	1000a284 <__alt_data_end+0xf800a284>
1000a2cc:	d9412e17 	ldw	r5,1208(sp)
1000a2d0:	d8812b17 	ldw	r2,1196(sp)
1000a2d4:	28a7c83a 	sub	r19,r5,r2
1000a2d8:	04fddc0e 	bge	zero,r19,10009a4c <__alt_data_end+0xf8009a4c>
1000a2dc:	05400404 	movi	r21,16
1000a2e0:	d8811f17 	ldw	r2,1148(sp)
1000a2e4:	acc3870e 	bge	r21,r19,1000b104 <___vfprintf_internal_r+0x1e2c>
1000a2e8:	014400b4 	movhi	r5,4098
1000a2ec:	2964b084 	addi	r5,r5,-27966
1000a2f0:	d9412c15 	stw	r5,1200(sp)
1000a2f4:	048001c4 	movi	r18,7
1000a2f8:	00000306 	br	1000a308 <___vfprintf_internal_r+0x1030>
1000a2fc:	9cfffc04 	addi	r19,r19,-16
1000a300:	42000204 	addi	r8,r8,8
1000a304:	acc0110e 	bge	r21,r19,1000a34c <___vfprintf_internal_r+0x1074>
1000a308:	18c00404 	addi	r3,r3,16
1000a30c:	10800044 	addi	r2,r2,1
1000a310:	45000015 	stw	r20,0(r8)
1000a314:	45400115 	stw	r21,4(r8)
1000a318:	d8c12015 	stw	r3,1152(sp)
1000a31c:	d8811f15 	stw	r2,1148(sp)
1000a320:	90bff60e 	bge	r18,r2,1000a2fc <__alt_data_end+0xf800a2fc>
1000a324:	b809883a 	mov	r4,r23
1000a328:	b00b883a 	mov	r5,r22
1000a32c:	d9811e04 	addi	r6,sp,1144
1000a330:	00105e00 	call	100105e0 <__sprint_r>
1000a334:	103d001e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
1000a338:	9cfffc04 	addi	r19,r19,-16
1000a33c:	d8c12017 	ldw	r3,1152(sp)
1000a340:	d8811f17 	ldw	r2,1148(sp)
1000a344:	da000404 	addi	r8,sp,16
1000a348:	acffef16 	blt	r21,r19,1000a308 <__alt_data_end+0xf800a308>
1000a34c:	d9012c17 	ldw	r4,1200(sp)
1000a350:	1cc7883a 	add	r3,r3,r19
1000a354:	10800044 	addi	r2,r2,1
1000a358:	41000015 	stw	r4,0(r8)
1000a35c:	44c00115 	stw	r19,4(r8)
1000a360:	d8c12015 	stw	r3,1152(sp)
1000a364:	d8811f15 	stw	r2,1148(sp)
1000a368:	010001c4 	movi	r4,7
1000a36c:	20817816 	blt	r4,r2,1000a950 <___vfprintf_internal_r+0x1678>
1000a370:	42000204 	addi	r8,r8,8
1000a374:	003db506 	br	10009a4c <__alt_data_end+0xf8009a4c>
1000a378:	d9413317 	ldw	r5,1228(sp)
1000a37c:	00800044 	movi	r2,1
1000a380:	18c00044 	addi	r3,r3,1
1000a384:	11413e0e 	bge	r2,r5,1000a880 <___vfprintf_internal_r+0x15a8>
1000a388:	dc011f17 	ldw	r16,1148(sp)
1000a38c:	d8813117 	ldw	r2,1220(sp)
1000a390:	d8c12015 	stw	r3,1152(sp)
1000a394:	84000044 	addi	r16,r16,1
1000a398:	40800015 	stw	r2,0(r8)
1000a39c:	00800044 	movi	r2,1
1000a3a0:	40800115 	stw	r2,4(r8)
1000a3a4:	dc011f15 	stw	r16,1148(sp)
1000a3a8:	008001c4 	movi	r2,7
1000a3ac:	14015616 	blt	r2,r16,1000a908 <___vfprintf_internal_r+0x1630>
1000a3b0:	42000204 	addi	r8,r8,8
1000a3b4:	d9013817 	ldw	r4,1248(sp)
1000a3b8:	d9413517 	ldw	r5,1236(sp)
1000a3bc:	84000044 	addi	r16,r16,1
1000a3c0:	1907883a 	add	r3,r3,r4
1000a3c4:	41400015 	stw	r5,0(r8)
1000a3c8:	41000115 	stw	r4,4(r8)
1000a3cc:	d8c12015 	stw	r3,1152(sp)
1000a3d0:	dc011f15 	stw	r16,1148(sp)
1000a3d4:	008001c4 	movi	r2,7
1000a3d8:	14015416 	blt	r2,r16,1000a92c <___vfprintf_internal_r+0x1654>
1000a3dc:	44400204 	addi	r17,r8,8
1000a3e0:	d9013717 	ldw	r4,1244(sp)
1000a3e4:	d9413917 	ldw	r5,1252(sp)
1000a3e8:	000d883a 	mov	r6,zero
1000a3ec:	000f883a 	mov	r7,zero
1000a3f0:	d8c13d15 	stw	r3,1268(sp)
1000a3f4:	00143100 	call	10014310 <__eqdf2>
1000a3f8:	d8c13d17 	ldw	r3,1268(sp)
1000a3fc:	1000a726 	beq	r2,zero,1000a69c <___vfprintf_internal_r+0x13c4>
1000a400:	d9013317 	ldw	r4,1228(sp)
1000a404:	d9413117 	ldw	r5,1220(sp)
1000a408:	84000044 	addi	r16,r16,1
1000a40c:	20bfffc4 	addi	r2,r4,-1
1000a410:	1887883a 	add	r3,r3,r2
1000a414:	29000044 	addi	r4,r5,1
1000a418:	88800115 	stw	r2,4(r17)
1000a41c:	89000015 	stw	r4,0(r17)
1000a420:	d8c12015 	stw	r3,1152(sp)
1000a424:	dc011f15 	stw	r16,1148(sp)
1000a428:	008001c4 	movi	r2,7
1000a42c:	14012d16 	blt	r2,r16,1000a8e4 <___vfprintf_internal_r+0x160c>
1000a430:	8c400204 	addi	r17,r17,8
1000a434:	d9413a17 	ldw	r5,1256(sp)
1000a438:	dcc122c4 	addi	r19,sp,1163
1000a43c:	84000044 	addi	r16,r16,1
1000a440:	28c7883a 	add	r3,r5,r3
1000a444:	8cc00015 	stw	r19,0(r17)
1000a448:	89400115 	stw	r5,4(r17)
1000a44c:	d8c12015 	stw	r3,1152(sp)
1000a450:	dc011f15 	stw	r16,1148(sp)
1000a454:	008001c4 	movi	r2,7
1000a458:	14000e16 	blt	r2,r16,1000a494 <___vfprintf_internal_r+0x11bc>
1000a45c:	8a000204 	addi	r8,r17,8
1000a460:	003db006 	br	10009b24 <__alt_data_end+0xf8009b24>
1000a464:	010400b4 	movhi	r4,4098
1000a468:	2124b084 	addi	r4,r4,-27966
1000a46c:	d9012c15 	stw	r4,1200(sp)
1000a470:	d9012c17 	ldw	r4,1200(sp)
1000a474:	1c07883a 	add	r3,r3,r16
1000a478:	44000115 	stw	r16,4(r8)
1000a47c:	41000015 	stw	r4,0(r8)
1000a480:	10800044 	addi	r2,r2,1
1000a484:	d8c12015 	stw	r3,1152(sp)
1000a488:	d8811f15 	stw	r2,1148(sp)
1000a48c:	010001c4 	movi	r4,7
1000a490:	20bda30e 	bge	r4,r2,10009b20 <__alt_data_end+0xf8009b20>
1000a494:	b809883a 	mov	r4,r23
1000a498:	b00b883a 	mov	r5,r22
1000a49c:	d9811e04 	addi	r6,sp,1144
1000a4a0:	00105e00 	call	100105e0 <__sprint_r>
1000a4a4:	103ca41e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
1000a4a8:	d8c12017 	ldw	r3,1152(sp)
1000a4ac:	da000404 	addi	r8,sp,16
1000a4b0:	003d9c06 	br	10009b24 <__alt_data_end+0xf8009b24>
1000a4b4:	b809883a 	mov	r4,r23
1000a4b8:	b00b883a 	mov	r5,r22
1000a4bc:	d9811e04 	addi	r6,sp,1144
1000a4c0:	00105e00 	call	100105e0 <__sprint_r>
1000a4c4:	103dd226 	beq	r2,zero,10009c10 <__alt_data_end+0xf8009c10>
1000a4c8:	003c9b06 	br	10009738 <__alt_data_end+0xf8009738>
1000a4cc:	10803fcc 	andi	r2,r2,255
1000a4d0:	1000311e 	bne	r2,zero,1000a598 <___vfprintf_internal_r+0x12c0>
1000a4d4:	e080004c 	andi	r2,fp,1
1000a4d8:	10002f26 	beq	r2,zero,1000a598 <___vfprintf_internal_r+0x12c0>
1000a4dc:	00800c04 	movi	r2,48
1000a4e0:	d8c10dc4 	addi	r3,sp,1079
1000a4e4:	d8810dc5 	stb	r2,1079(sp)
1000a4e8:	dc413c17 	ldw	r17,1264(sp)
1000a4ec:	d8c13115 	stw	r3,1220(sp)
1000a4f0:	003cf406 	br	100098c4 <__alt_data_end+0xf80098c4>
1000a4f4:	b809883a 	mov	r4,r23
1000a4f8:	b00b883a 	mov	r5,r22
1000a4fc:	d9811e04 	addi	r6,sp,1144
1000a500:	00105e00 	call	100105e0 <__sprint_r>
1000a504:	103c8c1e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
1000a508:	d8c12017 	ldw	r3,1152(sp)
1000a50c:	da000404 	addi	r8,sp,16
1000a510:	003d7706 	br	10009af0 <__alt_data_end+0xf8009af0>
1000a514:	b809883a 	mov	r4,r23
1000a518:	b00b883a 	mov	r5,r22
1000a51c:	d9811e04 	addi	r6,sp,1144
1000a520:	00105e00 	call	100105e0 <__sprint_r>
1000a524:	103c841e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
1000a528:	d8c12017 	ldw	r3,1152(sp)
1000a52c:	da000404 	addi	r8,sp,16
1000a530:	003d3506 	br	10009a08 <__alt_data_end+0xf8009a08>
1000a534:	b809883a 	mov	r4,r23
1000a538:	b00b883a 	mov	r5,r22
1000a53c:	d9811e04 	addi	r6,sp,1144
1000a540:	00105e00 	call	100105e0 <__sprint_r>
1000a544:	103c7c1e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
1000a548:	d8c12017 	ldw	r3,1152(sp)
1000a54c:	da000404 	addi	r8,sp,16
1000a550:	003d3b06 	br	10009a40 <__alt_data_end+0xf8009a40>
1000a554:	d9413b17 	ldw	r5,1260(sp)
1000a558:	d8c10e04 	addi	r3,sp,1080
1000a55c:	908003cc 	andi	r2,r18,15
1000a560:	a808973a 	slli	r4,r21,28
1000a564:	2885883a 	add	r2,r5,r2
1000a568:	9024d13a 	srli	r18,r18,4
1000a56c:	10800003 	ldbu	r2,0(r2)
1000a570:	a82ad13a 	srli	r21,r21,4
1000a574:	18ffffc4 	addi	r3,r3,-1
1000a578:	24a4b03a 	or	r18,r4,r18
1000a57c:	18800005 	stb	r2,0(r3)
1000a580:	9544b03a 	or	r2,r18,r21
1000a584:	103ff51e 	bne	r2,zero,1000a55c <__alt_data_end+0xf800a55c>
1000a588:	d9412817 	ldw	r5,1184(sp)
1000a58c:	d8c13115 	stw	r3,1220(sp)
1000a590:	28e3c83a 	sub	r17,r5,r3
1000a594:	003ccb06 	br	100098c4 <__alt_data_end+0xf80098c4>
1000a598:	d8c10e04 	addi	r3,sp,1080
1000a59c:	0023883a 	mov	r17,zero
1000a5a0:	d8c13115 	stw	r3,1220(sp)
1000a5a4:	003cc706 	br	100098c4 <__alt_data_end+0xf80098c4>
1000a5a8:	dc012617 	ldw	r16,1176(sp)
1000a5ac:	0401ab0e 	bge	zero,r16,1000ac5c <___vfprintf_internal_r+0x1984>
1000a5b0:	d8813317 	ldw	r2,1228(sp)
1000a5b4:	d9413117 	ldw	r5,1220(sp)
1000a5b8:	d9013417 	ldw	r4,1232(sp)
1000a5bc:	1023883a 	mov	r17,r2
1000a5c0:	28a1883a 	add	r16,r5,r2
1000a5c4:	2080010e 	bge	r4,r2,1000a5cc <___vfprintf_internal_r+0x12f4>
1000a5c8:	2023883a 	mov	r17,r4
1000a5cc:	04400b0e 	bge	zero,r17,1000a5fc <___vfprintf_internal_r+0x1324>
1000a5d0:	d8811f17 	ldw	r2,1148(sp)
1000a5d4:	d9413117 	ldw	r5,1220(sp)
1000a5d8:	1c47883a 	add	r3,r3,r17
1000a5dc:	10800044 	addi	r2,r2,1
1000a5e0:	41400015 	stw	r5,0(r8)
1000a5e4:	44400115 	stw	r17,4(r8)
1000a5e8:	d8c12015 	stw	r3,1152(sp)
1000a5ec:	d8811f15 	stw	r2,1148(sp)
1000a5f0:	010001c4 	movi	r4,7
1000a5f4:	20826716 	blt	r4,r2,1000af94 <___vfprintf_internal_r+0x1cbc>
1000a5f8:	42000204 	addi	r8,r8,8
1000a5fc:	88026316 	blt	r17,zero,1000af8c <___vfprintf_internal_r+0x1cb4>
1000a600:	d8813417 	ldw	r2,1232(sp)
1000a604:	1463c83a 	sub	r17,r2,r17
1000a608:	0440590e 	bge	zero,r17,1000a770 <___vfprintf_internal_r+0x1498>
1000a60c:	04c00404 	movi	r19,16
1000a610:	d8811f17 	ldw	r2,1148(sp)
1000a614:	9c41770e 	bge	r19,r17,1000abf4 <___vfprintf_internal_r+0x191c>
1000a618:	014400b4 	movhi	r5,4098
1000a61c:	2964b084 	addi	r5,r5,-27966
1000a620:	d9412c15 	stw	r5,1200(sp)
1000a624:	054001c4 	movi	r21,7
1000a628:	00000306 	br	1000a638 <___vfprintf_internal_r+0x1360>
1000a62c:	42000204 	addi	r8,r8,8
1000a630:	8c7ffc04 	addi	r17,r17,-16
1000a634:	9c41720e 	bge	r19,r17,1000ac00 <___vfprintf_internal_r+0x1928>
1000a638:	18c00404 	addi	r3,r3,16
1000a63c:	10800044 	addi	r2,r2,1
1000a640:	45000015 	stw	r20,0(r8)
1000a644:	44c00115 	stw	r19,4(r8)
1000a648:	d8c12015 	stw	r3,1152(sp)
1000a64c:	d8811f15 	stw	r2,1148(sp)
1000a650:	a8bff60e 	bge	r21,r2,1000a62c <__alt_data_end+0xf800a62c>
1000a654:	b809883a 	mov	r4,r23
1000a658:	b00b883a 	mov	r5,r22
1000a65c:	d9811e04 	addi	r6,sp,1144
1000a660:	00105e00 	call	100105e0 <__sprint_r>
1000a664:	103c341e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
1000a668:	d8c12017 	ldw	r3,1152(sp)
1000a66c:	d8811f17 	ldw	r2,1148(sp)
1000a670:	da000404 	addi	r8,sp,16
1000a674:	003fee06 	br	1000a630 <__alt_data_end+0xf800a630>
1000a678:	b809883a 	mov	r4,r23
1000a67c:	b00b883a 	mov	r5,r22
1000a680:	d9811e04 	addi	r6,sp,1144
1000a684:	00105e00 	call	100105e0 <__sprint_r>
1000a688:	103c2b1e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
1000a68c:	d8c12017 	ldw	r3,1152(sp)
1000a690:	d8812787 	ldb	r2,1182(sp)
1000a694:	da000404 	addi	r8,sp,16
1000a698:	003cce06 	br	100099d4 <__alt_data_end+0xf80099d4>
1000a69c:	d8813317 	ldw	r2,1228(sp)
1000a6a0:	14ffffc4 	addi	r19,r2,-1
1000a6a4:	04ff630e 	bge	zero,r19,1000a434 <__alt_data_end+0xf800a434>
1000a6a8:	05400404 	movi	r21,16
1000a6ac:	acc0810e 	bge	r21,r19,1000a8b4 <___vfprintf_internal_r+0x15dc>
1000a6b0:	014400b4 	movhi	r5,4098
1000a6b4:	2964b084 	addi	r5,r5,-27966
1000a6b8:	d9412c15 	stw	r5,1200(sp)
1000a6bc:	01c001c4 	movi	r7,7
1000a6c0:	00000306 	br	1000a6d0 <___vfprintf_internal_r+0x13f8>
1000a6c4:	8c400204 	addi	r17,r17,8
1000a6c8:	9cfffc04 	addi	r19,r19,-16
1000a6cc:	acc07c0e 	bge	r21,r19,1000a8c0 <___vfprintf_internal_r+0x15e8>
1000a6d0:	18c00404 	addi	r3,r3,16
1000a6d4:	84000044 	addi	r16,r16,1
1000a6d8:	8d000015 	stw	r20,0(r17)
1000a6dc:	8d400115 	stw	r21,4(r17)
1000a6e0:	d8c12015 	stw	r3,1152(sp)
1000a6e4:	dc011f15 	stw	r16,1148(sp)
1000a6e8:	3c3ff60e 	bge	r7,r16,1000a6c4 <__alt_data_end+0xf800a6c4>
1000a6ec:	b809883a 	mov	r4,r23
1000a6f0:	b00b883a 	mov	r5,r22
1000a6f4:	d9811e04 	addi	r6,sp,1144
1000a6f8:	d9c13d15 	stw	r7,1268(sp)
1000a6fc:	00105e00 	call	100105e0 <__sprint_r>
1000a700:	d9c13d17 	ldw	r7,1268(sp)
1000a704:	103c0c1e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
1000a708:	d8c12017 	ldw	r3,1152(sp)
1000a70c:	dc011f17 	ldw	r16,1148(sp)
1000a710:	dc400404 	addi	r17,sp,16
1000a714:	003fec06 	br	1000a6c8 <__alt_data_end+0xf800a6c8>
1000a718:	00800084 	movi	r2,2
1000a71c:	9546b03a 	or	r3,r18,r21
1000a720:	003d7d06 	br	10009d18 <__alt_data_end+0xf8009d18>
1000a724:	10803fcc 	andi	r2,r2,255
1000a728:	1080201c 	xori	r2,r2,128
1000a72c:	10bfe004 	addi	r2,r2,-128
1000a730:	01000c04 	movi	r4,48
1000a734:	1101d726 	beq	r2,r4,1000ae94 <___vfprintf_internal_r+0x1bbc>
1000a738:	d9413117 	ldw	r5,1220(sp)
1000a73c:	d8812817 	ldw	r2,1184(sp)
1000a740:	193fffc5 	stb	r4,-1(r3)
1000a744:	297fffc4 	addi	r5,r5,-1
1000a748:	d9413115 	stw	r5,1220(sp)
1000a74c:	1163c83a 	sub	r17,r2,r5
1000a750:	003c5c06 	br	100098c4 <__alt_data_end+0xf80098c4>
1000a754:	b809883a 	mov	r4,r23
1000a758:	b00b883a 	mov	r5,r22
1000a75c:	d9811e04 	addi	r6,sp,1144
1000a760:	00105e00 	call	100105e0 <__sprint_r>
1000a764:	103bf41e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
1000a768:	d8c12017 	ldw	r3,1152(sp)
1000a76c:	da000404 	addi	r8,sp,16
1000a770:	d9413117 	ldw	r5,1220(sp)
1000a774:	d9013417 	ldw	r4,1232(sp)
1000a778:	d8812617 	ldw	r2,1176(sp)
1000a77c:	2923883a 	add	r17,r5,r4
1000a780:	d9413317 	ldw	r5,1228(sp)
1000a784:	11400216 	blt	r2,r5,1000a790 <___vfprintf_internal_r+0x14b8>
1000a788:	e100004c 	andi	r4,fp,1
1000a78c:	20000d26 	beq	r4,zero,1000a7c4 <___vfprintf_internal_r+0x14ec>
1000a790:	d9013817 	ldw	r4,1248(sp)
1000a794:	d9413517 	ldw	r5,1236(sp)
1000a798:	1907883a 	add	r3,r3,r4
1000a79c:	d9011f17 	ldw	r4,1148(sp)
1000a7a0:	41400015 	stw	r5,0(r8)
1000a7a4:	d9413817 	ldw	r5,1248(sp)
1000a7a8:	21000044 	addi	r4,r4,1
1000a7ac:	d8c12015 	stw	r3,1152(sp)
1000a7b0:	41400115 	stw	r5,4(r8)
1000a7b4:	d9011f15 	stw	r4,1148(sp)
1000a7b8:	014001c4 	movi	r5,7
1000a7bc:	2901fd16 	blt	r5,r4,1000afb4 <___vfprintf_internal_r+0x1cdc>
1000a7c0:	42000204 	addi	r8,r8,8
1000a7c4:	d9013317 	ldw	r4,1228(sp)
1000a7c8:	2085c83a 	sub	r2,r4,r2
1000a7cc:	8449c83a 	sub	r4,r16,r17
1000a7d0:	1021883a 	mov	r16,r2
1000a7d4:	2080010e 	bge	r4,r2,1000a7dc <___vfprintf_internal_r+0x1504>
1000a7d8:	2021883a 	mov	r16,r4
1000a7dc:	04000a0e 	bge	zero,r16,1000a808 <___vfprintf_internal_r+0x1530>
1000a7e0:	d9011f17 	ldw	r4,1148(sp)
1000a7e4:	1c07883a 	add	r3,r3,r16
1000a7e8:	44400015 	stw	r17,0(r8)
1000a7ec:	21000044 	addi	r4,r4,1
1000a7f0:	44000115 	stw	r16,4(r8)
1000a7f4:	d8c12015 	stw	r3,1152(sp)
1000a7f8:	d9011f15 	stw	r4,1148(sp)
1000a7fc:	014001c4 	movi	r5,7
1000a800:	29020916 	blt	r5,r4,1000b028 <___vfprintf_internal_r+0x1d50>
1000a804:	42000204 	addi	r8,r8,8
1000a808:	80020116 	blt	r16,zero,1000b010 <___vfprintf_internal_r+0x1d38>
1000a80c:	1421c83a 	sub	r16,r2,r16
1000a810:	043cc40e 	bge	zero,r16,10009b24 <__alt_data_end+0xf8009b24>
1000a814:	04400404 	movi	r17,16
1000a818:	d8811f17 	ldw	r2,1148(sp)
1000a81c:	8c3f110e 	bge	r17,r16,1000a464 <__alt_data_end+0xf800a464>
1000a820:	014400b4 	movhi	r5,4098
1000a824:	2964b084 	addi	r5,r5,-27966
1000a828:	d9412c15 	stw	r5,1200(sp)
1000a82c:	04c001c4 	movi	r19,7
1000a830:	00000306 	br	1000a840 <___vfprintf_internal_r+0x1568>
1000a834:	42000204 	addi	r8,r8,8
1000a838:	843ffc04 	addi	r16,r16,-16
1000a83c:	8c3f0c0e 	bge	r17,r16,1000a470 <__alt_data_end+0xf800a470>
1000a840:	18c00404 	addi	r3,r3,16
1000a844:	10800044 	addi	r2,r2,1
1000a848:	45000015 	stw	r20,0(r8)
1000a84c:	44400115 	stw	r17,4(r8)
1000a850:	d8c12015 	stw	r3,1152(sp)
1000a854:	d8811f15 	stw	r2,1148(sp)
1000a858:	98bff60e 	bge	r19,r2,1000a834 <__alt_data_end+0xf800a834>
1000a85c:	b809883a 	mov	r4,r23
1000a860:	b00b883a 	mov	r5,r22
1000a864:	d9811e04 	addi	r6,sp,1144
1000a868:	00105e00 	call	100105e0 <__sprint_r>
1000a86c:	103bb21e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
1000a870:	d8c12017 	ldw	r3,1152(sp)
1000a874:	d8811f17 	ldw	r2,1148(sp)
1000a878:	da000404 	addi	r8,sp,16
1000a87c:	003fee06 	br	1000a838 <__alt_data_end+0xf800a838>
1000a880:	e088703a 	and	r4,fp,r2
1000a884:	203ec01e 	bne	r4,zero,1000a388 <__alt_data_end+0xf800a388>
1000a888:	dc011f17 	ldw	r16,1148(sp)
1000a88c:	d9013117 	ldw	r4,1220(sp)
1000a890:	40800115 	stw	r2,4(r8)
1000a894:	84000044 	addi	r16,r16,1
1000a898:	41000015 	stw	r4,0(r8)
1000a89c:	d8c12015 	stw	r3,1152(sp)
1000a8a0:	dc011f15 	stw	r16,1148(sp)
1000a8a4:	008001c4 	movi	r2,7
1000a8a8:	14000e16 	blt	r2,r16,1000a8e4 <___vfprintf_internal_r+0x160c>
1000a8ac:	44400204 	addi	r17,r8,8
1000a8b0:	003ee006 	br	1000a434 <__alt_data_end+0xf800a434>
1000a8b4:	010400b4 	movhi	r4,4098
1000a8b8:	2124b084 	addi	r4,r4,-27966
1000a8bc:	d9012c15 	stw	r4,1200(sp)
1000a8c0:	d8812c17 	ldw	r2,1200(sp)
1000a8c4:	1cc7883a 	add	r3,r3,r19
1000a8c8:	84000044 	addi	r16,r16,1
1000a8cc:	88800015 	stw	r2,0(r17)
1000a8d0:	8cc00115 	stw	r19,4(r17)
1000a8d4:	d8c12015 	stw	r3,1152(sp)
1000a8d8:	dc011f15 	stw	r16,1148(sp)
1000a8dc:	008001c4 	movi	r2,7
1000a8e0:	143ed30e 	bge	r2,r16,1000a430 <__alt_data_end+0xf800a430>
1000a8e4:	b809883a 	mov	r4,r23
1000a8e8:	b00b883a 	mov	r5,r22
1000a8ec:	d9811e04 	addi	r6,sp,1144
1000a8f0:	00105e00 	call	100105e0 <__sprint_r>
1000a8f4:	103b901e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
1000a8f8:	d8c12017 	ldw	r3,1152(sp)
1000a8fc:	dc011f17 	ldw	r16,1148(sp)
1000a900:	dc400404 	addi	r17,sp,16
1000a904:	003ecb06 	br	1000a434 <__alt_data_end+0xf800a434>
1000a908:	b809883a 	mov	r4,r23
1000a90c:	b00b883a 	mov	r5,r22
1000a910:	d9811e04 	addi	r6,sp,1144
1000a914:	00105e00 	call	100105e0 <__sprint_r>
1000a918:	103b871e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
1000a91c:	d8c12017 	ldw	r3,1152(sp)
1000a920:	dc011f17 	ldw	r16,1148(sp)
1000a924:	da000404 	addi	r8,sp,16
1000a928:	003ea206 	br	1000a3b4 <__alt_data_end+0xf800a3b4>
1000a92c:	b809883a 	mov	r4,r23
1000a930:	b00b883a 	mov	r5,r22
1000a934:	d9811e04 	addi	r6,sp,1144
1000a938:	00105e00 	call	100105e0 <__sprint_r>
1000a93c:	103b7e1e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
1000a940:	d8c12017 	ldw	r3,1152(sp)
1000a944:	dc011f17 	ldw	r16,1148(sp)
1000a948:	dc400404 	addi	r17,sp,16
1000a94c:	003ea406 	br	1000a3e0 <__alt_data_end+0xf800a3e0>
1000a950:	b809883a 	mov	r4,r23
1000a954:	b00b883a 	mov	r5,r22
1000a958:	d9811e04 	addi	r6,sp,1144
1000a95c:	00105e00 	call	100105e0 <__sprint_r>
1000a960:	103b751e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
1000a964:	d8c12017 	ldw	r3,1152(sp)
1000a968:	da000404 	addi	r8,sp,16
1000a96c:	003c3706 	br	10009a4c <__alt_data_end+0xf8009a4c>
1000a970:	04a5c83a 	sub	r18,zero,r18
1000a974:	9004c03a 	cmpne	r2,r18,zero
1000a978:	056bc83a 	sub	r21,zero,r21
1000a97c:	a8abc83a 	sub	r21,r21,r2
1000a980:	04c00b44 	movi	r19,45
1000a984:	dcc12785 	stb	r19,1182(sp)
1000a988:	da413215 	stw	r9,1224(sp)
1000a98c:	00800044 	movi	r2,1
1000a990:	9546b03a 	or	r3,r18,r21
1000a994:	003bb106 	br	1000985c <__alt_data_end+0xf800985c>
1000a998:	da013f15 	stw	r8,1276(sp)
1000a99c:	da413e15 	stw	r9,1272(sp)
1000a9a0:	001023c0 	call	1001023c <__fpclassifyd>
1000a9a4:	da013f17 	ldw	r8,1276(sp)
1000a9a8:	da413e17 	ldw	r9,1272(sp)
1000a9ac:	1000e526 	beq	r2,zero,1000ad44 <___vfprintf_internal_r+0x1a6c>
1000a9b0:	04fff7c4 	movi	r19,-33
1000a9b4:	00bfffc4 	movi	r2,-1
1000a9b8:	84e6703a 	and	r19,r16,r19
1000a9bc:	48822926 	beq	r9,r2,1000b264 <___vfprintf_internal_r+0x1f8c>
1000a9c0:	008011c4 	movi	r2,71
1000a9c4:	98821626 	beq	r19,r2,1000b220 <___vfprintf_internal_r+0x1f48>
1000a9c8:	d9013917 	ldw	r4,1252(sp)
1000a9cc:	e0c04014 	ori	r3,fp,256
1000a9d0:	d8c12d15 	stw	r3,1204(sp)
1000a9d4:	20021f16 	blt	r4,zero,1000b254 <___vfprintf_internal_r+0x1f7c>
1000a9d8:	dc413917 	ldw	r17,1252(sp)
1000a9dc:	d8012b05 	stb	zero,1196(sp)
1000a9e0:	00801984 	movi	r2,102
1000a9e4:	80814d26 	beq	r16,r2,1000af1c <___vfprintf_internal_r+0x1c44>
1000a9e8:	00801184 	movi	r2,70
1000a9ec:	80814b26 	beq	r16,r2,1000af1c <___vfprintf_internal_r+0x1c44>
1000a9f0:	00801144 	movi	r2,69
1000a9f4:	98821d26 	beq	r19,r2,1000b26c <___vfprintf_internal_r+0x1f94>
1000a9f8:	482b883a 	mov	r21,r9
1000a9fc:	d8812604 	addi	r2,sp,1176
1000aa00:	d8800115 	stw	r2,4(sp)
1000aa04:	d9413717 	ldw	r5,1244(sp)
1000aa08:	d8812504 	addi	r2,sp,1172
1000aa0c:	d8800215 	stw	r2,8(sp)
1000aa10:	d8812104 	addi	r2,sp,1156
1000aa14:	dd400015 	stw	r21,0(sp)
1000aa18:	d8800315 	stw	r2,12(sp)
1000aa1c:	b809883a 	mov	r4,r23
1000aa20:	880d883a 	mov	r6,r17
1000aa24:	01c00084 	movi	r7,2
1000aa28:	da013f15 	stw	r8,1276(sp)
1000aa2c:	da413e15 	stw	r9,1272(sp)
1000aa30:	000b7500 	call	1000b750 <_dtoa_r>
1000aa34:	d8813115 	stw	r2,1220(sp)
1000aa38:	008019c4 	movi	r2,103
1000aa3c:	da013f17 	ldw	r8,1276(sp)
1000aa40:	da413e17 	ldw	r9,1272(sp)
1000aa44:	80800226 	beq	r16,r2,1000aa50 <___vfprintf_internal_r+0x1778>
1000aa48:	008011c4 	movi	r2,71
1000aa4c:	8081451e 	bne	r16,r2,1000af64 <___vfprintf_internal_r+0x1c8c>
1000aa50:	e080004c 	andi	r2,fp,1
1000aa54:	10021e26 	beq	r2,zero,1000b2d0 <___vfprintf_internal_r+0x1ff8>
1000aa58:	d8c13117 	ldw	r3,1220(sp)
1000aa5c:	1d55883a 	add	r10,r3,r21
1000aa60:	d9013717 	ldw	r4,1244(sp)
1000aa64:	880b883a 	mov	r5,r17
1000aa68:	000d883a 	mov	r6,zero
1000aa6c:	000f883a 	mov	r7,zero
1000aa70:	da013f15 	stw	r8,1276(sp)
1000aa74:	da413e15 	stw	r9,1272(sp)
1000aa78:	da813d15 	stw	r10,1268(sp)
1000aa7c:	00143100 	call	10014310 <__eqdf2>
1000aa80:	da013f17 	ldw	r8,1276(sp)
1000aa84:	da413e17 	ldw	r9,1272(sp)
1000aa88:	da813d17 	ldw	r10,1268(sp)
1000aa8c:	1001a126 	beq	r2,zero,1000b114 <___vfprintf_internal_r+0x1e3c>
1000aa90:	d8812117 	ldw	r2,1156(sp)
1000aa94:	1280062e 	bgeu	r2,r10,1000aab0 <___vfprintf_internal_r+0x17d8>
1000aa98:	01000c04 	movi	r4,48
1000aa9c:	10c00044 	addi	r3,r2,1
1000aaa0:	d8c12115 	stw	r3,1156(sp)
1000aaa4:	11000005 	stb	r4,0(r2)
1000aaa8:	d8812117 	ldw	r2,1156(sp)
1000aaac:	12bffb36 	bltu	r2,r10,1000aa9c <__alt_data_end+0xf800aa9c>
1000aab0:	d8c13117 	ldw	r3,1220(sp)
1000aab4:	10c5c83a 	sub	r2,r2,r3
1000aab8:	d8813315 	stw	r2,1228(sp)
1000aabc:	008011c4 	movi	r2,71
1000aac0:	98818926 	beq	r19,r2,1000b0e8 <___vfprintf_internal_r+0x1e10>
1000aac4:	00801944 	movi	r2,101
1000aac8:	14023c0e 	bge	r2,r16,1000b3bc <___vfprintf_internal_r+0x20e4>
1000aacc:	d8c12617 	ldw	r3,1176(sp)
1000aad0:	00801984 	movi	r2,102
1000aad4:	d8c13415 	stw	r3,1232(sp)
1000aad8:	8081ef26 	beq	r16,r2,1000b298 <___vfprintf_internal_r+0x1fc0>
1000aadc:	d8c13417 	ldw	r3,1232(sp)
1000aae0:	d9013317 	ldw	r4,1228(sp)
1000aae4:	1901e316 	blt	r3,r4,1000b274 <___vfprintf_internal_r+0x1f9c>
1000aae8:	e080004c 	andi	r2,fp,1
1000aaec:	1001f426 	beq	r2,zero,1000b2c0 <___vfprintf_internal_r+0x1fe8>
1000aaf0:	d8c13417 	ldw	r3,1232(sp)
1000aaf4:	1c400044 	addi	r17,r3,1
1000aaf8:	8839883a 	mov	fp,r17
1000aafc:	8801e416 	blt	r17,zero,1000b290 <___vfprintf_internal_r+0x1fb8>
1000ab00:	dd412b07 	ldb	r21,1196(sp)
1000ab04:	a801701e 	bne	r21,zero,1000b0c8 <___vfprintf_internal_r+0x1df0>
1000ab08:	df012b15 	stw	fp,1196(sp)
1000ab0c:	dcc12783 	ldbu	r19,1182(sp)
1000ab10:	df012d17 	ldw	fp,1204(sp)
1000ab14:	d8013215 	stw	zero,1224(sp)
1000ab18:	dc812d15 	stw	r18,1204(sp)
1000ab1c:	003b6e06 	br	100098d8 <__alt_data_end+0xf80098d8>
1000ab20:	e080040c 	andi	r2,fp,16
1000ab24:	1000b51e 	bne	r2,zero,1000adfc <___vfprintf_internal_r+0x1b24>
1000ab28:	e080100c 	andi	r2,fp,64
1000ab2c:	10015b26 	beq	r2,zero,1000b09c <___vfprintf_internal_r+0x1dc4>
1000ab30:	d9012d17 	ldw	r4,1204(sp)
1000ab34:	d9412f17 	ldw	r5,1212(sp)
1000ab38:	20800017 	ldw	r2,0(r4)
1000ab3c:	21000104 	addi	r4,r4,4
1000ab40:	d9012d15 	stw	r4,1204(sp)
1000ab44:	1140000d 	sth	r5,0(r2)
1000ab48:	003a2006 	br	100093cc <__alt_data_end+0xf80093cc>
1000ab4c:	e0c0100c 	andi	r3,fp,64
1000ab50:	1800a226 	beq	r3,zero,1000addc <___vfprintf_internal_r+0x1b04>
1000ab54:	d8c12d17 	ldw	r3,1204(sp)
1000ab58:	1480000b 	ldhu	r18,0(r2)
1000ab5c:	002b883a 	mov	r21,zero
1000ab60:	18c00104 	addi	r3,r3,4
1000ab64:	d8c12d15 	stw	r3,1204(sp)
1000ab68:	0005883a 	mov	r2,zero
1000ab6c:	9007883a 	mov	r3,r18
1000ab70:	003c6906 	br	10009d18 <__alt_data_end+0xf8009d18>
1000ab74:	e0c0100c 	andi	r3,fp,64
1000ab78:	18009026 	beq	r3,zero,1000adbc <___vfprintf_internal_r+0x1ae4>
1000ab7c:	1480000b 	ldhu	r18,0(r2)
1000ab80:	d8812d17 	ldw	r2,1204(sp)
1000ab84:	002b883a 	mov	r21,zero
1000ab88:	9007883a 	mov	r3,r18
1000ab8c:	10800104 	addi	r2,r2,4
1000ab90:	d8812d15 	stw	r2,1204(sp)
1000ab94:	00800044 	movi	r2,1
1000ab98:	003c5f06 	br	10009d18 <__alt_data_end+0xf8009d18>
1000ab9c:	e0c0100c 	andi	r3,fp,64
1000aba0:	18008026 	beq	r3,zero,1000ada4 <___vfprintf_internal_r+0x1acc>
1000aba4:	d9012d17 	ldw	r4,1204(sp)
1000aba8:	1480000b 	ldhu	r18,0(r2)
1000abac:	002b883a 	mov	r21,zero
1000abb0:	21000104 	addi	r4,r4,4
1000abb4:	d9012d15 	stw	r4,1204(sp)
1000abb8:	003c7906 	br	10009da0 <__alt_data_end+0xf8009da0>
1000abbc:	e080100c 	andi	r2,fp,64
1000abc0:	10007126 	beq	r2,zero,1000ad88 <___vfprintf_internal_r+0x1ab0>
1000abc4:	1c80000f 	ldh	r18,0(r3)
1000abc8:	d8812d17 	ldw	r2,1204(sp)
1000abcc:	902bd7fa 	srai	r21,r18,31
1000abd0:	10800104 	addi	r2,r2,4
1000abd4:	d8812d15 	stw	r2,1204(sp)
1000abd8:	a805883a 	mov	r2,r21
1000abdc:	003b1a06 	br	10009848 <__alt_data_end+0xf8009848>
1000abe0:	e4000007 	ldb	r16,0(fp)
1000abe4:	e005883a 	mov	r2,fp
1000abe8:	003a2306 	br	10009478 <__alt_data_end+0xf8009478>
1000abec:	00800084 	movi	r2,2
1000abf0:	003c4906 	br	10009d18 <__alt_data_end+0xf8009d18>
1000abf4:	010400b4 	movhi	r4,4098
1000abf8:	2124b084 	addi	r4,r4,-27966
1000abfc:	d9012c15 	stw	r4,1200(sp)
1000ac00:	d9012c17 	ldw	r4,1200(sp)
1000ac04:	1c47883a 	add	r3,r3,r17
1000ac08:	10800044 	addi	r2,r2,1
1000ac0c:	41000015 	stw	r4,0(r8)
1000ac10:	44400115 	stw	r17,4(r8)
1000ac14:	d8c12015 	stw	r3,1152(sp)
1000ac18:	d8811f15 	stw	r2,1148(sp)
1000ac1c:	010001c4 	movi	r4,7
1000ac20:	20becc16 	blt	r4,r2,1000a754 <__alt_data_end+0xf800a754>
1000ac24:	42000204 	addi	r8,r8,8
1000ac28:	003ed106 	br	1000a770 <__alt_data_end+0xf800a770>
1000ac2c:	010400b4 	movhi	r4,4098
1000ac30:	2124b084 	addi	r4,r4,-27966
1000ac34:	d9012c15 	stw	r4,1200(sp)
1000ac38:	003ba306 	br	10009ac8 <__alt_data_end+0xf8009ac8>
1000ac3c:	b809883a 	mov	r4,r23
1000ac40:	b00b883a 	mov	r5,r22
1000ac44:	d9811e04 	addi	r6,sp,1144
1000ac48:	00105e00 	call	100105e0 <__sprint_r>
1000ac4c:	103aba1e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
1000ac50:	d8c12017 	ldw	r3,1152(sp)
1000ac54:	da000404 	addi	r8,sp,16
1000ac58:	003d6c06 	br	1000a20c <__alt_data_end+0xf800a20c>
1000ac5c:	d8811f17 	ldw	r2,1148(sp)
1000ac60:	014400b4 	movhi	r5,4098
1000ac64:	01000044 	movi	r4,1
1000ac68:	18c00044 	addi	r3,r3,1
1000ac6c:	10800044 	addi	r2,r2,1
1000ac70:	2964b004 	addi	r5,r5,-27968
1000ac74:	41000115 	stw	r4,4(r8)
1000ac78:	41400015 	stw	r5,0(r8)
1000ac7c:	d8c12015 	stw	r3,1152(sp)
1000ac80:	d8811f15 	stw	r2,1148(sp)
1000ac84:	010001c4 	movi	r4,7
1000ac88:	20806716 	blt	r4,r2,1000ae28 <___vfprintf_internal_r+0x1b50>
1000ac8c:	42000204 	addi	r8,r8,8
1000ac90:	8000041e 	bne	r16,zero,1000aca4 <___vfprintf_internal_r+0x19cc>
1000ac94:	d8813317 	ldw	r2,1228(sp)
1000ac98:	1000021e 	bne	r2,zero,1000aca4 <___vfprintf_internal_r+0x19cc>
1000ac9c:	e080004c 	andi	r2,fp,1
1000aca0:	103ba026 	beq	r2,zero,10009b24 <__alt_data_end+0xf8009b24>
1000aca4:	d9013817 	ldw	r4,1248(sp)
1000aca8:	d8811f17 	ldw	r2,1148(sp)
1000acac:	d9413517 	ldw	r5,1236(sp)
1000acb0:	1907883a 	add	r3,r3,r4
1000acb4:	10800044 	addi	r2,r2,1
1000acb8:	41000115 	stw	r4,4(r8)
1000acbc:	41400015 	stw	r5,0(r8)
1000acc0:	d8c12015 	stw	r3,1152(sp)
1000acc4:	d8811f15 	stw	r2,1148(sp)
1000acc8:	010001c4 	movi	r4,7
1000accc:	20815716 	blt	r4,r2,1000b22c <___vfprintf_internal_r+0x1f54>
1000acd0:	42000204 	addi	r8,r8,8
1000acd4:	0421c83a 	sub	r16,zero,r16
1000acd8:	0400810e 	bge	zero,r16,1000aee0 <___vfprintf_internal_r+0x1c08>
1000acdc:	04400404 	movi	r17,16
1000ace0:	8c00bd0e 	bge	r17,r16,1000afd8 <___vfprintf_internal_r+0x1d00>
1000ace4:	014400b4 	movhi	r5,4098
1000ace8:	2964b084 	addi	r5,r5,-27966
1000acec:	d9412c15 	stw	r5,1200(sp)
1000acf0:	04c001c4 	movi	r19,7
1000acf4:	00000306 	br	1000ad04 <___vfprintf_internal_r+0x1a2c>
1000acf8:	42000204 	addi	r8,r8,8
1000acfc:	843ffc04 	addi	r16,r16,-16
1000ad00:	8c00b80e 	bge	r17,r16,1000afe4 <___vfprintf_internal_r+0x1d0c>
1000ad04:	18c00404 	addi	r3,r3,16
1000ad08:	10800044 	addi	r2,r2,1
1000ad0c:	45000015 	stw	r20,0(r8)
1000ad10:	44400115 	stw	r17,4(r8)
1000ad14:	d8c12015 	stw	r3,1152(sp)
1000ad18:	d8811f15 	stw	r2,1148(sp)
1000ad1c:	98bff60e 	bge	r19,r2,1000acf8 <__alt_data_end+0xf800acf8>
1000ad20:	b809883a 	mov	r4,r23
1000ad24:	b00b883a 	mov	r5,r22
1000ad28:	d9811e04 	addi	r6,sp,1144
1000ad2c:	00105e00 	call	100105e0 <__sprint_r>
1000ad30:	103a811e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
1000ad34:	d8c12017 	ldw	r3,1152(sp)
1000ad38:	d8811f17 	ldw	r2,1148(sp)
1000ad3c:	da000404 	addi	r8,sp,16
1000ad40:	003fee06 	br	1000acfc <__alt_data_end+0xf800acfc>
1000ad44:	008011c4 	movi	r2,71
1000ad48:	1400db16 	blt	r2,r16,1000b0b8 <___vfprintf_internal_r+0x1de0>
1000ad4c:	010400b4 	movhi	r4,4098
1000ad50:	2124a204 	addi	r4,r4,-28024
1000ad54:	d9013115 	stw	r4,1220(sp)
1000ad58:	00c000c4 	movi	r3,3
1000ad5c:	00bfdfc4 	movi	r2,-129
1000ad60:	d8c12b15 	stw	r3,1196(sp)
1000ad64:	e0b8703a 	and	fp,fp,r2
1000ad68:	dcc12783 	ldbu	r19,1182(sp)
1000ad6c:	dc812d15 	stw	r18,1204(sp)
1000ad70:	1823883a 	mov	r17,r3
1000ad74:	d8013215 	stw	zero,1224(sp)
1000ad78:	d8013415 	stw	zero,1232(sp)
1000ad7c:	003ad606 	br	100098d8 <__alt_data_end+0xf80098d8>
1000ad80:	4823883a 	mov	r17,r9
1000ad84:	003cc906 	br	1000a0ac <__alt_data_end+0xf800a0ac>
1000ad88:	1c800017 	ldw	r18,0(r3)
1000ad8c:	d8c12d17 	ldw	r3,1204(sp)
1000ad90:	902bd7fa 	srai	r21,r18,31
1000ad94:	18c00104 	addi	r3,r3,4
1000ad98:	d8c12d15 	stw	r3,1204(sp)
1000ad9c:	a805883a 	mov	r2,r21
1000ada0:	003aa906 	br	10009848 <__alt_data_end+0xf8009848>
1000ada4:	d9412d17 	ldw	r5,1204(sp)
1000ada8:	14800017 	ldw	r18,0(r2)
1000adac:	002b883a 	mov	r21,zero
1000adb0:	29400104 	addi	r5,r5,4
1000adb4:	d9412d15 	stw	r5,1204(sp)
1000adb8:	003bf906 	br	10009da0 <__alt_data_end+0xf8009da0>
1000adbc:	d8c12d17 	ldw	r3,1204(sp)
1000adc0:	14800017 	ldw	r18,0(r2)
1000adc4:	002b883a 	mov	r21,zero
1000adc8:	18c00104 	addi	r3,r3,4
1000adcc:	d8c12d15 	stw	r3,1204(sp)
1000add0:	00800044 	movi	r2,1
1000add4:	9007883a 	mov	r3,r18
1000add8:	003bcf06 	br	10009d18 <__alt_data_end+0xf8009d18>
1000addc:	d9012d17 	ldw	r4,1204(sp)
1000ade0:	14800017 	ldw	r18,0(r2)
1000ade4:	002b883a 	mov	r21,zero
1000ade8:	21000104 	addi	r4,r4,4
1000adec:	d9012d15 	stw	r4,1204(sp)
1000adf0:	0005883a 	mov	r2,zero
1000adf4:	9007883a 	mov	r3,r18
1000adf8:	003bc706 	br	10009d18 <__alt_data_end+0xf8009d18>
1000adfc:	d9412d17 	ldw	r5,1204(sp)
1000ae00:	d8c12f17 	ldw	r3,1212(sp)
1000ae04:	28800017 	ldw	r2,0(r5)
1000ae08:	29400104 	addi	r5,r5,4
1000ae0c:	d9412d15 	stw	r5,1204(sp)
1000ae10:	10c00015 	stw	r3,0(r2)
1000ae14:	00396d06 	br	100093cc <__alt_data_end+0xf80093cc>
1000ae18:	010400b4 	movhi	r4,4098
1000ae1c:	2124a004 	addi	r4,r4,-28032
1000ae20:	d9013115 	stw	r4,1220(sp)
1000ae24:	003ba206 	br	10009cb0 <__alt_data_end+0xf8009cb0>
1000ae28:	b809883a 	mov	r4,r23
1000ae2c:	b00b883a 	mov	r5,r22
1000ae30:	d9811e04 	addi	r6,sp,1144
1000ae34:	00105e00 	call	100105e0 <__sprint_r>
1000ae38:	103a3f1e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
1000ae3c:	dc012617 	ldw	r16,1176(sp)
1000ae40:	d8c12017 	ldw	r3,1152(sp)
1000ae44:	da000404 	addi	r8,sp,16
1000ae48:	003f9106 	br	1000ac90 <__alt_data_end+0xf800ac90>
1000ae4c:	e0800044 	addi	r2,fp,1
1000ae50:	9cc00814 	ori	r19,r19,32
1000ae54:	e4000047 	ldb	r16,1(fp)
1000ae58:	00398706 	br	10009478 <__alt_data_end+0xf8009478>
1000ae5c:	d8812e17 	ldw	r2,1208(sp)
1000ae60:	d8c12d15 	stw	r3,1204(sp)
1000ae64:	0085c83a 	sub	r2,zero,r2
1000ae68:	d8812e15 	stw	r2,1208(sp)
1000ae6c:	e005883a 	mov	r2,fp
1000ae70:	003a3a06 	br	1000975c <__alt_data_end+0xf800975c>
1000ae74:	b809883a 	mov	r4,r23
1000ae78:	b00b883a 	mov	r5,r22
1000ae7c:	d9811e04 	addi	r6,sp,1144
1000ae80:	00105e00 	call	100105e0 <__sprint_r>
1000ae84:	103a2c1e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
1000ae88:	d8c12017 	ldw	r3,1152(sp)
1000ae8c:	da000404 	addi	r8,sp,16
1000ae90:	003cf006 	br	1000a254 <__alt_data_end+0xf800a254>
1000ae94:	d8c12817 	ldw	r3,1184(sp)
1000ae98:	d9013117 	ldw	r4,1220(sp)
1000ae9c:	1923c83a 	sub	r17,r3,r4
1000aea0:	003a8806 	br	100098c4 <__alt_data_end+0xf80098c4>
1000aea4:	da013f15 	stw	r8,1276(sp)
1000aea8:	00092400 	call	10009240 <strlen>
1000aeac:	1023883a 	mov	r17,r2
1000aeb0:	da013f17 	ldw	r8,1276(sp)
1000aeb4:	883c7f0e 	bge	r17,zero,1000a0b4 <__alt_data_end+0xf800a0b4>
1000aeb8:	0005883a 	mov	r2,zero
1000aebc:	003c7d06 	br	1000a0b4 <__alt_data_end+0xf800a0b4>
1000aec0:	b809883a 	mov	r4,r23
1000aec4:	b00b883a 	mov	r5,r22
1000aec8:	d9811e04 	addi	r6,sp,1144
1000aecc:	00105e00 	call	100105e0 <__sprint_r>
1000aed0:	103a191e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
1000aed4:	d8c12017 	ldw	r3,1152(sp)
1000aed8:	d8811f17 	ldw	r2,1148(sp)
1000aedc:	da000404 	addi	r8,sp,16
1000aee0:	d9413317 	ldw	r5,1228(sp)
1000aee4:	d9013117 	ldw	r4,1220(sp)
1000aee8:	10800044 	addi	r2,r2,1
1000aeec:	28c7883a 	add	r3,r5,r3
1000aef0:	41000015 	stw	r4,0(r8)
1000aef4:	41400115 	stw	r5,4(r8)
1000aef8:	d8c12015 	stw	r3,1152(sp)
1000aefc:	d8811f15 	stw	r2,1148(sp)
1000af00:	010001c4 	movi	r4,7
1000af04:	20bb060e 	bge	r4,r2,10009b20 <__alt_data_end+0xf8009b20>
1000af08:	003d6206 	br	1000a494 <__alt_data_end+0xf800a494>
1000af0c:	010400b4 	movhi	r4,4098
1000af10:	2124b484 	addi	r4,r4,-27950
1000af14:	d9013615 	stw	r4,1240(sp)
1000af18:	003aa306 	br	100099a8 <__alt_data_end+0xf80099a8>
1000af1c:	d8812604 	addi	r2,sp,1176
1000af20:	d8800115 	stw	r2,4(sp)
1000af24:	d9413717 	ldw	r5,1244(sp)
1000af28:	d8812504 	addi	r2,sp,1172
1000af2c:	d8800215 	stw	r2,8(sp)
1000af30:	d8812104 	addi	r2,sp,1156
1000af34:	da400015 	stw	r9,0(sp)
1000af38:	d8800315 	stw	r2,12(sp)
1000af3c:	b809883a 	mov	r4,r23
1000af40:	880d883a 	mov	r6,r17
1000af44:	01c000c4 	movi	r7,3
1000af48:	da013f15 	stw	r8,1276(sp)
1000af4c:	da413e15 	stw	r9,1272(sp)
1000af50:	000b7500 	call	1000b750 <_dtoa_r>
1000af54:	da413e17 	ldw	r9,1272(sp)
1000af58:	da013f17 	ldw	r8,1276(sp)
1000af5c:	d8813115 	stw	r2,1220(sp)
1000af60:	482b883a 	mov	r21,r9
1000af64:	d8c13117 	ldw	r3,1220(sp)
1000af68:	00801184 	movi	r2,70
1000af6c:	1d55883a 	add	r10,r3,r21
1000af70:	98bebb1e 	bne	r19,r2,1000aa60 <__alt_data_end+0xf800aa60>
1000af74:	19000007 	ldb	r4,0(r3)
1000af78:	00800c04 	movi	r2,48
1000af7c:	2080dd26 	beq	r4,r2,1000b2f4 <___vfprintf_internal_r+0x201c>
1000af80:	d8c12617 	ldw	r3,1176(sp)
1000af84:	50d5883a 	add	r10,r10,r3
1000af88:	003eb506 	br	1000aa60 <__alt_data_end+0xf800aa60>
1000af8c:	0023883a 	mov	r17,zero
1000af90:	003d9b06 	br	1000a600 <__alt_data_end+0xf800a600>
1000af94:	b809883a 	mov	r4,r23
1000af98:	b00b883a 	mov	r5,r22
1000af9c:	d9811e04 	addi	r6,sp,1144
1000afa0:	00105e00 	call	100105e0 <__sprint_r>
1000afa4:	1039e41e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
1000afa8:	d8c12017 	ldw	r3,1152(sp)
1000afac:	da000404 	addi	r8,sp,16
1000afb0:	003d9206 	br	1000a5fc <__alt_data_end+0xf800a5fc>
1000afb4:	b809883a 	mov	r4,r23
1000afb8:	b00b883a 	mov	r5,r22
1000afbc:	d9811e04 	addi	r6,sp,1144
1000afc0:	00105e00 	call	100105e0 <__sprint_r>
1000afc4:	1039dc1e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
1000afc8:	d8812617 	ldw	r2,1176(sp)
1000afcc:	d8c12017 	ldw	r3,1152(sp)
1000afd0:	da000404 	addi	r8,sp,16
1000afd4:	003dfb06 	br	1000a7c4 <__alt_data_end+0xf800a7c4>
1000afd8:	010400b4 	movhi	r4,4098
1000afdc:	2124b084 	addi	r4,r4,-27966
1000afe0:	d9012c15 	stw	r4,1200(sp)
1000afe4:	d9012c17 	ldw	r4,1200(sp)
1000afe8:	1c07883a 	add	r3,r3,r16
1000afec:	10800044 	addi	r2,r2,1
1000aff0:	41000015 	stw	r4,0(r8)
1000aff4:	44000115 	stw	r16,4(r8)
1000aff8:	d8c12015 	stw	r3,1152(sp)
1000affc:	d8811f15 	stw	r2,1148(sp)
1000b000:	010001c4 	movi	r4,7
1000b004:	20bfae16 	blt	r4,r2,1000aec0 <__alt_data_end+0xf800aec0>
1000b008:	42000204 	addi	r8,r8,8
1000b00c:	003fb406 	br	1000aee0 <__alt_data_end+0xf800aee0>
1000b010:	0021883a 	mov	r16,zero
1000b014:	003dfd06 	br	1000a80c <__alt_data_end+0xf800a80c>
1000b018:	014400b4 	movhi	r5,4098
1000b01c:	2964b484 	addi	r5,r5,-27950
1000b020:	d9413615 	stw	r5,1240(sp)
1000b024:	003ae306 	br	10009bb4 <__alt_data_end+0xf8009bb4>
1000b028:	b809883a 	mov	r4,r23
1000b02c:	b00b883a 	mov	r5,r22
1000b030:	d9811e04 	addi	r6,sp,1144
1000b034:	00105e00 	call	100105e0 <__sprint_r>
1000b038:	1039bf1e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
1000b03c:	d8812617 	ldw	r2,1176(sp)
1000b040:	d9413317 	ldw	r5,1228(sp)
1000b044:	d8c12017 	ldw	r3,1152(sp)
1000b048:	da000404 	addi	r8,sp,16
1000b04c:	2885c83a 	sub	r2,r5,r2
1000b050:	003ded06 	br	1000a808 <__alt_data_end+0xf800a808>
1000b054:	00800184 	movi	r2,6
1000b058:	1240012e 	bgeu	r2,r9,1000b060 <___vfprintf_internal_r+0x1d88>
1000b05c:	1013883a 	mov	r9,r2
1000b060:	4823883a 	mov	r17,r9
1000b064:	4805883a 	mov	r2,r9
1000b068:	4800b216 	blt	r9,zero,1000b334 <___vfprintf_internal_r+0x205c>
1000b06c:	014400b4 	movhi	r5,4098
1000b070:	2964ae04 	addi	r5,r5,-27976
1000b074:	d8812b15 	stw	r2,1196(sp)
1000b078:	dc812d15 	stw	r18,1204(sp)
1000b07c:	d8013215 	stw	zero,1224(sp)
1000b080:	d8013415 	stw	zero,1232(sp)
1000b084:	d9413115 	stw	r5,1220(sp)
1000b088:	0005883a 	mov	r2,zero
1000b08c:	003a1906 	br	100098f4 <__alt_data_end+0xf80098f4>
1000b090:	04c00b44 	movi	r19,45
1000b094:	dcc12785 	stb	r19,1182(sp)
1000b098:	003b0006 	br	10009c9c <__alt_data_end+0xf8009c9c>
1000b09c:	d8c12d17 	ldw	r3,1204(sp)
1000b0a0:	d9012f17 	ldw	r4,1212(sp)
1000b0a4:	18800017 	ldw	r2,0(r3)
1000b0a8:	18c00104 	addi	r3,r3,4
1000b0ac:	d8c12d15 	stw	r3,1204(sp)
1000b0b0:	11000015 	stw	r4,0(r2)
1000b0b4:	0038c506 	br	100093cc <__alt_data_end+0xf80093cc>
1000b0b8:	014400b4 	movhi	r5,4098
1000b0bc:	2964a304 	addi	r5,r5,-28020
1000b0c0:	d9413115 	stw	r5,1220(sp)
1000b0c4:	003f2406 	br	1000ad58 <__alt_data_end+0xf800ad58>
1000b0c8:	00800b44 	movi	r2,45
1000b0cc:	d8812785 	stb	r2,1182(sp)
1000b0d0:	df012b15 	stw	fp,1196(sp)
1000b0d4:	d8013215 	stw	zero,1224(sp)
1000b0d8:	df012d17 	ldw	fp,1204(sp)
1000b0dc:	00800b44 	movi	r2,45
1000b0e0:	dc812d15 	stw	r18,1204(sp)
1000b0e4:	003a0006 	br	100098e8 <__alt_data_end+0xf80098e8>
1000b0e8:	d8c12617 	ldw	r3,1176(sp)
1000b0ec:	00bfff44 	movi	r2,-3
1000b0f0:	18800a16 	blt	r3,r2,1000b11c <___vfprintf_internal_r+0x1e44>
1000b0f4:	48c00916 	blt	r9,r3,1000b11c <___vfprintf_internal_r+0x1e44>
1000b0f8:	d8c13415 	stw	r3,1232(sp)
1000b0fc:	040019c4 	movi	r16,103
1000b100:	003e7606 	br	1000aadc <__alt_data_end+0xf800aadc>
1000b104:	010400b4 	movhi	r4,4098
1000b108:	2124b084 	addi	r4,r4,-27966
1000b10c:	d9012c15 	stw	r4,1200(sp)
1000b110:	003c8e06 	br	1000a34c <__alt_data_end+0xf800a34c>
1000b114:	5005883a 	mov	r2,r10
1000b118:	003e6506 	br	1000aab0 <__alt_data_end+0xf800aab0>
1000b11c:	843fff84 	addi	r16,r16,-2
1000b120:	1d7fffc4 	addi	r21,r3,-1
1000b124:	dd412615 	stw	r21,1176(sp)
1000b128:	dc0122c5 	stb	r16,1163(sp)
1000b12c:	a8009216 	blt	r21,zero,1000b378 <___vfprintf_internal_r+0x20a0>
1000b130:	00800ac4 	movi	r2,43
1000b134:	d8812305 	stb	r2,1164(sp)
1000b138:	00800244 	movi	r2,9
1000b13c:	1540660e 	bge	r2,r21,1000b2d8 <___vfprintf_internal_r+0x2000>
1000b140:	dcc122c4 	addi	r19,sp,1163
1000b144:	dc012c15 	stw	r16,1200(sp)
1000b148:	4023883a 	mov	r17,r8
1000b14c:	9821883a 	mov	r16,r19
1000b150:	a809883a 	mov	r4,r21
1000b154:	01400284 	movi	r5,10
1000b158:	0006d840 	call	10006d84 <__modsi3>
1000b15c:	10800c04 	addi	r2,r2,48
1000b160:	843fffc4 	addi	r16,r16,-1
1000b164:	a809883a 	mov	r4,r21
1000b168:	01400284 	movi	r5,10
1000b16c:	80800005 	stb	r2,0(r16)
1000b170:	0006d300 	call	10006d30 <__divsi3>
1000b174:	01000244 	movi	r4,9
1000b178:	102b883a 	mov	r21,r2
1000b17c:	20bff416 	blt	r4,r2,1000b150 <__alt_data_end+0xf800b150>
1000b180:	8811883a 	mov	r8,r17
1000b184:	10800c04 	addi	r2,r2,48
1000b188:	8023883a 	mov	r17,r16
1000b18c:	897fffc4 	addi	r5,r17,-1
1000b190:	88bfffc5 	stb	r2,-1(r17)
1000b194:	dc012c17 	ldw	r16,1200(sp)
1000b198:	2cc08a2e 	bgeu	r5,r19,1000b3c4 <___vfprintf_internal_r+0x20ec>
1000b19c:	d9812384 	addi	r6,sp,1166
1000b1a0:	344dc83a 	sub	r6,r6,r17
1000b1a4:	d9012344 	addi	r4,sp,1165
1000b1a8:	998d883a 	add	r6,r19,r6
1000b1ac:	00000106 	br	1000b1b4 <___vfprintf_internal_r+0x1edc>
1000b1b0:	28800003 	ldbu	r2,0(r5)
1000b1b4:	20800005 	stb	r2,0(r4)
1000b1b8:	21000044 	addi	r4,r4,1
1000b1bc:	29400044 	addi	r5,r5,1
1000b1c0:	21bffb1e 	bne	r4,r6,1000b1b0 <__alt_data_end+0xf800b1b0>
1000b1c4:	d8812304 	addi	r2,sp,1164
1000b1c8:	1445c83a 	sub	r2,r2,r17
1000b1cc:	d9412344 	addi	r5,sp,1165
1000b1d0:	2885883a 	add	r2,r5,r2
1000b1d4:	14e7c83a 	sub	r19,r2,r19
1000b1d8:	d8813317 	ldw	r2,1228(sp)
1000b1dc:	d8c13317 	ldw	r3,1228(sp)
1000b1e0:	dcc13a15 	stw	r19,1256(sp)
1000b1e4:	14e3883a 	add	r17,r2,r19
1000b1e8:	00800044 	movi	r2,1
1000b1ec:	10c0550e 	bge	r2,r3,1000b344 <___vfprintf_internal_r+0x206c>
1000b1f0:	8c400044 	addi	r17,r17,1
1000b1f4:	8839883a 	mov	fp,r17
1000b1f8:	88005016 	blt	r17,zero,1000b33c <___vfprintf_internal_r+0x2064>
1000b1fc:	d8013415 	stw	zero,1232(sp)
1000b200:	003e3f06 	br	1000ab00 <__alt_data_end+0xf800ab00>
1000b204:	da412b15 	stw	r9,1196(sp)
1000b208:	dcc12783 	ldbu	r19,1182(sp)
1000b20c:	4823883a 	mov	r17,r9
1000b210:	dc812d15 	stw	r18,1204(sp)
1000b214:	d8013215 	stw	zero,1224(sp)
1000b218:	d8013415 	stw	zero,1232(sp)
1000b21c:	0039ae06 	br	100098d8 <__alt_data_end+0xf80098d8>
1000b220:	483de91e 	bne	r9,zero,1000a9c8 <__alt_data_end+0xf800a9c8>
1000b224:	8813883a 	mov	r9,r17
1000b228:	003de706 	br	1000a9c8 <__alt_data_end+0xf800a9c8>
1000b22c:	b809883a 	mov	r4,r23
1000b230:	b00b883a 	mov	r5,r22
1000b234:	d9811e04 	addi	r6,sp,1144
1000b238:	00105e00 	call	100105e0 <__sprint_r>
1000b23c:	10393e1e 	bne	r2,zero,10009738 <__alt_data_end+0xf8009738>
1000b240:	dc012617 	ldw	r16,1176(sp)
1000b244:	d8c12017 	ldw	r3,1152(sp)
1000b248:	d8811f17 	ldw	r2,1148(sp)
1000b24c:	da000404 	addi	r8,sp,16
1000b250:	003ea006 	br	1000acd4 <__alt_data_end+0xf800acd4>
1000b254:	00c00b44 	movi	r3,45
1000b258:	2460003c 	xorhi	r17,r4,32768
1000b25c:	d8c12b05 	stb	r3,1196(sp)
1000b260:	003ddf06 	br	1000a9e0 <__alt_data_end+0xf800a9e0>
1000b264:	02400184 	movi	r9,6
1000b268:	003dd706 	br	1000a9c8 <__alt_data_end+0xf800a9c8>
1000b26c:	4d400044 	addi	r21,r9,1
1000b270:	003de206 	br	1000a9fc <__alt_data_end+0xf800a9fc>
1000b274:	d8c13417 	ldw	r3,1232(sp)
1000b278:	00c0490e 	bge	zero,r3,1000b3a0 <___vfprintf_internal_r+0x20c8>
1000b27c:	04400044 	movi	r17,1
1000b280:	d9013317 	ldw	r4,1228(sp)
1000b284:	8923883a 	add	r17,r17,r4
1000b288:	8839883a 	mov	fp,r17
1000b28c:	883e1c0e 	bge	r17,zero,1000ab00 <__alt_data_end+0xf800ab00>
1000b290:	0039883a 	mov	fp,zero
1000b294:	003e1a06 	br	1000ab00 <__alt_data_end+0xf800ab00>
1000b298:	00c03b0e 	bge	zero,r3,1000b388 <___vfprintf_internal_r+0x20b0>
1000b29c:	4800021e 	bne	r9,zero,1000b2a8 <___vfprintf_internal_r+0x1fd0>
1000b2a0:	e080004c 	andi	r2,fp,1
1000b2a4:	10000626 	beq	r2,zero,1000b2c0 <___vfprintf_internal_r+0x1fe8>
1000b2a8:	d8c13417 	ldw	r3,1232(sp)
1000b2ac:	4a400044 	addi	r9,r9,1
1000b2b0:	1a63883a 	add	r17,r3,r9
1000b2b4:	8839883a 	mov	fp,r17
1000b2b8:	883e110e 	bge	r17,zero,1000ab00 <__alt_data_end+0xf800ab00>
1000b2bc:	003ff406 	br	1000b290 <__alt_data_end+0xf800b290>
1000b2c0:	1839883a 	mov	fp,r3
1000b2c4:	18004116 	blt	r3,zero,1000b3cc <___vfprintf_internal_r+0x20f4>
1000b2c8:	dc413417 	ldw	r17,1232(sp)
1000b2cc:	003e0c06 	br	1000ab00 <__alt_data_end+0xf800ab00>
1000b2d0:	d8812117 	ldw	r2,1156(sp)
1000b2d4:	003df606 	br	1000aab0 <__alt_data_end+0xf800aab0>
1000b2d8:	00800c04 	movi	r2,48
1000b2dc:	a8c00c04 	addi	r3,r21,48
1000b2e0:	d8812345 	stb	r2,1165(sp)
1000b2e4:	d8c12385 	stb	r3,1166(sp)
1000b2e8:	d88123c4 	addi	r2,sp,1167
1000b2ec:	dcc122c4 	addi	r19,sp,1163
1000b2f0:	003fb806 	br	1000b1d4 <__alt_data_end+0xf800b1d4>
1000b2f4:	d9013717 	ldw	r4,1244(sp)
1000b2f8:	880b883a 	mov	r5,r17
1000b2fc:	000d883a 	mov	r6,zero
1000b300:	000f883a 	mov	r7,zero
1000b304:	da013f15 	stw	r8,1276(sp)
1000b308:	da413e15 	stw	r9,1272(sp)
1000b30c:	da813d15 	stw	r10,1268(sp)
1000b310:	00143100 	call	10014310 <__eqdf2>
1000b314:	da013f17 	ldw	r8,1276(sp)
1000b318:	da413e17 	ldw	r9,1272(sp)
1000b31c:	da813d17 	ldw	r10,1268(sp)
1000b320:	103f1726 	beq	r2,zero,1000af80 <__alt_data_end+0xf800af80>
1000b324:	00800044 	movi	r2,1
1000b328:	1547c83a 	sub	r3,r2,r21
1000b32c:	d8c12615 	stw	r3,1176(sp)
1000b330:	003f1406 	br	1000af84 <__alt_data_end+0xf800af84>
1000b334:	0005883a 	mov	r2,zero
1000b338:	003f4c06 	br	1000b06c <__alt_data_end+0xf800b06c>
1000b33c:	0039883a 	mov	fp,zero
1000b340:	003fae06 	br	1000b1fc <__alt_data_end+0xf800b1fc>
1000b344:	e084703a 	and	r2,fp,r2
1000b348:	103faa26 	beq	r2,zero,1000b1f4 <__alt_data_end+0xf800b1f4>
1000b34c:	003fa806 	br	1000b1f0 <__alt_data_end+0xf800b1f0>
1000b350:	d9412d17 	ldw	r5,1204(sp)
1000b354:	2a400017 	ldw	r9,0(r5)
1000b358:	28c00104 	addi	r3,r5,4
1000b35c:	d8c12d15 	stw	r3,1204(sp)
1000b360:	483ebc0e 	bge	r9,zero,1000ae54 <__alt_data_end+0xf800ae54>
1000b364:	027fffc4 	movi	r9,-1
1000b368:	e4000047 	ldb	r16,1(fp)
1000b36c:	00384206 	br	10009478 <__alt_data_end+0xf8009478>
1000b370:	043fffc4 	movi	r16,-1
1000b374:	0038ce06 	br	100096b0 <__alt_data_end+0xf80096b0>
1000b378:	00800b44 	movi	r2,45
1000b37c:	056bc83a 	sub	r21,zero,r21
1000b380:	d8812305 	stb	r2,1164(sp)
1000b384:	003f6c06 	br	1000b138 <__alt_data_end+0xf800b138>
1000b388:	4800081e 	bne	r9,zero,1000b3ac <___vfprintf_internal_r+0x20d4>
1000b38c:	e080004c 	andi	r2,fp,1
1000b390:	1000061e 	bne	r2,zero,1000b3ac <___vfprintf_internal_r+0x20d4>
1000b394:	07000044 	movi	fp,1
1000b398:	e023883a 	mov	r17,fp
1000b39c:	003dd806 	br	1000ab00 <__alt_data_end+0xf800ab00>
1000b3a0:	04400084 	movi	r17,2
1000b3a4:	88e3c83a 	sub	r17,r17,r3
1000b3a8:	003fb506 	br	1000b280 <__alt_data_end+0xf800b280>
1000b3ac:	4c400084 	addi	r17,r9,2
1000b3b0:	8839883a 	mov	fp,r17
1000b3b4:	883dd20e 	bge	r17,zero,1000ab00 <__alt_data_end+0xf800ab00>
1000b3b8:	003fb506 	br	1000b290 <__alt_data_end+0xf800b290>
1000b3bc:	d8c12617 	ldw	r3,1176(sp)
1000b3c0:	003f5706 	br	1000b120 <__alt_data_end+0xf800b120>
1000b3c4:	d8812344 	addi	r2,sp,1165
1000b3c8:	003f8206 	br	1000b1d4 <__alt_data_end+0xf800b1d4>
1000b3cc:	0039883a 	mov	fp,zero
1000b3d0:	003fbd06 	br	1000b2c8 <__alt_data_end+0xf800b2c8>

1000b3d4 <__vfprintf_internal>:
1000b3d4:	2007883a 	mov	r3,r4
1000b3d8:	010400b4 	movhi	r4,4098
1000b3dc:	212bcb04 	addi	r4,r4,-20692
1000b3e0:	21000017 	ldw	r4,0(r4)
1000b3e4:	2805883a 	mov	r2,r5
1000b3e8:	300f883a 	mov	r7,r6
1000b3ec:	180b883a 	mov	r5,r3
1000b3f0:	100d883a 	mov	r6,r2
1000b3f4:	00092d81 	jmpi	100092d8 <___vfprintf_internal_r>

1000b3f8 <__swsetup_r>:
1000b3f8:	008400b4 	movhi	r2,4098
1000b3fc:	defffd04 	addi	sp,sp,-12
1000b400:	10abcb04 	addi	r2,r2,-20692
1000b404:	dc400115 	stw	r17,4(sp)
1000b408:	2023883a 	mov	r17,r4
1000b40c:	11000017 	ldw	r4,0(r2)
1000b410:	dc000015 	stw	r16,0(sp)
1000b414:	dfc00215 	stw	ra,8(sp)
1000b418:	2821883a 	mov	r16,r5
1000b41c:	20000226 	beq	r4,zero,1000b428 <__swsetup_r+0x30>
1000b420:	20c00e17 	ldw	r3,56(r4)
1000b424:	18002e26 	beq	r3,zero,1000b4e0 <__swsetup_r+0xe8>
1000b428:	8080030b 	ldhu	r2,12(r16)
1000b42c:	10c0020c 	andi	r3,r2,8
1000b430:	100d883a 	mov	r6,r2
1000b434:	18000f26 	beq	r3,zero,1000b474 <__swsetup_r+0x7c>
1000b438:	80c00417 	ldw	r3,16(r16)
1000b43c:	18001526 	beq	r3,zero,1000b494 <__swsetup_r+0x9c>
1000b440:	1100004c 	andi	r4,r2,1
1000b444:	20001c1e 	bne	r4,zero,1000b4b8 <__swsetup_r+0xc0>
1000b448:	1080008c 	andi	r2,r2,2
1000b44c:	1000261e 	bne	r2,zero,1000b4e8 <__swsetup_r+0xf0>
1000b450:	80800517 	ldw	r2,20(r16)
1000b454:	80800215 	stw	r2,8(r16)
1000b458:	18001c26 	beq	r3,zero,1000b4cc <__swsetup_r+0xd4>
1000b45c:	0005883a 	mov	r2,zero
1000b460:	dfc00217 	ldw	ra,8(sp)
1000b464:	dc400117 	ldw	r17,4(sp)
1000b468:	dc000017 	ldw	r16,0(sp)
1000b46c:	dec00304 	addi	sp,sp,12
1000b470:	f800283a 	ret
1000b474:	3080040c 	andi	r2,r6,16
1000b478:	10001726 	beq	r2,zero,1000b4d8 <__swsetup_r+0xe0>
1000b47c:	3080010c 	andi	r2,r6,4
1000b480:	10001b1e 	bne	r2,zero,1000b4f0 <__swsetup_r+0xf8>
1000b484:	80c00417 	ldw	r3,16(r16)
1000b488:	30800214 	ori	r2,r6,8
1000b48c:	8080030d 	sth	r2,12(r16)
1000b490:	183feb1e 	bne	r3,zero,1000b440 <__alt_data_end+0xf800b440>
1000b494:	1140a00c 	andi	r5,r2,640
1000b498:	01008004 	movi	r4,512
1000b49c:	293fe826 	beq	r5,r4,1000b440 <__alt_data_end+0xf800b440>
1000b4a0:	8809883a 	mov	r4,r17
1000b4a4:	800b883a 	mov	r5,r16
1000b4a8:	000df8c0 	call	1000df8c <__smakebuf_r>
1000b4ac:	8080030b 	ldhu	r2,12(r16)
1000b4b0:	80c00417 	ldw	r3,16(r16)
1000b4b4:	003fe206 	br	1000b440 <__alt_data_end+0xf800b440>
1000b4b8:	80800517 	ldw	r2,20(r16)
1000b4bc:	80000215 	stw	zero,8(r16)
1000b4c0:	0085c83a 	sub	r2,zero,r2
1000b4c4:	80800615 	stw	r2,24(r16)
1000b4c8:	183fe41e 	bne	r3,zero,1000b45c <__alt_data_end+0xf800b45c>
1000b4cc:	8080030b 	ldhu	r2,12(r16)
1000b4d0:	1080200c 	andi	r2,r2,128
1000b4d4:	103fe226 	beq	r2,zero,1000b460 <__alt_data_end+0xf800b460>
1000b4d8:	00bfffc4 	movi	r2,-1
1000b4dc:	003fe006 	br	1000b460 <__alt_data_end+0xf800b460>
1000b4e0:	000d4340 	call	1000d434 <__sinit>
1000b4e4:	003fd006 	br	1000b428 <__alt_data_end+0xf800b428>
1000b4e8:	0005883a 	mov	r2,zero
1000b4ec:	003fd906 	br	1000b454 <__alt_data_end+0xf800b454>
1000b4f0:	81400c17 	ldw	r5,48(r16)
1000b4f4:	28000626 	beq	r5,zero,1000b510 <__swsetup_r+0x118>
1000b4f8:	80801004 	addi	r2,r16,64
1000b4fc:	28800326 	beq	r5,r2,1000b50c <__swsetup_r+0x114>
1000b500:	8809883a 	mov	r4,r17
1000b504:	000d5a80 	call	1000d5a8 <_free_r>
1000b508:	8180030b 	ldhu	r6,12(r16)
1000b50c:	80000c15 	stw	zero,48(r16)
1000b510:	80c00417 	ldw	r3,16(r16)
1000b514:	00bff6c4 	movi	r2,-37
1000b518:	118c703a 	and	r6,r2,r6
1000b51c:	80000115 	stw	zero,4(r16)
1000b520:	80c00015 	stw	r3,0(r16)
1000b524:	003fd806 	br	1000b488 <__alt_data_end+0xf800b488>

1000b528 <quorem>:
1000b528:	defff204 	addi	sp,sp,-56
1000b52c:	ddc00b15 	stw	r23,44(sp)
1000b530:	20800417 	ldw	r2,16(r4)
1000b534:	2dc00417 	ldw	r23,16(r5)
1000b538:	dfc00d15 	stw	ra,52(sp)
1000b53c:	df000c15 	stw	fp,48(sp)
1000b540:	dd800a15 	stw	r22,40(sp)
1000b544:	dd400915 	stw	r21,36(sp)
1000b548:	dd000815 	stw	r20,32(sp)
1000b54c:	dcc00715 	stw	r19,28(sp)
1000b550:	dc800615 	stw	r18,24(sp)
1000b554:	dc400515 	stw	r17,20(sp)
1000b558:	dc000415 	stw	r16,16(sp)
1000b55c:	15c07a16 	blt	r2,r23,1000b748 <quorem+0x220>
1000b560:	bdffffc4 	addi	r23,r23,-1
1000b564:	bde9883a 	add	r20,r23,r23
1000b568:	28c00504 	addi	r3,r5,20
1000b56c:	a529883a 	add	r20,r20,r20
1000b570:	1d39883a 	add	fp,r3,r20
1000b574:	24c00504 	addi	r19,r4,20
1000b578:	d9400215 	stw	r5,8(sp)
1000b57c:	9d29883a 	add	r20,r19,r20
1000b580:	e1400017 	ldw	r5,0(fp)
1000b584:	d9000015 	stw	r4,0(sp)
1000b588:	a1000017 	ldw	r4,0(r20)
1000b58c:	29400044 	addi	r5,r5,1
1000b590:	d8c00115 	stw	r3,4(sp)
1000b594:	dd000315 	stw	r20,12(sp)
1000b598:	0006de00 	call	10006de0 <__udivsi3>
1000b59c:	1025883a 	mov	r18,r2
1000b5a0:	10003026 	beq	r2,zero,1000b664 <quorem+0x13c>
1000b5a4:	dc400117 	ldw	r17,4(sp)
1000b5a8:	9829883a 	mov	r20,r19
1000b5ac:	002d883a 	mov	r22,zero
1000b5b0:	0021883a 	mov	r16,zero
1000b5b4:	8d400017 	ldw	r21,0(r17)
1000b5b8:	900b883a 	mov	r5,r18
1000b5bc:	8c400104 	addi	r17,r17,4
1000b5c0:	a93fffcc 	andi	r4,r21,65535
1000b5c4:	0006df00 	call	10006df0 <__mulsi3>
1000b5c8:	a808d43a 	srli	r4,r21,16
1000b5cc:	900b883a 	mov	r5,r18
1000b5d0:	b0ad883a 	add	r22,r22,r2
1000b5d4:	0006df00 	call	10006df0 <__mulsi3>
1000b5d8:	a1000017 	ldw	r4,0(r20)
1000b5dc:	b00cd43a 	srli	r6,r22,16
1000b5e0:	b0ffffcc 	andi	r3,r22,65535
1000b5e4:	217fffcc 	andi	r5,r4,65535
1000b5e8:	2c21883a 	add	r16,r5,r16
1000b5ec:	80c7c83a 	sub	r3,r16,r3
1000b5f0:	2008d43a 	srli	r4,r4,16
1000b5f4:	3085883a 	add	r2,r6,r2
1000b5f8:	1821d43a 	srai	r16,r3,16
1000b5fc:	117fffcc 	andi	r5,r2,65535
1000b600:	2149c83a 	sub	r4,r4,r5
1000b604:	2421883a 	add	r16,r4,r16
1000b608:	8008943a 	slli	r4,r16,16
1000b60c:	18ffffcc 	andi	r3,r3,65535
1000b610:	102cd43a 	srli	r22,r2,16
1000b614:	20c8b03a 	or	r4,r4,r3
1000b618:	a1000015 	stw	r4,0(r20)
1000b61c:	8021d43a 	srai	r16,r16,16
1000b620:	a5000104 	addi	r20,r20,4
1000b624:	e47fe32e 	bgeu	fp,r17,1000b5b4 <__alt_data_end+0xf800b5b4>
1000b628:	d8c00317 	ldw	r3,12(sp)
1000b62c:	18800017 	ldw	r2,0(r3)
1000b630:	10000c1e 	bne	r2,zero,1000b664 <quorem+0x13c>
1000b634:	18bfff04 	addi	r2,r3,-4
1000b638:	9880082e 	bgeu	r19,r2,1000b65c <quorem+0x134>
1000b63c:	18ffff17 	ldw	r3,-4(r3)
1000b640:	18000326 	beq	r3,zero,1000b650 <quorem+0x128>
1000b644:	00000506 	br	1000b65c <quorem+0x134>
1000b648:	10c00017 	ldw	r3,0(r2)
1000b64c:	1800031e 	bne	r3,zero,1000b65c <quorem+0x134>
1000b650:	10bfff04 	addi	r2,r2,-4
1000b654:	bdffffc4 	addi	r23,r23,-1
1000b658:	98bffb36 	bltu	r19,r2,1000b648 <__alt_data_end+0xf800b648>
1000b65c:	d8c00017 	ldw	r3,0(sp)
1000b660:	1dc00415 	stw	r23,16(r3)
1000b664:	d9000017 	ldw	r4,0(sp)
1000b668:	d9400217 	ldw	r5,8(sp)
1000b66c:	000f5d00 	call	1000f5d0 <__mcmp>
1000b670:	10002816 	blt	r2,zero,1000b714 <quorem+0x1ec>
1000b674:	dc400117 	ldw	r17,4(sp)
1000b678:	94800044 	addi	r18,r18,1
1000b67c:	980d883a 	mov	r6,r19
1000b680:	0007883a 	mov	r3,zero
1000b684:	31000017 	ldw	r4,0(r6)
1000b688:	89400017 	ldw	r5,0(r17)
1000b68c:	31800104 	addi	r6,r6,4
1000b690:	20bfffcc 	andi	r2,r4,65535
1000b694:	10c7883a 	add	r3,r2,r3
1000b698:	28bfffcc 	andi	r2,r5,65535
1000b69c:	1885c83a 	sub	r2,r3,r2
1000b6a0:	280ad43a 	srli	r5,r5,16
1000b6a4:	2008d43a 	srli	r4,r4,16
1000b6a8:	1007d43a 	srai	r3,r2,16
1000b6ac:	10bfffcc 	andi	r2,r2,65535
1000b6b0:	2149c83a 	sub	r4,r4,r5
1000b6b4:	20c9883a 	add	r4,r4,r3
1000b6b8:	200a943a 	slli	r5,r4,16
1000b6bc:	8c400104 	addi	r17,r17,4
1000b6c0:	2007d43a 	srai	r3,r4,16
1000b6c4:	2884b03a 	or	r2,r5,r2
1000b6c8:	30bfff15 	stw	r2,-4(r6)
1000b6cc:	e47fed2e 	bgeu	fp,r17,1000b684 <__alt_data_end+0xf800b684>
1000b6d0:	bdc5883a 	add	r2,r23,r23
1000b6d4:	1085883a 	add	r2,r2,r2
1000b6d8:	9887883a 	add	r3,r19,r2
1000b6dc:	18800017 	ldw	r2,0(r3)
1000b6e0:	10000c1e 	bne	r2,zero,1000b714 <quorem+0x1ec>
1000b6e4:	18bfff04 	addi	r2,r3,-4
1000b6e8:	9880082e 	bgeu	r19,r2,1000b70c <quorem+0x1e4>
1000b6ec:	18ffff17 	ldw	r3,-4(r3)
1000b6f0:	18000326 	beq	r3,zero,1000b700 <quorem+0x1d8>
1000b6f4:	00000506 	br	1000b70c <quorem+0x1e4>
1000b6f8:	10c00017 	ldw	r3,0(r2)
1000b6fc:	1800031e 	bne	r3,zero,1000b70c <quorem+0x1e4>
1000b700:	10bfff04 	addi	r2,r2,-4
1000b704:	bdffffc4 	addi	r23,r23,-1
1000b708:	98bffb36 	bltu	r19,r2,1000b6f8 <__alt_data_end+0xf800b6f8>
1000b70c:	d8c00017 	ldw	r3,0(sp)
1000b710:	1dc00415 	stw	r23,16(r3)
1000b714:	9005883a 	mov	r2,r18
1000b718:	dfc00d17 	ldw	ra,52(sp)
1000b71c:	df000c17 	ldw	fp,48(sp)
1000b720:	ddc00b17 	ldw	r23,44(sp)
1000b724:	dd800a17 	ldw	r22,40(sp)
1000b728:	dd400917 	ldw	r21,36(sp)
1000b72c:	dd000817 	ldw	r20,32(sp)
1000b730:	dcc00717 	ldw	r19,28(sp)
1000b734:	dc800617 	ldw	r18,24(sp)
1000b738:	dc400517 	ldw	r17,20(sp)
1000b73c:	dc000417 	ldw	r16,16(sp)
1000b740:	dec00e04 	addi	sp,sp,56
1000b744:	f800283a 	ret
1000b748:	0005883a 	mov	r2,zero
1000b74c:	003ff206 	br	1000b718 <__alt_data_end+0xf800b718>

1000b750 <_dtoa_r>:
1000b750:	20801017 	ldw	r2,64(r4)
1000b754:	deffde04 	addi	sp,sp,-136
1000b758:	dd401d15 	stw	r21,116(sp)
1000b75c:	dcc01b15 	stw	r19,108(sp)
1000b760:	dc801a15 	stw	r18,104(sp)
1000b764:	dc401915 	stw	r17,100(sp)
1000b768:	dc001815 	stw	r16,96(sp)
1000b76c:	dfc02115 	stw	ra,132(sp)
1000b770:	df002015 	stw	fp,128(sp)
1000b774:	ddc01f15 	stw	r23,124(sp)
1000b778:	dd801e15 	stw	r22,120(sp)
1000b77c:	dd001c15 	stw	r20,112(sp)
1000b780:	d9c00315 	stw	r7,12(sp)
1000b784:	2021883a 	mov	r16,r4
1000b788:	302b883a 	mov	r21,r6
1000b78c:	2825883a 	mov	r18,r5
1000b790:	dc402417 	ldw	r17,144(sp)
1000b794:	3027883a 	mov	r19,r6
1000b798:	10000826 	beq	r2,zero,1000b7bc <_dtoa_r+0x6c>
1000b79c:	21801117 	ldw	r6,68(r4)
1000b7a0:	00c00044 	movi	r3,1
1000b7a4:	100b883a 	mov	r5,r2
1000b7a8:	1986983a 	sll	r3,r3,r6
1000b7ac:	11800115 	stw	r6,4(r2)
1000b7b0:	10c00215 	stw	r3,8(r2)
1000b7b4:	000ecfc0 	call	1000ecfc <_Bfree>
1000b7b8:	80001015 	stw	zero,64(r16)
1000b7bc:	a8002d16 	blt	r21,zero,1000b874 <_dtoa_r+0x124>
1000b7c0:	88000015 	stw	zero,0(r17)
1000b7c4:	a8dffc2c 	andhi	r3,r21,32752
1000b7c8:	009ffc34 	movhi	r2,32752
1000b7cc:	18801b26 	beq	r3,r2,1000b83c <_dtoa_r+0xec>
1000b7d0:	9009883a 	mov	r4,r18
1000b7d4:	980b883a 	mov	r5,r19
1000b7d8:	000d883a 	mov	r6,zero
1000b7dc:	000f883a 	mov	r7,zero
1000b7e0:	00143100 	call	10014310 <__eqdf2>
1000b7e4:	10002a1e 	bne	r2,zero,1000b890 <_dtoa_r+0x140>
1000b7e8:	d8c02317 	ldw	r3,140(sp)
1000b7ec:	d9002517 	ldw	r4,148(sp)
1000b7f0:	00800044 	movi	r2,1
1000b7f4:	18800015 	stw	r2,0(r3)
1000b7f8:	2001a226 	beq	r4,zero,1000be84 <_dtoa_r+0x734>
1000b7fc:	008400b4 	movhi	r2,4098
1000b800:	10a4b044 	addi	r2,r2,-27967
1000b804:	20800015 	stw	r2,0(r4)
1000b808:	10bfffc4 	addi	r2,r2,-1
1000b80c:	dfc02117 	ldw	ra,132(sp)
1000b810:	df002017 	ldw	fp,128(sp)
1000b814:	ddc01f17 	ldw	r23,124(sp)
1000b818:	dd801e17 	ldw	r22,120(sp)
1000b81c:	dd401d17 	ldw	r21,116(sp)
1000b820:	dd001c17 	ldw	r20,112(sp)
1000b824:	dcc01b17 	ldw	r19,108(sp)
1000b828:	dc801a17 	ldw	r18,104(sp)
1000b82c:	dc401917 	ldw	r17,100(sp)
1000b830:	dc001817 	ldw	r16,96(sp)
1000b834:	dec02204 	addi	sp,sp,136
1000b838:	f800283a 	ret
1000b83c:	d8c02317 	ldw	r3,140(sp)
1000b840:	0089c3c4 	movi	r2,9999
1000b844:	18800015 	stw	r2,0(r3)
1000b848:	90017c26 	beq	r18,zero,1000be3c <_dtoa_r+0x6ec>
1000b84c:	008400b4 	movhi	r2,4098
1000b850:	10a4bc04 	addi	r2,r2,-27920
1000b854:	d9002517 	ldw	r4,148(sp)
1000b858:	203fec26 	beq	r4,zero,1000b80c <__alt_data_end+0xf800b80c>
1000b85c:	10c000c7 	ldb	r3,3(r2)
1000b860:	18017d1e 	bne	r3,zero,1000be58 <_dtoa_r+0x708>
1000b864:	10c000c4 	addi	r3,r2,3
1000b868:	d9802517 	ldw	r6,148(sp)
1000b86c:	30c00015 	stw	r3,0(r6)
1000b870:	003fe606 	br	1000b80c <__alt_data_end+0xf800b80c>
1000b874:	04e00034 	movhi	r19,32768
1000b878:	9cffffc4 	addi	r19,r19,-1
1000b87c:	00800044 	movi	r2,1
1000b880:	ace6703a 	and	r19,r21,r19
1000b884:	88800015 	stw	r2,0(r17)
1000b888:	982b883a 	mov	r21,r19
1000b88c:	003fcd06 	br	1000b7c4 <__alt_data_end+0xf800b7c4>
1000b890:	d8800204 	addi	r2,sp,8
1000b894:	a822d53a 	srli	r17,r21,20
1000b898:	d8800015 	stw	r2,0(sp)
1000b89c:	8009883a 	mov	r4,r16
1000b8a0:	900b883a 	mov	r5,r18
1000b8a4:	980d883a 	mov	r6,r19
1000b8a8:	d9c00104 	addi	r7,sp,4
1000b8ac:	000f9440 	call	1000f944 <__d2b>
1000b8b0:	1039883a 	mov	fp,r2
1000b8b4:	88016a1e 	bne	r17,zero,1000be60 <_dtoa_r+0x710>
1000b8b8:	dd000217 	ldw	r20,8(sp)
1000b8bc:	dc400117 	ldw	r17,4(sp)
1000b8c0:	00befbc4 	movi	r2,-1041
1000b8c4:	a463883a 	add	r17,r20,r17
1000b8c8:	8882ea16 	blt	r17,r2,1000c474 <_dtoa_r+0xd24>
1000b8cc:	00bf0384 	movi	r2,-1010
1000b8d0:	1445c83a 	sub	r2,r2,r17
1000b8d4:	89010484 	addi	r4,r17,1042
1000b8d8:	a8aa983a 	sll	r21,r21,r2
1000b8dc:	9108d83a 	srl	r4,r18,r4
1000b8e0:	a908b03a 	or	r4,r21,r4
1000b8e4:	00146ac0 	call	100146ac <__floatunsidf>
1000b8e8:	017f8434 	movhi	r5,65040
1000b8ec:	01800044 	movi	r6,1
1000b8f0:	1009883a 	mov	r4,r2
1000b8f4:	194b883a 	add	r5,r3,r5
1000b8f8:	8c7fffc4 	addi	r17,r17,-1
1000b8fc:	d9800f15 	stw	r6,60(sp)
1000b900:	000d883a 	mov	r6,zero
1000b904:	01cffe34 	movhi	r7,16376
1000b908:	000837c0 	call	1000837c <__subdf3>
1000b90c:	0198dbf4 	movhi	r6,25455
1000b910:	01cff4f4 	movhi	r7,16339
1000b914:	1009883a 	mov	r4,r2
1000b918:	180b883a 	mov	r5,r3
1000b91c:	3190d844 	addi	r6,r6,17249
1000b920:	39e1e9c4 	addi	r7,r7,-30809
1000b924:	0007b100 	call	10007b10 <__muldf3>
1000b928:	01a2d874 	movhi	r6,35681
1000b92c:	01cff1f4 	movhi	r7,16327
1000b930:	180b883a 	mov	r5,r3
1000b934:	31b22cc4 	addi	r6,r6,-14157
1000b938:	39e28a04 	addi	r7,r7,-30168
1000b93c:	1009883a 	mov	r4,r2
1000b940:	00130f40 	call	100130f4 <__adddf3>
1000b944:	8809883a 	mov	r4,r17
1000b948:	102d883a 	mov	r22,r2
1000b94c:	182b883a 	mov	r21,r3
1000b950:	00145dc0 	call	100145dc <__floatsidf>
1000b954:	019427f4 	movhi	r6,20639
1000b958:	01cff4f4 	movhi	r7,16339
1000b95c:	1009883a 	mov	r4,r2
1000b960:	180b883a 	mov	r5,r3
1000b964:	319e7ec4 	addi	r6,r6,31227
1000b968:	39d104c4 	addi	r7,r7,17427
1000b96c:	0007b100 	call	10007b10 <__muldf3>
1000b970:	b009883a 	mov	r4,r22
1000b974:	a80b883a 	mov	r5,r21
1000b978:	100d883a 	mov	r6,r2
1000b97c:	180f883a 	mov	r7,r3
1000b980:	00130f40 	call	100130f4 <__adddf3>
1000b984:	1009883a 	mov	r4,r2
1000b988:	180b883a 	mov	r5,r3
1000b98c:	102d883a 	mov	r22,r2
1000b990:	182b883a 	mov	r21,r3
1000b994:	00145540 	call	10014554 <__fixdfsi>
1000b998:	b009883a 	mov	r4,r22
1000b99c:	a80b883a 	mov	r5,r21
1000b9a0:	000d883a 	mov	r6,zero
1000b9a4:	000f883a 	mov	r7,zero
1000b9a8:	d8800515 	stw	r2,20(sp)
1000b9ac:	00144740 	call	10014474 <__ledf2>
1000b9b0:	10023116 	blt	r2,zero,1000c278 <_dtoa_r+0xb28>
1000b9b4:	d8c00517 	ldw	r3,20(sp)
1000b9b8:	00800584 	movi	r2,22
1000b9bc:	10c21f36 	bltu	r2,r3,1000c23c <_dtoa_r+0xaec>
1000b9c0:	180490fa 	slli	r2,r3,3
1000b9c4:	00c400b4 	movhi	r3,4098
1000b9c8:	18e4d804 	addi	r3,r3,-27808
1000b9cc:	1885883a 	add	r2,r3,r2
1000b9d0:	11000017 	ldw	r4,0(r2)
1000b9d4:	11400117 	ldw	r5,4(r2)
1000b9d8:	900d883a 	mov	r6,r18
1000b9dc:	980f883a 	mov	r7,r19
1000b9e0:	00143940 	call	10014394 <__gedf2>
1000b9e4:	0082a70e 	bge	zero,r2,1000c484 <_dtoa_r+0xd34>
1000b9e8:	d9000517 	ldw	r4,20(sp)
1000b9ec:	d8000c15 	stw	zero,48(sp)
1000b9f0:	213fffc4 	addi	r4,r4,-1
1000b9f4:	d9000515 	stw	r4,20(sp)
1000b9f8:	a463c83a 	sub	r17,r20,r17
1000b9fc:	8dbfffc4 	addi	r22,r17,-1
1000ba00:	b0021916 	blt	r22,zero,1000c268 <_dtoa_r+0xb18>
1000ba04:	d8000815 	stw	zero,32(sp)
1000ba08:	d8800517 	ldw	r2,20(sp)
1000ba0c:	10020e16 	blt	r2,zero,1000c248 <_dtoa_r+0xaf8>
1000ba10:	b0ad883a 	add	r22,r22,r2
1000ba14:	d8800a15 	stw	r2,40(sp)
1000ba18:	d8000915 	stw	zero,36(sp)
1000ba1c:	d8c00317 	ldw	r3,12(sp)
1000ba20:	00800244 	movi	r2,9
1000ba24:	10c11a36 	bltu	r2,r3,1000be90 <_dtoa_r+0x740>
1000ba28:	00800144 	movi	r2,5
1000ba2c:	10c4fc0e 	bge	r2,r3,1000ce20 <_dtoa_r+0x16d0>
1000ba30:	18ffff04 	addi	r3,r3,-4
1000ba34:	d8c00315 	stw	r3,12(sp)
1000ba38:	0029883a 	mov	r20,zero
1000ba3c:	d9800317 	ldw	r6,12(sp)
1000ba40:	008000c4 	movi	r2,3
1000ba44:	3083bd26 	beq	r6,r2,1000c93c <_dtoa_r+0x11ec>
1000ba48:	1183670e 	bge	r2,r6,1000c7e8 <_dtoa_r+0x1098>
1000ba4c:	d8c00317 	ldw	r3,12(sp)
1000ba50:	00800104 	movi	r2,4
1000ba54:	1882e726 	beq	r3,r2,1000c5f4 <_dtoa_r+0xea4>
1000ba58:	00800144 	movi	r2,5
1000ba5c:	1884f21e 	bne	r3,r2,1000ce28 <_dtoa_r+0x16d8>
1000ba60:	00800044 	movi	r2,1
1000ba64:	d8800b15 	stw	r2,44(sp)
1000ba68:	d8c02217 	ldw	r3,136(sp)
1000ba6c:	d9000517 	ldw	r4,20(sp)
1000ba70:	1907883a 	add	r3,r3,r4
1000ba74:	19800044 	addi	r6,r3,1
1000ba78:	d8c00d15 	stw	r3,52(sp)
1000ba7c:	d9800615 	stw	r6,24(sp)
1000ba80:	0183c30e 	bge	zero,r6,1000c990 <_dtoa_r+0x1240>
1000ba84:	d9800617 	ldw	r6,24(sp)
1000ba88:	3023883a 	mov	r17,r6
1000ba8c:	80001115 	stw	zero,68(r16)
1000ba90:	008005c4 	movi	r2,23
1000ba94:	1184f62e 	bgeu	r2,r6,1000ce70 <_dtoa_r+0x1720>
1000ba98:	00c00044 	movi	r3,1
1000ba9c:	00800104 	movi	r2,4
1000baa0:	1085883a 	add	r2,r2,r2
1000baa4:	11000504 	addi	r4,r2,20
1000baa8:	180b883a 	mov	r5,r3
1000baac:	18c00044 	addi	r3,r3,1
1000bab0:	313ffb2e 	bgeu	r6,r4,1000baa0 <__alt_data_end+0xf800baa0>
1000bab4:	81401115 	stw	r5,68(r16)
1000bab8:	8009883a 	mov	r4,r16
1000babc:	000ec540 	call	1000ec54 <_Balloc>
1000bac0:	d8800715 	stw	r2,28(sp)
1000bac4:	80801015 	stw	r2,64(r16)
1000bac8:	00800384 	movi	r2,14
1000bacc:	1440fd36 	bltu	r2,r17,1000bec4 <_dtoa_r+0x774>
1000bad0:	a000fc26 	beq	r20,zero,1000bec4 <_dtoa_r+0x774>
1000bad4:	d8800517 	ldw	r2,20(sp)
1000bad8:	0083b90e 	bge	zero,r2,1000c9c0 <_dtoa_r+0x1270>
1000badc:	d8c00517 	ldw	r3,20(sp)
1000bae0:	108003cc 	andi	r2,r2,15
1000bae4:	100490fa 	slli	r2,r2,3
1000bae8:	182fd13a 	srai	r23,r3,4
1000baec:	00c400b4 	movhi	r3,4098
1000baf0:	18e4d804 	addi	r3,r3,-27808
1000baf4:	1885883a 	add	r2,r3,r2
1000baf8:	b8c0040c 	andi	r3,r23,16
1000bafc:	12c00017 	ldw	r11,0(r2)
1000bb00:	12800117 	ldw	r10,4(r2)
1000bb04:	18039726 	beq	r3,zero,1000c964 <_dtoa_r+0x1214>
1000bb08:	008400b4 	movhi	r2,4098
1000bb0c:	10a4ce04 	addi	r2,r2,-27848
1000bb10:	11800817 	ldw	r6,32(r2)
1000bb14:	11c00917 	ldw	r7,36(r2)
1000bb18:	9009883a 	mov	r4,r18
1000bb1c:	980b883a 	mov	r5,r19
1000bb20:	da801615 	stw	r10,88(sp)
1000bb24:	dac01515 	stw	r11,84(sp)
1000bb28:	00139900 	call	10013990 <__divdf3>
1000bb2c:	da801617 	ldw	r10,88(sp)
1000bb30:	dac01517 	ldw	r11,84(sp)
1000bb34:	bdc003cc 	andi	r23,r23,15
1000bb38:	044000c4 	movi	r17,3
1000bb3c:	d8800e15 	stw	r2,56(sp)
1000bb40:	182b883a 	mov	r21,r3
1000bb44:	b8001126 	beq	r23,zero,1000bb8c <_dtoa_r+0x43c>
1000bb48:	050400b4 	movhi	r20,4098
1000bb4c:	a524ce04 	addi	r20,r20,-27848
1000bb50:	5805883a 	mov	r2,r11
1000bb54:	5007883a 	mov	r3,r10
1000bb58:	b980004c 	andi	r6,r23,1
1000bb5c:	1009883a 	mov	r4,r2
1000bb60:	b82fd07a 	srai	r23,r23,1
1000bb64:	180b883a 	mov	r5,r3
1000bb68:	30000426 	beq	r6,zero,1000bb7c <_dtoa_r+0x42c>
1000bb6c:	a1800017 	ldw	r6,0(r20)
1000bb70:	a1c00117 	ldw	r7,4(r20)
1000bb74:	8c400044 	addi	r17,r17,1
1000bb78:	0007b100 	call	10007b10 <__muldf3>
1000bb7c:	a5000204 	addi	r20,r20,8
1000bb80:	b83ff51e 	bne	r23,zero,1000bb58 <__alt_data_end+0xf800bb58>
1000bb84:	1017883a 	mov	r11,r2
1000bb88:	1815883a 	mov	r10,r3
1000bb8c:	d9000e17 	ldw	r4,56(sp)
1000bb90:	a80b883a 	mov	r5,r21
1000bb94:	580d883a 	mov	r6,r11
1000bb98:	500f883a 	mov	r7,r10
1000bb9c:	00139900 	call	10013990 <__divdf3>
1000bba0:	1029883a 	mov	r20,r2
1000bba4:	182b883a 	mov	r21,r3
1000bba8:	d9800c17 	ldw	r6,48(sp)
1000bbac:	30000626 	beq	r6,zero,1000bbc8 <_dtoa_r+0x478>
1000bbb0:	a009883a 	mov	r4,r20
1000bbb4:	a80b883a 	mov	r5,r21
1000bbb8:	000d883a 	mov	r6,zero
1000bbbc:	01cffc34 	movhi	r7,16368
1000bbc0:	00144740 	call	10014474 <__ledf2>
1000bbc4:	10043216 	blt	r2,zero,1000cc90 <_dtoa_r+0x1540>
1000bbc8:	8809883a 	mov	r4,r17
1000bbcc:	00145dc0 	call	100145dc <__floatsidf>
1000bbd0:	1009883a 	mov	r4,r2
1000bbd4:	180b883a 	mov	r5,r3
1000bbd8:	a00d883a 	mov	r6,r20
1000bbdc:	a80f883a 	mov	r7,r21
1000bbe0:	0007b100 	call	10007b10 <__muldf3>
1000bbe4:	000d883a 	mov	r6,zero
1000bbe8:	1009883a 	mov	r4,r2
1000bbec:	180b883a 	mov	r5,r3
1000bbf0:	01d00734 	movhi	r7,16412
1000bbf4:	00130f40 	call	100130f4 <__adddf3>
1000bbf8:	1023883a 	mov	r17,r2
1000bbfc:	d9800617 	ldw	r6,24(sp)
1000bc00:	00bf3034 	movhi	r2,64704
1000bc04:	1885883a 	add	r2,r3,r2
1000bc08:	d8800e15 	stw	r2,56(sp)
1000bc0c:	30032e26 	beq	r6,zero,1000c8c8 <_dtoa_r+0x1178>
1000bc10:	d8c00517 	ldw	r3,20(sp)
1000bc14:	da800617 	ldw	r10,24(sp)
1000bc18:	d8c01215 	stw	r3,72(sp)
1000bc1c:	d9000b17 	ldw	r4,44(sp)
1000bc20:	2003b026 	beq	r4,zero,1000cae4 <_dtoa_r+0x1394>
1000bc24:	50bfffc4 	addi	r2,r10,-1
1000bc28:	100490fa 	slli	r2,r2,3
1000bc2c:	00c400b4 	movhi	r3,4098
1000bc30:	18e4d804 	addi	r3,r3,-27808
1000bc34:	1885883a 	add	r2,r3,r2
1000bc38:	11800017 	ldw	r6,0(r2)
1000bc3c:	11c00117 	ldw	r7,4(r2)
1000bc40:	d8800717 	ldw	r2,28(sp)
1000bc44:	0009883a 	mov	r4,zero
1000bc48:	014ff834 	movhi	r5,16352
1000bc4c:	da801615 	stw	r10,88(sp)
1000bc50:	15c00044 	addi	r23,r2,1
1000bc54:	00139900 	call	10013990 <__divdf3>
1000bc58:	d9c00e17 	ldw	r7,56(sp)
1000bc5c:	880d883a 	mov	r6,r17
1000bc60:	1009883a 	mov	r4,r2
1000bc64:	180b883a 	mov	r5,r3
1000bc68:	000837c0 	call	1000837c <__subdf3>
1000bc6c:	a80b883a 	mov	r5,r21
1000bc70:	a009883a 	mov	r4,r20
1000bc74:	d8c01015 	stw	r3,64(sp)
1000bc78:	d8800e15 	stw	r2,56(sp)
1000bc7c:	00145540 	call	10014554 <__fixdfsi>
1000bc80:	1009883a 	mov	r4,r2
1000bc84:	d8801715 	stw	r2,92(sp)
1000bc88:	00145dc0 	call	100145dc <__floatsidf>
1000bc8c:	a009883a 	mov	r4,r20
1000bc90:	a80b883a 	mov	r5,r21
1000bc94:	100d883a 	mov	r6,r2
1000bc98:	180f883a 	mov	r7,r3
1000bc9c:	000837c0 	call	1000837c <__subdf3>
1000bca0:	da001717 	ldw	r8,92(sp)
1000bca4:	1829883a 	mov	r20,r3
1000bca8:	d8c00717 	ldw	r3,28(sp)
1000bcac:	d9000e17 	ldw	r4,56(sp)
1000bcb0:	d9401017 	ldw	r5,64(sp)
1000bcb4:	42000c04 	addi	r8,r8,48
1000bcb8:	1023883a 	mov	r17,r2
1000bcbc:	1a000005 	stb	r8,0(r3)
1000bcc0:	880d883a 	mov	r6,r17
1000bcc4:	a00f883a 	mov	r7,r20
1000bcc8:	402b883a 	mov	r21,r8
1000bccc:	00143940 	call	10014394 <__gedf2>
1000bcd0:	00844516 	blt	zero,r2,1000cde8 <_dtoa_r+0x1698>
1000bcd4:	0009883a 	mov	r4,zero
1000bcd8:	014ffc34 	movhi	r5,16368
1000bcdc:	880d883a 	mov	r6,r17
1000bce0:	a00f883a 	mov	r7,r20
1000bce4:	000837c0 	call	1000837c <__subdf3>
1000bce8:	d9000e17 	ldw	r4,56(sp)
1000bcec:	d9401017 	ldw	r5,64(sp)
1000bcf0:	100d883a 	mov	r6,r2
1000bcf4:	180f883a 	mov	r7,r3
1000bcf8:	00143940 	call	10014394 <__gedf2>
1000bcfc:	da801617 	ldw	r10,88(sp)
1000bd00:	00843616 	blt	zero,r2,1000cddc <_dtoa_r+0x168c>
1000bd04:	00800044 	movi	r2,1
1000bd08:	12806e0e 	bge	r2,r10,1000bec4 <_dtoa_r+0x774>
1000bd0c:	d9000717 	ldw	r4,28(sp)
1000bd10:	dd801315 	stw	r22,76(sp)
1000bd14:	dc001115 	stw	r16,68(sp)
1000bd18:	2295883a 	add	r10,r4,r10
1000bd1c:	dcc01415 	stw	r19,80(sp)
1000bd20:	502d883a 	mov	r22,r10
1000bd24:	dcc01017 	ldw	r19,64(sp)
1000bd28:	b821883a 	mov	r16,r23
1000bd2c:	dc801015 	stw	r18,64(sp)
1000bd30:	dc800e17 	ldw	r18,56(sp)
1000bd34:	00000906 	br	1000bd5c <_dtoa_r+0x60c>
1000bd38:	000837c0 	call	1000837c <__subdf3>
1000bd3c:	1009883a 	mov	r4,r2
1000bd40:	180b883a 	mov	r5,r3
1000bd44:	900d883a 	mov	r6,r18
1000bd48:	980f883a 	mov	r7,r19
1000bd4c:	00144740 	call	10014474 <__ledf2>
1000bd50:	10040e16 	blt	r2,zero,1000cd8c <_dtoa_r+0x163c>
1000bd54:	b821883a 	mov	r16,r23
1000bd58:	bd841026 	beq	r23,r22,1000cd9c <_dtoa_r+0x164c>
1000bd5c:	9009883a 	mov	r4,r18
1000bd60:	980b883a 	mov	r5,r19
1000bd64:	000d883a 	mov	r6,zero
1000bd68:	01d00934 	movhi	r7,16420
1000bd6c:	0007b100 	call	10007b10 <__muldf3>
1000bd70:	000d883a 	mov	r6,zero
1000bd74:	01d00934 	movhi	r7,16420
1000bd78:	8809883a 	mov	r4,r17
1000bd7c:	a00b883a 	mov	r5,r20
1000bd80:	1025883a 	mov	r18,r2
1000bd84:	1827883a 	mov	r19,r3
1000bd88:	0007b100 	call	10007b10 <__muldf3>
1000bd8c:	180b883a 	mov	r5,r3
1000bd90:	1009883a 	mov	r4,r2
1000bd94:	1823883a 	mov	r17,r3
1000bd98:	1029883a 	mov	r20,r2
1000bd9c:	00145540 	call	10014554 <__fixdfsi>
1000bda0:	1009883a 	mov	r4,r2
1000bda4:	102b883a 	mov	r21,r2
1000bda8:	00145dc0 	call	100145dc <__floatsidf>
1000bdac:	a009883a 	mov	r4,r20
1000bdb0:	880b883a 	mov	r5,r17
1000bdb4:	100d883a 	mov	r6,r2
1000bdb8:	180f883a 	mov	r7,r3
1000bdbc:	000837c0 	call	1000837c <__subdf3>
1000bdc0:	ad400c04 	addi	r21,r21,48
1000bdc4:	1009883a 	mov	r4,r2
1000bdc8:	180b883a 	mov	r5,r3
1000bdcc:	900d883a 	mov	r6,r18
1000bdd0:	980f883a 	mov	r7,r19
1000bdd4:	85400005 	stb	r21,0(r16)
1000bdd8:	1023883a 	mov	r17,r2
1000bddc:	1829883a 	mov	r20,r3
1000bde0:	00144740 	call	10014474 <__ledf2>
1000bde4:	bdc00044 	addi	r23,r23,1
1000bde8:	0009883a 	mov	r4,zero
1000bdec:	014ffc34 	movhi	r5,16368
1000bdf0:	880d883a 	mov	r6,r17
1000bdf4:	a00f883a 	mov	r7,r20
1000bdf8:	103fcf0e 	bge	r2,zero,1000bd38 <__alt_data_end+0xf800bd38>
1000bdfc:	d9801217 	ldw	r6,72(sp)
1000be00:	dc001117 	ldw	r16,68(sp)
1000be04:	d9800515 	stw	r6,20(sp)
1000be08:	8009883a 	mov	r4,r16
1000be0c:	e00b883a 	mov	r5,fp
1000be10:	000ecfc0 	call	1000ecfc <_Bfree>
1000be14:	d8c00517 	ldw	r3,20(sp)
1000be18:	d9002317 	ldw	r4,140(sp)
1000be1c:	d9802517 	ldw	r6,148(sp)
1000be20:	b8000005 	stb	zero,0(r23)
1000be24:	18800044 	addi	r2,r3,1
1000be28:	20800015 	stw	r2,0(r4)
1000be2c:	30027226 	beq	r6,zero,1000c7f8 <_dtoa_r+0x10a8>
1000be30:	35c00015 	stw	r23,0(r6)
1000be34:	d8800717 	ldw	r2,28(sp)
1000be38:	003e7406 	br	1000b80c <__alt_data_end+0xf800b80c>
1000be3c:	00800434 	movhi	r2,16
1000be40:	10bfffc4 	addi	r2,r2,-1
1000be44:	a8aa703a 	and	r21,r21,r2
1000be48:	a83e801e 	bne	r21,zero,1000b84c <__alt_data_end+0xf800b84c>
1000be4c:	008400b4 	movhi	r2,4098
1000be50:	10a4b904 	addi	r2,r2,-27932
1000be54:	003e7f06 	br	1000b854 <__alt_data_end+0xf800b854>
1000be58:	10c00204 	addi	r3,r2,8
1000be5c:	003e8206 	br	1000b868 <__alt_data_end+0xf800b868>
1000be60:	01400434 	movhi	r5,16
1000be64:	297fffc4 	addi	r5,r5,-1
1000be68:	994a703a 	and	r5,r19,r5
1000be6c:	9009883a 	mov	r4,r18
1000be70:	8c7f0044 	addi	r17,r17,-1023
1000be74:	294ffc34 	orhi	r5,r5,16368
1000be78:	dd000217 	ldw	r20,8(sp)
1000be7c:	d8000f15 	stw	zero,60(sp)
1000be80:	003e9f06 	br	1000b900 <__alt_data_end+0xf800b900>
1000be84:	008400b4 	movhi	r2,4098
1000be88:	10a4b004 	addi	r2,r2,-27968
1000be8c:	003e5f06 	br	1000b80c <__alt_data_end+0xf800b80c>
1000be90:	80001115 	stw	zero,68(r16)
1000be94:	8009883a 	mov	r4,r16
1000be98:	000b883a 	mov	r5,zero
1000be9c:	000ec540 	call	1000ec54 <_Balloc>
1000bea0:	01bfffc4 	movi	r6,-1
1000bea4:	d8800715 	stw	r2,28(sp)
1000bea8:	80801015 	stw	r2,64(r16)
1000beac:	00800044 	movi	r2,1
1000beb0:	d9800615 	stw	r6,24(sp)
1000beb4:	d8800b15 	stw	r2,44(sp)
1000beb8:	d8002215 	stw	zero,136(sp)
1000bebc:	d9800d15 	stw	r6,52(sp)
1000bec0:	d8000315 	stw	zero,12(sp)
1000bec4:	d8800117 	ldw	r2,4(sp)
1000bec8:	10008e16 	blt	r2,zero,1000c104 <_dtoa_r+0x9b4>
1000becc:	d9000517 	ldw	r4,20(sp)
1000bed0:	00c00384 	movi	r3,14
1000bed4:	19008b16 	blt	r3,r4,1000c104 <_dtoa_r+0x9b4>
1000bed8:	200490fa 	slli	r2,r4,3
1000bedc:	00c400b4 	movhi	r3,4098
1000bee0:	d9802217 	ldw	r6,136(sp)
1000bee4:	18e4d804 	addi	r3,r3,-27808
1000bee8:	1885883a 	add	r2,r3,r2
1000beec:	14400017 	ldw	r17,0(r2)
1000bef0:	15000117 	ldw	r20,4(r2)
1000bef4:	3001c716 	blt	r6,zero,1000c614 <_dtoa_r+0xec4>
1000bef8:	880d883a 	mov	r6,r17
1000befc:	a00f883a 	mov	r7,r20
1000bf00:	9009883a 	mov	r4,r18
1000bf04:	980b883a 	mov	r5,r19
1000bf08:	00139900 	call	10013990 <__divdf3>
1000bf0c:	180b883a 	mov	r5,r3
1000bf10:	1009883a 	mov	r4,r2
1000bf14:	00145540 	call	10014554 <__fixdfsi>
1000bf18:	1009883a 	mov	r4,r2
1000bf1c:	102d883a 	mov	r22,r2
1000bf20:	00145dc0 	call	100145dc <__floatsidf>
1000bf24:	1009883a 	mov	r4,r2
1000bf28:	180b883a 	mov	r5,r3
1000bf2c:	880d883a 	mov	r6,r17
1000bf30:	a00f883a 	mov	r7,r20
1000bf34:	0007b100 	call	10007b10 <__muldf3>
1000bf38:	9009883a 	mov	r4,r18
1000bf3c:	980b883a 	mov	r5,r19
1000bf40:	100d883a 	mov	r6,r2
1000bf44:	180f883a 	mov	r7,r3
1000bf48:	000837c0 	call	1000837c <__subdf3>
1000bf4c:	d9000717 	ldw	r4,28(sp)
1000bf50:	d9800617 	ldw	r6,24(sp)
1000bf54:	180b883a 	mov	r5,r3
1000bf58:	b0c00c04 	addi	r3,r22,48
1000bf5c:	20c00005 	stb	r3,0(r4)
1000bf60:	25c00044 	addi	r23,r4,1
1000bf64:	01000044 	movi	r4,1
1000bf68:	1011883a 	mov	r8,r2
1000bf6c:	2807883a 	mov	r3,r5
1000bf70:	31003d26 	beq	r6,r4,1000c068 <_dtoa_r+0x918>
1000bf74:	000d883a 	mov	r6,zero
1000bf78:	01d00934 	movhi	r7,16420
1000bf7c:	1009883a 	mov	r4,r2
1000bf80:	0007b100 	call	10007b10 <__muldf3>
1000bf84:	1009883a 	mov	r4,r2
1000bf88:	180b883a 	mov	r5,r3
1000bf8c:	000d883a 	mov	r6,zero
1000bf90:	000f883a 	mov	r7,zero
1000bf94:	1027883a 	mov	r19,r2
1000bf98:	182b883a 	mov	r21,r3
1000bf9c:	00143100 	call	10014310 <__eqdf2>
1000bfa0:	103f9926 	beq	r2,zero,1000be08 <__alt_data_end+0xf800be08>
1000bfa4:	d8c00617 	ldw	r3,24(sp)
1000bfa8:	d9000717 	ldw	r4,28(sp)
1000bfac:	b825883a 	mov	r18,r23
1000bfb0:	18bfffc4 	addi	r2,r3,-1
1000bfb4:	20ad883a 	add	r22,r4,r2
1000bfb8:	dc000315 	stw	r16,12(sp)
1000bfbc:	00000a06 	br	1000bfe8 <_dtoa_r+0x898>
1000bfc0:	0007b100 	call	10007b10 <__muldf3>
1000bfc4:	1009883a 	mov	r4,r2
1000bfc8:	180b883a 	mov	r5,r3
1000bfcc:	000d883a 	mov	r6,zero
1000bfd0:	000f883a 	mov	r7,zero
1000bfd4:	1027883a 	mov	r19,r2
1000bfd8:	182b883a 	mov	r21,r3
1000bfdc:	b825883a 	mov	r18,r23
1000bfe0:	00143100 	call	10014310 <__eqdf2>
1000bfe4:	10022626 	beq	r2,zero,1000c880 <_dtoa_r+0x1130>
1000bfe8:	880d883a 	mov	r6,r17
1000bfec:	a00f883a 	mov	r7,r20
1000bff0:	9809883a 	mov	r4,r19
1000bff4:	a80b883a 	mov	r5,r21
1000bff8:	00139900 	call	10013990 <__divdf3>
1000bffc:	180b883a 	mov	r5,r3
1000c000:	1009883a 	mov	r4,r2
1000c004:	00145540 	call	10014554 <__fixdfsi>
1000c008:	1009883a 	mov	r4,r2
1000c00c:	1021883a 	mov	r16,r2
1000c010:	00145dc0 	call	100145dc <__floatsidf>
1000c014:	1009883a 	mov	r4,r2
1000c018:	180b883a 	mov	r5,r3
1000c01c:	880d883a 	mov	r6,r17
1000c020:	a00f883a 	mov	r7,r20
1000c024:	0007b100 	call	10007b10 <__muldf3>
1000c028:	9809883a 	mov	r4,r19
1000c02c:	a80b883a 	mov	r5,r21
1000c030:	100d883a 	mov	r6,r2
1000c034:	180f883a 	mov	r7,r3
1000c038:	000837c0 	call	1000837c <__subdf3>
1000c03c:	82000c04 	addi	r8,r16,48
1000c040:	92000005 	stb	r8,0(r18)
1000c044:	1009883a 	mov	r4,r2
1000c048:	180b883a 	mov	r5,r3
1000c04c:	000d883a 	mov	r6,zero
1000c050:	01d00934 	movhi	r7,16420
1000c054:	1011883a 	mov	r8,r2
1000c058:	bdc00044 	addi	r23,r23,1
1000c05c:	95bfd81e 	bne	r18,r22,1000bfc0 <__alt_data_end+0xf800bfc0>
1000c060:	802d883a 	mov	r22,r16
1000c064:	dc000317 	ldw	r16,12(sp)
1000c068:	4009883a 	mov	r4,r8
1000c06c:	180b883a 	mov	r5,r3
1000c070:	400d883a 	mov	r6,r8
1000c074:	180f883a 	mov	r7,r3
1000c078:	00130f40 	call	100130f4 <__adddf3>
1000c07c:	8809883a 	mov	r4,r17
1000c080:	a00b883a 	mov	r5,r20
1000c084:	100d883a 	mov	r6,r2
1000c088:	180f883a 	mov	r7,r3
1000c08c:	1027883a 	mov	r19,r2
1000c090:	1825883a 	mov	r18,r3
1000c094:	00144740 	call	10014474 <__ledf2>
1000c098:	10000816 	blt	r2,zero,1000c0bc <_dtoa_r+0x96c>
1000c09c:	8809883a 	mov	r4,r17
1000c0a0:	a00b883a 	mov	r5,r20
1000c0a4:	980d883a 	mov	r6,r19
1000c0a8:	900f883a 	mov	r7,r18
1000c0ac:	00143100 	call	10014310 <__eqdf2>
1000c0b0:	103f551e 	bne	r2,zero,1000be08 <__alt_data_end+0xf800be08>
1000c0b4:	b580004c 	andi	r22,r22,1
1000c0b8:	b03f5326 	beq	r22,zero,1000be08 <__alt_data_end+0xf800be08>
1000c0bc:	bd7fffc3 	ldbu	r21,-1(r23)
1000c0c0:	b8bfffc4 	addi	r2,r23,-1
1000c0c4:	1007883a 	mov	r3,r2
1000c0c8:	01400e44 	movi	r5,57
1000c0cc:	d9800717 	ldw	r6,28(sp)
1000c0d0:	00000506 	br	1000c0e8 <_dtoa_r+0x998>
1000c0d4:	18ffffc4 	addi	r3,r3,-1
1000c0d8:	30825e26 	beq	r6,r2,1000ca54 <_dtoa_r+0x1304>
1000c0dc:	1d400003 	ldbu	r21,0(r3)
1000c0e0:	102f883a 	mov	r23,r2
1000c0e4:	10bfffc4 	addi	r2,r2,-1
1000c0e8:	a9003fcc 	andi	r4,r21,255
1000c0ec:	2100201c 	xori	r4,r4,128
1000c0f0:	213fe004 	addi	r4,r4,-128
1000c0f4:	217ff726 	beq	r4,r5,1000c0d4 <__alt_data_end+0xf800c0d4>
1000c0f8:	aa000044 	addi	r8,r21,1
1000c0fc:	12000005 	stb	r8,0(r2)
1000c100:	003f4106 	br	1000be08 <__alt_data_end+0xf800be08>
1000c104:	d8c00b17 	ldw	r3,44(sp)
1000c108:	18006726 	beq	r3,zero,1000c2a8 <_dtoa_r+0xb58>
1000c10c:	d9000317 	ldw	r4,12(sp)
1000c110:	00c00044 	movi	r3,1
1000c114:	19016a0e 	bge	r3,r4,1000c6c0 <_dtoa_r+0xf70>
1000c118:	d8800617 	ldw	r2,24(sp)
1000c11c:	d8c00917 	ldw	r3,36(sp)
1000c120:	157fffc4 	addi	r21,r2,-1
1000c124:	1d420716 	blt	r3,r21,1000c944 <_dtoa_r+0x11f4>
1000c128:	1d6bc83a 	sub	r21,r3,r21
1000c12c:	d8800617 	ldw	r2,24(sp)
1000c130:	1002c716 	blt	r2,zero,1000cc50 <_dtoa_r+0x1500>
1000c134:	dd000817 	ldw	r20,32(sp)
1000c138:	d8800617 	ldw	r2,24(sp)
1000c13c:	d9800817 	ldw	r6,32(sp)
1000c140:	8009883a 	mov	r4,r16
1000c144:	01400044 	movi	r5,1
1000c148:	308d883a 	add	r6,r6,r2
1000c14c:	d9800815 	stw	r6,32(sp)
1000c150:	b0ad883a 	add	r22,r22,r2
1000c154:	000f07c0 	call	1000f07c <__i2b>
1000c158:	1023883a 	mov	r17,r2
1000c15c:	a0000826 	beq	r20,zero,1000c180 <_dtoa_r+0xa30>
1000c160:	0580070e 	bge	zero,r22,1000c180 <_dtoa_r+0xa30>
1000c164:	b005883a 	mov	r2,r22
1000c168:	a5812016 	blt	r20,r22,1000c5ec <_dtoa_r+0xe9c>
1000c16c:	d8c00817 	ldw	r3,32(sp)
1000c170:	a0a9c83a 	sub	r20,r20,r2
1000c174:	b0adc83a 	sub	r22,r22,r2
1000c178:	1887c83a 	sub	r3,r3,r2
1000c17c:	d8c00815 	stw	r3,32(sp)
1000c180:	d9000917 	ldw	r4,36(sp)
1000c184:	0100140e 	bge	zero,r4,1000c1d8 <_dtoa_r+0xa88>
1000c188:	d9800b17 	ldw	r6,44(sp)
1000c18c:	3001e526 	beq	r6,zero,1000c924 <_dtoa_r+0x11d4>
1000c190:	05400e0e 	bge	zero,r21,1000c1cc <_dtoa_r+0xa7c>
1000c194:	880b883a 	mov	r5,r17
1000c198:	8009883a 	mov	r4,r16
1000c19c:	a80d883a 	mov	r6,r21
1000c1a0:	000f3480 	call	1000f348 <__pow5mult>
1000c1a4:	e00d883a 	mov	r6,fp
1000c1a8:	8009883a 	mov	r4,r16
1000c1ac:	100b883a 	mov	r5,r2
1000c1b0:	1023883a 	mov	r17,r2
1000c1b4:	000f0b80 	call	1000f0b8 <__multiply>
1000c1b8:	102f883a 	mov	r23,r2
1000c1bc:	e00b883a 	mov	r5,fp
1000c1c0:	8009883a 	mov	r4,r16
1000c1c4:	000ecfc0 	call	1000ecfc <_Bfree>
1000c1c8:	b839883a 	mov	fp,r23
1000c1cc:	d8800917 	ldw	r2,36(sp)
1000c1d0:	154dc83a 	sub	r6,r2,r21
1000c1d4:	3001281e 	bne	r6,zero,1000c678 <_dtoa_r+0xf28>
1000c1d8:	05c00044 	movi	r23,1
1000c1dc:	8009883a 	mov	r4,r16
1000c1e0:	b80b883a 	mov	r5,r23
1000c1e4:	000f07c0 	call	1000f07c <__i2b>
1000c1e8:	d8c00a17 	ldw	r3,40(sp)
1000c1ec:	102b883a 	mov	r21,r2
1000c1f0:	00c0310e 	bge	zero,r3,1000c2b8 <_dtoa_r+0xb68>
1000c1f4:	8009883a 	mov	r4,r16
1000c1f8:	100b883a 	mov	r5,r2
1000c1fc:	180d883a 	mov	r6,r3
1000c200:	000f3480 	call	1000f348 <__pow5mult>
1000c204:	d9000317 	ldw	r4,12(sp)
1000c208:	102b883a 	mov	r21,r2
1000c20c:	b9011f0e 	bge	r23,r4,1000c68c <_dtoa_r+0xf3c>
1000c210:	0027883a 	mov	r19,zero
1000c214:	a8800417 	ldw	r2,16(r21)
1000c218:	10800104 	addi	r2,r2,4
1000c21c:	1085883a 	add	r2,r2,r2
1000c220:	1085883a 	add	r2,r2,r2
1000c224:	a885883a 	add	r2,r21,r2
1000c228:	11000017 	ldw	r4,0(r2)
1000c22c:	000ef640 	call	1000ef64 <__hi0bits>
1000c230:	00c00804 	movi	r3,32
1000c234:	1885c83a 	sub	r2,r3,r2
1000c238:	00002506 	br	1000c2d0 <_dtoa_r+0xb80>
1000c23c:	01800044 	movi	r6,1
1000c240:	d9800c15 	stw	r6,48(sp)
1000c244:	003dec06 	br	1000b9f8 <__alt_data_end+0xf800b9f8>
1000c248:	d8c00817 	ldw	r3,32(sp)
1000c24c:	d9000517 	ldw	r4,20(sp)
1000c250:	d8000a15 	stw	zero,40(sp)
1000c254:	1907c83a 	sub	r3,r3,r4
1000c258:	010dc83a 	sub	r6,zero,r4
1000c25c:	d8c00815 	stw	r3,32(sp)
1000c260:	d9800915 	stw	r6,36(sp)
1000c264:	003ded06 	br	1000ba1c <__alt_data_end+0xf800ba1c>
1000c268:	05adc83a 	sub	r22,zero,r22
1000c26c:	dd800815 	stw	r22,32(sp)
1000c270:	002d883a 	mov	r22,zero
1000c274:	003de406 	br	1000ba08 <__alt_data_end+0xf800ba08>
1000c278:	d9000517 	ldw	r4,20(sp)
1000c27c:	00145dc0 	call	100145dc <__floatsidf>
1000c280:	1009883a 	mov	r4,r2
1000c284:	180b883a 	mov	r5,r3
1000c288:	b00d883a 	mov	r6,r22
1000c28c:	a80f883a 	mov	r7,r21
1000c290:	00143100 	call	10014310 <__eqdf2>
1000c294:	103dc726 	beq	r2,zero,1000b9b4 <__alt_data_end+0xf800b9b4>
1000c298:	d8800517 	ldw	r2,20(sp)
1000c29c:	10bfffc4 	addi	r2,r2,-1
1000c2a0:	d8800515 	stw	r2,20(sp)
1000c2a4:	003dc306 	br	1000b9b4 <__alt_data_end+0xf800b9b4>
1000c2a8:	dd400917 	ldw	r21,36(sp)
1000c2ac:	dd000817 	ldw	r20,32(sp)
1000c2b0:	0023883a 	mov	r17,zero
1000c2b4:	003fa906 	br	1000c15c <__alt_data_end+0xf800c15c>
1000c2b8:	d9800317 	ldw	r6,12(sp)
1000c2bc:	b981670e 	bge	r23,r6,1000c85c <_dtoa_r+0x110c>
1000c2c0:	0027883a 	mov	r19,zero
1000c2c4:	d8c00a17 	ldw	r3,40(sp)
1000c2c8:	183fd21e 	bne	r3,zero,1000c214 <__alt_data_end+0xf800c214>
1000c2cc:	00800044 	movi	r2,1
1000c2d0:	1585883a 	add	r2,r2,r22
1000c2d4:	108007cc 	andi	r2,r2,31
1000c2d8:	10005f26 	beq	r2,zero,1000c458 <_dtoa_r+0xd08>
1000c2dc:	00c00804 	movi	r3,32
1000c2e0:	1887c83a 	sub	r3,r3,r2
1000c2e4:	01000104 	movi	r4,4
1000c2e8:	20c2dd0e 	bge	r4,r3,1000ce60 <_dtoa_r+0x1710>
1000c2ec:	d9000817 	ldw	r4,32(sp)
1000c2f0:	00c00704 	movi	r3,28
1000c2f4:	1885c83a 	sub	r2,r3,r2
1000c2f8:	2089883a 	add	r4,r4,r2
1000c2fc:	d9000815 	stw	r4,32(sp)
1000c300:	a0a9883a 	add	r20,r20,r2
1000c304:	b0ad883a 	add	r22,r22,r2
1000c308:	d8800817 	ldw	r2,32(sp)
1000c30c:	0080050e 	bge	zero,r2,1000c324 <_dtoa_r+0xbd4>
1000c310:	e00b883a 	mov	r5,fp
1000c314:	8009883a 	mov	r4,r16
1000c318:	100d883a 	mov	r6,r2
1000c31c:	000f4880 	call	1000f488 <__lshift>
1000c320:	1039883a 	mov	fp,r2
1000c324:	0580050e 	bge	zero,r22,1000c33c <_dtoa_r+0xbec>
1000c328:	a80b883a 	mov	r5,r21
1000c32c:	8009883a 	mov	r4,r16
1000c330:	b00d883a 	mov	r6,r22
1000c334:	000f4880 	call	1000f488 <__lshift>
1000c338:	102b883a 	mov	r21,r2
1000c33c:	d8c00c17 	ldw	r3,48(sp)
1000c340:	1801161e 	bne	r3,zero,1000c79c <_dtoa_r+0x104c>
1000c344:	d8c00617 	ldw	r3,24(sp)
1000c348:	00c12d0e 	bge	zero,r3,1000c800 <_dtoa_r+0x10b0>
1000c34c:	d8c00b17 	ldw	r3,44(sp)
1000c350:	1800571e 	bne	r3,zero,1000c4b0 <_dtoa_r+0xd60>
1000c354:	dc800717 	ldw	r18,28(sp)
1000c358:	dcc00617 	ldw	r19,24(sp)
1000c35c:	9029883a 	mov	r20,r18
1000c360:	00000206 	br	1000c36c <_dtoa_r+0xc1c>
1000c364:	000ed240 	call	1000ed24 <__multadd>
1000c368:	1039883a 	mov	fp,r2
1000c36c:	e009883a 	mov	r4,fp
1000c370:	a80b883a 	mov	r5,r21
1000c374:	000b5280 	call	1000b528 <quorem>
1000c378:	10800c04 	addi	r2,r2,48
1000c37c:	90800005 	stb	r2,0(r18)
1000c380:	94800044 	addi	r18,r18,1
1000c384:	9507c83a 	sub	r3,r18,r20
1000c388:	8009883a 	mov	r4,r16
1000c38c:	e00b883a 	mov	r5,fp
1000c390:	01800284 	movi	r6,10
1000c394:	000f883a 	mov	r7,zero
1000c398:	1cfff216 	blt	r3,r19,1000c364 <__alt_data_end+0xf800c364>
1000c39c:	1011883a 	mov	r8,r2
1000c3a0:	d8800617 	ldw	r2,24(sp)
1000c3a4:	00822e0e 	bge	zero,r2,1000cc60 <_dtoa_r+0x1510>
1000c3a8:	d9000717 	ldw	r4,28(sp)
1000c3ac:	0025883a 	mov	r18,zero
1000c3b0:	20af883a 	add	r23,r4,r2
1000c3b4:	e00b883a 	mov	r5,fp
1000c3b8:	01800044 	movi	r6,1
1000c3bc:	8009883a 	mov	r4,r16
1000c3c0:	da001715 	stw	r8,92(sp)
1000c3c4:	000f4880 	call	1000f488 <__lshift>
1000c3c8:	1009883a 	mov	r4,r2
1000c3cc:	a80b883a 	mov	r5,r21
1000c3d0:	1039883a 	mov	fp,r2
1000c3d4:	000f5d00 	call	1000f5d0 <__mcmp>
1000c3d8:	da001717 	ldw	r8,92(sp)
1000c3dc:	00816e0e 	bge	zero,r2,1000c998 <_dtoa_r+0x1248>
1000c3e0:	b93fffc3 	ldbu	r4,-1(r23)
1000c3e4:	b8bfffc4 	addi	r2,r23,-1
1000c3e8:	1007883a 	mov	r3,r2
1000c3ec:	01800e44 	movi	r6,57
1000c3f0:	d9c00717 	ldw	r7,28(sp)
1000c3f4:	00000506 	br	1000c40c <_dtoa_r+0xcbc>
1000c3f8:	18ffffc4 	addi	r3,r3,-1
1000c3fc:	38811926 	beq	r7,r2,1000c864 <_dtoa_r+0x1114>
1000c400:	19000003 	ldbu	r4,0(r3)
1000c404:	102f883a 	mov	r23,r2
1000c408:	10bfffc4 	addi	r2,r2,-1
1000c40c:	21403fcc 	andi	r5,r4,255
1000c410:	2940201c 	xori	r5,r5,128
1000c414:	297fe004 	addi	r5,r5,-128
1000c418:	29bff726 	beq	r5,r6,1000c3f8 <__alt_data_end+0xf800c3f8>
1000c41c:	21000044 	addi	r4,r4,1
1000c420:	11000005 	stb	r4,0(r2)
1000c424:	8009883a 	mov	r4,r16
1000c428:	a80b883a 	mov	r5,r21
1000c42c:	000ecfc0 	call	1000ecfc <_Bfree>
1000c430:	883e7526 	beq	r17,zero,1000be08 <__alt_data_end+0xf800be08>
1000c434:	90000426 	beq	r18,zero,1000c448 <_dtoa_r+0xcf8>
1000c438:	94400326 	beq	r18,r17,1000c448 <_dtoa_r+0xcf8>
1000c43c:	8009883a 	mov	r4,r16
1000c440:	900b883a 	mov	r5,r18
1000c444:	000ecfc0 	call	1000ecfc <_Bfree>
1000c448:	8009883a 	mov	r4,r16
1000c44c:	880b883a 	mov	r5,r17
1000c450:	000ecfc0 	call	1000ecfc <_Bfree>
1000c454:	003e6c06 	br	1000be08 <__alt_data_end+0xf800be08>
1000c458:	00800704 	movi	r2,28
1000c45c:	d9800817 	ldw	r6,32(sp)
1000c460:	a0a9883a 	add	r20,r20,r2
1000c464:	b0ad883a 	add	r22,r22,r2
1000c468:	308d883a 	add	r6,r6,r2
1000c46c:	d9800815 	stw	r6,32(sp)
1000c470:	003fa506 	br	1000c308 <__alt_data_end+0xf800c308>
1000c474:	013efb84 	movi	r4,-1042
1000c478:	246bc83a 	sub	r21,r4,r17
1000c47c:	9548983a 	sll	r4,r18,r21
1000c480:	003d1806 	br	1000b8e4 <__alt_data_end+0xf800b8e4>
1000c484:	d8000c15 	stw	zero,48(sp)
1000c488:	003d5b06 	br	1000b9f8 <__alt_data_end+0xf800b9f8>
1000c48c:	880b883a 	mov	r5,r17
1000c490:	8009883a 	mov	r4,r16
1000c494:	01800284 	movi	r6,10
1000c498:	000f883a 	mov	r7,zero
1000c49c:	000ed240 	call	1000ed24 <__multadd>
1000c4a0:	1023883a 	mov	r17,r2
1000c4a4:	d8800d17 	ldw	r2,52(sp)
1000c4a8:	0082550e 	bge	zero,r2,1000ce00 <_dtoa_r+0x16b0>
1000c4ac:	d8800615 	stw	r2,24(sp)
1000c4b0:	0500050e 	bge	zero,r20,1000c4c8 <_dtoa_r+0xd78>
1000c4b4:	880b883a 	mov	r5,r17
1000c4b8:	8009883a 	mov	r4,r16
1000c4bc:	a00d883a 	mov	r6,r20
1000c4c0:	000f4880 	call	1000f488 <__lshift>
1000c4c4:	1023883a 	mov	r17,r2
1000c4c8:	98016a1e 	bne	r19,zero,1000ca74 <_dtoa_r+0x1324>
1000c4cc:	8829883a 	mov	r20,r17
1000c4d0:	d9000617 	ldw	r4,24(sp)
1000c4d4:	dcc00717 	ldw	r19,28(sp)
1000c4d8:	9480004c 	andi	r18,r18,1
1000c4dc:	20bfffc4 	addi	r2,r4,-1
1000c4e0:	9885883a 	add	r2,r19,r2
1000c4e4:	d8800415 	stw	r2,16(sp)
1000c4e8:	dc800615 	stw	r18,24(sp)
1000c4ec:	e009883a 	mov	r4,fp
1000c4f0:	a80b883a 	mov	r5,r21
1000c4f4:	000b5280 	call	1000b528 <quorem>
1000c4f8:	e009883a 	mov	r4,fp
1000c4fc:	880b883a 	mov	r5,r17
1000c500:	102f883a 	mov	r23,r2
1000c504:	000f5d00 	call	1000f5d0 <__mcmp>
1000c508:	8009883a 	mov	r4,r16
1000c50c:	a80b883a 	mov	r5,r21
1000c510:	a00d883a 	mov	r6,r20
1000c514:	102d883a 	mov	r22,r2
1000c518:	000f6300 	call	1000f630 <__mdiff>
1000c51c:	1007883a 	mov	r3,r2
1000c520:	10800317 	ldw	r2,12(r2)
1000c524:	bc800c04 	addi	r18,r23,48
1000c528:	1000971e 	bne	r2,zero,1000c788 <_dtoa_r+0x1038>
1000c52c:	180b883a 	mov	r5,r3
1000c530:	e009883a 	mov	r4,fp
1000c534:	d8c01515 	stw	r3,84(sp)
1000c538:	000f5d00 	call	1000f5d0 <__mcmp>
1000c53c:	d8c01517 	ldw	r3,84(sp)
1000c540:	8009883a 	mov	r4,r16
1000c544:	d8801515 	stw	r2,84(sp)
1000c548:	180b883a 	mov	r5,r3
1000c54c:	000ecfc0 	call	1000ecfc <_Bfree>
1000c550:	d8801517 	ldw	r2,84(sp)
1000c554:	1000041e 	bne	r2,zero,1000c568 <_dtoa_r+0xe18>
1000c558:	d9800317 	ldw	r6,12(sp)
1000c55c:	3000021e 	bne	r6,zero,1000c568 <_dtoa_r+0xe18>
1000c560:	d8c00617 	ldw	r3,24(sp)
1000c564:	18007626 	beq	r3,zero,1000c740 <_dtoa_r+0xff0>
1000c568:	b0005b16 	blt	r22,zero,1000c6d8 <_dtoa_r+0xf88>
1000c56c:	b000041e 	bne	r22,zero,1000c580 <_dtoa_r+0xe30>
1000c570:	d9000317 	ldw	r4,12(sp)
1000c574:	2000021e 	bne	r4,zero,1000c580 <_dtoa_r+0xe30>
1000c578:	d8c00617 	ldw	r3,24(sp)
1000c57c:	18005626 	beq	r3,zero,1000c6d8 <_dtoa_r+0xf88>
1000c580:	00814d16 	blt	zero,r2,1000cab8 <_dtoa_r+0x1368>
1000c584:	d8c00417 	ldw	r3,16(sp)
1000c588:	9d800044 	addi	r22,r19,1
1000c58c:	9c800005 	stb	r18,0(r19)
1000c590:	b02f883a 	mov	r23,r22
1000c594:	98c14c26 	beq	r19,r3,1000cac8 <_dtoa_r+0x1378>
1000c598:	e00b883a 	mov	r5,fp
1000c59c:	8009883a 	mov	r4,r16
1000c5a0:	01800284 	movi	r6,10
1000c5a4:	000f883a 	mov	r7,zero
1000c5a8:	000ed240 	call	1000ed24 <__multadd>
1000c5ac:	1039883a 	mov	fp,r2
1000c5b0:	8d006d26 	beq	r17,r20,1000c768 <_dtoa_r+0x1018>
1000c5b4:	880b883a 	mov	r5,r17
1000c5b8:	01800284 	movi	r6,10
1000c5bc:	000f883a 	mov	r7,zero
1000c5c0:	8009883a 	mov	r4,r16
1000c5c4:	000ed240 	call	1000ed24 <__multadd>
1000c5c8:	a00b883a 	mov	r5,r20
1000c5cc:	8009883a 	mov	r4,r16
1000c5d0:	01800284 	movi	r6,10
1000c5d4:	000f883a 	mov	r7,zero
1000c5d8:	1023883a 	mov	r17,r2
1000c5dc:	000ed240 	call	1000ed24 <__multadd>
1000c5e0:	1029883a 	mov	r20,r2
1000c5e4:	b027883a 	mov	r19,r22
1000c5e8:	003fc006 	br	1000c4ec <__alt_data_end+0xf800c4ec>
1000c5ec:	a005883a 	mov	r2,r20
1000c5f0:	003ede06 	br	1000c16c <__alt_data_end+0xf800c16c>
1000c5f4:	01000044 	movi	r4,1
1000c5f8:	d9000b15 	stw	r4,44(sp)
1000c5fc:	d9802217 	ldw	r6,136(sp)
1000c600:	0180dc0e 	bge	zero,r6,1000c974 <_dtoa_r+0x1224>
1000c604:	3023883a 	mov	r17,r6
1000c608:	d9800d15 	stw	r6,52(sp)
1000c60c:	d9800615 	stw	r6,24(sp)
1000c610:	003d1e06 	br	1000ba8c <__alt_data_end+0xf800ba8c>
1000c614:	d8800617 	ldw	r2,24(sp)
1000c618:	00be3716 	blt	zero,r2,1000bef8 <__alt_data_end+0xf800bef8>
1000c61c:	1000be1e 	bne	r2,zero,1000c918 <_dtoa_r+0x11c8>
1000c620:	8809883a 	mov	r4,r17
1000c624:	a00b883a 	mov	r5,r20
1000c628:	000d883a 	mov	r6,zero
1000c62c:	01d00534 	movhi	r7,16404
1000c630:	0007b100 	call	10007b10 <__muldf3>
1000c634:	1009883a 	mov	r4,r2
1000c638:	180b883a 	mov	r5,r3
1000c63c:	900d883a 	mov	r6,r18
1000c640:	980f883a 	mov	r7,r19
1000c644:	00143940 	call	10014394 <__gedf2>
1000c648:	002b883a 	mov	r21,zero
1000c64c:	0023883a 	mov	r17,zero
1000c650:	10007a16 	blt	r2,zero,1000c83c <_dtoa_r+0x10ec>
1000c654:	d9002217 	ldw	r4,136(sp)
1000c658:	ddc00717 	ldw	r23,28(sp)
1000c65c:	0108303a 	nor	r4,zero,r4
1000c660:	d9000515 	stw	r4,20(sp)
1000c664:	8009883a 	mov	r4,r16
1000c668:	a80b883a 	mov	r5,r21
1000c66c:	000ecfc0 	call	1000ecfc <_Bfree>
1000c670:	883f751e 	bne	r17,zero,1000c448 <__alt_data_end+0xf800c448>
1000c674:	003de406 	br	1000be08 <__alt_data_end+0xf800be08>
1000c678:	e00b883a 	mov	r5,fp
1000c67c:	8009883a 	mov	r4,r16
1000c680:	000f3480 	call	1000f348 <__pow5mult>
1000c684:	1039883a 	mov	fp,r2
1000c688:	003ed306 	br	1000c1d8 <__alt_data_end+0xf800c1d8>
1000c68c:	903ee01e 	bne	r18,zero,1000c210 <__alt_data_end+0xf800c210>
1000c690:	00800434 	movhi	r2,16
1000c694:	10bfffc4 	addi	r2,r2,-1
1000c698:	9884703a 	and	r2,r19,r2
1000c69c:	103f081e 	bne	r2,zero,1000c2c0 <__alt_data_end+0xf800c2c0>
1000c6a0:	9cdffc2c 	andhi	r19,r19,32752
1000c6a4:	983f0626 	beq	r19,zero,1000c2c0 <__alt_data_end+0xf800c2c0>
1000c6a8:	d8800817 	ldw	r2,32(sp)
1000c6ac:	b5800044 	addi	r22,r22,1
1000c6b0:	04c00044 	movi	r19,1
1000c6b4:	10800044 	addi	r2,r2,1
1000c6b8:	d8800815 	stw	r2,32(sp)
1000c6bc:	003f0106 	br	1000c2c4 <__alt_data_end+0xf800c2c4>
1000c6c0:	d9800f17 	ldw	r6,60(sp)
1000c6c4:	30016826 	beq	r6,zero,1000cc68 <_dtoa_r+0x1518>
1000c6c8:	10810cc4 	addi	r2,r2,1075
1000c6cc:	dd400917 	ldw	r21,36(sp)
1000c6d0:	dd000817 	ldw	r20,32(sp)
1000c6d4:	003e9906 	br	1000c13c <__alt_data_end+0xf800c13c>
1000c6d8:	9011883a 	mov	r8,r18
1000c6dc:	4007883a 	mov	r3,r8
1000c6e0:	e02d883a 	mov	r22,fp
1000c6e4:	0080100e 	bge	zero,r2,1000c728 <_dtoa_r+0xfd8>
1000c6e8:	01800044 	movi	r6,1
1000c6ec:	8009883a 	mov	r4,r16
1000c6f0:	e00b883a 	mov	r5,fp
1000c6f4:	da001515 	stw	r8,84(sp)
1000c6f8:	da001715 	stw	r8,92(sp)
1000c6fc:	000f4880 	call	1000f488 <__lshift>
1000c700:	1009883a 	mov	r4,r2
1000c704:	a80b883a 	mov	r5,r21
1000c708:	102d883a 	mov	r22,r2
1000c70c:	000f5d00 	call	1000f5d0 <__mcmp>
1000c710:	d8c01517 	ldw	r3,84(sp)
1000c714:	da001717 	ldw	r8,92(sp)
1000c718:	0081a50e 	bge	zero,r2,1000cdb0 <_dtoa_r+0x1660>
1000c71c:	00800e44 	movi	r2,57
1000c720:	40817b26 	beq	r8,r2,1000cd10 <_dtoa_r+0x15c0>
1000c724:	40c00044 	addi	r3,r8,1
1000c728:	8825883a 	mov	r18,r17
1000c72c:	9dc00044 	addi	r23,r19,1
1000c730:	98c00005 	stb	r3,0(r19)
1000c734:	a023883a 	mov	r17,r20
1000c738:	b039883a 	mov	fp,r22
1000c73c:	003f3906 	br	1000c424 <__alt_data_end+0xf800c424>
1000c740:	00800e44 	movi	r2,57
1000c744:	9011883a 	mov	r8,r18
1000c748:	90817226 	beq	r18,r2,1000cd14 <_dtoa_r+0x15c4>
1000c74c:	0580010e 	bge	zero,r22,1000c754 <_dtoa_r+0x1004>
1000c750:	ba000c44 	addi	r8,r23,49
1000c754:	8825883a 	mov	r18,r17
1000c758:	9dc00044 	addi	r23,r19,1
1000c75c:	9a000005 	stb	r8,0(r19)
1000c760:	a023883a 	mov	r17,r20
1000c764:	003f2f06 	br	1000c424 <__alt_data_end+0xf800c424>
1000c768:	880b883a 	mov	r5,r17
1000c76c:	8009883a 	mov	r4,r16
1000c770:	01800284 	movi	r6,10
1000c774:	000f883a 	mov	r7,zero
1000c778:	000ed240 	call	1000ed24 <__multadd>
1000c77c:	1023883a 	mov	r17,r2
1000c780:	1029883a 	mov	r20,r2
1000c784:	003f9706 	br	1000c5e4 <__alt_data_end+0xf800c5e4>
1000c788:	8009883a 	mov	r4,r16
1000c78c:	180b883a 	mov	r5,r3
1000c790:	000ecfc0 	call	1000ecfc <_Bfree>
1000c794:	00800044 	movi	r2,1
1000c798:	003f7306 	br	1000c568 <__alt_data_end+0xf800c568>
1000c79c:	e009883a 	mov	r4,fp
1000c7a0:	a80b883a 	mov	r5,r21
1000c7a4:	000f5d00 	call	1000f5d0 <__mcmp>
1000c7a8:	103ee60e 	bge	r2,zero,1000c344 <__alt_data_end+0xf800c344>
1000c7ac:	8009883a 	mov	r4,r16
1000c7b0:	e00b883a 	mov	r5,fp
1000c7b4:	01800284 	movi	r6,10
1000c7b8:	000f883a 	mov	r7,zero
1000c7bc:	000ed240 	call	1000ed24 <__multadd>
1000c7c0:	d9000517 	ldw	r4,20(sp)
1000c7c4:	d9800b17 	ldw	r6,44(sp)
1000c7c8:	1039883a 	mov	fp,r2
1000c7cc:	213fffc4 	addi	r4,r4,-1
1000c7d0:	d9000515 	stw	r4,20(sp)
1000c7d4:	303f2d1e 	bne	r6,zero,1000c48c <__alt_data_end+0xf800c48c>
1000c7d8:	d9000d17 	ldw	r4,52(sp)
1000c7dc:	0101780e 	bge	zero,r4,1000cdc0 <_dtoa_r+0x1670>
1000c7e0:	d9000615 	stw	r4,24(sp)
1000c7e4:	003edb06 	br	1000c354 <__alt_data_end+0xf800c354>
1000c7e8:	00800084 	movi	r2,2
1000c7ec:	30818e1e 	bne	r6,r2,1000ce28 <_dtoa_r+0x16d8>
1000c7f0:	d8000b15 	stw	zero,44(sp)
1000c7f4:	003f8106 	br	1000c5fc <__alt_data_end+0xf800c5fc>
1000c7f8:	d8800717 	ldw	r2,28(sp)
1000c7fc:	003c0306 	br	1000b80c <__alt_data_end+0xf800b80c>
1000c800:	d9000317 	ldw	r4,12(sp)
1000c804:	00800084 	movi	r2,2
1000c808:	113ed00e 	bge	r2,r4,1000c34c <__alt_data_end+0xf800c34c>
1000c80c:	d8c00617 	ldw	r3,24(sp)
1000c810:	183f901e 	bne	r3,zero,1000c654 <__alt_data_end+0xf800c654>
1000c814:	a80b883a 	mov	r5,r21
1000c818:	8009883a 	mov	r4,r16
1000c81c:	01800144 	movi	r6,5
1000c820:	000f883a 	mov	r7,zero
1000c824:	000ed240 	call	1000ed24 <__multadd>
1000c828:	e009883a 	mov	r4,fp
1000c82c:	100b883a 	mov	r5,r2
1000c830:	102b883a 	mov	r21,r2
1000c834:	000f5d00 	call	1000f5d0 <__mcmp>
1000c838:	00bf860e 	bge	zero,r2,1000c654 <__alt_data_end+0xf800c654>
1000c83c:	d9800717 	ldw	r6,28(sp)
1000c840:	00800c44 	movi	r2,49
1000c844:	30800005 	stb	r2,0(r6)
1000c848:	d8800517 	ldw	r2,20(sp)
1000c84c:	35c00044 	addi	r23,r6,1
1000c850:	10800044 	addi	r2,r2,1
1000c854:	d8800515 	stw	r2,20(sp)
1000c858:	003f8206 	br	1000c664 <__alt_data_end+0xf800c664>
1000c85c:	903e981e 	bne	r18,zero,1000c2c0 <__alt_data_end+0xf800c2c0>
1000c860:	003f8b06 	br	1000c690 <__alt_data_end+0xf800c690>
1000c864:	d9800517 	ldw	r6,20(sp)
1000c868:	d8c00717 	ldw	r3,28(sp)
1000c86c:	00800c44 	movi	r2,49
1000c870:	31800044 	addi	r6,r6,1
1000c874:	d9800515 	stw	r6,20(sp)
1000c878:	18800005 	stb	r2,0(r3)
1000c87c:	003ee906 	br	1000c424 <__alt_data_end+0xf800c424>
1000c880:	dc000317 	ldw	r16,12(sp)
1000c884:	003d6006 	br	1000be08 <__alt_data_end+0xf800be08>
1000c888:	8809883a 	mov	r4,r17
1000c88c:	00145dc0 	call	100145dc <__floatsidf>
1000c890:	a009883a 	mov	r4,r20
1000c894:	a80b883a 	mov	r5,r21
1000c898:	100d883a 	mov	r6,r2
1000c89c:	180f883a 	mov	r7,r3
1000c8a0:	0007b100 	call	10007b10 <__muldf3>
1000c8a4:	1009883a 	mov	r4,r2
1000c8a8:	180b883a 	mov	r5,r3
1000c8ac:	000d883a 	mov	r6,zero
1000c8b0:	01d00734 	movhi	r7,16412
1000c8b4:	00130f40 	call	100130f4 <__adddf3>
1000c8b8:	1023883a 	mov	r17,r2
1000c8bc:	00bf3034 	movhi	r2,64704
1000c8c0:	1885883a 	add	r2,r3,r2
1000c8c4:	d8800e15 	stw	r2,56(sp)
1000c8c8:	a009883a 	mov	r4,r20
1000c8cc:	a80b883a 	mov	r5,r21
1000c8d0:	000d883a 	mov	r6,zero
1000c8d4:	01d00534 	movhi	r7,16404
1000c8d8:	000837c0 	call	1000837c <__subdf3>
1000c8dc:	d9c00e17 	ldw	r7,56(sp)
1000c8e0:	1009883a 	mov	r4,r2
1000c8e4:	180b883a 	mov	r5,r3
1000c8e8:	880d883a 	mov	r6,r17
1000c8ec:	102b883a 	mov	r21,r2
1000c8f0:	1829883a 	mov	r20,r3
1000c8f4:	00143940 	call	10014394 <__gedf2>
1000c8f8:	00807716 	blt	zero,r2,1000cad8 <_dtoa_r+0x1388>
1000c8fc:	d8800e17 	ldw	r2,56(sp)
1000c900:	a809883a 	mov	r4,r21
1000c904:	a00b883a 	mov	r5,r20
1000c908:	11e0003c 	xorhi	r7,r2,32768
1000c90c:	880d883a 	mov	r6,r17
1000c910:	00144740 	call	10014474 <__ledf2>
1000c914:	103d6b0e 	bge	r2,zero,1000bec4 <__alt_data_end+0xf800bec4>
1000c918:	002b883a 	mov	r21,zero
1000c91c:	0023883a 	mov	r17,zero
1000c920:	003f4c06 	br	1000c654 <__alt_data_end+0xf800c654>
1000c924:	d9800917 	ldw	r6,36(sp)
1000c928:	e00b883a 	mov	r5,fp
1000c92c:	8009883a 	mov	r4,r16
1000c930:	000f3480 	call	1000f348 <__pow5mult>
1000c934:	1039883a 	mov	fp,r2
1000c938:	003e2706 	br	1000c1d8 <__alt_data_end+0xf800c1d8>
1000c93c:	d8000b15 	stw	zero,44(sp)
1000c940:	003c4906 	br	1000ba68 <__alt_data_end+0xf800ba68>
1000c944:	d9000917 	ldw	r4,36(sp)
1000c948:	d9800a17 	ldw	r6,40(sp)
1000c94c:	dd400915 	stw	r21,36(sp)
1000c950:	a905c83a 	sub	r2,r21,r4
1000c954:	308d883a 	add	r6,r6,r2
1000c958:	d9800a15 	stw	r6,40(sp)
1000c95c:	002b883a 	mov	r21,zero
1000c960:	003df206 	br	1000c12c <__alt_data_end+0xf800c12c>
1000c964:	dc800e15 	stw	r18,56(sp)
1000c968:	982b883a 	mov	r21,r19
1000c96c:	04400084 	movi	r17,2
1000c970:	003c7406 	br	1000bb44 <__alt_data_end+0xf800bb44>
1000c974:	04400044 	movi	r17,1
1000c978:	dc400d15 	stw	r17,52(sp)
1000c97c:	dc400615 	stw	r17,24(sp)
1000c980:	dc402215 	stw	r17,136(sp)
1000c984:	80001115 	stw	zero,68(r16)
1000c988:	000b883a 	mov	r5,zero
1000c98c:	003c4a06 	br	1000bab8 <__alt_data_end+0xf800bab8>
1000c990:	3023883a 	mov	r17,r6
1000c994:	003ffb06 	br	1000c984 <__alt_data_end+0xf800c984>
1000c998:	1000021e 	bne	r2,zero,1000c9a4 <_dtoa_r+0x1254>
1000c99c:	4200004c 	andi	r8,r8,1
1000c9a0:	403e8f1e 	bne	r8,zero,1000c3e0 <__alt_data_end+0xf800c3e0>
1000c9a4:	01000c04 	movi	r4,48
1000c9a8:	00000106 	br	1000c9b0 <_dtoa_r+0x1260>
1000c9ac:	102f883a 	mov	r23,r2
1000c9b0:	b8bfffc4 	addi	r2,r23,-1
1000c9b4:	10c00007 	ldb	r3,0(r2)
1000c9b8:	193ffc26 	beq	r3,r4,1000c9ac <__alt_data_end+0xf800c9ac>
1000c9bc:	003e9906 	br	1000c424 <__alt_data_end+0xf800c424>
1000c9c0:	d9000517 	ldw	r4,20(sp)
1000c9c4:	012fc83a 	sub	r23,zero,r4
1000c9c8:	b800ad26 	beq	r23,zero,1000cc80 <_dtoa_r+0x1530>
1000c9cc:	b88003cc 	andi	r2,r23,15
1000c9d0:	100490fa 	slli	r2,r2,3
1000c9d4:	00c400b4 	movhi	r3,4098
1000c9d8:	18e4d804 	addi	r3,r3,-27808
1000c9dc:	1885883a 	add	r2,r3,r2
1000c9e0:	11800017 	ldw	r6,0(r2)
1000c9e4:	11c00117 	ldw	r7,4(r2)
1000c9e8:	b82fd13a 	srai	r23,r23,4
1000c9ec:	9009883a 	mov	r4,r18
1000c9f0:	980b883a 	mov	r5,r19
1000c9f4:	0007b100 	call	10007b10 <__muldf3>
1000c9f8:	1029883a 	mov	r20,r2
1000c9fc:	182b883a 	mov	r21,r3
1000ca00:	b800f426 	beq	r23,zero,1000cdd4 <_dtoa_r+0x1684>
1000ca04:	020400b4 	movhi	r8,4098
1000ca08:	4224ce04 	addi	r8,r8,-27848
1000ca0c:	8029883a 	mov	r20,r16
1000ca10:	04400084 	movi	r17,2
1000ca14:	4021883a 	mov	r16,r8
1000ca18:	b980004c 	andi	r6,r23,1
1000ca1c:	1009883a 	mov	r4,r2
1000ca20:	b82fd07a 	srai	r23,r23,1
1000ca24:	180b883a 	mov	r5,r3
1000ca28:	30000426 	beq	r6,zero,1000ca3c <_dtoa_r+0x12ec>
1000ca2c:	81800017 	ldw	r6,0(r16)
1000ca30:	81c00117 	ldw	r7,4(r16)
1000ca34:	8c400044 	addi	r17,r17,1
1000ca38:	0007b100 	call	10007b10 <__muldf3>
1000ca3c:	84000204 	addi	r16,r16,8
1000ca40:	b83ff51e 	bne	r23,zero,1000ca18 <__alt_data_end+0xf800ca18>
1000ca44:	a021883a 	mov	r16,r20
1000ca48:	182b883a 	mov	r21,r3
1000ca4c:	1029883a 	mov	r20,r2
1000ca50:	003c5506 	br	1000bba8 <__alt_data_end+0xf800bba8>
1000ca54:	d9800517 	ldw	r6,20(sp)
1000ca58:	d9000717 	ldw	r4,28(sp)
1000ca5c:	00c00c04 	movi	r3,48
1000ca60:	31800044 	addi	r6,r6,1
1000ca64:	d9800515 	stw	r6,20(sp)
1000ca68:	20c00005 	stb	r3,0(r4)
1000ca6c:	02000c44 	movi	r8,49
1000ca70:	003da206 	br	1000c0fc <__alt_data_end+0xf800c0fc>
1000ca74:	89400117 	ldw	r5,4(r17)
1000ca78:	8009883a 	mov	r4,r16
1000ca7c:	000ec540 	call	1000ec54 <_Balloc>
1000ca80:	89800417 	ldw	r6,16(r17)
1000ca84:	11000304 	addi	r4,r2,12
1000ca88:	89400304 	addi	r5,r17,12
1000ca8c:	31800084 	addi	r6,r6,2
1000ca90:	318d883a 	add	r6,r6,r6
1000ca94:	318d883a 	add	r6,r6,r6
1000ca98:	1027883a 	mov	r19,r2
1000ca9c:	0008f580 	call	10008f58 <memcpy>
1000caa0:	8009883a 	mov	r4,r16
1000caa4:	980b883a 	mov	r5,r19
1000caa8:	01800044 	movi	r6,1
1000caac:	000f4880 	call	1000f488 <__lshift>
1000cab0:	1029883a 	mov	r20,r2
1000cab4:	003e8606 	br	1000c4d0 <__alt_data_end+0xf800c4d0>
1000cab8:	00800e44 	movi	r2,57
1000cabc:	90809526 	beq	r18,r2,1000cd14 <_dtoa_r+0x15c4>
1000cac0:	92000044 	addi	r8,r18,1
1000cac4:	003f2306 	br	1000c754 <__alt_data_end+0xf800c754>
1000cac8:	9011883a 	mov	r8,r18
1000cacc:	8825883a 	mov	r18,r17
1000cad0:	a023883a 	mov	r17,r20
1000cad4:	003e3706 	br	1000c3b4 <__alt_data_end+0xf800c3b4>
1000cad8:	002b883a 	mov	r21,zero
1000cadc:	0023883a 	mov	r17,zero
1000cae0:	003f5606 	br	1000c83c <__alt_data_end+0xf800c83c>
1000cae4:	51bfffc4 	addi	r6,r10,-1
1000cae8:	300490fa 	slli	r2,r6,3
1000caec:	00c400b4 	movhi	r3,4098
1000caf0:	18e4d804 	addi	r3,r3,-27808
1000caf4:	1885883a 	add	r2,r3,r2
1000caf8:	d9c00e17 	ldw	r7,56(sp)
1000cafc:	11000017 	ldw	r4,0(r2)
1000cb00:	11400117 	ldw	r5,4(r2)
1000cb04:	d8800717 	ldw	r2,28(sp)
1000cb08:	d9801015 	stw	r6,64(sp)
1000cb0c:	880d883a 	mov	r6,r17
1000cb10:	da801615 	stw	r10,88(sp)
1000cb14:	15c00044 	addi	r23,r2,1
1000cb18:	0007b100 	call	10007b10 <__muldf3>
1000cb1c:	a80b883a 	mov	r5,r21
1000cb20:	a009883a 	mov	r4,r20
1000cb24:	d8c01115 	stw	r3,68(sp)
1000cb28:	d8800e15 	stw	r2,56(sp)
1000cb2c:	00145540 	call	10014554 <__fixdfsi>
1000cb30:	1009883a 	mov	r4,r2
1000cb34:	1023883a 	mov	r17,r2
1000cb38:	00145dc0 	call	100145dc <__floatsidf>
1000cb3c:	a009883a 	mov	r4,r20
1000cb40:	a80b883a 	mov	r5,r21
1000cb44:	100d883a 	mov	r6,r2
1000cb48:	180f883a 	mov	r7,r3
1000cb4c:	000837c0 	call	1000837c <__subdf3>
1000cb50:	1813883a 	mov	r9,r3
1000cb54:	d8c00717 	ldw	r3,28(sp)
1000cb58:	8c400c04 	addi	r17,r17,48
1000cb5c:	1011883a 	mov	r8,r2
1000cb60:	1c400005 	stb	r17,0(r3)
1000cb64:	da801617 	ldw	r10,88(sp)
1000cb68:	00800044 	movi	r2,1
1000cb6c:	50802326 	beq	r10,r2,1000cbfc <_dtoa_r+0x14ac>
1000cb70:	d8800717 	ldw	r2,28(sp)
1000cb74:	b82b883a 	mov	r21,r23
1000cb78:	dc001315 	stw	r16,76(sp)
1000cb7c:	12a9883a 	add	r20,r2,r10
1000cb80:	4807883a 	mov	r3,r9
1000cb84:	4005883a 	mov	r2,r8
1000cb88:	dc801415 	stw	r18,80(sp)
1000cb8c:	000d883a 	mov	r6,zero
1000cb90:	01d00934 	movhi	r7,16420
1000cb94:	1009883a 	mov	r4,r2
1000cb98:	180b883a 	mov	r5,r3
1000cb9c:	0007b100 	call	10007b10 <__muldf3>
1000cba0:	180b883a 	mov	r5,r3
1000cba4:	1009883a 	mov	r4,r2
1000cba8:	1821883a 	mov	r16,r3
1000cbac:	1025883a 	mov	r18,r2
1000cbb0:	00145540 	call	10014554 <__fixdfsi>
1000cbb4:	1009883a 	mov	r4,r2
1000cbb8:	1023883a 	mov	r17,r2
1000cbbc:	00145dc0 	call	100145dc <__floatsidf>
1000cbc0:	9009883a 	mov	r4,r18
1000cbc4:	800b883a 	mov	r5,r16
1000cbc8:	100d883a 	mov	r6,r2
1000cbcc:	180f883a 	mov	r7,r3
1000cbd0:	8c400c04 	addi	r17,r17,48
1000cbd4:	000837c0 	call	1000837c <__subdf3>
1000cbd8:	ad400044 	addi	r21,r21,1
1000cbdc:	ac7fffc5 	stb	r17,-1(r21)
1000cbe0:	ad3fea1e 	bne	r21,r20,1000cb8c <__alt_data_end+0xf800cb8c>
1000cbe4:	1813883a 	mov	r9,r3
1000cbe8:	d8c01017 	ldw	r3,64(sp)
1000cbec:	dc001317 	ldw	r16,76(sp)
1000cbf0:	dc801417 	ldw	r18,80(sp)
1000cbf4:	1011883a 	mov	r8,r2
1000cbf8:	b8ef883a 	add	r23,r23,r3
1000cbfc:	d9000e17 	ldw	r4,56(sp)
1000cc00:	d9401117 	ldw	r5,68(sp)
1000cc04:	000d883a 	mov	r6,zero
1000cc08:	01cff834 	movhi	r7,16352
1000cc0c:	da001715 	stw	r8,92(sp)
1000cc10:	da401515 	stw	r9,84(sp)
1000cc14:	00130f40 	call	100130f4 <__adddf3>
1000cc18:	da001717 	ldw	r8,92(sp)
1000cc1c:	da401517 	ldw	r9,84(sp)
1000cc20:	1009883a 	mov	r4,r2
1000cc24:	400d883a 	mov	r6,r8
1000cc28:	480f883a 	mov	r7,r9
1000cc2c:	180b883a 	mov	r5,r3
1000cc30:	00144740 	call	10014474 <__ledf2>
1000cc34:	da001717 	ldw	r8,92(sp)
1000cc38:	da401517 	ldw	r9,84(sp)
1000cc3c:	10003b0e 	bge	r2,zero,1000cd2c <_dtoa_r+0x15dc>
1000cc40:	d9001217 	ldw	r4,72(sp)
1000cc44:	bd7fffc3 	ldbu	r21,-1(r23)
1000cc48:	d9000515 	stw	r4,20(sp)
1000cc4c:	003d1c06 	br	1000c0c0 <__alt_data_end+0xf800c0c0>
1000cc50:	d8c00817 	ldw	r3,32(sp)
1000cc54:	18a9c83a 	sub	r20,r3,r2
1000cc58:	0005883a 	mov	r2,zero
1000cc5c:	003d3706 	br	1000c13c <__alt_data_end+0xf800c13c>
1000cc60:	00800044 	movi	r2,1
1000cc64:	003dd006 	br	1000c3a8 <__alt_data_end+0xf800c3a8>
1000cc68:	d8c00217 	ldw	r3,8(sp)
1000cc6c:	00800d84 	movi	r2,54
1000cc70:	dd400917 	ldw	r21,36(sp)
1000cc74:	10c5c83a 	sub	r2,r2,r3
1000cc78:	dd000817 	ldw	r20,32(sp)
1000cc7c:	003d2f06 	br	1000c13c <__alt_data_end+0xf800c13c>
1000cc80:	9029883a 	mov	r20,r18
1000cc84:	982b883a 	mov	r21,r19
1000cc88:	04400084 	movi	r17,2
1000cc8c:	003bc606 	br	1000bba8 <__alt_data_end+0xf800bba8>
1000cc90:	d8800617 	ldw	r2,24(sp)
1000cc94:	103efc26 	beq	r2,zero,1000c888 <__alt_data_end+0xf800c888>
1000cc98:	d8c00d17 	ldw	r3,52(sp)
1000cc9c:	00fc890e 	bge	zero,r3,1000bec4 <__alt_data_end+0xf800bec4>
1000cca0:	a80b883a 	mov	r5,r21
1000cca4:	a009883a 	mov	r4,r20
1000cca8:	000d883a 	mov	r6,zero
1000ccac:	01d00934 	movhi	r7,16420
1000ccb0:	0007b100 	call	10007b10 <__muldf3>
1000ccb4:	89000044 	addi	r4,r17,1
1000ccb8:	1029883a 	mov	r20,r2
1000ccbc:	182b883a 	mov	r21,r3
1000ccc0:	00145dc0 	call	100145dc <__floatsidf>
1000ccc4:	a009883a 	mov	r4,r20
1000ccc8:	a80b883a 	mov	r5,r21
1000cccc:	100d883a 	mov	r6,r2
1000ccd0:	180f883a 	mov	r7,r3
1000ccd4:	0007b100 	call	10007b10 <__muldf3>
1000ccd8:	1009883a 	mov	r4,r2
1000ccdc:	180b883a 	mov	r5,r3
1000cce0:	000d883a 	mov	r6,zero
1000cce4:	01d00734 	movhi	r7,16412
1000cce8:	00130f40 	call	100130f4 <__adddf3>
1000ccec:	d9000517 	ldw	r4,20(sp)
1000ccf0:	1023883a 	mov	r17,r2
1000ccf4:	00bf3034 	movhi	r2,64704
1000ccf8:	213fffc4 	addi	r4,r4,-1
1000ccfc:	1885883a 	add	r2,r3,r2
1000cd00:	d9001215 	stw	r4,72(sp)
1000cd04:	d8800e15 	stw	r2,56(sp)
1000cd08:	da800d17 	ldw	r10,52(sp)
1000cd0c:	003bc306 	br	1000bc1c <__alt_data_end+0xf800bc1c>
1000cd10:	b039883a 	mov	fp,r22
1000cd14:	01000e44 	movi	r4,57
1000cd18:	8825883a 	mov	r18,r17
1000cd1c:	9dc00044 	addi	r23,r19,1
1000cd20:	99000005 	stb	r4,0(r19)
1000cd24:	a023883a 	mov	r17,r20
1000cd28:	003dae06 	br	1000c3e4 <__alt_data_end+0xf800c3e4>
1000cd2c:	d9800e17 	ldw	r6,56(sp)
1000cd30:	d9c01117 	ldw	r7,68(sp)
1000cd34:	0009883a 	mov	r4,zero
1000cd38:	014ff834 	movhi	r5,16352
1000cd3c:	da001715 	stw	r8,92(sp)
1000cd40:	da401515 	stw	r9,84(sp)
1000cd44:	000837c0 	call	1000837c <__subdf3>
1000cd48:	da001717 	ldw	r8,92(sp)
1000cd4c:	da401517 	ldw	r9,84(sp)
1000cd50:	1009883a 	mov	r4,r2
1000cd54:	180b883a 	mov	r5,r3
1000cd58:	400d883a 	mov	r6,r8
1000cd5c:	480f883a 	mov	r7,r9
1000cd60:	00143940 	call	10014394 <__gedf2>
1000cd64:	00bc570e 	bge	zero,r2,1000bec4 <__alt_data_end+0xf800bec4>
1000cd68:	01000c04 	movi	r4,48
1000cd6c:	00000106 	br	1000cd74 <_dtoa_r+0x1624>
1000cd70:	102f883a 	mov	r23,r2
1000cd74:	b8bfffc4 	addi	r2,r23,-1
1000cd78:	10c00007 	ldb	r3,0(r2)
1000cd7c:	193ffc26 	beq	r3,r4,1000cd70 <__alt_data_end+0xf800cd70>
1000cd80:	d9801217 	ldw	r6,72(sp)
1000cd84:	d9800515 	stw	r6,20(sp)
1000cd88:	003c1f06 	br	1000be08 <__alt_data_end+0xf800be08>
1000cd8c:	d8801217 	ldw	r2,72(sp)
1000cd90:	dc001117 	ldw	r16,68(sp)
1000cd94:	d8800515 	stw	r2,20(sp)
1000cd98:	003cc906 	br	1000c0c0 <__alt_data_end+0xf800c0c0>
1000cd9c:	dd801317 	ldw	r22,76(sp)
1000cda0:	dc001117 	ldw	r16,68(sp)
1000cda4:	dcc01417 	ldw	r19,80(sp)
1000cda8:	dc801017 	ldw	r18,64(sp)
1000cdac:	003c4506 	br	1000bec4 <__alt_data_end+0xf800bec4>
1000cdb0:	103e5d1e 	bne	r2,zero,1000c728 <__alt_data_end+0xf800c728>
1000cdb4:	4080004c 	andi	r2,r8,1
1000cdb8:	103e5b26 	beq	r2,zero,1000c728 <__alt_data_end+0xf800c728>
1000cdbc:	003e5706 	br	1000c71c <__alt_data_end+0xf800c71c>
1000cdc0:	d8c00317 	ldw	r3,12(sp)
1000cdc4:	00800084 	movi	r2,2
1000cdc8:	10c00a16 	blt	r2,r3,1000cdf4 <_dtoa_r+0x16a4>
1000cdcc:	d9000d17 	ldw	r4,52(sp)
1000cdd0:	003e8306 	br	1000c7e0 <__alt_data_end+0xf800c7e0>
1000cdd4:	04400084 	movi	r17,2
1000cdd8:	003b7306 	br	1000bba8 <__alt_data_end+0xf800bba8>
1000cddc:	d9801217 	ldw	r6,72(sp)
1000cde0:	d9800515 	stw	r6,20(sp)
1000cde4:	003cb606 	br	1000c0c0 <__alt_data_end+0xf800c0c0>
1000cde8:	d9001217 	ldw	r4,72(sp)
1000cdec:	d9000515 	stw	r4,20(sp)
1000cdf0:	003c0506 	br	1000be08 <__alt_data_end+0xf800be08>
1000cdf4:	d9800d17 	ldw	r6,52(sp)
1000cdf8:	d9800615 	stw	r6,24(sp)
1000cdfc:	003e8306 	br	1000c80c <__alt_data_end+0xf800c80c>
1000ce00:	d9800317 	ldw	r6,12(sp)
1000ce04:	00800084 	movi	r2,2
1000ce08:	11800216 	blt	r2,r6,1000ce14 <_dtoa_r+0x16c4>
1000ce0c:	d8800d17 	ldw	r2,52(sp)
1000ce10:	003da606 	br	1000c4ac <__alt_data_end+0xf800c4ac>
1000ce14:	d8800d17 	ldw	r2,52(sp)
1000ce18:	d8800615 	stw	r2,24(sp)
1000ce1c:	003e7b06 	br	1000c80c <__alt_data_end+0xf800c80c>
1000ce20:	05000044 	movi	r20,1
1000ce24:	003b0506 	br	1000ba3c <__alt_data_end+0xf800ba3c>
1000ce28:	8009883a 	mov	r4,r16
1000ce2c:	80001115 	stw	zero,68(r16)
1000ce30:	000b883a 	mov	r5,zero
1000ce34:	000ec540 	call	1000ec54 <_Balloc>
1000ce38:	d8800715 	stw	r2,28(sp)
1000ce3c:	d8c00717 	ldw	r3,28(sp)
1000ce40:	00bfffc4 	movi	r2,-1
1000ce44:	01000044 	movi	r4,1
1000ce48:	d8800615 	stw	r2,24(sp)
1000ce4c:	80c01015 	stw	r3,64(r16)
1000ce50:	d9000b15 	stw	r4,44(sp)
1000ce54:	d8002215 	stw	zero,136(sp)
1000ce58:	d8800d15 	stw	r2,52(sp)
1000ce5c:	003c1906 	br	1000bec4 <__alt_data_end+0xf800bec4>
1000ce60:	193d2926 	beq	r3,r4,1000c308 <__alt_data_end+0xf800c308>
1000ce64:	00c00f04 	movi	r3,60
1000ce68:	1885c83a 	sub	r2,r3,r2
1000ce6c:	003d7b06 	br	1000c45c <__alt_data_end+0xf800c45c>
1000ce70:	000b883a 	mov	r5,zero
1000ce74:	003b1006 	br	1000bab8 <__alt_data_end+0xf800bab8>

1000ce78 <_fflush_r>:
1000ce78:	defffb04 	addi	sp,sp,-20
1000ce7c:	dcc00315 	stw	r19,12(sp)
1000ce80:	dc000015 	stw	r16,0(sp)
1000ce84:	dfc00415 	stw	ra,16(sp)
1000ce88:	dc800215 	stw	r18,8(sp)
1000ce8c:	dc400115 	stw	r17,4(sp)
1000ce90:	2027883a 	mov	r19,r4
1000ce94:	2821883a 	mov	r16,r5
1000ce98:	20000226 	beq	r4,zero,1000cea4 <_fflush_r+0x2c>
1000ce9c:	20800e17 	ldw	r2,56(r4)
1000cea0:	10005326 	beq	r2,zero,1000cff0 <_fflush_r+0x178>
1000cea4:	8080030b 	ldhu	r2,12(r16)
1000cea8:	10ffffcc 	andi	r3,r2,65535
1000ceac:	18e0001c 	xori	r3,r3,32768
1000ceb0:	18e00004 	addi	r3,r3,-32768
1000ceb4:	18002c26 	beq	r3,zero,1000cf68 <_fflush_r+0xf0>
1000ceb8:	10c0020c 	andi	r3,r2,8
1000cebc:	1800321e 	bne	r3,zero,1000cf88 <_fflush_r+0x110>
1000cec0:	80c00117 	ldw	r3,4(r16)
1000cec4:	10820014 	ori	r2,r2,2048
1000cec8:	8080030d 	sth	r2,12(r16)
1000cecc:	00c0570e 	bge	zero,r3,1000d02c <_fflush_r+0x1b4>
1000ced0:	82000a17 	ldw	r8,40(r16)
1000ced4:	40002426 	beq	r8,zero,1000cf68 <_fflush_r+0xf0>
1000ced8:	9c400017 	ldw	r17,0(r19)
1000cedc:	10c4000c 	andi	r3,r2,4096
1000cee0:	98000015 	stw	zero,0(r19)
1000cee4:	18004626 	beq	r3,zero,1000d000 <_fflush_r+0x188>
1000cee8:	81801417 	ldw	r6,80(r16)
1000ceec:	10c0010c 	andi	r3,r2,4
1000cef0:	18000626 	beq	r3,zero,1000cf0c <_fflush_r+0x94>
1000cef4:	80c00117 	ldw	r3,4(r16)
1000cef8:	80800c17 	ldw	r2,48(r16)
1000cefc:	30cdc83a 	sub	r6,r6,r3
1000cf00:	10000226 	beq	r2,zero,1000cf0c <_fflush_r+0x94>
1000cf04:	80800f17 	ldw	r2,60(r16)
1000cf08:	308dc83a 	sub	r6,r6,r2
1000cf0c:	81400717 	ldw	r5,28(r16)
1000cf10:	9809883a 	mov	r4,r19
1000cf14:	000f883a 	mov	r7,zero
1000cf18:	403ee83a 	callr	r8
1000cf1c:	00ffffc4 	movi	r3,-1
1000cf20:	10c04526 	beq	r2,r3,1000d038 <_fflush_r+0x1c0>
1000cf24:	80c0030b 	ldhu	r3,12(r16)
1000cf28:	81000417 	ldw	r4,16(r16)
1000cf2c:	80000115 	stw	zero,4(r16)
1000cf30:	197dffcc 	andi	r5,r3,63487
1000cf34:	8140030d 	sth	r5,12(r16)
1000cf38:	81000015 	stw	r4,0(r16)
1000cf3c:	18c4000c 	andi	r3,r3,4096
1000cf40:	18000126 	beq	r3,zero,1000cf48 <_fflush_r+0xd0>
1000cf44:	80801415 	stw	r2,80(r16)
1000cf48:	81400c17 	ldw	r5,48(r16)
1000cf4c:	9c400015 	stw	r17,0(r19)
1000cf50:	28000526 	beq	r5,zero,1000cf68 <_fflush_r+0xf0>
1000cf54:	80801004 	addi	r2,r16,64
1000cf58:	28800226 	beq	r5,r2,1000cf64 <_fflush_r+0xec>
1000cf5c:	9809883a 	mov	r4,r19
1000cf60:	000d5a80 	call	1000d5a8 <_free_r>
1000cf64:	80000c15 	stw	zero,48(r16)
1000cf68:	0005883a 	mov	r2,zero
1000cf6c:	dfc00417 	ldw	ra,16(sp)
1000cf70:	dcc00317 	ldw	r19,12(sp)
1000cf74:	dc800217 	ldw	r18,8(sp)
1000cf78:	dc400117 	ldw	r17,4(sp)
1000cf7c:	dc000017 	ldw	r16,0(sp)
1000cf80:	dec00504 	addi	sp,sp,20
1000cf84:	f800283a 	ret
1000cf88:	84800417 	ldw	r18,16(r16)
1000cf8c:	903ff626 	beq	r18,zero,1000cf68 <__alt_data_end+0xf800cf68>
1000cf90:	84400017 	ldw	r17,0(r16)
1000cf94:	108000cc 	andi	r2,r2,3
1000cf98:	84800015 	stw	r18,0(r16)
1000cf9c:	8ca3c83a 	sub	r17,r17,r18
1000cfa0:	10001526 	beq	r2,zero,1000cff8 <_fflush_r+0x180>
1000cfa4:	0005883a 	mov	r2,zero
1000cfa8:	80800215 	stw	r2,8(r16)
1000cfac:	04400316 	blt	zero,r17,1000cfbc <_fflush_r+0x144>
1000cfb0:	003fed06 	br	1000cf68 <__alt_data_end+0xf800cf68>
1000cfb4:	90a5883a 	add	r18,r18,r2
1000cfb8:	047feb0e 	bge	zero,r17,1000cf68 <__alt_data_end+0xf800cf68>
1000cfbc:	80800917 	ldw	r2,36(r16)
1000cfc0:	81400717 	ldw	r5,28(r16)
1000cfc4:	880f883a 	mov	r7,r17
1000cfc8:	900d883a 	mov	r6,r18
1000cfcc:	9809883a 	mov	r4,r19
1000cfd0:	103ee83a 	callr	r2
1000cfd4:	88a3c83a 	sub	r17,r17,r2
1000cfd8:	00bff616 	blt	zero,r2,1000cfb4 <__alt_data_end+0xf800cfb4>
1000cfdc:	80c0030b 	ldhu	r3,12(r16)
1000cfe0:	00bfffc4 	movi	r2,-1
1000cfe4:	18c01014 	ori	r3,r3,64
1000cfe8:	80c0030d 	sth	r3,12(r16)
1000cfec:	003fdf06 	br	1000cf6c <__alt_data_end+0xf800cf6c>
1000cff0:	000d4340 	call	1000d434 <__sinit>
1000cff4:	003fab06 	br	1000cea4 <__alt_data_end+0xf800cea4>
1000cff8:	80800517 	ldw	r2,20(r16)
1000cffc:	003fea06 	br	1000cfa8 <__alt_data_end+0xf800cfa8>
1000d000:	81400717 	ldw	r5,28(r16)
1000d004:	000d883a 	mov	r6,zero
1000d008:	9809883a 	mov	r4,r19
1000d00c:	01c00044 	movi	r7,1
1000d010:	403ee83a 	callr	r8
1000d014:	100d883a 	mov	r6,r2
1000d018:	00bfffc4 	movi	r2,-1
1000d01c:	30801326 	beq	r6,r2,1000d06c <_fflush_r+0x1f4>
1000d020:	8080030b 	ldhu	r2,12(r16)
1000d024:	82000a17 	ldw	r8,40(r16)
1000d028:	003fb006 	br	1000ceec <__alt_data_end+0xf800ceec>
1000d02c:	80c00f17 	ldw	r3,60(r16)
1000d030:	00ffa716 	blt	zero,r3,1000ced0 <__alt_data_end+0xf800ced0>
1000d034:	003fcc06 	br	1000cf68 <__alt_data_end+0xf800cf68>
1000d038:	98c00017 	ldw	r3,0(r19)
1000d03c:	183fb926 	beq	r3,zero,1000cf24 <__alt_data_end+0xf800cf24>
1000d040:	01000744 	movi	r4,29
1000d044:	19000226 	beq	r3,r4,1000d050 <_fflush_r+0x1d8>
1000d048:	01000584 	movi	r4,22
1000d04c:	1900101e 	bne	r3,r4,1000d090 <_fflush_r+0x218>
1000d050:	8080030b 	ldhu	r2,12(r16)
1000d054:	80c00417 	ldw	r3,16(r16)
1000d058:	80000115 	stw	zero,4(r16)
1000d05c:	10bdffcc 	andi	r2,r2,63487
1000d060:	8080030d 	sth	r2,12(r16)
1000d064:	80c00015 	stw	r3,0(r16)
1000d068:	003fb706 	br	1000cf48 <__alt_data_end+0xf800cf48>
1000d06c:	98800017 	ldw	r2,0(r19)
1000d070:	103feb26 	beq	r2,zero,1000d020 <__alt_data_end+0xf800d020>
1000d074:	00c00744 	movi	r3,29
1000d078:	10c00226 	beq	r2,r3,1000d084 <_fflush_r+0x20c>
1000d07c:	00c00584 	movi	r3,22
1000d080:	10ffd61e 	bne	r2,r3,1000cfdc <__alt_data_end+0xf800cfdc>
1000d084:	9c400015 	stw	r17,0(r19)
1000d088:	0005883a 	mov	r2,zero
1000d08c:	003fb706 	br	1000cf6c <__alt_data_end+0xf800cf6c>
1000d090:	80c0030b 	ldhu	r3,12(r16)
1000d094:	18c01014 	ori	r3,r3,64
1000d098:	80c0030d 	sth	r3,12(r16)
1000d09c:	003fb306 	br	1000cf6c <__alt_data_end+0xf800cf6c>

1000d0a0 <fflush>:
1000d0a0:	20000526 	beq	r4,zero,1000d0b8 <fflush+0x18>
1000d0a4:	008400b4 	movhi	r2,4098
1000d0a8:	10abcb04 	addi	r2,r2,-20692
1000d0ac:	200b883a 	mov	r5,r4
1000d0b0:	11000017 	ldw	r4,0(r2)
1000d0b4:	000ce781 	jmpi	1000ce78 <_fflush_r>
1000d0b8:	008400b4 	movhi	r2,4098
1000d0bc:	10abca04 	addi	r2,r2,-20696
1000d0c0:	11000017 	ldw	r4,0(r2)
1000d0c4:	01440074 	movhi	r5,4097
1000d0c8:	29739e04 	addi	r5,r5,-12680
1000d0cc:	000ddf41 	jmpi	1000ddf4 <_fwalk_reent>

1000d0d0 <__fp_lock>:
1000d0d0:	0005883a 	mov	r2,zero
1000d0d4:	f800283a 	ret

1000d0d8 <__fp_unlock>:
1000d0d8:	0005883a 	mov	r2,zero
1000d0dc:	f800283a 	ret

1000d0e0 <_cleanup_r>:
1000d0e0:	01440074 	movhi	r5,4097
1000d0e4:	29473204 	addi	r5,r5,7368
1000d0e8:	000dd3c1 	jmpi	1000dd3c <_fwalk>

1000d0ec <__sinit.part.1>:
1000d0ec:	defff604 	addi	sp,sp,-40
1000d0f0:	00c40074 	movhi	r3,4097
1000d0f4:	dfc00915 	stw	ra,36(sp)
1000d0f8:	df000815 	stw	fp,32(sp)
1000d0fc:	ddc00715 	stw	r23,28(sp)
1000d100:	dd800615 	stw	r22,24(sp)
1000d104:	dd400515 	stw	r21,20(sp)
1000d108:	dd000415 	stw	r20,16(sp)
1000d10c:	dcc00315 	stw	r19,12(sp)
1000d110:	dc800215 	stw	r18,8(sp)
1000d114:	dc400115 	stw	r17,4(sp)
1000d118:	dc000015 	stw	r16,0(sp)
1000d11c:	18f43804 	addi	r3,r3,-12064
1000d120:	24000117 	ldw	r16,4(r4)
1000d124:	20c00f15 	stw	r3,60(r4)
1000d128:	07000044 	movi	fp,1
1000d12c:	00c000c4 	movi	r3,3
1000d130:	2080bb04 	addi	r2,r4,748
1000d134:	20c0b915 	stw	r3,740(r4)
1000d138:	27000e15 	stw	fp,56(r4)
1000d13c:	2080ba15 	stw	r2,744(r4)
1000d140:	2000b815 	stw	zero,736(r4)
1000d144:	05c00204 	movi	r23,8
1000d148:	00800104 	movi	r2,4
1000d14c:	2025883a 	mov	r18,r4
1000d150:	b80d883a 	mov	r6,r23
1000d154:	81001704 	addi	r4,r16,92
1000d158:	000b883a 	mov	r5,zero
1000d15c:	80000015 	stw	zero,0(r16)
1000d160:	80000115 	stw	zero,4(r16)
1000d164:	80000215 	stw	zero,8(r16)
1000d168:	8080030d 	sth	r2,12(r16)
1000d16c:	80001915 	stw	zero,100(r16)
1000d170:	8000038d 	sth	zero,14(r16)
1000d174:	80000415 	stw	zero,16(r16)
1000d178:	80000515 	stw	zero,20(r16)
1000d17c:	80000615 	stw	zero,24(r16)
1000d180:	000eb300 	call	1000eb30 <memset>
1000d184:	05840074 	movhi	r22,4097
1000d188:	94400217 	ldw	r17,8(r18)
1000d18c:	05440074 	movhi	r21,4097
1000d190:	05040074 	movhi	r20,4097
1000d194:	04c40074 	movhi	r19,4097
1000d198:	b580c104 	addi	r22,r22,772
1000d19c:	ad40d804 	addi	r21,r21,864
1000d1a0:	a500f704 	addi	r20,r20,988
1000d1a4:	9cc10e04 	addi	r19,r19,1080
1000d1a8:	85800815 	stw	r22,32(r16)
1000d1ac:	85400915 	stw	r21,36(r16)
1000d1b0:	85000a15 	stw	r20,40(r16)
1000d1b4:	84c00b15 	stw	r19,44(r16)
1000d1b8:	84000715 	stw	r16,28(r16)
1000d1bc:	00800284 	movi	r2,10
1000d1c0:	89001704 	addi	r4,r17,92
1000d1c4:	b80d883a 	mov	r6,r23
1000d1c8:	000b883a 	mov	r5,zero
1000d1cc:	88000015 	stw	zero,0(r17)
1000d1d0:	88000115 	stw	zero,4(r17)
1000d1d4:	88000215 	stw	zero,8(r17)
1000d1d8:	8880030d 	sth	r2,12(r17)
1000d1dc:	88001915 	stw	zero,100(r17)
1000d1e0:	8f00038d 	sth	fp,14(r17)
1000d1e4:	88000415 	stw	zero,16(r17)
1000d1e8:	88000515 	stw	zero,20(r17)
1000d1ec:	88000615 	stw	zero,24(r17)
1000d1f0:	000eb300 	call	1000eb30 <memset>
1000d1f4:	94000317 	ldw	r16,12(r18)
1000d1f8:	00800484 	movi	r2,18
1000d1fc:	8c400715 	stw	r17,28(r17)
1000d200:	8d800815 	stw	r22,32(r17)
1000d204:	8d400915 	stw	r21,36(r17)
1000d208:	8d000a15 	stw	r20,40(r17)
1000d20c:	8cc00b15 	stw	r19,44(r17)
1000d210:	8080030d 	sth	r2,12(r16)
1000d214:	00800084 	movi	r2,2
1000d218:	80000015 	stw	zero,0(r16)
1000d21c:	80000115 	stw	zero,4(r16)
1000d220:	80000215 	stw	zero,8(r16)
1000d224:	80001915 	stw	zero,100(r16)
1000d228:	8080038d 	sth	r2,14(r16)
1000d22c:	80000415 	stw	zero,16(r16)
1000d230:	80000515 	stw	zero,20(r16)
1000d234:	80000615 	stw	zero,24(r16)
1000d238:	81001704 	addi	r4,r16,92
1000d23c:	000b883a 	mov	r5,zero
1000d240:	b80d883a 	mov	r6,r23
1000d244:	000eb300 	call	1000eb30 <memset>
1000d248:	84000715 	stw	r16,28(r16)
1000d24c:	85800815 	stw	r22,32(r16)
1000d250:	85400915 	stw	r21,36(r16)
1000d254:	85000a15 	stw	r20,40(r16)
1000d258:	84c00b15 	stw	r19,44(r16)
1000d25c:	dfc00917 	ldw	ra,36(sp)
1000d260:	df000817 	ldw	fp,32(sp)
1000d264:	ddc00717 	ldw	r23,28(sp)
1000d268:	dd800617 	ldw	r22,24(sp)
1000d26c:	dd400517 	ldw	r21,20(sp)
1000d270:	dd000417 	ldw	r20,16(sp)
1000d274:	dcc00317 	ldw	r19,12(sp)
1000d278:	dc800217 	ldw	r18,8(sp)
1000d27c:	dc400117 	ldw	r17,4(sp)
1000d280:	dc000017 	ldw	r16,0(sp)
1000d284:	dec00a04 	addi	sp,sp,40
1000d288:	f800283a 	ret

1000d28c <__sfmoreglue>:
1000d28c:	defffc04 	addi	sp,sp,-16
1000d290:	dc800215 	stw	r18,8(sp)
1000d294:	2825883a 	mov	r18,r5
1000d298:	dc000015 	stw	r16,0(sp)
1000d29c:	01401a04 	movi	r5,104
1000d2a0:	2021883a 	mov	r16,r4
1000d2a4:	9009883a 	mov	r4,r18
1000d2a8:	dfc00315 	stw	ra,12(sp)
1000d2ac:	dc400115 	stw	r17,4(sp)
1000d2b0:	0006df00 	call	10006df0 <__mulsi3>
1000d2b4:	8009883a 	mov	r4,r16
1000d2b8:	11400304 	addi	r5,r2,12
1000d2bc:	1023883a 	mov	r17,r2
1000d2c0:	000e1440 	call	1000e144 <_malloc_r>
1000d2c4:	1021883a 	mov	r16,r2
1000d2c8:	10000726 	beq	r2,zero,1000d2e8 <__sfmoreglue+0x5c>
1000d2cc:	11000304 	addi	r4,r2,12
1000d2d0:	10000015 	stw	zero,0(r2)
1000d2d4:	14800115 	stw	r18,4(r2)
1000d2d8:	11000215 	stw	r4,8(r2)
1000d2dc:	000b883a 	mov	r5,zero
1000d2e0:	880d883a 	mov	r6,r17
1000d2e4:	000eb300 	call	1000eb30 <memset>
1000d2e8:	8005883a 	mov	r2,r16
1000d2ec:	dfc00317 	ldw	ra,12(sp)
1000d2f0:	dc800217 	ldw	r18,8(sp)
1000d2f4:	dc400117 	ldw	r17,4(sp)
1000d2f8:	dc000017 	ldw	r16,0(sp)
1000d2fc:	dec00404 	addi	sp,sp,16
1000d300:	f800283a 	ret

1000d304 <__sfp>:
1000d304:	008400b4 	movhi	r2,4098
1000d308:	defffb04 	addi	sp,sp,-20
1000d30c:	10abca04 	addi	r2,r2,-20696
1000d310:	dc800215 	stw	r18,8(sp)
1000d314:	14800017 	ldw	r18,0(r2)
1000d318:	dcc00315 	stw	r19,12(sp)
1000d31c:	dfc00415 	stw	ra,16(sp)
1000d320:	90800e17 	ldw	r2,56(r18)
1000d324:	dc400115 	stw	r17,4(sp)
1000d328:	dc000015 	stw	r16,0(sp)
1000d32c:	2027883a 	mov	r19,r4
1000d330:	1000021e 	bne	r2,zero,1000d33c <__sfp+0x38>
1000d334:	9009883a 	mov	r4,r18
1000d338:	000d0ec0 	call	1000d0ec <__sinit.part.1>
1000d33c:	9480b804 	addi	r18,r18,736
1000d340:	047fffc4 	movi	r17,-1
1000d344:	91400117 	ldw	r5,4(r18)
1000d348:	94000217 	ldw	r16,8(r18)
1000d34c:	297fffc4 	addi	r5,r5,-1
1000d350:	28000a16 	blt	r5,zero,1000d37c <__sfp+0x78>
1000d354:	8080030f 	ldh	r2,12(r16)
1000d358:	10000c26 	beq	r2,zero,1000d38c <__sfp+0x88>
1000d35c:	80c01d04 	addi	r3,r16,116
1000d360:	00000206 	br	1000d36c <__sfp+0x68>
1000d364:	18bfe60f 	ldh	r2,-104(r3)
1000d368:	10000826 	beq	r2,zero,1000d38c <__sfp+0x88>
1000d36c:	297fffc4 	addi	r5,r5,-1
1000d370:	1c3ffd04 	addi	r16,r3,-12
1000d374:	18c01a04 	addi	r3,r3,104
1000d378:	2c7ffa1e 	bne	r5,r17,1000d364 <__alt_data_end+0xf800d364>
1000d37c:	90800017 	ldw	r2,0(r18)
1000d380:	10001d26 	beq	r2,zero,1000d3f8 <__sfp+0xf4>
1000d384:	1025883a 	mov	r18,r2
1000d388:	003fee06 	br	1000d344 <__alt_data_end+0xf800d344>
1000d38c:	00bfffc4 	movi	r2,-1
1000d390:	8080038d 	sth	r2,14(r16)
1000d394:	00800044 	movi	r2,1
1000d398:	8080030d 	sth	r2,12(r16)
1000d39c:	80001915 	stw	zero,100(r16)
1000d3a0:	80000015 	stw	zero,0(r16)
1000d3a4:	80000215 	stw	zero,8(r16)
1000d3a8:	80000115 	stw	zero,4(r16)
1000d3ac:	80000415 	stw	zero,16(r16)
1000d3b0:	80000515 	stw	zero,20(r16)
1000d3b4:	80000615 	stw	zero,24(r16)
1000d3b8:	81001704 	addi	r4,r16,92
1000d3bc:	000b883a 	mov	r5,zero
1000d3c0:	01800204 	movi	r6,8
1000d3c4:	000eb300 	call	1000eb30 <memset>
1000d3c8:	8005883a 	mov	r2,r16
1000d3cc:	80000c15 	stw	zero,48(r16)
1000d3d0:	80000d15 	stw	zero,52(r16)
1000d3d4:	80001115 	stw	zero,68(r16)
1000d3d8:	80001215 	stw	zero,72(r16)
1000d3dc:	dfc00417 	ldw	ra,16(sp)
1000d3e0:	dcc00317 	ldw	r19,12(sp)
1000d3e4:	dc800217 	ldw	r18,8(sp)
1000d3e8:	dc400117 	ldw	r17,4(sp)
1000d3ec:	dc000017 	ldw	r16,0(sp)
1000d3f0:	dec00504 	addi	sp,sp,20
1000d3f4:	f800283a 	ret
1000d3f8:	9809883a 	mov	r4,r19
1000d3fc:	01400104 	movi	r5,4
1000d400:	000d28c0 	call	1000d28c <__sfmoreglue>
1000d404:	90800015 	stw	r2,0(r18)
1000d408:	103fde1e 	bne	r2,zero,1000d384 <__alt_data_end+0xf800d384>
1000d40c:	00800304 	movi	r2,12
1000d410:	98800015 	stw	r2,0(r19)
1000d414:	0005883a 	mov	r2,zero
1000d418:	003ff006 	br	1000d3dc <__alt_data_end+0xf800d3dc>

1000d41c <_cleanup>:
1000d41c:	008400b4 	movhi	r2,4098
1000d420:	10abca04 	addi	r2,r2,-20696
1000d424:	11000017 	ldw	r4,0(r2)
1000d428:	01440074 	movhi	r5,4097
1000d42c:	29473204 	addi	r5,r5,7368
1000d430:	000dd3c1 	jmpi	1000dd3c <_fwalk>

1000d434 <__sinit>:
1000d434:	20800e17 	ldw	r2,56(r4)
1000d438:	10000126 	beq	r2,zero,1000d440 <__sinit+0xc>
1000d43c:	f800283a 	ret
1000d440:	000d0ec1 	jmpi	1000d0ec <__sinit.part.1>

1000d444 <__sfp_lock_acquire>:
1000d444:	f800283a 	ret

1000d448 <__sfp_lock_release>:
1000d448:	f800283a 	ret

1000d44c <__sinit_lock_acquire>:
1000d44c:	f800283a 	ret

1000d450 <__sinit_lock_release>:
1000d450:	f800283a 	ret

1000d454 <__fp_lock_all>:
1000d454:	008400b4 	movhi	r2,4098
1000d458:	10abcb04 	addi	r2,r2,-20692
1000d45c:	11000017 	ldw	r4,0(r2)
1000d460:	01440074 	movhi	r5,4097
1000d464:	29743404 	addi	r5,r5,-12080
1000d468:	000dd3c1 	jmpi	1000dd3c <_fwalk>

1000d46c <__fp_unlock_all>:
1000d46c:	008400b4 	movhi	r2,4098
1000d470:	10abcb04 	addi	r2,r2,-20692
1000d474:	11000017 	ldw	r4,0(r2)
1000d478:	01440074 	movhi	r5,4097
1000d47c:	29743604 	addi	r5,r5,-12072
1000d480:	000dd3c1 	jmpi	1000dd3c <_fwalk>

1000d484 <_malloc_trim_r>:
1000d484:	defffb04 	addi	sp,sp,-20
1000d488:	dcc00315 	stw	r19,12(sp)
1000d48c:	04c400b4 	movhi	r19,4098
1000d490:	dc800215 	stw	r18,8(sp)
1000d494:	dc400115 	stw	r17,4(sp)
1000d498:	dc000015 	stw	r16,0(sp)
1000d49c:	dfc00415 	stw	ra,16(sp)
1000d4a0:	2821883a 	mov	r16,r5
1000d4a4:	9ce64604 	addi	r19,r19,-26344
1000d4a8:	2025883a 	mov	r18,r4
1000d4ac:	0014d380 	call	10014d38 <__malloc_lock>
1000d4b0:	98800217 	ldw	r2,8(r19)
1000d4b4:	14400117 	ldw	r17,4(r2)
1000d4b8:	00bfff04 	movi	r2,-4
1000d4bc:	88a2703a 	and	r17,r17,r2
1000d4c0:	8c21c83a 	sub	r16,r17,r16
1000d4c4:	8403fbc4 	addi	r16,r16,4079
1000d4c8:	8020d33a 	srli	r16,r16,12
1000d4cc:	0083ffc4 	movi	r2,4095
1000d4d0:	843fffc4 	addi	r16,r16,-1
1000d4d4:	8020933a 	slli	r16,r16,12
1000d4d8:	1400060e 	bge	r2,r16,1000d4f4 <_malloc_trim_r+0x70>
1000d4dc:	9009883a 	mov	r4,r18
1000d4e0:	000b883a 	mov	r5,zero
1000d4e4:	00102b00 	call	100102b0 <_sbrk_r>
1000d4e8:	98c00217 	ldw	r3,8(r19)
1000d4ec:	1c47883a 	add	r3,r3,r17
1000d4f0:	10c00a26 	beq	r2,r3,1000d51c <_malloc_trim_r+0x98>
1000d4f4:	9009883a 	mov	r4,r18
1000d4f8:	0014d5c0 	call	10014d5c <__malloc_unlock>
1000d4fc:	0005883a 	mov	r2,zero
1000d500:	dfc00417 	ldw	ra,16(sp)
1000d504:	dcc00317 	ldw	r19,12(sp)
1000d508:	dc800217 	ldw	r18,8(sp)
1000d50c:	dc400117 	ldw	r17,4(sp)
1000d510:	dc000017 	ldw	r16,0(sp)
1000d514:	dec00504 	addi	sp,sp,20
1000d518:	f800283a 	ret
1000d51c:	9009883a 	mov	r4,r18
1000d520:	040bc83a 	sub	r5,zero,r16
1000d524:	00102b00 	call	100102b0 <_sbrk_r>
1000d528:	00ffffc4 	movi	r3,-1
1000d52c:	10c00d26 	beq	r2,r3,1000d564 <_malloc_trim_r+0xe0>
1000d530:	00c400b4 	movhi	r3,4098
1000d534:	18f2a304 	addi	r3,r3,-13684
1000d538:	18800017 	ldw	r2,0(r3)
1000d53c:	99000217 	ldw	r4,8(r19)
1000d540:	8c23c83a 	sub	r17,r17,r16
1000d544:	8c400054 	ori	r17,r17,1
1000d548:	1421c83a 	sub	r16,r2,r16
1000d54c:	24400115 	stw	r17,4(r4)
1000d550:	9009883a 	mov	r4,r18
1000d554:	1c000015 	stw	r16,0(r3)
1000d558:	0014d5c0 	call	10014d5c <__malloc_unlock>
1000d55c:	00800044 	movi	r2,1
1000d560:	003fe706 	br	1000d500 <__alt_data_end+0xf800d500>
1000d564:	9009883a 	mov	r4,r18
1000d568:	000b883a 	mov	r5,zero
1000d56c:	00102b00 	call	100102b0 <_sbrk_r>
1000d570:	99000217 	ldw	r4,8(r19)
1000d574:	014003c4 	movi	r5,15
1000d578:	1107c83a 	sub	r3,r2,r4
1000d57c:	28ffdd0e 	bge	r5,r3,1000d4f4 <__alt_data_end+0xf800d4f4>
1000d580:	014400b4 	movhi	r5,4098
1000d584:	296bcd04 	addi	r5,r5,-20684
1000d588:	29400017 	ldw	r5,0(r5)
1000d58c:	18c00054 	ori	r3,r3,1
1000d590:	20c00115 	stw	r3,4(r4)
1000d594:	00c400b4 	movhi	r3,4098
1000d598:	1145c83a 	sub	r2,r2,r5
1000d59c:	18f2a304 	addi	r3,r3,-13684
1000d5a0:	18800015 	stw	r2,0(r3)
1000d5a4:	003fd306 	br	1000d4f4 <__alt_data_end+0xf800d4f4>

1000d5a8 <_free_r>:
1000d5a8:	28004c26 	beq	r5,zero,1000d6dc <_free_r+0x134>
1000d5ac:	defffd04 	addi	sp,sp,-12
1000d5b0:	dc400115 	stw	r17,4(sp)
1000d5b4:	dc000015 	stw	r16,0(sp)
1000d5b8:	2023883a 	mov	r17,r4
1000d5bc:	2821883a 	mov	r16,r5
1000d5c0:	dfc00215 	stw	ra,8(sp)
1000d5c4:	0014d380 	call	10014d38 <__malloc_lock>
1000d5c8:	813fff17 	ldw	r4,-4(r16)
1000d5cc:	00bfff84 	movi	r2,-2
1000d5d0:	024400b4 	movhi	r9,4098
1000d5d4:	81bffe04 	addi	r6,r16,-8
1000d5d8:	2084703a 	and	r2,r4,r2
1000d5dc:	4a664604 	addi	r9,r9,-26344
1000d5e0:	308b883a 	add	r5,r6,r2
1000d5e4:	2a000117 	ldw	r8,4(r5)
1000d5e8:	49c00217 	ldw	r7,8(r9)
1000d5ec:	00ffff04 	movi	r3,-4
1000d5f0:	40c6703a 	and	r3,r8,r3
1000d5f4:	39405326 	beq	r7,r5,1000d744 <_free_r+0x19c>
1000d5f8:	28c00115 	stw	r3,4(r5)
1000d5fc:	2100004c 	andi	r4,r4,1
1000d600:	2000091e 	bne	r4,zero,1000d628 <_free_r+0x80>
1000d604:	81fffe17 	ldw	r7,-8(r16)
1000d608:	4a000204 	addi	r8,r9,8
1000d60c:	31cdc83a 	sub	r6,r6,r7
1000d610:	31000217 	ldw	r4,8(r6)
1000d614:	11c5883a 	add	r2,r2,r7
1000d618:	22006126 	beq	r4,r8,1000d7a0 <_free_r+0x1f8>
1000d61c:	31c00317 	ldw	r7,12(r6)
1000d620:	21c00315 	stw	r7,12(r4)
1000d624:	39000215 	stw	r4,8(r7)
1000d628:	28c9883a 	add	r4,r5,r3
1000d62c:	21c00117 	ldw	r7,4(r4)
1000d630:	39c0004c 	andi	r7,r7,1
1000d634:	38000d1e 	bne	r7,zero,1000d66c <_free_r+0xc4>
1000d638:	29000217 	ldw	r4,8(r5)
1000d63c:	10c5883a 	add	r2,r2,r3
1000d640:	00c400b4 	movhi	r3,4098
1000d644:	18e64804 	addi	r3,r3,-26336
1000d648:	20c07526 	beq	r4,r3,1000d820 <_free_r+0x278>
1000d64c:	29c00317 	ldw	r7,12(r5)
1000d650:	11400054 	ori	r5,r2,1
1000d654:	3087883a 	add	r3,r6,r2
1000d658:	21c00315 	stw	r7,12(r4)
1000d65c:	39000215 	stw	r4,8(r7)
1000d660:	31400115 	stw	r5,4(r6)
1000d664:	18800015 	stw	r2,0(r3)
1000d668:	00000406 	br	1000d67c <_free_r+0xd4>
1000d66c:	10c00054 	ori	r3,r2,1
1000d670:	30c00115 	stw	r3,4(r6)
1000d674:	3087883a 	add	r3,r6,r2
1000d678:	18800015 	stw	r2,0(r3)
1000d67c:	00c07fc4 	movi	r3,511
1000d680:	18801736 	bltu	r3,r2,1000d6e0 <_free_r+0x138>
1000d684:	1004d0fa 	srli	r2,r2,3
1000d688:	01400044 	movi	r5,1
1000d68c:	49000117 	ldw	r4,4(r9)
1000d690:	1087883a 	add	r3,r2,r2
1000d694:	18c7883a 	add	r3,r3,r3
1000d698:	1005d0ba 	srai	r2,r2,2
1000d69c:	18c7883a 	add	r3,r3,r3
1000d6a0:	1a47883a 	add	r3,r3,r9
1000d6a4:	19c00217 	ldw	r7,8(r3)
1000d6a8:	2884983a 	sll	r2,r5,r2
1000d6ac:	30c00315 	stw	r3,12(r6)
1000d6b0:	31c00215 	stw	r7,8(r6)
1000d6b4:	1104b03a 	or	r2,r2,r4
1000d6b8:	19800215 	stw	r6,8(r3)
1000d6bc:	48800115 	stw	r2,4(r9)
1000d6c0:	39800315 	stw	r6,12(r7)
1000d6c4:	8809883a 	mov	r4,r17
1000d6c8:	dfc00217 	ldw	ra,8(sp)
1000d6cc:	dc400117 	ldw	r17,4(sp)
1000d6d0:	dc000017 	ldw	r16,0(sp)
1000d6d4:	dec00304 	addi	sp,sp,12
1000d6d8:	0014d5c1 	jmpi	10014d5c <__malloc_unlock>
1000d6dc:	f800283a 	ret
1000d6e0:	1006d27a 	srli	r3,r2,9
1000d6e4:	01000104 	movi	r4,4
1000d6e8:	20c04036 	bltu	r4,r3,1000d7ec <_free_r+0x244>
1000d6ec:	1006d1ba 	srli	r3,r2,6
1000d6f0:	19400e04 	addi	r5,r3,56
1000d6f4:	2947883a 	add	r3,r5,r5
1000d6f8:	18c7883a 	add	r3,r3,r3
1000d6fc:	18c7883a 	add	r3,r3,r3
1000d700:	1a49883a 	add	r4,r3,r9
1000d704:	20c00217 	ldw	r3,8(r4)
1000d708:	01c400b4 	movhi	r7,4098
1000d70c:	39e64604 	addi	r7,r7,-26344
1000d710:	19003b26 	beq	r3,r4,1000d800 <_free_r+0x258>
1000d714:	01ffff04 	movi	r7,-4
1000d718:	19400117 	ldw	r5,4(r3)
1000d71c:	29ca703a 	and	r5,r5,r7
1000d720:	1140022e 	bgeu	r2,r5,1000d72c <_free_r+0x184>
1000d724:	18c00217 	ldw	r3,8(r3)
1000d728:	20fffb1e 	bne	r4,r3,1000d718 <__alt_data_end+0xf800d718>
1000d72c:	18800317 	ldw	r2,12(r3)
1000d730:	30800315 	stw	r2,12(r6)
1000d734:	30c00215 	stw	r3,8(r6)
1000d738:	11800215 	stw	r6,8(r2)
1000d73c:	19800315 	stw	r6,12(r3)
1000d740:	003fe006 	br	1000d6c4 <__alt_data_end+0xf800d6c4>
1000d744:	2100004c 	andi	r4,r4,1
1000d748:	1885883a 	add	r2,r3,r2
1000d74c:	2000071e 	bne	r4,zero,1000d76c <_free_r+0x1c4>
1000d750:	817ffe17 	ldw	r5,-8(r16)
1000d754:	314dc83a 	sub	r6,r6,r5
1000d758:	30c00317 	ldw	r3,12(r6)
1000d75c:	31000217 	ldw	r4,8(r6)
1000d760:	1145883a 	add	r2,r2,r5
1000d764:	20c00315 	stw	r3,12(r4)
1000d768:	19000215 	stw	r4,8(r3)
1000d76c:	10c00054 	ori	r3,r2,1
1000d770:	30c00115 	stw	r3,4(r6)
1000d774:	00c400b4 	movhi	r3,4098
1000d778:	18ebce04 	addi	r3,r3,-20680
1000d77c:	18c00017 	ldw	r3,0(r3)
1000d780:	49800215 	stw	r6,8(r9)
1000d784:	10ffcf36 	bltu	r2,r3,1000d6c4 <__alt_data_end+0xf800d6c4>
1000d788:	008400b4 	movhi	r2,4098
1000d78c:	10b29b04 	addi	r2,r2,-13716
1000d790:	11400017 	ldw	r5,0(r2)
1000d794:	8809883a 	mov	r4,r17
1000d798:	000d4840 	call	1000d484 <_malloc_trim_r>
1000d79c:	003fc906 	br	1000d6c4 <__alt_data_end+0xf800d6c4>
1000d7a0:	28c9883a 	add	r4,r5,r3
1000d7a4:	21000117 	ldw	r4,4(r4)
1000d7a8:	2100004c 	andi	r4,r4,1
1000d7ac:	20000a1e 	bne	r4,zero,1000d7d8 <_free_r+0x230>
1000d7b0:	29000317 	ldw	r4,12(r5)
1000d7b4:	29400217 	ldw	r5,8(r5)
1000d7b8:	10c5883a 	add	r2,r2,r3
1000d7bc:	10c00054 	ori	r3,r2,1
1000d7c0:	29000315 	stw	r4,12(r5)
1000d7c4:	21400215 	stw	r5,8(r4)
1000d7c8:	30c00115 	stw	r3,4(r6)
1000d7cc:	308d883a 	add	r6,r6,r2
1000d7d0:	30800015 	stw	r2,0(r6)
1000d7d4:	003fbb06 	br	1000d6c4 <__alt_data_end+0xf800d6c4>
1000d7d8:	10c00054 	ori	r3,r2,1
1000d7dc:	30c00115 	stw	r3,4(r6)
1000d7e0:	308d883a 	add	r6,r6,r2
1000d7e4:	30800015 	stw	r2,0(r6)
1000d7e8:	003fb606 	br	1000d6c4 <__alt_data_end+0xf800d6c4>
1000d7ec:	01000504 	movi	r4,20
1000d7f0:	20c01436 	bltu	r4,r3,1000d844 <_free_r+0x29c>
1000d7f4:	194016c4 	addi	r5,r3,91
1000d7f8:	2947883a 	add	r3,r5,r5
1000d7fc:	003fbe06 	br	1000d6f8 <__alt_data_end+0xf800d6f8>
1000d800:	280bd0ba 	srai	r5,r5,2
1000d804:	00800044 	movi	r2,1
1000d808:	39000117 	ldw	r4,4(r7)
1000d80c:	114a983a 	sll	r5,r2,r5
1000d810:	1805883a 	mov	r2,r3
1000d814:	2908b03a 	or	r4,r5,r4
1000d818:	39000115 	stw	r4,4(r7)
1000d81c:	003fc406 	br	1000d730 <__alt_data_end+0xf800d730>
1000d820:	49800515 	stw	r6,20(r9)
1000d824:	49800415 	stw	r6,16(r9)
1000d828:	10c00054 	ori	r3,r2,1
1000d82c:	31000315 	stw	r4,12(r6)
1000d830:	31000215 	stw	r4,8(r6)
1000d834:	30c00115 	stw	r3,4(r6)
1000d838:	308d883a 	add	r6,r6,r2
1000d83c:	30800015 	stw	r2,0(r6)
1000d840:	003fa006 	br	1000d6c4 <__alt_data_end+0xf800d6c4>
1000d844:	01001504 	movi	r4,84
1000d848:	20c00436 	bltu	r4,r3,1000d85c <_free_r+0x2b4>
1000d84c:	1006d33a 	srli	r3,r2,12
1000d850:	19401b84 	addi	r5,r3,110
1000d854:	2947883a 	add	r3,r5,r5
1000d858:	003fa706 	br	1000d6f8 <__alt_data_end+0xf800d6f8>
1000d85c:	01005504 	movi	r4,340
1000d860:	20c00436 	bltu	r4,r3,1000d874 <_free_r+0x2cc>
1000d864:	1006d3fa 	srli	r3,r2,15
1000d868:	19401dc4 	addi	r5,r3,119
1000d86c:	2947883a 	add	r3,r5,r5
1000d870:	003fa106 	br	1000d6f8 <__alt_data_end+0xf800d6f8>
1000d874:	01015504 	movi	r4,1364
1000d878:	20c00436 	bltu	r4,r3,1000d88c <_free_r+0x2e4>
1000d87c:	1006d4ba 	srli	r3,r2,18
1000d880:	19401f04 	addi	r5,r3,124
1000d884:	2947883a 	add	r3,r5,r5
1000d888:	003f9b06 	br	1000d6f8 <__alt_data_end+0xf800d6f8>
1000d88c:	00c03f04 	movi	r3,252
1000d890:	01401f84 	movi	r5,126
1000d894:	003f9806 	br	1000d6f8 <__alt_data_end+0xf800d6f8>

1000d898 <__sfvwrite_r>:
1000d898:	30800217 	ldw	r2,8(r6)
1000d89c:	10004526 	beq	r2,zero,1000d9b4 <__sfvwrite_r+0x11c>
1000d8a0:	28c0030b 	ldhu	r3,12(r5)
1000d8a4:	defff404 	addi	sp,sp,-48
1000d8a8:	dd400715 	stw	r21,28(sp)
1000d8ac:	dcc00515 	stw	r19,20(sp)
1000d8b0:	dc000215 	stw	r16,8(sp)
1000d8b4:	dfc00b15 	stw	ra,44(sp)
1000d8b8:	df000a15 	stw	fp,40(sp)
1000d8bc:	ddc00915 	stw	r23,36(sp)
1000d8c0:	dd800815 	stw	r22,32(sp)
1000d8c4:	dd000615 	stw	r20,24(sp)
1000d8c8:	dc800415 	stw	r18,16(sp)
1000d8cc:	dc400315 	stw	r17,12(sp)
1000d8d0:	1880020c 	andi	r2,r3,8
1000d8d4:	2821883a 	mov	r16,r5
1000d8d8:	202b883a 	mov	r21,r4
1000d8dc:	3027883a 	mov	r19,r6
1000d8e0:	10002526 	beq	r2,zero,1000d978 <__sfvwrite_r+0xe0>
1000d8e4:	28800417 	ldw	r2,16(r5)
1000d8e8:	10002326 	beq	r2,zero,1000d978 <__sfvwrite_r+0xe0>
1000d8ec:	1880008c 	andi	r2,r3,2
1000d8f0:	9c400017 	ldw	r17,0(r19)
1000d8f4:	10003126 	beq	r2,zero,1000d9bc <__sfvwrite_r+0x124>
1000d8f8:	0029883a 	mov	r20,zero
1000d8fc:	0025883a 	mov	r18,zero
1000d900:	05810004 	movi	r22,1024
1000d904:	a00d883a 	mov	r6,r20
1000d908:	a809883a 	mov	r4,r21
1000d90c:	90002526 	beq	r18,zero,1000d9a4 <__sfvwrite_r+0x10c>
1000d910:	900f883a 	mov	r7,r18
1000d914:	81400717 	ldw	r5,28(r16)
1000d918:	b480012e 	bgeu	r22,r18,1000d920 <__sfvwrite_r+0x88>
1000d91c:	01c10004 	movi	r7,1024
1000d920:	80800917 	ldw	r2,36(r16)
1000d924:	103ee83a 	callr	r2
1000d928:	0080510e 	bge	zero,r2,1000da70 <__sfvwrite_r+0x1d8>
1000d92c:	98c00217 	ldw	r3,8(r19)
1000d930:	a0a9883a 	add	r20,r20,r2
1000d934:	90a5c83a 	sub	r18,r18,r2
1000d938:	1885c83a 	sub	r2,r3,r2
1000d93c:	98800215 	stw	r2,8(r19)
1000d940:	103ff01e 	bne	r2,zero,1000d904 <__alt_data_end+0xf800d904>
1000d944:	0005883a 	mov	r2,zero
1000d948:	dfc00b17 	ldw	ra,44(sp)
1000d94c:	df000a17 	ldw	fp,40(sp)
1000d950:	ddc00917 	ldw	r23,36(sp)
1000d954:	dd800817 	ldw	r22,32(sp)
1000d958:	dd400717 	ldw	r21,28(sp)
1000d95c:	dd000617 	ldw	r20,24(sp)
1000d960:	dcc00517 	ldw	r19,20(sp)
1000d964:	dc800417 	ldw	r18,16(sp)
1000d968:	dc400317 	ldw	r17,12(sp)
1000d96c:	dc000217 	ldw	r16,8(sp)
1000d970:	dec00c04 	addi	sp,sp,48
1000d974:	f800283a 	ret
1000d978:	a809883a 	mov	r4,r21
1000d97c:	800b883a 	mov	r5,r16
1000d980:	000b3f80 	call	1000b3f8 <__swsetup_r>
1000d984:	80c0030b 	ldhu	r3,12(r16)
1000d988:	103fd826 	beq	r2,zero,1000d8ec <__alt_data_end+0xf800d8ec>
1000d98c:	18c01014 	ori	r3,r3,64
1000d990:	80c0030d 	sth	r3,12(r16)
1000d994:	00c00244 	movi	r3,9
1000d998:	00bfffc4 	movi	r2,-1
1000d99c:	a8c00015 	stw	r3,0(r21)
1000d9a0:	003fe906 	br	1000d948 <__alt_data_end+0xf800d948>
1000d9a4:	8d000017 	ldw	r20,0(r17)
1000d9a8:	8c800117 	ldw	r18,4(r17)
1000d9ac:	8c400204 	addi	r17,r17,8
1000d9b0:	003fd406 	br	1000d904 <__alt_data_end+0xf800d904>
1000d9b4:	0005883a 	mov	r2,zero
1000d9b8:	f800283a 	ret
1000d9bc:	1880004c 	andi	r2,r3,1
1000d9c0:	1000301e 	bne	r2,zero,1000da84 <__sfvwrite_r+0x1ec>
1000d9c4:	002f883a 	mov	r23,zero
1000d9c8:	0025883a 	mov	r18,zero
1000d9cc:	90001c26 	beq	r18,zero,1000da40 <__sfvwrite_r+0x1a8>
1000d9d0:	1880800c 	andi	r2,r3,512
1000d9d4:	85000217 	ldw	r20,8(r16)
1000d9d8:	10006c26 	beq	r2,zero,1000db8c <__sfvwrite_r+0x2f4>
1000d9dc:	a02d883a 	mov	r22,r20
1000d9e0:	95008536 	bltu	r18,r20,1000dbf8 <__sfvwrite_r+0x360>
1000d9e4:	1881200c 	andi	r2,r3,1152
1000d9e8:	10009d1e 	bne	r2,zero,1000dc60 <__sfvwrite_r+0x3c8>
1000d9ec:	81000017 	ldw	r4,0(r16)
1000d9f0:	a039883a 	mov	fp,r20
1000d9f4:	9029883a 	mov	r20,r18
1000d9f8:	b80b883a 	mov	r5,r23
1000d9fc:	b00d883a 	mov	r6,r22
1000da00:	000e9d40 	call	1000e9d4 <memmove>
1000da04:	80c00217 	ldw	r3,8(r16)
1000da08:	81000017 	ldw	r4,0(r16)
1000da0c:	9005883a 	mov	r2,r18
1000da10:	1f39c83a 	sub	fp,r3,fp
1000da14:	258f883a 	add	r7,r4,r22
1000da18:	87000215 	stw	fp,8(r16)
1000da1c:	81c00015 	stw	r7,0(r16)
1000da20:	98c00217 	ldw	r3,8(r19)
1000da24:	b8af883a 	add	r23,r23,r2
1000da28:	90a5c83a 	sub	r18,r18,r2
1000da2c:	1d05c83a 	sub	r2,r3,r20
1000da30:	98800215 	stw	r2,8(r19)
1000da34:	103fc326 	beq	r2,zero,1000d944 <__alt_data_end+0xf800d944>
1000da38:	80c0030b 	ldhu	r3,12(r16)
1000da3c:	903fe41e 	bne	r18,zero,1000d9d0 <__alt_data_end+0xf800d9d0>
1000da40:	8dc00017 	ldw	r23,0(r17)
1000da44:	8c800117 	ldw	r18,4(r17)
1000da48:	8c400204 	addi	r17,r17,8
1000da4c:	003fdf06 	br	1000d9cc <__alt_data_end+0xf800d9cc>
1000da50:	000fc9c0 	call	1000fc9c <_realloc_r>
1000da54:	102d883a 	mov	r22,r2
1000da58:	1000a01e 	bne	r2,zero,1000dcdc <__sfvwrite_r+0x444>
1000da5c:	81400417 	ldw	r5,16(r16)
1000da60:	a809883a 	mov	r4,r21
1000da64:	000d5a80 	call	1000d5a8 <_free_r>
1000da68:	00800304 	movi	r2,12
1000da6c:	a8800015 	stw	r2,0(r21)
1000da70:	80c0030b 	ldhu	r3,12(r16)
1000da74:	00bfffc4 	movi	r2,-1
1000da78:	18c01014 	ori	r3,r3,64
1000da7c:	80c0030d 	sth	r3,12(r16)
1000da80:	003fb106 	br	1000d948 <__alt_data_end+0xf800d948>
1000da84:	0029883a 	mov	r20,zero
1000da88:	0011883a 	mov	r8,zero
1000da8c:	0039883a 	mov	fp,zero
1000da90:	0025883a 	mov	r18,zero
1000da94:	90001f26 	beq	r18,zero,1000db14 <__sfvwrite_r+0x27c>
1000da98:	40006826 	beq	r8,zero,1000dc3c <__sfvwrite_r+0x3a4>
1000da9c:	a02f883a 	mov	r23,r20
1000daa0:	9500012e 	bgeu	r18,r20,1000daa8 <__sfvwrite_r+0x210>
1000daa4:	902f883a 	mov	r23,r18
1000daa8:	81000017 	ldw	r4,0(r16)
1000daac:	80800417 	ldw	r2,16(r16)
1000dab0:	b82d883a 	mov	r22,r23
1000dab4:	81800217 	ldw	r6,8(r16)
1000dab8:	81c00517 	ldw	r7,20(r16)
1000dabc:	1100022e 	bgeu	r2,r4,1000dac8 <__sfvwrite_r+0x230>
1000dac0:	31c7883a 	add	r3,r6,r7
1000dac4:	1dc01816 	blt	r3,r23,1000db28 <__sfvwrite_r+0x290>
1000dac8:	b9c03f16 	blt	r23,r7,1000dbc8 <__sfvwrite_r+0x330>
1000dacc:	80800917 	ldw	r2,36(r16)
1000dad0:	81400717 	ldw	r5,28(r16)
1000dad4:	a809883a 	mov	r4,r21
1000dad8:	da000115 	stw	r8,4(sp)
1000dadc:	e00d883a 	mov	r6,fp
1000dae0:	103ee83a 	callr	r2
1000dae4:	102d883a 	mov	r22,r2
1000dae8:	da000117 	ldw	r8,4(sp)
1000daec:	00bfe00e 	bge	zero,r2,1000da70 <__alt_data_end+0xf800da70>
1000daf0:	a5a9c83a 	sub	r20,r20,r22
1000daf4:	a0001f26 	beq	r20,zero,1000db74 <__sfvwrite_r+0x2dc>
1000daf8:	98800217 	ldw	r2,8(r19)
1000dafc:	e5b9883a 	add	fp,fp,r22
1000db00:	95a5c83a 	sub	r18,r18,r22
1000db04:	15adc83a 	sub	r22,r2,r22
1000db08:	9d800215 	stw	r22,8(r19)
1000db0c:	b03f8d26 	beq	r22,zero,1000d944 <__alt_data_end+0xf800d944>
1000db10:	903fe11e 	bne	r18,zero,1000da98 <__alt_data_end+0xf800da98>
1000db14:	8f000017 	ldw	fp,0(r17)
1000db18:	8c800117 	ldw	r18,4(r17)
1000db1c:	0011883a 	mov	r8,zero
1000db20:	8c400204 	addi	r17,r17,8
1000db24:	003fdb06 	br	1000da94 <__alt_data_end+0xf800da94>
1000db28:	180d883a 	mov	r6,r3
1000db2c:	e00b883a 	mov	r5,fp
1000db30:	da000115 	stw	r8,4(sp)
1000db34:	d8c00015 	stw	r3,0(sp)
1000db38:	000e9d40 	call	1000e9d4 <memmove>
1000db3c:	d8c00017 	ldw	r3,0(sp)
1000db40:	80800017 	ldw	r2,0(r16)
1000db44:	a809883a 	mov	r4,r21
1000db48:	800b883a 	mov	r5,r16
1000db4c:	10c5883a 	add	r2,r2,r3
1000db50:	80800015 	stw	r2,0(r16)
1000db54:	d8c00015 	stw	r3,0(sp)
1000db58:	000ce780 	call	1000ce78 <_fflush_r>
1000db5c:	d8c00017 	ldw	r3,0(sp)
1000db60:	da000117 	ldw	r8,4(sp)
1000db64:	103fc21e 	bne	r2,zero,1000da70 <__alt_data_end+0xf800da70>
1000db68:	182d883a 	mov	r22,r3
1000db6c:	a5a9c83a 	sub	r20,r20,r22
1000db70:	a03fe11e 	bne	r20,zero,1000daf8 <__alt_data_end+0xf800daf8>
1000db74:	a809883a 	mov	r4,r21
1000db78:	800b883a 	mov	r5,r16
1000db7c:	000ce780 	call	1000ce78 <_fflush_r>
1000db80:	103fbb1e 	bne	r2,zero,1000da70 <__alt_data_end+0xf800da70>
1000db84:	0011883a 	mov	r8,zero
1000db88:	003fdb06 	br	1000daf8 <__alt_data_end+0xf800daf8>
1000db8c:	81000017 	ldw	r4,0(r16)
1000db90:	80800417 	ldw	r2,16(r16)
1000db94:	1100012e 	bgeu	r2,r4,1000db9c <__sfvwrite_r+0x304>
1000db98:	a4805a36 	bltu	r20,r18,1000dd04 <__sfvwrite_r+0x46c>
1000db9c:	81c00517 	ldw	r7,20(r16)
1000dba0:	91c01a36 	bltu	r18,r7,1000dc0c <__sfvwrite_r+0x374>
1000dba4:	80800917 	ldw	r2,36(r16)
1000dba8:	81400717 	ldw	r5,28(r16)
1000dbac:	a809883a 	mov	r4,r21
1000dbb0:	b80d883a 	mov	r6,r23
1000dbb4:	103ee83a 	callr	r2
1000dbb8:	1029883a 	mov	r20,r2
1000dbbc:	00bfac0e 	bge	zero,r2,1000da70 <__alt_data_end+0xf800da70>
1000dbc0:	a005883a 	mov	r2,r20
1000dbc4:	003f9606 	br	1000da20 <__alt_data_end+0xf800da20>
1000dbc8:	b80d883a 	mov	r6,r23
1000dbcc:	e00b883a 	mov	r5,fp
1000dbd0:	da000115 	stw	r8,4(sp)
1000dbd4:	000e9d40 	call	1000e9d4 <memmove>
1000dbd8:	80800217 	ldw	r2,8(r16)
1000dbdc:	80c00017 	ldw	r3,0(r16)
1000dbe0:	da000117 	ldw	r8,4(sp)
1000dbe4:	15c5c83a 	sub	r2,r2,r23
1000dbe8:	1def883a 	add	r23,r3,r23
1000dbec:	80800215 	stw	r2,8(r16)
1000dbf0:	85c00015 	stw	r23,0(r16)
1000dbf4:	003fbe06 	br	1000daf0 <__alt_data_end+0xf800daf0>
1000dbf8:	81000017 	ldw	r4,0(r16)
1000dbfc:	9039883a 	mov	fp,r18
1000dc00:	9029883a 	mov	r20,r18
1000dc04:	902d883a 	mov	r22,r18
1000dc08:	003f7b06 	br	1000d9f8 <__alt_data_end+0xf800d9f8>
1000dc0c:	b80b883a 	mov	r5,r23
1000dc10:	900d883a 	mov	r6,r18
1000dc14:	000e9d40 	call	1000e9d4 <memmove>
1000dc18:	80c00217 	ldw	r3,8(r16)
1000dc1c:	80800017 	ldw	r2,0(r16)
1000dc20:	9029883a 	mov	r20,r18
1000dc24:	1c87c83a 	sub	r3,r3,r18
1000dc28:	1485883a 	add	r2,r2,r18
1000dc2c:	80800015 	stw	r2,0(r16)
1000dc30:	80c00215 	stw	r3,8(r16)
1000dc34:	9005883a 	mov	r2,r18
1000dc38:	003f7906 	br	1000da20 <__alt_data_end+0xf800da20>
1000dc3c:	e009883a 	mov	r4,fp
1000dc40:	01400284 	movi	r5,10
1000dc44:	900d883a 	mov	r6,r18
1000dc48:	000e8ec0 	call	1000e8ec <memchr>
1000dc4c:	10003826 	beq	r2,zero,1000dd30 <__sfvwrite_r+0x498>
1000dc50:	10800044 	addi	r2,r2,1
1000dc54:	1729c83a 	sub	r20,r2,fp
1000dc58:	02000044 	movi	r8,1
1000dc5c:	003f8f06 	br	1000da9c <__alt_data_end+0xf800da9c>
1000dc60:	80800517 	ldw	r2,20(r16)
1000dc64:	81400417 	ldw	r5,16(r16)
1000dc68:	87000017 	ldw	fp,0(r16)
1000dc6c:	10a9883a 	add	r20,r2,r2
1000dc70:	a085883a 	add	r2,r20,r2
1000dc74:	1028d7fa 	srli	r20,r2,31
1000dc78:	e179c83a 	sub	fp,fp,r5
1000dc7c:	e1000044 	addi	r4,fp,1
1000dc80:	a085883a 	add	r2,r20,r2
1000dc84:	1029d07a 	srai	r20,r2,1
1000dc88:	2485883a 	add	r2,r4,r18
1000dc8c:	a00d883a 	mov	r6,r20
1000dc90:	a080022e 	bgeu	r20,r2,1000dc9c <__sfvwrite_r+0x404>
1000dc94:	1029883a 	mov	r20,r2
1000dc98:	100d883a 	mov	r6,r2
1000dc9c:	18c1000c 	andi	r3,r3,1024
1000dca0:	a809883a 	mov	r4,r21
1000dca4:	183f6a26 	beq	r3,zero,1000da50 <__alt_data_end+0xf800da50>
1000dca8:	300b883a 	mov	r5,r6
1000dcac:	000e1440 	call	1000e144 <_malloc_r>
1000dcb0:	102d883a 	mov	r22,r2
1000dcb4:	103f6c26 	beq	r2,zero,1000da68 <__alt_data_end+0xf800da68>
1000dcb8:	81400417 	ldw	r5,16(r16)
1000dcbc:	1009883a 	mov	r4,r2
1000dcc0:	e00d883a 	mov	r6,fp
1000dcc4:	0008f580 	call	10008f58 <memcpy>
1000dcc8:	8080030b 	ldhu	r2,12(r16)
1000dccc:	00fedfc4 	movi	r3,-1153
1000dcd0:	10c4703a 	and	r2,r2,r3
1000dcd4:	10802014 	ori	r2,r2,128
1000dcd8:	8080030d 	sth	r2,12(r16)
1000dcdc:	b709883a 	add	r4,r22,fp
1000dce0:	a707c83a 	sub	r3,r20,fp
1000dce4:	85800415 	stw	r22,16(r16)
1000dce8:	85000515 	stw	r20,20(r16)
1000dcec:	81000015 	stw	r4,0(r16)
1000dcf0:	9039883a 	mov	fp,r18
1000dcf4:	80c00215 	stw	r3,8(r16)
1000dcf8:	9029883a 	mov	r20,r18
1000dcfc:	902d883a 	mov	r22,r18
1000dd00:	003f3d06 	br	1000d9f8 <__alt_data_end+0xf800d9f8>
1000dd04:	b80b883a 	mov	r5,r23
1000dd08:	a00d883a 	mov	r6,r20
1000dd0c:	000e9d40 	call	1000e9d4 <memmove>
1000dd10:	80800017 	ldw	r2,0(r16)
1000dd14:	a809883a 	mov	r4,r21
1000dd18:	800b883a 	mov	r5,r16
1000dd1c:	1505883a 	add	r2,r2,r20
1000dd20:	80800015 	stw	r2,0(r16)
1000dd24:	000ce780 	call	1000ce78 <_fflush_r>
1000dd28:	103fa526 	beq	r2,zero,1000dbc0 <__alt_data_end+0xf800dbc0>
1000dd2c:	003f5006 	br	1000da70 <__alt_data_end+0xf800da70>
1000dd30:	95000044 	addi	r20,r18,1
1000dd34:	02000044 	movi	r8,1
1000dd38:	003f5806 	br	1000da9c <__alt_data_end+0xf800da9c>

1000dd3c <_fwalk>:
1000dd3c:	defff804 	addi	sp,sp,-32
1000dd40:	dd400515 	stw	r21,20(sp)
1000dd44:	2540b804 	addi	r21,r4,736
1000dd48:	dd800615 	stw	r22,24(sp)
1000dd4c:	dd000415 	stw	r20,16(sp)
1000dd50:	dfc00715 	stw	ra,28(sp)
1000dd54:	dcc00315 	stw	r19,12(sp)
1000dd58:	dc800215 	stw	r18,8(sp)
1000dd5c:	dc400115 	stw	r17,4(sp)
1000dd60:	dc000015 	stw	r16,0(sp)
1000dd64:	2829883a 	mov	r20,r5
1000dd68:	002d883a 	mov	r22,zero
1000dd6c:	000d4440 	call	1000d444 <__sfp_lock_acquire>
1000dd70:	a8001426 	beq	r21,zero,1000ddc4 <_fwalk+0x88>
1000dd74:	04ffffc4 	movi	r19,-1
1000dd78:	ac400117 	ldw	r17,4(r21)
1000dd7c:	ac800217 	ldw	r18,8(r21)
1000dd80:	8c7fffc4 	addi	r17,r17,-1
1000dd84:	88000d16 	blt	r17,zero,1000ddbc <_fwalk+0x80>
1000dd88:	94000304 	addi	r16,r18,12
1000dd8c:	94800384 	addi	r18,r18,14
1000dd90:	80c0000f 	ldh	r3,0(r16)
1000dd94:	8c7fffc4 	addi	r17,r17,-1
1000dd98:	813ffd04 	addi	r4,r16,-12
1000dd9c:	18000426 	beq	r3,zero,1000ddb0 <_fwalk+0x74>
1000dda0:	90c0000f 	ldh	r3,0(r18)
1000dda4:	1cc00226 	beq	r3,r19,1000ddb0 <_fwalk+0x74>
1000dda8:	a03ee83a 	callr	r20
1000ddac:	b0acb03a 	or	r22,r22,r2
1000ddb0:	84001a04 	addi	r16,r16,104
1000ddb4:	94801a04 	addi	r18,r18,104
1000ddb8:	8cfff51e 	bne	r17,r19,1000dd90 <__alt_data_end+0xf800dd90>
1000ddbc:	ad400017 	ldw	r21,0(r21)
1000ddc0:	a83fed1e 	bne	r21,zero,1000dd78 <__alt_data_end+0xf800dd78>
1000ddc4:	000d4480 	call	1000d448 <__sfp_lock_release>
1000ddc8:	b005883a 	mov	r2,r22
1000ddcc:	dfc00717 	ldw	ra,28(sp)
1000ddd0:	dd800617 	ldw	r22,24(sp)
1000ddd4:	dd400517 	ldw	r21,20(sp)
1000ddd8:	dd000417 	ldw	r20,16(sp)
1000dddc:	dcc00317 	ldw	r19,12(sp)
1000dde0:	dc800217 	ldw	r18,8(sp)
1000dde4:	dc400117 	ldw	r17,4(sp)
1000dde8:	dc000017 	ldw	r16,0(sp)
1000ddec:	dec00804 	addi	sp,sp,32
1000ddf0:	f800283a 	ret

1000ddf4 <_fwalk_reent>:
1000ddf4:	defff804 	addi	sp,sp,-32
1000ddf8:	dd400515 	stw	r21,20(sp)
1000ddfc:	2540b804 	addi	r21,r4,736
1000de00:	dd800615 	stw	r22,24(sp)
1000de04:	dd000415 	stw	r20,16(sp)
1000de08:	dcc00315 	stw	r19,12(sp)
1000de0c:	dfc00715 	stw	ra,28(sp)
1000de10:	dc800215 	stw	r18,8(sp)
1000de14:	dc400115 	stw	r17,4(sp)
1000de18:	dc000015 	stw	r16,0(sp)
1000de1c:	2027883a 	mov	r19,r4
1000de20:	2829883a 	mov	r20,r5
1000de24:	002d883a 	mov	r22,zero
1000de28:	000d4440 	call	1000d444 <__sfp_lock_acquire>
1000de2c:	a8001326 	beq	r21,zero,1000de7c <_fwalk_reent+0x88>
1000de30:	04bfffc4 	movi	r18,-1
1000de34:	ac400117 	ldw	r17,4(r21)
1000de38:	ac000217 	ldw	r16,8(r21)
1000de3c:	8c7fffc4 	addi	r17,r17,-1
1000de40:	88000c16 	blt	r17,zero,1000de74 <_fwalk_reent+0x80>
1000de44:	84000304 	addi	r16,r16,12
1000de48:	80c0000f 	ldh	r3,0(r16)
1000de4c:	8c7fffc4 	addi	r17,r17,-1
1000de50:	817ffd04 	addi	r5,r16,-12
1000de54:	18000526 	beq	r3,zero,1000de6c <_fwalk_reent+0x78>
1000de58:	80c0008f 	ldh	r3,2(r16)
1000de5c:	9809883a 	mov	r4,r19
1000de60:	1c800226 	beq	r3,r18,1000de6c <_fwalk_reent+0x78>
1000de64:	a03ee83a 	callr	r20
1000de68:	b0acb03a 	or	r22,r22,r2
1000de6c:	84001a04 	addi	r16,r16,104
1000de70:	8cbff51e 	bne	r17,r18,1000de48 <__alt_data_end+0xf800de48>
1000de74:	ad400017 	ldw	r21,0(r21)
1000de78:	a83fee1e 	bne	r21,zero,1000de34 <__alt_data_end+0xf800de34>
1000de7c:	000d4480 	call	1000d448 <__sfp_lock_release>
1000de80:	b005883a 	mov	r2,r22
1000de84:	dfc00717 	ldw	ra,28(sp)
1000de88:	dd800617 	ldw	r22,24(sp)
1000de8c:	dd400517 	ldw	r21,20(sp)
1000de90:	dd000417 	ldw	r20,16(sp)
1000de94:	dcc00317 	ldw	r19,12(sp)
1000de98:	dc800217 	ldw	r18,8(sp)
1000de9c:	dc400117 	ldw	r17,4(sp)
1000dea0:	dc000017 	ldw	r16,0(sp)
1000dea4:	dec00804 	addi	sp,sp,32
1000dea8:	f800283a 	ret

1000deac <_setlocale_r>:
1000deac:	30001b26 	beq	r6,zero,1000df1c <_setlocale_r+0x70>
1000deb0:	014400b4 	movhi	r5,4098
1000deb4:	defffe04 	addi	sp,sp,-8
1000deb8:	2964be04 	addi	r5,r5,-27912
1000debc:	3009883a 	mov	r4,r6
1000dec0:	dc000015 	stw	r16,0(sp)
1000dec4:	dfc00115 	stw	ra,4(sp)
1000dec8:	3021883a 	mov	r16,r6
1000decc:	00104400 	call	10010440 <strcmp>
1000ded0:	1000061e 	bne	r2,zero,1000deec <_setlocale_r+0x40>
1000ded4:	008400b4 	movhi	r2,4098
1000ded8:	10a4bd04 	addi	r2,r2,-27916
1000dedc:	dfc00117 	ldw	ra,4(sp)
1000dee0:	dc000017 	ldw	r16,0(sp)
1000dee4:	dec00204 	addi	sp,sp,8
1000dee8:	f800283a 	ret
1000deec:	014400b4 	movhi	r5,4098
1000def0:	2964bd04 	addi	r5,r5,-27916
1000def4:	8009883a 	mov	r4,r16
1000def8:	00104400 	call	10010440 <strcmp>
1000defc:	103ff526 	beq	r2,zero,1000ded4 <__alt_data_end+0xf800ded4>
1000df00:	014400b4 	movhi	r5,4098
1000df04:	2964a804 	addi	r5,r5,-28000
1000df08:	8009883a 	mov	r4,r16
1000df0c:	00104400 	call	10010440 <strcmp>
1000df10:	103ff026 	beq	r2,zero,1000ded4 <__alt_data_end+0xf800ded4>
1000df14:	0005883a 	mov	r2,zero
1000df18:	003ff006 	br	1000dedc <__alt_data_end+0xf800dedc>
1000df1c:	008400b4 	movhi	r2,4098
1000df20:	10a4bd04 	addi	r2,r2,-27916
1000df24:	f800283a 	ret

1000df28 <__locale_charset>:
1000df28:	008400b4 	movhi	r2,4098
1000df2c:	10a63004 	addi	r2,r2,-26432
1000df30:	f800283a 	ret

1000df34 <__locale_mb_cur_max>:
1000df34:	008400b4 	movhi	r2,4098
1000df38:	10abcc04 	addi	r2,r2,-20688
1000df3c:	10800017 	ldw	r2,0(r2)
1000df40:	f800283a 	ret

1000df44 <__locale_msgcharset>:
1000df44:	008400b4 	movhi	r2,4098
1000df48:	10a62804 	addi	r2,r2,-26464
1000df4c:	f800283a 	ret

1000df50 <__locale_cjk_lang>:
1000df50:	0005883a 	mov	r2,zero
1000df54:	f800283a 	ret

1000df58 <_localeconv_r>:
1000df58:	008400b4 	movhi	r2,4098
1000df5c:	10a63804 	addi	r2,r2,-26400
1000df60:	f800283a 	ret

1000df64 <setlocale>:
1000df64:	00c400b4 	movhi	r3,4098
1000df68:	18ebcb04 	addi	r3,r3,-20692
1000df6c:	2005883a 	mov	r2,r4
1000df70:	19000017 	ldw	r4,0(r3)
1000df74:	280d883a 	mov	r6,r5
1000df78:	100b883a 	mov	r5,r2
1000df7c:	000deac1 	jmpi	1000deac <_setlocale_r>

1000df80 <localeconv>:
1000df80:	008400b4 	movhi	r2,4098
1000df84:	10a63804 	addi	r2,r2,-26400
1000df88:	f800283a 	ret

1000df8c <__smakebuf_r>:
1000df8c:	2880030b 	ldhu	r2,12(r5)
1000df90:	10c0008c 	andi	r3,r2,2
1000df94:	1800401e 	bne	r3,zero,1000e098 <__smakebuf_r+0x10c>
1000df98:	deffec04 	addi	sp,sp,-80
1000df9c:	dc000f15 	stw	r16,60(sp)
1000dfa0:	2821883a 	mov	r16,r5
1000dfa4:	2940038f 	ldh	r5,14(r5)
1000dfa8:	dc401015 	stw	r17,64(sp)
1000dfac:	dfc01315 	stw	ra,76(sp)
1000dfb0:	dcc01215 	stw	r19,72(sp)
1000dfb4:	dc801115 	stw	r18,68(sp)
1000dfb8:	2023883a 	mov	r17,r4
1000dfbc:	28001b16 	blt	r5,zero,1000e02c <__smakebuf_r+0xa0>
1000dfc0:	d80d883a 	mov	r6,sp
1000dfc4:	0011eb80 	call	10011eb8 <_fstat_r>
1000dfc8:	10001716 	blt	r2,zero,1000e028 <__smakebuf_r+0x9c>
1000dfcc:	d8800117 	ldw	r2,4(sp)
1000dfd0:	00e00014 	movui	r3,32768
1000dfd4:	10bc000c 	andi	r2,r2,61440
1000dfd8:	10c03726 	beq	r2,r3,1000e0b8 <__smakebuf_r+0x12c>
1000dfdc:	80c0030b 	ldhu	r3,12(r16)
1000dfe0:	18c20014 	ori	r3,r3,2048
1000dfe4:	80c0030d 	sth	r3,12(r16)
1000dfe8:	00c80004 	movi	r3,8192
1000dfec:	10c03c1e 	bne	r2,r3,1000e0e0 <__smakebuf_r+0x154>
1000dff0:	8140038f 	ldh	r5,14(r16)
1000dff4:	8809883a 	mov	r4,r17
1000dff8:	0011f100 	call	10011f10 <_isatty_r>
1000dffc:	10004e26 	beq	r2,zero,1000e138 <__smakebuf_r+0x1ac>
1000e000:	8080030b 	ldhu	r2,12(r16)
1000e004:	04c00044 	movi	r19,1
1000e008:	80c010c4 	addi	r3,r16,67
1000e00c:	14c4b03a 	or	r2,r2,r19
1000e010:	8080030d 	sth	r2,12(r16)
1000e014:	80c00015 	stw	r3,0(r16)
1000e018:	80c00415 	stw	r3,16(r16)
1000e01c:	84c00515 	stw	r19,20(r16)
1000e020:	04810004 	movi	r18,1024
1000e024:	00000706 	br	1000e044 <__smakebuf_r+0xb8>
1000e028:	8080030b 	ldhu	r2,12(r16)
1000e02c:	10c0200c 	andi	r3,r2,128
1000e030:	18001f1e 	bne	r3,zero,1000e0b0 <__smakebuf_r+0x124>
1000e034:	04810004 	movi	r18,1024
1000e038:	10820014 	ori	r2,r2,2048
1000e03c:	8080030d 	sth	r2,12(r16)
1000e040:	0027883a 	mov	r19,zero
1000e044:	8809883a 	mov	r4,r17
1000e048:	900b883a 	mov	r5,r18
1000e04c:	000e1440 	call	1000e144 <_malloc_r>
1000e050:	10002e26 	beq	r2,zero,1000e10c <__smakebuf_r+0x180>
1000e054:	80c0030b 	ldhu	r3,12(r16)
1000e058:	01040074 	movhi	r4,4097
1000e05c:	21343804 	addi	r4,r4,-12064
1000e060:	89000f15 	stw	r4,60(r17)
1000e064:	18c02014 	ori	r3,r3,128
1000e068:	80c0030d 	sth	r3,12(r16)
1000e06c:	80800015 	stw	r2,0(r16)
1000e070:	80800415 	stw	r2,16(r16)
1000e074:	84800515 	stw	r18,20(r16)
1000e078:	98001c1e 	bne	r19,zero,1000e0ec <__smakebuf_r+0x160>
1000e07c:	dfc01317 	ldw	ra,76(sp)
1000e080:	dcc01217 	ldw	r19,72(sp)
1000e084:	dc801117 	ldw	r18,68(sp)
1000e088:	dc401017 	ldw	r17,64(sp)
1000e08c:	dc000f17 	ldw	r16,60(sp)
1000e090:	dec01404 	addi	sp,sp,80
1000e094:	f800283a 	ret
1000e098:	288010c4 	addi	r2,r5,67
1000e09c:	28800015 	stw	r2,0(r5)
1000e0a0:	28800415 	stw	r2,16(r5)
1000e0a4:	00800044 	movi	r2,1
1000e0a8:	28800515 	stw	r2,20(r5)
1000e0ac:	f800283a 	ret
1000e0b0:	04801004 	movi	r18,64
1000e0b4:	003fe006 	br	1000e038 <__alt_data_end+0xf800e038>
1000e0b8:	81000a17 	ldw	r4,40(r16)
1000e0bc:	00c40074 	movhi	r3,4097
1000e0c0:	18c0f704 	addi	r3,r3,988
1000e0c4:	20ffc51e 	bne	r4,r3,1000dfdc <__alt_data_end+0xf800dfdc>
1000e0c8:	80c0030b 	ldhu	r3,12(r16)
1000e0cc:	01010004 	movi	r4,1024
1000e0d0:	81001315 	stw	r4,76(r16)
1000e0d4:	1906b03a 	or	r3,r3,r4
1000e0d8:	80c0030d 	sth	r3,12(r16)
1000e0dc:	003fc206 	br	1000dfe8 <__alt_data_end+0xf800dfe8>
1000e0e0:	0027883a 	mov	r19,zero
1000e0e4:	04810004 	movi	r18,1024
1000e0e8:	003fd606 	br	1000e044 <__alt_data_end+0xf800e044>
1000e0ec:	8140038f 	ldh	r5,14(r16)
1000e0f0:	8809883a 	mov	r4,r17
1000e0f4:	0011f100 	call	10011f10 <_isatty_r>
1000e0f8:	103fe026 	beq	r2,zero,1000e07c <__alt_data_end+0xf800e07c>
1000e0fc:	8080030b 	ldhu	r2,12(r16)
1000e100:	10800054 	ori	r2,r2,1
1000e104:	8080030d 	sth	r2,12(r16)
1000e108:	003fdc06 	br	1000e07c <__alt_data_end+0xf800e07c>
1000e10c:	8080030b 	ldhu	r2,12(r16)
1000e110:	10c0800c 	andi	r3,r2,512
1000e114:	183fd91e 	bne	r3,zero,1000e07c <__alt_data_end+0xf800e07c>
1000e118:	10800094 	ori	r2,r2,2
1000e11c:	80c010c4 	addi	r3,r16,67
1000e120:	8080030d 	sth	r2,12(r16)
1000e124:	00800044 	movi	r2,1
1000e128:	80c00015 	stw	r3,0(r16)
1000e12c:	80c00415 	stw	r3,16(r16)
1000e130:	80800515 	stw	r2,20(r16)
1000e134:	003fd106 	br	1000e07c <__alt_data_end+0xf800e07c>
1000e138:	04c00044 	movi	r19,1
1000e13c:	04810004 	movi	r18,1024
1000e140:	003fc006 	br	1000e044 <__alt_data_end+0xf800e044>

1000e144 <_malloc_r>:
1000e144:	defff504 	addi	sp,sp,-44
1000e148:	dc800315 	stw	r18,12(sp)
1000e14c:	dfc00a15 	stw	ra,40(sp)
1000e150:	df000915 	stw	fp,36(sp)
1000e154:	ddc00815 	stw	r23,32(sp)
1000e158:	dd800715 	stw	r22,28(sp)
1000e15c:	dd400615 	stw	r21,24(sp)
1000e160:	dd000515 	stw	r20,20(sp)
1000e164:	dcc00415 	stw	r19,16(sp)
1000e168:	dc400215 	stw	r17,8(sp)
1000e16c:	dc000115 	stw	r16,4(sp)
1000e170:	288002c4 	addi	r2,r5,11
1000e174:	00c00584 	movi	r3,22
1000e178:	2025883a 	mov	r18,r4
1000e17c:	18802a2e 	bgeu	r3,r2,1000e228 <_malloc_r+0xe4>
1000e180:	047ffe04 	movi	r17,-8
1000e184:	1462703a 	and	r17,r2,r17
1000e188:	88009e16 	blt	r17,zero,1000e404 <_malloc_r+0x2c0>
1000e18c:	89409d36 	bltu	r17,r5,1000e404 <_malloc_r+0x2c0>
1000e190:	0014d380 	call	10014d38 <__malloc_lock>
1000e194:	00807dc4 	movi	r2,503
1000e198:	14402736 	bltu	r2,r17,1000e238 <_malloc_r+0xf4>
1000e19c:	8806d0fa 	srli	r3,r17,3
1000e1a0:	04c400b4 	movhi	r19,4098
1000e1a4:	9ce64604 	addi	r19,r19,-26344
1000e1a8:	18c5883a 	add	r2,r3,r3
1000e1ac:	1085883a 	add	r2,r2,r2
1000e1b0:	1085883a 	add	r2,r2,r2
1000e1b4:	9885883a 	add	r2,r19,r2
1000e1b8:	14000317 	ldw	r16,12(r2)
1000e1bc:	80814a26 	beq	r16,r2,1000e6e8 <_malloc_r+0x5a4>
1000e1c0:	80c00117 	ldw	r3,4(r16)
1000e1c4:	81000317 	ldw	r4,12(r16)
1000e1c8:	00bfff04 	movi	r2,-4
1000e1cc:	1884703a 	and	r2,r3,r2
1000e1d0:	81400217 	ldw	r5,8(r16)
1000e1d4:	8085883a 	add	r2,r16,r2
1000e1d8:	10c00117 	ldw	r3,4(r2)
1000e1dc:	29000315 	stw	r4,12(r5)
1000e1e0:	21400215 	stw	r5,8(r4)
1000e1e4:	18c00054 	ori	r3,r3,1
1000e1e8:	10c00115 	stw	r3,4(r2)
1000e1ec:	9009883a 	mov	r4,r18
1000e1f0:	0014d5c0 	call	10014d5c <__malloc_unlock>
1000e1f4:	80800204 	addi	r2,r16,8
1000e1f8:	dfc00a17 	ldw	ra,40(sp)
1000e1fc:	df000917 	ldw	fp,36(sp)
1000e200:	ddc00817 	ldw	r23,32(sp)
1000e204:	dd800717 	ldw	r22,28(sp)
1000e208:	dd400617 	ldw	r21,24(sp)
1000e20c:	dd000517 	ldw	r20,20(sp)
1000e210:	dcc00417 	ldw	r19,16(sp)
1000e214:	dc800317 	ldw	r18,12(sp)
1000e218:	dc400217 	ldw	r17,8(sp)
1000e21c:	dc000117 	ldw	r16,4(sp)
1000e220:	dec00b04 	addi	sp,sp,44
1000e224:	f800283a 	ret
1000e228:	04400404 	movi	r17,16
1000e22c:	89407536 	bltu	r17,r5,1000e404 <_malloc_r+0x2c0>
1000e230:	0014d380 	call	10014d38 <__malloc_lock>
1000e234:	003fd906 	br	1000e19c <__alt_data_end+0xf800e19c>
1000e238:	8806d27a 	srli	r3,r17,9
1000e23c:	18007526 	beq	r3,zero,1000e414 <_malloc_r+0x2d0>
1000e240:	00800104 	movi	r2,4
1000e244:	10c0ef36 	bltu	r2,r3,1000e604 <_malloc_r+0x4c0>
1000e248:	8806d1ba 	srli	r3,r17,6
1000e24c:	19c00e04 	addi	r7,r3,56
1000e250:	39cb883a 	add	r5,r7,r7
1000e254:	04c400b4 	movhi	r19,4098
1000e258:	294b883a 	add	r5,r5,r5
1000e25c:	9ce64604 	addi	r19,r19,-26344
1000e260:	294b883a 	add	r5,r5,r5
1000e264:	994b883a 	add	r5,r19,r5
1000e268:	2c000317 	ldw	r16,12(r5)
1000e26c:	2c000e26 	beq	r5,r16,1000e2a8 <_malloc_r+0x164>
1000e270:	80800117 	ldw	r2,4(r16)
1000e274:	01bfff04 	movi	r6,-4
1000e278:	010003c4 	movi	r4,15
1000e27c:	1184703a 	and	r2,r2,r6
1000e280:	1447c83a 	sub	r3,r2,r17
1000e284:	20c00716 	blt	r4,r3,1000e2a4 <_malloc_r+0x160>
1000e288:	1800650e 	bge	r3,zero,1000e420 <_malloc_r+0x2dc>
1000e28c:	84000317 	ldw	r16,12(r16)
1000e290:	2c000526 	beq	r5,r16,1000e2a8 <_malloc_r+0x164>
1000e294:	80800117 	ldw	r2,4(r16)
1000e298:	1184703a 	and	r2,r2,r6
1000e29c:	1447c83a 	sub	r3,r2,r17
1000e2a0:	20fff90e 	bge	r4,r3,1000e288 <__alt_data_end+0xf800e288>
1000e2a4:	39ffffc4 	addi	r7,r7,-1
1000e2a8:	38c00044 	addi	r3,r7,1
1000e2ac:	018400b4 	movhi	r6,4098
1000e2b0:	9c000417 	ldw	r16,16(r19)
1000e2b4:	31a64604 	addi	r6,r6,-26344
1000e2b8:	32400204 	addi	r9,r6,8
1000e2bc:	82410326 	beq	r16,r9,1000e6cc <_malloc_r+0x588>
1000e2c0:	81000117 	ldw	r4,4(r16)
1000e2c4:	00bfff04 	movi	r2,-4
1000e2c8:	208e703a 	and	r7,r4,r2
1000e2cc:	3c45c83a 	sub	r2,r7,r17
1000e2d0:	010003c4 	movi	r4,15
1000e2d4:	2080ee16 	blt	r4,r2,1000e690 <_malloc_r+0x54c>
1000e2d8:	32400515 	stw	r9,20(r6)
1000e2dc:	32400415 	stw	r9,16(r6)
1000e2e0:	1000510e 	bge	r2,zero,1000e428 <_malloc_r+0x2e4>
1000e2e4:	00807fc4 	movi	r2,511
1000e2e8:	11c0ce36 	bltu	r2,r7,1000e624 <_malloc_r+0x4e0>
1000e2ec:	3808d0fa 	srli	r4,r7,3
1000e2f0:	01c00044 	movi	r7,1
1000e2f4:	30800117 	ldw	r2,4(r6)
1000e2f8:	210b883a 	add	r5,r4,r4
1000e2fc:	294b883a 	add	r5,r5,r5
1000e300:	2009d0ba 	srai	r4,r4,2
1000e304:	294b883a 	add	r5,r5,r5
1000e308:	298b883a 	add	r5,r5,r6
1000e30c:	2a000217 	ldw	r8,8(r5)
1000e310:	3908983a 	sll	r4,r7,r4
1000e314:	81400315 	stw	r5,12(r16)
1000e318:	82000215 	stw	r8,8(r16)
1000e31c:	2088b03a 	or	r4,r4,r2
1000e320:	2c000215 	stw	r16,8(r5)
1000e324:	31000115 	stw	r4,4(r6)
1000e328:	44000315 	stw	r16,12(r8)
1000e32c:	1805d0ba 	srai	r2,r3,2
1000e330:	01400044 	movi	r5,1
1000e334:	288a983a 	sll	r5,r5,r2
1000e338:	21404336 	bltu	r4,r5,1000e448 <_malloc_r+0x304>
1000e33c:	2144703a 	and	r2,r4,r5
1000e340:	10000a1e 	bne	r2,zero,1000e36c <_malloc_r+0x228>
1000e344:	00bfff04 	movi	r2,-4
1000e348:	294b883a 	add	r5,r5,r5
1000e34c:	1886703a 	and	r3,r3,r2
1000e350:	2144703a 	and	r2,r4,r5
1000e354:	18c00104 	addi	r3,r3,4
1000e358:	1000041e 	bne	r2,zero,1000e36c <_malloc_r+0x228>
1000e35c:	294b883a 	add	r5,r5,r5
1000e360:	2144703a 	and	r2,r4,r5
1000e364:	18c00104 	addi	r3,r3,4
1000e368:	103ffc26 	beq	r2,zero,1000e35c <__alt_data_end+0xf800e35c>
1000e36c:	023fff04 	movi	r8,-4
1000e370:	01c003c4 	movi	r7,15
1000e374:	18c5883a 	add	r2,r3,r3
1000e378:	1085883a 	add	r2,r2,r2
1000e37c:	1085883a 	add	r2,r2,r2
1000e380:	9895883a 	add	r10,r19,r2
1000e384:	52c00304 	addi	r11,r10,12
1000e388:	1819883a 	mov	r12,r3
1000e38c:	5c000017 	ldw	r16,0(r11)
1000e390:	59bffd04 	addi	r6,r11,-12
1000e394:	8180041e 	bne	r16,r6,1000e3a8 <_malloc_r+0x264>
1000e398:	0000ce06 	br	1000e6d4 <_malloc_r+0x590>
1000e39c:	2000d70e 	bge	r4,zero,1000e6fc <_malloc_r+0x5b8>
1000e3a0:	84000317 	ldw	r16,12(r16)
1000e3a4:	8180cb26 	beq	r16,r6,1000e6d4 <_malloc_r+0x590>
1000e3a8:	80800117 	ldw	r2,4(r16)
1000e3ac:	1204703a 	and	r2,r2,r8
1000e3b0:	1449c83a 	sub	r4,r2,r17
1000e3b4:	393ff90e 	bge	r7,r4,1000e39c <__alt_data_end+0xf800e39c>
1000e3b8:	80800317 	ldw	r2,12(r16)
1000e3bc:	80c00217 	ldw	r3,8(r16)
1000e3c0:	89400054 	ori	r5,r17,1
1000e3c4:	81400115 	stw	r5,4(r16)
1000e3c8:	18800315 	stw	r2,12(r3)
1000e3cc:	10c00215 	stw	r3,8(r2)
1000e3d0:	8463883a 	add	r17,r16,r17
1000e3d4:	9c400515 	stw	r17,20(r19)
1000e3d8:	9c400415 	stw	r17,16(r19)
1000e3dc:	20800054 	ori	r2,r4,1
1000e3e0:	88800115 	stw	r2,4(r17)
1000e3e4:	8a400315 	stw	r9,12(r17)
1000e3e8:	8a400215 	stw	r9,8(r17)
1000e3ec:	8923883a 	add	r17,r17,r4
1000e3f0:	89000015 	stw	r4,0(r17)
1000e3f4:	9009883a 	mov	r4,r18
1000e3f8:	0014d5c0 	call	10014d5c <__malloc_unlock>
1000e3fc:	80800204 	addi	r2,r16,8
1000e400:	003f7d06 	br	1000e1f8 <__alt_data_end+0xf800e1f8>
1000e404:	00800304 	movi	r2,12
1000e408:	90800015 	stw	r2,0(r18)
1000e40c:	0005883a 	mov	r2,zero
1000e410:	003f7906 	br	1000e1f8 <__alt_data_end+0xf800e1f8>
1000e414:	01401f84 	movi	r5,126
1000e418:	01c00fc4 	movi	r7,63
1000e41c:	003f8d06 	br	1000e254 <__alt_data_end+0xf800e254>
1000e420:	81000317 	ldw	r4,12(r16)
1000e424:	003f6a06 	br	1000e1d0 <__alt_data_end+0xf800e1d0>
1000e428:	81c5883a 	add	r2,r16,r7
1000e42c:	10c00117 	ldw	r3,4(r2)
1000e430:	9009883a 	mov	r4,r18
1000e434:	18c00054 	ori	r3,r3,1
1000e438:	10c00115 	stw	r3,4(r2)
1000e43c:	0014d5c0 	call	10014d5c <__malloc_unlock>
1000e440:	80800204 	addi	r2,r16,8
1000e444:	003f6c06 	br	1000e1f8 <__alt_data_end+0xf800e1f8>
1000e448:	9c000217 	ldw	r16,8(r19)
1000e44c:	00bfff04 	movi	r2,-4
1000e450:	85800117 	ldw	r22,4(r16)
1000e454:	b0ac703a 	and	r22,r22,r2
1000e458:	b4400336 	bltu	r22,r17,1000e468 <_malloc_r+0x324>
1000e45c:	b445c83a 	sub	r2,r22,r17
1000e460:	00c003c4 	movi	r3,15
1000e464:	18805d16 	blt	r3,r2,1000e5dc <_malloc_r+0x498>
1000e468:	05c400b4 	movhi	r23,4098
1000e46c:	008400b4 	movhi	r2,4098
1000e470:	bdebcd04 	addi	r23,r23,-20684
1000e474:	10b29b04 	addi	r2,r2,-13716
1000e478:	15400017 	ldw	r21,0(r2)
1000e47c:	b9000017 	ldw	r4,0(r23)
1000e480:	00ffffc4 	movi	r3,-1
1000e484:	858d883a 	add	r6,r16,r22
1000e488:	8d6b883a 	add	r21,r17,r21
1000e48c:	20c0e426 	beq	r4,r3,1000e820 <_malloc_r+0x6dc>
1000e490:	ad4403c4 	addi	r21,r21,4111
1000e494:	00fc0004 	movi	r3,-4096
1000e498:	a8ea703a 	and	r21,r21,r3
1000e49c:	9009883a 	mov	r4,r18
1000e4a0:	a80b883a 	mov	r5,r21
1000e4a4:	d9800015 	stw	r6,0(sp)
1000e4a8:	00102b00 	call	100102b0 <_sbrk_r>
1000e4ac:	00ffffc4 	movi	r3,-1
1000e4b0:	1029883a 	mov	r20,r2
1000e4b4:	d9800017 	ldw	r6,0(sp)
1000e4b8:	10c0a426 	beq	r2,r3,1000e74c <_malloc_r+0x608>
1000e4bc:	1180a236 	bltu	r2,r6,1000e748 <_malloc_r+0x604>
1000e4c0:	070400b4 	movhi	fp,4098
1000e4c4:	e732a304 	addi	fp,fp,-13684
1000e4c8:	e0c00017 	ldw	r3,0(fp)
1000e4cc:	a8c7883a 	add	r3,r21,r3
1000e4d0:	e0c00015 	stw	r3,0(fp)
1000e4d4:	3500da26 	beq	r6,r20,1000e840 <_malloc_r+0x6fc>
1000e4d8:	b9000017 	ldw	r4,0(r23)
1000e4dc:	00bfffc4 	movi	r2,-1
1000e4e0:	2080e426 	beq	r4,r2,1000e874 <_malloc_r+0x730>
1000e4e4:	a185c83a 	sub	r2,r20,r6
1000e4e8:	1885883a 	add	r2,r3,r2
1000e4ec:	e0800015 	stw	r2,0(fp)
1000e4f0:	a0c001cc 	andi	r3,r20,7
1000e4f4:	1800b526 	beq	r3,zero,1000e7cc <_malloc_r+0x688>
1000e4f8:	a0e9c83a 	sub	r20,r20,r3
1000e4fc:	00840204 	movi	r2,4104
1000e500:	a5000204 	addi	r20,r20,8
1000e504:	10c7c83a 	sub	r3,r2,r3
1000e508:	a545883a 	add	r2,r20,r21
1000e50c:	1083ffcc 	andi	r2,r2,4095
1000e510:	18abc83a 	sub	r21,r3,r2
1000e514:	9009883a 	mov	r4,r18
1000e518:	a80b883a 	mov	r5,r21
1000e51c:	00102b00 	call	100102b0 <_sbrk_r>
1000e520:	00ffffc4 	movi	r3,-1
1000e524:	10c0d026 	beq	r2,r3,1000e868 <_malloc_r+0x724>
1000e528:	1507c83a 	sub	r3,r2,r20
1000e52c:	a8c7883a 	add	r3,r21,r3
1000e530:	18c00054 	ori	r3,r3,1
1000e534:	e0800017 	ldw	r2,0(fp)
1000e538:	9d000215 	stw	r20,8(r19)
1000e53c:	a0c00115 	stw	r3,4(r20)
1000e540:	a887883a 	add	r3,r21,r2
1000e544:	e0c00015 	stw	r3,0(fp)
1000e548:	84c00e26 	beq	r16,r19,1000e584 <_malloc_r+0x440>
1000e54c:	018003c4 	movi	r6,15
1000e550:	3580a02e 	bgeu	r6,r22,1000e7d4 <_malloc_r+0x690>
1000e554:	81400117 	ldw	r5,4(r16)
1000e558:	013ffe04 	movi	r4,-8
1000e55c:	b0bffd04 	addi	r2,r22,-12
1000e560:	1104703a 	and	r2,r2,r4
1000e564:	2900004c 	andi	r4,r5,1
1000e568:	1108b03a 	or	r4,r2,r4
1000e56c:	81000115 	stw	r4,4(r16)
1000e570:	01400144 	movi	r5,5
1000e574:	8089883a 	add	r4,r16,r2
1000e578:	21400115 	stw	r5,4(r4)
1000e57c:	21400215 	stw	r5,8(r4)
1000e580:	3080c036 	bltu	r6,r2,1000e884 <_malloc_r+0x740>
1000e584:	008400b4 	movhi	r2,4098
1000e588:	10b29a04 	addi	r2,r2,-13720
1000e58c:	11000017 	ldw	r4,0(r2)
1000e590:	20c0012e 	bgeu	r4,r3,1000e598 <_malloc_r+0x454>
1000e594:	10c00015 	stw	r3,0(r2)
1000e598:	008400b4 	movhi	r2,4098
1000e59c:	10b29904 	addi	r2,r2,-13724
1000e5a0:	11000017 	ldw	r4,0(r2)
1000e5a4:	9c000217 	ldw	r16,8(r19)
1000e5a8:	20c0012e 	bgeu	r4,r3,1000e5b0 <_malloc_r+0x46c>
1000e5ac:	10c00015 	stw	r3,0(r2)
1000e5b0:	80c00117 	ldw	r3,4(r16)
1000e5b4:	00bfff04 	movi	r2,-4
1000e5b8:	1886703a 	and	r3,r3,r2
1000e5bc:	1c45c83a 	sub	r2,r3,r17
1000e5c0:	1c400236 	bltu	r3,r17,1000e5cc <_malloc_r+0x488>
1000e5c4:	00c003c4 	movi	r3,15
1000e5c8:	18800416 	blt	r3,r2,1000e5dc <_malloc_r+0x498>
1000e5cc:	9009883a 	mov	r4,r18
1000e5d0:	0014d5c0 	call	10014d5c <__malloc_unlock>
1000e5d4:	0005883a 	mov	r2,zero
1000e5d8:	003f0706 	br	1000e1f8 <__alt_data_end+0xf800e1f8>
1000e5dc:	88c00054 	ori	r3,r17,1
1000e5e0:	80c00115 	stw	r3,4(r16)
1000e5e4:	8463883a 	add	r17,r16,r17
1000e5e8:	10800054 	ori	r2,r2,1
1000e5ec:	9c400215 	stw	r17,8(r19)
1000e5f0:	88800115 	stw	r2,4(r17)
1000e5f4:	9009883a 	mov	r4,r18
1000e5f8:	0014d5c0 	call	10014d5c <__malloc_unlock>
1000e5fc:	80800204 	addi	r2,r16,8
1000e600:	003efd06 	br	1000e1f8 <__alt_data_end+0xf800e1f8>
1000e604:	00800504 	movi	r2,20
1000e608:	10c0482e 	bgeu	r2,r3,1000e72c <_malloc_r+0x5e8>
1000e60c:	00801504 	movi	r2,84
1000e610:	10c06836 	bltu	r2,r3,1000e7b4 <_malloc_r+0x670>
1000e614:	8806d33a 	srli	r3,r17,12
1000e618:	19c01b84 	addi	r7,r3,110
1000e61c:	39cb883a 	add	r5,r7,r7
1000e620:	003f0c06 	br	1000e254 <__alt_data_end+0xf800e254>
1000e624:	3804d27a 	srli	r2,r7,9
1000e628:	01000104 	movi	r4,4
1000e62c:	2080422e 	bgeu	r4,r2,1000e738 <_malloc_r+0x5f4>
1000e630:	01000504 	movi	r4,20
1000e634:	20807c36 	bltu	r4,r2,1000e828 <_malloc_r+0x6e4>
1000e638:	110016c4 	addi	r4,r2,91
1000e63c:	210b883a 	add	r5,r4,r4
1000e640:	294b883a 	add	r5,r5,r5
1000e644:	294b883a 	add	r5,r5,r5
1000e648:	994b883a 	add	r5,r19,r5
1000e64c:	28800217 	ldw	r2,8(r5)
1000e650:	020400b4 	movhi	r8,4098
1000e654:	42264604 	addi	r8,r8,-26344
1000e658:	11406326 	beq	r2,r5,1000e7e8 <_malloc_r+0x6a4>
1000e65c:	01bfff04 	movi	r6,-4
1000e660:	11000117 	ldw	r4,4(r2)
1000e664:	2188703a 	and	r4,r4,r6
1000e668:	3900022e 	bgeu	r7,r4,1000e674 <_malloc_r+0x530>
1000e66c:	10800217 	ldw	r2,8(r2)
1000e670:	28bffb1e 	bne	r5,r2,1000e660 <__alt_data_end+0xf800e660>
1000e674:	11800317 	ldw	r6,12(r2)
1000e678:	99000117 	ldw	r4,4(r19)
1000e67c:	81800315 	stw	r6,12(r16)
1000e680:	80800215 	stw	r2,8(r16)
1000e684:	34000215 	stw	r16,8(r6)
1000e688:	14000315 	stw	r16,12(r2)
1000e68c:	003f2706 	br	1000e32c <__alt_data_end+0xf800e32c>
1000e690:	88c00054 	ori	r3,r17,1
1000e694:	80c00115 	stw	r3,4(r16)
1000e698:	8463883a 	add	r17,r16,r17
1000e69c:	34400515 	stw	r17,20(r6)
1000e6a0:	34400415 	stw	r17,16(r6)
1000e6a4:	10c00054 	ori	r3,r2,1
1000e6a8:	8a400315 	stw	r9,12(r17)
1000e6ac:	8a400215 	stw	r9,8(r17)
1000e6b0:	88c00115 	stw	r3,4(r17)
1000e6b4:	88a3883a 	add	r17,r17,r2
1000e6b8:	88800015 	stw	r2,0(r17)
1000e6bc:	9009883a 	mov	r4,r18
1000e6c0:	0014d5c0 	call	10014d5c <__malloc_unlock>
1000e6c4:	80800204 	addi	r2,r16,8
1000e6c8:	003ecb06 	br	1000e1f8 <__alt_data_end+0xf800e1f8>
1000e6cc:	31000117 	ldw	r4,4(r6)
1000e6d0:	003f1606 	br	1000e32c <__alt_data_end+0xf800e32c>
1000e6d4:	63000044 	addi	r12,r12,1
1000e6d8:	608000cc 	andi	r2,r12,3
1000e6dc:	5ac00204 	addi	r11,r11,8
1000e6e0:	103f2a1e 	bne	r2,zero,1000e38c <__alt_data_end+0xf800e38c>
1000e6e4:	00002106 	br	1000e76c <_malloc_r+0x628>
1000e6e8:	80800204 	addi	r2,r16,8
1000e6ec:	84000517 	ldw	r16,20(r16)
1000e6f0:	143eb31e 	bne	r2,r16,1000e1c0 <__alt_data_end+0xf800e1c0>
1000e6f4:	18c00084 	addi	r3,r3,2
1000e6f8:	003eec06 	br	1000e2ac <__alt_data_end+0xf800e2ac>
1000e6fc:	8085883a 	add	r2,r16,r2
1000e700:	10c00117 	ldw	r3,4(r2)
1000e704:	81000317 	ldw	r4,12(r16)
1000e708:	81400217 	ldw	r5,8(r16)
1000e70c:	18c00054 	ori	r3,r3,1
1000e710:	10c00115 	stw	r3,4(r2)
1000e714:	29000315 	stw	r4,12(r5)
1000e718:	21400215 	stw	r5,8(r4)
1000e71c:	9009883a 	mov	r4,r18
1000e720:	0014d5c0 	call	10014d5c <__malloc_unlock>
1000e724:	80800204 	addi	r2,r16,8
1000e728:	003eb306 	br	1000e1f8 <__alt_data_end+0xf800e1f8>
1000e72c:	19c016c4 	addi	r7,r3,91
1000e730:	39cb883a 	add	r5,r7,r7
1000e734:	003ec706 	br	1000e254 <__alt_data_end+0xf800e254>
1000e738:	3804d1ba 	srli	r2,r7,6
1000e73c:	11000e04 	addi	r4,r2,56
1000e740:	210b883a 	add	r5,r4,r4
1000e744:	003fbe06 	br	1000e640 <__alt_data_end+0xf800e640>
1000e748:	84ff5d26 	beq	r16,r19,1000e4c0 <__alt_data_end+0xf800e4c0>
1000e74c:	9c000217 	ldw	r16,8(r19)
1000e750:	00bfff04 	movi	r2,-4
1000e754:	80c00117 	ldw	r3,4(r16)
1000e758:	1886703a 	and	r3,r3,r2
1000e75c:	003f9706 	br	1000e5bc <__alt_data_end+0xf800e5bc>
1000e760:	52800017 	ldw	r10,0(r10)
1000e764:	18ffffc4 	addi	r3,r3,-1
1000e768:	50805c1e 	bne	r10,r2,1000e8dc <_malloc_r+0x798>
1000e76c:	190000cc 	andi	r4,r3,3
1000e770:	50bffe04 	addi	r2,r10,-8
1000e774:	203ffa1e 	bne	r4,zero,1000e760 <__alt_data_end+0xf800e760>
1000e778:	98800117 	ldw	r2,4(r19)
1000e77c:	0146303a 	nor	r3,zero,r5
1000e780:	1884703a 	and	r2,r3,r2
1000e784:	98800115 	stw	r2,4(r19)
1000e788:	294b883a 	add	r5,r5,r5
1000e78c:	117f2e36 	bltu	r2,r5,1000e448 <__alt_data_end+0xf800e448>
1000e790:	283f2d26 	beq	r5,zero,1000e448 <__alt_data_end+0xf800e448>
1000e794:	1146703a 	and	r3,r2,r5
1000e798:	1800521e 	bne	r3,zero,1000e8e4 <_malloc_r+0x7a0>
1000e79c:	6007883a 	mov	r3,r12
1000e7a0:	294b883a 	add	r5,r5,r5
1000e7a4:	1148703a 	and	r4,r2,r5
1000e7a8:	18c00104 	addi	r3,r3,4
1000e7ac:	203ffc26 	beq	r4,zero,1000e7a0 <__alt_data_end+0xf800e7a0>
1000e7b0:	003ef006 	br	1000e374 <__alt_data_end+0xf800e374>
1000e7b4:	00805504 	movi	r2,340
1000e7b8:	10c01336 	bltu	r2,r3,1000e808 <_malloc_r+0x6c4>
1000e7bc:	8806d3fa 	srli	r3,r17,15
1000e7c0:	19c01dc4 	addi	r7,r3,119
1000e7c4:	39cb883a 	add	r5,r7,r7
1000e7c8:	003ea206 	br	1000e254 <__alt_data_end+0xf800e254>
1000e7cc:	00c40004 	movi	r3,4096
1000e7d0:	003f4d06 	br	1000e508 <__alt_data_end+0xf800e508>
1000e7d4:	00800044 	movi	r2,1
1000e7d8:	a0800115 	stw	r2,4(r20)
1000e7dc:	a021883a 	mov	r16,r20
1000e7e0:	0007883a 	mov	r3,zero
1000e7e4:	003f7506 	br	1000e5bc <__alt_data_end+0xf800e5bc>
1000e7e8:	200bd0ba 	srai	r5,r4,2
1000e7ec:	01800044 	movi	r6,1
1000e7f0:	41000117 	ldw	r4,4(r8)
1000e7f4:	314a983a 	sll	r5,r6,r5
1000e7f8:	100d883a 	mov	r6,r2
1000e7fc:	2908b03a 	or	r4,r5,r4
1000e800:	41000115 	stw	r4,4(r8)
1000e804:	003f9d06 	br	1000e67c <__alt_data_end+0xf800e67c>
1000e808:	00815504 	movi	r2,1364
1000e80c:	10c01336 	bltu	r2,r3,1000e85c <_malloc_r+0x718>
1000e810:	8806d4ba 	srli	r3,r17,18
1000e814:	19c01f04 	addi	r7,r3,124
1000e818:	39cb883a 	add	r5,r7,r7
1000e81c:	003e8d06 	br	1000e254 <__alt_data_end+0xf800e254>
1000e820:	ad400404 	addi	r21,r21,16
1000e824:	003f1d06 	br	1000e49c <__alt_data_end+0xf800e49c>
1000e828:	01001504 	movi	r4,84
1000e82c:	20801c36 	bltu	r4,r2,1000e8a0 <_malloc_r+0x75c>
1000e830:	3804d33a 	srli	r2,r7,12
1000e834:	11001b84 	addi	r4,r2,110
1000e838:	210b883a 	add	r5,r4,r4
1000e83c:	003f8006 	br	1000e640 <__alt_data_end+0xf800e640>
1000e840:	3083ffcc 	andi	r2,r6,4095
1000e844:	103f241e 	bne	r2,zero,1000e4d8 <__alt_data_end+0xf800e4d8>
1000e848:	99000217 	ldw	r4,8(r19)
1000e84c:	ad85883a 	add	r2,r21,r22
1000e850:	10800054 	ori	r2,r2,1
1000e854:	20800115 	stw	r2,4(r4)
1000e858:	003f4a06 	br	1000e584 <__alt_data_end+0xf800e584>
1000e85c:	01403f04 	movi	r5,252
1000e860:	01c01f84 	movi	r7,126
1000e864:	003e7b06 	br	1000e254 <__alt_data_end+0xf800e254>
1000e868:	00c00044 	movi	r3,1
1000e86c:	002b883a 	mov	r21,zero
1000e870:	003f3006 	br	1000e534 <__alt_data_end+0xf800e534>
1000e874:	008400b4 	movhi	r2,4098
1000e878:	10abcd04 	addi	r2,r2,-20684
1000e87c:	15000015 	stw	r20,0(r2)
1000e880:	003f1b06 	br	1000e4f0 <__alt_data_end+0xf800e4f0>
1000e884:	9009883a 	mov	r4,r18
1000e888:	81400204 	addi	r5,r16,8
1000e88c:	000d5a80 	call	1000d5a8 <_free_r>
1000e890:	008400b4 	movhi	r2,4098
1000e894:	10b2a304 	addi	r2,r2,-13684
1000e898:	10c00017 	ldw	r3,0(r2)
1000e89c:	003f3906 	br	1000e584 <__alt_data_end+0xf800e584>
1000e8a0:	01005504 	movi	r4,340
1000e8a4:	20800436 	bltu	r4,r2,1000e8b8 <_malloc_r+0x774>
1000e8a8:	3804d3fa 	srli	r2,r7,15
1000e8ac:	11001dc4 	addi	r4,r2,119
1000e8b0:	210b883a 	add	r5,r4,r4
1000e8b4:	003f6206 	br	1000e640 <__alt_data_end+0xf800e640>
1000e8b8:	01015504 	movi	r4,1364
1000e8bc:	20800436 	bltu	r4,r2,1000e8d0 <_malloc_r+0x78c>
1000e8c0:	3804d4ba 	srli	r2,r7,18
1000e8c4:	11001f04 	addi	r4,r2,124
1000e8c8:	210b883a 	add	r5,r4,r4
1000e8cc:	003f5c06 	br	1000e640 <__alt_data_end+0xf800e640>
1000e8d0:	01403f04 	movi	r5,252
1000e8d4:	01001f84 	movi	r4,126
1000e8d8:	003f5906 	br	1000e640 <__alt_data_end+0xf800e640>
1000e8dc:	98800117 	ldw	r2,4(r19)
1000e8e0:	003fa906 	br	1000e788 <__alt_data_end+0xf800e788>
1000e8e4:	6007883a 	mov	r3,r12
1000e8e8:	003ea206 	br	1000e374 <__alt_data_end+0xf800e374>

1000e8ec <memchr>:
1000e8ec:	208000cc 	andi	r2,r4,3
1000e8f0:	280f883a 	mov	r7,r5
1000e8f4:	10003526 	beq	r2,zero,1000e9cc <memchr+0xe0>
1000e8f8:	30bfffc4 	addi	r2,r6,-1
1000e8fc:	30001b26 	beq	r6,zero,1000e96c <memchr+0x80>
1000e900:	21800003 	ldbu	r6,0(r4)
1000e904:	28c03fcc 	andi	r3,r5,255
1000e908:	30c01a26 	beq	r6,r3,1000e974 <memchr+0x88>
1000e90c:	180d883a 	mov	r6,r3
1000e910:	00000406 	br	1000e924 <memchr+0x38>
1000e914:	10001526 	beq	r2,zero,1000e96c <memchr+0x80>
1000e918:	20c00003 	ldbu	r3,0(r4)
1000e91c:	10bfffc4 	addi	r2,r2,-1
1000e920:	19801426 	beq	r3,r6,1000e974 <memchr+0x88>
1000e924:	21000044 	addi	r4,r4,1
1000e928:	20c000cc 	andi	r3,r4,3
1000e92c:	183ff91e 	bne	r3,zero,1000e914 <__alt_data_end+0xf800e914>
1000e930:	024000c4 	movi	r9,3
1000e934:	48801136 	bltu	r9,r2,1000e97c <memchr+0x90>
1000e938:	10000c26 	beq	r2,zero,1000e96c <memchr+0x80>
1000e93c:	20c00003 	ldbu	r3,0(r4)
1000e940:	29403fcc 	andi	r5,r5,255
1000e944:	19400b26 	beq	r3,r5,1000e974 <memchr+0x88>
1000e948:	20c00044 	addi	r3,r4,1
1000e94c:	2085883a 	add	r2,r4,r2
1000e950:	39803fcc 	andi	r6,r7,255
1000e954:	00000306 	br	1000e964 <memchr+0x78>
1000e958:	18c00044 	addi	r3,r3,1
1000e95c:	197fffc3 	ldbu	r5,-1(r3)
1000e960:	29800426 	beq	r5,r6,1000e974 <memchr+0x88>
1000e964:	1809883a 	mov	r4,r3
1000e968:	18bffb1e 	bne	r3,r2,1000e958 <__alt_data_end+0xf800e958>
1000e96c:	0005883a 	mov	r2,zero
1000e970:	f800283a 	ret
1000e974:	2005883a 	mov	r2,r4
1000e978:	f800283a 	ret
1000e97c:	28c03fcc 	andi	r3,r5,255
1000e980:	1810923a 	slli	r8,r3,8
1000e984:	02ffbff4 	movhi	r11,65279
1000e988:	02a02074 	movhi	r10,32897
1000e98c:	40c6b03a 	or	r3,r8,r3
1000e990:	1810943a 	slli	r8,r3,16
1000e994:	5affbfc4 	addi	r11,r11,-257
1000e998:	52a02004 	addi	r10,r10,-32640
1000e99c:	40d0b03a 	or	r8,r8,r3
1000e9a0:	20c00017 	ldw	r3,0(r4)
1000e9a4:	40c6f03a 	xor	r3,r8,r3
1000e9a8:	1acd883a 	add	r6,r3,r11
1000e9ac:	00c6303a 	nor	r3,zero,r3
1000e9b0:	30c6703a 	and	r3,r6,r3
1000e9b4:	1a86703a 	and	r3,r3,r10
1000e9b8:	183fdf1e 	bne	r3,zero,1000e938 <__alt_data_end+0xf800e938>
1000e9bc:	10bfff04 	addi	r2,r2,-4
1000e9c0:	21000104 	addi	r4,r4,4
1000e9c4:	48bff636 	bltu	r9,r2,1000e9a0 <__alt_data_end+0xf800e9a0>
1000e9c8:	003fdb06 	br	1000e938 <__alt_data_end+0xf800e938>
1000e9cc:	3005883a 	mov	r2,r6
1000e9d0:	003fd706 	br	1000e930 <__alt_data_end+0xf800e930>

1000e9d4 <memmove>:
1000e9d4:	2005883a 	mov	r2,r4
1000e9d8:	29000b2e 	bgeu	r5,r4,1000ea08 <memmove+0x34>
1000e9dc:	298f883a 	add	r7,r5,r6
1000e9e0:	21c0092e 	bgeu	r4,r7,1000ea08 <memmove+0x34>
1000e9e4:	2187883a 	add	r3,r4,r6
1000e9e8:	198bc83a 	sub	r5,r3,r6
1000e9ec:	30004b26 	beq	r6,zero,1000eb1c <memmove+0x148>
1000e9f0:	39ffffc4 	addi	r7,r7,-1
1000e9f4:	39000003 	ldbu	r4,0(r7)
1000e9f8:	18ffffc4 	addi	r3,r3,-1
1000e9fc:	19000005 	stb	r4,0(r3)
1000ea00:	197ffb1e 	bne	r3,r5,1000e9f0 <__alt_data_end+0xf800e9f0>
1000ea04:	f800283a 	ret
1000ea08:	00c003c4 	movi	r3,15
1000ea0c:	1980412e 	bgeu	r3,r6,1000eb14 <memmove+0x140>
1000ea10:	1146b03a 	or	r3,r2,r5
1000ea14:	18c000cc 	andi	r3,r3,3
1000ea18:	1800411e 	bne	r3,zero,1000eb20 <memmove+0x14c>
1000ea1c:	33fffc04 	addi	r15,r6,-16
1000ea20:	781ed13a 	srli	r15,r15,4
1000ea24:	28c00104 	addi	r3,r5,4
1000ea28:	13400104 	addi	r13,r2,4
1000ea2c:	781c913a 	slli	r14,r15,4
1000ea30:	2b000204 	addi	r12,r5,8
1000ea34:	12c00204 	addi	r11,r2,8
1000ea38:	73800504 	addi	r14,r14,20
1000ea3c:	2a800304 	addi	r10,r5,12
1000ea40:	12400304 	addi	r9,r2,12
1000ea44:	2b9d883a 	add	r14,r5,r14
1000ea48:	2811883a 	mov	r8,r5
1000ea4c:	100f883a 	mov	r7,r2
1000ea50:	41000017 	ldw	r4,0(r8)
1000ea54:	39c00404 	addi	r7,r7,16
1000ea58:	18c00404 	addi	r3,r3,16
1000ea5c:	393ffc15 	stw	r4,-16(r7)
1000ea60:	193ffc17 	ldw	r4,-16(r3)
1000ea64:	6b400404 	addi	r13,r13,16
1000ea68:	5ac00404 	addi	r11,r11,16
1000ea6c:	693ffc15 	stw	r4,-16(r13)
1000ea70:	61000017 	ldw	r4,0(r12)
1000ea74:	4a400404 	addi	r9,r9,16
1000ea78:	42000404 	addi	r8,r8,16
1000ea7c:	593ffc15 	stw	r4,-16(r11)
1000ea80:	51000017 	ldw	r4,0(r10)
1000ea84:	63000404 	addi	r12,r12,16
1000ea88:	52800404 	addi	r10,r10,16
1000ea8c:	493ffc15 	stw	r4,-16(r9)
1000ea90:	1bbfef1e 	bne	r3,r14,1000ea50 <__alt_data_end+0xf800ea50>
1000ea94:	79000044 	addi	r4,r15,1
1000ea98:	2008913a 	slli	r4,r4,4
1000ea9c:	328003cc 	andi	r10,r6,15
1000eaa0:	02c000c4 	movi	r11,3
1000eaa4:	1107883a 	add	r3,r2,r4
1000eaa8:	290b883a 	add	r5,r5,r4
1000eaac:	5a801e2e 	bgeu	r11,r10,1000eb28 <memmove+0x154>
1000eab0:	1813883a 	mov	r9,r3
1000eab4:	2811883a 	mov	r8,r5
1000eab8:	500f883a 	mov	r7,r10
1000eabc:	41000017 	ldw	r4,0(r8)
1000eac0:	4a400104 	addi	r9,r9,4
1000eac4:	39ffff04 	addi	r7,r7,-4
1000eac8:	493fff15 	stw	r4,-4(r9)
1000eacc:	42000104 	addi	r8,r8,4
1000ead0:	59fffa36 	bltu	r11,r7,1000eabc <__alt_data_end+0xf800eabc>
1000ead4:	513fff04 	addi	r4,r10,-4
1000ead8:	2008d0ba 	srli	r4,r4,2
1000eadc:	318000cc 	andi	r6,r6,3
1000eae0:	21000044 	addi	r4,r4,1
1000eae4:	2109883a 	add	r4,r4,r4
1000eae8:	2109883a 	add	r4,r4,r4
1000eaec:	1907883a 	add	r3,r3,r4
1000eaf0:	290b883a 	add	r5,r5,r4
1000eaf4:	30000926 	beq	r6,zero,1000eb1c <memmove+0x148>
1000eaf8:	198d883a 	add	r6,r3,r6
1000eafc:	29c00003 	ldbu	r7,0(r5)
1000eb00:	18c00044 	addi	r3,r3,1
1000eb04:	29400044 	addi	r5,r5,1
1000eb08:	19ffffc5 	stb	r7,-1(r3)
1000eb0c:	19bffb1e 	bne	r3,r6,1000eafc <__alt_data_end+0xf800eafc>
1000eb10:	f800283a 	ret
1000eb14:	1007883a 	mov	r3,r2
1000eb18:	003ff606 	br	1000eaf4 <__alt_data_end+0xf800eaf4>
1000eb1c:	f800283a 	ret
1000eb20:	1007883a 	mov	r3,r2
1000eb24:	003ff406 	br	1000eaf8 <__alt_data_end+0xf800eaf8>
1000eb28:	500d883a 	mov	r6,r10
1000eb2c:	003ff106 	br	1000eaf4 <__alt_data_end+0xf800eaf4>

1000eb30 <memset>:
1000eb30:	20c000cc 	andi	r3,r4,3
1000eb34:	2005883a 	mov	r2,r4
1000eb38:	18004326 	beq	r3,zero,1000ec48 <memset+0x118>
1000eb3c:	31ffffc4 	addi	r7,r6,-1
1000eb40:	30004026 	beq	r6,zero,1000ec44 <memset+0x114>
1000eb44:	2813883a 	mov	r9,r5
1000eb48:	200d883a 	mov	r6,r4
1000eb4c:	2007883a 	mov	r3,r4
1000eb50:	00000406 	br	1000eb64 <memset+0x34>
1000eb54:	3a3fffc4 	addi	r8,r7,-1
1000eb58:	31800044 	addi	r6,r6,1
1000eb5c:	38003926 	beq	r7,zero,1000ec44 <memset+0x114>
1000eb60:	400f883a 	mov	r7,r8
1000eb64:	18c00044 	addi	r3,r3,1
1000eb68:	32400005 	stb	r9,0(r6)
1000eb6c:	1a0000cc 	andi	r8,r3,3
1000eb70:	403ff81e 	bne	r8,zero,1000eb54 <__alt_data_end+0xf800eb54>
1000eb74:	010000c4 	movi	r4,3
1000eb78:	21c02d2e 	bgeu	r4,r7,1000ec30 <memset+0x100>
1000eb7c:	29803fcc 	andi	r6,r5,255
1000eb80:	3008923a 	slli	r4,r6,8
1000eb84:	218cb03a 	or	r6,r4,r6
1000eb88:	3008943a 	slli	r4,r6,16
1000eb8c:	218cb03a 	or	r6,r4,r6
1000eb90:	010003c4 	movi	r4,15
1000eb94:	21c0182e 	bgeu	r4,r7,1000ebf8 <memset+0xc8>
1000eb98:	3b3ffc04 	addi	r12,r7,-16
1000eb9c:	6018d13a 	srli	r12,r12,4
1000eba0:	1a000104 	addi	r8,r3,4
1000eba4:	1ac00204 	addi	r11,r3,8
1000eba8:	6008913a 	slli	r4,r12,4
1000ebac:	1a800304 	addi	r10,r3,12
1000ebb0:	1813883a 	mov	r9,r3
1000ebb4:	21000504 	addi	r4,r4,20
1000ebb8:	1909883a 	add	r4,r3,r4
1000ebbc:	49800015 	stw	r6,0(r9)
1000ebc0:	41800015 	stw	r6,0(r8)
1000ebc4:	59800015 	stw	r6,0(r11)
1000ebc8:	51800015 	stw	r6,0(r10)
1000ebcc:	42000404 	addi	r8,r8,16
1000ebd0:	4a400404 	addi	r9,r9,16
1000ebd4:	5ac00404 	addi	r11,r11,16
1000ebd8:	52800404 	addi	r10,r10,16
1000ebdc:	413ff71e 	bne	r8,r4,1000ebbc <__alt_data_end+0xf800ebbc>
1000ebe0:	63000044 	addi	r12,r12,1
1000ebe4:	6018913a 	slli	r12,r12,4
1000ebe8:	39c003cc 	andi	r7,r7,15
1000ebec:	010000c4 	movi	r4,3
1000ebf0:	1b07883a 	add	r3,r3,r12
1000ebf4:	21c00e2e 	bgeu	r4,r7,1000ec30 <memset+0x100>
1000ebf8:	1813883a 	mov	r9,r3
1000ebfc:	3811883a 	mov	r8,r7
1000ec00:	010000c4 	movi	r4,3
1000ec04:	49800015 	stw	r6,0(r9)
1000ec08:	423fff04 	addi	r8,r8,-4
1000ec0c:	4a400104 	addi	r9,r9,4
1000ec10:	223ffc36 	bltu	r4,r8,1000ec04 <__alt_data_end+0xf800ec04>
1000ec14:	393fff04 	addi	r4,r7,-4
1000ec18:	2008d0ba 	srli	r4,r4,2
1000ec1c:	39c000cc 	andi	r7,r7,3
1000ec20:	21000044 	addi	r4,r4,1
1000ec24:	2109883a 	add	r4,r4,r4
1000ec28:	2109883a 	add	r4,r4,r4
1000ec2c:	1907883a 	add	r3,r3,r4
1000ec30:	38000426 	beq	r7,zero,1000ec44 <memset+0x114>
1000ec34:	19cf883a 	add	r7,r3,r7
1000ec38:	19400005 	stb	r5,0(r3)
1000ec3c:	18c00044 	addi	r3,r3,1
1000ec40:	19fffd1e 	bne	r3,r7,1000ec38 <__alt_data_end+0xf800ec38>
1000ec44:	f800283a 	ret
1000ec48:	2007883a 	mov	r3,r4
1000ec4c:	300f883a 	mov	r7,r6
1000ec50:	003fc806 	br	1000eb74 <__alt_data_end+0xf800eb74>

1000ec54 <_Balloc>:
1000ec54:	20801317 	ldw	r2,76(r4)
1000ec58:	defffc04 	addi	sp,sp,-16
1000ec5c:	dc400115 	stw	r17,4(sp)
1000ec60:	dc000015 	stw	r16,0(sp)
1000ec64:	dfc00315 	stw	ra,12(sp)
1000ec68:	dc800215 	stw	r18,8(sp)
1000ec6c:	2023883a 	mov	r17,r4
1000ec70:	2821883a 	mov	r16,r5
1000ec74:	10000f26 	beq	r2,zero,1000ecb4 <_Balloc+0x60>
1000ec78:	8407883a 	add	r3,r16,r16
1000ec7c:	18c7883a 	add	r3,r3,r3
1000ec80:	10c7883a 	add	r3,r2,r3
1000ec84:	18800017 	ldw	r2,0(r3)
1000ec88:	10001126 	beq	r2,zero,1000ecd0 <_Balloc+0x7c>
1000ec8c:	11000017 	ldw	r4,0(r2)
1000ec90:	19000015 	stw	r4,0(r3)
1000ec94:	10000415 	stw	zero,16(r2)
1000ec98:	10000315 	stw	zero,12(r2)
1000ec9c:	dfc00317 	ldw	ra,12(sp)
1000eca0:	dc800217 	ldw	r18,8(sp)
1000eca4:	dc400117 	ldw	r17,4(sp)
1000eca8:	dc000017 	ldw	r16,0(sp)
1000ecac:	dec00404 	addi	sp,sp,16
1000ecb0:	f800283a 	ret
1000ecb4:	01400104 	movi	r5,4
1000ecb8:	01800844 	movi	r6,33
1000ecbc:	0011af00 	call	10011af0 <_calloc_r>
1000ecc0:	88801315 	stw	r2,76(r17)
1000ecc4:	103fec1e 	bne	r2,zero,1000ec78 <__alt_data_end+0xf800ec78>
1000ecc8:	0005883a 	mov	r2,zero
1000eccc:	003ff306 	br	1000ec9c <__alt_data_end+0xf800ec9c>
1000ecd0:	01400044 	movi	r5,1
1000ecd4:	2c24983a 	sll	r18,r5,r16
1000ecd8:	8809883a 	mov	r4,r17
1000ecdc:	91800144 	addi	r6,r18,5
1000ece0:	318d883a 	add	r6,r6,r6
1000ece4:	318d883a 	add	r6,r6,r6
1000ece8:	0011af00 	call	10011af0 <_calloc_r>
1000ecec:	103ff626 	beq	r2,zero,1000ecc8 <__alt_data_end+0xf800ecc8>
1000ecf0:	14000115 	stw	r16,4(r2)
1000ecf4:	14800215 	stw	r18,8(r2)
1000ecf8:	003fe606 	br	1000ec94 <__alt_data_end+0xf800ec94>

1000ecfc <_Bfree>:
1000ecfc:	28000826 	beq	r5,zero,1000ed20 <_Bfree+0x24>
1000ed00:	28c00117 	ldw	r3,4(r5)
1000ed04:	20801317 	ldw	r2,76(r4)
1000ed08:	18c7883a 	add	r3,r3,r3
1000ed0c:	18c7883a 	add	r3,r3,r3
1000ed10:	10c5883a 	add	r2,r2,r3
1000ed14:	10c00017 	ldw	r3,0(r2)
1000ed18:	28c00015 	stw	r3,0(r5)
1000ed1c:	11400015 	stw	r5,0(r2)
1000ed20:	f800283a 	ret

1000ed24 <__multadd>:
1000ed24:	defff704 	addi	sp,sp,-36
1000ed28:	dc800215 	stw	r18,8(sp)
1000ed2c:	2c800417 	ldw	r18,16(r5)
1000ed30:	ddc00715 	stw	r23,28(sp)
1000ed34:	dd800615 	stw	r22,24(sp)
1000ed38:	dd000415 	stw	r20,16(sp)
1000ed3c:	dcc00315 	stw	r19,12(sp)
1000ed40:	dc400115 	stw	r17,4(sp)
1000ed44:	dc000015 	stw	r16,0(sp)
1000ed48:	dfc00815 	stw	ra,32(sp)
1000ed4c:	dd400515 	stw	r21,20(sp)
1000ed50:	2827883a 	mov	r19,r5
1000ed54:	2029883a 	mov	r20,r4
1000ed58:	3023883a 	mov	r17,r6
1000ed5c:	3821883a 	mov	r16,r7
1000ed60:	2d800504 	addi	r22,r5,20
1000ed64:	002f883a 	mov	r23,zero
1000ed68:	b5400017 	ldw	r21,0(r22)
1000ed6c:	880b883a 	mov	r5,r17
1000ed70:	bdc00044 	addi	r23,r23,1
1000ed74:	a93fffcc 	andi	r4,r21,65535
1000ed78:	0006df00 	call	10006df0 <__mulsi3>
1000ed7c:	1421883a 	add	r16,r2,r16
1000ed80:	a808d43a 	srli	r4,r21,16
1000ed84:	802ad43a 	srli	r21,r16,16
1000ed88:	880b883a 	mov	r5,r17
1000ed8c:	0006df00 	call	10006df0 <__mulsi3>
1000ed90:	a88f883a 	add	r7,r21,r2
1000ed94:	3804943a 	slli	r2,r7,16
1000ed98:	80ffffcc 	andi	r3,r16,65535
1000ed9c:	b5800104 	addi	r22,r22,4
1000eda0:	10c7883a 	add	r3,r2,r3
1000eda4:	b0ffff15 	stw	r3,-4(r22)
1000eda8:	3820d43a 	srli	r16,r7,16
1000edac:	bcbfee16 	blt	r23,r18,1000ed68 <__alt_data_end+0xf800ed68>
1000edb0:	80000926 	beq	r16,zero,1000edd8 <__multadd+0xb4>
1000edb4:	98800217 	ldw	r2,8(r19)
1000edb8:	9080130e 	bge	r18,r2,1000ee08 <__multadd+0xe4>
1000edbc:	90800144 	addi	r2,r18,5
1000edc0:	1085883a 	add	r2,r2,r2
1000edc4:	1085883a 	add	r2,r2,r2
1000edc8:	9885883a 	add	r2,r19,r2
1000edcc:	14000015 	stw	r16,0(r2)
1000edd0:	94800044 	addi	r18,r18,1
1000edd4:	9c800415 	stw	r18,16(r19)
1000edd8:	9805883a 	mov	r2,r19
1000eddc:	dfc00817 	ldw	ra,32(sp)
1000ede0:	ddc00717 	ldw	r23,28(sp)
1000ede4:	dd800617 	ldw	r22,24(sp)
1000ede8:	dd400517 	ldw	r21,20(sp)
1000edec:	dd000417 	ldw	r20,16(sp)
1000edf0:	dcc00317 	ldw	r19,12(sp)
1000edf4:	dc800217 	ldw	r18,8(sp)
1000edf8:	dc400117 	ldw	r17,4(sp)
1000edfc:	dc000017 	ldw	r16,0(sp)
1000ee00:	dec00904 	addi	sp,sp,36
1000ee04:	f800283a 	ret
1000ee08:	99400117 	ldw	r5,4(r19)
1000ee0c:	a009883a 	mov	r4,r20
1000ee10:	29400044 	addi	r5,r5,1
1000ee14:	000ec540 	call	1000ec54 <_Balloc>
1000ee18:	99800417 	ldw	r6,16(r19)
1000ee1c:	99400304 	addi	r5,r19,12
1000ee20:	11000304 	addi	r4,r2,12
1000ee24:	31800084 	addi	r6,r6,2
1000ee28:	318d883a 	add	r6,r6,r6
1000ee2c:	318d883a 	add	r6,r6,r6
1000ee30:	1023883a 	mov	r17,r2
1000ee34:	0008f580 	call	10008f58 <memcpy>
1000ee38:	99000117 	ldw	r4,4(r19)
1000ee3c:	a0c01317 	ldw	r3,76(r20)
1000ee40:	2109883a 	add	r4,r4,r4
1000ee44:	2109883a 	add	r4,r4,r4
1000ee48:	1907883a 	add	r3,r3,r4
1000ee4c:	18800017 	ldw	r2,0(r3)
1000ee50:	98800015 	stw	r2,0(r19)
1000ee54:	1cc00015 	stw	r19,0(r3)
1000ee58:	8827883a 	mov	r19,r17
1000ee5c:	003fd706 	br	1000edbc <__alt_data_end+0xf800edbc>

1000ee60 <__s2b>:
1000ee60:	defff904 	addi	sp,sp,-28
1000ee64:	dc400115 	stw	r17,4(sp)
1000ee68:	dc000015 	stw	r16,0(sp)
1000ee6c:	2023883a 	mov	r17,r4
1000ee70:	2821883a 	mov	r16,r5
1000ee74:	39000204 	addi	r4,r7,8
1000ee78:	01400244 	movi	r5,9
1000ee7c:	dcc00315 	stw	r19,12(sp)
1000ee80:	dc800215 	stw	r18,8(sp)
1000ee84:	dfc00615 	stw	ra,24(sp)
1000ee88:	dd400515 	stw	r21,20(sp)
1000ee8c:	dd000415 	stw	r20,16(sp)
1000ee90:	3825883a 	mov	r18,r7
1000ee94:	3027883a 	mov	r19,r6
1000ee98:	0006d300 	call	10006d30 <__divsi3>
1000ee9c:	00c00044 	movi	r3,1
1000eea0:	000b883a 	mov	r5,zero
1000eea4:	1880030e 	bge	r3,r2,1000eeb4 <__s2b+0x54>
1000eea8:	18c7883a 	add	r3,r3,r3
1000eeac:	29400044 	addi	r5,r5,1
1000eeb0:	18bffd16 	blt	r3,r2,1000eea8 <__alt_data_end+0xf800eea8>
1000eeb4:	8809883a 	mov	r4,r17
1000eeb8:	000ec540 	call	1000ec54 <_Balloc>
1000eebc:	d8c00717 	ldw	r3,28(sp)
1000eec0:	10c00515 	stw	r3,20(r2)
1000eec4:	00c00044 	movi	r3,1
1000eec8:	10c00415 	stw	r3,16(r2)
1000eecc:	00c00244 	movi	r3,9
1000eed0:	1cc0210e 	bge	r3,r19,1000ef58 <__s2b+0xf8>
1000eed4:	80eb883a 	add	r21,r16,r3
1000eed8:	a829883a 	mov	r20,r21
1000eedc:	84e1883a 	add	r16,r16,r19
1000eee0:	a1c00007 	ldb	r7,0(r20)
1000eee4:	8809883a 	mov	r4,r17
1000eee8:	a5000044 	addi	r20,r20,1
1000eeec:	100b883a 	mov	r5,r2
1000eef0:	01800284 	movi	r6,10
1000eef4:	39fff404 	addi	r7,r7,-48
1000eef8:	000ed240 	call	1000ed24 <__multadd>
1000eefc:	a43ff81e 	bne	r20,r16,1000eee0 <__alt_data_end+0xf800eee0>
1000ef00:	ace1883a 	add	r16,r21,r19
1000ef04:	843ffe04 	addi	r16,r16,-8
1000ef08:	9c800a0e 	bge	r19,r18,1000ef34 <__s2b+0xd4>
1000ef0c:	94e5c83a 	sub	r18,r18,r19
1000ef10:	84a5883a 	add	r18,r16,r18
1000ef14:	81c00007 	ldb	r7,0(r16)
1000ef18:	8809883a 	mov	r4,r17
1000ef1c:	84000044 	addi	r16,r16,1
1000ef20:	100b883a 	mov	r5,r2
1000ef24:	01800284 	movi	r6,10
1000ef28:	39fff404 	addi	r7,r7,-48
1000ef2c:	000ed240 	call	1000ed24 <__multadd>
1000ef30:	84bff81e 	bne	r16,r18,1000ef14 <__alt_data_end+0xf800ef14>
1000ef34:	dfc00617 	ldw	ra,24(sp)
1000ef38:	dd400517 	ldw	r21,20(sp)
1000ef3c:	dd000417 	ldw	r20,16(sp)
1000ef40:	dcc00317 	ldw	r19,12(sp)
1000ef44:	dc800217 	ldw	r18,8(sp)
1000ef48:	dc400117 	ldw	r17,4(sp)
1000ef4c:	dc000017 	ldw	r16,0(sp)
1000ef50:	dec00704 	addi	sp,sp,28
1000ef54:	f800283a 	ret
1000ef58:	84000284 	addi	r16,r16,10
1000ef5c:	1827883a 	mov	r19,r3
1000ef60:	003fe906 	br	1000ef08 <__alt_data_end+0xf800ef08>

1000ef64 <__hi0bits>:
1000ef64:	20bfffec 	andhi	r2,r4,65535
1000ef68:	1000141e 	bne	r2,zero,1000efbc <__hi0bits+0x58>
1000ef6c:	2008943a 	slli	r4,r4,16
1000ef70:	00800404 	movi	r2,16
1000ef74:	20ffc02c 	andhi	r3,r4,65280
1000ef78:	1800021e 	bne	r3,zero,1000ef84 <__hi0bits+0x20>
1000ef7c:	2008923a 	slli	r4,r4,8
1000ef80:	10800204 	addi	r2,r2,8
1000ef84:	20fc002c 	andhi	r3,r4,61440
1000ef88:	1800021e 	bne	r3,zero,1000ef94 <__hi0bits+0x30>
1000ef8c:	2008913a 	slli	r4,r4,4
1000ef90:	10800104 	addi	r2,r2,4
1000ef94:	20f0002c 	andhi	r3,r4,49152
1000ef98:	1800031e 	bne	r3,zero,1000efa8 <__hi0bits+0x44>
1000ef9c:	2109883a 	add	r4,r4,r4
1000efa0:	10800084 	addi	r2,r2,2
1000efa4:	2109883a 	add	r4,r4,r4
1000efa8:	20000316 	blt	r4,zero,1000efb8 <__hi0bits+0x54>
1000efac:	2110002c 	andhi	r4,r4,16384
1000efb0:	2000041e 	bne	r4,zero,1000efc4 <__hi0bits+0x60>
1000efb4:	00800804 	movi	r2,32
1000efb8:	f800283a 	ret
1000efbc:	0005883a 	mov	r2,zero
1000efc0:	003fec06 	br	1000ef74 <__alt_data_end+0xf800ef74>
1000efc4:	10800044 	addi	r2,r2,1
1000efc8:	f800283a 	ret

1000efcc <__lo0bits>:
1000efcc:	20c00017 	ldw	r3,0(r4)
1000efd0:	188001cc 	andi	r2,r3,7
1000efd4:	10000826 	beq	r2,zero,1000eff8 <__lo0bits+0x2c>
1000efd8:	1880004c 	andi	r2,r3,1
1000efdc:	1000211e 	bne	r2,zero,1000f064 <__lo0bits+0x98>
1000efe0:	1880008c 	andi	r2,r3,2
1000efe4:	1000211e 	bne	r2,zero,1000f06c <__lo0bits+0xa0>
1000efe8:	1806d0ba 	srli	r3,r3,2
1000efec:	00800084 	movi	r2,2
1000eff0:	20c00015 	stw	r3,0(r4)
1000eff4:	f800283a 	ret
1000eff8:	18bfffcc 	andi	r2,r3,65535
1000effc:	10001326 	beq	r2,zero,1000f04c <__lo0bits+0x80>
1000f000:	0005883a 	mov	r2,zero
1000f004:	19403fcc 	andi	r5,r3,255
1000f008:	2800021e 	bne	r5,zero,1000f014 <__lo0bits+0x48>
1000f00c:	1806d23a 	srli	r3,r3,8
1000f010:	10800204 	addi	r2,r2,8
1000f014:	194003cc 	andi	r5,r3,15
1000f018:	2800021e 	bne	r5,zero,1000f024 <__lo0bits+0x58>
1000f01c:	1806d13a 	srli	r3,r3,4
1000f020:	10800104 	addi	r2,r2,4
1000f024:	194000cc 	andi	r5,r3,3
1000f028:	2800021e 	bne	r5,zero,1000f034 <__lo0bits+0x68>
1000f02c:	1806d0ba 	srli	r3,r3,2
1000f030:	10800084 	addi	r2,r2,2
1000f034:	1940004c 	andi	r5,r3,1
1000f038:	2800081e 	bne	r5,zero,1000f05c <__lo0bits+0x90>
1000f03c:	1806d07a 	srli	r3,r3,1
1000f040:	1800051e 	bne	r3,zero,1000f058 <__lo0bits+0x8c>
1000f044:	00800804 	movi	r2,32
1000f048:	f800283a 	ret
1000f04c:	1806d43a 	srli	r3,r3,16
1000f050:	00800404 	movi	r2,16
1000f054:	003feb06 	br	1000f004 <__alt_data_end+0xf800f004>
1000f058:	10800044 	addi	r2,r2,1
1000f05c:	20c00015 	stw	r3,0(r4)
1000f060:	f800283a 	ret
1000f064:	0005883a 	mov	r2,zero
1000f068:	f800283a 	ret
1000f06c:	1806d07a 	srli	r3,r3,1
1000f070:	00800044 	movi	r2,1
1000f074:	20c00015 	stw	r3,0(r4)
1000f078:	f800283a 	ret

1000f07c <__i2b>:
1000f07c:	defffd04 	addi	sp,sp,-12
1000f080:	dc000015 	stw	r16,0(sp)
1000f084:	04000044 	movi	r16,1
1000f088:	dc400115 	stw	r17,4(sp)
1000f08c:	2823883a 	mov	r17,r5
1000f090:	800b883a 	mov	r5,r16
1000f094:	dfc00215 	stw	ra,8(sp)
1000f098:	000ec540 	call	1000ec54 <_Balloc>
1000f09c:	14400515 	stw	r17,20(r2)
1000f0a0:	14000415 	stw	r16,16(r2)
1000f0a4:	dfc00217 	ldw	ra,8(sp)
1000f0a8:	dc400117 	ldw	r17,4(sp)
1000f0ac:	dc000017 	ldw	r16,0(sp)
1000f0b0:	dec00304 	addi	sp,sp,12
1000f0b4:	f800283a 	ret

1000f0b8 <__multiply>:
1000f0b8:	deffef04 	addi	sp,sp,-68
1000f0bc:	dc400815 	stw	r17,32(sp)
1000f0c0:	dc000715 	stw	r16,28(sp)
1000f0c4:	2c400417 	ldw	r17,16(r5)
1000f0c8:	34000417 	ldw	r16,16(r6)
1000f0cc:	dd800d15 	stw	r22,52(sp)
1000f0d0:	dc800915 	stw	r18,36(sp)
1000f0d4:	dfc01015 	stw	ra,64(sp)
1000f0d8:	df000f15 	stw	fp,60(sp)
1000f0dc:	ddc00e15 	stw	r23,56(sp)
1000f0e0:	dd400c15 	stw	r21,48(sp)
1000f0e4:	dd000b15 	stw	r20,44(sp)
1000f0e8:	dcc00a15 	stw	r19,40(sp)
1000f0ec:	2825883a 	mov	r18,r5
1000f0f0:	302d883a 	mov	r22,r6
1000f0f4:	8c009116 	blt	r17,r16,1000f33c <__multiply+0x284>
1000f0f8:	8005883a 	mov	r2,r16
1000f0fc:	8821883a 	mov	r16,r17
1000f100:	1023883a 	mov	r17,r2
1000f104:	90800217 	ldw	r2,8(r18)
1000f108:	8447883a 	add	r3,r16,r17
1000f10c:	d8c00215 	stw	r3,8(sp)
1000f110:	91400117 	ldw	r5,4(r18)
1000f114:	10c0010e 	bge	r2,r3,1000f11c <__multiply+0x64>
1000f118:	29400044 	addi	r5,r5,1
1000f11c:	000ec540 	call	1000ec54 <_Balloc>
1000f120:	d8c00217 	ldw	r3,8(sp)
1000f124:	d8800615 	stw	r2,24(sp)
1000f128:	18eb883a 	add	r21,r3,r3
1000f12c:	ad6b883a 	add	r21,r21,r21
1000f130:	10c00504 	addi	r3,r2,20
1000f134:	1d6b883a 	add	r21,r3,r21
1000f138:	d8c00115 	stw	r3,4(sp)
1000f13c:	dd400315 	stw	r21,12(sp)
1000f140:	1805883a 	mov	r2,r3
1000f144:	1d40042e 	bgeu	r3,r21,1000f158 <__multiply+0xa0>
1000f148:	d8c00317 	ldw	r3,12(sp)
1000f14c:	10000015 	stw	zero,0(r2)
1000f150:	10800104 	addi	r2,r2,4
1000f154:	10fffc36 	bltu	r2,r3,1000f148 <__alt_data_end+0xf800f148>
1000f158:	8c63883a 	add	r17,r17,r17
1000f15c:	b5800504 	addi	r22,r22,20
1000f160:	8c63883a 	add	r17,r17,r17
1000f164:	94800504 	addi	r18,r18,20
1000f168:	8421883a 	add	r16,r16,r16
1000f16c:	b463883a 	add	r17,r22,r17
1000f170:	8421883a 	add	r16,r16,r16
1000f174:	dd800015 	stw	r22,0(sp)
1000f178:	dc800415 	stw	r18,16(sp)
1000f17c:	dc400515 	stw	r17,20(sp)
1000f180:	9429883a 	add	r20,r18,r16
1000f184:	b4404f2e 	bgeu	r22,r17,1000f2c4 <__multiply+0x20c>
1000f188:	d8c00017 	ldw	r3,0(sp)
1000f18c:	1c800017 	ldw	r18,0(r3)
1000f190:	943fffcc 	andi	r16,r18,65535
1000f194:	80001e26 	beq	r16,zero,1000f210 <__multiply+0x158>
1000f198:	dd800117 	ldw	r22,4(sp)
1000f19c:	dd400417 	ldw	r21,16(sp)
1000f1a0:	0025883a 	mov	r18,zero
1000f1a4:	adc00017 	ldw	r23,0(r21)
1000f1a8:	b4c00017 	ldw	r19,0(r22)
1000f1ac:	800b883a 	mov	r5,r16
1000f1b0:	b93fffcc 	andi	r4,r23,65535
1000f1b4:	0006df00 	call	10006df0 <__mulsi3>
1000f1b8:	9c7fffcc 	andi	r17,r19,65535
1000f1bc:	8885883a 	add	r2,r17,r2
1000f1c0:	b808d43a 	srli	r4,r23,16
1000f1c4:	14a3883a 	add	r17,r2,r18
1000f1c8:	9826d43a 	srli	r19,r19,16
1000f1cc:	8824d43a 	srli	r18,r17,16
1000f1d0:	800b883a 	mov	r5,r16
1000f1d4:	0006df00 	call	10006df0 <__mulsi3>
1000f1d8:	9885883a 	add	r2,r19,r2
1000f1dc:	14a7883a 	add	r19,r2,r18
1000f1e0:	88ffffcc 	andi	r3,r17,65535
1000f1e4:	9822943a 	slli	r17,r19,16
1000f1e8:	ad400104 	addi	r21,r21,4
1000f1ec:	b005883a 	mov	r2,r22
1000f1f0:	88c6b03a 	or	r3,r17,r3
1000f1f4:	b0c00015 	stw	r3,0(r22)
1000f1f8:	9824d43a 	srli	r18,r19,16
1000f1fc:	b5800104 	addi	r22,r22,4
1000f200:	ad3fe836 	bltu	r21,r20,1000f1a4 <__alt_data_end+0xf800f1a4>
1000f204:	d8c00017 	ldw	r3,0(sp)
1000f208:	14800115 	stw	r18,4(r2)
1000f20c:	1c800017 	ldw	r18,0(r3)
1000f210:	9024d43a 	srli	r18,r18,16
1000f214:	90002226 	beq	r18,zero,1000f2a0 <__multiply+0x1e8>
1000f218:	d8c00117 	ldw	r3,4(sp)
1000f21c:	dd800417 	ldw	r22,16(sp)
1000f220:	002f883a 	mov	r23,zero
1000f224:	1f000017 	ldw	fp,0(r3)
1000f228:	1823883a 	mov	r17,r3
1000f22c:	182b883a 	mov	r21,r3
1000f230:	e021883a 	mov	r16,fp
1000f234:	00000106 	br	1000f23c <__multiply+0x184>
1000f238:	982b883a 	mov	r21,r19
1000f23c:	b100000b 	ldhu	r4,0(r22)
1000f240:	8020d43a 	srli	r16,r16,16
1000f244:	900b883a 	mov	r5,r18
1000f248:	0006df00 	call	10006df0 <__mulsi3>
1000f24c:	1405883a 	add	r2,r2,r16
1000f250:	15ef883a 	add	r23,r2,r23
1000f254:	b804943a 	slli	r2,r23,16
1000f258:	e0ffffcc 	andi	r3,fp,65535
1000f25c:	8c400104 	addi	r17,r17,4
1000f260:	10c6b03a 	or	r3,r2,r3
1000f264:	88ffff15 	stw	r3,-4(r17)
1000f268:	b5800104 	addi	r22,r22,4
1000f26c:	b13fff17 	ldw	r4,-4(r22)
1000f270:	acc00104 	addi	r19,r21,4
1000f274:	900b883a 	mov	r5,r18
1000f278:	2008d43a 	srli	r4,r4,16
1000f27c:	9c000017 	ldw	r16,0(r19)
1000f280:	0006df00 	call	10006df0 <__mulsi3>
1000f284:	b806d43a 	srli	r3,r23,16
1000f288:	813fffcc 	andi	r4,r16,65535
1000f28c:	1105883a 	add	r2,r2,r4
1000f290:	10f9883a 	add	fp,r2,r3
1000f294:	e02ed43a 	srli	r23,fp,16
1000f298:	b53fe736 	bltu	r22,r20,1000f238 <__alt_data_end+0xf800f238>
1000f29c:	af000115 	stw	fp,4(r21)
1000f2a0:	d8c00017 	ldw	r3,0(sp)
1000f2a4:	d9000517 	ldw	r4,20(sp)
1000f2a8:	18c00104 	addi	r3,r3,4
1000f2ac:	d8c00015 	stw	r3,0(sp)
1000f2b0:	d8c00117 	ldw	r3,4(sp)
1000f2b4:	18c00104 	addi	r3,r3,4
1000f2b8:	d8c00115 	stw	r3,4(sp)
1000f2bc:	d8c00017 	ldw	r3,0(sp)
1000f2c0:	193fb136 	bltu	r3,r4,1000f188 <__alt_data_end+0xf800f188>
1000f2c4:	d8c00217 	ldw	r3,8(sp)
1000f2c8:	00c00c0e 	bge	zero,r3,1000f2fc <__multiply+0x244>
1000f2cc:	d8c00317 	ldw	r3,12(sp)
1000f2d0:	18bfff17 	ldw	r2,-4(r3)
1000f2d4:	1d7fff04 	addi	r21,r3,-4
1000f2d8:	10000326 	beq	r2,zero,1000f2e8 <__multiply+0x230>
1000f2dc:	00000706 	br	1000f2fc <__multiply+0x244>
1000f2e0:	a8800017 	ldw	r2,0(r21)
1000f2e4:	1000051e 	bne	r2,zero,1000f2fc <__multiply+0x244>
1000f2e8:	d8c00217 	ldw	r3,8(sp)
1000f2ec:	ad7fff04 	addi	r21,r21,-4
1000f2f0:	18ffffc4 	addi	r3,r3,-1
1000f2f4:	d8c00215 	stw	r3,8(sp)
1000f2f8:	183ff91e 	bne	r3,zero,1000f2e0 <__alt_data_end+0xf800f2e0>
1000f2fc:	d8c00617 	ldw	r3,24(sp)
1000f300:	d9000217 	ldw	r4,8(sp)
1000f304:	1805883a 	mov	r2,r3
1000f308:	19000415 	stw	r4,16(r3)
1000f30c:	dfc01017 	ldw	ra,64(sp)
1000f310:	df000f17 	ldw	fp,60(sp)
1000f314:	ddc00e17 	ldw	r23,56(sp)
1000f318:	dd800d17 	ldw	r22,52(sp)
1000f31c:	dd400c17 	ldw	r21,48(sp)
1000f320:	dd000b17 	ldw	r20,44(sp)
1000f324:	dcc00a17 	ldw	r19,40(sp)
1000f328:	dc800917 	ldw	r18,36(sp)
1000f32c:	dc400817 	ldw	r17,32(sp)
1000f330:	dc000717 	ldw	r16,28(sp)
1000f334:	dec01104 	addi	sp,sp,68
1000f338:	f800283a 	ret
1000f33c:	3025883a 	mov	r18,r6
1000f340:	282d883a 	mov	r22,r5
1000f344:	003f6f06 	br	1000f104 <__alt_data_end+0xf800f104>

1000f348 <__pow5mult>:
1000f348:	defffa04 	addi	sp,sp,-24
1000f34c:	dcc00315 	stw	r19,12(sp)
1000f350:	dc800215 	stw	r18,8(sp)
1000f354:	dc000015 	stw	r16,0(sp)
1000f358:	dfc00515 	stw	ra,20(sp)
1000f35c:	dd000415 	stw	r20,16(sp)
1000f360:	dc400115 	stw	r17,4(sp)
1000f364:	308000cc 	andi	r2,r6,3
1000f368:	3021883a 	mov	r16,r6
1000f36c:	2027883a 	mov	r19,r4
1000f370:	2825883a 	mov	r18,r5
1000f374:	10002e1e 	bne	r2,zero,1000f430 <__pow5mult+0xe8>
1000f378:	8021d0ba 	srai	r16,r16,2
1000f37c:	80001a26 	beq	r16,zero,1000f3e8 <__pow5mult+0xa0>
1000f380:	9c401217 	ldw	r17,72(r19)
1000f384:	8800061e 	bne	r17,zero,1000f3a0 <__pow5mult+0x58>
1000f388:	00003406 	br	1000f45c <__pow5mult+0x114>
1000f38c:	8021d07a 	srai	r16,r16,1
1000f390:	80001526 	beq	r16,zero,1000f3e8 <__pow5mult+0xa0>
1000f394:	88800017 	ldw	r2,0(r17)
1000f398:	10001c26 	beq	r2,zero,1000f40c <__pow5mult+0xc4>
1000f39c:	1023883a 	mov	r17,r2
1000f3a0:	80c0004c 	andi	r3,r16,1
1000f3a4:	183ff926 	beq	r3,zero,1000f38c <__alt_data_end+0xf800f38c>
1000f3a8:	900b883a 	mov	r5,r18
1000f3ac:	880d883a 	mov	r6,r17
1000f3b0:	9809883a 	mov	r4,r19
1000f3b4:	000f0b80 	call	1000f0b8 <__multiply>
1000f3b8:	90001b26 	beq	r18,zero,1000f428 <__pow5mult+0xe0>
1000f3bc:	91c00117 	ldw	r7,4(r18)
1000f3c0:	98c01317 	ldw	r3,76(r19)
1000f3c4:	8021d07a 	srai	r16,r16,1
1000f3c8:	39cf883a 	add	r7,r7,r7
1000f3cc:	39cf883a 	add	r7,r7,r7
1000f3d0:	19c7883a 	add	r3,r3,r7
1000f3d4:	19000017 	ldw	r4,0(r3)
1000f3d8:	91000015 	stw	r4,0(r18)
1000f3dc:	1c800015 	stw	r18,0(r3)
1000f3e0:	1025883a 	mov	r18,r2
1000f3e4:	803feb1e 	bne	r16,zero,1000f394 <__alt_data_end+0xf800f394>
1000f3e8:	9005883a 	mov	r2,r18
1000f3ec:	dfc00517 	ldw	ra,20(sp)
1000f3f0:	dd000417 	ldw	r20,16(sp)
1000f3f4:	dcc00317 	ldw	r19,12(sp)
1000f3f8:	dc800217 	ldw	r18,8(sp)
1000f3fc:	dc400117 	ldw	r17,4(sp)
1000f400:	dc000017 	ldw	r16,0(sp)
1000f404:	dec00604 	addi	sp,sp,24
1000f408:	f800283a 	ret
1000f40c:	9809883a 	mov	r4,r19
1000f410:	880b883a 	mov	r5,r17
1000f414:	880d883a 	mov	r6,r17
1000f418:	000f0b80 	call	1000f0b8 <__multiply>
1000f41c:	88800015 	stw	r2,0(r17)
1000f420:	10000015 	stw	zero,0(r2)
1000f424:	003fdd06 	br	1000f39c <__alt_data_end+0xf800f39c>
1000f428:	1025883a 	mov	r18,r2
1000f42c:	003fd706 	br	1000f38c <__alt_data_end+0xf800f38c>
1000f430:	10bfffc4 	addi	r2,r2,-1
1000f434:	1085883a 	add	r2,r2,r2
1000f438:	00c400b4 	movhi	r3,4098
1000f43c:	18e4c104 	addi	r3,r3,-27900
1000f440:	1085883a 	add	r2,r2,r2
1000f444:	1885883a 	add	r2,r3,r2
1000f448:	11800017 	ldw	r6,0(r2)
1000f44c:	000f883a 	mov	r7,zero
1000f450:	000ed240 	call	1000ed24 <__multadd>
1000f454:	1025883a 	mov	r18,r2
1000f458:	003fc706 	br	1000f378 <__alt_data_end+0xf800f378>
1000f45c:	05000044 	movi	r20,1
1000f460:	9809883a 	mov	r4,r19
1000f464:	a00b883a 	mov	r5,r20
1000f468:	000ec540 	call	1000ec54 <_Balloc>
1000f46c:	1023883a 	mov	r17,r2
1000f470:	00809c44 	movi	r2,625
1000f474:	88800515 	stw	r2,20(r17)
1000f478:	8d000415 	stw	r20,16(r17)
1000f47c:	9c401215 	stw	r17,72(r19)
1000f480:	88000015 	stw	zero,0(r17)
1000f484:	003fc606 	br	1000f3a0 <__alt_data_end+0xf800f3a0>

1000f488 <__lshift>:
1000f488:	defff904 	addi	sp,sp,-28
1000f48c:	dd000415 	stw	r20,16(sp)
1000f490:	dcc00315 	stw	r19,12(sp)
1000f494:	3029d17a 	srai	r20,r6,5
1000f498:	2cc00417 	ldw	r19,16(r5)
1000f49c:	28800217 	ldw	r2,8(r5)
1000f4a0:	dd400515 	stw	r21,20(sp)
1000f4a4:	a4e7883a 	add	r19,r20,r19
1000f4a8:	dc800215 	stw	r18,8(sp)
1000f4ac:	dc400115 	stw	r17,4(sp)
1000f4b0:	dc000015 	stw	r16,0(sp)
1000f4b4:	dfc00615 	stw	ra,24(sp)
1000f4b8:	9c000044 	addi	r16,r19,1
1000f4bc:	2823883a 	mov	r17,r5
1000f4c0:	302b883a 	mov	r21,r6
1000f4c4:	2025883a 	mov	r18,r4
1000f4c8:	29400117 	ldw	r5,4(r5)
1000f4cc:	1400030e 	bge	r2,r16,1000f4dc <__lshift+0x54>
1000f4d0:	1085883a 	add	r2,r2,r2
1000f4d4:	29400044 	addi	r5,r5,1
1000f4d8:	143ffd16 	blt	r2,r16,1000f4d0 <__alt_data_end+0xf800f4d0>
1000f4dc:	9009883a 	mov	r4,r18
1000f4e0:	000ec540 	call	1000ec54 <_Balloc>
1000f4e4:	11c00504 	addi	r7,r2,20
1000f4e8:	0500090e 	bge	zero,r20,1000f510 <__lshift+0x88>
1000f4ec:	3811883a 	mov	r8,r7
1000f4f0:	0007883a 	mov	r3,zero
1000f4f4:	40000015 	stw	zero,0(r8)
1000f4f8:	18c00044 	addi	r3,r3,1
1000f4fc:	42000104 	addi	r8,r8,4
1000f500:	1d3ffc1e 	bne	r3,r20,1000f4f4 <__alt_data_end+0xf800f4f4>
1000f504:	18c7883a 	add	r3,r3,r3
1000f508:	18c7883a 	add	r3,r3,r3
1000f50c:	38cf883a 	add	r7,r7,r3
1000f510:	89000417 	ldw	r4,16(r17)
1000f514:	88c00504 	addi	r3,r17,20
1000f518:	a98007cc 	andi	r6,r21,31
1000f51c:	2109883a 	add	r4,r4,r4
1000f520:	2109883a 	add	r4,r4,r4
1000f524:	1909883a 	add	r4,r3,r4
1000f528:	30002326 	beq	r6,zero,1000f5b8 <__lshift+0x130>
1000f52c:	01400804 	movi	r5,32
1000f530:	298bc83a 	sub	r5,r5,r6
1000f534:	0013883a 	mov	r9,zero
1000f538:	1a000017 	ldw	r8,0(r3)
1000f53c:	3815883a 	mov	r10,r7
1000f540:	39c00104 	addi	r7,r7,4
1000f544:	4190983a 	sll	r8,r8,r6
1000f548:	18c00104 	addi	r3,r3,4
1000f54c:	4a10b03a 	or	r8,r9,r8
1000f550:	3a3fff15 	stw	r8,-4(r7)
1000f554:	1a3fff17 	ldw	r8,-4(r3)
1000f558:	4152d83a 	srl	r9,r8,r5
1000f55c:	193ff636 	bltu	r3,r4,1000f538 <__alt_data_end+0xf800f538>
1000f560:	52400115 	stw	r9,4(r10)
1000f564:	48000126 	beq	r9,zero,1000f56c <__lshift+0xe4>
1000f568:	9c000084 	addi	r16,r19,2
1000f56c:	89000117 	ldw	r4,4(r17)
1000f570:	90c01317 	ldw	r3,76(r18)
1000f574:	843fffc4 	addi	r16,r16,-1
1000f578:	2109883a 	add	r4,r4,r4
1000f57c:	2109883a 	add	r4,r4,r4
1000f580:	1907883a 	add	r3,r3,r4
1000f584:	19000017 	ldw	r4,0(r3)
1000f588:	14000415 	stw	r16,16(r2)
1000f58c:	89000015 	stw	r4,0(r17)
1000f590:	1c400015 	stw	r17,0(r3)
1000f594:	dfc00617 	ldw	ra,24(sp)
1000f598:	dd400517 	ldw	r21,20(sp)
1000f59c:	dd000417 	ldw	r20,16(sp)
1000f5a0:	dcc00317 	ldw	r19,12(sp)
1000f5a4:	dc800217 	ldw	r18,8(sp)
1000f5a8:	dc400117 	ldw	r17,4(sp)
1000f5ac:	dc000017 	ldw	r16,0(sp)
1000f5b0:	dec00704 	addi	sp,sp,28
1000f5b4:	f800283a 	ret
1000f5b8:	19400017 	ldw	r5,0(r3)
1000f5bc:	39c00104 	addi	r7,r7,4
1000f5c0:	18c00104 	addi	r3,r3,4
1000f5c4:	397fff15 	stw	r5,-4(r7)
1000f5c8:	193ffb36 	bltu	r3,r4,1000f5b8 <__alt_data_end+0xf800f5b8>
1000f5cc:	003fe706 	br	1000f56c <__alt_data_end+0xf800f56c>

1000f5d0 <__mcmp>:
1000f5d0:	20800417 	ldw	r2,16(r4)
1000f5d4:	28c00417 	ldw	r3,16(r5)
1000f5d8:	10c5c83a 	sub	r2,r2,r3
1000f5dc:	1000111e 	bne	r2,zero,1000f624 <__mcmp+0x54>
1000f5e0:	18c7883a 	add	r3,r3,r3
1000f5e4:	18c7883a 	add	r3,r3,r3
1000f5e8:	21000504 	addi	r4,r4,20
1000f5ec:	29400504 	addi	r5,r5,20
1000f5f0:	20c5883a 	add	r2,r4,r3
1000f5f4:	28cb883a 	add	r5,r5,r3
1000f5f8:	00000106 	br	1000f600 <__mcmp+0x30>
1000f5fc:	20800a2e 	bgeu	r4,r2,1000f628 <__mcmp+0x58>
1000f600:	10bfff04 	addi	r2,r2,-4
1000f604:	297fff04 	addi	r5,r5,-4
1000f608:	11800017 	ldw	r6,0(r2)
1000f60c:	28c00017 	ldw	r3,0(r5)
1000f610:	30fffa26 	beq	r6,r3,1000f5fc <__alt_data_end+0xf800f5fc>
1000f614:	30c00236 	bltu	r6,r3,1000f620 <__mcmp+0x50>
1000f618:	00800044 	movi	r2,1
1000f61c:	f800283a 	ret
1000f620:	00bfffc4 	movi	r2,-1
1000f624:	f800283a 	ret
1000f628:	0005883a 	mov	r2,zero
1000f62c:	f800283a 	ret

1000f630 <__mdiff>:
1000f630:	defffb04 	addi	sp,sp,-20
1000f634:	dc000015 	stw	r16,0(sp)
1000f638:	2821883a 	mov	r16,r5
1000f63c:	dcc00315 	stw	r19,12(sp)
1000f640:	300b883a 	mov	r5,r6
1000f644:	2027883a 	mov	r19,r4
1000f648:	8009883a 	mov	r4,r16
1000f64c:	dc800215 	stw	r18,8(sp)
1000f650:	dfc00415 	stw	ra,16(sp)
1000f654:	dc400115 	stw	r17,4(sp)
1000f658:	3025883a 	mov	r18,r6
1000f65c:	000f5d00 	call	1000f5d0 <__mcmp>
1000f660:	10005226 	beq	r2,zero,1000f7ac <__mdiff+0x17c>
1000f664:	10004c16 	blt	r2,zero,1000f798 <__mdiff+0x168>
1000f668:	0023883a 	mov	r17,zero
1000f66c:	81400117 	ldw	r5,4(r16)
1000f670:	9809883a 	mov	r4,r19
1000f674:	000ec540 	call	1000ec54 <_Balloc>
1000f678:	83400417 	ldw	r13,16(r16)
1000f67c:	93800417 	ldw	r14,16(r18)
1000f680:	81000504 	addi	r4,r16,20
1000f684:	6b59883a 	add	r12,r13,r13
1000f688:	739d883a 	add	r14,r14,r14
1000f68c:	6319883a 	add	r12,r12,r12
1000f690:	91800504 	addi	r6,r18,20
1000f694:	739d883a 	add	r14,r14,r14
1000f698:	14400315 	stw	r17,12(r2)
1000f69c:	2319883a 	add	r12,r4,r12
1000f6a0:	339d883a 	add	r14,r6,r14
1000f6a4:	12400504 	addi	r9,r2,20
1000f6a8:	0007883a 	mov	r3,zero
1000f6ac:	22000017 	ldw	r8,0(r4)
1000f6b0:	32800017 	ldw	r10,0(r6)
1000f6b4:	4ac00104 	addi	r11,r9,4
1000f6b8:	41ffffcc 	andi	r7,r8,65535
1000f6bc:	38c7883a 	add	r3,r7,r3
1000f6c0:	51ffffcc 	andi	r7,r10,65535
1000f6c4:	19cfc83a 	sub	r7,r3,r7
1000f6c8:	4010d43a 	srli	r8,r8,16
1000f6cc:	5014d43a 	srli	r10,r10,16
1000f6d0:	3807d43a 	srai	r3,r7,16
1000f6d4:	39ffffcc 	andi	r7,r7,65535
1000f6d8:	4291c83a 	sub	r8,r8,r10
1000f6dc:	40c7883a 	add	r3,r8,r3
1000f6e0:	1810943a 	slli	r8,r3,16
1000f6e4:	31800104 	addi	r6,r6,4
1000f6e8:	21000104 	addi	r4,r4,4
1000f6ec:	41ceb03a 	or	r7,r8,r7
1000f6f0:	49c00015 	stw	r7,0(r9)
1000f6f4:	1807d43a 	srai	r3,r3,16
1000f6f8:	580b883a 	mov	r5,r11
1000f6fc:	5813883a 	mov	r9,r11
1000f700:	33bfea36 	bltu	r6,r14,1000f6ac <__alt_data_end+0xf800f6ac>
1000f704:	2011883a 	mov	r8,r4
1000f708:	2300152e 	bgeu	r4,r12,1000f760 <__mdiff+0x130>
1000f70c:	21400017 	ldw	r5,0(r4)
1000f710:	4a400104 	addi	r9,r9,4
1000f714:	21000104 	addi	r4,r4,4
1000f718:	29ffffcc 	andi	r7,r5,65535
1000f71c:	38c7883a 	add	r3,r7,r3
1000f720:	280ad43a 	srli	r5,r5,16
1000f724:	180dd43a 	srai	r6,r3,16
1000f728:	19ffffcc 	andi	r7,r3,65535
1000f72c:	3147883a 	add	r3,r6,r5
1000f730:	180a943a 	slli	r5,r3,16
1000f734:	1807d43a 	srai	r3,r3,16
1000f738:	29ceb03a 	or	r7,r5,r7
1000f73c:	49ffff15 	stw	r7,-4(r9)
1000f740:	233ff236 	bltu	r4,r12,1000f70c <__alt_data_end+0xf800f70c>
1000f744:	0206303a 	nor	r3,zero,r8
1000f748:	1b07883a 	add	r3,r3,r12
1000f74c:	1806d0ba 	srli	r3,r3,2
1000f750:	18c00044 	addi	r3,r3,1
1000f754:	18c7883a 	add	r3,r3,r3
1000f758:	18c7883a 	add	r3,r3,r3
1000f75c:	58cb883a 	add	r5,r11,r3
1000f760:	28ffff04 	addi	r3,r5,-4
1000f764:	3800041e 	bne	r7,zero,1000f778 <__mdiff+0x148>
1000f768:	18ffff04 	addi	r3,r3,-4
1000f76c:	19000017 	ldw	r4,0(r3)
1000f770:	6b7fffc4 	addi	r13,r13,-1
1000f774:	203ffc26 	beq	r4,zero,1000f768 <__alt_data_end+0xf800f768>
1000f778:	13400415 	stw	r13,16(r2)
1000f77c:	dfc00417 	ldw	ra,16(sp)
1000f780:	dcc00317 	ldw	r19,12(sp)
1000f784:	dc800217 	ldw	r18,8(sp)
1000f788:	dc400117 	ldw	r17,4(sp)
1000f78c:	dc000017 	ldw	r16,0(sp)
1000f790:	dec00504 	addi	sp,sp,20
1000f794:	f800283a 	ret
1000f798:	8005883a 	mov	r2,r16
1000f79c:	04400044 	movi	r17,1
1000f7a0:	9021883a 	mov	r16,r18
1000f7a4:	1025883a 	mov	r18,r2
1000f7a8:	003fb006 	br	1000f66c <__alt_data_end+0xf800f66c>
1000f7ac:	9809883a 	mov	r4,r19
1000f7b0:	000b883a 	mov	r5,zero
1000f7b4:	000ec540 	call	1000ec54 <_Balloc>
1000f7b8:	00c00044 	movi	r3,1
1000f7bc:	10c00415 	stw	r3,16(r2)
1000f7c0:	10000515 	stw	zero,20(r2)
1000f7c4:	003fed06 	br	1000f77c <__alt_data_end+0xf800f77c>

1000f7c8 <__ulp>:
1000f7c8:	295ffc2c 	andhi	r5,r5,32752
1000f7cc:	00bf3034 	movhi	r2,64704
1000f7d0:	2887883a 	add	r3,r5,r2
1000f7d4:	00c0020e 	bge	zero,r3,1000f7e0 <__ulp+0x18>
1000f7d8:	0005883a 	mov	r2,zero
1000f7dc:	f800283a 	ret
1000f7e0:	00c7c83a 	sub	r3,zero,r3
1000f7e4:	180bd53a 	srai	r5,r3,20
1000f7e8:	008004c4 	movi	r2,19
1000f7ec:	11400a0e 	bge	r2,r5,1000f818 <__ulp+0x50>
1000f7f0:	00800c84 	movi	r2,50
1000f7f4:	0007883a 	mov	r3,zero
1000f7f8:	11400516 	blt	r2,r5,1000f810 <__ulp+0x48>
1000f7fc:	00800cc4 	movi	r2,51
1000f800:	114bc83a 	sub	r5,r2,r5
1000f804:	00800044 	movi	r2,1
1000f808:	1144983a 	sll	r2,r2,r5
1000f80c:	f800283a 	ret
1000f810:	00800044 	movi	r2,1
1000f814:	f800283a 	ret
1000f818:	00800234 	movhi	r2,8
1000f81c:	1147d83a 	sra	r3,r2,r5
1000f820:	0005883a 	mov	r2,zero
1000f824:	f800283a 	ret

1000f828 <__b2d>:
1000f828:	defffa04 	addi	sp,sp,-24
1000f82c:	dc000015 	stw	r16,0(sp)
1000f830:	24000417 	ldw	r16,16(r4)
1000f834:	dc400115 	stw	r17,4(sp)
1000f838:	24400504 	addi	r17,r4,20
1000f83c:	8421883a 	add	r16,r16,r16
1000f840:	8421883a 	add	r16,r16,r16
1000f844:	8c21883a 	add	r16,r17,r16
1000f848:	dc800215 	stw	r18,8(sp)
1000f84c:	84bfff17 	ldw	r18,-4(r16)
1000f850:	dd000415 	stw	r20,16(sp)
1000f854:	dcc00315 	stw	r19,12(sp)
1000f858:	9009883a 	mov	r4,r18
1000f85c:	2829883a 	mov	r20,r5
1000f860:	dfc00515 	stw	ra,20(sp)
1000f864:	000ef640 	call	1000ef64 <__hi0bits>
1000f868:	00c00804 	movi	r3,32
1000f86c:	1887c83a 	sub	r3,r3,r2
1000f870:	a0c00015 	stw	r3,0(r20)
1000f874:	00c00284 	movi	r3,10
1000f878:	84ffff04 	addi	r19,r16,-4
1000f87c:	18801216 	blt	r3,r2,1000f8c8 <__b2d+0xa0>
1000f880:	014002c4 	movi	r5,11
1000f884:	2889c83a 	sub	r4,r5,r2
1000f888:	9106d83a 	srl	r3,r18,r4
1000f88c:	18cffc34 	orhi	r3,r3,16368
1000f890:	8cc0282e 	bgeu	r17,r19,1000f934 <__b2d+0x10c>
1000f894:	817ffe17 	ldw	r5,-8(r16)
1000f898:	290ad83a 	srl	r5,r5,r4
1000f89c:	10800544 	addi	r2,r2,21
1000f8a0:	9084983a 	sll	r2,r18,r2
1000f8a4:	2884b03a 	or	r2,r5,r2
1000f8a8:	dfc00517 	ldw	ra,20(sp)
1000f8ac:	dd000417 	ldw	r20,16(sp)
1000f8b0:	dcc00317 	ldw	r19,12(sp)
1000f8b4:	dc800217 	ldw	r18,8(sp)
1000f8b8:	dc400117 	ldw	r17,4(sp)
1000f8bc:	dc000017 	ldw	r16,0(sp)
1000f8c0:	dec00604 	addi	sp,sp,24
1000f8c4:	f800283a 	ret
1000f8c8:	113ffd44 	addi	r4,r2,-11
1000f8cc:	8cc00f2e 	bgeu	r17,r19,1000f90c <__b2d+0xe4>
1000f8d0:	81bffe04 	addi	r6,r16,-8
1000f8d4:	817ffe17 	ldw	r5,-8(r16)
1000f8d8:	20001326 	beq	r4,zero,1000f928 <__b2d+0x100>
1000f8dc:	00c00ac4 	movi	r3,43
1000f8e0:	1885c83a 	sub	r2,r3,r2
1000f8e4:	2886d83a 	srl	r3,r5,r2
1000f8e8:	9124983a 	sll	r18,r18,r4
1000f8ec:	90e4b03a 	or	r18,r18,r3
1000f8f0:	90cffc34 	orhi	r3,r18,16368
1000f8f4:	8980112e 	bgeu	r17,r6,1000f93c <__b2d+0x114>
1000f8f8:	81bffd17 	ldw	r6,-12(r16)
1000f8fc:	308cd83a 	srl	r6,r6,r2
1000f900:	2904983a 	sll	r2,r5,r4
1000f904:	1184b03a 	or	r2,r2,r6
1000f908:	003fe706 	br	1000f8a8 <__alt_data_end+0xf800f8a8>
1000f90c:	20000526 	beq	r4,zero,1000f924 <__b2d+0xfc>
1000f910:	9124983a 	sll	r18,r18,r4
1000f914:	000d883a 	mov	r6,zero
1000f918:	000b883a 	mov	r5,zero
1000f91c:	90cffc34 	orhi	r3,r18,16368
1000f920:	003ff706 	br	1000f900 <__alt_data_end+0xf800f900>
1000f924:	000b883a 	mov	r5,zero
1000f928:	90cffc34 	orhi	r3,r18,16368
1000f92c:	2805883a 	mov	r2,r5
1000f930:	003fdd06 	br	1000f8a8 <__alt_data_end+0xf800f8a8>
1000f934:	000b883a 	mov	r5,zero
1000f938:	003fd806 	br	1000f89c <__alt_data_end+0xf800f89c>
1000f93c:	000d883a 	mov	r6,zero
1000f940:	003fef06 	br	1000f900 <__alt_data_end+0xf800f900>

1000f944 <__d2b>:
1000f944:	defff704 	addi	sp,sp,-36
1000f948:	dc000215 	stw	r16,8(sp)
1000f94c:	3021883a 	mov	r16,r6
1000f950:	dc400315 	stw	r17,12(sp)
1000f954:	8022907a 	slli	r17,r16,1
1000f958:	dd400715 	stw	r21,28(sp)
1000f95c:	282b883a 	mov	r21,r5
1000f960:	01400044 	movi	r5,1
1000f964:	dd000615 	stw	r20,24(sp)
1000f968:	dcc00515 	stw	r19,20(sp)
1000f96c:	dc800415 	stw	r18,16(sp)
1000f970:	dfc00815 	stw	ra,32(sp)
1000f974:	3829883a 	mov	r20,r7
1000f978:	dc800917 	ldw	r18,36(sp)
1000f97c:	8822d57a 	srli	r17,r17,21
1000f980:	000ec540 	call	1000ec54 <_Balloc>
1000f984:	1027883a 	mov	r19,r2
1000f988:	00800434 	movhi	r2,16
1000f98c:	10bfffc4 	addi	r2,r2,-1
1000f990:	808c703a 	and	r6,r16,r2
1000f994:	88000126 	beq	r17,zero,1000f99c <__d2b+0x58>
1000f998:	31800434 	orhi	r6,r6,16
1000f99c:	d9800015 	stw	r6,0(sp)
1000f9a0:	a8001f26 	beq	r21,zero,1000fa20 <__d2b+0xdc>
1000f9a4:	d9000104 	addi	r4,sp,4
1000f9a8:	dd400115 	stw	r21,4(sp)
1000f9ac:	000efcc0 	call	1000efcc <__lo0bits>
1000f9b0:	d8c00017 	ldw	r3,0(sp)
1000f9b4:	1000291e 	bne	r2,zero,1000fa5c <__d2b+0x118>
1000f9b8:	d9000117 	ldw	r4,4(sp)
1000f9bc:	99000515 	stw	r4,20(r19)
1000f9c0:	1820c03a 	cmpne	r16,r3,zero
1000f9c4:	84000044 	addi	r16,r16,1
1000f9c8:	98c00615 	stw	r3,24(r19)
1000f9cc:	9c000415 	stw	r16,16(r19)
1000f9d0:	88001b1e 	bne	r17,zero,1000fa40 <__d2b+0xfc>
1000f9d4:	800690ba 	slli	r3,r16,2
1000f9d8:	10bef384 	addi	r2,r2,-1074
1000f9dc:	a0800015 	stw	r2,0(r20)
1000f9e0:	98c5883a 	add	r2,r19,r3
1000f9e4:	11000417 	ldw	r4,16(r2)
1000f9e8:	8020917a 	slli	r16,r16,5
1000f9ec:	000ef640 	call	1000ef64 <__hi0bits>
1000f9f0:	8085c83a 	sub	r2,r16,r2
1000f9f4:	90800015 	stw	r2,0(r18)
1000f9f8:	9805883a 	mov	r2,r19
1000f9fc:	dfc00817 	ldw	ra,32(sp)
1000fa00:	dd400717 	ldw	r21,28(sp)
1000fa04:	dd000617 	ldw	r20,24(sp)
1000fa08:	dcc00517 	ldw	r19,20(sp)
1000fa0c:	dc800417 	ldw	r18,16(sp)
1000fa10:	dc400317 	ldw	r17,12(sp)
1000fa14:	dc000217 	ldw	r16,8(sp)
1000fa18:	dec00904 	addi	sp,sp,36
1000fa1c:	f800283a 	ret
1000fa20:	d809883a 	mov	r4,sp
1000fa24:	000efcc0 	call	1000efcc <__lo0bits>
1000fa28:	d8c00017 	ldw	r3,0(sp)
1000fa2c:	04000044 	movi	r16,1
1000fa30:	9c000415 	stw	r16,16(r19)
1000fa34:	98c00515 	stw	r3,20(r19)
1000fa38:	10800804 	addi	r2,r2,32
1000fa3c:	883fe526 	beq	r17,zero,1000f9d4 <__alt_data_end+0xf800f9d4>
1000fa40:	8c7ef344 	addi	r17,r17,-1075
1000fa44:	88a3883a 	add	r17,r17,r2
1000fa48:	00c00d44 	movi	r3,53
1000fa4c:	a4400015 	stw	r17,0(r20)
1000fa50:	1885c83a 	sub	r2,r3,r2
1000fa54:	90800015 	stw	r2,0(r18)
1000fa58:	003fe706 	br	1000f9f8 <__alt_data_end+0xf800f9f8>
1000fa5c:	01000804 	movi	r4,32
1000fa60:	2089c83a 	sub	r4,r4,r2
1000fa64:	1908983a 	sll	r4,r3,r4
1000fa68:	d9400117 	ldw	r5,4(sp)
1000fa6c:	1886d83a 	srl	r3,r3,r2
1000fa70:	2148b03a 	or	r4,r4,r5
1000fa74:	99000515 	stw	r4,20(r19)
1000fa78:	d8c00015 	stw	r3,0(sp)
1000fa7c:	003fd006 	br	1000f9c0 <__alt_data_end+0xf800f9c0>

1000fa80 <__ratio>:
1000fa80:	defff904 	addi	sp,sp,-28
1000fa84:	dc400315 	stw	r17,12(sp)
1000fa88:	2823883a 	mov	r17,r5
1000fa8c:	d9400104 	addi	r5,sp,4
1000fa90:	dfc00615 	stw	ra,24(sp)
1000fa94:	dcc00515 	stw	r19,20(sp)
1000fa98:	dc800415 	stw	r18,16(sp)
1000fa9c:	2027883a 	mov	r19,r4
1000faa0:	dc000215 	stw	r16,8(sp)
1000faa4:	000f8280 	call	1000f828 <__b2d>
1000faa8:	8809883a 	mov	r4,r17
1000faac:	d80b883a 	mov	r5,sp
1000fab0:	1025883a 	mov	r18,r2
1000fab4:	1821883a 	mov	r16,r3
1000fab8:	000f8280 	call	1000f828 <__b2d>
1000fabc:	8a400417 	ldw	r9,16(r17)
1000fac0:	9a000417 	ldw	r8,16(r19)
1000fac4:	100d883a 	mov	r6,r2
1000fac8:	d8800017 	ldw	r2,0(sp)
1000facc:	4251c83a 	sub	r8,r8,r9
1000fad0:	4012917a 	slli	r9,r8,5
1000fad4:	da000117 	ldw	r8,4(sp)
1000fad8:	4091c83a 	sub	r8,r8,r2
1000fadc:	4251883a 	add	r8,r8,r9
1000fae0:	02000d0e 	bge	zero,r8,1000fb18 <__ratio+0x98>
1000fae4:	4010953a 	slli	r8,r8,20
1000fae8:	4421883a 	add	r16,r8,r16
1000faec:	9009883a 	mov	r4,r18
1000faf0:	800b883a 	mov	r5,r16
1000faf4:	180f883a 	mov	r7,r3
1000faf8:	00139900 	call	10013990 <__divdf3>
1000fafc:	dfc00617 	ldw	ra,24(sp)
1000fb00:	dcc00517 	ldw	r19,20(sp)
1000fb04:	dc800417 	ldw	r18,16(sp)
1000fb08:	dc400317 	ldw	r17,12(sp)
1000fb0c:	dc000217 	ldw	r16,8(sp)
1000fb10:	dec00704 	addi	sp,sp,28
1000fb14:	f800283a 	ret
1000fb18:	4010953a 	slli	r8,r8,20
1000fb1c:	1a07c83a 	sub	r3,r3,r8
1000fb20:	003ff206 	br	1000faec <__alt_data_end+0xf800faec>

1000fb24 <_mprec_log10>:
1000fb24:	defffe04 	addi	sp,sp,-8
1000fb28:	dc000015 	stw	r16,0(sp)
1000fb2c:	dfc00115 	stw	ra,4(sp)
1000fb30:	008005c4 	movi	r2,23
1000fb34:	2021883a 	mov	r16,r4
1000fb38:	11000d0e 	bge	r2,r4,1000fb70 <_mprec_log10+0x4c>
1000fb3c:	0005883a 	mov	r2,zero
1000fb40:	00cffc34 	movhi	r3,16368
1000fb44:	843fffc4 	addi	r16,r16,-1
1000fb48:	1009883a 	mov	r4,r2
1000fb4c:	180b883a 	mov	r5,r3
1000fb50:	000d883a 	mov	r6,zero
1000fb54:	01d00934 	movhi	r7,16420
1000fb58:	0007b100 	call	10007b10 <__muldf3>
1000fb5c:	803ff91e 	bne	r16,zero,1000fb44 <__alt_data_end+0xf800fb44>
1000fb60:	dfc00117 	ldw	ra,4(sp)
1000fb64:	dc000017 	ldw	r16,0(sp)
1000fb68:	dec00204 	addi	sp,sp,8
1000fb6c:	f800283a 	ret
1000fb70:	202090fa 	slli	r16,r4,3
1000fb74:	008400b4 	movhi	r2,4098
1000fb78:	10a4d804 	addi	r2,r2,-27808
1000fb7c:	1421883a 	add	r16,r2,r16
1000fb80:	80800017 	ldw	r2,0(r16)
1000fb84:	80c00117 	ldw	r3,4(r16)
1000fb88:	dfc00117 	ldw	ra,4(sp)
1000fb8c:	dc000017 	ldw	r16,0(sp)
1000fb90:	dec00204 	addi	sp,sp,8
1000fb94:	f800283a 	ret

1000fb98 <__copybits>:
1000fb98:	297fffc4 	addi	r5,r5,-1
1000fb9c:	280fd17a 	srai	r7,r5,5
1000fba0:	30c00417 	ldw	r3,16(r6)
1000fba4:	30800504 	addi	r2,r6,20
1000fba8:	39c00044 	addi	r7,r7,1
1000fbac:	18c7883a 	add	r3,r3,r3
1000fbb0:	39cf883a 	add	r7,r7,r7
1000fbb4:	18c7883a 	add	r3,r3,r3
1000fbb8:	39cf883a 	add	r7,r7,r7
1000fbbc:	10c7883a 	add	r3,r2,r3
1000fbc0:	21cf883a 	add	r7,r4,r7
1000fbc4:	10c00d2e 	bgeu	r2,r3,1000fbfc <__copybits+0x64>
1000fbc8:	200b883a 	mov	r5,r4
1000fbcc:	12000017 	ldw	r8,0(r2)
1000fbd0:	29400104 	addi	r5,r5,4
1000fbd4:	10800104 	addi	r2,r2,4
1000fbd8:	2a3fff15 	stw	r8,-4(r5)
1000fbdc:	10fffb36 	bltu	r2,r3,1000fbcc <__alt_data_end+0xf800fbcc>
1000fbe0:	1985c83a 	sub	r2,r3,r6
1000fbe4:	10bffac4 	addi	r2,r2,-21
1000fbe8:	1004d0ba 	srli	r2,r2,2
1000fbec:	10800044 	addi	r2,r2,1
1000fbf0:	1085883a 	add	r2,r2,r2
1000fbf4:	1085883a 	add	r2,r2,r2
1000fbf8:	2089883a 	add	r4,r4,r2
1000fbfc:	21c0032e 	bgeu	r4,r7,1000fc0c <__copybits+0x74>
1000fc00:	20000015 	stw	zero,0(r4)
1000fc04:	21000104 	addi	r4,r4,4
1000fc08:	21fffd36 	bltu	r4,r7,1000fc00 <__alt_data_end+0xf800fc00>
1000fc0c:	f800283a 	ret

1000fc10 <__any_on>:
1000fc10:	20c00417 	ldw	r3,16(r4)
1000fc14:	2805d17a 	srai	r2,r5,5
1000fc18:	21000504 	addi	r4,r4,20
1000fc1c:	18800d0e 	bge	r3,r2,1000fc54 <__any_on+0x44>
1000fc20:	18c7883a 	add	r3,r3,r3
1000fc24:	18c7883a 	add	r3,r3,r3
1000fc28:	20c7883a 	add	r3,r4,r3
1000fc2c:	20c0192e 	bgeu	r4,r3,1000fc94 <__any_on+0x84>
1000fc30:	18bfff17 	ldw	r2,-4(r3)
1000fc34:	18ffff04 	addi	r3,r3,-4
1000fc38:	1000041e 	bne	r2,zero,1000fc4c <__any_on+0x3c>
1000fc3c:	20c0142e 	bgeu	r4,r3,1000fc90 <__any_on+0x80>
1000fc40:	18ffff04 	addi	r3,r3,-4
1000fc44:	19400017 	ldw	r5,0(r3)
1000fc48:	283ffc26 	beq	r5,zero,1000fc3c <__alt_data_end+0xf800fc3c>
1000fc4c:	00800044 	movi	r2,1
1000fc50:	f800283a 	ret
1000fc54:	10c00a0e 	bge	r2,r3,1000fc80 <__any_on+0x70>
1000fc58:	1085883a 	add	r2,r2,r2
1000fc5c:	1085883a 	add	r2,r2,r2
1000fc60:	294007cc 	andi	r5,r5,31
1000fc64:	2087883a 	add	r3,r4,r2
1000fc68:	283ff026 	beq	r5,zero,1000fc2c <__alt_data_end+0xf800fc2c>
1000fc6c:	19800017 	ldw	r6,0(r3)
1000fc70:	3144d83a 	srl	r2,r6,r5
1000fc74:	114a983a 	sll	r5,r2,r5
1000fc78:	29bff41e 	bne	r5,r6,1000fc4c <__alt_data_end+0xf800fc4c>
1000fc7c:	003feb06 	br	1000fc2c <__alt_data_end+0xf800fc2c>
1000fc80:	1085883a 	add	r2,r2,r2
1000fc84:	1085883a 	add	r2,r2,r2
1000fc88:	2087883a 	add	r3,r4,r2
1000fc8c:	003fe706 	br	1000fc2c <__alt_data_end+0xf800fc2c>
1000fc90:	f800283a 	ret
1000fc94:	0005883a 	mov	r2,zero
1000fc98:	f800283a 	ret

1000fc9c <_realloc_r>:
1000fc9c:	defff604 	addi	sp,sp,-40
1000fca0:	dcc00315 	stw	r19,12(sp)
1000fca4:	dc400115 	stw	r17,4(sp)
1000fca8:	dfc00915 	stw	ra,36(sp)
1000fcac:	df000815 	stw	fp,32(sp)
1000fcb0:	ddc00715 	stw	r23,28(sp)
1000fcb4:	dd800615 	stw	r22,24(sp)
1000fcb8:	dd400515 	stw	r21,20(sp)
1000fcbc:	dd000415 	stw	r20,16(sp)
1000fcc0:	dc800215 	stw	r18,8(sp)
1000fcc4:	dc000015 	stw	r16,0(sp)
1000fcc8:	2827883a 	mov	r19,r5
1000fccc:	3023883a 	mov	r17,r6
1000fcd0:	2800bf26 	beq	r5,zero,1000ffd0 <_realloc_r+0x334>
1000fcd4:	2025883a 	mov	r18,r4
1000fcd8:	0014d380 	call	10014d38 <__malloc_lock>
1000fcdc:	98ffff17 	ldw	r3,-4(r19)
1000fce0:	01bfff04 	movi	r6,-4
1000fce4:	890002c4 	addi	r4,r17,11
1000fce8:	01c00584 	movi	r7,22
1000fcec:	9d7ffe04 	addi	r21,r19,-8
1000fcf0:	19a0703a 	and	r16,r3,r6
1000fcf4:	39003f2e 	bgeu	r7,r4,1000fdf4 <_realloc_r+0x158>
1000fcf8:	053ffe04 	movi	r20,-8
1000fcfc:	2528703a 	and	r20,r4,r20
1000fd00:	a00f883a 	mov	r7,r20
1000fd04:	a0008216 	blt	r20,zero,1000ff10 <_realloc_r+0x274>
1000fd08:	a4408136 	bltu	r20,r17,1000ff10 <_realloc_r+0x274>
1000fd0c:	81c03c0e 	bge	r16,r7,1000fe00 <_realloc_r+0x164>
1000fd10:	070400b4 	movhi	fp,4098
1000fd14:	e7264604 	addi	fp,fp,-26344
1000fd18:	e1000217 	ldw	r4,8(fp)
1000fd1c:	ac05883a 	add	r2,r21,r16
1000fd20:	2080bf26 	beq	r4,r2,10010020 <_realloc_r+0x384>
1000fd24:	11000117 	ldw	r4,4(r2)
1000fd28:	023fff84 	movi	r8,-2
1000fd2c:	2210703a 	and	r8,r4,r8
1000fd30:	1211883a 	add	r8,r2,r8
1000fd34:	41400117 	ldw	r5,4(r8)
1000fd38:	2940004c 	andi	r5,r5,1
1000fd3c:	28004a1e 	bne	r5,zero,1000fe68 <_realloc_r+0x1cc>
1000fd40:	017fff04 	movi	r5,-4
1000fd44:	2148703a 	and	r4,r4,r5
1000fd48:	2409883a 	add	r4,r4,r16
1000fd4c:	21c0ad0e 	bge	r4,r7,10010004 <_realloc_r+0x368>
1000fd50:	18c0004c 	andi	r3,r3,1
1000fd54:	18007f1e 	bne	r3,zero,1000ff54 <_realloc_r+0x2b8>
1000fd58:	9dfffe17 	ldw	r23,-8(r19)
1000fd5c:	adefc83a 	sub	r23,r21,r23
1000fd60:	bd800117 	ldw	r22,4(r23)
1000fd64:	b14a703a 	and	r5,r22,r5
1000fd68:	216d883a 	add	r22,r4,r5
1000fd6c:	b1c04516 	blt	r22,r7,1000fe84 <_realloc_r+0x1e8>
1000fd70:	10c00317 	ldw	r3,12(r2)
1000fd74:	10800217 	ldw	r2,8(r2)
1000fd78:	81bfff04 	addi	r6,r16,-4
1000fd7c:	bc400204 	addi	r17,r23,8
1000fd80:	10c00315 	stw	r3,12(r2)
1000fd84:	18800215 	stw	r2,8(r3)
1000fd88:	b9400217 	ldw	r5,8(r23)
1000fd8c:	b8c00317 	ldw	r3,12(r23)
1000fd90:	00800904 	movi	r2,36
1000fd94:	28c00315 	stw	r3,12(r5)
1000fd98:	19400215 	stw	r5,8(r3)
1000fd9c:	1180ef36 	bltu	r2,r6,1001015c <_realloc_r+0x4c0>
1000fda0:	008004c4 	movi	r2,19
1000fda4:	1180da2e 	bgeu	r2,r6,10010110 <_realloc_r+0x474>
1000fda8:	98800017 	ldw	r2,0(r19)
1000fdac:	b8800215 	stw	r2,8(r23)
1000fdb0:	98800117 	ldw	r2,4(r19)
1000fdb4:	b8800315 	stw	r2,12(r23)
1000fdb8:	008006c4 	movi	r2,27
1000fdbc:	1180fc2e 	bgeu	r2,r6,100101b0 <_realloc_r+0x514>
1000fdc0:	98800217 	ldw	r2,8(r19)
1000fdc4:	b8800415 	stw	r2,16(r23)
1000fdc8:	98800317 	ldw	r2,12(r19)
1000fdcc:	b8800515 	stw	r2,20(r23)
1000fdd0:	00800904 	movi	r2,36
1000fdd4:	3080421e 	bne	r6,r2,1000fee0 <_realloc_r+0x244>
1000fdd8:	98800417 	ldw	r2,16(r19)
1000fddc:	9cc00604 	addi	r19,r19,24
1000fde0:	b8c00804 	addi	r3,r23,32
1000fde4:	b8800615 	stw	r2,24(r23)
1000fde8:	98bfff17 	ldw	r2,-4(r19)
1000fdec:	b8800715 	stw	r2,28(r23)
1000fdf0:	00003d06 	br	1000fee8 <_realloc_r+0x24c>
1000fdf4:	01c00404 	movi	r7,16
1000fdf8:	3829883a 	mov	r20,r7
1000fdfc:	003fc206 	br	1000fd08 <__alt_data_end+0xf800fd08>
1000fe00:	9823883a 	mov	r17,r19
1000fe04:	850fc83a 	sub	r7,r16,r20
1000fe08:	008003c4 	movi	r2,15
1000fe0c:	18c0004c 	andi	r3,r3,1
1000fe10:	11c04336 	bltu	r2,r7,1000ff20 <_realloc_r+0x284>
1000fe14:	1c06b03a 	or	r3,r3,r16
1000fe18:	a8c00115 	stw	r3,4(r21)
1000fe1c:	ac21883a 	add	r16,r21,r16
1000fe20:	80c00117 	ldw	r3,4(r16)
1000fe24:	18c00054 	ori	r3,r3,1
1000fe28:	80c00115 	stw	r3,4(r16)
1000fe2c:	9009883a 	mov	r4,r18
1000fe30:	0014d5c0 	call	10014d5c <__malloc_unlock>
1000fe34:	8805883a 	mov	r2,r17
1000fe38:	dfc00917 	ldw	ra,36(sp)
1000fe3c:	df000817 	ldw	fp,32(sp)
1000fe40:	ddc00717 	ldw	r23,28(sp)
1000fe44:	dd800617 	ldw	r22,24(sp)
1000fe48:	dd400517 	ldw	r21,20(sp)
1000fe4c:	dd000417 	ldw	r20,16(sp)
1000fe50:	dcc00317 	ldw	r19,12(sp)
1000fe54:	dc800217 	ldw	r18,8(sp)
1000fe58:	dc400117 	ldw	r17,4(sp)
1000fe5c:	dc000017 	ldw	r16,0(sp)
1000fe60:	dec00a04 	addi	sp,sp,40
1000fe64:	f800283a 	ret
1000fe68:	18c0004c 	andi	r3,r3,1
1000fe6c:	1800391e 	bne	r3,zero,1000ff54 <_realloc_r+0x2b8>
1000fe70:	9dfffe17 	ldw	r23,-8(r19)
1000fe74:	00bfff04 	movi	r2,-4
1000fe78:	adefc83a 	sub	r23,r21,r23
1000fe7c:	b9400117 	ldw	r5,4(r23)
1000fe80:	288a703a 	and	r5,r5,r2
1000fe84:	2c2d883a 	add	r22,r5,r16
1000fe88:	b1c03216 	blt	r22,r7,1000ff54 <_realloc_r+0x2b8>
1000fe8c:	b8800317 	ldw	r2,12(r23)
1000fe90:	b8c00217 	ldw	r3,8(r23)
1000fe94:	81bfff04 	addi	r6,r16,-4
1000fe98:	01000904 	movi	r4,36
1000fe9c:	18800315 	stw	r2,12(r3)
1000fea0:	10c00215 	stw	r3,8(r2)
1000fea4:	bc400204 	addi	r17,r23,8
1000fea8:	2180ac36 	bltu	r4,r6,1001015c <_realloc_r+0x4c0>
1000feac:	008004c4 	movi	r2,19
1000feb0:	1180972e 	bgeu	r2,r6,10010110 <_realloc_r+0x474>
1000feb4:	98800017 	ldw	r2,0(r19)
1000feb8:	b8800215 	stw	r2,8(r23)
1000febc:	98800117 	ldw	r2,4(r19)
1000fec0:	b8800315 	stw	r2,12(r23)
1000fec4:	008006c4 	movi	r2,27
1000fec8:	1180b92e 	bgeu	r2,r6,100101b0 <_realloc_r+0x514>
1000fecc:	98800217 	ldw	r2,8(r19)
1000fed0:	b8800415 	stw	r2,16(r23)
1000fed4:	98800317 	ldw	r2,12(r19)
1000fed8:	b8800515 	stw	r2,20(r23)
1000fedc:	313fbe26 	beq	r6,r4,1000fdd8 <__alt_data_end+0xf800fdd8>
1000fee0:	b8c00604 	addi	r3,r23,24
1000fee4:	9cc00404 	addi	r19,r19,16
1000fee8:	98800017 	ldw	r2,0(r19)
1000feec:	b021883a 	mov	r16,r22
1000fef0:	b82b883a 	mov	r21,r23
1000fef4:	18800015 	stw	r2,0(r3)
1000fef8:	98800117 	ldw	r2,4(r19)
1000fefc:	18800115 	stw	r2,4(r3)
1000ff00:	98800217 	ldw	r2,8(r19)
1000ff04:	18800215 	stw	r2,8(r3)
1000ff08:	b8c00117 	ldw	r3,4(r23)
1000ff0c:	003fbd06 	br	1000fe04 <__alt_data_end+0xf800fe04>
1000ff10:	00800304 	movi	r2,12
1000ff14:	90800015 	stw	r2,0(r18)
1000ff18:	0005883a 	mov	r2,zero
1000ff1c:	003fc606 	br	1000fe38 <__alt_data_end+0xf800fe38>
1000ff20:	1d06b03a 	or	r3,r3,r20
1000ff24:	ad0b883a 	add	r5,r21,r20
1000ff28:	a8c00115 	stw	r3,4(r21)
1000ff2c:	38800054 	ori	r2,r7,1
1000ff30:	28800115 	stw	r2,4(r5)
1000ff34:	29cf883a 	add	r7,r5,r7
1000ff38:	38800117 	ldw	r2,4(r7)
1000ff3c:	9009883a 	mov	r4,r18
1000ff40:	29400204 	addi	r5,r5,8
1000ff44:	10800054 	ori	r2,r2,1
1000ff48:	38800115 	stw	r2,4(r7)
1000ff4c:	000d5a80 	call	1000d5a8 <_free_r>
1000ff50:	003fb606 	br	1000fe2c <__alt_data_end+0xf800fe2c>
1000ff54:	880b883a 	mov	r5,r17
1000ff58:	9009883a 	mov	r4,r18
1000ff5c:	000e1440 	call	1000e144 <_malloc_r>
1000ff60:	1023883a 	mov	r17,r2
1000ff64:	1000aa26 	beq	r2,zero,10010210 <_realloc_r+0x574>
1000ff68:	98ffff17 	ldw	r3,-4(r19)
1000ff6c:	113ffe04 	addi	r4,r2,-8
1000ff70:	00bfff84 	movi	r2,-2
1000ff74:	1884703a 	and	r2,r3,r2
1000ff78:	a885883a 	add	r2,r21,r2
1000ff7c:	20808626 	beq	r4,r2,10010198 <_realloc_r+0x4fc>
1000ff80:	81bfff04 	addi	r6,r16,-4
1000ff84:	00800904 	movi	r2,36
1000ff88:	11807036 	bltu	r2,r6,1001014c <_realloc_r+0x4b0>
1000ff8c:	00c004c4 	movi	r3,19
1000ff90:	19805636 	bltu	r3,r6,100100ec <_realloc_r+0x450>
1000ff94:	8805883a 	mov	r2,r17
1000ff98:	9807883a 	mov	r3,r19
1000ff9c:	19000017 	ldw	r4,0(r3)
1000ffa0:	11000015 	stw	r4,0(r2)
1000ffa4:	19000117 	ldw	r4,4(r3)
1000ffa8:	11000115 	stw	r4,4(r2)
1000ffac:	18c00217 	ldw	r3,8(r3)
1000ffb0:	10c00215 	stw	r3,8(r2)
1000ffb4:	980b883a 	mov	r5,r19
1000ffb8:	9009883a 	mov	r4,r18
1000ffbc:	000d5a80 	call	1000d5a8 <_free_r>
1000ffc0:	9009883a 	mov	r4,r18
1000ffc4:	0014d5c0 	call	10014d5c <__malloc_unlock>
1000ffc8:	8805883a 	mov	r2,r17
1000ffcc:	003f9a06 	br	1000fe38 <__alt_data_end+0xf800fe38>
1000ffd0:	300b883a 	mov	r5,r6
1000ffd4:	dfc00917 	ldw	ra,36(sp)
1000ffd8:	df000817 	ldw	fp,32(sp)
1000ffdc:	ddc00717 	ldw	r23,28(sp)
1000ffe0:	dd800617 	ldw	r22,24(sp)
1000ffe4:	dd400517 	ldw	r21,20(sp)
1000ffe8:	dd000417 	ldw	r20,16(sp)
1000ffec:	dcc00317 	ldw	r19,12(sp)
1000fff0:	dc800217 	ldw	r18,8(sp)
1000fff4:	dc400117 	ldw	r17,4(sp)
1000fff8:	dc000017 	ldw	r16,0(sp)
1000fffc:	dec00a04 	addi	sp,sp,40
10010000:	000e1441 	jmpi	1000e144 <_malloc_r>
10010004:	11400317 	ldw	r5,12(r2)
10010008:	10800217 	ldw	r2,8(r2)
1001000c:	9823883a 	mov	r17,r19
10010010:	2021883a 	mov	r16,r4
10010014:	11400315 	stw	r5,12(r2)
10010018:	28800215 	stw	r2,8(r5)
1001001c:	003f7906 	br	1000fe04 <__alt_data_end+0xf800fe04>
10010020:	21000117 	ldw	r4,4(r4)
10010024:	00bfff04 	movi	r2,-4
10010028:	a1800404 	addi	r6,r20,16
1001002c:	2088703a 	and	r4,r4,r2
10010030:	2409883a 	add	r4,r4,r16
10010034:	2180380e 	bge	r4,r6,10010118 <_realloc_r+0x47c>
10010038:	18c0004c 	andi	r3,r3,1
1001003c:	183fc51e 	bne	r3,zero,1000ff54 <__alt_data_end+0xf800ff54>
10010040:	9dfffe17 	ldw	r23,-8(r19)
10010044:	adefc83a 	sub	r23,r21,r23
10010048:	b9400117 	ldw	r5,4(r23)
1001004c:	288a703a 	and	r5,r5,r2
10010050:	216d883a 	add	r22,r4,r5
10010054:	b1bf8b16 	blt	r22,r6,1000fe84 <__alt_data_end+0xf800fe84>
10010058:	b8800317 	ldw	r2,12(r23)
1001005c:	b8c00217 	ldw	r3,8(r23)
10010060:	81bfff04 	addi	r6,r16,-4
10010064:	01000904 	movi	r4,36
10010068:	18800315 	stw	r2,12(r3)
1001006c:	10c00215 	stw	r3,8(r2)
10010070:	bc400204 	addi	r17,r23,8
10010074:	21805a36 	bltu	r4,r6,100101e0 <_realloc_r+0x544>
10010078:	008004c4 	movi	r2,19
1001007c:	1180562e 	bgeu	r2,r6,100101d8 <_realloc_r+0x53c>
10010080:	98800017 	ldw	r2,0(r19)
10010084:	b8800215 	stw	r2,8(r23)
10010088:	98800117 	ldw	r2,4(r19)
1001008c:	b8800315 	stw	r2,12(r23)
10010090:	008006c4 	movi	r2,27
10010094:	11805636 	bltu	r2,r6,100101f0 <_realloc_r+0x554>
10010098:	b8800404 	addi	r2,r23,16
1001009c:	9cc00204 	addi	r19,r19,8
100100a0:	98c00017 	ldw	r3,0(r19)
100100a4:	10c00015 	stw	r3,0(r2)
100100a8:	98c00117 	ldw	r3,4(r19)
100100ac:	10c00115 	stw	r3,4(r2)
100100b0:	98c00217 	ldw	r3,8(r19)
100100b4:	10c00215 	stw	r3,8(r2)
100100b8:	bd07883a 	add	r3,r23,r20
100100bc:	b505c83a 	sub	r2,r22,r20
100100c0:	e0c00215 	stw	r3,8(fp)
100100c4:	10800054 	ori	r2,r2,1
100100c8:	18800115 	stw	r2,4(r3)
100100cc:	b8800117 	ldw	r2,4(r23)
100100d0:	9009883a 	mov	r4,r18
100100d4:	1080004c 	andi	r2,r2,1
100100d8:	a0a8b03a 	or	r20,r20,r2
100100dc:	bd000115 	stw	r20,4(r23)
100100e0:	0014d5c0 	call	10014d5c <__malloc_unlock>
100100e4:	8805883a 	mov	r2,r17
100100e8:	003f5306 	br	1000fe38 <__alt_data_end+0xf800fe38>
100100ec:	98c00017 	ldw	r3,0(r19)
100100f0:	88c00015 	stw	r3,0(r17)
100100f4:	98c00117 	ldw	r3,4(r19)
100100f8:	88c00115 	stw	r3,4(r17)
100100fc:	00c006c4 	movi	r3,27
10010100:	19801d36 	bltu	r3,r6,10010178 <_realloc_r+0x4dc>
10010104:	88800204 	addi	r2,r17,8
10010108:	98c00204 	addi	r3,r19,8
1001010c:	003fa306 	br	1000ff9c <__alt_data_end+0xf800ff9c>
10010110:	8807883a 	mov	r3,r17
10010114:	003f7406 	br	1000fee8 <__alt_data_end+0xf800fee8>
10010118:	ad2b883a 	add	r21,r21,r20
1001011c:	2505c83a 	sub	r2,r4,r20
10010120:	e5400215 	stw	r21,8(fp)
10010124:	10800054 	ori	r2,r2,1
10010128:	a8800115 	stw	r2,4(r21)
1001012c:	98bfff17 	ldw	r2,-4(r19)
10010130:	9009883a 	mov	r4,r18
10010134:	1080004c 	andi	r2,r2,1
10010138:	a0a8b03a 	or	r20,r20,r2
1001013c:	9d3fff15 	stw	r20,-4(r19)
10010140:	0014d5c0 	call	10014d5c <__malloc_unlock>
10010144:	9805883a 	mov	r2,r19
10010148:	003f3b06 	br	1000fe38 <__alt_data_end+0xf800fe38>
1001014c:	8809883a 	mov	r4,r17
10010150:	980b883a 	mov	r5,r19
10010154:	000e9d40 	call	1000e9d4 <memmove>
10010158:	003f9606 	br	1000ffb4 <__alt_data_end+0xf800ffb4>
1001015c:	8809883a 	mov	r4,r17
10010160:	980b883a 	mov	r5,r19
10010164:	000e9d40 	call	1000e9d4 <memmove>
10010168:	b8c00117 	ldw	r3,4(r23)
1001016c:	b021883a 	mov	r16,r22
10010170:	b82b883a 	mov	r21,r23
10010174:	003f2306 	br	1000fe04 <__alt_data_end+0xf800fe04>
10010178:	98c00217 	ldw	r3,8(r19)
1001017c:	88c00215 	stw	r3,8(r17)
10010180:	98c00317 	ldw	r3,12(r19)
10010184:	88c00315 	stw	r3,12(r17)
10010188:	30800c26 	beq	r6,r2,100101bc <_realloc_r+0x520>
1001018c:	88800404 	addi	r2,r17,16
10010190:	98c00404 	addi	r3,r19,16
10010194:	003f8106 	br	1000ff9c <__alt_data_end+0xf800ff9c>
10010198:	893fff17 	ldw	r4,-4(r17)
1001019c:	00bfff04 	movi	r2,-4
100101a0:	9823883a 	mov	r17,r19
100101a4:	2084703a 	and	r2,r4,r2
100101a8:	80a1883a 	add	r16,r16,r2
100101ac:	003f1506 	br	1000fe04 <__alt_data_end+0xf800fe04>
100101b0:	b8c00404 	addi	r3,r23,16
100101b4:	9cc00204 	addi	r19,r19,8
100101b8:	003f4b06 	br	1000fee8 <__alt_data_end+0xf800fee8>
100101bc:	99000417 	ldw	r4,16(r19)
100101c0:	88800604 	addi	r2,r17,24
100101c4:	98c00604 	addi	r3,r19,24
100101c8:	89000415 	stw	r4,16(r17)
100101cc:	99000517 	ldw	r4,20(r19)
100101d0:	89000515 	stw	r4,20(r17)
100101d4:	003f7106 	br	1000ff9c <__alt_data_end+0xf800ff9c>
100101d8:	8805883a 	mov	r2,r17
100101dc:	003fb006 	br	100100a0 <__alt_data_end+0xf80100a0>
100101e0:	8809883a 	mov	r4,r17
100101e4:	980b883a 	mov	r5,r19
100101e8:	000e9d40 	call	1000e9d4 <memmove>
100101ec:	003fb206 	br	100100b8 <__alt_data_end+0xf80100b8>
100101f0:	98800217 	ldw	r2,8(r19)
100101f4:	b8800415 	stw	r2,16(r23)
100101f8:	98800317 	ldw	r2,12(r19)
100101fc:	b8800515 	stw	r2,20(r23)
10010200:	31000726 	beq	r6,r4,10010220 <_realloc_r+0x584>
10010204:	b8800604 	addi	r2,r23,24
10010208:	9cc00404 	addi	r19,r19,16
1001020c:	003fa406 	br	100100a0 <__alt_data_end+0xf80100a0>
10010210:	9009883a 	mov	r4,r18
10010214:	0014d5c0 	call	10014d5c <__malloc_unlock>
10010218:	0005883a 	mov	r2,zero
1001021c:	003f0606 	br	1000fe38 <__alt_data_end+0xf800fe38>
10010220:	98c00417 	ldw	r3,16(r19)
10010224:	9cc00604 	addi	r19,r19,24
10010228:	b8800804 	addi	r2,r23,32
1001022c:	b8c00615 	stw	r3,24(r23)
10010230:	98ffff17 	ldw	r3,-4(r19)
10010234:	b8c00715 	stw	r3,28(r23)
10010238:	003f9906 	br	100100a0 <__alt_data_end+0xf80100a0>

1001023c <__fpclassifyd>:
1001023c:	00a00034 	movhi	r2,32768
10010240:	10bfffc4 	addi	r2,r2,-1
10010244:	2884703a 	and	r2,r5,r2
10010248:	10000726 	beq	r2,zero,10010268 <__fpclassifyd+0x2c>
1001024c:	00fffc34 	movhi	r3,65520
10010250:	019ff834 	movhi	r6,32736
10010254:	28c7883a 	add	r3,r5,r3
10010258:	31bfffc4 	addi	r6,r6,-1
1001025c:	30c00536 	bltu	r6,r3,10010274 <__fpclassifyd+0x38>
10010260:	00800104 	movi	r2,4
10010264:	f800283a 	ret
10010268:	2000021e 	bne	r4,zero,10010274 <__fpclassifyd+0x38>
1001026c:	00800084 	movi	r2,2
10010270:	f800283a 	ret
10010274:	00dffc34 	movhi	r3,32752
10010278:	019ff834 	movhi	r6,32736
1001027c:	28cb883a 	add	r5,r5,r3
10010280:	31bfffc4 	addi	r6,r6,-1
10010284:	317ff62e 	bgeu	r6,r5,10010260 <__alt_data_end+0xf8010260>
10010288:	01400434 	movhi	r5,16
1001028c:	297fffc4 	addi	r5,r5,-1
10010290:	28800236 	bltu	r5,r2,1001029c <__fpclassifyd+0x60>
10010294:	008000c4 	movi	r2,3
10010298:	f800283a 	ret
1001029c:	10c00226 	beq	r2,r3,100102a8 <__fpclassifyd+0x6c>
100102a0:	0005883a 	mov	r2,zero
100102a4:	f800283a 	ret
100102a8:	2005003a 	cmpeq	r2,r4,zero
100102ac:	f800283a 	ret

100102b0 <_sbrk_r>:
100102b0:	defffd04 	addi	sp,sp,-12
100102b4:	dc000015 	stw	r16,0(sp)
100102b8:	040400b4 	movhi	r16,4098
100102bc:	dc400115 	stw	r17,4(sp)
100102c0:	84329c04 	addi	r16,r16,-13712
100102c4:	2023883a 	mov	r17,r4
100102c8:	2809883a 	mov	r4,r5
100102cc:	dfc00215 	stw	ra,8(sp)
100102d0:	80000015 	stw	zero,0(r16)
100102d4:	0014f540 	call	10014f54 <sbrk>
100102d8:	00ffffc4 	movi	r3,-1
100102dc:	10c00526 	beq	r2,r3,100102f4 <_sbrk_r+0x44>
100102e0:	dfc00217 	ldw	ra,8(sp)
100102e4:	dc400117 	ldw	r17,4(sp)
100102e8:	dc000017 	ldw	r16,0(sp)
100102ec:	dec00304 	addi	sp,sp,12
100102f0:	f800283a 	ret
100102f4:	80c00017 	ldw	r3,0(r16)
100102f8:	183ff926 	beq	r3,zero,100102e0 <__alt_data_end+0xf80102e0>
100102fc:	88c00015 	stw	r3,0(r17)
10010300:	003ff706 	br	100102e0 <__alt_data_end+0xf80102e0>

10010304 <__sread>:
10010304:	defffe04 	addi	sp,sp,-8
10010308:	dc000015 	stw	r16,0(sp)
1001030c:	2821883a 	mov	r16,r5
10010310:	2940038f 	ldh	r5,14(r5)
10010314:	dfc00115 	stw	ra,4(sp)
10010318:	0011fc00 	call	10011fc0 <_read_r>
1001031c:	10000716 	blt	r2,zero,1001033c <__sread+0x38>
10010320:	80c01417 	ldw	r3,80(r16)
10010324:	1887883a 	add	r3,r3,r2
10010328:	80c01415 	stw	r3,80(r16)
1001032c:	dfc00117 	ldw	ra,4(sp)
10010330:	dc000017 	ldw	r16,0(sp)
10010334:	dec00204 	addi	sp,sp,8
10010338:	f800283a 	ret
1001033c:	80c0030b 	ldhu	r3,12(r16)
10010340:	18fbffcc 	andi	r3,r3,61439
10010344:	80c0030d 	sth	r3,12(r16)
10010348:	dfc00117 	ldw	ra,4(sp)
1001034c:	dc000017 	ldw	r16,0(sp)
10010350:	dec00204 	addi	sp,sp,8
10010354:	f800283a 	ret

10010358 <__seofread>:
10010358:	0005883a 	mov	r2,zero
1001035c:	f800283a 	ret

10010360 <__swrite>:
10010360:	2880030b 	ldhu	r2,12(r5)
10010364:	defffb04 	addi	sp,sp,-20
10010368:	dcc00315 	stw	r19,12(sp)
1001036c:	dc800215 	stw	r18,8(sp)
10010370:	dc400115 	stw	r17,4(sp)
10010374:	dc000015 	stw	r16,0(sp)
10010378:	dfc00415 	stw	ra,16(sp)
1001037c:	10c0400c 	andi	r3,r2,256
10010380:	2821883a 	mov	r16,r5
10010384:	2027883a 	mov	r19,r4
10010388:	3025883a 	mov	r18,r6
1001038c:	3823883a 	mov	r17,r7
10010390:	18000526 	beq	r3,zero,100103a8 <__swrite+0x48>
10010394:	2940038f 	ldh	r5,14(r5)
10010398:	000d883a 	mov	r6,zero
1001039c:	01c00084 	movi	r7,2
100103a0:	0011f640 	call	10011f64 <_lseek_r>
100103a4:	8080030b 	ldhu	r2,12(r16)
100103a8:	8140038f 	ldh	r5,14(r16)
100103ac:	10bbffcc 	andi	r2,r2,61439
100103b0:	9809883a 	mov	r4,r19
100103b4:	900d883a 	mov	r6,r18
100103b8:	880f883a 	mov	r7,r17
100103bc:	8080030d 	sth	r2,12(r16)
100103c0:	dfc00417 	ldw	ra,16(sp)
100103c4:	dcc00317 	ldw	r19,12(sp)
100103c8:	dc800217 	ldw	r18,8(sp)
100103cc:	dc400117 	ldw	r17,4(sp)
100103d0:	dc000017 	ldw	r16,0(sp)
100103d4:	dec00504 	addi	sp,sp,20
100103d8:	0011a401 	jmpi	10011a40 <_write_r>

100103dc <__sseek>:
100103dc:	defffe04 	addi	sp,sp,-8
100103e0:	dc000015 	stw	r16,0(sp)
100103e4:	2821883a 	mov	r16,r5
100103e8:	2940038f 	ldh	r5,14(r5)
100103ec:	dfc00115 	stw	ra,4(sp)
100103f0:	0011f640 	call	10011f64 <_lseek_r>
100103f4:	00ffffc4 	movi	r3,-1
100103f8:	10c00826 	beq	r2,r3,1001041c <__sseek+0x40>
100103fc:	80c0030b 	ldhu	r3,12(r16)
10010400:	80801415 	stw	r2,80(r16)
10010404:	18c40014 	ori	r3,r3,4096
10010408:	80c0030d 	sth	r3,12(r16)
1001040c:	dfc00117 	ldw	ra,4(sp)
10010410:	dc000017 	ldw	r16,0(sp)
10010414:	dec00204 	addi	sp,sp,8
10010418:	f800283a 	ret
1001041c:	80c0030b 	ldhu	r3,12(r16)
10010420:	18fbffcc 	andi	r3,r3,61439
10010424:	80c0030d 	sth	r3,12(r16)
10010428:	dfc00117 	ldw	ra,4(sp)
1001042c:	dc000017 	ldw	r16,0(sp)
10010430:	dec00204 	addi	sp,sp,8
10010434:	f800283a 	ret

10010438 <__sclose>:
10010438:	2940038f 	ldh	r5,14(r5)
1001043c:	0011a9c1 	jmpi	10011a9c <_close_r>

10010440 <strcmp>:
10010440:	2144b03a 	or	r2,r4,r5
10010444:	108000cc 	andi	r2,r2,3
10010448:	1000171e 	bne	r2,zero,100104a8 <strcmp+0x68>
1001044c:	20800017 	ldw	r2,0(r4)
10010450:	28c00017 	ldw	r3,0(r5)
10010454:	10c0141e 	bne	r2,r3,100104a8 <strcmp+0x68>
10010458:	027fbff4 	movhi	r9,65279
1001045c:	4a7fbfc4 	addi	r9,r9,-257
10010460:	0086303a 	nor	r3,zero,r2
10010464:	02202074 	movhi	r8,32897
10010468:	1245883a 	add	r2,r2,r9
1001046c:	42202004 	addi	r8,r8,-32640
10010470:	10c4703a 	and	r2,r2,r3
10010474:	1204703a 	and	r2,r2,r8
10010478:	10000226 	beq	r2,zero,10010484 <strcmp+0x44>
1001047c:	00001706 	br	100104dc <strcmp+0x9c>
10010480:	1000161e 	bne	r2,zero,100104dc <strcmp+0x9c>
10010484:	21000104 	addi	r4,r4,4
10010488:	20c00017 	ldw	r3,0(r4)
1001048c:	29400104 	addi	r5,r5,4
10010490:	29800017 	ldw	r6,0(r5)
10010494:	1a4f883a 	add	r7,r3,r9
10010498:	00c4303a 	nor	r2,zero,r3
1001049c:	3884703a 	and	r2,r7,r2
100104a0:	1204703a 	and	r2,r2,r8
100104a4:	19bff626 	beq	r3,r6,10010480 <__alt_data_end+0xf8010480>
100104a8:	20800007 	ldb	r2,0(r4)
100104ac:	1000051e 	bne	r2,zero,100104c4 <strcmp+0x84>
100104b0:	00000606 	br	100104cc <strcmp+0x8c>
100104b4:	21000044 	addi	r4,r4,1
100104b8:	20800007 	ldb	r2,0(r4)
100104bc:	29400044 	addi	r5,r5,1
100104c0:	10000226 	beq	r2,zero,100104cc <strcmp+0x8c>
100104c4:	28c00007 	ldb	r3,0(r5)
100104c8:	10fffa26 	beq	r2,r3,100104b4 <__alt_data_end+0xf80104b4>
100104cc:	20800003 	ldbu	r2,0(r4)
100104d0:	28c00003 	ldbu	r3,0(r5)
100104d4:	10c5c83a 	sub	r2,r2,r3
100104d8:	f800283a 	ret
100104dc:	0005883a 	mov	r2,zero
100104e0:	f800283a 	ret

100104e4 <__sprint_r.part.0>:
100104e4:	28801917 	ldw	r2,100(r5)
100104e8:	defff604 	addi	sp,sp,-40
100104ec:	dd400515 	stw	r21,20(sp)
100104f0:	dcc00315 	stw	r19,12(sp)
100104f4:	dfc00915 	stw	ra,36(sp)
100104f8:	df000815 	stw	fp,32(sp)
100104fc:	ddc00715 	stw	r23,28(sp)
10010500:	dd800615 	stw	r22,24(sp)
10010504:	dd000415 	stw	r20,16(sp)
10010508:	dc800215 	stw	r18,8(sp)
1001050c:	dc400115 	stw	r17,4(sp)
10010510:	dc000015 	stw	r16,0(sp)
10010514:	1088000c 	andi	r2,r2,8192
10010518:	2827883a 	mov	r19,r5
1001051c:	302b883a 	mov	r21,r6
10010520:	10002d26 	beq	r2,zero,100105d8 <__sprint_r.part.0+0xf4>
10010524:	30800217 	ldw	r2,8(r6)
10010528:	35800017 	ldw	r22,0(r6)
1001052c:	10002826 	beq	r2,zero,100105d0 <__sprint_r.part.0+0xec>
10010530:	2029883a 	mov	r20,r4
10010534:	b5c00104 	addi	r23,r22,4
10010538:	04bfffc4 	movi	r18,-1
1001053c:	bc400017 	ldw	r17,0(r23)
10010540:	b4000017 	ldw	r16,0(r22)
10010544:	0039883a 	mov	fp,zero
10010548:	8822d0ba 	srli	r17,r17,2
1001054c:	04400316 	blt	zero,r17,1001055c <__sprint_r.part.0+0x78>
10010550:	00001706 	br	100105b0 <__sprint_r.part.0+0xcc>
10010554:	84000104 	addi	r16,r16,4
10010558:	8f001526 	beq	r17,fp,100105b0 <__sprint_r.part.0+0xcc>
1001055c:	81400017 	ldw	r5,0(r16)
10010560:	a009883a 	mov	r4,r20
10010564:	980d883a 	mov	r6,r19
10010568:	0011cdc0 	call	10011cdc <_fputwc_r>
1001056c:	e7000044 	addi	fp,fp,1
10010570:	14bff81e 	bne	r2,r18,10010554 <__alt_data_end+0xf8010554>
10010574:	9005883a 	mov	r2,r18
10010578:	a8000215 	stw	zero,8(r21)
1001057c:	a8000115 	stw	zero,4(r21)
10010580:	dfc00917 	ldw	ra,36(sp)
10010584:	df000817 	ldw	fp,32(sp)
10010588:	ddc00717 	ldw	r23,28(sp)
1001058c:	dd800617 	ldw	r22,24(sp)
10010590:	dd400517 	ldw	r21,20(sp)
10010594:	dd000417 	ldw	r20,16(sp)
10010598:	dcc00317 	ldw	r19,12(sp)
1001059c:	dc800217 	ldw	r18,8(sp)
100105a0:	dc400117 	ldw	r17,4(sp)
100105a4:	dc000017 	ldw	r16,0(sp)
100105a8:	dec00a04 	addi	sp,sp,40
100105ac:	f800283a 	ret
100105b0:	a8c00217 	ldw	r3,8(r21)
100105b4:	8c63883a 	add	r17,r17,r17
100105b8:	8c63883a 	add	r17,r17,r17
100105bc:	1c45c83a 	sub	r2,r3,r17
100105c0:	a8800215 	stw	r2,8(r21)
100105c4:	b5800204 	addi	r22,r22,8
100105c8:	bdc00204 	addi	r23,r23,8
100105cc:	103fdb1e 	bne	r2,zero,1001053c <__alt_data_end+0xf801053c>
100105d0:	0005883a 	mov	r2,zero
100105d4:	003fe806 	br	10010578 <__alt_data_end+0xf8010578>
100105d8:	000d8980 	call	1000d898 <__sfvwrite_r>
100105dc:	003fe606 	br	10010578 <__alt_data_end+0xf8010578>

100105e0 <__sprint_r>:
100105e0:	30c00217 	ldw	r3,8(r6)
100105e4:	18000126 	beq	r3,zero,100105ec <__sprint_r+0xc>
100105e8:	00104e41 	jmpi	100104e4 <__sprint_r.part.0>
100105ec:	30000115 	stw	zero,4(r6)
100105f0:	0005883a 	mov	r2,zero
100105f4:	f800283a 	ret

100105f8 <___vfiprintf_internal_r>:
100105f8:	defeca04 	addi	sp,sp,-1240
100105fc:	dcc12f15 	stw	r19,1212(sp)
10010600:	dfc13515 	stw	ra,1236(sp)
10010604:	df013415 	stw	fp,1232(sp)
10010608:	ddc13315 	stw	r23,1228(sp)
1001060c:	dd813215 	stw	r22,1224(sp)
10010610:	dd413115 	stw	r21,1220(sp)
10010614:	dd013015 	stw	r20,1216(sp)
10010618:	dc812e15 	stw	r18,1208(sp)
1001061c:	dc412d15 	stw	r17,1204(sp)
10010620:	dc012c15 	stw	r16,1200(sp)
10010624:	d9012115 	stw	r4,1156(sp)
10010628:	d9412015 	stw	r5,1152(sp)
1001062c:	d9c12315 	stw	r7,1164(sp)
10010630:	3027883a 	mov	r19,r6
10010634:	20000226 	beq	r4,zero,10010640 <___vfiprintf_internal_r+0x48>
10010638:	20800e17 	ldw	r2,56(r4)
1001063c:	1000f726 	beq	r2,zero,10010a1c <___vfiprintf_internal_r+0x424>
10010640:	d8812017 	ldw	r2,1152(sp)
10010644:	10c0030b 	ldhu	r3,12(r2)
10010648:	1908000c 	andi	r4,r3,8192
1001064c:	1805883a 	mov	r2,r3
10010650:	2000081e 	bne	r4,zero,10010674 <___vfiprintf_internal_r+0x7c>
10010654:	d9412017 	ldw	r5,1152(sp)
10010658:	18880014 	ori	r2,r3,8192
1001065c:	00f7ffc4 	movi	r3,-8193
10010660:	29001917 	ldw	r4,100(r5)
10010664:	2880030d 	sth	r2,12(r5)
10010668:	20c8703a 	and	r4,r4,r3
1001066c:	29001915 	stw	r4,100(r5)
10010670:	1007883a 	mov	r3,r2
10010674:	1100020c 	andi	r4,r2,8
10010678:	2000a726 	beq	r4,zero,10010918 <___vfiprintf_internal_r+0x320>
1001067c:	d9412017 	ldw	r5,1152(sp)
10010680:	29000417 	ldw	r4,16(r5)
10010684:	2000a426 	beq	r4,zero,10010918 <___vfiprintf_internal_r+0x320>
10010688:	1080068c 	andi	r2,r2,26
1001068c:	01000284 	movi	r4,10
10010690:	1100ab26 	beq	r2,r4,10010940 <___vfiprintf_internal_r+0x348>
10010694:	d9010a04 	addi	r4,sp,1064
10010698:	d94109c4 	addi	r5,sp,1063
1001069c:	070400b4 	movhi	fp,4098
100106a0:	044400b4 	movhi	r17,4098
100106a4:	2145c83a 	sub	r2,r4,r5
100106a8:	e7250e04 	addi	fp,fp,-27592
100106ac:	8c650a04 	addi	r17,r17,-27608
100106b0:	d9011e15 	stw	r4,1144(sp)
100106b4:	d9411f15 	stw	r5,1148(sp)
100106b8:	dec11a15 	stw	sp,1128(sp)
100106bc:	d8011c15 	stw	zero,1136(sp)
100106c0:	d8011b15 	stw	zero,1132(sp)
100106c4:	d8012715 	stw	zero,1180(sp)
100106c8:	d8012515 	stw	zero,1172(sp)
100106cc:	d811883a 	mov	r8,sp
100106d0:	d8812815 	stw	r2,1184(sp)
100106d4:	982f883a 	mov	r23,r19
100106d8:	b8800007 	ldb	r2,0(r23)
100106dc:	1003b026 	beq	r2,zero,100115a0 <___vfiprintf_internal_r+0xfa8>
100106e0:	01000944 	movi	r4,37
100106e4:	1103ae26 	beq	r2,r4,100115a0 <___vfiprintf_internal_r+0xfa8>
100106e8:	b805883a 	mov	r2,r23
100106ec:	00000106 	br	100106f4 <___vfiprintf_internal_r+0xfc>
100106f0:	19000326 	beq	r3,r4,10010700 <___vfiprintf_internal_r+0x108>
100106f4:	10800044 	addi	r2,r2,1
100106f8:	10c00007 	ldb	r3,0(r2)
100106fc:	183ffc1e 	bne	r3,zero,100106f0 <__alt_data_end+0xf80106f0>
10010700:	15e1c83a 	sub	r16,r2,r23
10010704:	1029883a 	mov	r20,r2
10010708:	80001026 	beq	r16,zero,1001074c <___vfiprintf_internal_r+0x154>
1001070c:	d8c11c17 	ldw	r3,1136(sp)
10010710:	d8811b17 	ldw	r2,1132(sp)
10010714:	45c00015 	stw	r23,0(r8)
10010718:	80c7883a 	add	r3,r16,r3
1001071c:	10800044 	addi	r2,r2,1
10010720:	44000115 	stw	r16,4(r8)
10010724:	d8c11c15 	stw	r3,1136(sp)
10010728:	d8811b15 	stw	r2,1132(sp)
1001072c:	010001c4 	movi	r4,7
10010730:	2080740e 	bge	r4,r2,10010904 <___vfiprintf_internal_r+0x30c>
10010734:	1803a71e 	bne	r3,zero,100115d4 <___vfiprintf_internal_r+0xfdc>
10010738:	d8c12517 	ldw	r3,1172(sp)
1001073c:	d8011b15 	stw	zero,1132(sp)
10010740:	d811883a 	mov	r8,sp
10010744:	1c07883a 	add	r3,r3,r16
10010748:	d8c12515 	stw	r3,1172(sp)
1001074c:	a0800007 	ldb	r2,0(r20)
10010750:	1002bf26 	beq	r2,zero,10011250 <___vfiprintf_internal_r+0xc58>
10010754:	a5c00044 	addi	r23,r20,1
10010758:	a1800047 	ldb	r6,1(r20)
1001075c:	d8011d85 	stb	zero,1142(sp)
10010760:	d8012205 	stb	zero,1160(sp)
10010764:	043fffc4 	movi	r16,-1
10010768:	d8012415 	stw	zero,1168(sp)
1001076c:	0025883a 	mov	r18,zero
10010770:	05001604 	movi	r20,88
10010774:	05400244 	movi	r21,9
10010778:	4027883a 	mov	r19,r8
1001077c:	bdc00044 	addi	r23,r23,1
10010780:	30bff804 	addi	r2,r6,-32
10010784:	a0825636 	bltu	r20,r2,100110e0 <___vfiprintf_internal_r+0xae8>
10010788:	100490ba 	slli	r2,r2,2
1001078c:	01040074 	movhi	r4,4097
10010790:	2101e804 	addi	r4,r4,1952
10010794:	1105883a 	add	r2,r2,r4
10010798:	10800017 	ldw	r2,0(r2)
1001079c:	1000683a 	jmp	r2
100107a0:	10011070 	cmpltui	zero,r2,1089
100107a4:	100110e0 	cmpeqi	zero,r2,1091
100107a8:	100110e0 	cmpeqi	zero,r2,1091
100107ac:	100110d4 	ori	zero,r2,1091
100107b0:	100110e0 	cmpeqi	zero,r2,1091
100107b4:	100110e0 	cmpeqi	zero,r2,1091
100107b8:	100110e0 	cmpeqi	zero,r2,1091
100107bc:	100110e0 	cmpeqi	zero,r2,1091
100107c0:	100110e0 	cmpeqi	zero,r2,1091
100107c4:	100110e0 	cmpeqi	zero,r2,1091
100107c8:	10010e60 	cmpeqi	zero,r2,1081
100107cc:	10011088 	cmpgei	zero,r2,1090
100107d0:	100110e0 	cmpeqi	zero,r2,1091
100107d4:	10010a34 	orhi	zero,r2,1064
100107d8:	10010e84 	addi	zero,r2,1082
100107dc:	100110e0 	cmpeqi	zero,r2,1091
100107e0:	10010a40 	call	110010a4 <_gp+0xfde17c>
100107e4:	10010a4c 	andi	zero,r2,1065
100107e8:	10010a4c 	andi	zero,r2,1065
100107ec:	10010a4c 	andi	zero,r2,1065
100107f0:	10010a4c 	andi	zero,r2,1065
100107f4:	10010a4c 	andi	zero,r2,1065
100107f8:	10010a4c 	andi	zero,r2,1065
100107fc:	10010a4c 	andi	zero,r2,1065
10010800:	10010a4c 	andi	zero,r2,1065
10010804:	10010a4c 	andi	zero,r2,1065
10010808:	100110e0 	cmpeqi	zero,r2,1091
1001080c:	100110e0 	cmpeqi	zero,r2,1091
10010810:	100110e0 	cmpeqi	zero,r2,1091
10010814:	100110e0 	cmpeqi	zero,r2,1091
10010818:	100110e0 	cmpeqi	zero,r2,1091
1001081c:	100110e0 	cmpeqi	zero,r2,1091
10010820:	100110e0 	cmpeqi	zero,r2,1091
10010824:	100110e0 	cmpeqi	zero,r2,1091
10010828:	100110e0 	cmpeqi	zero,r2,1091
1001082c:	100110e0 	cmpeqi	zero,r2,1091
10010830:	10010a8c 	andi	zero,r2,1066
10010834:	100110e0 	cmpeqi	zero,r2,1091
10010838:	100110e0 	cmpeqi	zero,r2,1091
1001083c:	100110e0 	cmpeqi	zero,r2,1091
10010840:	100110e0 	cmpeqi	zero,r2,1091
10010844:	100110e0 	cmpeqi	zero,r2,1091
10010848:	100110e0 	cmpeqi	zero,r2,1091
1001084c:	100110e0 	cmpeqi	zero,r2,1091
10010850:	100110e0 	cmpeqi	zero,r2,1091
10010854:	100110e0 	cmpeqi	zero,r2,1091
10010858:	100110e0 	cmpeqi	zero,r2,1091
1001085c:	10010d7c 	xorhi	zero,r2,1077
10010860:	100110e0 	cmpeqi	zero,r2,1091
10010864:	100110e0 	cmpeqi	zero,r2,1091
10010868:	100110e0 	cmpeqi	zero,r2,1091
1001086c:	100110e0 	cmpeqi	zero,r2,1091
10010870:	100110e0 	cmpeqi	zero,r2,1091
10010874:	10010dbc 	xorhi	zero,r2,1078
10010878:	100110e0 	cmpeqi	zero,r2,1091
1001087c:	100110e0 	cmpeqi	zero,r2,1091
10010880:	10010e00 	call	110010e0 <_gp+0xfde1b8>
10010884:	100110e0 	cmpeqi	zero,r2,1091
10010888:	100110e0 	cmpeqi	zero,r2,1091
1001088c:	100110e0 	cmpeqi	zero,r2,1091
10010890:	100110e0 	cmpeqi	zero,r2,1091
10010894:	100110e0 	cmpeqi	zero,r2,1091
10010898:	100110e0 	cmpeqi	zero,r2,1091
1001089c:	100110e0 	cmpeqi	zero,r2,1091
100108a0:	100110e0 	cmpeqi	zero,r2,1091
100108a4:	100110e0 	cmpeqi	zero,r2,1091
100108a8:	100110e0 	cmpeqi	zero,r2,1091
100108ac:	10010d48 	cmpgei	zero,r2,1077
100108b0:	10011098 	cmpnei	zero,r2,1090
100108b4:	100110e0 	cmpeqi	zero,r2,1091
100108b8:	100110e0 	cmpeqi	zero,r2,1091
100108bc:	100110e0 	cmpeqi	zero,r2,1091
100108c0:	10010ed4 	ori	zero,r2,1083
100108c4:	10011098 	cmpnei	zero,r2,1090
100108c8:	100110e0 	cmpeqi	zero,r2,1091
100108cc:	100110e0 	cmpeqi	zero,r2,1091
100108d0:	10010dec 	andhi	zero,r2,1079
100108d4:	100110e0 	cmpeqi	zero,r2,1091
100108d8:	10011038 	rdprs	zero,r2,1088
100108dc:	10010fc0 	call	110010fc <_gp+0xfde1d4>
100108e0:	10010ff4 	orhi	zero,r2,1087
100108e4:	10010ee0 	cmpeqi	zero,r2,1083
100108e8:	100110e0 	cmpeqi	zero,r2,1091
100108ec:	10010eec 	andhi	zero,r2,1083
100108f0:	100110e0 	cmpeqi	zero,r2,1091
100108f4:	10010f48 	cmpgei	zero,r2,1085
100108f8:	100110e0 	cmpeqi	zero,r2,1091
100108fc:	100110e0 	cmpeqi	zero,r2,1091
10010900:	10010f7c 	xorhi	zero,r2,1085
10010904:	42000204 	addi	r8,r8,8
10010908:	d8c12517 	ldw	r3,1172(sp)
1001090c:	1c07883a 	add	r3,r3,r16
10010910:	d8c12515 	stw	r3,1172(sp)
10010914:	003f8d06 	br	1001074c <__alt_data_end+0xf801074c>
10010918:	d9012117 	ldw	r4,1156(sp)
1001091c:	d9412017 	ldw	r5,1152(sp)
10010920:	000b3f80 	call	1000b3f8 <__swsetup_r>
10010924:	1000301e 	bne	r2,zero,100109e8 <___vfiprintf_internal_r+0x3f0>
10010928:	d8812017 	ldw	r2,1152(sp)
1001092c:	01000284 	movi	r4,10
10010930:	10c0030b 	ldhu	r3,12(r2)
10010934:	1805883a 	mov	r2,r3
10010938:	1080068c 	andi	r2,r2,26
1001093c:	113f551e 	bne	r2,r4,10010694 <__alt_data_end+0xf8010694>
10010940:	d9012017 	ldw	r4,1152(sp)
10010944:	2080038b 	ldhu	r2,14(r4)
10010948:	113fffcc 	andi	r4,r2,65535
1001094c:	2120001c 	xori	r4,r4,32768
10010950:	21200004 	addi	r4,r4,-32768
10010954:	203f4f16 	blt	r4,zero,10010694 <__alt_data_end+0xf8010694>
10010958:	d9412017 	ldw	r5,1152(sp)
1001095c:	d9012117 	ldw	r4,1156(sp)
10010960:	d9c12317 	ldw	r7,1164(sp)
10010964:	2b001917 	ldw	r12,100(r5)
10010968:	2ac00717 	ldw	r11,28(r5)
1001096c:	2a800917 	ldw	r10,36(r5)
10010970:	02010004 	movi	r8,1024
10010974:	18ffff4c 	andi	r3,r3,65533
10010978:	da0b883a 	add	r5,sp,r8
1001097c:	980d883a 	mov	r6,r19
10010980:	d8c1030d 	sth	r3,1036(sp)
10010984:	db011915 	stw	r12,1124(sp)
10010988:	d881038d 	sth	r2,1038(sp)
1001098c:	dac10715 	stw	r11,1052(sp)
10010990:	da810915 	stw	r10,1060(sp)
10010994:	dec10015 	stw	sp,1024(sp)
10010998:	dec10415 	stw	sp,1040(sp)
1001099c:	da010215 	stw	r8,1032(sp)
100109a0:	da010515 	stw	r8,1044(sp)
100109a4:	d8010615 	stw	zero,1048(sp)
100109a8:	00105f80 	call	100105f8 <___vfiprintf_internal_r>
100109ac:	1021883a 	mov	r16,r2
100109b0:	10000416 	blt	r2,zero,100109c4 <___vfiprintf_internal_r+0x3cc>
100109b4:	d9012117 	ldw	r4,1156(sp)
100109b8:	d9410004 	addi	r5,sp,1024
100109bc:	000ce780 	call	1000ce78 <_fflush_r>
100109c0:	10040f1e 	bne	r2,zero,10011a00 <___vfiprintf_internal_r+0x1408>
100109c4:	d881030b 	ldhu	r2,1036(sp)
100109c8:	1080100c 	andi	r2,r2,64
100109cc:	10000426 	beq	r2,zero,100109e0 <___vfiprintf_internal_r+0x3e8>
100109d0:	d8c12017 	ldw	r3,1152(sp)
100109d4:	1880030b 	ldhu	r2,12(r3)
100109d8:	10801014 	ori	r2,r2,64
100109dc:	1880030d 	sth	r2,12(r3)
100109e0:	8005883a 	mov	r2,r16
100109e4:	00000106 	br	100109ec <___vfiprintf_internal_r+0x3f4>
100109e8:	00bfffc4 	movi	r2,-1
100109ec:	dfc13517 	ldw	ra,1236(sp)
100109f0:	df013417 	ldw	fp,1232(sp)
100109f4:	ddc13317 	ldw	r23,1228(sp)
100109f8:	dd813217 	ldw	r22,1224(sp)
100109fc:	dd413117 	ldw	r21,1220(sp)
10010a00:	dd013017 	ldw	r20,1216(sp)
10010a04:	dcc12f17 	ldw	r19,1212(sp)
10010a08:	dc812e17 	ldw	r18,1208(sp)
10010a0c:	dc412d17 	ldw	r17,1204(sp)
10010a10:	dc012c17 	ldw	r16,1200(sp)
10010a14:	dec13604 	addi	sp,sp,1240
10010a18:	f800283a 	ret
10010a1c:	000d4340 	call	1000d434 <__sinit>
10010a20:	003f0706 	br	10010640 <__alt_data_end+0xf8010640>
10010a24:	d8c12417 	ldw	r3,1168(sp)
10010a28:	d8812315 	stw	r2,1164(sp)
10010a2c:	00c7c83a 	sub	r3,zero,r3
10010a30:	d8c12415 	stw	r3,1168(sp)
10010a34:	94800114 	ori	r18,r18,4
10010a38:	b9800007 	ldb	r6,0(r23)
10010a3c:	003f4f06 	br	1001077c <__alt_data_end+0xf801077c>
10010a40:	94802014 	ori	r18,r18,128
10010a44:	b9800007 	ldb	r6,0(r23)
10010a48:	003f4c06 	br	1001077c <__alt_data_end+0xf801077c>
10010a4c:	dc012615 	stw	r16,1176(sp)
10010a50:	d8012415 	stw	zero,1168(sp)
10010a54:	35bff404 	addi	r22,r6,-48
10010a58:	0009883a 	mov	r4,zero
10010a5c:	b821883a 	mov	r16,r23
10010a60:	01400284 	movi	r5,10
10010a64:	0006df00 	call	10006df0 <__mulsi3>
10010a68:	81800007 	ldb	r6,0(r16)
10010a6c:	1589883a 	add	r4,r2,r22
10010a70:	bdc00044 	addi	r23,r23,1
10010a74:	35bff404 	addi	r22,r6,-48
10010a78:	b821883a 	mov	r16,r23
10010a7c:	adbff82e 	bgeu	r21,r22,10010a60 <__alt_data_end+0xf8010a60>
10010a80:	d9012415 	stw	r4,1168(sp)
10010a84:	dc012617 	ldw	r16,1176(sp)
10010a88:	003f3d06 	br	10010780 <__alt_data_end+0xf8010780>
10010a8c:	d8c12203 	ldbu	r3,1160(sp)
10010a90:	94800414 	ori	r18,r18,16
10010a94:	9080080c 	andi	r2,r18,32
10010a98:	d8c11d85 	stb	r3,1142(sp)
10010a9c:	9811883a 	mov	r8,r19
10010aa0:	d8c12317 	ldw	r3,1164(sp)
10010aa4:	10018226 	beq	r2,zero,100110b0 <___vfiprintf_internal_r+0xab8>
10010aa8:	d9012317 	ldw	r4,1164(sp)
10010aac:	18800117 	ldw	r2,4(r3)
10010ab0:	1cc00017 	ldw	r19,0(r3)
10010ab4:	21000204 	addi	r4,r4,8
10010ab8:	d9012315 	stw	r4,1164(sp)
10010abc:	102b883a 	mov	r21,r2
10010ac0:	10030016 	blt	r2,zero,100116c4 <___vfiprintf_internal_r+0x10cc>
10010ac4:	dd811d83 	ldbu	r22,1142(sp)
10010ac8:	8029883a 	mov	r20,r16
10010acc:	00800044 	movi	r2,1
10010ad0:	9d46b03a 	or	r3,r19,r21
10010ad4:	80000216 	blt	r16,zero,10010ae0 <___vfiprintf_internal_r+0x4e8>
10010ad8:	013fdfc4 	movi	r4,-129
10010adc:	9124703a 	and	r18,r18,r4
10010ae0:	1801b41e 	bne	r3,zero,100111b4 <___vfiprintf_internal_r+0xbbc>
10010ae4:	80028126 	beq	r16,zero,100114ec <___vfiprintf_internal_r+0xef4>
10010ae8:	10803fcc 	andi	r2,r2,255
10010aec:	00c00044 	movi	r3,1
10010af0:	10c1d126 	beq	r2,r3,10011238 <___vfiprintf_internal_r+0xc40>
10010af4:	00c00084 	movi	r3,2
10010af8:	10c28626 	beq	r2,r3,10011514 <___vfiprintf_internal_r+0xf1c>
10010afc:	d8c10a04 	addi	r3,sp,1064
10010b00:	9808d0fa 	srli	r4,r19,3
10010b04:	a80a977a 	slli	r5,r21,29
10010b08:	a82ad0fa 	srli	r21,r21,3
10010b0c:	9cc001cc 	andi	r19,r19,7
10010b10:	98800c04 	addi	r2,r19,48
10010b14:	18ffffc4 	addi	r3,r3,-1
10010b18:	2926b03a 	or	r19,r5,r4
10010b1c:	18800005 	stb	r2,0(r3)
10010b20:	9d48b03a 	or	r4,r19,r21
10010b24:	203ff61e 	bne	r4,zero,10010b00 <__alt_data_end+0xf8010b00>
10010b28:	9100004c 	andi	r4,r18,1
10010b2c:	d8c12215 	stw	r3,1160(sp)
10010b30:	2002b31e 	bne	r4,zero,10011600 <___vfiprintf_internal_r+0x1008>
10010b34:	d9411e17 	ldw	r5,1144(sp)
10010b38:	28e9c83a 	sub	r20,r5,r3
10010b3c:	a02b883a 	mov	r21,r20
10010b40:	a400010e 	bge	r20,r16,10010b48 <___vfiprintf_internal_r+0x550>
10010b44:	802b883a 	mov	r21,r16
10010b48:	b5803fcc 	andi	r22,r22,255
10010b4c:	b580201c 	xori	r22,r22,128
10010b50:	b5bfe004 	addi	r22,r22,-128
10010b54:	b0000126 	beq	r22,zero,10010b5c <___vfiprintf_internal_r+0x564>
10010b58:	ad400044 	addi	r21,r21,1
10010b5c:	9280008c 	andi	r10,r18,2
10010b60:	50000126 	beq	r10,zero,10010b68 <___vfiprintf_internal_r+0x570>
10010b64:	ad400084 	addi	r21,r21,2
10010b68:	9580210c 	andi	r22,r18,132
10010b6c:	b001751e 	bne	r22,zero,10011144 <___vfiprintf_internal_r+0xb4c>
10010b70:	d9012417 	ldw	r4,1168(sp)
10010b74:	2567c83a 	sub	r19,r4,r21
10010b78:	04c1720e 	bge	zero,r19,10011144 <___vfiprintf_internal_r+0xb4c>
10010b7c:	01c00404 	movi	r7,16
10010b80:	d8c11c17 	ldw	r3,1136(sp)
10010b84:	3cc36b0e 	bge	r7,r19,10011934 <___vfiprintf_internal_r+0x133c>
10010b88:	008400b4 	movhi	r2,4098
10010b8c:	10a50e04 	addi	r2,r2,-27592
10010b90:	dc012915 	stw	r16,1188(sp)
10010b94:	d9011b17 	ldw	r4,1132(sp)
10010b98:	9821883a 	mov	r16,r19
10010b9c:	d8812615 	stw	r2,1176(sp)
10010ba0:	030001c4 	movi	r12,7
10010ba4:	5027883a 	mov	r19,r10
10010ba8:	00000506 	br	10010bc0 <___vfiprintf_internal_r+0x5c8>
10010bac:	21400084 	addi	r5,r4,2
10010bb0:	42000204 	addi	r8,r8,8
10010bb4:	1009883a 	mov	r4,r2
10010bb8:	843ffc04 	addi	r16,r16,-16
10010bbc:	3c000d0e 	bge	r7,r16,10010bf4 <___vfiprintf_internal_r+0x5fc>
10010bc0:	18c00404 	addi	r3,r3,16
10010bc4:	20800044 	addi	r2,r4,1
10010bc8:	47000015 	stw	fp,0(r8)
10010bcc:	41c00115 	stw	r7,4(r8)
10010bd0:	d8c11c15 	stw	r3,1136(sp)
10010bd4:	d8811b15 	stw	r2,1132(sp)
10010bd8:	60bff40e 	bge	r12,r2,10010bac <__alt_data_end+0xf8010bac>
10010bdc:	18014b1e 	bne	r3,zero,1001110c <___vfiprintf_internal_r+0xb14>
10010be0:	843ffc04 	addi	r16,r16,-16
10010be4:	0009883a 	mov	r4,zero
10010be8:	01400044 	movi	r5,1
10010bec:	d811883a 	mov	r8,sp
10010bf0:	3c3ff316 	blt	r7,r16,10010bc0 <__alt_data_end+0xf8010bc0>
10010bf4:	9815883a 	mov	r10,r19
10010bf8:	8027883a 	mov	r19,r16
10010bfc:	dc012917 	ldw	r16,1188(sp)
10010c00:	d9012617 	ldw	r4,1176(sp)
10010c04:	98c7883a 	add	r3,r19,r3
10010c08:	44c00115 	stw	r19,4(r8)
10010c0c:	41000015 	stw	r4,0(r8)
10010c10:	d8c11c15 	stw	r3,1136(sp)
10010c14:	d9411b15 	stw	r5,1132(sp)
10010c18:	008001c4 	movi	r2,7
10010c1c:	11425116 	blt	r2,r5,10011564 <___vfiprintf_internal_r+0xf6c>
10010c20:	d9011d87 	ldb	r4,1142(sp)
10010c24:	42000204 	addi	r8,r8,8
10010c28:	28800044 	addi	r2,r5,1
10010c2c:	20014a1e 	bne	r4,zero,10011158 <___vfiprintf_internal_r+0xb60>
10010c30:	50000c26 	beq	r10,zero,10010c64 <___vfiprintf_internal_r+0x66c>
10010c34:	d9011d04 	addi	r4,sp,1140
10010c38:	18c00084 	addi	r3,r3,2
10010c3c:	41000015 	stw	r4,0(r8)
10010c40:	01000084 	movi	r4,2
10010c44:	41000115 	stw	r4,4(r8)
10010c48:	d8c11c15 	stw	r3,1136(sp)
10010c4c:	d8811b15 	stw	r2,1132(sp)
10010c50:	010001c4 	movi	r4,7
10010c54:	20822016 	blt	r4,r2,100114d8 <___vfiprintf_internal_r+0xee0>
10010c58:	100b883a 	mov	r5,r2
10010c5c:	42000204 	addi	r8,r8,8
10010c60:	10800044 	addi	r2,r2,1
10010c64:	01002004 	movi	r4,128
10010c68:	b101de26 	beq	r22,r4,100113e4 <___vfiprintf_internal_r+0xdec>
10010c6c:	8521c83a 	sub	r16,r16,r20
10010c70:	0400230e 	bge	zero,r16,10010d00 <___vfiprintf_internal_r+0x708>
10010c74:	04c00404 	movi	r19,16
10010c78:	9c030d0e 	bge	r19,r16,100118b0 <___vfiprintf_internal_r+0x12b8>
10010c7c:	008400b4 	movhi	r2,4098
10010c80:	10a50a04 	addi	r2,r2,-27608
10010c84:	d8812615 	stw	r2,1176(sp)
10010c88:	058001c4 	movi	r22,7
10010c8c:	00000506 	br	10010ca4 <___vfiprintf_internal_r+0x6ac>
10010c90:	28800084 	addi	r2,r5,2
10010c94:	42000204 	addi	r8,r8,8
10010c98:	200b883a 	mov	r5,r4
10010c9c:	843ffc04 	addi	r16,r16,-16
10010ca0:	9c000d0e 	bge	r19,r16,10010cd8 <___vfiprintf_internal_r+0x6e0>
10010ca4:	18c00404 	addi	r3,r3,16
10010ca8:	29000044 	addi	r4,r5,1
10010cac:	44400015 	stw	r17,0(r8)
10010cb0:	44c00115 	stw	r19,4(r8)
10010cb4:	d8c11c15 	stw	r3,1136(sp)
10010cb8:	d9011b15 	stw	r4,1132(sp)
10010cbc:	b13ff40e 	bge	r22,r4,10010c90 <__alt_data_end+0xf8010c90>
10010cc0:	1801321e 	bne	r3,zero,1001118c <___vfiprintf_internal_r+0xb94>
10010cc4:	843ffc04 	addi	r16,r16,-16
10010cc8:	000b883a 	mov	r5,zero
10010ccc:	00800044 	movi	r2,1
10010cd0:	d811883a 	mov	r8,sp
10010cd4:	9c3ff316 	blt	r19,r16,10010ca4 <__alt_data_end+0xf8010ca4>
10010cd8:	d9012617 	ldw	r4,1176(sp)
10010cdc:	1c07883a 	add	r3,r3,r16
10010ce0:	44000115 	stw	r16,4(r8)
10010ce4:	41000015 	stw	r4,0(r8)
10010ce8:	d8c11c15 	stw	r3,1136(sp)
10010cec:	d8811b15 	stw	r2,1132(sp)
10010cf0:	010001c4 	movi	r4,7
10010cf4:	20816216 	blt	r4,r2,10011280 <___vfiprintf_internal_r+0xc88>
10010cf8:	42000204 	addi	r8,r8,8
10010cfc:	10800044 	addi	r2,r2,1
10010d00:	d9012217 	ldw	r4,1160(sp)
10010d04:	1d07883a 	add	r3,r3,r20
10010d08:	45000115 	stw	r20,4(r8)
10010d0c:	41000015 	stw	r4,0(r8)
10010d10:	d8c11c15 	stw	r3,1136(sp)
10010d14:	d8811b15 	stw	r2,1132(sp)
10010d18:	010001c4 	movi	r4,7
10010d1c:	2081610e 	bge	r4,r2,100112a4 <___vfiprintf_internal_r+0xcac>
10010d20:	1802211e 	bne	r3,zero,100115a8 <___vfiprintf_internal_r+0xfb0>
10010d24:	d8011b15 	stw	zero,1132(sp)
10010d28:	9480010c 	andi	r18,r18,4
10010d2c:	9002171e 	bne	r18,zero,1001158c <___vfiprintf_internal_r+0xf94>
10010d30:	d9412417 	ldw	r5,1168(sp)
10010d34:	a9433716 	blt	r21,r5,10011a14 <___vfiprintf_internal_r+0x141c>
10010d38:	d8812517 	ldw	r2,1172(sp)
10010d3c:	1545883a 	add	r2,r2,r21
10010d40:	d8812515 	stw	r2,1172(sp)
10010d44:	00019a06 	br	100113b0 <___vfiprintf_internal_r+0xdb8>
10010d48:	d8c12317 	ldw	r3,1164(sp)
10010d4c:	05400044 	movi	r21,1
10010d50:	9811883a 	mov	r8,r19
10010d54:	18800017 	ldw	r2,0(r3)
10010d58:	18c00104 	addi	r3,r3,4
10010d5c:	d8c12315 	stw	r3,1164(sp)
10010d60:	d8c10004 	addi	r3,sp,1024
10010d64:	d8011d85 	stb	zero,1142(sp)
10010d68:	d8810005 	stb	r2,1024(sp)
10010d6c:	a829883a 	mov	r20,r21
10010d70:	d8c12215 	stw	r3,1160(sp)
10010d74:	0021883a 	mov	r16,zero
10010d78:	003f7806 	br	10010b5c <__alt_data_end+0xf8010b5c>
10010d7c:	94800414 	ori	r18,r18,16
10010d80:	9080080c 	andi	r2,r18,32
10010d84:	9811883a 	mov	r8,r19
10010d88:	10009026 	beq	r2,zero,10010fcc <___vfiprintf_internal_r+0x9d4>
10010d8c:	d8812317 	ldw	r2,1164(sp)
10010d90:	d8c12317 	ldw	r3,1164(sp)
10010d94:	14c00017 	ldw	r19,0(r2)
10010d98:	15400117 	ldw	r21,4(r2)
10010d9c:	18c00204 	addi	r3,r3,8
10010da0:	d8c12315 	stw	r3,1164(sp)
10010da4:	0005883a 	mov	r2,zero
10010da8:	9d46b03a 	or	r3,r19,r21
10010dac:	d8011d85 	stb	zero,1142(sp)
10010db0:	8029883a 	mov	r20,r16
10010db4:	002d883a 	mov	r22,zero
10010db8:	003f4606 	br	10010ad4 <__alt_data_end+0xf8010ad4>
10010dbc:	94800414 	ori	r18,r18,16
10010dc0:	9080080c 	andi	r2,r18,32
10010dc4:	9811883a 	mov	r8,r19
10010dc8:	10006226 	beq	r2,zero,10010f54 <___vfiprintf_internal_r+0x95c>
10010dcc:	d9012317 	ldw	r4,1164(sp)
10010dd0:	00800044 	movi	r2,1
10010dd4:	24c00017 	ldw	r19,0(r4)
10010dd8:	25400117 	ldw	r21,4(r4)
10010ddc:	21000204 	addi	r4,r4,8
10010de0:	d9012315 	stw	r4,1164(sp)
10010de4:	9d46b03a 	or	r3,r19,r21
10010de8:	003ff006 	br	10010dac <__alt_data_end+0xf8010dac>
10010dec:	b9800007 	ldb	r6,0(r23)
10010df0:	00801b04 	movi	r2,108
10010df4:	3082b226 	beq	r6,r2,100118c0 <___vfiprintf_internal_r+0x12c8>
10010df8:	94800414 	ori	r18,r18,16
10010dfc:	003e5f06 	br	1001077c <__alt_data_end+0xf801077c>
10010e00:	d8c12203 	ldbu	r3,1160(sp)
10010e04:	010400b4 	movhi	r4,4098
10010e08:	2124a404 	addi	r4,r4,-28016
10010e0c:	d8c11d85 	stb	r3,1142(sp)
10010e10:	d9012715 	stw	r4,1180(sp)
10010e14:	90c0080c 	andi	r3,r18,32
10010e18:	9811883a 	mov	r8,r19
10010e1c:	d8812317 	ldw	r2,1164(sp)
10010e20:	18005f26 	beq	r3,zero,10010fa0 <___vfiprintf_internal_r+0x9a8>
10010e24:	d9012317 	ldw	r4,1164(sp)
10010e28:	14c00017 	ldw	r19,0(r2)
10010e2c:	15400117 	ldw	r21,4(r2)
10010e30:	21000204 	addi	r4,r4,8
10010e34:	d9012315 	stw	r4,1164(sp)
10010e38:	9080004c 	andi	r2,r18,1
10010e3c:	1001e226 	beq	r2,zero,100115c8 <___vfiprintf_internal_r+0xfd0>
10010e40:	9d46b03a 	or	r3,r19,r21
10010e44:	18024e26 	beq	r3,zero,10011780 <___vfiprintf_internal_r+0x1188>
10010e48:	00800c04 	movi	r2,48
10010e4c:	d8811d05 	stb	r2,1140(sp)
10010e50:	d9811d45 	stb	r6,1141(sp)
10010e54:	94800094 	ori	r18,r18,2
10010e58:	00800084 	movi	r2,2
10010e5c:	003fd306 	br	10010dac <__alt_data_end+0xf8010dac>
10010e60:	d9012317 	ldw	r4,1164(sp)
10010e64:	d9412317 	ldw	r5,1164(sp)
10010e68:	21000017 	ldw	r4,0(r4)
10010e6c:	28800104 	addi	r2,r5,4
10010e70:	d9012415 	stw	r4,1168(sp)
10010e74:	203eeb16 	blt	r4,zero,10010a24 <__alt_data_end+0xf8010a24>
10010e78:	d8812315 	stw	r2,1164(sp)
10010e7c:	b9800007 	ldb	r6,0(r23)
10010e80:	003e3e06 	br	1001077c <__alt_data_end+0xf801077c>
10010e84:	b9800007 	ldb	r6,0(r23)
10010e88:	01000a84 	movi	r4,42
10010e8c:	b8800044 	addi	r2,r23,1
10010e90:	3102d226 	beq	r6,r4,100119dc <___vfiprintf_internal_r+0x13e4>
10010e94:	35bff404 	addi	r22,r6,-48
10010e98:	102f883a 	mov	r23,r2
10010e9c:	0021883a 	mov	r16,zero
10010ea0:	adbe3736 	bltu	r21,r22,10010780 <__alt_data_end+0xf8010780>
10010ea4:	0009883a 	mov	r4,zero
10010ea8:	01400284 	movi	r5,10
10010eac:	0006df00 	call	10006df0 <__mulsi3>
10010eb0:	b9800007 	ldb	r6,0(r23)
10010eb4:	b089883a 	add	r4,r22,r2
10010eb8:	bdc00044 	addi	r23,r23,1
10010ebc:	35bff404 	addi	r22,r6,-48
10010ec0:	adbff92e 	bgeu	r21,r22,10010ea8 <__alt_data_end+0xf8010ea8>
10010ec4:	2021883a 	mov	r16,r4
10010ec8:	203e2d0e 	bge	r4,zero,10010780 <__alt_data_end+0xf8010780>
10010ecc:	043fffc4 	movi	r16,-1
10010ed0:	003e2b06 	br	10010780 <__alt_data_end+0xf8010780>
10010ed4:	94801014 	ori	r18,r18,64
10010ed8:	b9800007 	ldb	r6,0(r23)
10010edc:	003e2706 	br	1001077c <__alt_data_end+0xf801077c>
10010ee0:	94800814 	ori	r18,r18,32
10010ee4:	b9800007 	ldb	r6,0(r23)
10010ee8:	003e2406 	br	1001077c <__alt_data_end+0xf801077c>
10010eec:	d9412317 	ldw	r5,1164(sp)
10010ef0:	d8812317 	ldw	r2,1164(sp)
10010ef4:	d8011d85 	stb	zero,1142(sp)
10010ef8:	29400017 	ldw	r5,0(r5)
10010efc:	9811883a 	mov	r8,r19
10010f00:	14c00104 	addi	r19,r2,4
10010f04:	d9412215 	stw	r5,1160(sp)
10010f08:	28029026 	beq	r5,zero,1001194c <___vfiprintf_internal_r+0x1354>
10010f0c:	d9012217 	ldw	r4,1160(sp)
10010f10:	80027616 	blt	r16,zero,100118ec <___vfiprintf_internal_r+0x12f4>
10010f14:	000b883a 	mov	r5,zero
10010f18:	800d883a 	mov	r6,r16
10010f1c:	da012a15 	stw	r8,1192(sp)
10010f20:	000e8ec0 	call	1000e8ec <memchr>
10010f24:	da012a17 	ldw	r8,1192(sp)
10010f28:	1002a026 	beq	r2,zero,100119ac <___vfiprintf_internal_r+0x13b4>
10010f2c:	d8c12217 	ldw	r3,1160(sp)
10010f30:	10e9c83a 	sub	r20,r2,r3
10010f34:	85023816 	blt	r16,r20,10011818 <___vfiprintf_internal_r+0x1220>
10010f38:	dd811d83 	ldbu	r22,1142(sp)
10010f3c:	dcc12315 	stw	r19,1164(sp)
10010f40:	0021883a 	mov	r16,zero
10010f44:	003efd06 	br	10010b3c <__alt_data_end+0xf8010b3c>
10010f48:	9080080c 	andi	r2,r18,32
10010f4c:	9811883a 	mov	r8,r19
10010f50:	103f9e1e 	bne	r2,zero,10010dcc <__alt_data_end+0xf8010dcc>
10010f54:	9080040c 	andi	r2,r18,16
10010f58:	10021726 	beq	r2,zero,100117b8 <___vfiprintf_internal_r+0x11c0>
10010f5c:	d9412317 	ldw	r5,1164(sp)
10010f60:	002b883a 	mov	r21,zero
10010f64:	00800044 	movi	r2,1
10010f68:	2cc00017 	ldw	r19,0(r5)
10010f6c:	29400104 	addi	r5,r5,4
10010f70:	d9412315 	stw	r5,1164(sp)
10010f74:	9807883a 	mov	r3,r19
10010f78:	003f8c06 	br	10010dac <__alt_data_end+0xf8010dac>
10010f7c:	d8c12203 	ldbu	r3,1160(sp)
10010f80:	010400b4 	movhi	r4,4098
10010f84:	2124a904 	addi	r4,r4,-27996
10010f88:	d8c11d85 	stb	r3,1142(sp)
10010f8c:	d9012715 	stw	r4,1180(sp)
10010f90:	90c0080c 	andi	r3,r18,32
10010f94:	9811883a 	mov	r8,r19
10010f98:	d8812317 	ldw	r2,1164(sp)
10010f9c:	183fa11e 	bne	r3,zero,10010e24 <__alt_data_end+0xf8010e24>
10010fa0:	90c0040c 	andi	r3,r18,16
10010fa4:	1801e526 	beq	r3,zero,1001173c <___vfiprintf_internal_r+0x1144>
10010fa8:	d9412317 	ldw	r5,1164(sp)
10010fac:	14c00017 	ldw	r19,0(r2)
10010fb0:	002b883a 	mov	r21,zero
10010fb4:	29400104 	addi	r5,r5,4
10010fb8:	d9412315 	stw	r5,1164(sp)
10010fbc:	003f9e06 	br	10010e38 <__alt_data_end+0xf8010e38>
10010fc0:	9080080c 	andi	r2,r18,32
10010fc4:	9811883a 	mov	r8,r19
10010fc8:	103f701e 	bne	r2,zero,10010d8c <__alt_data_end+0xf8010d8c>
10010fcc:	9080040c 	andi	r2,r18,16
10010fd0:	1001ef26 	beq	r2,zero,10011790 <___vfiprintf_internal_r+0x1198>
10010fd4:	d9012317 	ldw	r4,1164(sp)
10010fd8:	002b883a 	mov	r21,zero
10010fdc:	0005883a 	mov	r2,zero
10010fe0:	24c00017 	ldw	r19,0(r4)
10010fe4:	21000104 	addi	r4,r4,4
10010fe8:	d9012315 	stw	r4,1164(sp)
10010fec:	9807883a 	mov	r3,r19
10010ff0:	003f6e06 	br	10010dac <__alt_data_end+0xf8010dac>
10010ff4:	d8c12317 	ldw	r3,1164(sp)
10010ff8:	9811883a 	mov	r8,r19
10010ffc:	00800c04 	movi	r2,48
10011000:	1cc00017 	ldw	r19,0(r3)
10011004:	010400b4 	movhi	r4,4098
10011008:	18c00104 	addi	r3,r3,4
1001100c:	d8811d05 	stb	r2,1140(sp)
10011010:	2124a904 	addi	r4,r4,-27996
10011014:	00801e04 	movi	r2,120
10011018:	d8811d45 	stb	r2,1141(sp)
1001101c:	d8c12315 	stw	r3,1164(sp)
10011020:	002b883a 	mov	r21,zero
10011024:	94800094 	ori	r18,r18,2
10011028:	d9012715 	stw	r4,1180(sp)
1001102c:	00800084 	movi	r2,2
10011030:	9807883a 	mov	r3,r19
10011034:	003f5d06 	br	10010dac <__alt_data_end+0xf8010dac>
10011038:	d8c12203 	ldbu	r3,1160(sp)
1001103c:	9080080c 	andi	r2,r18,32
10011040:	9811883a 	mov	r8,r19
10011044:	d8c11d85 	stb	r3,1142(sp)
10011048:	1001b126 	beq	r2,zero,10011710 <___vfiprintf_internal_r+0x1118>
1001104c:	d9012317 	ldw	r4,1164(sp)
10011050:	d9412517 	ldw	r5,1172(sp)
10011054:	20800017 	ldw	r2,0(r4)
10011058:	2807d7fa 	srai	r3,r5,31
1001105c:	21000104 	addi	r4,r4,4
10011060:	d9012315 	stw	r4,1164(sp)
10011064:	11400015 	stw	r5,0(r2)
10011068:	10c00115 	stw	r3,4(r2)
1001106c:	003d9a06 	br	100106d8 <__alt_data_end+0xf80106d8>
10011070:	d8812207 	ldb	r2,1160(sp)
10011074:	1001c41e 	bne	r2,zero,10011788 <___vfiprintf_internal_r+0x1190>
10011078:	00c00804 	movi	r3,32
1001107c:	d8c12205 	stb	r3,1160(sp)
10011080:	b9800007 	ldb	r6,0(r23)
10011084:	003dbd06 	br	1001077c <__alt_data_end+0xf801077c>
10011088:	00c00ac4 	movi	r3,43
1001108c:	d8c12205 	stb	r3,1160(sp)
10011090:	b9800007 	ldb	r6,0(r23)
10011094:	003db906 	br	1001077c <__alt_data_end+0xf801077c>
10011098:	d8c12203 	ldbu	r3,1160(sp)
1001109c:	9080080c 	andi	r2,r18,32
100110a0:	9811883a 	mov	r8,r19
100110a4:	d8c11d85 	stb	r3,1142(sp)
100110a8:	d8c12317 	ldw	r3,1164(sp)
100110ac:	103e7e1e 	bne	r2,zero,10010aa8 <__alt_data_end+0xf8010aa8>
100110b0:	9080040c 	andi	r2,r18,16
100110b4:	1001a926 	beq	r2,zero,1001175c <___vfiprintf_internal_r+0x1164>
100110b8:	1cc00017 	ldw	r19,0(r3)
100110bc:	d9412317 	ldw	r5,1164(sp)
100110c0:	982bd7fa 	srai	r21,r19,31
100110c4:	29400104 	addi	r5,r5,4
100110c8:	d9412315 	stw	r5,1164(sp)
100110cc:	a805883a 	mov	r2,r21
100110d0:	003e7b06 	br	10010ac0 <__alt_data_end+0xf8010ac0>
100110d4:	94800054 	ori	r18,r18,1
100110d8:	b9800007 	ldb	r6,0(r23)
100110dc:	003da706 	br	1001077c <__alt_data_end+0xf801077c>
100110e0:	d8c12203 	ldbu	r3,1160(sp)
100110e4:	9811883a 	mov	r8,r19
100110e8:	d8c11d85 	stb	r3,1142(sp)
100110ec:	30005826 	beq	r6,zero,10011250 <___vfiprintf_internal_r+0xc58>
100110f0:	05400044 	movi	r21,1
100110f4:	d8c10004 	addi	r3,sp,1024
100110f8:	d9810005 	stb	r6,1024(sp)
100110fc:	d8011d85 	stb	zero,1142(sp)
10011100:	a829883a 	mov	r20,r21
10011104:	d8c12215 	stw	r3,1160(sp)
10011108:	003f1a06 	br	10010d74 <__alt_data_end+0xf8010d74>
1001110c:	d9012117 	ldw	r4,1156(sp)
10011110:	d9412017 	ldw	r5,1152(sp)
10011114:	d9811a04 	addi	r6,sp,1128
10011118:	d9c12a15 	stw	r7,1192(sp)
1001111c:	db012b15 	stw	r12,1196(sp)
10011120:	00104e40 	call	100104e4 <__sprint_r.part.0>
10011124:	d9c12a17 	ldw	r7,1192(sp)
10011128:	db012b17 	ldw	r12,1196(sp)
1001112c:	10004e1e 	bne	r2,zero,10011268 <___vfiprintf_internal_r+0xc70>
10011130:	d9011b17 	ldw	r4,1132(sp)
10011134:	d8c11c17 	ldw	r3,1136(sp)
10011138:	d811883a 	mov	r8,sp
1001113c:	21400044 	addi	r5,r4,1
10011140:	003e9d06 	br	10010bb8 <__alt_data_end+0xf8010bb8>
10011144:	d9411b17 	ldw	r5,1132(sp)
10011148:	d8c11c17 	ldw	r3,1136(sp)
1001114c:	28800044 	addi	r2,r5,1
10011150:	d9011d87 	ldb	r4,1142(sp)
10011154:	203eb626 	beq	r4,zero,10010c30 <__alt_data_end+0xf8010c30>
10011158:	01000044 	movi	r4,1
1001115c:	d9411d84 	addi	r5,sp,1142
10011160:	1907883a 	add	r3,r3,r4
10011164:	41400015 	stw	r5,0(r8)
10011168:	41000115 	stw	r4,4(r8)
1001116c:	d8c11c15 	stw	r3,1136(sp)
10011170:	d8811b15 	stw	r2,1132(sp)
10011174:	014001c4 	movi	r5,7
10011178:	2880ce16 	blt	r5,r2,100114b4 <___vfiprintf_internal_r+0xebc>
1001117c:	100b883a 	mov	r5,r2
10011180:	42000204 	addi	r8,r8,8
10011184:	10800044 	addi	r2,r2,1
10011188:	003ea906 	br	10010c30 <__alt_data_end+0xf8010c30>
1001118c:	d9012117 	ldw	r4,1156(sp)
10011190:	d9412017 	ldw	r5,1152(sp)
10011194:	d9811a04 	addi	r6,sp,1128
10011198:	00104e40 	call	100104e4 <__sprint_r.part.0>
1001119c:	1000321e 	bne	r2,zero,10011268 <___vfiprintf_internal_r+0xc70>
100111a0:	d9411b17 	ldw	r5,1132(sp)
100111a4:	d8c11c17 	ldw	r3,1136(sp)
100111a8:	d811883a 	mov	r8,sp
100111ac:	28800044 	addi	r2,r5,1
100111b0:	003eba06 	br	10010c9c <__alt_data_end+0xf8010c9c>
100111b4:	10803fcc 	andi	r2,r2,255
100111b8:	00c00044 	movi	r3,1
100111bc:	10fe4d1e 	bne	r2,r3,10010af4 <__alt_data_end+0xf8010af4>
100111c0:	a800021e 	bne	r21,zero,100111cc <___vfiprintf_internal_r+0xbd4>
100111c4:	00800244 	movi	r2,9
100111c8:	14c01b2e 	bgeu	r2,r19,10011238 <___vfiprintf_internal_r+0xc40>
100111cc:	dc012215 	stw	r16,1160(sp)
100111d0:	dd010a04 	addi	r20,sp,1064
100111d4:	a821883a 	mov	r16,r21
100111d8:	402b883a 	mov	r21,r8
100111dc:	9809883a 	mov	r4,r19
100111e0:	800b883a 	mov	r5,r16
100111e4:	01800284 	movi	r6,10
100111e8:	000f883a 	mov	r7,zero
100111ec:	0012ad80 	call	10012ad8 <__umoddi3>
100111f0:	10800c04 	addi	r2,r2,48
100111f4:	a53fffc4 	addi	r20,r20,-1
100111f8:	9809883a 	mov	r4,r19
100111fc:	800b883a 	mov	r5,r16
10011200:	01800284 	movi	r6,10
10011204:	000f883a 	mov	r7,zero
10011208:	a0800005 	stb	r2,0(r20)
1001120c:	00124980 	call	10012498 <__udivdi3>
10011210:	1027883a 	mov	r19,r2
10011214:	10c4b03a 	or	r2,r2,r3
10011218:	1821883a 	mov	r16,r3
1001121c:	103fef1e 	bne	r2,zero,100111dc <__alt_data_end+0xf80111dc>
10011220:	d9011e17 	ldw	r4,1144(sp)
10011224:	dc012217 	ldw	r16,1160(sp)
10011228:	a811883a 	mov	r8,r21
1001122c:	dd012215 	stw	r20,1160(sp)
10011230:	2529c83a 	sub	r20,r4,r20
10011234:	003e4106 	br	10010b3c <__alt_data_end+0xf8010b3c>
10011238:	9cc00c04 	addi	r19,r19,48
1001123c:	d8c109c4 	addi	r3,sp,1063
10011240:	dcc109c5 	stb	r19,1063(sp)
10011244:	dd012817 	ldw	r20,1184(sp)
10011248:	d8c12215 	stw	r3,1160(sp)
1001124c:	003e3b06 	br	10010b3c <__alt_data_end+0xf8010b3c>
10011250:	d8811c17 	ldw	r2,1136(sp)
10011254:	10000426 	beq	r2,zero,10011268 <___vfiprintf_internal_r+0xc70>
10011258:	d9012117 	ldw	r4,1156(sp)
1001125c:	d9412017 	ldw	r5,1152(sp)
10011260:	d9811a04 	addi	r6,sp,1128
10011264:	00104e40 	call	100104e4 <__sprint_r.part.0>
10011268:	d9412017 	ldw	r5,1152(sp)
1001126c:	2880030b 	ldhu	r2,12(r5)
10011270:	1080100c 	andi	r2,r2,64
10011274:	103ddc1e 	bne	r2,zero,100109e8 <__alt_data_end+0xf80109e8>
10011278:	d8812517 	ldw	r2,1172(sp)
1001127c:	003ddb06 	br	100109ec <__alt_data_end+0xf80109ec>
10011280:	1801061e 	bne	r3,zero,1001169c <___vfiprintf_internal_r+0x10a4>
10011284:	d8c12217 	ldw	r3,1160(sp)
10011288:	00800044 	movi	r2,1
1001128c:	dd000115 	stw	r20,4(sp)
10011290:	d8c00015 	stw	r3,0(sp)
10011294:	dd011c15 	stw	r20,1136(sp)
10011298:	d8811b15 	stw	r2,1132(sp)
1001129c:	a007883a 	mov	r3,r20
100112a0:	d811883a 	mov	r8,sp
100112a4:	42000204 	addi	r8,r8,8
100112a8:	9480010c 	andi	r18,r18,4
100112ac:	90003426 	beq	r18,zero,10011380 <___vfiprintf_internal_r+0xd88>
100112b0:	d9412417 	ldw	r5,1168(sp)
100112b4:	2d65c83a 	sub	r18,r5,r21
100112b8:	0480310e 	bge	zero,r18,10011380 <___vfiprintf_internal_r+0xd88>
100112bc:	04000404 	movi	r16,16
100112c0:	8481ad0e 	bge	r16,r18,10011978 <___vfiprintf_internal_r+0x1380>
100112c4:	014400b4 	movhi	r5,4098
100112c8:	29650e04 	addi	r5,r5,-27592
100112cc:	d9011b17 	ldw	r4,1132(sp)
100112d0:	d9412615 	stw	r5,1176(sp)
100112d4:	04c001c4 	movi	r19,7
100112d8:	dd012117 	ldw	r20,1156(sp)
100112dc:	dd812017 	ldw	r22,1152(sp)
100112e0:	00000506 	br	100112f8 <___vfiprintf_internal_r+0xd00>
100112e4:	21400084 	addi	r5,r4,2
100112e8:	42000204 	addi	r8,r8,8
100112ec:	1009883a 	mov	r4,r2
100112f0:	94bffc04 	addi	r18,r18,-16
100112f4:	84800d0e 	bge	r16,r18,1001132c <___vfiprintf_internal_r+0xd34>
100112f8:	18c00404 	addi	r3,r3,16
100112fc:	20800044 	addi	r2,r4,1
10011300:	47000015 	stw	fp,0(r8)
10011304:	44000115 	stw	r16,4(r8)
10011308:	d8c11c15 	stw	r3,1136(sp)
1001130c:	d8811b15 	stw	r2,1132(sp)
10011310:	98bff40e 	bge	r19,r2,100112e4 <__alt_data_end+0xf80112e4>
10011314:	1800291e 	bne	r3,zero,100113bc <___vfiprintf_internal_r+0xdc4>
10011318:	94bffc04 	addi	r18,r18,-16
1001131c:	0009883a 	mov	r4,zero
10011320:	01400044 	movi	r5,1
10011324:	d811883a 	mov	r8,sp
10011328:	84bff316 	blt	r16,r18,100112f8 <__alt_data_end+0xf80112f8>
1001132c:	d8812617 	ldw	r2,1176(sp)
10011330:	1c87883a 	add	r3,r3,r18
10011334:	44800115 	stw	r18,4(r8)
10011338:	40800015 	stw	r2,0(r8)
1001133c:	d8c11c15 	stw	r3,1136(sp)
10011340:	d9411b15 	stw	r5,1132(sp)
10011344:	008001c4 	movi	r2,7
10011348:	11400d0e 	bge	r2,r5,10011380 <___vfiprintf_internal_r+0xd88>
1001134c:	1800061e 	bne	r3,zero,10011368 <___vfiprintf_internal_r+0xd70>
10011350:	d8c12417 	ldw	r3,1168(sp)
10011354:	a8c12e16 	blt	r21,r3,10011810 <___vfiprintf_internal_r+0x1218>
10011358:	d9012517 	ldw	r4,1172(sp)
1001135c:	2549883a 	add	r4,r4,r21
10011360:	d9012515 	stw	r4,1172(sp)
10011364:	00001206 	br	100113b0 <___vfiprintf_internal_r+0xdb8>
10011368:	d9012117 	ldw	r4,1156(sp)
1001136c:	d9412017 	ldw	r5,1152(sp)
10011370:	d9811a04 	addi	r6,sp,1128
10011374:	00104e40 	call	100104e4 <__sprint_r.part.0>
10011378:	103fbb1e 	bne	r2,zero,10011268 <__alt_data_end+0xf8011268>
1001137c:	d8c11c17 	ldw	r3,1136(sp)
10011380:	d8812417 	ldw	r2,1168(sp)
10011384:	a880010e 	bge	r21,r2,1001138c <___vfiprintf_internal_r+0xd94>
10011388:	102b883a 	mov	r21,r2
1001138c:	d9012517 	ldw	r4,1172(sp)
10011390:	2549883a 	add	r4,r4,r21
10011394:	d9012515 	stw	r4,1172(sp)
10011398:	18000526 	beq	r3,zero,100113b0 <___vfiprintf_internal_r+0xdb8>
1001139c:	d9012117 	ldw	r4,1156(sp)
100113a0:	d9412017 	ldw	r5,1152(sp)
100113a4:	d9811a04 	addi	r6,sp,1128
100113a8:	00104e40 	call	100104e4 <__sprint_r.part.0>
100113ac:	103fae1e 	bne	r2,zero,10011268 <__alt_data_end+0xf8011268>
100113b0:	d8011b15 	stw	zero,1132(sp)
100113b4:	d811883a 	mov	r8,sp
100113b8:	003cc706 	br	100106d8 <__alt_data_end+0xf80106d8>
100113bc:	a009883a 	mov	r4,r20
100113c0:	b00b883a 	mov	r5,r22
100113c4:	d9811a04 	addi	r6,sp,1128
100113c8:	00104e40 	call	100104e4 <__sprint_r.part.0>
100113cc:	103fa61e 	bne	r2,zero,10011268 <__alt_data_end+0xf8011268>
100113d0:	d9011b17 	ldw	r4,1132(sp)
100113d4:	d8c11c17 	ldw	r3,1136(sp)
100113d8:	d811883a 	mov	r8,sp
100113dc:	21400044 	addi	r5,r4,1
100113e0:	003fc306 	br	100112f0 <__alt_data_end+0xf80112f0>
100113e4:	d9012417 	ldw	r4,1168(sp)
100113e8:	256dc83a 	sub	r22,r4,r21
100113ec:	05be1f0e 	bge	zero,r22,10010c6c <__alt_data_end+0xf8010c6c>
100113f0:	04c00404 	movi	r19,16
100113f4:	9d81720e 	bge	r19,r22,100119c0 <___vfiprintf_internal_r+0x13c8>
100113f8:	008400b4 	movhi	r2,4098
100113fc:	10a50a04 	addi	r2,r2,-27608
10011400:	d8812615 	stw	r2,1176(sp)
10011404:	028001c4 	movi	r10,7
10011408:	00000506 	br	10011420 <___vfiprintf_internal_r+0xe28>
1001140c:	29000084 	addi	r4,r5,2
10011410:	42000204 	addi	r8,r8,8
10011414:	100b883a 	mov	r5,r2
10011418:	b5bffc04 	addi	r22,r22,-16
1001141c:	9d800d0e 	bge	r19,r22,10011454 <___vfiprintf_internal_r+0xe5c>
10011420:	18c00404 	addi	r3,r3,16
10011424:	28800044 	addi	r2,r5,1
10011428:	44400015 	stw	r17,0(r8)
1001142c:	44c00115 	stw	r19,4(r8)
10011430:	d8c11c15 	stw	r3,1136(sp)
10011434:	d8811b15 	stw	r2,1132(sp)
10011438:	50bff40e 	bge	r10,r2,1001140c <__alt_data_end+0xf801140c>
1001143c:	1800111e 	bne	r3,zero,10011484 <___vfiprintf_internal_r+0xe8c>
10011440:	b5bffc04 	addi	r22,r22,-16
10011444:	000b883a 	mov	r5,zero
10011448:	01000044 	movi	r4,1
1001144c:	d811883a 	mov	r8,sp
10011450:	9dbff316 	blt	r19,r22,10011420 <__alt_data_end+0xf8011420>
10011454:	d9412617 	ldw	r5,1176(sp)
10011458:	1d87883a 	add	r3,r3,r22
1001145c:	45800115 	stw	r22,4(r8)
10011460:	41400015 	stw	r5,0(r8)
10011464:	d8c11c15 	stw	r3,1136(sp)
10011468:	d9011b15 	stw	r4,1132(sp)
1001146c:	008001c4 	movi	r2,7
10011470:	11008516 	blt	r2,r4,10011688 <___vfiprintf_internal_r+0x1090>
10011474:	42000204 	addi	r8,r8,8
10011478:	20800044 	addi	r2,r4,1
1001147c:	200b883a 	mov	r5,r4
10011480:	003dfa06 	br	10010c6c <__alt_data_end+0xf8010c6c>
10011484:	d9012117 	ldw	r4,1156(sp)
10011488:	d9412017 	ldw	r5,1152(sp)
1001148c:	d9811a04 	addi	r6,sp,1128
10011490:	da812a15 	stw	r10,1192(sp)
10011494:	00104e40 	call	100104e4 <__sprint_r.part.0>
10011498:	da812a17 	ldw	r10,1192(sp)
1001149c:	103f721e 	bne	r2,zero,10011268 <__alt_data_end+0xf8011268>
100114a0:	d9411b17 	ldw	r5,1132(sp)
100114a4:	d8c11c17 	ldw	r3,1136(sp)
100114a8:	d811883a 	mov	r8,sp
100114ac:	29000044 	addi	r4,r5,1
100114b0:	003fd906 	br	10011418 <__alt_data_end+0xf8011418>
100114b4:	1800681e 	bne	r3,zero,10011658 <___vfiprintf_internal_r+0x1060>
100114b8:	50004d26 	beq	r10,zero,100115f0 <___vfiprintf_internal_r+0xff8>
100114bc:	d8811d04 	addi	r2,sp,1140
100114c0:	00c00084 	movi	r3,2
100114c4:	d8800015 	stw	r2,0(sp)
100114c8:	d8c00115 	stw	r3,4(sp)
100114cc:	2005883a 	mov	r2,r4
100114d0:	d811883a 	mov	r8,sp
100114d4:	003de006 	br	10010c58 <__alt_data_end+0xf8010c58>
100114d8:	1800551e 	bne	r3,zero,10011630 <___vfiprintf_internal_r+0x1038>
100114dc:	000b883a 	mov	r5,zero
100114e0:	00800044 	movi	r2,1
100114e4:	d811883a 	mov	r8,sp
100114e8:	003dde06 	br	10010c64 <__alt_data_end+0xf8010c64>
100114ec:	10803fcc 	andi	r2,r2,255
100114f0:	1000191e 	bne	r2,zero,10011558 <___vfiprintf_internal_r+0xf60>
100114f4:	9080004c 	andi	r2,r18,1
100114f8:	10001726 	beq	r2,zero,10011558 <___vfiprintf_internal_r+0xf60>
100114fc:	00800c04 	movi	r2,48
10011500:	d8c109c4 	addi	r3,sp,1063
10011504:	d88109c5 	stb	r2,1063(sp)
10011508:	dd012817 	ldw	r20,1184(sp)
1001150c:	d8c12215 	stw	r3,1160(sp)
10011510:	003d8a06 	br	10010b3c <__alt_data_end+0xf8010b3c>
10011514:	d9012717 	ldw	r4,1180(sp)
10011518:	dd010a04 	addi	r20,sp,1064
1001151c:	988003cc 	andi	r2,r19,15
10011520:	a806973a 	slli	r3,r21,28
10011524:	2085883a 	add	r2,r4,r2
10011528:	9826d13a 	srli	r19,r19,4
1001152c:	10800003 	ldbu	r2,0(r2)
10011530:	a82ad13a 	srli	r21,r21,4
10011534:	a53fffc4 	addi	r20,r20,-1
10011538:	1ce6b03a 	or	r19,r3,r19
1001153c:	a0800005 	stb	r2,0(r20)
10011540:	9d44b03a 	or	r2,r19,r21
10011544:	103ff51e 	bne	r2,zero,1001151c <__alt_data_end+0xf801151c>
10011548:	d9411e17 	ldw	r5,1144(sp)
1001154c:	dd012215 	stw	r20,1160(sp)
10011550:	2d29c83a 	sub	r20,r5,r20
10011554:	003d7906 	br	10010b3c <__alt_data_end+0xf8010b3c>
10011558:	d8c10a04 	addi	r3,sp,1064
1001155c:	d8c12215 	stw	r3,1160(sp)
10011560:	003d7606 	br	10010b3c <__alt_data_end+0xf8010b3c>
10011564:	18009e1e 	bne	r3,zero,100117e0 <___vfiprintf_internal_r+0x11e8>
10011568:	d8811d87 	ldb	r2,1142(sp)
1001156c:	10005f26 	beq	r2,zero,100116ec <___vfiprintf_internal_r+0x10f4>
10011570:	00c00044 	movi	r3,1
10011574:	d9011d84 	addi	r4,sp,1142
10011578:	1805883a 	mov	r2,r3
1001157c:	d9000015 	stw	r4,0(sp)
10011580:	d8c00115 	stw	r3,4(sp)
10011584:	d811883a 	mov	r8,sp
10011588:	003efc06 	br	1001117c <__alt_data_end+0xf801117c>
1001158c:	d9412417 	ldw	r5,1168(sp)
10011590:	d811883a 	mov	r8,sp
10011594:	2d65c83a 	sub	r18,r5,r21
10011598:	04bf4816 	blt	zero,r18,100112bc <__alt_data_end+0xf80112bc>
1001159c:	003f6c06 	br	10011350 <__alt_data_end+0xf8011350>
100115a0:	b829883a 	mov	r20,r23
100115a4:	003c6906 	br	1001074c <__alt_data_end+0xf801074c>
100115a8:	d9012117 	ldw	r4,1156(sp)
100115ac:	d9412017 	ldw	r5,1152(sp)
100115b0:	d9811a04 	addi	r6,sp,1128
100115b4:	00104e40 	call	100104e4 <__sprint_r.part.0>
100115b8:	103f2b1e 	bne	r2,zero,10011268 <__alt_data_end+0xf8011268>
100115bc:	d8c11c17 	ldw	r3,1136(sp)
100115c0:	d811883a 	mov	r8,sp
100115c4:	003f3806 	br	100112a8 <__alt_data_end+0xf80112a8>
100115c8:	00800084 	movi	r2,2
100115cc:	9d46b03a 	or	r3,r19,r21
100115d0:	003df606 	br	10010dac <__alt_data_end+0xf8010dac>
100115d4:	d9012117 	ldw	r4,1156(sp)
100115d8:	d9412017 	ldw	r5,1152(sp)
100115dc:	d9811a04 	addi	r6,sp,1128
100115e0:	00104e40 	call	100104e4 <__sprint_r.part.0>
100115e4:	103f201e 	bne	r2,zero,10011268 <__alt_data_end+0xf8011268>
100115e8:	d811883a 	mov	r8,sp
100115ec:	003cc606 	br	10010908 <__alt_data_end+0xf8010908>
100115f0:	000b883a 	mov	r5,zero
100115f4:	2005883a 	mov	r2,r4
100115f8:	d811883a 	mov	r8,sp
100115fc:	003d9906 	br	10010c64 <__alt_data_end+0xf8010c64>
10011600:	10803fcc 	andi	r2,r2,255
10011604:	1080201c 	xori	r2,r2,128
10011608:	10bfe004 	addi	r2,r2,-128
1001160c:	01000c04 	movi	r4,48
10011610:	1100b226 	beq	r2,r4,100118dc <___vfiprintf_internal_r+0x12e4>
10011614:	d9412217 	ldw	r5,1160(sp)
10011618:	d8811e17 	ldw	r2,1144(sp)
1001161c:	193fffc5 	stb	r4,-1(r3)
10011620:	297fffc4 	addi	r5,r5,-1
10011624:	d9412215 	stw	r5,1160(sp)
10011628:	1169c83a 	sub	r20,r2,r5
1001162c:	003d4306 	br	10010b3c <__alt_data_end+0xf8010b3c>
10011630:	d9012117 	ldw	r4,1156(sp)
10011634:	d9412017 	ldw	r5,1152(sp)
10011638:	d9811a04 	addi	r6,sp,1128
1001163c:	00104e40 	call	100104e4 <__sprint_r.part.0>
10011640:	103f091e 	bne	r2,zero,10011268 <__alt_data_end+0xf8011268>
10011644:	d9411b17 	ldw	r5,1132(sp)
10011648:	d8c11c17 	ldw	r3,1136(sp)
1001164c:	d811883a 	mov	r8,sp
10011650:	28800044 	addi	r2,r5,1
10011654:	003d8306 	br	10010c64 <__alt_data_end+0xf8010c64>
10011658:	d9012117 	ldw	r4,1156(sp)
1001165c:	d9412017 	ldw	r5,1152(sp)
10011660:	d9811a04 	addi	r6,sp,1128
10011664:	da812a15 	stw	r10,1192(sp)
10011668:	00104e40 	call	100104e4 <__sprint_r.part.0>
1001166c:	da812a17 	ldw	r10,1192(sp)
10011670:	103efd1e 	bne	r2,zero,10011268 <__alt_data_end+0xf8011268>
10011674:	d9411b17 	ldw	r5,1132(sp)
10011678:	d8c11c17 	ldw	r3,1136(sp)
1001167c:	d811883a 	mov	r8,sp
10011680:	28800044 	addi	r2,r5,1
10011684:	003d6a06 	br	10010c30 <__alt_data_end+0xf8010c30>
10011688:	1800a01e 	bne	r3,zero,1001190c <___vfiprintf_internal_r+0x1314>
1001168c:	000b883a 	mov	r5,zero
10011690:	00800044 	movi	r2,1
10011694:	d811883a 	mov	r8,sp
10011698:	003d7406 	br	10010c6c <__alt_data_end+0xf8010c6c>
1001169c:	d9012117 	ldw	r4,1156(sp)
100116a0:	d9412017 	ldw	r5,1152(sp)
100116a4:	d9811a04 	addi	r6,sp,1128
100116a8:	00104e40 	call	100104e4 <__sprint_r.part.0>
100116ac:	103eee1e 	bne	r2,zero,10011268 <__alt_data_end+0xf8011268>
100116b0:	d8811b17 	ldw	r2,1132(sp)
100116b4:	d8c11c17 	ldw	r3,1136(sp)
100116b8:	d811883a 	mov	r8,sp
100116bc:	10800044 	addi	r2,r2,1
100116c0:	003d8f06 	br	10010d00 <__alt_data_end+0xf8010d00>
100116c4:	04e7c83a 	sub	r19,zero,r19
100116c8:	9804c03a 	cmpne	r2,r19,zero
100116cc:	056bc83a 	sub	r21,zero,r21
100116d0:	a8abc83a 	sub	r21,r21,r2
100116d4:	05800b44 	movi	r22,45
100116d8:	dd811d85 	stb	r22,1142(sp)
100116dc:	8029883a 	mov	r20,r16
100116e0:	00800044 	movi	r2,1
100116e4:	9d46b03a 	or	r3,r19,r21
100116e8:	003cfa06 	br	10010ad4 <__alt_data_end+0xf8010ad4>
100116ec:	000b883a 	mov	r5,zero
100116f0:	00800044 	movi	r2,1
100116f4:	d811883a 	mov	r8,sp
100116f8:	503d5a26 	beq	r10,zero,10010c64 <__alt_data_end+0xf8010c64>
100116fc:	00c00084 	movi	r3,2
10011700:	d9011d04 	addi	r4,sp,1140
10011704:	d9000015 	stw	r4,0(sp)
10011708:	d8c00115 	stw	r3,4(sp)
1001170c:	003d5206 	br	10010c58 <__alt_data_end+0xf8010c58>
10011710:	9080040c 	andi	r2,r18,16
10011714:	1000421e 	bne	r2,zero,10011820 <___vfiprintf_internal_r+0x1228>
10011718:	9480100c 	andi	r18,r18,64
1001171c:	90009c26 	beq	r18,zero,10011990 <___vfiprintf_internal_r+0x1398>
10011720:	d9412317 	ldw	r5,1164(sp)
10011724:	d8c12517 	ldw	r3,1172(sp)
10011728:	28800017 	ldw	r2,0(r5)
1001172c:	29400104 	addi	r5,r5,4
10011730:	d9412315 	stw	r5,1164(sp)
10011734:	10c0000d 	sth	r3,0(r2)
10011738:	003be706 	br	100106d8 <__alt_data_end+0xf80106d8>
1001173c:	90c0100c 	andi	r3,r18,64
10011740:	18003e26 	beq	r3,zero,1001183c <___vfiprintf_internal_r+0x1244>
10011744:	d8c12317 	ldw	r3,1164(sp)
10011748:	14c0000b 	ldhu	r19,0(r2)
1001174c:	002b883a 	mov	r21,zero
10011750:	18c00104 	addi	r3,r3,4
10011754:	d8c12315 	stw	r3,1164(sp)
10011758:	003db706 	br	10010e38 <__alt_data_end+0xf8010e38>
1001175c:	9080100c 	andi	r2,r18,64
10011760:	10004c26 	beq	r2,zero,10011894 <___vfiprintf_internal_r+0x129c>
10011764:	1cc0000f 	ldh	r19,0(r3)
10011768:	d8812317 	ldw	r2,1164(sp)
1001176c:	982bd7fa 	srai	r21,r19,31
10011770:	10800104 	addi	r2,r2,4
10011774:	d8812315 	stw	r2,1164(sp)
10011778:	a805883a 	mov	r2,r21
1001177c:	003cd006 	br	10010ac0 <__alt_data_end+0xf8010ac0>
10011780:	00800084 	movi	r2,2
10011784:	003d8906 	br	10010dac <__alt_data_end+0xf8010dac>
10011788:	b9800007 	ldb	r6,0(r23)
1001178c:	003bfb06 	br	1001077c <__alt_data_end+0xf801077c>
10011790:	9080100c 	andi	r2,r18,64
10011794:	10003726 	beq	r2,zero,10011874 <___vfiprintf_internal_r+0x127c>
10011798:	d9412317 	ldw	r5,1164(sp)
1001179c:	002b883a 	mov	r21,zero
100117a0:	0005883a 	mov	r2,zero
100117a4:	2cc0000b 	ldhu	r19,0(r5)
100117a8:	29400104 	addi	r5,r5,4
100117ac:	d9412315 	stw	r5,1164(sp)
100117b0:	9807883a 	mov	r3,r19
100117b4:	003d7d06 	br	10010dac <__alt_data_end+0xf8010dac>
100117b8:	9080100c 	andi	r2,r18,64
100117bc:	10002526 	beq	r2,zero,10011854 <___vfiprintf_internal_r+0x125c>
100117c0:	d8812317 	ldw	r2,1164(sp)
100117c4:	002b883a 	mov	r21,zero
100117c8:	14c0000b 	ldhu	r19,0(r2)
100117cc:	10800104 	addi	r2,r2,4
100117d0:	d8812315 	stw	r2,1164(sp)
100117d4:	9807883a 	mov	r3,r19
100117d8:	00800044 	movi	r2,1
100117dc:	003d7306 	br	10010dac <__alt_data_end+0xf8010dac>
100117e0:	d9012117 	ldw	r4,1156(sp)
100117e4:	d9412017 	ldw	r5,1152(sp)
100117e8:	d9811a04 	addi	r6,sp,1128
100117ec:	da812a15 	stw	r10,1192(sp)
100117f0:	00104e40 	call	100104e4 <__sprint_r.part.0>
100117f4:	da812a17 	ldw	r10,1192(sp)
100117f8:	103e9b1e 	bne	r2,zero,10011268 <__alt_data_end+0xf8011268>
100117fc:	d9411b17 	ldw	r5,1132(sp)
10011800:	d8c11c17 	ldw	r3,1136(sp)
10011804:	d811883a 	mov	r8,sp
10011808:	28800044 	addi	r2,r5,1
1001180c:	003e5006 	br	10011150 <__alt_data_end+0xf8011150>
10011810:	182b883a 	mov	r21,r3
10011814:	003ed006 	br	10011358 <__alt_data_end+0xf8011358>
10011818:	8029883a 	mov	r20,r16
1001181c:	003dc606 	br	10010f38 <__alt_data_end+0xf8010f38>
10011820:	d8c12317 	ldw	r3,1164(sp)
10011824:	d9012517 	ldw	r4,1172(sp)
10011828:	18800017 	ldw	r2,0(r3)
1001182c:	18c00104 	addi	r3,r3,4
10011830:	d8c12315 	stw	r3,1164(sp)
10011834:	11000015 	stw	r4,0(r2)
10011838:	003ba706 	br	100106d8 <__alt_data_end+0xf80106d8>
1001183c:	d9012317 	ldw	r4,1164(sp)
10011840:	14c00017 	ldw	r19,0(r2)
10011844:	002b883a 	mov	r21,zero
10011848:	21000104 	addi	r4,r4,4
1001184c:	d9012315 	stw	r4,1164(sp)
10011850:	003d7906 	br	10010e38 <__alt_data_end+0xf8010e38>
10011854:	d8c12317 	ldw	r3,1164(sp)
10011858:	002b883a 	mov	r21,zero
1001185c:	00800044 	movi	r2,1
10011860:	1cc00017 	ldw	r19,0(r3)
10011864:	18c00104 	addi	r3,r3,4
10011868:	d8c12315 	stw	r3,1164(sp)
1001186c:	9807883a 	mov	r3,r19
10011870:	003d4e06 	br	10010dac <__alt_data_end+0xf8010dac>
10011874:	d8812317 	ldw	r2,1164(sp)
10011878:	002b883a 	mov	r21,zero
1001187c:	14c00017 	ldw	r19,0(r2)
10011880:	10800104 	addi	r2,r2,4
10011884:	d8812315 	stw	r2,1164(sp)
10011888:	9807883a 	mov	r3,r19
1001188c:	0005883a 	mov	r2,zero
10011890:	003d4606 	br	10010dac <__alt_data_end+0xf8010dac>
10011894:	1cc00017 	ldw	r19,0(r3)
10011898:	d8c12317 	ldw	r3,1164(sp)
1001189c:	982bd7fa 	srai	r21,r19,31
100118a0:	18c00104 	addi	r3,r3,4
100118a4:	d8c12315 	stw	r3,1164(sp)
100118a8:	a805883a 	mov	r2,r21
100118ac:	003c8406 	br	10010ac0 <__alt_data_end+0xf8010ac0>
100118b0:	010400b4 	movhi	r4,4098
100118b4:	21250a04 	addi	r4,r4,-27608
100118b8:	d9012615 	stw	r4,1176(sp)
100118bc:	003d0606 	br	10010cd8 <__alt_data_end+0xf8010cd8>
100118c0:	b9800043 	ldbu	r6,1(r23)
100118c4:	94800814 	ori	r18,r18,32
100118c8:	bdc00044 	addi	r23,r23,1
100118cc:	31803fcc 	andi	r6,r6,255
100118d0:	3180201c 	xori	r6,r6,128
100118d4:	31bfe004 	addi	r6,r6,-128
100118d8:	003ba806 	br	1001077c <__alt_data_end+0xf801077c>
100118dc:	d8811e17 	ldw	r2,1144(sp)
100118e0:	d8c12217 	ldw	r3,1160(sp)
100118e4:	10e9c83a 	sub	r20,r2,r3
100118e8:	003c9406 	br	10010b3c <__alt_data_end+0xf8010b3c>
100118ec:	da012a15 	stw	r8,1192(sp)
100118f0:	00092400 	call	10009240 <strlen>
100118f4:	1029883a 	mov	r20,r2
100118f8:	dd811d83 	ldbu	r22,1142(sp)
100118fc:	dcc12315 	stw	r19,1164(sp)
10011900:	0021883a 	mov	r16,zero
10011904:	da012a17 	ldw	r8,1192(sp)
10011908:	003c8c06 	br	10010b3c <__alt_data_end+0xf8010b3c>
1001190c:	d9012117 	ldw	r4,1156(sp)
10011910:	d9412017 	ldw	r5,1152(sp)
10011914:	d9811a04 	addi	r6,sp,1128
10011918:	00104e40 	call	100104e4 <__sprint_r.part.0>
1001191c:	103e521e 	bne	r2,zero,10011268 <__alt_data_end+0xf8011268>
10011920:	d9411b17 	ldw	r5,1132(sp)
10011924:	d8c11c17 	ldw	r3,1136(sp)
10011928:	d811883a 	mov	r8,sp
1001192c:	28800044 	addi	r2,r5,1
10011930:	003cce06 	br	10010c6c <__alt_data_end+0xf8010c6c>
10011934:	014400b4 	movhi	r5,4098
10011938:	29650e04 	addi	r5,r5,-27592
1001193c:	d9412615 	stw	r5,1176(sp)
10011940:	d9411b17 	ldw	r5,1132(sp)
10011944:	29400044 	addi	r5,r5,1
10011948:	003cad06 	br	10010c00 <__alt_data_end+0xf8010c00>
1001194c:	00800184 	movi	r2,6
10011950:	1400012e 	bgeu	r2,r16,10011958 <___vfiprintf_internal_r+0x1360>
10011954:	1021883a 	mov	r16,r2
10011958:	8029883a 	mov	r20,r16
1001195c:	802b883a 	mov	r21,r16
10011960:	80001c16 	blt	r16,zero,100119d4 <___vfiprintf_internal_r+0x13dc>
10011964:	00c400b4 	movhi	r3,4098
10011968:	18e4ae04 	addi	r3,r3,-27976
1001196c:	dcc12315 	stw	r19,1164(sp)
10011970:	d8c12215 	stw	r3,1160(sp)
10011974:	003cff06 	br	10010d74 <__alt_data_end+0xf8010d74>
10011978:	d9411b17 	ldw	r5,1132(sp)
1001197c:	008400b4 	movhi	r2,4098
10011980:	10a50e04 	addi	r2,r2,-27592
10011984:	d8812615 	stw	r2,1176(sp)
10011988:	29400044 	addi	r5,r5,1
1001198c:	003e6706 	br	1001132c <__alt_data_end+0xf801132c>
10011990:	d9012317 	ldw	r4,1164(sp)
10011994:	d9412517 	ldw	r5,1172(sp)
10011998:	20800017 	ldw	r2,0(r4)
1001199c:	21000104 	addi	r4,r4,4
100119a0:	d9012315 	stw	r4,1164(sp)
100119a4:	11400015 	stw	r5,0(r2)
100119a8:	003b4b06 	br	100106d8 <__alt_data_end+0xf80106d8>
100119ac:	8029883a 	mov	r20,r16
100119b0:	dd811d83 	ldbu	r22,1142(sp)
100119b4:	dcc12315 	stw	r19,1164(sp)
100119b8:	0021883a 	mov	r16,zero
100119bc:	003c5f06 	br	10010b3c <__alt_data_end+0xf8010b3c>
100119c0:	010400b4 	movhi	r4,4098
100119c4:	21250a04 	addi	r4,r4,-27608
100119c8:	d9012615 	stw	r4,1176(sp)
100119cc:	1009883a 	mov	r4,r2
100119d0:	003ea006 	br	10011454 <__alt_data_end+0xf8011454>
100119d4:	002b883a 	mov	r21,zero
100119d8:	003fe206 	br	10011964 <__alt_data_end+0xf8011964>
100119dc:	d9412317 	ldw	r5,1164(sp)
100119e0:	b807883a 	mov	r3,r23
100119e4:	102f883a 	mov	r23,r2
100119e8:	2c000017 	ldw	r16,0(r5)
100119ec:	29000104 	addi	r4,r5,4
100119f0:	d9012315 	stw	r4,1164(sp)
100119f4:	80000416 	blt	r16,zero,10011a08 <___vfiprintf_internal_r+0x1410>
100119f8:	19800047 	ldb	r6,1(r3)
100119fc:	003b5f06 	br	1001077c <__alt_data_end+0xf801077c>
10011a00:	043fffc4 	movi	r16,-1
10011a04:	003bef06 	br	100109c4 <__alt_data_end+0xf80109c4>
10011a08:	043fffc4 	movi	r16,-1
10011a0c:	19800047 	ldb	r6,1(r3)
10011a10:	003b5a06 	br	1001077c <__alt_data_end+0xf801077c>
10011a14:	282b883a 	mov	r21,r5
10011a18:	003cc706 	br	10010d38 <__alt_data_end+0xf8010d38>

10011a1c <__vfiprintf_internal>:
10011a1c:	2007883a 	mov	r3,r4
10011a20:	010400b4 	movhi	r4,4098
10011a24:	212bcb04 	addi	r4,r4,-20692
10011a28:	21000017 	ldw	r4,0(r4)
10011a2c:	2805883a 	mov	r2,r5
10011a30:	300f883a 	mov	r7,r6
10011a34:	180b883a 	mov	r5,r3
10011a38:	100d883a 	mov	r6,r2
10011a3c:	00105f81 	jmpi	100105f8 <___vfiprintf_internal_r>

10011a40 <_write_r>:
10011a40:	defffd04 	addi	sp,sp,-12
10011a44:	dc000015 	stw	r16,0(sp)
10011a48:	040400b4 	movhi	r16,4098
10011a4c:	dc400115 	stw	r17,4(sp)
10011a50:	84329c04 	addi	r16,r16,-13712
10011a54:	2023883a 	mov	r17,r4
10011a58:	2809883a 	mov	r4,r5
10011a5c:	300b883a 	mov	r5,r6
10011a60:	380d883a 	mov	r6,r7
10011a64:	dfc00215 	stw	ra,8(sp)
10011a68:	80000015 	stw	zero,0(r16)
10011a6c:	00150840 	call	10015084 <write>
10011a70:	00ffffc4 	movi	r3,-1
10011a74:	10c00526 	beq	r2,r3,10011a8c <_write_r+0x4c>
10011a78:	dfc00217 	ldw	ra,8(sp)
10011a7c:	dc400117 	ldw	r17,4(sp)
10011a80:	dc000017 	ldw	r16,0(sp)
10011a84:	dec00304 	addi	sp,sp,12
10011a88:	f800283a 	ret
10011a8c:	80c00017 	ldw	r3,0(r16)
10011a90:	183ff926 	beq	r3,zero,10011a78 <__alt_data_end+0xf8011a78>
10011a94:	88c00015 	stw	r3,0(r17)
10011a98:	003ff706 	br	10011a78 <__alt_data_end+0xf8011a78>

10011a9c <_close_r>:
10011a9c:	defffd04 	addi	sp,sp,-12
10011aa0:	dc000015 	stw	r16,0(sp)
10011aa4:	040400b4 	movhi	r16,4098
10011aa8:	dc400115 	stw	r17,4(sp)
10011aac:	84329c04 	addi	r16,r16,-13712
10011ab0:	2023883a 	mov	r17,r4
10011ab4:	2809883a 	mov	r4,r5
10011ab8:	dfc00215 	stw	ra,8(sp)
10011abc:	80000015 	stw	zero,0(r16)
10011ac0:	00147a00 	call	100147a0 <close>
10011ac4:	00ffffc4 	movi	r3,-1
10011ac8:	10c00526 	beq	r2,r3,10011ae0 <_close_r+0x44>
10011acc:	dfc00217 	ldw	ra,8(sp)
10011ad0:	dc400117 	ldw	r17,4(sp)
10011ad4:	dc000017 	ldw	r16,0(sp)
10011ad8:	dec00304 	addi	sp,sp,12
10011adc:	f800283a 	ret
10011ae0:	80c00017 	ldw	r3,0(r16)
10011ae4:	183ff926 	beq	r3,zero,10011acc <__alt_data_end+0xf8011acc>
10011ae8:	88c00015 	stw	r3,0(r17)
10011aec:	003ff706 	br	10011acc <__alt_data_end+0xf8011acc>

10011af0 <_calloc_r>:
10011af0:	defffe04 	addi	sp,sp,-8
10011af4:	dc000015 	stw	r16,0(sp)
10011af8:	2021883a 	mov	r16,r4
10011afc:	2809883a 	mov	r4,r5
10011b00:	300b883a 	mov	r5,r6
10011b04:	dfc00115 	stw	ra,4(sp)
10011b08:	0006df00 	call	10006df0 <__mulsi3>
10011b0c:	8009883a 	mov	r4,r16
10011b10:	100b883a 	mov	r5,r2
10011b14:	000e1440 	call	1000e144 <_malloc_r>
10011b18:	1021883a 	mov	r16,r2
10011b1c:	10002826 	beq	r2,zero,10011bc0 <_calloc_r+0xd0>
10011b20:	11bfff17 	ldw	r6,-4(r2)
10011b24:	00bfff04 	movi	r2,-4
10011b28:	00c00904 	movi	r3,36
10011b2c:	308c703a 	and	r6,r6,r2
10011b30:	308d883a 	add	r6,r6,r2
10011b34:	19801436 	bltu	r3,r6,10011b88 <_calloc_r+0x98>
10011b38:	008004c4 	movi	r2,19
10011b3c:	11800936 	bltu	r2,r6,10011b64 <_calloc_r+0x74>
10011b40:	8005883a 	mov	r2,r16
10011b44:	10000015 	stw	zero,0(r2)
10011b48:	10000115 	stw	zero,4(r2)
10011b4c:	10000215 	stw	zero,8(r2)
10011b50:	8005883a 	mov	r2,r16
10011b54:	dfc00117 	ldw	ra,4(sp)
10011b58:	dc000017 	ldw	r16,0(sp)
10011b5c:	dec00204 	addi	sp,sp,8
10011b60:	f800283a 	ret
10011b64:	80000015 	stw	zero,0(r16)
10011b68:	80000115 	stw	zero,4(r16)
10011b6c:	008006c4 	movi	r2,27
10011b70:	11800d2e 	bgeu	r2,r6,10011ba8 <_calloc_r+0xb8>
10011b74:	80000215 	stw	zero,8(r16)
10011b78:	80000315 	stw	zero,12(r16)
10011b7c:	30c00c26 	beq	r6,r3,10011bb0 <_calloc_r+0xc0>
10011b80:	80800404 	addi	r2,r16,16
10011b84:	003fef06 	br	10011b44 <__alt_data_end+0xf8011b44>
10011b88:	8009883a 	mov	r4,r16
10011b8c:	000b883a 	mov	r5,zero
10011b90:	000eb300 	call	1000eb30 <memset>
10011b94:	8005883a 	mov	r2,r16
10011b98:	dfc00117 	ldw	ra,4(sp)
10011b9c:	dc000017 	ldw	r16,0(sp)
10011ba0:	dec00204 	addi	sp,sp,8
10011ba4:	f800283a 	ret
10011ba8:	80800204 	addi	r2,r16,8
10011bac:	003fe506 	br	10011b44 <__alt_data_end+0xf8011b44>
10011bb0:	80000415 	stw	zero,16(r16)
10011bb4:	80800604 	addi	r2,r16,24
10011bb8:	80000515 	stw	zero,20(r16)
10011bbc:	003fe106 	br	10011b44 <__alt_data_end+0xf8011b44>
10011bc0:	0005883a 	mov	r2,zero
10011bc4:	003fe306 	br	10011b54 <__alt_data_end+0xf8011b54>

10011bc8 <_fclose_r>:
10011bc8:	28003226 	beq	r5,zero,10011c94 <_fclose_r+0xcc>
10011bcc:	defffc04 	addi	sp,sp,-16
10011bd0:	dc400115 	stw	r17,4(sp)
10011bd4:	2023883a 	mov	r17,r4
10011bd8:	dc000015 	stw	r16,0(sp)
10011bdc:	dfc00315 	stw	ra,12(sp)
10011be0:	dc800215 	stw	r18,8(sp)
10011be4:	2821883a 	mov	r16,r5
10011be8:	000d4440 	call	1000d444 <__sfp_lock_acquire>
10011bec:	88000226 	beq	r17,zero,10011bf8 <_fclose_r+0x30>
10011bf0:	88800e17 	ldw	r2,56(r17)
10011bf4:	10002926 	beq	r2,zero,10011c9c <_fclose_r+0xd4>
10011bf8:	8080030f 	ldh	r2,12(r16)
10011bfc:	10002226 	beq	r2,zero,10011c88 <_fclose_r+0xc0>
10011c00:	8809883a 	mov	r4,r17
10011c04:	800b883a 	mov	r5,r16
10011c08:	000ce780 	call	1000ce78 <_fflush_r>
10011c0c:	1025883a 	mov	r18,r2
10011c10:	80800b17 	ldw	r2,44(r16)
10011c14:	10000426 	beq	r2,zero,10011c28 <_fclose_r+0x60>
10011c18:	81400717 	ldw	r5,28(r16)
10011c1c:	8809883a 	mov	r4,r17
10011c20:	103ee83a 	callr	r2
10011c24:	10002616 	blt	r2,zero,10011cc0 <_fclose_r+0xf8>
10011c28:	8080030b 	ldhu	r2,12(r16)
10011c2c:	1080200c 	andi	r2,r2,128
10011c30:	10001f1e 	bne	r2,zero,10011cb0 <_fclose_r+0xe8>
10011c34:	81400c17 	ldw	r5,48(r16)
10011c38:	28000526 	beq	r5,zero,10011c50 <_fclose_r+0x88>
10011c3c:	80801004 	addi	r2,r16,64
10011c40:	28800226 	beq	r5,r2,10011c4c <_fclose_r+0x84>
10011c44:	8809883a 	mov	r4,r17
10011c48:	000d5a80 	call	1000d5a8 <_free_r>
10011c4c:	80000c15 	stw	zero,48(r16)
10011c50:	81401117 	ldw	r5,68(r16)
10011c54:	28000326 	beq	r5,zero,10011c64 <_fclose_r+0x9c>
10011c58:	8809883a 	mov	r4,r17
10011c5c:	000d5a80 	call	1000d5a8 <_free_r>
10011c60:	80001115 	stw	zero,68(r16)
10011c64:	8000030d 	sth	zero,12(r16)
10011c68:	000d4480 	call	1000d448 <__sfp_lock_release>
10011c6c:	9005883a 	mov	r2,r18
10011c70:	dfc00317 	ldw	ra,12(sp)
10011c74:	dc800217 	ldw	r18,8(sp)
10011c78:	dc400117 	ldw	r17,4(sp)
10011c7c:	dc000017 	ldw	r16,0(sp)
10011c80:	dec00404 	addi	sp,sp,16
10011c84:	f800283a 	ret
10011c88:	000d4480 	call	1000d448 <__sfp_lock_release>
10011c8c:	0005883a 	mov	r2,zero
10011c90:	003ff706 	br	10011c70 <__alt_data_end+0xf8011c70>
10011c94:	0005883a 	mov	r2,zero
10011c98:	f800283a 	ret
10011c9c:	8809883a 	mov	r4,r17
10011ca0:	000d4340 	call	1000d434 <__sinit>
10011ca4:	8080030f 	ldh	r2,12(r16)
10011ca8:	103fd51e 	bne	r2,zero,10011c00 <__alt_data_end+0xf8011c00>
10011cac:	003ff606 	br	10011c88 <__alt_data_end+0xf8011c88>
10011cb0:	81400417 	ldw	r5,16(r16)
10011cb4:	8809883a 	mov	r4,r17
10011cb8:	000d5a80 	call	1000d5a8 <_free_r>
10011cbc:	003fdd06 	br	10011c34 <__alt_data_end+0xf8011c34>
10011cc0:	04bfffc4 	movi	r18,-1
10011cc4:	003fd806 	br	10011c28 <__alt_data_end+0xf8011c28>

10011cc8 <fclose>:
10011cc8:	008400b4 	movhi	r2,4098
10011ccc:	10abcb04 	addi	r2,r2,-20692
10011cd0:	200b883a 	mov	r5,r4
10011cd4:	11000017 	ldw	r4,0(r2)
10011cd8:	0011bc81 	jmpi	10011bc8 <_fclose_r>

10011cdc <_fputwc_r>:
10011cdc:	3080030b 	ldhu	r2,12(r6)
10011ce0:	defff804 	addi	sp,sp,-32
10011ce4:	dcc00415 	stw	r19,16(sp)
10011ce8:	dc800315 	stw	r18,12(sp)
10011cec:	dc000115 	stw	r16,4(sp)
10011cf0:	dfc00715 	stw	ra,28(sp)
10011cf4:	dd400615 	stw	r21,24(sp)
10011cf8:	dd000515 	stw	r20,20(sp)
10011cfc:	dc400215 	stw	r17,8(sp)
10011d00:	10c8000c 	andi	r3,r2,8192
10011d04:	3021883a 	mov	r16,r6
10011d08:	2027883a 	mov	r19,r4
10011d0c:	2825883a 	mov	r18,r5
10011d10:	1800051e 	bne	r3,zero,10011d28 <_fputwc_r+0x4c>
10011d14:	30c01917 	ldw	r3,100(r6)
10011d18:	10880014 	ori	r2,r2,8192
10011d1c:	3080030d 	sth	r2,12(r6)
10011d20:	18880014 	ori	r2,r3,8192
10011d24:	30801915 	stw	r2,100(r6)
10011d28:	000df340 	call	1000df34 <__locale_mb_cur_max>
10011d2c:	00c00044 	movi	r3,1
10011d30:	10c03e26 	beq	r2,r3,10011e2c <_fputwc_r+0x150>
10011d34:	9809883a 	mov	r4,r19
10011d38:	d80b883a 	mov	r5,sp
10011d3c:	900d883a 	mov	r6,r18
10011d40:	81c01704 	addi	r7,r16,92
10011d44:	001218c0 	call	1001218c <_wcrtomb_r>
10011d48:	1029883a 	mov	r20,r2
10011d4c:	00bfffc4 	movi	r2,-1
10011d50:	a0802026 	beq	r20,r2,10011dd4 <_fputwc_r+0xf8>
10011d54:	d9400003 	ldbu	r5,0(sp)
10011d58:	a0001c26 	beq	r20,zero,10011dcc <_fputwc_r+0xf0>
10011d5c:	0023883a 	mov	r17,zero
10011d60:	05400284 	movi	r21,10
10011d64:	00000906 	br	10011d8c <_fputwc_r+0xb0>
10011d68:	80800017 	ldw	r2,0(r16)
10011d6c:	11400005 	stb	r5,0(r2)
10011d70:	80c00017 	ldw	r3,0(r16)
10011d74:	18c00044 	addi	r3,r3,1
10011d78:	80c00015 	stw	r3,0(r16)
10011d7c:	8c400044 	addi	r17,r17,1
10011d80:	dc45883a 	add	r2,sp,r17
10011d84:	8d00112e 	bgeu	r17,r20,10011dcc <_fputwc_r+0xf0>
10011d88:	11400003 	ldbu	r5,0(r2)
10011d8c:	80c00217 	ldw	r3,8(r16)
10011d90:	18ffffc4 	addi	r3,r3,-1
10011d94:	80c00215 	stw	r3,8(r16)
10011d98:	183ff30e 	bge	r3,zero,10011d68 <__alt_data_end+0xf8011d68>
10011d9c:	80800617 	ldw	r2,24(r16)
10011da0:	18801916 	blt	r3,r2,10011e08 <_fputwc_r+0x12c>
10011da4:	80800017 	ldw	r2,0(r16)
10011da8:	11400005 	stb	r5,0(r2)
10011dac:	80800017 	ldw	r2,0(r16)
10011db0:	10c00003 	ldbu	r3,0(r2)
10011db4:	10800044 	addi	r2,r2,1
10011db8:	1d402326 	beq	r3,r21,10011e48 <_fputwc_r+0x16c>
10011dbc:	80800015 	stw	r2,0(r16)
10011dc0:	8c400044 	addi	r17,r17,1
10011dc4:	dc45883a 	add	r2,sp,r17
10011dc8:	8d3fef36 	bltu	r17,r20,10011d88 <__alt_data_end+0xf8011d88>
10011dcc:	9005883a 	mov	r2,r18
10011dd0:	00000406 	br	10011de4 <_fputwc_r+0x108>
10011dd4:	80c0030b 	ldhu	r3,12(r16)
10011dd8:	a005883a 	mov	r2,r20
10011ddc:	18c01014 	ori	r3,r3,64
10011de0:	80c0030d 	sth	r3,12(r16)
10011de4:	dfc00717 	ldw	ra,28(sp)
10011de8:	dd400617 	ldw	r21,24(sp)
10011dec:	dd000517 	ldw	r20,20(sp)
10011df0:	dcc00417 	ldw	r19,16(sp)
10011df4:	dc800317 	ldw	r18,12(sp)
10011df8:	dc400217 	ldw	r17,8(sp)
10011dfc:	dc000117 	ldw	r16,4(sp)
10011e00:	dec00804 	addi	sp,sp,32
10011e04:	f800283a 	ret
10011e08:	9809883a 	mov	r4,r19
10011e0c:	29403fcc 	andi	r5,r5,255
10011e10:	800d883a 	mov	r6,r16
10011e14:	001201c0 	call	1001201c <__swbuf_r>
10011e18:	10bfffe0 	cmpeqi	r2,r2,-1
10011e1c:	10803fcc 	andi	r2,r2,255
10011e20:	103fd626 	beq	r2,zero,10011d7c <__alt_data_end+0xf8011d7c>
10011e24:	00bfffc4 	movi	r2,-1
10011e28:	003fee06 	br	10011de4 <__alt_data_end+0xf8011de4>
10011e2c:	90ffffc4 	addi	r3,r18,-1
10011e30:	01003f84 	movi	r4,254
10011e34:	20ffbf36 	bltu	r4,r3,10011d34 <__alt_data_end+0xf8011d34>
10011e38:	900b883a 	mov	r5,r18
10011e3c:	dc800005 	stb	r18,0(sp)
10011e40:	1029883a 	mov	r20,r2
10011e44:	003fc506 	br	10011d5c <__alt_data_end+0xf8011d5c>
10011e48:	9809883a 	mov	r4,r19
10011e4c:	a80b883a 	mov	r5,r21
10011e50:	800d883a 	mov	r6,r16
10011e54:	001201c0 	call	1001201c <__swbuf_r>
10011e58:	10bfffe0 	cmpeqi	r2,r2,-1
10011e5c:	003fef06 	br	10011e1c <__alt_data_end+0xf8011e1c>

10011e60 <fputwc>:
10011e60:	defffc04 	addi	sp,sp,-16
10011e64:	dc000115 	stw	r16,4(sp)
10011e68:	040400b4 	movhi	r16,4098
10011e6c:	842bcb04 	addi	r16,r16,-20692
10011e70:	dc400215 	stw	r17,8(sp)
10011e74:	2023883a 	mov	r17,r4
10011e78:	81000017 	ldw	r4,0(r16)
10011e7c:	dfc00315 	stw	ra,12(sp)
10011e80:	280d883a 	mov	r6,r5
10011e84:	20000626 	beq	r4,zero,10011ea0 <fputwc+0x40>
10011e88:	20800e17 	ldw	r2,56(r4)
10011e8c:	1000041e 	bne	r2,zero,10011ea0 <fputwc+0x40>
10011e90:	d9400015 	stw	r5,0(sp)
10011e94:	000d4340 	call	1000d434 <__sinit>
10011e98:	81000017 	ldw	r4,0(r16)
10011e9c:	d9800017 	ldw	r6,0(sp)
10011ea0:	880b883a 	mov	r5,r17
10011ea4:	dfc00317 	ldw	ra,12(sp)
10011ea8:	dc400217 	ldw	r17,8(sp)
10011eac:	dc000117 	ldw	r16,4(sp)
10011eb0:	dec00404 	addi	sp,sp,16
10011eb4:	0011cdc1 	jmpi	10011cdc <_fputwc_r>

10011eb8 <_fstat_r>:
10011eb8:	defffd04 	addi	sp,sp,-12
10011ebc:	dc000015 	stw	r16,0(sp)
10011ec0:	040400b4 	movhi	r16,4098
10011ec4:	dc400115 	stw	r17,4(sp)
10011ec8:	84329c04 	addi	r16,r16,-13712
10011ecc:	2023883a 	mov	r17,r4
10011ed0:	2809883a 	mov	r4,r5
10011ed4:	300b883a 	mov	r5,r6
10011ed8:	dfc00215 	stw	ra,8(sp)
10011edc:	80000015 	stw	zero,0(r16)
10011ee0:	00148f40 	call	100148f4 <fstat>
10011ee4:	00ffffc4 	movi	r3,-1
10011ee8:	10c00526 	beq	r2,r3,10011f00 <_fstat_r+0x48>
10011eec:	dfc00217 	ldw	ra,8(sp)
10011ef0:	dc400117 	ldw	r17,4(sp)
10011ef4:	dc000017 	ldw	r16,0(sp)
10011ef8:	dec00304 	addi	sp,sp,12
10011efc:	f800283a 	ret
10011f00:	80c00017 	ldw	r3,0(r16)
10011f04:	183ff926 	beq	r3,zero,10011eec <__alt_data_end+0xf8011eec>
10011f08:	88c00015 	stw	r3,0(r17)
10011f0c:	003ff706 	br	10011eec <__alt_data_end+0xf8011eec>

10011f10 <_isatty_r>:
10011f10:	defffd04 	addi	sp,sp,-12
10011f14:	dc000015 	stw	r16,0(sp)
10011f18:	040400b4 	movhi	r16,4098
10011f1c:	dc400115 	stw	r17,4(sp)
10011f20:	84329c04 	addi	r16,r16,-13712
10011f24:	2023883a 	mov	r17,r4
10011f28:	2809883a 	mov	r4,r5
10011f2c:	dfc00215 	stw	ra,8(sp)
10011f30:	80000015 	stw	zero,0(r16)
10011f34:	00149fc0 	call	100149fc <isatty>
10011f38:	00ffffc4 	movi	r3,-1
10011f3c:	10c00526 	beq	r2,r3,10011f54 <_isatty_r+0x44>
10011f40:	dfc00217 	ldw	ra,8(sp)
10011f44:	dc400117 	ldw	r17,4(sp)
10011f48:	dc000017 	ldw	r16,0(sp)
10011f4c:	dec00304 	addi	sp,sp,12
10011f50:	f800283a 	ret
10011f54:	80c00017 	ldw	r3,0(r16)
10011f58:	183ff926 	beq	r3,zero,10011f40 <__alt_data_end+0xf8011f40>
10011f5c:	88c00015 	stw	r3,0(r17)
10011f60:	003ff706 	br	10011f40 <__alt_data_end+0xf8011f40>

10011f64 <_lseek_r>:
10011f64:	defffd04 	addi	sp,sp,-12
10011f68:	dc000015 	stw	r16,0(sp)
10011f6c:	040400b4 	movhi	r16,4098
10011f70:	dc400115 	stw	r17,4(sp)
10011f74:	84329c04 	addi	r16,r16,-13712
10011f78:	2023883a 	mov	r17,r4
10011f7c:	2809883a 	mov	r4,r5
10011f80:	300b883a 	mov	r5,r6
10011f84:	380d883a 	mov	r6,r7
10011f88:	dfc00215 	stw	ra,8(sp)
10011f8c:	80000015 	stw	zero,0(r16)
10011f90:	0014be40 	call	10014be4 <lseek>
10011f94:	00ffffc4 	movi	r3,-1
10011f98:	10c00526 	beq	r2,r3,10011fb0 <_lseek_r+0x4c>
10011f9c:	dfc00217 	ldw	ra,8(sp)
10011fa0:	dc400117 	ldw	r17,4(sp)
10011fa4:	dc000017 	ldw	r16,0(sp)
10011fa8:	dec00304 	addi	sp,sp,12
10011fac:	f800283a 	ret
10011fb0:	80c00017 	ldw	r3,0(r16)
10011fb4:	183ff926 	beq	r3,zero,10011f9c <__alt_data_end+0xf8011f9c>
10011fb8:	88c00015 	stw	r3,0(r17)
10011fbc:	003ff706 	br	10011f9c <__alt_data_end+0xf8011f9c>

10011fc0 <_read_r>:
10011fc0:	defffd04 	addi	sp,sp,-12
10011fc4:	dc000015 	stw	r16,0(sp)
10011fc8:	040400b4 	movhi	r16,4098
10011fcc:	dc400115 	stw	r17,4(sp)
10011fd0:	84329c04 	addi	r16,r16,-13712
10011fd4:	2023883a 	mov	r17,r4
10011fd8:	2809883a 	mov	r4,r5
10011fdc:	300b883a 	mov	r5,r6
10011fe0:	380d883a 	mov	r6,r7
10011fe4:	dfc00215 	stw	ra,8(sp)
10011fe8:	80000015 	stw	zero,0(r16)
10011fec:	0014dd00 	call	10014dd0 <read>
10011ff0:	00ffffc4 	movi	r3,-1
10011ff4:	10c00526 	beq	r2,r3,1001200c <_read_r+0x4c>
10011ff8:	dfc00217 	ldw	ra,8(sp)
10011ffc:	dc400117 	ldw	r17,4(sp)
10012000:	dc000017 	ldw	r16,0(sp)
10012004:	dec00304 	addi	sp,sp,12
10012008:	f800283a 	ret
1001200c:	80c00017 	ldw	r3,0(r16)
10012010:	183ff926 	beq	r3,zero,10011ff8 <__alt_data_end+0xf8011ff8>
10012014:	88c00015 	stw	r3,0(r17)
10012018:	003ff706 	br	10011ff8 <__alt_data_end+0xf8011ff8>

1001201c <__swbuf_r>:
1001201c:	defffc04 	addi	sp,sp,-16
10012020:	dc800215 	stw	r18,8(sp)
10012024:	dc400115 	stw	r17,4(sp)
10012028:	dc000015 	stw	r16,0(sp)
1001202c:	dfc00315 	stw	ra,12(sp)
10012030:	2025883a 	mov	r18,r4
10012034:	2823883a 	mov	r17,r5
10012038:	3021883a 	mov	r16,r6
1001203c:	20000226 	beq	r4,zero,10012048 <__swbuf_r+0x2c>
10012040:	20800e17 	ldw	r2,56(r4)
10012044:	10004126 	beq	r2,zero,1001214c <__swbuf_r+0x130>
10012048:	80c00617 	ldw	r3,24(r16)
1001204c:	8180030b 	ldhu	r6,12(r16)
10012050:	80c00215 	stw	r3,8(r16)
10012054:	30c0020c 	andi	r3,r6,8
10012058:	18003526 	beq	r3,zero,10012130 <__swbuf_r+0x114>
1001205c:	80c00417 	ldw	r3,16(r16)
10012060:	18003326 	beq	r3,zero,10012130 <__swbuf_r+0x114>
10012064:	3088000c 	andi	r2,r6,8192
10012068:	8c403fcc 	andi	r17,r17,255
1001206c:	10001726 	beq	r2,zero,100120cc <__swbuf_r+0xb0>
10012070:	80800017 	ldw	r2,0(r16)
10012074:	81000517 	ldw	r4,20(r16)
10012078:	10c7c83a 	sub	r3,r2,r3
1001207c:	19001d0e 	bge	r3,r4,100120f4 <__swbuf_r+0xd8>
10012080:	18c00044 	addi	r3,r3,1
10012084:	81400217 	ldw	r5,8(r16)
10012088:	11000044 	addi	r4,r2,1
1001208c:	81000015 	stw	r4,0(r16)
10012090:	297fffc4 	addi	r5,r5,-1
10012094:	81400215 	stw	r5,8(r16)
10012098:	14400005 	stb	r17,0(r2)
1001209c:	80800517 	ldw	r2,20(r16)
100120a0:	10c01d26 	beq	r2,r3,10012118 <__swbuf_r+0xfc>
100120a4:	8080030b 	ldhu	r2,12(r16)
100120a8:	1080004c 	andi	r2,r2,1
100120ac:	1000181e 	bne	r2,zero,10012110 <__swbuf_r+0xf4>
100120b0:	8805883a 	mov	r2,r17
100120b4:	dfc00317 	ldw	ra,12(sp)
100120b8:	dc800217 	ldw	r18,8(sp)
100120bc:	dc400117 	ldw	r17,4(sp)
100120c0:	dc000017 	ldw	r16,0(sp)
100120c4:	dec00404 	addi	sp,sp,16
100120c8:	f800283a 	ret
100120cc:	81001917 	ldw	r4,100(r16)
100120d0:	00b7ffc4 	movi	r2,-8193
100120d4:	31880014 	ori	r6,r6,8192
100120d8:	2084703a 	and	r2,r4,r2
100120dc:	80801915 	stw	r2,100(r16)
100120e0:	80800017 	ldw	r2,0(r16)
100120e4:	81000517 	ldw	r4,20(r16)
100120e8:	8180030d 	sth	r6,12(r16)
100120ec:	10c7c83a 	sub	r3,r2,r3
100120f0:	193fe316 	blt	r3,r4,10012080 <__alt_data_end+0xf8012080>
100120f4:	9009883a 	mov	r4,r18
100120f8:	800b883a 	mov	r5,r16
100120fc:	000ce780 	call	1000ce78 <_fflush_r>
10012100:	1000091e 	bne	r2,zero,10012128 <__swbuf_r+0x10c>
10012104:	80800017 	ldw	r2,0(r16)
10012108:	00c00044 	movi	r3,1
1001210c:	003fdd06 	br	10012084 <__alt_data_end+0xf8012084>
10012110:	00800284 	movi	r2,10
10012114:	88bfe61e 	bne	r17,r2,100120b0 <__alt_data_end+0xf80120b0>
10012118:	9009883a 	mov	r4,r18
1001211c:	800b883a 	mov	r5,r16
10012120:	000ce780 	call	1000ce78 <_fflush_r>
10012124:	103fe226 	beq	r2,zero,100120b0 <__alt_data_end+0xf80120b0>
10012128:	00bfffc4 	movi	r2,-1
1001212c:	003fe106 	br	100120b4 <__alt_data_end+0xf80120b4>
10012130:	9009883a 	mov	r4,r18
10012134:	800b883a 	mov	r5,r16
10012138:	000b3f80 	call	1000b3f8 <__swsetup_r>
1001213c:	1000051e 	bne	r2,zero,10012154 <__swbuf_r+0x138>
10012140:	8180030b 	ldhu	r6,12(r16)
10012144:	80c00417 	ldw	r3,16(r16)
10012148:	003fc606 	br	10012064 <__alt_data_end+0xf8012064>
1001214c:	000d4340 	call	1000d434 <__sinit>
10012150:	003fbd06 	br	10012048 <__alt_data_end+0xf8012048>
10012154:	80c0030b 	ldhu	r3,12(r16)
10012158:	00bfffc4 	movi	r2,-1
1001215c:	18c01014 	ori	r3,r3,64
10012160:	80c0030d 	sth	r3,12(r16)
10012164:	00c00244 	movi	r3,9
10012168:	90c00015 	stw	r3,0(r18)
1001216c:	003fd106 	br	100120b4 <__alt_data_end+0xf80120b4>

10012170 <__swbuf>:
10012170:	00c400b4 	movhi	r3,4098
10012174:	18ebcb04 	addi	r3,r3,-20692
10012178:	2005883a 	mov	r2,r4
1001217c:	19000017 	ldw	r4,0(r3)
10012180:	280d883a 	mov	r6,r5
10012184:	100b883a 	mov	r5,r2
10012188:	001201c1 	jmpi	1001201c <__swbuf_r>

1001218c <_wcrtomb_r>:
1001218c:	defff604 	addi	sp,sp,-40
10012190:	008400b4 	movhi	r2,4098
10012194:	dc800815 	stw	r18,32(sp)
10012198:	dc400715 	stw	r17,28(sp)
1001219c:	dc000615 	stw	r16,24(sp)
100121a0:	10abcf04 	addi	r2,r2,-20676
100121a4:	dfc00915 	stw	ra,36(sp)
100121a8:	2021883a 	mov	r16,r4
100121ac:	3823883a 	mov	r17,r7
100121b0:	14800017 	ldw	r18,0(r2)
100121b4:	28001426 	beq	r5,zero,10012208 <_wcrtomb_r+0x7c>
100121b8:	d9400415 	stw	r5,16(sp)
100121bc:	d9800515 	stw	r6,20(sp)
100121c0:	000df280 	call	1000df28 <__locale_charset>
100121c4:	d9400417 	ldw	r5,16(sp)
100121c8:	d9800517 	ldw	r6,20(sp)
100121cc:	8009883a 	mov	r4,r16
100121d0:	dc400015 	stw	r17,0(sp)
100121d4:	100f883a 	mov	r7,r2
100121d8:	903ee83a 	callr	r18
100121dc:	00ffffc4 	movi	r3,-1
100121e0:	10c0031e 	bne	r2,r3,100121f0 <_wcrtomb_r+0x64>
100121e4:	88000015 	stw	zero,0(r17)
100121e8:	00c02284 	movi	r3,138
100121ec:	80c00015 	stw	r3,0(r16)
100121f0:	dfc00917 	ldw	ra,36(sp)
100121f4:	dc800817 	ldw	r18,32(sp)
100121f8:	dc400717 	ldw	r17,28(sp)
100121fc:	dc000617 	ldw	r16,24(sp)
10012200:	dec00a04 	addi	sp,sp,40
10012204:	f800283a 	ret
10012208:	000df280 	call	1000df28 <__locale_charset>
1001220c:	8009883a 	mov	r4,r16
10012210:	dc400015 	stw	r17,0(sp)
10012214:	d9400104 	addi	r5,sp,4
10012218:	000d883a 	mov	r6,zero
1001221c:	100f883a 	mov	r7,r2
10012220:	903ee83a 	callr	r18
10012224:	003fed06 	br	100121dc <__alt_data_end+0xf80121dc>

10012228 <wcrtomb>:
10012228:	defff504 	addi	sp,sp,-44
1001222c:	dc400515 	stw	r17,20(sp)
10012230:	dc000415 	stw	r16,16(sp)
10012234:	dfc00a15 	stw	ra,40(sp)
10012238:	dd400915 	stw	r21,36(sp)
1001223c:	dd000815 	stw	r20,32(sp)
10012240:	dcc00715 	stw	r19,28(sp)
10012244:	dc800615 	stw	r18,24(sp)
10012248:	2021883a 	mov	r16,r4
1001224c:	3023883a 	mov	r17,r6
10012250:	20001d26 	beq	r4,zero,100122c8 <wcrtomb+0xa0>
10012254:	048400b4 	movhi	r18,4098
10012258:	94abcb04 	addi	r18,r18,-20692
1001225c:	008400b4 	movhi	r2,4098
10012260:	95400017 	ldw	r21,0(r18)
10012264:	10abcf04 	addi	r2,r2,-20676
10012268:	15000017 	ldw	r20,0(r2)
1001226c:	2827883a 	mov	r19,r5
10012270:	000df280 	call	1000df28 <__locale_charset>
10012274:	a809883a 	mov	r4,r21
10012278:	dc400015 	stw	r17,0(sp)
1001227c:	800b883a 	mov	r5,r16
10012280:	980d883a 	mov	r6,r19
10012284:	100f883a 	mov	r7,r2
10012288:	a03ee83a 	callr	r20
1001228c:	00ffffc4 	movi	r3,-1
10012290:	10c0041e 	bne	r2,r3,100122a4 <wcrtomb+0x7c>
10012294:	90c00017 	ldw	r3,0(r18)
10012298:	01002284 	movi	r4,138
1001229c:	88000015 	stw	zero,0(r17)
100122a0:	19000015 	stw	r4,0(r3)
100122a4:	dfc00a17 	ldw	ra,40(sp)
100122a8:	dd400917 	ldw	r21,36(sp)
100122ac:	dd000817 	ldw	r20,32(sp)
100122b0:	dcc00717 	ldw	r19,28(sp)
100122b4:	dc800617 	ldw	r18,24(sp)
100122b8:	dc400517 	ldw	r17,20(sp)
100122bc:	dc000417 	ldw	r16,16(sp)
100122c0:	dec00b04 	addi	sp,sp,44
100122c4:	f800283a 	ret
100122c8:	048400b4 	movhi	r18,4098
100122cc:	94abcb04 	addi	r18,r18,-20692
100122d0:	008400b4 	movhi	r2,4098
100122d4:	94c00017 	ldw	r19,0(r18)
100122d8:	10abcf04 	addi	r2,r2,-20676
100122dc:	14000017 	ldw	r16,0(r2)
100122e0:	000df280 	call	1000df28 <__locale_charset>
100122e4:	9809883a 	mov	r4,r19
100122e8:	dc400015 	stw	r17,0(sp)
100122ec:	d9400104 	addi	r5,sp,4
100122f0:	000d883a 	mov	r6,zero
100122f4:	100f883a 	mov	r7,r2
100122f8:	803ee83a 	callr	r16
100122fc:	003fe306 	br	1001228c <__alt_data_end+0xf801228c>

10012300 <__ascii_wctomb>:
10012300:	28000526 	beq	r5,zero,10012318 <__ascii_wctomb+0x18>
10012304:	00803fc4 	movi	r2,255
10012308:	11800536 	bltu	r2,r6,10012320 <__ascii_wctomb+0x20>
1001230c:	29800005 	stb	r6,0(r5)
10012310:	00800044 	movi	r2,1
10012314:	f800283a 	ret
10012318:	0005883a 	mov	r2,zero
1001231c:	f800283a 	ret
10012320:	00802284 	movi	r2,138
10012324:	20800015 	stw	r2,0(r4)
10012328:	00bfffc4 	movi	r2,-1
1001232c:	f800283a 	ret

10012330 <_wctomb_r>:
10012330:	008400b4 	movhi	r2,4098
10012334:	defff904 	addi	sp,sp,-28
10012338:	10abcf04 	addi	r2,r2,-20676
1001233c:	dfc00615 	stw	ra,24(sp)
10012340:	dc400515 	stw	r17,20(sp)
10012344:	dc000415 	stw	r16,16(sp)
10012348:	3823883a 	mov	r17,r7
1001234c:	14000017 	ldw	r16,0(r2)
10012350:	d9000115 	stw	r4,4(sp)
10012354:	d9400215 	stw	r5,8(sp)
10012358:	d9800315 	stw	r6,12(sp)
1001235c:	000df280 	call	1000df28 <__locale_charset>
10012360:	d9000117 	ldw	r4,4(sp)
10012364:	d9400217 	ldw	r5,8(sp)
10012368:	d9800317 	ldw	r6,12(sp)
1001236c:	dc400015 	stw	r17,0(sp)
10012370:	100f883a 	mov	r7,r2
10012374:	803ee83a 	callr	r16
10012378:	dfc00617 	ldw	ra,24(sp)
1001237c:	dc400517 	ldw	r17,20(sp)
10012380:	dc000417 	ldw	r16,16(sp)
10012384:	dec00704 	addi	sp,sp,28
10012388:	f800283a 	ret

1001238c <__muldi3>:
1001238c:	defff604 	addi	sp,sp,-40
10012390:	dd800615 	stw	r22,24(sp)
10012394:	dd400515 	stw	r21,20(sp)
10012398:	25bfffcc 	andi	r22,r4,65535
1001239c:	357fffcc 	andi	r21,r6,65535
100123a0:	dc400115 	stw	r17,4(sp)
100123a4:	2022d43a 	srli	r17,r4,16
100123a8:	dcc00315 	stw	r19,12(sp)
100123ac:	dc800215 	stw	r18,8(sp)
100123b0:	2027883a 	mov	r19,r4
100123b4:	2825883a 	mov	r18,r5
100123b8:	a809883a 	mov	r4,r21
100123bc:	b00b883a 	mov	r5,r22
100123c0:	dfc00915 	stw	ra,36(sp)
100123c4:	df000815 	stw	fp,32(sp)
100123c8:	ddc00715 	stw	r23,28(sp)
100123cc:	3839883a 	mov	fp,r7
100123d0:	302ed43a 	srli	r23,r6,16
100123d4:	dd000415 	stw	r20,16(sp)
100123d8:	dc000015 	stw	r16,0(sp)
100123dc:	3029883a 	mov	r20,r6
100123e0:	0006df00 	call	10006df0 <__mulsi3>
100123e4:	a809883a 	mov	r4,r21
100123e8:	880b883a 	mov	r5,r17
100123ec:	1021883a 	mov	r16,r2
100123f0:	0006df00 	call	10006df0 <__mulsi3>
100123f4:	880b883a 	mov	r5,r17
100123f8:	b809883a 	mov	r4,r23
100123fc:	102b883a 	mov	r21,r2
10012400:	0006df00 	call	10006df0 <__mulsi3>
10012404:	b809883a 	mov	r4,r23
10012408:	b00b883a 	mov	r5,r22
1001240c:	1023883a 	mov	r17,r2
10012410:	0006df00 	call	10006df0 <__mulsi3>
10012414:	8012d43a 	srli	r9,r16,16
10012418:	a885883a 	add	r2,r21,r2
1001241c:	1251883a 	add	r8,r2,r9
10012420:	4540022e 	bgeu	r8,r21,1001242c <__muldi3+0xa0>
10012424:	00800074 	movhi	r2,1
10012428:	88a3883a 	add	r17,r17,r2
1001242c:	4006d43a 	srli	r3,r8,16
10012430:	4010943a 	slli	r8,r8,16
10012434:	9809883a 	mov	r4,r19
10012438:	e00b883a 	mov	r5,fp
1001243c:	843fffcc 	andi	r16,r16,65535
10012440:	88e3883a 	add	r17,r17,r3
10012444:	4421883a 	add	r16,r8,r16
10012448:	0006df00 	call	10006df0 <__mulsi3>
1001244c:	a009883a 	mov	r4,r20
10012450:	900b883a 	mov	r5,r18
10012454:	1027883a 	mov	r19,r2
10012458:	0006df00 	call	10006df0 <__mulsi3>
1001245c:	9885883a 	add	r2,r19,r2
10012460:	1447883a 	add	r3,r2,r17
10012464:	8005883a 	mov	r2,r16
10012468:	dfc00917 	ldw	ra,36(sp)
1001246c:	df000817 	ldw	fp,32(sp)
10012470:	ddc00717 	ldw	r23,28(sp)
10012474:	dd800617 	ldw	r22,24(sp)
10012478:	dd400517 	ldw	r21,20(sp)
1001247c:	dd000417 	ldw	r20,16(sp)
10012480:	dcc00317 	ldw	r19,12(sp)
10012484:	dc800217 	ldw	r18,8(sp)
10012488:	dc400117 	ldw	r17,4(sp)
1001248c:	dc000017 	ldw	r16,0(sp)
10012490:	dec00a04 	addi	sp,sp,40
10012494:	f800283a 	ret

10012498 <__udivdi3>:
10012498:	defff504 	addi	sp,sp,-44
1001249c:	dcc00415 	stw	r19,16(sp)
100124a0:	dc000115 	stw	r16,4(sp)
100124a4:	dfc00a15 	stw	ra,40(sp)
100124a8:	df000915 	stw	fp,36(sp)
100124ac:	ddc00815 	stw	r23,32(sp)
100124b0:	dd800715 	stw	r22,28(sp)
100124b4:	dd400615 	stw	r21,24(sp)
100124b8:	dd000515 	stw	r20,20(sp)
100124bc:	dc800315 	stw	r18,12(sp)
100124c0:	dc400215 	stw	r17,8(sp)
100124c4:	2027883a 	mov	r19,r4
100124c8:	2821883a 	mov	r16,r5
100124cc:	3800471e 	bne	r7,zero,100125ec <__udivdi3+0x154>
100124d0:	3025883a 	mov	r18,r6
100124d4:	2023883a 	mov	r17,r4
100124d8:	2980592e 	bgeu	r5,r6,10012640 <__udivdi3+0x1a8>
100124dc:	00bfffd4 	movui	r2,65535
100124e0:	2829883a 	mov	r20,r5
100124e4:	1180b236 	bltu	r2,r6,100127b0 <__udivdi3+0x318>
100124e8:	00803fc4 	movi	r2,255
100124ec:	1181622e 	bgeu	r2,r6,10012a78 <__udivdi3+0x5e0>
100124f0:	00800204 	movi	r2,8
100124f4:	1007883a 	mov	r3,r2
100124f8:	3084d83a 	srl	r2,r6,r2
100124fc:	010400b4 	movhi	r4,4098
10012500:	21245f04 	addi	r4,r4,-28292
10012504:	2085883a 	add	r2,r4,r2
10012508:	11000003 	ldbu	r4,0(r2)
1001250c:	20c9883a 	add	r4,r4,r3
10012510:	00c00804 	movi	r3,32
10012514:	1907c83a 	sub	r3,r3,r4
10012518:	18000526 	beq	r3,zero,10012530 <__udivdi3+0x98>
1001251c:	80e0983a 	sll	r16,r16,r3
10012520:	9908d83a 	srl	r4,r19,r4
10012524:	30e4983a 	sll	r18,r6,r3
10012528:	98e2983a 	sll	r17,r19,r3
1001252c:	8128b03a 	or	r20,r16,r4
10012530:	902ad43a 	srli	r21,r18,16
10012534:	a009883a 	mov	r4,r20
10012538:	95bfffcc 	andi	r22,r18,65535
1001253c:	a80b883a 	mov	r5,r21
10012540:	0006de80 	call	10006de8 <__umodsi3>
10012544:	a009883a 	mov	r4,r20
10012548:	a80b883a 	mov	r5,r21
1001254c:	102f883a 	mov	r23,r2
10012550:	0006de00 	call	10006de0 <__udivsi3>
10012554:	1009883a 	mov	r4,r2
10012558:	b00b883a 	mov	r5,r22
1001255c:	1021883a 	mov	r16,r2
10012560:	0006df00 	call	10006df0 <__mulsi3>
10012564:	b82e943a 	slli	r23,r23,16
10012568:	8808d43a 	srli	r4,r17,16
1001256c:	b906b03a 	or	r3,r23,r4
10012570:	1880052e 	bgeu	r3,r2,10012588 <__udivdi3+0xf0>
10012574:	1c87883a 	add	r3,r3,r18
10012578:	813fffc4 	addi	r4,r16,-1
1001257c:	1c800136 	bltu	r3,r18,10012584 <__udivdi3+0xec>
10012580:	18815236 	bltu	r3,r2,10012acc <__udivdi3+0x634>
10012584:	2021883a 	mov	r16,r4
10012588:	18a7c83a 	sub	r19,r3,r2
1001258c:	9809883a 	mov	r4,r19
10012590:	a80b883a 	mov	r5,r21
10012594:	0006de80 	call	10006de8 <__umodsi3>
10012598:	1029883a 	mov	r20,r2
1001259c:	9809883a 	mov	r4,r19
100125a0:	a80b883a 	mov	r5,r21
100125a4:	a028943a 	slli	r20,r20,16
100125a8:	0006de00 	call	10006de0 <__udivsi3>
100125ac:	1009883a 	mov	r4,r2
100125b0:	b00b883a 	mov	r5,r22
100125b4:	8c7fffcc 	andi	r17,r17,65535
100125b8:	1027883a 	mov	r19,r2
100125bc:	a462b03a 	or	r17,r20,r17
100125c0:	0006df00 	call	10006df0 <__mulsi3>
100125c4:	8880052e 	bgeu	r17,r2,100125dc <__udivdi3+0x144>
100125c8:	8ca3883a 	add	r17,r17,r18
100125cc:	98ffffc4 	addi	r3,r19,-1
100125d0:	8c811036 	bltu	r17,r18,10012a14 <__udivdi3+0x57c>
100125d4:	88810f2e 	bgeu	r17,r2,10012a14 <__udivdi3+0x57c>
100125d8:	9cffff84 	addi	r19,r19,-2
100125dc:	8020943a 	slli	r16,r16,16
100125e0:	0007883a 	mov	r3,zero
100125e4:	9c04b03a 	or	r2,r19,r16
100125e8:	00006006 	br	1001276c <__udivdi3+0x2d4>
100125ec:	29c05d36 	bltu	r5,r7,10012764 <__udivdi3+0x2cc>
100125f0:	00bfffd4 	movui	r2,65535
100125f4:	11c0692e 	bgeu	r2,r7,1001279c <__udivdi3+0x304>
100125f8:	00804034 	movhi	r2,256
100125fc:	10bfffc4 	addi	r2,r2,-1
10012600:	11c10e2e 	bgeu	r2,r7,10012a3c <__udivdi3+0x5a4>
10012604:	01400604 	movi	r5,24
10012608:	2811883a 	mov	r8,r5
1001260c:	394ad83a 	srl	r5,r7,r5
10012610:	008400b4 	movhi	r2,4098
10012614:	10a45f04 	addi	r2,r2,-28292
10012618:	114b883a 	add	r5,r2,r5
1001261c:	29400003 	ldbu	r5,0(r5)
10012620:	00c00804 	movi	r3,32
10012624:	2a0b883a 	add	r5,r5,r8
10012628:	196fc83a 	sub	r23,r3,r5
1001262c:	b8006b1e 	bne	r23,zero,100127dc <__udivdi3+0x344>
10012630:	3c011436 	bltu	r7,r16,10012a84 <__udivdi3+0x5ec>
10012634:	9985403a 	cmpgeu	r2,r19,r6
10012638:	0007883a 	mov	r3,zero
1001263c:	00004b06 	br	1001276c <__udivdi3+0x2d4>
10012640:	3000041e 	bne	r6,zero,10012654 <__udivdi3+0x1bc>
10012644:	01000044 	movi	r4,1
10012648:	000b883a 	mov	r5,zero
1001264c:	0006de00 	call	10006de0 <__udivsi3>
10012650:	1025883a 	mov	r18,r2
10012654:	00bfffd4 	movui	r2,65535
10012658:	14805b2e 	bgeu	r2,r18,100127c8 <__udivdi3+0x330>
1001265c:	00804034 	movhi	r2,256
10012660:	10bfffc4 	addi	r2,r2,-1
10012664:	1480fe2e 	bgeu	r2,r18,10012a60 <__udivdi3+0x5c8>
10012668:	00800604 	movi	r2,24
1001266c:	1007883a 	mov	r3,r2
10012670:	9084d83a 	srl	r2,r18,r2
10012674:	010400b4 	movhi	r4,4098
10012678:	21245f04 	addi	r4,r4,-28292
1001267c:	2085883a 	add	r2,r4,r2
10012680:	11800003 	ldbu	r6,0(r2)
10012684:	01c00804 	movi	r7,32
10012688:	30c7883a 	add	r3,r6,r3
1001268c:	38cfc83a 	sub	r7,r7,r3
10012690:	3800a71e 	bne	r7,zero,10012930 <__udivdi3+0x498>
10012694:	9028d43a 	srli	r20,r18,16
10012698:	84a1c83a 	sub	r16,r16,r18
1001269c:	957fffcc 	andi	r21,r18,65535
100126a0:	00c00044 	movi	r3,1
100126a4:	8009883a 	mov	r4,r16
100126a8:	a00b883a 	mov	r5,r20
100126ac:	d8c00015 	stw	r3,0(sp)
100126b0:	0006de80 	call	10006de8 <__umodsi3>
100126b4:	8009883a 	mov	r4,r16
100126b8:	a00b883a 	mov	r5,r20
100126bc:	102d883a 	mov	r22,r2
100126c0:	0006de00 	call	10006de0 <__udivsi3>
100126c4:	1009883a 	mov	r4,r2
100126c8:	a80b883a 	mov	r5,r21
100126cc:	1021883a 	mov	r16,r2
100126d0:	0006df00 	call	10006df0 <__mulsi3>
100126d4:	b02c943a 	slli	r22,r22,16
100126d8:	880ed43a 	srli	r7,r17,16
100126dc:	d8c00017 	ldw	r3,0(sp)
100126e0:	b1ccb03a 	or	r6,r22,r7
100126e4:	3080052e 	bgeu	r6,r2,100126fc <__udivdi3+0x264>
100126e8:	348d883a 	add	r6,r6,r18
100126ec:	813fffc4 	addi	r4,r16,-1
100126f0:	34800136 	bltu	r6,r18,100126f8 <__udivdi3+0x260>
100126f4:	3080f236 	bltu	r6,r2,10012ac0 <__udivdi3+0x628>
100126f8:	2021883a 	mov	r16,r4
100126fc:	30a7c83a 	sub	r19,r6,r2
10012700:	9809883a 	mov	r4,r19
10012704:	a00b883a 	mov	r5,r20
10012708:	d8c00015 	stw	r3,0(sp)
1001270c:	0006de80 	call	10006de8 <__umodsi3>
10012710:	102d883a 	mov	r22,r2
10012714:	9809883a 	mov	r4,r19
10012718:	a00b883a 	mov	r5,r20
1001271c:	b02c943a 	slli	r22,r22,16
10012720:	0006de00 	call	10006de0 <__udivsi3>
10012724:	1009883a 	mov	r4,r2
10012728:	a80b883a 	mov	r5,r21
1001272c:	8c7fffcc 	andi	r17,r17,65535
10012730:	1027883a 	mov	r19,r2
10012734:	b462b03a 	or	r17,r22,r17
10012738:	0006df00 	call	10006df0 <__mulsi3>
1001273c:	d8c00017 	ldw	r3,0(sp)
10012740:	8880052e 	bgeu	r17,r2,10012758 <__udivdi3+0x2c0>
10012744:	8ca3883a 	add	r17,r17,r18
10012748:	993fffc4 	addi	r4,r19,-1
1001274c:	8c80af36 	bltu	r17,r18,10012a0c <__udivdi3+0x574>
10012750:	8880ae2e 	bgeu	r17,r2,10012a0c <__udivdi3+0x574>
10012754:	9cffff84 	addi	r19,r19,-2
10012758:	8020943a 	slli	r16,r16,16
1001275c:	9c04b03a 	or	r2,r19,r16
10012760:	00000206 	br	1001276c <__udivdi3+0x2d4>
10012764:	0007883a 	mov	r3,zero
10012768:	0005883a 	mov	r2,zero
1001276c:	dfc00a17 	ldw	ra,40(sp)
10012770:	df000917 	ldw	fp,36(sp)
10012774:	ddc00817 	ldw	r23,32(sp)
10012778:	dd800717 	ldw	r22,28(sp)
1001277c:	dd400617 	ldw	r21,24(sp)
10012780:	dd000517 	ldw	r20,20(sp)
10012784:	dcc00417 	ldw	r19,16(sp)
10012788:	dc800317 	ldw	r18,12(sp)
1001278c:	dc400217 	ldw	r17,8(sp)
10012790:	dc000117 	ldw	r16,4(sp)
10012794:	dec00b04 	addi	sp,sp,44
10012798:	f800283a 	ret
1001279c:	00803fc4 	movi	r2,255
100127a0:	11c0a92e 	bgeu	r2,r7,10012a48 <__udivdi3+0x5b0>
100127a4:	01400204 	movi	r5,8
100127a8:	2811883a 	mov	r8,r5
100127ac:	003f9706 	br	1001260c <__alt_data_end+0xf801260c>
100127b0:	00804034 	movhi	r2,256
100127b4:	10bfffc4 	addi	r2,r2,-1
100127b8:	1180a62e 	bgeu	r2,r6,10012a54 <__udivdi3+0x5bc>
100127bc:	00800604 	movi	r2,24
100127c0:	1007883a 	mov	r3,r2
100127c4:	003f4c06 	br	100124f8 <__alt_data_end+0xf80124f8>
100127c8:	00803fc4 	movi	r2,255
100127cc:	1480a72e 	bgeu	r2,r18,10012a6c <__udivdi3+0x5d4>
100127d0:	00800204 	movi	r2,8
100127d4:	1007883a 	mov	r3,r2
100127d8:	003fa506 	br	10012670 <__alt_data_end+0xf8012670>
100127dc:	3178d83a 	srl	fp,r6,r5
100127e0:	3dce983a 	sll	r7,r7,r23
100127e4:	8168d83a 	srl	r20,r16,r5
100127e8:	9950d83a 	srl	r8,r19,r5
100127ec:	3f38b03a 	or	fp,r7,fp
100127f0:	e024d43a 	srli	r18,fp,16
100127f4:	85e0983a 	sll	r16,r16,r23
100127f8:	a009883a 	mov	r4,r20
100127fc:	900b883a 	mov	r5,r18
10012800:	8220b03a 	or	r16,r16,r8
10012804:	35ea983a 	sll	r21,r6,r23
10012808:	0006de80 	call	10006de8 <__umodsi3>
1001280c:	a009883a 	mov	r4,r20
10012810:	900b883a 	mov	r5,r18
10012814:	1023883a 	mov	r17,r2
10012818:	e5bfffcc 	andi	r22,fp,65535
1001281c:	0006de00 	call	10006de0 <__udivsi3>
10012820:	1009883a 	mov	r4,r2
10012824:	b00b883a 	mov	r5,r22
10012828:	1029883a 	mov	r20,r2
1001282c:	0006df00 	call	10006df0 <__mulsi3>
10012830:	8806943a 	slli	r3,r17,16
10012834:	8014d43a 	srli	r10,r16,16
10012838:	1a92b03a 	or	r9,r3,r10
1001283c:	4880042e 	bgeu	r9,r2,10012850 <__udivdi3+0x3b8>
10012840:	4f13883a 	add	r9,r9,fp
10012844:	a0ffffc4 	addi	r3,r20,-1
10012848:	4f00952e 	bgeu	r9,fp,10012aa0 <__udivdi3+0x608>
1001284c:	1829883a 	mov	r20,r3
10012850:	48a3c83a 	sub	r17,r9,r2
10012854:	8809883a 	mov	r4,r17
10012858:	900b883a 	mov	r5,r18
1001285c:	0006de80 	call	10006de8 <__umodsi3>
10012860:	8809883a 	mov	r4,r17
10012864:	900b883a 	mov	r5,r18
10012868:	d8800015 	stw	r2,0(sp)
1001286c:	0006de00 	call	10006de0 <__udivsi3>
10012870:	1009883a 	mov	r4,r2
10012874:	b00b883a 	mov	r5,r22
10012878:	1023883a 	mov	r17,r2
1001287c:	0006df00 	call	10006df0 <__mulsi3>
10012880:	d8c00017 	ldw	r3,0(sp)
10012884:	823fffcc 	andi	r8,r16,65535
10012888:	1806943a 	slli	r3,r3,16
1001288c:	1a20b03a 	or	r16,r3,r8
10012890:	8080042e 	bgeu	r16,r2,100128a4 <__udivdi3+0x40c>
10012894:	8721883a 	add	r16,r16,fp
10012898:	88ffffc4 	addi	r3,r17,-1
1001289c:	87007c2e 	bgeu	r16,fp,10012a90 <__udivdi3+0x5f8>
100128a0:	1823883a 	mov	r17,r3
100128a4:	a028943a 	slli	r20,r20,16
100128a8:	acbfffcc 	andi	r18,r21,65535
100128ac:	900b883a 	mov	r5,r18
100128b0:	8d28b03a 	or	r20,r17,r20
100128b4:	a022d43a 	srli	r17,r20,16
100128b8:	a5bfffcc 	andi	r22,r20,65535
100128bc:	b009883a 	mov	r4,r22
100128c0:	a82ad43a 	srli	r21,r21,16
100128c4:	80a1c83a 	sub	r16,r16,r2
100128c8:	0006df00 	call	10006df0 <__mulsi3>
100128cc:	8809883a 	mov	r4,r17
100128d0:	900b883a 	mov	r5,r18
100128d4:	1039883a 	mov	fp,r2
100128d8:	0006df00 	call	10006df0 <__mulsi3>
100128dc:	8809883a 	mov	r4,r17
100128e0:	a80b883a 	mov	r5,r21
100128e4:	1025883a 	mov	r18,r2
100128e8:	0006df00 	call	10006df0 <__mulsi3>
100128ec:	b009883a 	mov	r4,r22
100128f0:	a80b883a 	mov	r5,r21
100128f4:	1023883a 	mov	r17,r2
100128f8:	0006df00 	call	10006df0 <__mulsi3>
100128fc:	e006d43a 	srli	r3,fp,16
10012900:	9085883a 	add	r2,r18,r2
10012904:	10c7883a 	add	r3,r2,r3
10012908:	1c80022e 	bgeu	r3,r18,10012914 <__udivdi3+0x47c>
1001290c:	00800074 	movhi	r2,1
10012910:	88a3883a 	add	r17,r17,r2
10012914:	1808d43a 	srli	r4,r3,16
10012918:	8909883a 	add	r4,r17,r4
1001291c:	81004436 	bltu	r16,r4,10012a30 <__udivdi3+0x598>
10012920:	81003e26 	beq	r16,r4,10012a1c <__udivdi3+0x584>
10012924:	a005883a 	mov	r2,r20
10012928:	0007883a 	mov	r3,zero
1001292c:	003f8f06 	br	1001276c <__alt_data_end+0xf801276c>
10012930:	91e4983a 	sll	r18,r18,r7
10012934:	80eed83a 	srl	r23,r16,r3
10012938:	81cc983a 	sll	r6,r16,r7
1001293c:	9028d43a 	srli	r20,r18,16
10012940:	98c6d83a 	srl	r3,r19,r3
10012944:	b809883a 	mov	r4,r23
10012948:	a00b883a 	mov	r5,r20
1001294c:	30ecb03a 	or	r22,r6,r3
10012950:	99e2983a 	sll	r17,r19,r7
10012954:	0006de80 	call	10006de8 <__umodsi3>
10012958:	b809883a 	mov	r4,r23
1001295c:	a00b883a 	mov	r5,r20
10012960:	1021883a 	mov	r16,r2
10012964:	957fffcc 	andi	r21,r18,65535
10012968:	0006de00 	call	10006de0 <__udivsi3>
1001296c:	a80b883a 	mov	r5,r21
10012970:	1009883a 	mov	r4,r2
10012974:	102f883a 	mov	r23,r2
10012978:	0006df00 	call	10006df0 <__mulsi3>
1001297c:	8020943a 	slli	r16,r16,16
10012980:	b00ad43a 	srli	r5,r22,16
10012984:	814cb03a 	or	r6,r16,r5
10012988:	3080062e 	bgeu	r6,r2,100129a4 <__udivdi3+0x50c>
1001298c:	348d883a 	add	r6,r6,r18
10012990:	b8ffffc4 	addi	r3,r23,-1
10012994:	34804836 	bltu	r6,r18,10012ab8 <__udivdi3+0x620>
10012998:	3080472e 	bgeu	r6,r2,10012ab8 <__udivdi3+0x620>
1001299c:	bdffff84 	addi	r23,r23,-2
100129a0:	348d883a 	add	r6,r6,r18
100129a4:	30a7c83a 	sub	r19,r6,r2
100129a8:	9809883a 	mov	r4,r19
100129ac:	a00b883a 	mov	r5,r20
100129b0:	0006de80 	call	10006de8 <__umodsi3>
100129b4:	9809883a 	mov	r4,r19
100129b8:	a00b883a 	mov	r5,r20
100129bc:	1039883a 	mov	fp,r2
100129c0:	0006de00 	call	10006de0 <__udivsi3>
100129c4:	1009883a 	mov	r4,r2
100129c8:	a80b883a 	mov	r5,r21
100129cc:	e038943a 	slli	fp,fp,16
100129d0:	1027883a 	mov	r19,r2
100129d4:	0006df00 	call	10006df0 <__mulsi3>
100129d8:	b1bfffcc 	andi	r6,r22,65535
100129dc:	e18cb03a 	or	r6,fp,r6
100129e0:	3080062e 	bgeu	r6,r2,100129fc <__udivdi3+0x564>
100129e4:	348d883a 	add	r6,r6,r18
100129e8:	98ffffc4 	addi	r3,r19,-1
100129ec:	34803036 	bltu	r6,r18,10012ab0 <__udivdi3+0x618>
100129f0:	30802f2e 	bgeu	r6,r2,10012ab0 <__udivdi3+0x618>
100129f4:	9cffff84 	addi	r19,r19,-2
100129f8:	348d883a 	add	r6,r6,r18
100129fc:	b82e943a 	slli	r23,r23,16
10012a00:	30a1c83a 	sub	r16,r6,r2
10012a04:	9dc6b03a 	or	r3,r19,r23
10012a08:	003f2606 	br	100126a4 <__alt_data_end+0xf80126a4>
10012a0c:	2027883a 	mov	r19,r4
10012a10:	003f5106 	br	10012758 <__alt_data_end+0xf8012758>
10012a14:	1827883a 	mov	r19,r3
10012a18:	003ef006 	br	100125dc <__alt_data_end+0xf80125dc>
10012a1c:	1808943a 	slli	r4,r3,16
10012a20:	9dc6983a 	sll	r3,r19,r23
10012a24:	e73fffcc 	andi	fp,fp,65535
10012a28:	2709883a 	add	r4,r4,fp
10012a2c:	193fbd2e 	bgeu	r3,r4,10012924 <__alt_data_end+0xf8012924>
10012a30:	a0bfffc4 	addi	r2,r20,-1
10012a34:	0007883a 	mov	r3,zero
10012a38:	003f4c06 	br	1001276c <__alt_data_end+0xf801276c>
10012a3c:	01400404 	movi	r5,16
10012a40:	2811883a 	mov	r8,r5
10012a44:	003ef106 	br	1001260c <__alt_data_end+0xf801260c>
10012a48:	000b883a 	mov	r5,zero
10012a4c:	0011883a 	mov	r8,zero
10012a50:	003eee06 	br	1001260c <__alt_data_end+0xf801260c>
10012a54:	00800404 	movi	r2,16
10012a58:	1007883a 	mov	r3,r2
10012a5c:	003ea606 	br	100124f8 <__alt_data_end+0xf80124f8>
10012a60:	00800404 	movi	r2,16
10012a64:	1007883a 	mov	r3,r2
10012a68:	003f0106 	br	10012670 <__alt_data_end+0xf8012670>
10012a6c:	0005883a 	mov	r2,zero
10012a70:	0007883a 	mov	r3,zero
10012a74:	003efe06 	br	10012670 <__alt_data_end+0xf8012670>
10012a78:	0005883a 	mov	r2,zero
10012a7c:	0007883a 	mov	r3,zero
10012a80:	003e9d06 	br	100124f8 <__alt_data_end+0xf80124f8>
10012a84:	0007883a 	mov	r3,zero
10012a88:	00800044 	movi	r2,1
10012a8c:	003f3706 	br	1001276c <__alt_data_end+0xf801276c>
10012a90:	80bf832e 	bgeu	r16,r2,100128a0 <__alt_data_end+0xf80128a0>
10012a94:	8c7fff84 	addi	r17,r17,-2
10012a98:	8721883a 	add	r16,r16,fp
10012a9c:	003f8106 	br	100128a4 <__alt_data_end+0xf80128a4>
10012aa0:	48bf6a2e 	bgeu	r9,r2,1001284c <__alt_data_end+0xf801284c>
10012aa4:	a53fff84 	addi	r20,r20,-2
10012aa8:	4f13883a 	add	r9,r9,fp
10012aac:	003f6806 	br	10012850 <__alt_data_end+0xf8012850>
10012ab0:	1827883a 	mov	r19,r3
10012ab4:	003fd106 	br	100129fc <__alt_data_end+0xf80129fc>
10012ab8:	182f883a 	mov	r23,r3
10012abc:	003fb906 	br	100129a4 <__alt_data_end+0xf80129a4>
10012ac0:	843fff84 	addi	r16,r16,-2
10012ac4:	348d883a 	add	r6,r6,r18
10012ac8:	003f0c06 	br	100126fc <__alt_data_end+0xf80126fc>
10012acc:	843fff84 	addi	r16,r16,-2
10012ad0:	1c87883a 	add	r3,r3,r18
10012ad4:	003eac06 	br	10012588 <__alt_data_end+0xf8012588>

10012ad8 <__umoddi3>:
10012ad8:	defff404 	addi	sp,sp,-48
10012adc:	dd800815 	stw	r22,32(sp)
10012ae0:	dc400315 	stw	r17,12(sp)
10012ae4:	dc000215 	stw	r16,8(sp)
10012ae8:	dfc00b15 	stw	ra,44(sp)
10012aec:	df000a15 	stw	fp,40(sp)
10012af0:	ddc00915 	stw	r23,36(sp)
10012af4:	dd400715 	stw	r21,28(sp)
10012af8:	dd000615 	stw	r20,24(sp)
10012afc:	dcc00515 	stw	r19,20(sp)
10012b00:	dc800415 	stw	r18,16(sp)
10012b04:	2021883a 	mov	r16,r4
10012b08:	2823883a 	mov	r17,r5
10012b0c:	282d883a 	mov	r22,r5
10012b10:	38003c1e 	bne	r7,zero,10012c04 <__umoddi3+0x12c>
10012b14:	3027883a 	mov	r19,r6
10012b18:	2029883a 	mov	r20,r4
10012b1c:	2980522e 	bgeu	r5,r6,10012c68 <__umoddi3+0x190>
10012b20:	00bfffd4 	movui	r2,65535
10012b24:	1180a436 	bltu	r2,r6,10012db8 <__umoddi3+0x2e0>
10012b28:	00803fc4 	movi	r2,255
10012b2c:	11815e2e 	bgeu	r2,r6,100130a8 <__umoddi3+0x5d0>
10012b30:	01400204 	movi	r5,8
10012b34:	2805883a 	mov	r2,r5
10012b38:	314ad83a 	srl	r5,r6,r5
10012b3c:	00c400b4 	movhi	r3,4098
10012b40:	18e45f04 	addi	r3,r3,-28292
10012b44:	194b883a 	add	r5,r3,r5
10012b48:	29000003 	ldbu	r4,0(r5)
10012b4c:	2089883a 	add	r4,r4,r2
10012b50:	00800804 	movi	r2,32
10012b54:	1105c83a 	sub	r2,r2,r4
10012b58:	10010c26 	beq	r2,zero,10012f8c <__umoddi3+0x4b4>
10012b5c:	88a2983a 	sll	r17,r17,r2
10012b60:	8108d83a 	srl	r4,r16,r4
10012b64:	30a6983a 	sll	r19,r6,r2
10012b68:	80a8983a 	sll	r20,r16,r2
10012b6c:	1025883a 	mov	r18,r2
10012b70:	892cb03a 	or	r22,r17,r4
10012b74:	9822d43a 	srli	r17,r19,16
10012b78:	b009883a 	mov	r4,r22
10012b7c:	9d7fffcc 	andi	r21,r19,65535
10012b80:	880b883a 	mov	r5,r17
10012b84:	0006de80 	call	10006de8 <__umodsi3>
10012b88:	b009883a 	mov	r4,r22
10012b8c:	880b883a 	mov	r5,r17
10012b90:	102f883a 	mov	r23,r2
10012b94:	0006de00 	call	10006de0 <__udivsi3>
10012b98:	1009883a 	mov	r4,r2
10012b9c:	a80b883a 	mov	r5,r21
10012ba0:	0006df00 	call	10006df0 <__mulsi3>
10012ba4:	b82e943a 	slli	r23,r23,16
10012ba8:	a008d43a 	srli	r4,r20,16
10012bac:	b906b03a 	or	r3,r23,r4
10012bb0:	1880042e 	bgeu	r3,r2,10012bc4 <__umoddi3+0xec>
10012bb4:	1cc7883a 	add	r3,r3,r19
10012bb8:	1cc00236 	bltu	r3,r19,10012bc4 <__umoddi3+0xec>
10012bbc:	1880012e 	bgeu	r3,r2,10012bc4 <__umoddi3+0xec>
10012bc0:	1cc7883a 	add	r3,r3,r19
10012bc4:	18a1c83a 	sub	r16,r3,r2
10012bc8:	8009883a 	mov	r4,r16
10012bcc:	880b883a 	mov	r5,r17
10012bd0:	0006de80 	call	10006de8 <__umodsi3>
10012bd4:	8009883a 	mov	r4,r16
10012bd8:	880b883a 	mov	r5,r17
10012bdc:	102d883a 	mov	r22,r2
10012be0:	0006de00 	call	10006de0 <__udivsi3>
10012be4:	1009883a 	mov	r4,r2
10012be8:	a80b883a 	mov	r5,r21
10012bec:	b02c943a 	slli	r22,r22,16
10012bf0:	0006df00 	call	10006df0 <__mulsi3>
10012bf4:	a13fffcc 	andi	r4,r20,65535
10012bf8:	b106b03a 	or	r3,r22,r4
10012bfc:	1880572e 	bgeu	r3,r2,10012d5c <__umoddi3+0x284>
10012c00:	00005206 	br	10012d4c <__umoddi3+0x274>
10012c04:	29c05936 	bltu	r5,r7,10012d6c <__umoddi3+0x294>
10012c08:	00bfffd4 	movui	r2,65535
10012c0c:	11c0652e 	bgeu	r2,r7,10012da4 <__umoddi3+0x2cc>
10012c10:	00804034 	movhi	r2,256
10012c14:	10bfffc4 	addi	r2,r2,-1
10012c18:	11c1172e 	bgeu	r2,r7,10013078 <__umoddi3+0x5a0>
10012c1c:	01400604 	movi	r5,24
10012c20:	282b883a 	mov	r21,r5
10012c24:	394ad83a 	srl	r5,r7,r5
10012c28:	00c400b4 	movhi	r3,4098
10012c2c:	18e45f04 	addi	r3,r3,-28292
10012c30:	194b883a 	add	r5,r3,r5
10012c34:	28800003 	ldbu	r2,0(r5)
10012c38:	00c00804 	movi	r3,32
10012c3c:	156b883a 	add	r21,r2,r21
10012c40:	1d69c83a 	sub	r20,r3,r21
10012c44:	a000671e 	bne	r20,zero,10012de4 <__umoddi3+0x30c>
10012c48:	3c400136 	bltu	r7,r17,10012c50 <__umoddi3+0x178>
10012c4c:	81812336 	bltu	r16,r6,100130dc <__umoddi3+0x604>
10012c50:	8185c83a 	sub	r2,r16,r6
10012c54:	89e3c83a 	sub	r17,r17,r7
10012c58:	8087803a 	cmpltu	r3,r16,r2
10012c5c:	88edc83a 	sub	r22,r17,r3
10012c60:	b007883a 	mov	r3,r22
10012c64:	00004306 	br	10012d74 <__umoddi3+0x29c>
10012c68:	3000041e 	bne	r6,zero,10012c7c <__umoddi3+0x1a4>
10012c6c:	01000044 	movi	r4,1
10012c70:	000b883a 	mov	r5,zero
10012c74:	0006de00 	call	10006de0 <__udivsi3>
10012c78:	1027883a 	mov	r19,r2
10012c7c:	00bfffd4 	movui	r2,65535
10012c80:	14c0532e 	bgeu	r2,r19,10012dd0 <__umoddi3+0x2f8>
10012c84:	00804034 	movhi	r2,256
10012c88:	10bfffc4 	addi	r2,r2,-1
10012c8c:	14c1032e 	bgeu	r2,r19,1001309c <__umoddi3+0x5c4>
10012c90:	00800604 	movi	r2,24
10012c94:	1007883a 	mov	r3,r2
10012c98:	9884d83a 	srl	r2,r19,r2
10012c9c:	010400b4 	movhi	r4,4098
10012ca0:	21245f04 	addi	r4,r4,-28292
10012ca4:	2085883a 	add	r2,r4,r2
10012ca8:	11000003 	ldbu	r4,0(r2)
10012cac:	00800804 	movi	r2,32
10012cb0:	20c7883a 	add	r3,r4,r3
10012cb4:	10c5c83a 	sub	r2,r2,r3
10012cb8:	1000b61e 	bne	r2,zero,10012f94 <__umoddi3+0x4bc>
10012cbc:	982ad43a 	srli	r21,r19,16
10012cc0:	8ce3c83a 	sub	r17,r17,r19
10012cc4:	9dbfffcc 	andi	r22,r19,65535
10012cc8:	0025883a 	mov	r18,zero
10012ccc:	8809883a 	mov	r4,r17
10012cd0:	a80b883a 	mov	r5,r21
10012cd4:	0006de80 	call	10006de8 <__umodsi3>
10012cd8:	8809883a 	mov	r4,r17
10012cdc:	a80b883a 	mov	r5,r21
10012ce0:	102f883a 	mov	r23,r2
10012ce4:	0006de00 	call	10006de0 <__udivsi3>
10012ce8:	1009883a 	mov	r4,r2
10012cec:	b00b883a 	mov	r5,r22
10012cf0:	0006df00 	call	10006df0 <__mulsi3>
10012cf4:	b82e943a 	slli	r23,r23,16
10012cf8:	a008d43a 	srli	r4,r20,16
10012cfc:	b906b03a 	or	r3,r23,r4
10012d00:	1880032e 	bgeu	r3,r2,10012d10 <__umoddi3+0x238>
10012d04:	1cc7883a 	add	r3,r3,r19
10012d08:	1cc00136 	bltu	r3,r19,10012d10 <__umoddi3+0x238>
10012d0c:	1880f136 	bltu	r3,r2,100130d4 <__umoddi3+0x5fc>
10012d10:	18a1c83a 	sub	r16,r3,r2
10012d14:	8009883a 	mov	r4,r16
10012d18:	a80b883a 	mov	r5,r21
10012d1c:	0006de80 	call	10006de8 <__umodsi3>
10012d20:	8009883a 	mov	r4,r16
10012d24:	a80b883a 	mov	r5,r21
10012d28:	1023883a 	mov	r17,r2
10012d2c:	0006de00 	call	10006de0 <__udivsi3>
10012d30:	1009883a 	mov	r4,r2
10012d34:	b00b883a 	mov	r5,r22
10012d38:	8822943a 	slli	r17,r17,16
10012d3c:	0006df00 	call	10006df0 <__mulsi3>
10012d40:	a13fffcc 	andi	r4,r20,65535
10012d44:	8906b03a 	or	r3,r17,r4
10012d48:	1880042e 	bgeu	r3,r2,10012d5c <__umoddi3+0x284>
10012d4c:	1cc7883a 	add	r3,r3,r19
10012d50:	1cc00236 	bltu	r3,r19,10012d5c <__umoddi3+0x284>
10012d54:	1880012e 	bgeu	r3,r2,10012d5c <__umoddi3+0x284>
10012d58:	1cc7883a 	add	r3,r3,r19
10012d5c:	1887c83a 	sub	r3,r3,r2
10012d60:	1c84d83a 	srl	r2,r3,r18
10012d64:	0007883a 	mov	r3,zero
10012d68:	00000206 	br	10012d74 <__umoddi3+0x29c>
10012d6c:	2005883a 	mov	r2,r4
10012d70:	2807883a 	mov	r3,r5
10012d74:	dfc00b17 	ldw	ra,44(sp)
10012d78:	df000a17 	ldw	fp,40(sp)
10012d7c:	ddc00917 	ldw	r23,36(sp)
10012d80:	dd800817 	ldw	r22,32(sp)
10012d84:	dd400717 	ldw	r21,28(sp)
10012d88:	dd000617 	ldw	r20,24(sp)
10012d8c:	dcc00517 	ldw	r19,20(sp)
10012d90:	dc800417 	ldw	r18,16(sp)
10012d94:	dc400317 	ldw	r17,12(sp)
10012d98:	dc000217 	ldw	r16,8(sp)
10012d9c:	dec00c04 	addi	sp,sp,48
10012da0:	f800283a 	ret
10012da4:	00803fc4 	movi	r2,255
10012da8:	11c0b02e 	bgeu	r2,r7,1001306c <__umoddi3+0x594>
10012dac:	01400204 	movi	r5,8
10012db0:	282b883a 	mov	r21,r5
10012db4:	003f9b06 	br	10012c24 <__alt_data_end+0xf8012c24>
10012db8:	00804034 	movhi	r2,256
10012dbc:	10bfffc4 	addi	r2,r2,-1
10012dc0:	1180b02e 	bgeu	r2,r6,10013084 <__umoddi3+0x5ac>
10012dc4:	01400604 	movi	r5,24
10012dc8:	2805883a 	mov	r2,r5
10012dcc:	003f5a06 	br	10012b38 <__alt_data_end+0xf8012b38>
10012dd0:	00803fc4 	movi	r2,255
10012dd4:	14c0ae2e 	bgeu	r2,r19,10013090 <__umoddi3+0x5b8>
10012dd8:	00800204 	movi	r2,8
10012ddc:	1007883a 	mov	r3,r2
10012de0:	003fad06 	br	10012c98 <__alt_data_end+0xf8012c98>
10012de4:	3d0a983a 	sll	r5,r7,r20
10012de8:	356cd83a 	srl	r22,r6,r21
10012dec:	8d78d83a 	srl	fp,r17,r21
10012df0:	8d10983a 	sll	r8,r17,r20
10012df4:	2dacb03a 	or	r22,r5,r22
10012df8:	b02ed43a 	srli	r23,r22,16
10012dfc:	8564d83a 	srl	r18,r16,r21
10012e00:	e009883a 	mov	r4,fp
10012e04:	b80b883a 	mov	r5,r23
10012e08:	44a4b03a 	or	r18,r8,r18
10012e0c:	3526983a 	sll	r19,r6,r20
10012e10:	0006de80 	call	10006de8 <__umodsi3>
10012e14:	e009883a 	mov	r4,fp
10012e18:	b80b883a 	mov	r5,r23
10012e1c:	b47fffcc 	andi	r17,r22,65535
10012e20:	d8800015 	stw	r2,0(sp)
10012e24:	0006de00 	call	10006de0 <__udivsi3>
10012e28:	1009883a 	mov	r4,r2
10012e2c:	880b883a 	mov	r5,r17
10012e30:	1039883a 	mov	fp,r2
10012e34:	0006df00 	call	10006df0 <__mulsi3>
10012e38:	d9800017 	ldw	r6,0(sp)
10012e3c:	9008d43a 	srli	r4,r18,16
10012e40:	8520983a 	sll	r16,r16,r20
10012e44:	300c943a 	slli	r6,r6,16
10012e48:	3106b03a 	or	r3,r6,r4
10012e4c:	1880042e 	bgeu	r3,r2,10012e60 <__umoddi3+0x388>
10012e50:	1d87883a 	add	r3,r3,r22
10012e54:	e13fffc4 	addi	r4,fp,-1
10012e58:	1d809a2e 	bgeu	r3,r22,100130c4 <__umoddi3+0x5ec>
10012e5c:	2039883a 	mov	fp,r4
10012e60:	1887c83a 	sub	r3,r3,r2
10012e64:	1809883a 	mov	r4,r3
10012e68:	b80b883a 	mov	r5,r23
10012e6c:	d8c00115 	stw	r3,4(sp)
10012e70:	0006de80 	call	10006de8 <__umodsi3>
10012e74:	d8c00117 	ldw	r3,4(sp)
10012e78:	b80b883a 	mov	r5,r23
10012e7c:	d8800015 	stw	r2,0(sp)
10012e80:	1809883a 	mov	r4,r3
10012e84:	0006de00 	call	10006de0 <__udivsi3>
10012e88:	880b883a 	mov	r5,r17
10012e8c:	1009883a 	mov	r4,r2
10012e90:	102f883a 	mov	r23,r2
10012e94:	0006df00 	call	10006df0 <__mulsi3>
10012e98:	d9800017 	ldw	r6,0(sp)
10012e9c:	947fffcc 	andi	r17,r18,65535
10012ea0:	300c943a 	slli	r6,r6,16
10012ea4:	3464b03a 	or	r18,r6,r17
10012ea8:	9080042e 	bgeu	r18,r2,10012ebc <__umoddi3+0x3e4>
10012eac:	95a5883a 	add	r18,r18,r22
10012eb0:	b8ffffc4 	addi	r3,r23,-1
10012eb4:	95807f2e 	bgeu	r18,r22,100130b4 <__umoddi3+0x5dc>
10012eb8:	182f883a 	mov	r23,r3
10012ebc:	e038943a 	slli	fp,fp,16
10012ec0:	980cd43a 	srli	r6,r19,16
10012ec4:	98ffffcc 	andi	r3,r19,65535
10012ec8:	bf38b03a 	or	fp,r23,fp
10012ecc:	e02ed43a 	srli	r23,fp,16
10012ed0:	e73fffcc 	andi	fp,fp,65535
10012ed4:	180b883a 	mov	r5,r3
10012ed8:	e009883a 	mov	r4,fp
10012edc:	d9800015 	stw	r6,0(sp)
10012ee0:	d8c00115 	stw	r3,4(sp)
10012ee4:	90a5c83a 	sub	r18,r18,r2
10012ee8:	0006df00 	call	10006df0 <__mulsi3>
10012eec:	d8c00117 	ldw	r3,4(sp)
10012ef0:	b809883a 	mov	r4,r23
10012ef4:	1023883a 	mov	r17,r2
10012ef8:	180b883a 	mov	r5,r3
10012efc:	0006df00 	call	10006df0 <__mulsi3>
10012f00:	d9800017 	ldw	r6,0(sp)
10012f04:	b809883a 	mov	r4,r23
10012f08:	d8800115 	stw	r2,4(sp)
10012f0c:	300b883a 	mov	r5,r6
10012f10:	302f883a 	mov	r23,r6
10012f14:	0006df00 	call	10006df0 <__mulsi3>
10012f18:	e009883a 	mov	r4,fp
10012f1c:	b80b883a 	mov	r5,r23
10012f20:	d8800015 	stw	r2,0(sp)
10012f24:	0006df00 	call	10006df0 <__mulsi3>
10012f28:	d8c00117 	ldw	r3,4(sp)
10012f2c:	880cd43a 	srli	r6,r17,16
10012f30:	d9c00017 	ldw	r7,0(sp)
10012f34:	1885883a 	add	r2,r3,r2
10012f38:	118d883a 	add	r6,r2,r6
10012f3c:	30c0022e 	bgeu	r6,r3,10012f48 <__umoddi3+0x470>
10012f40:	00800074 	movhi	r2,1
10012f44:	388f883a 	add	r7,r7,r2
10012f48:	3006d43a 	srli	r3,r6,16
10012f4c:	300c943a 	slli	r6,r6,16
10012f50:	8c7fffcc 	andi	r17,r17,65535
10012f54:	38c7883a 	add	r3,r7,r3
10012f58:	3463883a 	add	r17,r6,r17
10012f5c:	90c03d36 	bltu	r18,r3,10013054 <__umoddi3+0x57c>
10012f60:	90c06026 	beq	r18,r3,100130e4 <__umoddi3+0x60c>
10012f64:	90c9c83a 	sub	r4,r18,r3
10012f68:	880f883a 	mov	r7,r17
10012f6c:	81cfc83a 	sub	r7,r16,r7
10012f70:	81c7803a 	cmpltu	r3,r16,r7
10012f74:	20c7c83a 	sub	r3,r4,r3
10012f78:	1d44983a 	sll	r2,r3,r21
10012f7c:	3d0ed83a 	srl	r7,r7,r20
10012f80:	1d06d83a 	srl	r3,r3,r20
10012f84:	11c4b03a 	or	r2,r2,r7
10012f88:	003f7a06 	br	10012d74 <__alt_data_end+0xf8012d74>
10012f8c:	0025883a 	mov	r18,zero
10012f90:	003ef806 	br	10012b74 <__alt_data_end+0xf8012b74>
10012f94:	98a6983a 	sll	r19,r19,r2
10012f98:	88e8d83a 	srl	r20,r17,r3
10012f9c:	80c6d83a 	srl	r3,r16,r3
10012fa0:	982ad43a 	srli	r21,r19,16
10012fa4:	88a2983a 	sll	r17,r17,r2
10012fa8:	a009883a 	mov	r4,r20
10012fac:	a80b883a 	mov	r5,r21
10012fb0:	88eeb03a 	or	r23,r17,r3
10012fb4:	1025883a 	mov	r18,r2
10012fb8:	0006de80 	call	10006de8 <__umodsi3>
10012fbc:	a009883a 	mov	r4,r20
10012fc0:	a80b883a 	mov	r5,r21
10012fc4:	1023883a 	mov	r17,r2
10012fc8:	9dbfffcc 	andi	r22,r19,65535
10012fcc:	0006de00 	call	10006de0 <__udivsi3>
10012fd0:	1009883a 	mov	r4,r2
10012fd4:	b00b883a 	mov	r5,r22
10012fd8:	0006df00 	call	10006df0 <__mulsi3>
10012fdc:	8822943a 	slli	r17,r17,16
10012fe0:	b808d43a 	srli	r4,r23,16
10012fe4:	84a8983a 	sll	r20,r16,r18
10012fe8:	8906b03a 	or	r3,r17,r4
10012fec:	1880042e 	bgeu	r3,r2,10013000 <__umoddi3+0x528>
10012ff0:	1cc7883a 	add	r3,r3,r19
10012ff4:	1cc00236 	bltu	r3,r19,10013000 <__umoddi3+0x528>
10012ff8:	1880012e 	bgeu	r3,r2,10013000 <__umoddi3+0x528>
10012ffc:	1cc7883a 	add	r3,r3,r19
10013000:	18a1c83a 	sub	r16,r3,r2
10013004:	8009883a 	mov	r4,r16
10013008:	a80b883a 	mov	r5,r21
1001300c:	0006de80 	call	10006de8 <__umodsi3>
10013010:	8009883a 	mov	r4,r16
10013014:	a80b883a 	mov	r5,r21
10013018:	1039883a 	mov	fp,r2
1001301c:	0006de00 	call	10006de0 <__udivsi3>
10013020:	1009883a 	mov	r4,r2
10013024:	b00b883a 	mov	r5,r22
10013028:	0006df00 	call	10006df0 <__mulsi3>
1001302c:	e006943a 	slli	r3,fp,16
10013030:	b93fffcc 	andi	r4,r23,65535
10013034:	1906b03a 	or	r3,r3,r4
10013038:	1880042e 	bgeu	r3,r2,1001304c <__umoddi3+0x574>
1001303c:	1cc7883a 	add	r3,r3,r19
10013040:	1cc00236 	bltu	r3,r19,1001304c <__umoddi3+0x574>
10013044:	1880012e 	bgeu	r3,r2,1001304c <__umoddi3+0x574>
10013048:	1cc7883a 	add	r3,r3,r19
1001304c:	18a3c83a 	sub	r17,r3,r2
10013050:	003f1e06 	br	10012ccc <__alt_data_end+0xf8012ccc>
10013054:	8ccfc83a 	sub	r7,r17,r19
10013058:	1d89c83a 	sub	r4,r3,r22
1001305c:	89e3803a 	cmpltu	r17,r17,r7
10013060:	2463c83a 	sub	r17,r4,r17
10013064:	9449c83a 	sub	r4,r18,r17
10013068:	003fc006 	br	10012f6c <__alt_data_end+0xf8012f6c>
1001306c:	000b883a 	mov	r5,zero
10013070:	002b883a 	mov	r21,zero
10013074:	003eeb06 	br	10012c24 <__alt_data_end+0xf8012c24>
10013078:	01400404 	movi	r5,16
1001307c:	282b883a 	mov	r21,r5
10013080:	003ee806 	br	10012c24 <__alt_data_end+0xf8012c24>
10013084:	01400404 	movi	r5,16
10013088:	2805883a 	mov	r2,r5
1001308c:	003eaa06 	br	10012b38 <__alt_data_end+0xf8012b38>
10013090:	0005883a 	mov	r2,zero
10013094:	0007883a 	mov	r3,zero
10013098:	003eff06 	br	10012c98 <__alt_data_end+0xf8012c98>
1001309c:	00800404 	movi	r2,16
100130a0:	1007883a 	mov	r3,r2
100130a4:	003efc06 	br	10012c98 <__alt_data_end+0xf8012c98>
100130a8:	000b883a 	mov	r5,zero
100130ac:	0005883a 	mov	r2,zero
100130b0:	003ea106 	br	10012b38 <__alt_data_end+0xf8012b38>
100130b4:	90bf802e 	bgeu	r18,r2,10012eb8 <__alt_data_end+0xf8012eb8>
100130b8:	bdffff84 	addi	r23,r23,-2
100130bc:	95a5883a 	add	r18,r18,r22
100130c0:	003f7e06 	br	10012ebc <__alt_data_end+0xf8012ebc>
100130c4:	18bf652e 	bgeu	r3,r2,10012e5c <__alt_data_end+0xf8012e5c>
100130c8:	e73fff84 	addi	fp,fp,-2
100130cc:	1d87883a 	add	r3,r3,r22
100130d0:	003f6306 	br	10012e60 <__alt_data_end+0xf8012e60>
100130d4:	1cc7883a 	add	r3,r3,r19
100130d8:	003f0d06 	br	10012d10 <__alt_data_end+0xf8012d10>
100130dc:	8005883a 	mov	r2,r16
100130e0:	003edf06 	br	10012c60 <__alt_data_end+0xf8012c60>
100130e4:	847fdb36 	bltu	r16,r17,10013054 <__alt_data_end+0xf8013054>
100130e8:	880f883a 	mov	r7,r17
100130ec:	0009883a 	mov	r4,zero
100130f0:	003f9e06 	br	10012f6c <__alt_data_end+0xf8012f6c>

100130f4 <__adddf3>:
100130f4:	02000434 	movhi	r8,16
100130f8:	423fffc4 	addi	r8,r8,-1
100130fc:	defffb04 	addi	sp,sp,-20
10013100:	2a12703a 	and	r9,r5,r8
10013104:	2806d7fa 	srli	r3,r5,31
10013108:	3a10703a 	and	r8,r7,r8
1001310c:	3804d53a 	srli	r2,r7,20
10013110:	3014d77a 	srli	r10,r6,29
10013114:	dc000015 	stw	r16,0(sp)
10013118:	481290fa 	slli	r9,r9,3
1001311c:	2820d53a 	srli	r16,r5,20
10013120:	401090fa 	slli	r8,r8,3
10013124:	200ad77a 	srli	r5,r4,29
10013128:	380ed7fa 	srli	r7,r7,31
1001312c:	dc800215 	stw	r18,8(sp)
10013130:	dc400115 	stw	r17,4(sp)
10013134:	dfc00415 	stw	ra,16(sp)
10013138:	dcc00315 	stw	r19,12(sp)
1001313c:	1c803fcc 	andi	r18,r3,255
10013140:	8401ffcc 	andi	r16,r16,2047
10013144:	494ab03a 	or	r5,r9,r5
10013148:	202290fa 	slli	r17,r4,3
1001314c:	1081ffcc 	andi	r2,r2,2047
10013150:	4290b03a 	or	r8,r8,r10
10013154:	300c90fa 	slli	r6,r6,3
10013158:	91c07026 	beq	r18,r7,1001331c <__adddf3+0x228>
1001315c:	8087c83a 	sub	r3,r16,r2
10013160:	00c0b30e 	bge	zero,r3,10013430 <__adddf3+0x33c>
10013164:	10002a1e 	bne	r2,zero,10013210 <__adddf3+0x11c>
10013168:	4184b03a 	or	r2,r8,r6
1001316c:	1000991e 	bne	r2,zero,100133d4 <__adddf3+0x2e0>
10013170:	888001cc 	andi	r2,r17,7
10013174:	10005b26 	beq	r2,zero,100132e4 <__adddf3+0x1f0>
10013178:	88c003cc 	andi	r3,r17,15
1001317c:	00800104 	movi	r2,4
10013180:	18805826 	beq	r3,r2,100132e4 <__adddf3+0x1f0>
10013184:	89800104 	addi	r6,r17,4
10013188:	3463803a 	cmpltu	r17,r6,r17
1001318c:	2c4b883a 	add	r5,r5,r17
10013190:	2880202c 	andhi	r2,r5,128
10013194:	9007883a 	mov	r3,r18
10013198:	3023883a 	mov	r17,r6
1001319c:	10005426 	beq	r2,zero,100132f0 <__adddf3+0x1fc>
100131a0:	84000044 	addi	r16,r16,1
100131a4:	0081ffc4 	movi	r2,2047
100131a8:	8080c126 	beq	r16,r2,100134b0 <__adddf3+0x3bc>
100131ac:	013fe034 	movhi	r4,65408
100131b0:	213fffc4 	addi	r4,r4,-1
100131b4:	290a703a 	and	r5,r5,r4
100131b8:	2804977a 	slli	r2,r5,29
100131bc:	280a927a 	slli	r5,r5,9
100131c0:	8822d0fa 	srli	r17,r17,3
100131c4:	8401ffcc 	andi	r16,r16,2047
100131c8:	2808d33a 	srli	r4,r5,12
100131cc:	1444b03a 	or	r2,r2,r17
100131d0:	8401ffcc 	andi	r16,r16,2047
100131d4:	800a953a 	slli	r5,r16,20
100131d8:	18c03fcc 	andi	r3,r3,255
100131dc:	04000434 	movhi	r16,16
100131e0:	180697fa 	slli	r3,r3,31
100131e4:	843fffc4 	addi	r16,r16,-1
100131e8:	2420703a 	and	r16,r4,r16
100131ec:	8160b03a 	or	r16,r16,r5
100131f0:	80c6b03a 	or	r3,r16,r3
100131f4:	dfc00417 	ldw	ra,16(sp)
100131f8:	dcc00317 	ldw	r19,12(sp)
100131fc:	dc800217 	ldw	r18,8(sp)
10013200:	dc400117 	ldw	r17,4(sp)
10013204:	dc000017 	ldw	r16,0(sp)
10013208:	dec00504 	addi	sp,sp,20
1001320c:	f800283a 	ret
10013210:	0081ffc4 	movi	r2,2047
10013214:	80bfd626 	beq	r16,r2,10013170 <__alt_data_end+0xf8013170>
10013218:	42002034 	orhi	r8,r8,128
1001321c:	00800e04 	movi	r2,56
10013220:	10c0a616 	blt	r2,r3,100134bc <__adddf3+0x3c8>
10013224:	008007c4 	movi	r2,31
10013228:	10c0c916 	blt	r2,r3,10013550 <__adddf3+0x45c>
1001322c:	00800804 	movi	r2,32
10013230:	10c5c83a 	sub	r2,r2,r3
10013234:	408e983a 	sll	r7,r8,r2
10013238:	30c8d83a 	srl	r4,r6,r3
1001323c:	3084983a 	sll	r2,r6,r2
10013240:	40c6d83a 	srl	r3,r8,r3
10013244:	390cb03a 	or	r6,r7,r4
10013248:	1004c03a 	cmpne	r2,r2,zero
1001324c:	308cb03a 	or	r6,r6,r2
10013250:	898dc83a 	sub	r6,r17,r6
10013254:	89a3803a 	cmpltu	r17,r17,r6
10013258:	28cbc83a 	sub	r5,r5,r3
1001325c:	2c4bc83a 	sub	r5,r5,r17
10013260:	3023883a 	mov	r17,r6
10013264:	2880202c 	andhi	r2,r5,128
10013268:	10006d26 	beq	r2,zero,10013420 <__adddf3+0x32c>
1001326c:	04c02034 	movhi	r19,128
10013270:	9cffffc4 	addi	r19,r19,-1
10013274:	2ce6703a 	and	r19,r5,r19
10013278:	98007e26 	beq	r19,zero,10013474 <__adddf3+0x380>
1001327c:	9809883a 	mov	r4,r19
10013280:	0008ef40 	call	10008ef4 <__clzsi2>
10013284:	10fffe04 	addi	r3,r2,-8
10013288:	010007c4 	movi	r4,31
1001328c:	20c07f16 	blt	r4,r3,1001348c <__adddf3+0x398>
10013290:	01400a04 	movi	r5,40
10013294:	2885c83a 	sub	r2,r5,r2
10013298:	888ad83a 	srl	r5,r17,r2
1001329c:	98e6983a 	sll	r19,r19,r3
100132a0:	88e2983a 	sll	r17,r17,r3
100132a4:	2ce6b03a 	or	r19,r5,r19
100132a8:	1c007c16 	blt	r3,r16,1001349c <__adddf3+0x3a8>
100132ac:	1c21c83a 	sub	r16,r3,r16
100132b0:	81400044 	addi	r5,r16,1
100132b4:	00c007c4 	movi	r3,31
100132b8:	19409816 	blt	r3,r5,1001351c <__adddf3+0x428>
100132bc:	1c21c83a 	sub	r16,r3,r16
100132c0:	8c08983a 	sll	r4,r17,r16
100132c4:	8946d83a 	srl	r3,r17,r5
100132c8:	9c20983a 	sll	r16,r19,r16
100132cc:	2008c03a 	cmpne	r4,r4,zero
100132d0:	994ad83a 	srl	r5,r19,r5
100132d4:	1c06b03a 	or	r3,r3,r16
100132d8:	1922b03a 	or	r17,r3,r4
100132dc:	0021883a 	mov	r16,zero
100132e0:	003fa306 	br	10013170 <__alt_data_end+0xf8013170>
100132e4:	2880202c 	andhi	r2,r5,128
100132e8:	9007883a 	mov	r3,r18
100132ec:	103fac1e 	bne	r2,zero,100131a0 <__alt_data_end+0xf80131a0>
100132f0:	2804977a 	slli	r2,r5,29
100132f4:	8822d0fa 	srli	r17,r17,3
100132f8:	0101ffc4 	movi	r4,2047
100132fc:	280ad0fa 	srli	r5,r5,3
10013300:	1444b03a 	or	r2,r2,r17
10013304:	81002c26 	beq	r16,r4,100133b8 <__adddf3+0x2c4>
10013308:	8120703a 	and	r16,r16,r4
1001330c:	01000434 	movhi	r4,16
10013310:	213fffc4 	addi	r4,r4,-1
10013314:	2908703a 	and	r4,r5,r4
10013318:	003fad06 	br	100131d0 <__alt_data_end+0xf80131d0>
1001331c:	8089c83a 	sub	r4,r16,r2
10013320:	01006a0e 	bge	zero,r4,100134cc <__adddf3+0x3d8>
10013324:	10003326 	beq	r2,zero,100133f4 <__adddf3+0x300>
10013328:	0081ffc4 	movi	r2,2047
1001332c:	80bf9026 	beq	r16,r2,10013170 <__alt_data_end+0xf8013170>
10013330:	42002034 	orhi	r8,r8,128
10013334:	00800e04 	movi	r2,56
10013338:	1100b116 	blt	r2,r4,10013600 <__adddf3+0x50c>
1001333c:	008007c4 	movi	r2,31
10013340:	1100e216 	blt	r2,r4,100136cc <__adddf3+0x5d8>
10013344:	00800804 	movi	r2,32
10013348:	1105c83a 	sub	r2,r2,r4
1001334c:	4092983a 	sll	r9,r8,r2
10013350:	310ed83a 	srl	r7,r6,r4
10013354:	3084983a 	sll	r2,r6,r2
10013358:	4110d83a 	srl	r8,r8,r4
1001335c:	49ccb03a 	or	r6,r9,r7
10013360:	1004c03a 	cmpne	r2,r2,zero
10013364:	308cb03a 	or	r6,r6,r2
10013368:	344d883a 	add	r6,r6,r17
1001336c:	3463803a 	cmpltu	r17,r6,r17
10013370:	414b883a 	add	r5,r8,r5
10013374:	2c4b883a 	add	r5,r5,r17
10013378:	3023883a 	mov	r17,r6
1001337c:	2880202c 	andhi	r2,r5,128
10013380:	10002726 	beq	r2,zero,10013420 <__adddf3+0x32c>
10013384:	84000044 	addi	r16,r16,1
10013388:	0081ffc4 	movi	r2,2047
1001338c:	8080ae26 	beq	r16,r2,10013648 <__adddf3+0x554>
10013390:	00bfe034 	movhi	r2,65408
10013394:	10bfffc4 	addi	r2,r2,-1
10013398:	288a703a 	and	r5,r5,r2
1001339c:	880cd07a 	srli	r6,r17,1
100133a0:	280897fa 	slli	r4,r5,31
100133a4:	88c0004c 	andi	r3,r17,1
100133a8:	30e2b03a 	or	r17,r6,r3
100133ac:	280ad07a 	srli	r5,r5,1
100133b0:	8922b03a 	or	r17,r17,r4
100133b4:	003f6e06 	br	10013170 <__alt_data_end+0xf8013170>
100133b8:	1148b03a 	or	r4,r2,r5
100133bc:	20003c26 	beq	r4,zero,100134b0 <__adddf3+0x3bc>
100133c0:	29000234 	orhi	r4,r5,8
100133c4:	01400434 	movhi	r5,16
100133c8:	297fffc4 	addi	r5,r5,-1
100133cc:	2148703a 	and	r4,r4,r5
100133d0:	003f7f06 	br	100131d0 <__alt_data_end+0xf80131d0>
100133d4:	18ffffc4 	addi	r3,r3,-1
100133d8:	18004d1e 	bne	r3,zero,10013510 <__adddf3+0x41c>
100133dc:	898dc83a 	sub	r6,r17,r6
100133e0:	89a3803a 	cmpltu	r17,r17,r6
100133e4:	2a0bc83a 	sub	r5,r5,r8
100133e8:	2c4bc83a 	sub	r5,r5,r17
100133ec:	3023883a 	mov	r17,r6
100133f0:	003f9c06 	br	10013264 <__alt_data_end+0xf8013264>
100133f4:	4184b03a 	or	r2,r8,r6
100133f8:	103f5d26 	beq	r2,zero,10013170 <__alt_data_end+0xf8013170>
100133fc:	213fffc4 	addi	r4,r4,-1
10013400:	203fd926 	beq	r4,zero,10013368 <__alt_data_end+0xf8013368>
10013404:	0081ffc4 	movi	r2,2047
10013408:	80bfca1e 	bne	r16,r2,10013334 <__alt_data_end+0xf8013334>
1001340c:	003f5806 	br	10013170 <__alt_data_end+0xf8013170>
10013410:	10c8b03a 	or	r4,r2,r3
10013414:	20008b26 	beq	r4,zero,10013644 <__adddf3+0x550>
10013418:	100b883a 	mov	r5,r2
1001341c:	1823883a 	mov	r17,r3
10013420:	888001cc 	andi	r2,r17,7
10013424:	103f541e 	bne	r2,zero,10013178 <__alt_data_end+0xf8013178>
10013428:	9007883a 	mov	r3,r18
1001342c:	003fb006 	br	100132f0 <__alt_data_end+0xf80132f0>
10013430:	1800531e 	bne	r3,zero,10013580 <__adddf3+0x48c>
10013434:	80800044 	addi	r2,r16,1
10013438:	1081ffcc 	andi	r2,r2,2047
1001343c:	00c00044 	movi	r3,1
10013440:	1880990e 	bge	r3,r2,100136a8 <__adddf3+0x5b4>
10013444:	8985c83a 	sub	r2,r17,r6
10013448:	8887803a 	cmpltu	r3,r17,r2
1001344c:	2a27c83a 	sub	r19,r5,r8
10013450:	98e7c83a 	sub	r19,r19,r3
10013454:	98c0202c 	andhi	r3,r19,128
10013458:	18006226 	beq	r3,zero,100135e4 <__adddf3+0x4f0>
1001345c:	3463c83a 	sub	r17,r6,r17
10013460:	4151c83a 	sub	r8,r8,r5
10013464:	344d803a 	cmpltu	r6,r6,r17
10013468:	41a7c83a 	sub	r19,r8,r6
1001346c:	3825883a 	mov	r18,r7
10013470:	983f821e 	bne	r19,zero,1001327c <__alt_data_end+0xf801327c>
10013474:	8809883a 	mov	r4,r17
10013478:	0008ef40 	call	10008ef4 <__clzsi2>
1001347c:	10800804 	addi	r2,r2,32
10013480:	10fffe04 	addi	r3,r2,-8
10013484:	010007c4 	movi	r4,31
10013488:	20ff810e 	bge	r4,r3,10013290 <__alt_data_end+0xf8013290>
1001348c:	14fff604 	addi	r19,r2,-40
10013490:	8ce6983a 	sll	r19,r17,r19
10013494:	0023883a 	mov	r17,zero
10013498:	1c3f840e 	bge	r3,r16,100132ac <__alt_data_end+0xf80132ac>
1001349c:	017fe034 	movhi	r5,65408
100134a0:	297fffc4 	addi	r5,r5,-1
100134a4:	80e1c83a 	sub	r16,r16,r3
100134a8:	994a703a 	and	r5,r19,r5
100134ac:	003f3006 	br	10013170 <__alt_data_end+0xf8013170>
100134b0:	0009883a 	mov	r4,zero
100134b4:	0005883a 	mov	r2,zero
100134b8:	003f4506 	br	100131d0 <__alt_data_end+0xf80131d0>
100134bc:	418cb03a 	or	r6,r8,r6
100134c0:	300cc03a 	cmpne	r6,r6,zero
100134c4:	0007883a 	mov	r3,zero
100134c8:	003f6106 	br	10013250 <__alt_data_end+0xf8013250>
100134cc:	2000921e 	bne	r4,zero,10013718 <__adddf3+0x624>
100134d0:	80800044 	addi	r2,r16,1
100134d4:	11c1ffcc 	andi	r7,r2,2047
100134d8:	01000044 	movi	r4,1
100134dc:	21c0610e 	bge	r4,r7,10013664 <__adddf3+0x570>
100134e0:	0101ffc4 	movi	r4,2047
100134e4:	1100a326 	beq	r2,r4,10013774 <__adddf3+0x680>
100134e8:	344d883a 	add	r6,r6,r17
100134ec:	3463803a 	cmpltu	r17,r6,r17
100134f0:	414b883a 	add	r5,r8,r5
100134f4:	2c4b883a 	add	r5,r5,r17
100134f8:	282297fa 	slli	r17,r5,31
100134fc:	300cd07a 	srli	r6,r6,1
10013500:	280ad07a 	srli	r5,r5,1
10013504:	1021883a 	mov	r16,r2
10013508:	89a2b03a 	or	r17,r17,r6
1001350c:	003f1806 	br	10013170 <__alt_data_end+0xf8013170>
10013510:	0081ffc4 	movi	r2,2047
10013514:	80bf411e 	bne	r16,r2,1001321c <__alt_data_end+0xf801321c>
10013518:	003f1506 	br	10013170 <__alt_data_end+0xf8013170>
1001351c:	80bff844 	addi	r2,r16,-31
10013520:	00c00804 	movi	r3,32
10013524:	9884d83a 	srl	r2,r19,r2
10013528:	28c04a26 	beq	r5,r3,10013654 <__adddf3+0x560>
1001352c:	00c00fc4 	movi	r3,63
10013530:	1c21c83a 	sub	r16,r3,r16
10013534:	9c26983a 	sll	r19,r19,r16
10013538:	9c62b03a 	or	r17,r19,r17
1001353c:	8822c03a 	cmpne	r17,r17,zero
10013540:	88a2b03a 	or	r17,r17,r2
10013544:	000b883a 	mov	r5,zero
10013548:	0021883a 	mov	r16,zero
1001354c:	003fb406 	br	10013420 <__alt_data_end+0xf8013420>
10013550:	18bff804 	addi	r2,r3,-32
10013554:	01000804 	movi	r4,32
10013558:	4084d83a 	srl	r2,r8,r2
1001355c:	19003f26 	beq	r3,r4,1001365c <__adddf3+0x568>
10013560:	01001004 	movi	r4,64
10013564:	20c7c83a 	sub	r3,r4,r3
10013568:	40d0983a 	sll	r8,r8,r3
1001356c:	418cb03a 	or	r6,r8,r6
10013570:	300cc03a 	cmpne	r6,r6,zero
10013574:	308cb03a 	or	r6,r6,r2
10013578:	0007883a 	mov	r3,zero
1001357c:	003f3406 	br	10013250 <__alt_data_end+0xf8013250>
10013580:	80002326 	beq	r16,zero,10013610 <__adddf3+0x51c>
10013584:	0101ffc4 	movi	r4,2047
10013588:	11005e26 	beq	r2,r4,10013704 <__adddf3+0x610>
1001358c:	00c7c83a 	sub	r3,zero,r3
10013590:	29402034 	orhi	r5,r5,128
10013594:	01000e04 	movi	r4,56
10013598:	20c07216 	blt	r4,r3,10013764 <__adddf3+0x670>
1001359c:	010007c4 	movi	r4,31
100135a0:	20c0ce16 	blt	r4,r3,100138dc <__adddf3+0x7e8>
100135a4:	01000804 	movi	r4,32
100135a8:	20c9c83a 	sub	r4,r4,r3
100135ac:	2914983a 	sll	r10,r5,r4
100135b0:	88d2d83a 	srl	r9,r17,r3
100135b4:	8908983a 	sll	r4,r17,r4
100135b8:	28c6d83a 	srl	r3,r5,r3
100135bc:	5262b03a 	or	r17,r10,r9
100135c0:	2008c03a 	cmpne	r4,r4,zero
100135c4:	8922b03a 	or	r17,r17,r4
100135c8:	3463c83a 	sub	r17,r6,r17
100135cc:	40c7c83a 	sub	r3,r8,r3
100135d0:	344d803a 	cmpltu	r6,r6,r17
100135d4:	198bc83a 	sub	r5,r3,r6
100135d8:	1021883a 	mov	r16,r2
100135dc:	3825883a 	mov	r18,r7
100135e0:	003f2006 	br	10013264 <__alt_data_end+0xf8013264>
100135e4:	9886b03a 	or	r3,r19,r2
100135e8:	1800141e 	bne	r3,zero,1001363c <__adddf3+0x548>
100135ec:	0007883a 	mov	r3,zero
100135f0:	000b883a 	mov	r5,zero
100135f4:	0023883a 	mov	r17,zero
100135f8:	0021883a 	mov	r16,zero
100135fc:	003f3c06 	br	100132f0 <__alt_data_end+0xf80132f0>
10013600:	418cb03a 	or	r6,r8,r6
10013604:	300cc03a 	cmpne	r6,r6,zero
10013608:	0011883a 	mov	r8,zero
1001360c:	003f5606 	br	10013368 <__alt_data_end+0xf8013368>
10013610:	2c48b03a 	or	r4,r5,r17
10013614:	20003b26 	beq	r4,zero,10013704 <__adddf3+0x610>
10013618:	00c6303a 	nor	r3,zero,r3
1001361c:	1800371e 	bne	r3,zero,100136fc <__adddf3+0x608>
10013620:	3463c83a 	sub	r17,r6,r17
10013624:	414bc83a 	sub	r5,r8,r5
10013628:	344d803a 	cmpltu	r6,r6,r17
1001362c:	298bc83a 	sub	r5,r5,r6
10013630:	1021883a 	mov	r16,r2
10013634:	3825883a 	mov	r18,r7
10013638:	003f0a06 	br	10013264 <__alt_data_end+0xf8013264>
1001363c:	1023883a 	mov	r17,r2
10013640:	003f0d06 	br	10013278 <__alt_data_end+0xf8013278>
10013644:	0007883a 	mov	r3,zero
10013648:	000b883a 	mov	r5,zero
1001364c:	0023883a 	mov	r17,zero
10013650:	003f2706 	br	100132f0 <__alt_data_end+0xf80132f0>
10013654:	0027883a 	mov	r19,zero
10013658:	003fb706 	br	10013538 <__alt_data_end+0xf8013538>
1001365c:	0011883a 	mov	r8,zero
10013660:	003fc206 	br	1001356c <__alt_data_end+0xf801356c>
10013664:	2c44b03a 	or	r2,r5,r17
10013668:	8000871e 	bne	r16,zero,10013888 <__adddf3+0x794>
1001366c:	1000b126 	beq	r2,zero,10013934 <__adddf3+0x840>
10013670:	4184b03a 	or	r2,r8,r6
10013674:	103ebe26 	beq	r2,zero,10013170 <__alt_data_end+0xf8013170>
10013678:	3445883a 	add	r2,r6,r17
1001367c:	1463803a 	cmpltu	r17,r2,r17
10013680:	414b883a 	add	r5,r8,r5
10013684:	2c4b883a 	add	r5,r5,r17
10013688:	28c0202c 	andhi	r3,r5,128
1001368c:	1023883a 	mov	r17,r2
10013690:	183f6326 	beq	r3,zero,10013420 <__alt_data_end+0xf8013420>
10013694:	00bfe034 	movhi	r2,65408
10013698:	10bfffc4 	addi	r2,r2,-1
1001369c:	2021883a 	mov	r16,r4
100136a0:	288a703a 	and	r5,r5,r2
100136a4:	003eb206 	br	10013170 <__alt_data_end+0xf8013170>
100136a8:	2c44b03a 	or	r2,r5,r17
100136ac:	8000251e 	bne	r16,zero,10013744 <__adddf3+0x650>
100136b0:	10004b1e 	bne	r2,zero,100137e0 <__adddf3+0x6ec>
100136b4:	4184b03a 	or	r2,r8,r6
100136b8:	103fe226 	beq	r2,zero,10013644 <__alt_data_end+0xf8013644>
100136bc:	400b883a 	mov	r5,r8
100136c0:	3023883a 	mov	r17,r6
100136c4:	3825883a 	mov	r18,r7
100136c8:	003ea906 	br	10013170 <__alt_data_end+0xf8013170>
100136cc:	20bff804 	addi	r2,r4,-32
100136d0:	01c00804 	movi	r7,32
100136d4:	4084d83a 	srl	r2,r8,r2
100136d8:	21c07e26 	beq	r4,r7,100138d4 <__adddf3+0x7e0>
100136dc:	01c01004 	movi	r7,64
100136e0:	3909c83a 	sub	r4,r7,r4
100136e4:	4110983a 	sll	r8,r8,r4
100136e8:	418cb03a 	or	r6,r8,r6
100136ec:	300cc03a 	cmpne	r6,r6,zero
100136f0:	308cb03a 	or	r6,r6,r2
100136f4:	0011883a 	mov	r8,zero
100136f8:	003f1b06 	br	10013368 <__alt_data_end+0xf8013368>
100136fc:	0101ffc4 	movi	r4,2047
10013700:	113fa41e 	bne	r2,r4,10013594 <__alt_data_end+0xf8013594>
10013704:	400b883a 	mov	r5,r8
10013708:	3023883a 	mov	r17,r6
1001370c:	1021883a 	mov	r16,r2
10013710:	3825883a 	mov	r18,r7
10013714:	003e9606 	br	10013170 <__alt_data_end+0xf8013170>
10013718:	80001a1e 	bne	r16,zero,10013784 <__adddf3+0x690>
1001371c:	2c4eb03a 	or	r7,r5,r17
10013720:	38005526 	beq	r7,zero,10013878 <__adddf3+0x784>
10013724:	0108303a 	nor	r4,zero,r4
10013728:	2000511e 	bne	r4,zero,10013870 <__adddf3+0x77c>
1001372c:	89a3883a 	add	r17,r17,r6
10013730:	414b883a 	add	r5,r8,r5
10013734:	898d803a 	cmpltu	r6,r17,r6
10013738:	298b883a 	add	r5,r5,r6
1001373c:	1021883a 	mov	r16,r2
10013740:	003f0e06 	br	1001337c <__alt_data_end+0xf801337c>
10013744:	1000341e 	bne	r2,zero,10013818 <__adddf3+0x724>
10013748:	4184b03a 	or	r2,r8,r6
1001374c:	10006f26 	beq	r2,zero,1001390c <__adddf3+0x818>
10013750:	400b883a 	mov	r5,r8
10013754:	3023883a 	mov	r17,r6
10013758:	3825883a 	mov	r18,r7
1001375c:	0401ffc4 	movi	r16,2047
10013760:	003e8306 	br	10013170 <__alt_data_end+0xf8013170>
10013764:	2c62b03a 	or	r17,r5,r17
10013768:	8822c03a 	cmpne	r17,r17,zero
1001376c:	0007883a 	mov	r3,zero
10013770:	003f9506 	br	100135c8 <__alt_data_end+0xf80135c8>
10013774:	1021883a 	mov	r16,r2
10013778:	000b883a 	mov	r5,zero
1001377c:	0023883a 	mov	r17,zero
10013780:	003edb06 	br	100132f0 <__alt_data_end+0xf80132f0>
10013784:	01c1ffc4 	movi	r7,2047
10013788:	11c03b26 	beq	r2,r7,10013878 <__adddf3+0x784>
1001378c:	0109c83a 	sub	r4,zero,r4
10013790:	29402034 	orhi	r5,r5,128
10013794:	01c00e04 	movi	r7,56
10013798:	39006216 	blt	r7,r4,10013924 <__adddf3+0x830>
1001379c:	01c007c4 	movi	r7,31
100137a0:	39006b16 	blt	r7,r4,10013950 <__adddf3+0x85c>
100137a4:	01c00804 	movi	r7,32
100137a8:	390fc83a 	sub	r7,r7,r4
100137ac:	29d4983a 	sll	r10,r5,r7
100137b0:	8912d83a 	srl	r9,r17,r4
100137b4:	89ce983a 	sll	r7,r17,r7
100137b8:	2908d83a 	srl	r4,r5,r4
100137bc:	5262b03a 	or	r17,r10,r9
100137c0:	380ac03a 	cmpne	r5,r7,zero
100137c4:	8962b03a 	or	r17,r17,r5
100137c8:	89a3883a 	add	r17,r17,r6
100137cc:	2211883a 	add	r8,r4,r8
100137d0:	898d803a 	cmpltu	r6,r17,r6
100137d4:	418b883a 	add	r5,r8,r6
100137d8:	1021883a 	mov	r16,r2
100137dc:	003ee706 	br	1001337c <__alt_data_end+0xf801337c>
100137e0:	4184b03a 	or	r2,r8,r6
100137e4:	103e6226 	beq	r2,zero,10013170 <__alt_data_end+0xf8013170>
100137e8:	8987c83a 	sub	r3,r17,r6
100137ec:	88c9803a 	cmpltu	r4,r17,r3
100137f0:	2a05c83a 	sub	r2,r5,r8
100137f4:	1105c83a 	sub	r2,r2,r4
100137f8:	1100202c 	andhi	r4,r2,128
100137fc:	203f0426 	beq	r4,zero,10013410 <__alt_data_end+0xf8013410>
10013800:	3463c83a 	sub	r17,r6,r17
10013804:	414bc83a 	sub	r5,r8,r5
10013808:	344d803a 	cmpltu	r6,r6,r17
1001380c:	298bc83a 	sub	r5,r5,r6
10013810:	3825883a 	mov	r18,r7
10013814:	003e5606 	br	10013170 <__alt_data_end+0xf8013170>
10013818:	4184b03a 	or	r2,r8,r6
1001381c:	10002b26 	beq	r2,zero,100138cc <__adddf3+0x7d8>
10013820:	2804d0fa 	srli	r2,r5,3
10013824:	8822d0fa 	srli	r17,r17,3
10013828:	280a977a 	slli	r5,r5,29
1001382c:	10c0022c 	andhi	r3,r2,8
10013830:	2c62b03a 	or	r17,r5,r17
10013834:	18000826 	beq	r3,zero,10013858 <__adddf3+0x764>
10013838:	4008d0fa 	srli	r4,r8,3
1001383c:	20c0022c 	andhi	r3,r4,8
10013840:	1800051e 	bne	r3,zero,10013858 <__adddf3+0x764>
10013844:	300cd0fa 	srli	r6,r6,3
10013848:	4010977a 	slli	r8,r8,29
1001384c:	2005883a 	mov	r2,r4
10013850:	3825883a 	mov	r18,r7
10013854:	41a2b03a 	or	r17,r8,r6
10013858:	880ad77a 	srli	r5,r17,29
1001385c:	100490fa 	slli	r2,r2,3
10013860:	882290fa 	slli	r17,r17,3
10013864:	0401ffc4 	movi	r16,2047
10013868:	288ab03a 	or	r5,r5,r2
1001386c:	003e4006 	br	10013170 <__alt_data_end+0xf8013170>
10013870:	01c1ffc4 	movi	r7,2047
10013874:	11ffc71e 	bne	r2,r7,10013794 <__alt_data_end+0xf8013794>
10013878:	400b883a 	mov	r5,r8
1001387c:	3023883a 	mov	r17,r6
10013880:	1021883a 	mov	r16,r2
10013884:	003e3a06 	br	10013170 <__alt_data_end+0xf8013170>
10013888:	10002d26 	beq	r2,zero,10013940 <__adddf3+0x84c>
1001388c:	4184b03a 	or	r2,r8,r6
10013890:	10000e26 	beq	r2,zero,100138cc <__adddf3+0x7d8>
10013894:	2804d0fa 	srli	r2,r5,3
10013898:	8822d0fa 	srli	r17,r17,3
1001389c:	280a977a 	slli	r5,r5,29
100138a0:	10c0022c 	andhi	r3,r2,8
100138a4:	2c62b03a 	or	r17,r5,r17
100138a8:	183feb26 	beq	r3,zero,10013858 <__alt_data_end+0xf8013858>
100138ac:	4008d0fa 	srli	r4,r8,3
100138b0:	20c0022c 	andhi	r3,r4,8
100138b4:	183fe81e 	bne	r3,zero,10013858 <__alt_data_end+0xf8013858>
100138b8:	300cd0fa 	srli	r6,r6,3
100138bc:	4010977a 	slli	r8,r8,29
100138c0:	2005883a 	mov	r2,r4
100138c4:	41a2b03a 	or	r17,r8,r6
100138c8:	003fe306 	br	10013858 <__alt_data_end+0xf8013858>
100138cc:	0401ffc4 	movi	r16,2047
100138d0:	003e2706 	br	10013170 <__alt_data_end+0xf8013170>
100138d4:	0011883a 	mov	r8,zero
100138d8:	003f8306 	br	100136e8 <__alt_data_end+0xf80136e8>
100138dc:	193ff804 	addi	r4,r3,-32
100138e0:	02400804 	movi	r9,32
100138e4:	2908d83a 	srl	r4,r5,r4
100138e8:	1a402526 	beq	r3,r9,10013980 <__adddf3+0x88c>
100138ec:	02401004 	movi	r9,64
100138f0:	48c7c83a 	sub	r3,r9,r3
100138f4:	28ca983a 	sll	r5,r5,r3
100138f8:	2c62b03a 	or	r17,r5,r17
100138fc:	8822c03a 	cmpne	r17,r17,zero
10013900:	8922b03a 	or	r17,r17,r4
10013904:	0007883a 	mov	r3,zero
10013908:	003f2f06 	br	100135c8 <__alt_data_end+0xf80135c8>
1001390c:	01402034 	movhi	r5,128
10013910:	0007883a 	mov	r3,zero
10013914:	297fffc4 	addi	r5,r5,-1
10013918:	047ffe04 	movi	r17,-8
1001391c:	0401ffc4 	movi	r16,2047
10013920:	003e7306 	br	100132f0 <__alt_data_end+0xf80132f0>
10013924:	2c62b03a 	or	r17,r5,r17
10013928:	8822c03a 	cmpne	r17,r17,zero
1001392c:	0009883a 	mov	r4,zero
10013930:	003fa506 	br	100137c8 <__alt_data_end+0xf80137c8>
10013934:	400b883a 	mov	r5,r8
10013938:	3023883a 	mov	r17,r6
1001393c:	003e0c06 	br	10013170 <__alt_data_end+0xf8013170>
10013940:	400b883a 	mov	r5,r8
10013944:	3023883a 	mov	r17,r6
10013948:	0401ffc4 	movi	r16,2047
1001394c:	003e0806 	br	10013170 <__alt_data_end+0xf8013170>
10013950:	21fff804 	addi	r7,r4,-32
10013954:	02400804 	movi	r9,32
10013958:	29ced83a 	srl	r7,r5,r7
1001395c:	22400a26 	beq	r4,r9,10013988 <__adddf3+0x894>
10013960:	02401004 	movi	r9,64
10013964:	4909c83a 	sub	r4,r9,r4
10013968:	290a983a 	sll	r5,r5,r4
1001396c:	2c62b03a 	or	r17,r5,r17
10013970:	8822c03a 	cmpne	r17,r17,zero
10013974:	89e2b03a 	or	r17,r17,r7
10013978:	0009883a 	mov	r4,zero
1001397c:	003f9206 	br	100137c8 <__alt_data_end+0xf80137c8>
10013980:	000b883a 	mov	r5,zero
10013984:	003fdc06 	br	100138f8 <__alt_data_end+0xf80138f8>
10013988:	000b883a 	mov	r5,zero
1001398c:	003ff706 	br	1001396c <__alt_data_end+0xf801396c>

10013990 <__divdf3>:
10013990:	defff004 	addi	sp,sp,-64
10013994:	dc800815 	stw	r18,32(sp)
10013998:	2824d53a 	srli	r18,r5,20
1001399c:	dd800c15 	stw	r22,48(sp)
100139a0:	282cd7fa 	srli	r22,r5,31
100139a4:	dc000615 	stw	r16,24(sp)
100139a8:	04000434 	movhi	r16,16
100139ac:	df000e15 	stw	fp,56(sp)
100139b0:	dd000a15 	stw	r20,40(sp)
100139b4:	dcc00915 	stw	r19,36(sp)
100139b8:	dc400715 	stw	r17,28(sp)
100139bc:	843fffc4 	addi	r16,r16,-1
100139c0:	dfc00f15 	stw	ra,60(sp)
100139c4:	ddc00d15 	stw	r23,52(sp)
100139c8:	dd400b15 	stw	r21,44(sp)
100139cc:	9481ffcc 	andi	r18,r18,2047
100139d0:	2029883a 	mov	r20,r4
100139d4:	2027883a 	mov	r19,r4
100139d8:	2c22703a 	and	r17,r5,r16
100139dc:	b7003fcc 	andi	fp,r22,255
100139e0:	90005e26 	beq	r18,zero,10013b5c <__divdf3+0x1cc>
100139e4:	0081ffc4 	movi	r2,2047
100139e8:	90803526 	beq	r18,r2,10013ac0 <__divdf3+0x130>
100139ec:	8c000434 	orhi	r16,r17,16
100139f0:	2004d77a 	srli	r2,r4,29
100139f4:	802090fa 	slli	r16,r16,3
100139f8:	202690fa 	slli	r19,r4,3
100139fc:	94bf0044 	addi	r18,r18,-1023
10013a00:	80a2b03a 	or	r17,r16,r2
10013a04:	0029883a 	mov	r20,zero
10013a08:	0011883a 	mov	r8,zero
10013a0c:	380ad53a 	srli	r5,r7,20
10013a10:	382ed7fa 	srli	r23,r7,31
10013a14:	04000434 	movhi	r16,16
10013a18:	843fffc4 	addi	r16,r16,-1
10013a1c:	2941ffcc 	andi	r5,r5,2047
10013a20:	302b883a 	mov	r21,r6
10013a24:	3c20703a 	and	r16,r7,r16
10013a28:	ba403fcc 	andi	r9,r23,255
10013a2c:	28006726 	beq	r5,zero,10013bcc <__divdf3+0x23c>
10013a30:	0081ffc4 	movi	r2,2047
10013a34:	28805f26 	beq	r5,r2,10013bb4 <__divdf3+0x224>
10013a38:	84000434 	orhi	r16,r16,16
10013a3c:	3004d77a 	srli	r2,r6,29
10013a40:	802090fa 	slli	r16,r16,3
10013a44:	302a90fa 	slli	r21,r6,3
10013a48:	297f0044 	addi	r5,r5,-1023
10013a4c:	80a0b03a 	or	r16,r16,r2
10013a50:	000f883a 	mov	r7,zero
10013a54:	3d06b03a 	or	r3,r7,r20
10013a58:	180690ba 	slli	r3,r3,2
10013a5c:	00840074 	movhi	r2,4097
10013a60:	108ea004 	addi	r2,r2,14976
10013a64:	1885883a 	add	r2,r3,r2
10013a68:	10800017 	ldw	r2,0(r2)
10013a6c:	b5c8f03a 	xor	r4,r22,r23
10013a70:	200d883a 	mov	r6,r4
10013a74:	25003fcc 	andi	r20,r4,255
10013a78:	9165c83a 	sub	r18,r18,r5
10013a7c:	1000683a 	jmp	r2
10013a80:	10013cc8 	cmpgei	zero,r2,1267
10013a84:	10013af8 	rdprs	zero,r2,1259
10013a88:	10013c8c 	andi	zero,r2,1266
10013a8c:	10013adc 	xori	zero,r2,1259
10013a90:	10013c8c 	andi	zero,r2,1266
10013a94:	10013c60 	cmpeqi	zero,r2,1265
10013a98:	10013c8c 	andi	zero,r2,1266
10013a9c:	10013adc 	xori	zero,r2,1259
10013aa0:	10013af8 	rdprs	zero,r2,1259
10013aa4:	10013af8 	rdprs	zero,r2,1259
10013aa8:	10013c60 	cmpeqi	zero,r2,1265
10013aac:	10013adc 	xori	zero,r2,1259
10013ab0:	10013aec 	andhi	zero,r2,1259
10013ab4:	10013aec 	andhi	zero,r2,1259
10013ab8:	10013aec 	andhi	zero,r2,1259
10013abc:	10013c9c 	xori	zero,r2,1266
10013ac0:	8904b03a 	or	r2,r17,r4
10013ac4:	1000631e 	bne	r2,zero,10013c54 <__divdf3+0x2c4>
10013ac8:	05000204 	movi	r20,8
10013acc:	0023883a 	mov	r17,zero
10013ad0:	0027883a 	mov	r19,zero
10013ad4:	02000084 	movi	r8,2
10013ad8:	003fcc06 	br	10013a0c <__alt_data_end+0xf8013a0c>
10013adc:	8023883a 	mov	r17,r16
10013ae0:	a827883a 	mov	r19,r21
10013ae4:	4839883a 	mov	fp,r9
10013ae8:	3811883a 	mov	r8,r7
10013aec:	00800084 	movi	r2,2
10013af0:	4081531e 	bne	r8,r2,10014040 <__divdf3+0x6b0>
10013af4:	e029883a 	mov	r20,fp
10013af8:	a180004c 	andi	r6,r20,1
10013afc:	0201ffc4 	movi	r8,2047
10013b00:	000b883a 	mov	r5,zero
10013b04:	0027883a 	mov	r19,zero
10013b08:	4010953a 	slli	r8,r8,20
10013b0c:	30c03fcc 	andi	r3,r6,255
10013b10:	04000434 	movhi	r16,16
10013b14:	180697fa 	slli	r3,r3,31
10013b18:	843fffc4 	addi	r16,r16,-1
10013b1c:	2c20703a 	and	r16,r5,r16
10013b20:	8220b03a 	or	r16,r16,r8
10013b24:	80c6b03a 	or	r3,r16,r3
10013b28:	9805883a 	mov	r2,r19
10013b2c:	dfc00f17 	ldw	ra,60(sp)
10013b30:	df000e17 	ldw	fp,56(sp)
10013b34:	ddc00d17 	ldw	r23,52(sp)
10013b38:	dd800c17 	ldw	r22,48(sp)
10013b3c:	dd400b17 	ldw	r21,44(sp)
10013b40:	dd000a17 	ldw	r20,40(sp)
10013b44:	dcc00917 	ldw	r19,36(sp)
10013b48:	dc800817 	ldw	r18,32(sp)
10013b4c:	dc400717 	ldw	r17,28(sp)
10013b50:	dc000617 	ldw	r16,24(sp)
10013b54:	dec01004 	addi	sp,sp,64
10013b58:	f800283a 	ret
10013b5c:	8904b03a 	or	r2,r17,r4
10013b60:	10003726 	beq	r2,zero,10013c40 <__divdf3+0x2b0>
10013b64:	88014d26 	beq	r17,zero,1001409c <__divdf3+0x70c>
10013b68:	8809883a 	mov	r4,r17
10013b6c:	d9800215 	stw	r6,8(sp)
10013b70:	d9c00515 	stw	r7,20(sp)
10013b74:	0008ef40 	call	10008ef4 <__clzsi2>
10013b78:	d9800217 	ldw	r6,8(sp)
10013b7c:	d9c00517 	ldw	r7,20(sp)
10013b80:	1007883a 	mov	r3,r2
10013b84:	01000a04 	movi	r4,40
10013b88:	1cfffe04 	addi	r19,r3,-8
10013b8c:	20c9c83a 	sub	r4,r4,r3
10013b90:	8cca983a 	sll	r5,r17,r19
10013b94:	a108d83a 	srl	r4,r20,r4
10013b98:	a4e6983a 	sll	r19,r20,r19
10013b9c:	2162b03a 	or	r17,r4,r5
10013ba0:	04bf0344 	movi	r18,-1011
10013ba4:	90e5c83a 	sub	r18,r18,r3
10013ba8:	0029883a 	mov	r20,zero
10013bac:	0011883a 	mov	r8,zero
10013bb0:	003f9606 	br	10013a0c <__alt_data_end+0xf8013a0c>
10013bb4:	8184b03a 	or	r2,r16,r6
10013bb8:	10001f1e 	bne	r2,zero,10013c38 <__divdf3+0x2a8>
10013bbc:	0021883a 	mov	r16,zero
10013bc0:	002b883a 	mov	r21,zero
10013bc4:	01c00084 	movi	r7,2
10013bc8:	003fa206 	br	10013a54 <__alt_data_end+0xf8013a54>
10013bcc:	8184b03a 	or	r2,r16,r6
10013bd0:	10001526 	beq	r2,zero,10013c28 <__divdf3+0x298>
10013bd4:	80013d26 	beq	r16,zero,100140cc <__divdf3+0x73c>
10013bd8:	8009883a 	mov	r4,r16
10013bdc:	d9800215 	stw	r6,8(sp)
10013be0:	da000315 	stw	r8,12(sp)
10013be4:	da400415 	stw	r9,16(sp)
10013be8:	0008ef40 	call	10008ef4 <__clzsi2>
10013bec:	d9800217 	ldw	r6,8(sp)
10013bf0:	da000317 	ldw	r8,12(sp)
10013bf4:	da400417 	ldw	r9,16(sp)
10013bf8:	1007883a 	mov	r3,r2
10013bfc:	01000a04 	movi	r4,40
10013c00:	1d7ffe04 	addi	r21,r3,-8
10013c04:	20c9c83a 	sub	r4,r4,r3
10013c08:	8560983a 	sll	r16,r16,r21
10013c0c:	3108d83a 	srl	r4,r6,r4
10013c10:	356a983a 	sll	r21,r6,r21
10013c14:	2420b03a 	or	r16,r4,r16
10013c18:	017f0344 	movi	r5,-1011
10013c1c:	28cbc83a 	sub	r5,r5,r3
10013c20:	000f883a 	mov	r7,zero
10013c24:	003f8b06 	br	10013a54 <__alt_data_end+0xf8013a54>
10013c28:	0021883a 	mov	r16,zero
10013c2c:	002b883a 	mov	r21,zero
10013c30:	01c00044 	movi	r7,1
10013c34:	003f8706 	br	10013a54 <__alt_data_end+0xf8013a54>
10013c38:	01c000c4 	movi	r7,3
10013c3c:	003f8506 	br	10013a54 <__alt_data_end+0xf8013a54>
10013c40:	05000104 	movi	r20,4
10013c44:	0023883a 	mov	r17,zero
10013c48:	0027883a 	mov	r19,zero
10013c4c:	02000044 	movi	r8,1
10013c50:	003f6e06 	br	10013a0c <__alt_data_end+0xf8013a0c>
10013c54:	05000304 	movi	r20,12
10013c58:	020000c4 	movi	r8,3
10013c5c:	003f6b06 	br	10013a0c <__alt_data_end+0xf8013a0c>
10013c60:	01400434 	movhi	r5,16
10013c64:	000d883a 	mov	r6,zero
10013c68:	297fffc4 	addi	r5,r5,-1
10013c6c:	04ffffc4 	movi	r19,-1
10013c70:	0201ffc4 	movi	r8,2047
10013c74:	003fa406 	br	10013b08 <__alt_data_end+0xf8013b08>
10013c78:	043f0084 	movi	r16,-1022
10013c7c:	84a1c83a 	sub	r16,r16,r18
10013c80:	00800e04 	movi	r2,56
10013c84:	14014d0e 	bge	r2,r16,100141bc <__divdf3+0x82c>
10013c88:	a180004c 	andi	r6,r20,1
10013c8c:	0011883a 	mov	r8,zero
10013c90:	000b883a 	mov	r5,zero
10013c94:	0027883a 	mov	r19,zero
10013c98:	003f9b06 	br	10013b08 <__alt_data_end+0xf8013b08>
10013c9c:	8880022c 	andhi	r2,r17,8
10013ca0:	1000f026 	beq	r2,zero,10014064 <__divdf3+0x6d4>
10013ca4:	8080022c 	andhi	r2,r16,8
10013ca8:	1000ee1e 	bne	r2,zero,10014064 <__divdf3+0x6d4>
10013cac:	00800434 	movhi	r2,16
10013cb0:	81400234 	orhi	r5,r16,8
10013cb4:	10bfffc4 	addi	r2,r2,-1
10013cb8:	b80d883a 	mov	r6,r23
10013cbc:	288a703a 	and	r5,r5,r2
10013cc0:	a827883a 	mov	r19,r21
10013cc4:	003fea06 	br	10013c70 <__alt_data_end+0xf8013c70>
10013cc8:	84411c36 	bltu	r16,r17,1001413c <__divdf3+0x7ac>
10013ccc:	8c011a26 	beq	r17,r16,10014138 <__divdf3+0x7a8>
10013cd0:	94bfffc4 	addi	r18,r18,-1
10013cd4:	dcc00015 	stw	r19,0(sp)
10013cd8:	8811883a 	mov	r8,r17
10013cdc:	002d883a 	mov	r22,zero
10013ce0:	a80cd63a 	srli	r6,r21,24
10013ce4:	8020923a 	slli	r16,r16,8
10013ce8:	a82a923a 	slli	r21,r21,8
10013cec:	4009883a 	mov	r4,r8
10013cf0:	342eb03a 	or	r23,r6,r16
10013cf4:	dd400115 	stw	r21,4(sp)
10013cf8:	b82ad43a 	srli	r21,r23,16
10013cfc:	da000315 	stw	r8,12(sp)
10013d00:	bcffffcc 	andi	r19,r23,65535
10013d04:	a80b883a 	mov	r5,r21
10013d08:	0006de00 	call	10006de0 <__udivsi3>
10013d0c:	1009883a 	mov	r4,r2
10013d10:	980b883a 	mov	r5,r19
10013d14:	1023883a 	mov	r17,r2
10013d18:	0006df00 	call	10006df0 <__mulsi3>
10013d1c:	da000317 	ldw	r8,12(sp)
10013d20:	a80b883a 	mov	r5,r21
10013d24:	1039883a 	mov	fp,r2
10013d28:	4009883a 	mov	r4,r8
10013d2c:	0006de80 	call	10006de8 <__umodsi3>
10013d30:	d8c00017 	ldw	r3,0(sp)
10013d34:	1004943a 	slli	r2,r2,16
10013d38:	1810d43a 	srli	r8,r3,16
10013d3c:	120eb03a 	or	r7,r2,r8
10013d40:	3f00062e 	bgeu	r7,fp,10013d5c <__divdf3+0x3cc>
10013d44:	3dcf883a 	add	r7,r7,r23
10013d48:	88bfffc4 	addi	r2,r17,-1
10013d4c:	3dc10a36 	bltu	r7,r23,10014178 <__divdf3+0x7e8>
10013d50:	3f01092e 	bgeu	r7,fp,10014178 <__divdf3+0x7e8>
10013d54:	8c7fff84 	addi	r17,r17,-2
10013d58:	3dcf883a 	add	r7,r7,r23
10013d5c:	3f39c83a 	sub	fp,r7,fp
10013d60:	e009883a 	mov	r4,fp
10013d64:	a80b883a 	mov	r5,r21
10013d68:	0006de00 	call	10006de0 <__udivsi3>
10013d6c:	1009883a 	mov	r4,r2
10013d70:	980b883a 	mov	r5,r19
10013d74:	1021883a 	mov	r16,r2
10013d78:	0006df00 	call	10006df0 <__mulsi3>
10013d7c:	e009883a 	mov	r4,fp
10013d80:	a80b883a 	mov	r5,r21
10013d84:	d8800315 	stw	r2,12(sp)
10013d88:	0006de80 	call	10006de8 <__umodsi3>
10013d8c:	d9000017 	ldw	r4,0(sp)
10013d90:	1004943a 	slli	r2,r2,16
10013d94:	da000317 	ldw	r8,12(sp)
10013d98:	20ffffcc 	andi	r3,r4,65535
10013d9c:	10ceb03a 	or	r7,r2,r3
10013da0:	3a00062e 	bgeu	r7,r8,10013dbc <__divdf3+0x42c>
10013da4:	3dcf883a 	add	r7,r7,r23
10013da8:	80bfffc4 	addi	r2,r16,-1
10013dac:	3dc0f036 	bltu	r7,r23,10014170 <__divdf3+0x7e0>
10013db0:	3a00ef2e 	bgeu	r7,r8,10014170 <__divdf3+0x7e0>
10013db4:	843fff84 	addi	r16,r16,-2
10013db8:	3dcf883a 	add	r7,r7,r23
10013dbc:	d8c00117 	ldw	r3,4(sp)
10013dc0:	8822943a 	slli	r17,r17,16
10013dc4:	3a0fc83a 	sub	r7,r7,r8
10013dc8:	1806d43a 	srli	r3,r3,16
10013dcc:	8462b03a 	or	r17,r16,r17
10013dd0:	8affffcc 	andi	r11,r17,65535
10013dd4:	d8c00015 	stw	r3,0(sp)
10013dd8:	d8c00117 	ldw	r3,4(sp)
10013ddc:	8820d43a 	srli	r16,r17,16
10013de0:	5809883a 	mov	r4,r11
10013de4:	1f3fffcc 	andi	fp,r3,65535
10013de8:	e00b883a 	mov	r5,fp
10013dec:	d9c00515 	stw	r7,20(sp)
10013df0:	dac00215 	stw	r11,8(sp)
10013df4:	0006df00 	call	10006df0 <__mulsi3>
10013df8:	8009883a 	mov	r4,r16
10013dfc:	e00b883a 	mov	r5,fp
10013e00:	d8800415 	stw	r2,16(sp)
10013e04:	0006df00 	call	10006df0 <__mulsi3>
10013e08:	d9400017 	ldw	r5,0(sp)
10013e0c:	8009883a 	mov	r4,r16
10013e10:	d8800315 	stw	r2,12(sp)
10013e14:	0006df00 	call	10006df0 <__mulsi3>
10013e18:	dac00217 	ldw	r11,8(sp)
10013e1c:	d9400017 	ldw	r5,0(sp)
10013e20:	d8800215 	stw	r2,8(sp)
10013e24:	5809883a 	mov	r4,r11
10013e28:	0006df00 	call	10006df0 <__mulsi3>
10013e2c:	da400417 	ldw	r9,16(sp)
10013e30:	da800317 	ldw	r10,12(sp)
10013e34:	d9c00517 	ldw	r7,20(sp)
10013e38:	480ad43a 	srli	r5,r9,16
10013e3c:	5085883a 	add	r2,r10,r2
10013e40:	db000217 	ldw	r12,8(sp)
10013e44:	1151883a 	add	r8,r2,r5
10013e48:	4280022e 	bgeu	r8,r10,10013e54 <__divdf3+0x4c4>
10013e4c:	00800074 	movhi	r2,1
10013e50:	6099883a 	add	r12,r12,r2
10013e54:	400ad43a 	srli	r5,r8,16
10013e58:	4010943a 	slli	r8,r8,16
10013e5c:	4c3fffcc 	andi	r16,r9,65535
10013e60:	6149883a 	add	r4,r12,r5
10013e64:	4411883a 	add	r8,r8,r16
10013e68:	3900a736 	bltu	r7,r4,10014108 <__divdf3+0x778>
10013e6c:	3900c426 	beq	r7,r4,10014180 <__divdf3+0x7f0>
10013e70:	3909c83a 	sub	r4,r7,r4
10013e74:	b221c83a 	sub	r16,r22,r8
10013e78:	b42d803a 	cmpltu	r22,r22,r16
10013e7c:	25adc83a 	sub	r22,r4,r22
10013e80:	b5c0c626 	beq	r22,r23,1001419c <__divdf3+0x80c>
10013e84:	b009883a 	mov	r4,r22
10013e88:	a80b883a 	mov	r5,r21
10013e8c:	0006de00 	call	10006de0 <__udivsi3>
10013e90:	1009883a 	mov	r4,r2
10013e94:	980b883a 	mov	r5,r19
10013e98:	d8800315 	stw	r2,12(sp)
10013e9c:	0006df00 	call	10006df0 <__mulsi3>
10013ea0:	a80b883a 	mov	r5,r21
10013ea4:	b009883a 	mov	r4,r22
10013ea8:	d8800415 	stw	r2,16(sp)
10013eac:	0006de80 	call	10006de8 <__umodsi3>
10013eb0:	1004943a 	slli	r2,r2,16
10013eb4:	800ed43a 	srli	r7,r16,16
10013eb8:	da400417 	ldw	r9,16(sp)
10013ebc:	da000317 	ldw	r8,12(sp)
10013ec0:	11cab03a 	or	r5,r2,r7
10013ec4:	2a40062e 	bgeu	r5,r9,10013ee0 <__divdf3+0x550>
10013ec8:	2dcb883a 	add	r5,r5,r23
10013ecc:	40bfffc4 	addi	r2,r8,-1
10013ed0:	2dc0b436 	bltu	r5,r23,100141a4 <__divdf3+0x814>
10013ed4:	2a40b32e 	bgeu	r5,r9,100141a4 <__divdf3+0x814>
10013ed8:	423fff84 	addi	r8,r8,-2
10013edc:	2dcb883a 	add	r5,r5,r23
10013ee0:	2a6dc83a 	sub	r22,r5,r9
10013ee4:	b009883a 	mov	r4,r22
10013ee8:	a80b883a 	mov	r5,r21
10013eec:	da000315 	stw	r8,12(sp)
10013ef0:	0006de00 	call	10006de0 <__udivsi3>
10013ef4:	980b883a 	mov	r5,r19
10013ef8:	1009883a 	mov	r4,r2
10013efc:	d8800415 	stw	r2,16(sp)
10013f00:	0006df00 	call	10006df0 <__mulsi3>
10013f04:	b009883a 	mov	r4,r22
10013f08:	a80b883a 	mov	r5,r21
10013f0c:	1027883a 	mov	r19,r2
10013f10:	0006de80 	call	10006de8 <__umodsi3>
10013f14:	1004943a 	slli	r2,r2,16
10013f18:	843fffcc 	andi	r16,r16,65535
10013f1c:	da000317 	ldw	r8,12(sp)
10013f20:	140eb03a 	or	r7,r2,r16
10013f24:	da400417 	ldw	r9,16(sp)
10013f28:	3cc0062e 	bgeu	r7,r19,10013f44 <__divdf3+0x5b4>
10013f2c:	3dcf883a 	add	r7,r7,r23
10013f30:	48bfffc4 	addi	r2,r9,-1
10013f34:	3dc09d36 	bltu	r7,r23,100141ac <__divdf3+0x81c>
10013f38:	3cc09c2e 	bgeu	r7,r19,100141ac <__divdf3+0x81c>
10013f3c:	4a7fff84 	addi	r9,r9,-2
10013f40:	3dcf883a 	add	r7,r7,r23
10013f44:	4010943a 	slli	r8,r8,16
10013f48:	3cebc83a 	sub	r21,r7,r19
10013f4c:	e00b883a 	mov	r5,fp
10013f50:	4a26b03a 	or	r19,r9,r8
10013f54:	99ffffcc 	andi	r7,r19,65535
10013f58:	9820d43a 	srli	r16,r19,16
10013f5c:	3809883a 	mov	r4,r7
10013f60:	d9c00515 	stw	r7,20(sp)
10013f64:	0006df00 	call	10006df0 <__mulsi3>
10013f68:	8009883a 	mov	r4,r16
10013f6c:	e00b883a 	mov	r5,fp
10013f70:	102d883a 	mov	r22,r2
10013f74:	0006df00 	call	10006df0 <__mulsi3>
10013f78:	d9400017 	ldw	r5,0(sp)
10013f7c:	8009883a 	mov	r4,r16
10013f80:	1039883a 	mov	fp,r2
10013f84:	0006df00 	call	10006df0 <__mulsi3>
10013f88:	d9c00517 	ldw	r7,20(sp)
10013f8c:	d9400017 	ldw	r5,0(sp)
10013f90:	1021883a 	mov	r16,r2
10013f94:	3809883a 	mov	r4,r7
10013f98:	0006df00 	call	10006df0 <__mulsi3>
10013f9c:	b008d43a 	srli	r4,r22,16
10013fa0:	e085883a 	add	r2,fp,r2
10013fa4:	1109883a 	add	r4,r2,r4
10013fa8:	2700022e 	bgeu	r4,fp,10013fb4 <__divdf3+0x624>
10013fac:	00800074 	movhi	r2,1
10013fb0:	80a1883a 	add	r16,r16,r2
10013fb4:	200ad43a 	srli	r5,r4,16
10013fb8:	2008943a 	slli	r4,r4,16
10013fbc:	b5bfffcc 	andi	r22,r22,65535
10013fc0:	8145883a 	add	r2,r16,r5
10013fc4:	2589883a 	add	r4,r4,r22
10013fc8:	a8802c36 	bltu	r21,r2,1001407c <__divdf3+0x6ec>
10013fcc:	a880a426 	beq	r21,r2,10014260 <__divdf3+0x8d0>
10013fd0:	9cc00054 	ori	r19,r19,1
10013fd4:	9200ffc4 	addi	r8,r18,1023
10013fd8:	023f270e 	bge	zero,r8,10013c78 <__alt_data_end+0xf8013c78>
10013fdc:	988001cc 	andi	r2,r19,7
10013fe0:	10000726 	beq	r2,zero,10014000 <__divdf3+0x670>
10013fe4:	990003cc 	andi	r4,r19,15
10013fe8:	00800104 	movi	r2,4
10013fec:	20800426 	beq	r4,r2,10014000 <__divdf3+0x670>
10013ff0:	9885883a 	add	r2,r19,r2
10013ff4:	14e7803a 	cmpltu	r19,r2,r19
10013ff8:	8ce3883a 	add	r17,r17,r19
10013ffc:	1027883a 	mov	r19,r2
10014000:	8880402c 	andhi	r2,r17,256
10014004:	10000426 	beq	r2,zero,10014018 <__divdf3+0x688>
10014008:	00bfc034 	movhi	r2,65280
1001400c:	10bfffc4 	addi	r2,r2,-1
10014010:	92010004 	addi	r8,r18,1024
10014014:	88a2703a 	and	r17,r17,r2
10014018:	0081ff84 	movi	r2,2046
1001401c:	123eb616 	blt	r2,r8,10013af8 <__alt_data_end+0xf8013af8>
10014020:	9826d0fa 	srli	r19,r19,3
10014024:	8804977a 	slli	r2,r17,29
10014028:	8820927a 	slli	r16,r17,9
1001402c:	4201ffcc 	andi	r8,r8,2047
10014030:	14e6b03a 	or	r19,r2,r19
10014034:	800ad33a 	srli	r5,r16,12
10014038:	a180004c 	andi	r6,r20,1
1001403c:	003eb206 	br	10013b08 <__alt_data_end+0xf8013b08>
10014040:	008000c4 	movi	r2,3
10014044:	4080ac26 	beq	r8,r2,100142f8 <__divdf3+0x968>
10014048:	00800044 	movi	r2,1
1001404c:	4080591e 	bne	r8,r2,100141b4 <__divdf3+0x824>
10014050:	e00d883a 	mov	r6,fp
10014054:	0011883a 	mov	r8,zero
10014058:	000b883a 	mov	r5,zero
1001405c:	0027883a 	mov	r19,zero
10014060:	003ea906 	br	10013b08 <__alt_data_end+0xf8013b08>
10014064:	00800434 	movhi	r2,16
10014068:	89400234 	orhi	r5,r17,8
1001406c:	10bfffc4 	addi	r2,r2,-1
10014070:	b00d883a 	mov	r6,r22
10014074:	288a703a 	and	r5,r5,r2
10014078:	003efd06 	br	10013c70 <__alt_data_end+0xf8013c70>
1001407c:	adcf883a 	add	r7,r21,r23
10014080:	997fffc4 	addi	r5,r19,-1
10014084:	3dc0412e 	bgeu	r7,r23,1001418c <__divdf3+0x7fc>
10014088:	2827883a 	mov	r19,r5
1001408c:	38bfd01e 	bne	r7,r2,10013fd0 <__alt_data_end+0xf8013fd0>
10014090:	d8c00117 	ldw	r3,4(sp)
10014094:	193fce1e 	bne	r3,r4,10013fd0 <__alt_data_end+0xf8013fd0>
10014098:	003fce06 	br	10013fd4 <__alt_data_end+0xf8013fd4>
1001409c:	d9800215 	stw	r6,8(sp)
100140a0:	d9c00515 	stw	r7,20(sp)
100140a4:	0008ef40 	call	10008ef4 <__clzsi2>
100140a8:	10c00804 	addi	r3,r2,32
100140ac:	010009c4 	movi	r4,39
100140b0:	d9800217 	ldw	r6,8(sp)
100140b4:	d9c00517 	ldw	r7,20(sp)
100140b8:	20feb20e 	bge	r4,r3,10013b84 <__alt_data_end+0xf8013b84>
100140bc:	117ffe04 	addi	r5,r2,-8
100140c0:	a162983a 	sll	r17,r20,r5
100140c4:	0027883a 	mov	r19,zero
100140c8:	003eb506 	br	10013ba0 <__alt_data_end+0xf8013ba0>
100140cc:	3009883a 	mov	r4,r6
100140d0:	d9800215 	stw	r6,8(sp)
100140d4:	da000315 	stw	r8,12(sp)
100140d8:	da400415 	stw	r9,16(sp)
100140dc:	0008ef40 	call	10008ef4 <__clzsi2>
100140e0:	10c00804 	addi	r3,r2,32
100140e4:	010009c4 	movi	r4,39
100140e8:	d9800217 	ldw	r6,8(sp)
100140ec:	da000317 	ldw	r8,12(sp)
100140f0:	da400417 	ldw	r9,16(sp)
100140f4:	20fec10e 	bge	r4,r3,10013bfc <__alt_data_end+0xf8013bfc>
100140f8:	10bffe04 	addi	r2,r2,-8
100140fc:	a8a0983a 	sll	r16,r21,r2
10014100:	002b883a 	mov	r21,zero
10014104:	003ec406 	br	10013c18 <__alt_data_end+0xf8013c18>
10014108:	d8c00117 	ldw	r3,4(sp)
1001410c:	b0ed883a 	add	r22,r22,r3
10014110:	b0c5803a 	cmpltu	r2,r22,r3
10014114:	15c5883a 	add	r2,r2,r23
10014118:	11cf883a 	add	r7,r2,r7
1001411c:	88bfffc4 	addi	r2,r17,-1
10014120:	b9c00d2e 	bgeu	r23,r7,10014158 <__divdf3+0x7c8>
10014124:	39003f36 	bltu	r7,r4,10014224 <__divdf3+0x894>
10014128:	21c06a26 	beq	r4,r7,100142d4 <__divdf3+0x944>
1001412c:	3909c83a 	sub	r4,r7,r4
10014130:	1023883a 	mov	r17,r2
10014134:	003f4f06 	br	10013e74 <__alt_data_end+0xf8013e74>
10014138:	9d7ee536 	bltu	r19,r21,10013cd0 <__alt_data_end+0xf8013cd0>
1001413c:	982ed07a 	srli	r23,r19,1
10014140:	880497fa 	slli	r2,r17,31
10014144:	8810d07a 	srli	r8,r17,1
10014148:	982c97fa 	slli	r22,r19,31
1001414c:	b884b03a 	or	r2,r23,r2
10014150:	d8800015 	stw	r2,0(sp)
10014154:	003ee206 	br	10013ce0 <__alt_data_end+0xf8013ce0>
10014158:	3dfff41e 	bne	r7,r23,1001412c <__alt_data_end+0xf801412c>
1001415c:	d8c00117 	ldw	r3,4(sp)
10014160:	b0fff02e 	bgeu	r22,r3,10014124 <__alt_data_end+0xf8014124>
10014164:	b909c83a 	sub	r4,r23,r4
10014168:	1023883a 	mov	r17,r2
1001416c:	003f4106 	br	10013e74 <__alt_data_end+0xf8013e74>
10014170:	1021883a 	mov	r16,r2
10014174:	003f1106 	br	10013dbc <__alt_data_end+0xf8013dbc>
10014178:	1023883a 	mov	r17,r2
1001417c:	003ef706 	br	10013d5c <__alt_data_end+0xf8013d5c>
10014180:	b23fe136 	bltu	r22,r8,10014108 <__alt_data_end+0xf8014108>
10014184:	0009883a 	mov	r4,zero
10014188:	003f3a06 	br	10013e74 <__alt_data_end+0xf8013e74>
1001418c:	38802c36 	bltu	r7,r2,10014240 <__divdf3+0x8b0>
10014190:	11c05326 	beq	r2,r7,100142e0 <__divdf3+0x950>
10014194:	2827883a 	mov	r19,r5
10014198:	003f8d06 	br	10013fd0 <__alt_data_end+0xf8013fd0>
1001419c:	04ffffc4 	movi	r19,-1
100141a0:	003f8c06 	br	10013fd4 <__alt_data_end+0xf8013fd4>
100141a4:	1011883a 	mov	r8,r2
100141a8:	003f4d06 	br	10013ee0 <__alt_data_end+0xf8013ee0>
100141ac:	1013883a 	mov	r9,r2
100141b0:	003f6406 	br	10013f44 <__alt_data_end+0xf8013f44>
100141b4:	e029883a 	mov	r20,fp
100141b8:	003f8606 	br	10013fd4 <__alt_data_end+0xf8013fd4>
100141bc:	008007c4 	movi	r2,31
100141c0:	14002a16 	blt	r2,r16,1001426c <__divdf3+0x8dc>
100141c4:	91410784 	addi	r5,r18,1054
100141c8:	9c0cd83a 	srl	r6,r19,r16
100141cc:	8948983a 	sll	r4,r17,r5
100141d0:	9944983a 	sll	r2,r19,r5
100141d4:	8c20d83a 	srl	r16,r17,r16
100141d8:	3108b03a 	or	r4,r6,r4
100141dc:	1004c03a 	cmpne	r2,r2,zero
100141e0:	2084b03a 	or	r2,r4,r2
100141e4:	110001cc 	andi	r4,r2,7
100141e8:	20000726 	beq	r4,zero,10014208 <__divdf3+0x878>
100141ec:	114003cc 	andi	r5,r2,15
100141f0:	01000104 	movi	r4,4
100141f4:	29000426 	beq	r5,r4,10014208 <__divdf3+0x878>
100141f8:	11000104 	addi	r4,r2,4
100141fc:	2085803a 	cmpltu	r2,r4,r2
10014200:	80a1883a 	add	r16,r16,r2
10014204:	2005883a 	mov	r2,r4
10014208:	8100202c 	andhi	r4,r16,128
1001420c:	20002d26 	beq	r4,zero,100142c4 <__divdf3+0x934>
10014210:	a180004c 	andi	r6,r20,1
10014214:	02000044 	movi	r8,1
10014218:	000b883a 	mov	r5,zero
1001421c:	0027883a 	mov	r19,zero
10014220:	003e3906 	br	10013b08 <__alt_data_end+0xf8013b08>
10014224:	d8c00117 	ldw	r3,4(sp)
10014228:	8c7fff84 	addi	r17,r17,-2
1001422c:	b0ed883a 	add	r22,r22,r3
10014230:	b0c5803a 	cmpltu	r2,r22,r3
10014234:	15c5883a 	add	r2,r2,r23
10014238:	11cf883a 	add	r7,r2,r7
1001423c:	003f0c06 	br	10013e70 <__alt_data_end+0xf8013e70>
10014240:	d8c00117 	ldw	r3,4(sp)
10014244:	997fff84 	addi	r5,r19,-2
10014248:	18d1883a 	add	r8,r3,r3
1001424c:	40c7803a 	cmpltu	r3,r8,r3
10014250:	1dcd883a 	add	r6,r3,r23
10014254:	398f883a 	add	r7,r7,r6
10014258:	da000115 	stw	r8,4(sp)
1001425c:	003f8a06 	br	10014088 <__alt_data_end+0xf8014088>
10014260:	203f861e 	bne	r4,zero,1001407c <__alt_data_end+0xf801407c>
10014264:	d8000115 	stw	zero,4(sp)
10014268:	003f8906 	br	10014090 <__alt_data_end+0xf8014090>
1001426c:	00bef884 	movi	r2,-1054
10014270:	1485c83a 	sub	r2,r2,r18
10014274:	01000804 	movi	r4,32
10014278:	8884d83a 	srl	r2,r17,r2
1001427c:	81001c26 	beq	r16,r4,100142f0 <__divdf3+0x960>
10014280:	91010f84 	addi	r4,r18,1086
10014284:	8908983a 	sll	r4,r17,r4
10014288:	24c8b03a 	or	r4,r4,r19
1001428c:	2008c03a 	cmpne	r4,r4,zero
10014290:	2084b03a 	or	r2,r4,r2
10014294:	140001cc 	andi	r16,r2,7
10014298:	8000061e 	bne	r16,zero,100142b4 <__divdf3+0x924>
1001429c:	000b883a 	mov	r5,zero
100142a0:	1004d0fa 	srli	r2,r2,3
100142a4:	a180004c 	andi	r6,r20,1
100142a8:	0011883a 	mov	r8,zero
100142ac:	1426b03a 	or	r19,r2,r16
100142b0:	003e1506 	br	10013b08 <__alt_data_end+0xf8013b08>
100142b4:	114003cc 	andi	r5,r2,15
100142b8:	01000104 	movi	r4,4
100142bc:	0021883a 	mov	r16,zero
100142c0:	293fcd1e 	bne	r5,r4,100141f8 <__alt_data_end+0xf80141f8>
100142c4:	800a927a 	slli	r5,r16,9
100142c8:	8020977a 	slli	r16,r16,29
100142cc:	280ad33a 	srli	r5,r5,12
100142d0:	003ff306 	br	100142a0 <__alt_data_end+0xf80142a0>
100142d4:	b23fd336 	bltu	r22,r8,10014224 <__alt_data_end+0xf8014224>
100142d8:	1023883a 	mov	r17,r2
100142dc:	003fa906 	br	10014184 <__alt_data_end+0xf8014184>
100142e0:	d8c00117 	ldw	r3,4(sp)
100142e4:	193fd636 	bltu	r3,r4,10014240 <__alt_data_end+0xf8014240>
100142e8:	2827883a 	mov	r19,r5
100142ec:	003f6806 	br	10014090 <__alt_data_end+0xf8014090>
100142f0:	0009883a 	mov	r4,zero
100142f4:	003fe406 	br	10014288 <__alt_data_end+0xf8014288>
100142f8:	00800434 	movhi	r2,16
100142fc:	89400234 	orhi	r5,r17,8
10014300:	10bfffc4 	addi	r2,r2,-1
10014304:	e00d883a 	mov	r6,fp
10014308:	288a703a 	and	r5,r5,r2
1001430c:	003e5806 	br	10013c70 <__alt_data_end+0xf8013c70>

10014310 <__eqdf2>:
10014310:	2804d53a 	srli	r2,r5,20
10014314:	3806d53a 	srli	r3,r7,20
10014318:	02000434 	movhi	r8,16
1001431c:	423fffc4 	addi	r8,r8,-1
10014320:	1081ffcc 	andi	r2,r2,2047
10014324:	0241ffc4 	movi	r9,2047
10014328:	2a14703a 	and	r10,r5,r8
1001432c:	18c1ffcc 	andi	r3,r3,2047
10014330:	3a10703a 	and	r8,r7,r8
10014334:	280ad7fa 	srli	r5,r5,31
10014338:	380ed7fa 	srli	r7,r7,31
1001433c:	12400f26 	beq	r2,r9,1001437c <__eqdf2+0x6c>
10014340:	0241ffc4 	movi	r9,2047
10014344:	1a400326 	beq	r3,r9,10014354 <__eqdf2+0x44>
10014348:	10c00526 	beq	r2,r3,10014360 <__eqdf2+0x50>
1001434c:	00800044 	movi	r2,1
10014350:	f800283a 	ret
10014354:	4192b03a 	or	r9,r8,r6
10014358:	483ffc1e 	bne	r9,zero,1001434c <__alt_data_end+0xf801434c>
1001435c:	10fffb1e 	bne	r2,r3,1001434c <__alt_data_end+0xf801434c>
10014360:	523ffa1e 	bne	r10,r8,1001434c <__alt_data_end+0xf801434c>
10014364:	21bff91e 	bne	r4,r6,1001434c <__alt_data_end+0xf801434c>
10014368:	29c00826 	beq	r5,r7,1001438c <__eqdf2+0x7c>
1001436c:	103ff71e 	bne	r2,zero,1001434c <__alt_data_end+0xf801434c>
10014370:	5104b03a 	or	r2,r10,r4
10014374:	1004c03a 	cmpne	r2,r2,zero
10014378:	f800283a 	ret
1001437c:	5112b03a 	or	r9,r10,r4
10014380:	483fef26 	beq	r9,zero,10014340 <__alt_data_end+0xf8014340>
10014384:	00800044 	movi	r2,1
10014388:	f800283a 	ret
1001438c:	0005883a 	mov	r2,zero
10014390:	f800283a 	ret

10014394 <__gedf2>:
10014394:	2804d53a 	srli	r2,r5,20
10014398:	3806d53a 	srli	r3,r7,20
1001439c:	02000434 	movhi	r8,16
100143a0:	423fffc4 	addi	r8,r8,-1
100143a4:	0241ffc4 	movi	r9,2047
100143a8:	1081ffcc 	andi	r2,r2,2047
100143ac:	2a14703a 	and	r10,r5,r8
100143b0:	1a46703a 	and	r3,r3,r9
100143b4:	3a10703a 	and	r8,r7,r8
100143b8:	280ad7fa 	srli	r5,r5,31
100143bc:	380ed7fa 	srli	r7,r7,31
100143c0:	12400b26 	beq	r2,r9,100143f0 <__gedf2+0x5c>
100143c4:	1a401626 	beq	r3,r9,10014420 <__gedf2+0x8c>
100143c8:	10000c1e 	bne	r2,zero,100143fc <__gedf2+0x68>
100143cc:	5112b03a 	or	r9,r10,r4
100143d0:	4813003a 	cmpeq	r9,r9,zero
100143d4:	4817883a 	mov	r11,r9
100143d8:	18000c1e 	bne	r3,zero,1001440c <__gedf2+0x78>
100143dc:	4198b03a 	or	r12,r8,r6
100143e0:	60000a1e 	bne	r12,zero,1001440c <__gedf2+0x78>
100143e4:	48001326 	beq	r9,zero,10014434 <__gedf2+0xa0>
100143e8:	0005883a 	mov	r2,zero
100143ec:	f800283a 	ret
100143f0:	5112b03a 	or	r9,r10,r4
100143f4:	4800191e 	bne	r9,zero,1001445c <__gedf2+0xc8>
100143f8:	18800926 	beq	r3,r2,10014420 <__gedf2+0x8c>
100143fc:	18000b1e 	bne	r3,zero,1001442c <__gedf2+0x98>
10014400:	4192b03a 	or	r9,r8,r6
10014404:	0017883a 	mov	r11,zero
10014408:	48000a26 	beq	r9,zero,10014434 <__gedf2+0xa0>
1001440c:	39c03fcc 	andi	r7,r7,255
10014410:	58000726 	beq	r11,zero,10014430 <__gedf2+0x9c>
10014414:	3800081e 	bne	r7,zero,10014438 <__gedf2+0xa4>
10014418:	00bfffc4 	movi	r2,-1
1001441c:	f800283a 	ret
10014420:	4192b03a 	or	r9,r8,r6
10014424:	48000d1e 	bne	r9,zero,1001445c <__gedf2+0xc8>
10014428:	103fe826 	beq	r2,zero,100143cc <__alt_data_end+0xf80143cc>
1001442c:	39c03fcc 	andi	r7,r7,255
10014430:	29c00326 	beq	r5,r7,10014440 <__gedf2+0xac>
10014434:	283ff81e 	bne	r5,zero,10014418 <__alt_data_end+0xf8014418>
10014438:	00800044 	movi	r2,1
1001443c:	f800283a 	ret
10014440:	18bffc16 	blt	r3,r2,10014434 <__alt_data_end+0xf8014434>
10014444:	10c00316 	blt	r2,r3,10014454 <__gedf2+0xc0>
10014448:	42bffa36 	bltu	r8,r10,10014434 <__alt_data_end+0xf8014434>
1001444c:	52000526 	beq	r10,r8,10014464 <__gedf2+0xd0>
10014450:	523fe52e 	bgeu	r10,r8,100143e8 <__alt_data_end+0xf80143e8>
10014454:	283ff026 	beq	r5,zero,10014418 <__alt_data_end+0xf8014418>
10014458:	003ff706 	br	10014438 <__alt_data_end+0xf8014438>
1001445c:	00bfff84 	movi	r2,-2
10014460:	f800283a 	ret
10014464:	313ff336 	bltu	r6,r4,10014434 <__alt_data_end+0xf8014434>
10014468:	21bfdf2e 	bgeu	r4,r6,100143e8 <__alt_data_end+0xf80143e8>
1001446c:	283fea26 	beq	r5,zero,10014418 <__alt_data_end+0xf8014418>
10014470:	003ff106 	br	10014438 <__alt_data_end+0xf8014438>

10014474 <__ledf2>:
10014474:	2804d53a 	srli	r2,r5,20
10014478:	3810d53a 	srli	r8,r7,20
1001447c:	00c00434 	movhi	r3,16
10014480:	18ffffc4 	addi	r3,r3,-1
10014484:	0241ffc4 	movi	r9,2047
10014488:	1081ffcc 	andi	r2,r2,2047
1001448c:	28d4703a 	and	r10,r5,r3
10014490:	4250703a 	and	r8,r8,r9
10014494:	38c6703a 	and	r3,r7,r3
10014498:	280ad7fa 	srli	r5,r5,31
1001449c:	380ed7fa 	srli	r7,r7,31
100144a0:	12400b26 	beq	r2,r9,100144d0 <__ledf2+0x5c>
100144a4:	42401926 	beq	r8,r9,1001450c <__ledf2+0x98>
100144a8:	10000c1e 	bne	r2,zero,100144dc <__ledf2+0x68>
100144ac:	5112b03a 	or	r9,r10,r4
100144b0:	4813003a 	cmpeq	r9,r9,zero
100144b4:	4817883a 	mov	r11,r9
100144b8:	40000f26 	beq	r8,zero,100144f8 <__ledf2+0x84>
100144bc:	39c03fcc 	andi	r7,r7,255
100144c0:	58001826 	beq	r11,zero,10014524 <__ledf2+0xb0>
100144c4:	38000a1e 	bne	r7,zero,100144f0 <__ledf2+0x7c>
100144c8:	00bfffc4 	movi	r2,-1
100144cc:	f800283a 	ret
100144d0:	5112b03a 	or	r9,r10,r4
100144d4:	48000f1e 	bne	r9,zero,10014514 <__ledf2+0xa0>
100144d8:	40800c26 	beq	r8,r2,1001450c <__ledf2+0x98>
100144dc:	4000101e 	bne	r8,zero,10014520 <__ledf2+0xac>
100144e0:	1992b03a 	or	r9,r3,r6
100144e4:	0017883a 	mov	r11,zero
100144e8:	483ff41e 	bne	r9,zero,100144bc <__alt_data_end+0xf80144bc>
100144ec:	283ff61e 	bne	r5,zero,100144c8 <__alt_data_end+0xf80144c8>
100144f0:	00800044 	movi	r2,1
100144f4:	f800283a 	ret
100144f8:	1998b03a 	or	r12,r3,r6
100144fc:	603fef1e 	bne	r12,zero,100144bc <__alt_data_end+0xf80144bc>
10014500:	483ffa26 	beq	r9,zero,100144ec <__alt_data_end+0xf80144ec>
10014504:	0005883a 	mov	r2,zero
10014508:	f800283a 	ret
1001450c:	1992b03a 	or	r9,r3,r6
10014510:	48000226 	beq	r9,zero,1001451c <__ledf2+0xa8>
10014514:	00800084 	movi	r2,2
10014518:	f800283a 	ret
1001451c:	103fe326 	beq	r2,zero,100144ac <__alt_data_end+0xf80144ac>
10014520:	39c03fcc 	andi	r7,r7,255
10014524:	29fff11e 	bne	r5,r7,100144ec <__alt_data_end+0xf80144ec>
10014528:	40bff016 	blt	r8,r2,100144ec <__alt_data_end+0xf80144ec>
1001452c:	12000316 	blt	r2,r8,1001453c <__ledf2+0xc8>
10014530:	1abfee36 	bltu	r3,r10,100144ec <__alt_data_end+0xf80144ec>
10014534:	50c00326 	beq	r10,r3,10014544 <__ledf2+0xd0>
10014538:	50fff22e 	bgeu	r10,r3,10014504 <__alt_data_end+0xf8014504>
1001453c:	283fe226 	beq	r5,zero,100144c8 <__alt_data_end+0xf80144c8>
10014540:	003feb06 	br	100144f0 <__alt_data_end+0xf80144f0>
10014544:	313fe936 	bltu	r6,r4,100144ec <__alt_data_end+0xf80144ec>
10014548:	21bfee2e 	bgeu	r4,r6,10014504 <__alt_data_end+0xf8014504>
1001454c:	283fde26 	beq	r5,zero,100144c8 <__alt_data_end+0xf80144c8>
10014550:	003fe706 	br	100144f0 <__alt_data_end+0xf80144f0>

10014554 <__fixdfsi>:
10014554:	2806d53a 	srli	r3,r5,20
10014558:	00800434 	movhi	r2,16
1001455c:	10bfffc4 	addi	r2,r2,-1
10014560:	18c1ffcc 	andi	r3,r3,2047
10014564:	0180ff84 	movi	r6,1022
10014568:	2884703a 	and	r2,r5,r2
1001456c:	280ad7fa 	srli	r5,r5,31
10014570:	30c0130e 	bge	r6,r3,100145c0 <__fixdfsi+0x6c>
10014574:	01810744 	movi	r6,1053
10014578:	30c00d16 	blt	r6,r3,100145b0 <__fixdfsi+0x5c>
1001457c:	01810cc4 	movi	r6,1075
10014580:	30cdc83a 	sub	r6,r6,r3
10014584:	01c007c4 	movi	r7,31
10014588:	10800434 	orhi	r2,r2,16
1001458c:	39800e0e 	bge	r7,r6,100145c8 <__fixdfsi+0x74>
10014590:	010104c4 	movi	r4,1043
10014594:	20c7c83a 	sub	r3,r4,r3
10014598:	10c6d83a 	srl	r3,r2,r3
1001459c:	29403fcc 	andi	r5,r5,255
100145a0:	0145c83a 	sub	r2,zero,r5
100145a4:	1884f03a 	xor	r2,r3,r2
100145a8:	1145883a 	add	r2,r2,r5
100145ac:	f800283a 	ret
100145b0:	00a00034 	movhi	r2,32768
100145b4:	10bfffc4 	addi	r2,r2,-1
100145b8:	2885883a 	add	r2,r5,r2
100145bc:	f800283a 	ret
100145c0:	0005883a 	mov	r2,zero
100145c4:	f800283a 	ret
100145c8:	18fefb44 	addi	r3,r3,-1043
100145cc:	2188d83a 	srl	r4,r4,r6
100145d0:	10c6983a 	sll	r3,r2,r3
100145d4:	20c6b03a 	or	r3,r4,r3
100145d8:	003ff006 	br	1001459c <__alt_data_end+0xf801459c>

100145dc <__floatsidf>:
100145dc:	defffd04 	addi	sp,sp,-12
100145e0:	dc400115 	stw	r17,4(sp)
100145e4:	dfc00215 	stw	ra,8(sp)
100145e8:	dc000015 	stw	r16,0(sp)
100145ec:	2023883a 	mov	r17,r4
100145f0:	20001426 	beq	r4,zero,10014644 <__floatsidf+0x68>
100145f4:	2020d7fa 	srli	r16,r4,31
100145f8:	80000126 	beq	r16,zero,10014600 <__floatsidf+0x24>
100145fc:	0123c83a 	sub	r17,zero,r4
10014600:	8809883a 	mov	r4,r17
10014604:	0008ef40 	call	10008ef4 <__clzsi2>
10014608:	01410784 	movi	r5,1054
1001460c:	00c00284 	movi	r3,10
10014610:	288bc83a 	sub	r5,r5,r2
10014614:	18801c16 	blt	r3,r2,10014688 <__floatsidf+0xac>
10014618:	00c002c4 	movi	r3,11
1001461c:	1887c83a 	sub	r3,r3,r2
10014620:	88c8d83a 	srl	r4,r17,r3
10014624:	00c00434 	movhi	r3,16
10014628:	18ffffc4 	addi	r3,r3,-1
1001462c:	10800544 	addi	r2,r2,21
10014630:	20c8703a 	and	r4,r4,r3
10014634:	8884983a 	sll	r2,r17,r2
10014638:	28c1ffcc 	andi	r3,r5,2047
1001463c:	800d883a 	mov	r6,r16
10014640:	00000406 	br	10014654 <__floatsidf+0x78>
10014644:	000d883a 	mov	r6,zero
10014648:	0007883a 	mov	r3,zero
1001464c:	0009883a 	mov	r4,zero
10014650:	0005883a 	mov	r2,zero
10014654:	180a953a 	slli	r5,r3,20
10014658:	31803fcc 	andi	r6,r6,255
1001465c:	00c00434 	movhi	r3,16
10014660:	300c97fa 	slli	r6,r6,31
10014664:	18ffffc4 	addi	r3,r3,-1
10014668:	20c6703a 	and	r3,r4,r3
1001466c:	1946b03a 	or	r3,r3,r5
10014670:	1986b03a 	or	r3,r3,r6
10014674:	dfc00217 	ldw	ra,8(sp)
10014678:	dc400117 	ldw	r17,4(sp)
1001467c:	dc000017 	ldw	r16,0(sp)
10014680:	dec00304 	addi	sp,sp,12
10014684:	f800283a 	ret
10014688:	10fffd44 	addi	r3,r2,-11
1001468c:	88c8983a 	sll	r4,r17,r3
10014690:	00800434 	movhi	r2,16
10014694:	10bfffc4 	addi	r2,r2,-1
10014698:	2088703a 	and	r4,r4,r2
1001469c:	28c1ffcc 	andi	r3,r5,2047
100146a0:	800d883a 	mov	r6,r16
100146a4:	0005883a 	mov	r2,zero
100146a8:	003fea06 	br	10014654 <__alt_data_end+0xf8014654>

100146ac <__floatunsidf>:
100146ac:	defffe04 	addi	sp,sp,-8
100146b0:	dc000015 	stw	r16,0(sp)
100146b4:	dfc00115 	stw	ra,4(sp)
100146b8:	2021883a 	mov	r16,r4
100146bc:	20001026 	beq	r4,zero,10014700 <__floatunsidf+0x54>
100146c0:	0008ef40 	call	10008ef4 <__clzsi2>
100146c4:	01410784 	movi	r5,1054
100146c8:	100d883a 	mov	r6,r2
100146cc:	288bc83a 	sub	r5,r5,r2
100146d0:	00800284 	movi	r2,10
100146d4:	11801616 	blt	r2,r6,10014730 <__floatunsidf+0x84>
100146d8:	008002c4 	movi	r2,11
100146dc:	1185c83a 	sub	r2,r2,r6
100146e0:	8084d83a 	srl	r2,r16,r2
100146e4:	00c00434 	movhi	r3,16
100146e8:	31c00544 	addi	r7,r6,21
100146ec:	18ffffc4 	addi	r3,r3,-1
100146f0:	81e0983a 	sll	r16,r16,r7
100146f4:	10cc703a 	and	r6,r2,r3
100146f8:	2941ffcc 	andi	r5,r5,2047
100146fc:	00000206 	br	10014708 <__floatunsidf+0x5c>
10014700:	000b883a 	mov	r5,zero
10014704:	000d883a 	mov	r6,zero
10014708:	280a953a 	slli	r5,r5,20
1001470c:	00c00434 	movhi	r3,16
10014710:	18ffffc4 	addi	r3,r3,-1
10014714:	30c6703a 	and	r3,r6,r3
10014718:	8005883a 	mov	r2,r16
1001471c:	1946b03a 	or	r3,r3,r5
10014720:	dfc00117 	ldw	ra,4(sp)
10014724:	dc000017 	ldw	r16,0(sp)
10014728:	dec00204 	addi	sp,sp,8
1001472c:	f800283a 	ret
10014730:	31bffd44 	addi	r6,r6,-11
10014734:	818c983a 	sll	r6,r16,r6
10014738:	00800434 	movhi	r2,16
1001473c:	10bfffc4 	addi	r2,r2,-1
10014740:	2941ffcc 	andi	r5,r5,2047
10014744:	0021883a 	mov	r16,zero
10014748:	308c703a 	and	r6,r6,r2
1001474c:	003fee06 	br	10014708 <__alt_data_end+0xf8014708>

10014750 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10014750:	defffe04 	addi	sp,sp,-8
10014754:	dfc00115 	stw	ra,4(sp)
10014758:	df000015 	stw	fp,0(sp)
1001475c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10014760:	008400b4 	movhi	r2,4098
10014764:	10abd504 	addi	r2,r2,-20652
10014768:	10800017 	ldw	r2,0(r2)
1001476c:	10000526 	beq	r2,zero,10014784 <alt_get_errno+0x34>
10014770:	008400b4 	movhi	r2,4098
10014774:	10abd504 	addi	r2,r2,-20652
10014778:	10800017 	ldw	r2,0(r2)
1001477c:	103ee83a 	callr	r2
10014780:	00000206 	br	1001478c <alt_get_errno+0x3c>
10014784:	008400b4 	movhi	r2,4098
10014788:	10b29c04 	addi	r2,r2,-13712
}
1001478c:	e037883a 	mov	sp,fp
10014790:	dfc00117 	ldw	ra,4(sp)
10014794:	df000017 	ldw	fp,0(sp)
10014798:	dec00204 	addi	sp,sp,8
1001479c:	f800283a 	ret

100147a0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
100147a0:	defffb04 	addi	sp,sp,-20
100147a4:	dfc00415 	stw	ra,16(sp)
100147a8:	df000315 	stw	fp,12(sp)
100147ac:	df000304 	addi	fp,sp,12
100147b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
100147b4:	e0bfff17 	ldw	r2,-4(fp)
100147b8:	10000816 	blt	r2,zero,100147dc <close+0x3c>
100147bc:	e13fff17 	ldw	r4,-4(fp)
100147c0:	01400304 	movi	r5,12
100147c4:	0006df00 	call	10006df0 <__mulsi3>
100147c8:	1007883a 	mov	r3,r2
100147cc:	008400b4 	movhi	r2,4098
100147d0:	10a75204 	addi	r2,r2,-25272
100147d4:	1885883a 	add	r2,r3,r2
100147d8:	00000106 	br	100147e0 <close+0x40>
100147dc:	0005883a 	mov	r2,zero
100147e0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
100147e4:	e0bffd17 	ldw	r2,-12(fp)
100147e8:	10001926 	beq	r2,zero,10014850 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
100147ec:	e0bffd17 	ldw	r2,-12(fp)
100147f0:	10800017 	ldw	r2,0(r2)
100147f4:	10800417 	ldw	r2,16(r2)
100147f8:	10000626 	beq	r2,zero,10014814 <close+0x74>
100147fc:	e0bffd17 	ldw	r2,-12(fp)
10014800:	10800017 	ldw	r2,0(r2)
10014804:	10800417 	ldw	r2,16(r2)
10014808:	e13ffd17 	ldw	r4,-12(fp)
1001480c:	103ee83a 	callr	r2
10014810:	00000106 	br	10014818 <close+0x78>
10014814:	0005883a 	mov	r2,zero
10014818:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1001481c:	e13fff17 	ldw	r4,-4(fp)
10014820:	0014ed40 	call	10014ed4 <alt_release_fd>
    if (rval < 0)
10014824:	e0bffe17 	ldw	r2,-8(fp)
10014828:	1000070e 	bge	r2,zero,10014848 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1001482c:	00147500 	call	10014750 <alt_get_errno>
10014830:	1007883a 	mov	r3,r2
10014834:	e0bffe17 	ldw	r2,-8(fp)
10014838:	0085c83a 	sub	r2,zero,r2
1001483c:	18800015 	stw	r2,0(r3)
      return -1;
10014840:	00bfffc4 	movi	r2,-1
10014844:	00000706 	br	10014864 <close+0xc4>
    }
    return 0;
10014848:	0005883a 	mov	r2,zero
1001484c:	00000506 	br	10014864 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10014850:	00147500 	call	10014750 <alt_get_errno>
10014854:	1007883a 	mov	r3,r2
10014858:	00801444 	movi	r2,81
1001485c:	18800015 	stw	r2,0(r3)
    return -1;
10014860:	00bfffc4 	movi	r2,-1
  }
}
10014864:	e037883a 	mov	sp,fp
10014868:	dfc00117 	ldw	ra,4(sp)
1001486c:	df000017 	ldw	fp,0(sp)
10014870:	dec00204 	addi	sp,sp,8
10014874:	f800283a 	ret

10014878 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10014878:	defffc04 	addi	sp,sp,-16
1001487c:	df000315 	stw	fp,12(sp)
10014880:	df000304 	addi	fp,sp,12
10014884:	e13ffd15 	stw	r4,-12(fp)
10014888:	e17ffe15 	stw	r5,-8(fp)
1001488c:	e1bfff15 	stw	r6,-4(fp)
  return len;
10014890:	e0bfff17 	ldw	r2,-4(fp)
}
10014894:	e037883a 	mov	sp,fp
10014898:	df000017 	ldw	fp,0(sp)
1001489c:	dec00104 	addi	sp,sp,4
100148a0:	f800283a 	ret

100148a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100148a4:	defffe04 	addi	sp,sp,-8
100148a8:	dfc00115 	stw	ra,4(sp)
100148ac:	df000015 	stw	fp,0(sp)
100148b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100148b4:	008400b4 	movhi	r2,4098
100148b8:	10abd504 	addi	r2,r2,-20652
100148bc:	10800017 	ldw	r2,0(r2)
100148c0:	10000526 	beq	r2,zero,100148d8 <alt_get_errno+0x34>
100148c4:	008400b4 	movhi	r2,4098
100148c8:	10abd504 	addi	r2,r2,-20652
100148cc:	10800017 	ldw	r2,0(r2)
100148d0:	103ee83a 	callr	r2
100148d4:	00000206 	br	100148e0 <alt_get_errno+0x3c>
100148d8:	008400b4 	movhi	r2,4098
100148dc:	10b29c04 	addi	r2,r2,-13712
}
100148e0:	e037883a 	mov	sp,fp
100148e4:	dfc00117 	ldw	ra,4(sp)
100148e8:	df000017 	ldw	fp,0(sp)
100148ec:	dec00204 	addi	sp,sp,8
100148f0:	f800283a 	ret

100148f4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
100148f4:	defffb04 	addi	sp,sp,-20
100148f8:	dfc00415 	stw	ra,16(sp)
100148fc:	df000315 	stw	fp,12(sp)
10014900:	df000304 	addi	fp,sp,12
10014904:	e13ffe15 	stw	r4,-8(fp)
10014908:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001490c:	e0bffe17 	ldw	r2,-8(fp)
10014910:	10000816 	blt	r2,zero,10014934 <fstat+0x40>
10014914:	e13ffe17 	ldw	r4,-8(fp)
10014918:	01400304 	movi	r5,12
1001491c:	0006df00 	call	10006df0 <__mulsi3>
10014920:	1007883a 	mov	r3,r2
10014924:	008400b4 	movhi	r2,4098
10014928:	10a75204 	addi	r2,r2,-25272
1001492c:	1885883a 	add	r2,r3,r2
10014930:	00000106 	br	10014938 <fstat+0x44>
10014934:	0005883a 	mov	r2,zero
10014938:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1001493c:	e0bffd17 	ldw	r2,-12(fp)
10014940:	10001026 	beq	r2,zero,10014984 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10014944:	e0bffd17 	ldw	r2,-12(fp)
10014948:	10800017 	ldw	r2,0(r2)
1001494c:	10800817 	ldw	r2,32(r2)
10014950:	10000726 	beq	r2,zero,10014970 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10014954:	e0bffd17 	ldw	r2,-12(fp)
10014958:	10800017 	ldw	r2,0(r2)
1001495c:	10800817 	ldw	r2,32(r2)
10014960:	e13ffd17 	ldw	r4,-12(fp)
10014964:	e17fff17 	ldw	r5,-4(fp)
10014968:	103ee83a 	callr	r2
1001496c:	00000a06 	br	10014998 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10014970:	e0bfff17 	ldw	r2,-4(fp)
10014974:	00c80004 	movi	r3,8192
10014978:	10c00115 	stw	r3,4(r2)
      return 0;
1001497c:	0005883a 	mov	r2,zero
10014980:	00000506 	br	10014998 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10014984:	00148a40 	call	100148a4 <alt_get_errno>
10014988:	1007883a 	mov	r3,r2
1001498c:	00801444 	movi	r2,81
10014990:	18800015 	stw	r2,0(r3)
    return -1;
10014994:	00bfffc4 	movi	r2,-1
  }
}
10014998:	e037883a 	mov	sp,fp
1001499c:	dfc00117 	ldw	ra,4(sp)
100149a0:	df000017 	ldw	fp,0(sp)
100149a4:	dec00204 	addi	sp,sp,8
100149a8:	f800283a 	ret

100149ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100149ac:	defffe04 	addi	sp,sp,-8
100149b0:	dfc00115 	stw	ra,4(sp)
100149b4:	df000015 	stw	fp,0(sp)
100149b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100149bc:	008400b4 	movhi	r2,4098
100149c0:	10abd504 	addi	r2,r2,-20652
100149c4:	10800017 	ldw	r2,0(r2)
100149c8:	10000526 	beq	r2,zero,100149e0 <alt_get_errno+0x34>
100149cc:	008400b4 	movhi	r2,4098
100149d0:	10abd504 	addi	r2,r2,-20652
100149d4:	10800017 	ldw	r2,0(r2)
100149d8:	103ee83a 	callr	r2
100149dc:	00000206 	br	100149e8 <alt_get_errno+0x3c>
100149e0:	008400b4 	movhi	r2,4098
100149e4:	10b29c04 	addi	r2,r2,-13712
}
100149e8:	e037883a 	mov	sp,fp
100149ec:	dfc00117 	ldw	ra,4(sp)
100149f0:	df000017 	ldw	fp,0(sp)
100149f4:	dec00204 	addi	sp,sp,8
100149f8:	f800283a 	ret

100149fc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
100149fc:	deffed04 	addi	sp,sp,-76
10014a00:	dfc01215 	stw	ra,72(sp)
10014a04:	df001115 	stw	fp,68(sp)
10014a08:	df001104 	addi	fp,sp,68
10014a0c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10014a10:	e0bfff17 	ldw	r2,-4(fp)
10014a14:	10000816 	blt	r2,zero,10014a38 <isatty+0x3c>
10014a18:	e13fff17 	ldw	r4,-4(fp)
10014a1c:	01400304 	movi	r5,12
10014a20:	0006df00 	call	10006df0 <__mulsi3>
10014a24:	1007883a 	mov	r3,r2
10014a28:	008400b4 	movhi	r2,4098
10014a2c:	10a75204 	addi	r2,r2,-25272
10014a30:	1885883a 	add	r2,r3,r2
10014a34:	00000106 	br	10014a3c <isatty+0x40>
10014a38:	0005883a 	mov	r2,zero
10014a3c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10014a40:	e0bfef17 	ldw	r2,-68(fp)
10014a44:	10000e26 	beq	r2,zero,10014a80 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10014a48:	e0bfef17 	ldw	r2,-68(fp)
10014a4c:	10800017 	ldw	r2,0(r2)
10014a50:	10800817 	ldw	r2,32(r2)
10014a54:	1000021e 	bne	r2,zero,10014a60 <isatty+0x64>
    {
      return 1;
10014a58:	00800044 	movi	r2,1
10014a5c:	00000d06 	br	10014a94 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10014a60:	e0bff004 	addi	r2,fp,-64
10014a64:	e13fff17 	ldw	r4,-4(fp)
10014a68:	100b883a 	mov	r5,r2
10014a6c:	00148f40 	call	100148f4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10014a70:	e0bff117 	ldw	r2,-60(fp)
10014a74:	10880020 	cmpeqi	r2,r2,8192
10014a78:	10803fcc 	andi	r2,r2,255
10014a7c:	00000506 	br	10014a94 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10014a80:	00149ac0 	call	100149ac <alt_get_errno>
10014a84:	1007883a 	mov	r3,r2
10014a88:	00801444 	movi	r2,81
10014a8c:	18800015 	stw	r2,0(r3)
    return 0;
10014a90:	0005883a 	mov	r2,zero
  }
}
10014a94:	e037883a 	mov	sp,fp
10014a98:	dfc00117 	ldw	ra,4(sp)
10014a9c:	df000017 	ldw	fp,0(sp)
10014aa0:	dec00204 	addi	sp,sp,8
10014aa4:	f800283a 	ret

10014aa8 <alt_load_section>:
10014aa8:	defffc04 	addi	sp,sp,-16
10014aac:	df000315 	stw	fp,12(sp)
10014ab0:	df000304 	addi	fp,sp,12
10014ab4:	e13ffd15 	stw	r4,-12(fp)
10014ab8:	e17ffe15 	stw	r5,-8(fp)
10014abc:	e1bfff15 	stw	r6,-4(fp)
10014ac0:	e0fffe17 	ldw	r3,-8(fp)
10014ac4:	e0bffd17 	ldw	r2,-12(fp)
10014ac8:	18800c26 	beq	r3,r2,10014afc <alt_load_section+0x54>
10014acc:	00000806 	br	10014af0 <alt_load_section+0x48>
10014ad0:	e0bffe17 	ldw	r2,-8(fp)
10014ad4:	10c00104 	addi	r3,r2,4
10014ad8:	e0fffe15 	stw	r3,-8(fp)
10014adc:	e0fffd17 	ldw	r3,-12(fp)
10014ae0:	19000104 	addi	r4,r3,4
10014ae4:	e13ffd15 	stw	r4,-12(fp)
10014ae8:	18c00017 	ldw	r3,0(r3)
10014aec:	10c00015 	stw	r3,0(r2)
10014af0:	e0fffe17 	ldw	r3,-8(fp)
10014af4:	e0bfff17 	ldw	r2,-4(fp)
10014af8:	18bff51e 	bne	r3,r2,10014ad0 <__alt_data_end+0xf8014ad0>
10014afc:	0001883a 	nop
10014b00:	e037883a 	mov	sp,fp
10014b04:	df000017 	ldw	fp,0(sp)
10014b08:	dec00104 	addi	sp,sp,4
10014b0c:	f800283a 	ret

10014b10 <alt_load>:
10014b10:	defffe04 	addi	sp,sp,-8
10014b14:	dfc00115 	stw	ra,4(sp)
10014b18:	df000015 	stw	fp,0(sp)
10014b1c:	d839883a 	mov	fp,sp
10014b20:	018400b4 	movhi	r6,4098
10014b24:	31abda04 	addi	r6,r6,-20632
10014b28:	014400b4 	movhi	r5,4098
10014b2c:	29651f04 	addi	r5,r5,-27524
10014b30:	010400b4 	movhi	r4,4098
10014b34:	212bda04 	addi	r4,r4,-20632
10014b38:	0014aa80 	call	10014aa8 <alt_load_section>
10014b3c:	01840034 	movhi	r6,4096
10014b40:	31806f04 	addi	r6,r6,444
10014b44:	01440034 	movhi	r5,4096
10014b48:	29400804 	addi	r5,r5,32
10014b4c:	01040034 	movhi	r4,4096
10014b50:	21000804 	addi	r4,r4,32
10014b54:	0014aa80 	call	10014aa8 <alt_load_section>
10014b58:	018400b4 	movhi	r6,4098
10014b5c:	31a51f04 	addi	r6,r6,-27524
10014b60:	01440074 	movhi	r5,4097
10014b64:	295beb04 	addi	r5,r5,28588
10014b68:	01040074 	movhi	r4,4097
10014b6c:	211beb04 	addi	r4,r4,28588
10014b70:	0014aa80 	call	10014aa8 <alt_load_section>
10014b74:	0015f1c0 	call	10015f1c <alt_dcache_flush_all>
10014b78:	00160ec0 	call	100160ec <alt_icache_flush_all>
10014b7c:	0001883a 	nop
10014b80:	e037883a 	mov	sp,fp
10014b84:	dfc00117 	ldw	ra,4(sp)
10014b88:	df000017 	ldw	fp,0(sp)
10014b8c:	dec00204 	addi	sp,sp,8
10014b90:	f800283a 	ret

10014b94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10014b94:	defffe04 	addi	sp,sp,-8
10014b98:	dfc00115 	stw	ra,4(sp)
10014b9c:	df000015 	stw	fp,0(sp)
10014ba0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10014ba4:	008400b4 	movhi	r2,4098
10014ba8:	10abd504 	addi	r2,r2,-20652
10014bac:	10800017 	ldw	r2,0(r2)
10014bb0:	10000526 	beq	r2,zero,10014bc8 <alt_get_errno+0x34>
10014bb4:	008400b4 	movhi	r2,4098
10014bb8:	10abd504 	addi	r2,r2,-20652
10014bbc:	10800017 	ldw	r2,0(r2)
10014bc0:	103ee83a 	callr	r2
10014bc4:	00000206 	br	10014bd0 <alt_get_errno+0x3c>
10014bc8:	008400b4 	movhi	r2,4098
10014bcc:	10b29c04 	addi	r2,r2,-13712
}
10014bd0:	e037883a 	mov	sp,fp
10014bd4:	dfc00117 	ldw	ra,4(sp)
10014bd8:	df000017 	ldw	fp,0(sp)
10014bdc:	dec00204 	addi	sp,sp,8
10014be0:	f800283a 	ret

10014be4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10014be4:	defff904 	addi	sp,sp,-28
10014be8:	dfc00615 	stw	ra,24(sp)
10014bec:	df000515 	stw	fp,20(sp)
10014bf0:	df000504 	addi	fp,sp,20
10014bf4:	e13ffd15 	stw	r4,-12(fp)
10014bf8:	e17ffe15 	stw	r5,-8(fp)
10014bfc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10014c00:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10014c04:	e0bffd17 	ldw	r2,-12(fp)
10014c08:	10000816 	blt	r2,zero,10014c2c <lseek+0x48>
10014c0c:	e13ffd17 	ldw	r4,-12(fp)
10014c10:	01400304 	movi	r5,12
10014c14:	0006df00 	call	10006df0 <__mulsi3>
10014c18:	1007883a 	mov	r3,r2
10014c1c:	008400b4 	movhi	r2,4098
10014c20:	10a75204 	addi	r2,r2,-25272
10014c24:	1885883a 	add	r2,r3,r2
10014c28:	00000106 	br	10014c30 <lseek+0x4c>
10014c2c:	0005883a 	mov	r2,zero
10014c30:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10014c34:	e0bffc17 	ldw	r2,-16(fp)
10014c38:	10001026 	beq	r2,zero,10014c7c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10014c3c:	e0bffc17 	ldw	r2,-16(fp)
10014c40:	10800017 	ldw	r2,0(r2)
10014c44:	10800717 	ldw	r2,28(r2)
10014c48:	10000926 	beq	r2,zero,10014c70 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10014c4c:	e0bffc17 	ldw	r2,-16(fp)
10014c50:	10800017 	ldw	r2,0(r2)
10014c54:	10800717 	ldw	r2,28(r2)
10014c58:	e13ffc17 	ldw	r4,-16(fp)
10014c5c:	e17ffe17 	ldw	r5,-8(fp)
10014c60:	e1bfff17 	ldw	r6,-4(fp)
10014c64:	103ee83a 	callr	r2
10014c68:	e0bffb15 	stw	r2,-20(fp)
10014c6c:	00000506 	br	10014c84 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10014c70:	00bfde84 	movi	r2,-134
10014c74:	e0bffb15 	stw	r2,-20(fp)
10014c78:	00000206 	br	10014c84 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10014c7c:	00bfebc4 	movi	r2,-81
10014c80:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10014c84:	e0bffb17 	ldw	r2,-20(fp)
10014c88:	1000070e 	bge	r2,zero,10014ca8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10014c8c:	0014b940 	call	10014b94 <alt_get_errno>
10014c90:	1007883a 	mov	r3,r2
10014c94:	e0bffb17 	ldw	r2,-20(fp)
10014c98:	0085c83a 	sub	r2,zero,r2
10014c9c:	18800015 	stw	r2,0(r3)
    rc = -1;
10014ca0:	00bfffc4 	movi	r2,-1
10014ca4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10014ca8:	e0bffb17 	ldw	r2,-20(fp)
}
10014cac:	e037883a 	mov	sp,fp
10014cb0:	dfc00117 	ldw	ra,4(sp)
10014cb4:	df000017 	ldw	fp,0(sp)
10014cb8:	dec00204 	addi	sp,sp,8
10014cbc:	f800283a 	ret

10014cc0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10014cc0:	defffd04 	addi	sp,sp,-12
10014cc4:	dfc00215 	stw	ra,8(sp)
10014cc8:	df000115 	stw	fp,4(sp)
10014ccc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10014cd0:	0009883a 	mov	r4,zero
10014cd4:	00151bc0 	call	100151bc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10014cd8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10014cdc:	00151f00 	call	100151f0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10014ce0:	010400b4 	movhi	r4,4098
10014ce4:	21251504 	addi	r4,r4,-27564
10014ce8:	014400b4 	movhi	r5,4098
10014cec:	29651504 	addi	r5,r5,-27564
10014cf0:	018400b4 	movhi	r6,4098
10014cf4:	31a51504 	addi	r6,r6,-27564
10014cf8:	00164b80 	call	100164b8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10014cfc:	001602c0 	call	1001602c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10014d00:	01040074 	movhi	r4,4097
10014d04:	21182304 	addi	r4,r4,24716
10014d08:	0016c080 	call	10016c08 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10014d0c:	d126d317 	ldw	r4,-25780(gp)
10014d10:	d0e6d417 	ldw	r3,-25776(gp)
10014d14:	d0a6d517 	ldw	r2,-25772(gp)
10014d18:	180b883a 	mov	r5,r3
10014d1c:	100d883a 	mov	r6,r2
10014d20:	00003340 	call	10000334 <main>
10014d24:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10014d28:	01000044 	movi	r4,1
10014d2c:	00147a00 	call	100147a0 <close>
  exit (result);
10014d30:	e13fff17 	ldw	r4,-4(fp)
10014d34:	0016c1c0 	call	10016c1c <exit>

10014d38 <__malloc_lock>:
10014d38:	defffe04 	addi	sp,sp,-8
10014d3c:	df000115 	stw	fp,4(sp)
10014d40:	df000104 	addi	fp,sp,4
10014d44:	e13fff15 	stw	r4,-4(fp)
10014d48:	0001883a 	nop
10014d4c:	e037883a 	mov	sp,fp
10014d50:	df000017 	ldw	fp,0(sp)
10014d54:	dec00104 	addi	sp,sp,4
10014d58:	f800283a 	ret

10014d5c <__malloc_unlock>:
10014d5c:	defffe04 	addi	sp,sp,-8
10014d60:	df000115 	stw	fp,4(sp)
10014d64:	df000104 	addi	fp,sp,4
10014d68:	e13fff15 	stw	r4,-4(fp)
10014d6c:	0001883a 	nop
10014d70:	e037883a 	mov	sp,fp
10014d74:	df000017 	ldw	fp,0(sp)
10014d78:	dec00104 	addi	sp,sp,4
10014d7c:	f800283a 	ret

10014d80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10014d80:	defffe04 	addi	sp,sp,-8
10014d84:	dfc00115 	stw	ra,4(sp)
10014d88:	df000015 	stw	fp,0(sp)
10014d8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10014d90:	008400b4 	movhi	r2,4098
10014d94:	10abd504 	addi	r2,r2,-20652
10014d98:	10800017 	ldw	r2,0(r2)
10014d9c:	10000526 	beq	r2,zero,10014db4 <alt_get_errno+0x34>
10014da0:	008400b4 	movhi	r2,4098
10014da4:	10abd504 	addi	r2,r2,-20652
10014da8:	10800017 	ldw	r2,0(r2)
10014dac:	103ee83a 	callr	r2
10014db0:	00000206 	br	10014dbc <alt_get_errno+0x3c>
10014db4:	008400b4 	movhi	r2,4098
10014db8:	10b29c04 	addi	r2,r2,-13712
}
10014dbc:	e037883a 	mov	sp,fp
10014dc0:	dfc00117 	ldw	ra,4(sp)
10014dc4:	df000017 	ldw	fp,0(sp)
10014dc8:	dec00204 	addi	sp,sp,8
10014dcc:	f800283a 	ret

10014dd0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10014dd0:	defff904 	addi	sp,sp,-28
10014dd4:	dfc00615 	stw	ra,24(sp)
10014dd8:	df000515 	stw	fp,20(sp)
10014ddc:	df000504 	addi	fp,sp,20
10014de0:	e13ffd15 	stw	r4,-12(fp)
10014de4:	e17ffe15 	stw	r5,-8(fp)
10014de8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10014dec:	e0bffd17 	ldw	r2,-12(fp)
10014df0:	10000816 	blt	r2,zero,10014e14 <read+0x44>
10014df4:	e13ffd17 	ldw	r4,-12(fp)
10014df8:	01400304 	movi	r5,12
10014dfc:	0006df00 	call	10006df0 <__mulsi3>
10014e00:	1007883a 	mov	r3,r2
10014e04:	008400b4 	movhi	r2,4098
10014e08:	10a75204 	addi	r2,r2,-25272
10014e0c:	1885883a 	add	r2,r3,r2
10014e10:	00000106 	br	10014e18 <read+0x48>
10014e14:	0005883a 	mov	r2,zero
10014e18:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10014e1c:	e0bffb17 	ldw	r2,-20(fp)
10014e20:	10002226 	beq	r2,zero,10014eac <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10014e24:	e0bffb17 	ldw	r2,-20(fp)
10014e28:	10800217 	ldw	r2,8(r2)
10014e2c:	108000cc 	andi	r2,r2,3
10014e30:	10800060 	cmpeqi	r2,r2,1
10014e34:	1000181e 	bne	r2,zero,10014e98 <read+0xc8>
        (fd->dev->read))
10014e38:	e0bffb17 	ldw	r2,-20(fp)
10014e3c:	10800017 	ldw	r2,0(r2)
10014e40:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10014e44:	10001426 	beq	r2,zero,10014e98 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10014e48:	e0bffb17 	ldw	r2,-20(fp)
10014e4c:	10800017 	ldw	r2,0(r2)
10014e50:	10800517 	ldw	r2,20(r2)
10014e54:	e0ffff17 	ldw	r3,-4(fp)
10014e58:	e13ffb17 	ldw	r4,-20(fp)
10014e5c:	e17ffe17 	ldw	r5,-8(fp)
10014e60:	180d883a 	mov	r6,r3
10014e64:	103ee83a 	callr	r2
10014e68:	e0bffc15 	stw	r2,-16(fp)
10014e6c:	e0bffc17 	ldw	r2,-16(fp)
10014e70:	1000070e 	bge	r2,zero,10014e90 <read+0xc0>
        {
          ALT_ERRNO = -rval;
10014e74:	0014d800 	call	10014d80 <alt_get_errno>
10014e78:	1007883a 	mov	r3,r2
10014e7c:	e0bffc17 	ldw	r2,-16(fp)
10014e80:	0085c83a 	sub	r2,zero,r2
10014e84:	18800015 	stw	r2,0(r3)
          return -1;
10014e88:	00bfffc4 	movi	r2,-1
10014e8c:	00000c06 	br	10014ec0 <read+0xf0>
        }
        return rval;
10014e90:	e0bffc17 	ldw	r2,-16(fp)
10014e94:	00000a06 	br	10014ec0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10014e98:	0014d800 	call	10014d80 <alt_get_errno>
10014e9c:	1007883a 	mov	r3,r2
10014ea0:	00800344 	movi	r2,13
10014ea4:	18800015 	stw	r2,0(r3)
10014ea8:	00000406 	br	10014ebc <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10014eac:	0014d800 	call	10014d80 <alt_get_errno>
10014eb0:	1007883a 	mov	r3,r2
10014eb4:	00801444 	movi	r2,81
10014eb8:	18800015 	stw	r2,0(r3)
  }
  return -1;
10014ebc:	00bfffc4 	movi	r2,-1
}
10014ec0:	e037883a 	mov	sp,fp
10014ec4:	dfc00117 	ldw	ra,4(sp)
10014ec8:	df000017 	ldw	fp,0(sp)
10014ecc:	dec00204 	addi	sp,sp,8
10014ed0:	f800283a 	ret

10014ed4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10014ed4:	defffc04 	addi	sp,sp,-16
10014ed8:	dfc00315 	stw	ra,12(sp)
10014edc:	df000215 	stw	fp,8(sp)
10014ee0:	dc000115 	stw	r16,4(sp)
10014ee4:	df000204 	addi	fp,sp,8
10014ee8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10014eec:	e0bffe17 	ldw	r2,-8(fp)
10014ef0:	108000d0 	cmplti	r2,r2,3
10014ef4:	1000111e 	bne	r2,zero,10014f3c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10014ef8:	040400b4 	movhi	r16,4098
10014efc:	84275204 	addi	r16,r16,-25272
10014f00:	e0bffe17 	ldw	r2,-8(fp)
10014f04:	1009883a 	mov	r4,r2
10014f08:	01400304 	movi	r5,12
10014f0c:	0006df00 	call	10006df0 <__mulsi3>
10014f10:	8085883a 	add	r2,r16,r2
10014f14:	10800204 	addi	r2,r2,8
10014f18:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10014f1c:	040400b4 	movhi	r16,4098
10014f20:	84275204 	addi	r16,r16,-25272
10014f24:	e0bffe17 	ldw	r2,-8(fp)
10014f28:	1009883a 	mov	r4,r2
10014f2c:	01400304 	movi	r5,12
10014f30:	0006df00 	call	10006df0 <__mulsi3>
10014f34:	8085883a 	add	r2,r16,r2
10014f38:	10000015 	stw	zero,0(r2)
  }
}
10014f3c:	e6ffff04 	addi	sp,fp,-4
10014f40:	dfc00217 	ldw	ra,8(sp)
10014f44:	df000117 	ldw	fp,4(sp)
10014f48:	dc000017 	ldw	r16,0(sp)
10014f4c:	dec00304 	addi	sp,sp,12
10014f50:	f800283a 	ret

10014f54 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10014f54:	defff904 	addi	sp,sp,-28
10014f58:	df000615 	stw	fp,24(sp)
10014f5c:	df000604 	addi	fp,sp,24
10014f60:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10014f64:	0005303a 	rdctl	r2,status
10014f68:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10014f6c:	e0fffc17 	ldw	r3,-16(fp)
10014f70:	00bfff84 	movi	r2,-2
10014f74:	1884703a 	and	r2,r3,r2
10014f78:	1001703a 	wrctl	status,r2
  
  return context;
10014f7c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10014f80:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10014f84:	d0a00c17 	ldw	r2,-32720(gp)
10014f88:	10c000c4 	addi	r3,r2,3
10014f8c:	00bfff04 	movi	r2,-4
10014f90:	1884703a 	and	r2,r3,r2
10014f94:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10014f98:	d0e00c17 	ldw	r3,-32720(gp)
10014f9c:	e0bfff17 	ldw	r2,-4(fp)
10014fa0:	1887883a 	add	r3,r3,r2
10014fa4:	00860034 	movhi	r2,6144
10014fa8:	10800004 	addi	r2,r2,0
10014fac:	10c0062e 	bgeu	r2,r3,10014fc8 <sbrk+0x74>
10014fb0:	e0bffa17 	ldw	r2,-24(fp)
10014fb4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10014fb8:	e0bffd17 	ldw	r2,-12(fp)
10014fbc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10014fc0:	00bfffc4 	movi	r2,-1
10014fc4:	00000b06 	br	10014ff4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10014fc8:	d0a00c17 	ldw	r2,-32720(gp)
10014fcc:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
10014fd0:	d0e00c17 	ldw	r3,-32720(gp)
10014fd4:	e0bfff17 	ldw	r2,-4(fp)
10014fd8:	1885883a 	add	r2,r3,r2
10014fdc:	d0a00c15 	stw	r2,-32720(gp)
10014fe0:	e0bffa17 	ldw	r2,-24(fp)
10014fe4:	e0bffe15 	stw	r2,-8(fp)
10014fe8:	e0bffe17 	ldw	r2,-8(fp)
10014fec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10014ff0:	e0bffb17 	ldw	r2,-20(fp)
} 
10014ff4:	e037883a 	mov	sp,fp
10014ff8:	df000017 	ldw	fp,0(sp)
10014ffc:	dec00104 	addi	sp,sp,4
10015000:	f800283a 	ret

10015004 <usleep>:
10015004:	defffd04 	addi	sp,sp,-12
10015008:	dfc00215 	stw	ra,8(sp)
1001500c:	df000115 	stw	fp,4(sp)
10015010:	df000104 	addi	fp,sp,4
10015014:	e13fff15 	stw	r4,-4(fp)
10015018:	e13fff17 	ldw	r4,-4(fp)
1001501c:	0015dc40 	call	10015dc4 <alt_busy_sleep>
10015020:	e037883a 	mov	sp,fp
10015024:	dfc00117 	ldw	ra,4(sp)
10015028:	df000017 	ldw	fp,0(sp)
1001502c:	dec00204 	addi	sp,sp,8
10015030:	f800283a 	ret

10015034 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10015034:	defffe04 	addi	sp,sp,-8
10015038:	dfc00115 	stw	ra,4(sp)
1001503c:	df000015 	stw	fp,0(sp)
10015040:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10015044:	008400b4 	movhi	r2,4098
10015048:	10abd504 	addi	r2,r2,-20652
1001504c:	10800017 	ldw	r2,0(r2)
10015050:	10000526 	beq	r2,zero,10015068 <alt_get_errno+0x34>
10015054:	008400b4 	movhi	r2,4098
10015058:	10abd504 	addi	r2,r2,-20652
1001505c:	10800017 	ldw	r2,0(r2)
10015060:	103ee83a 	callr	r2
10015064:	00000206 	br	10015070 <alt_get_errno+0x3c>
10015068:	008400b4 	movhi	r2,4098
1001506c:	10b29c04 	addi	r2,r2,-13712
}
10015070:	e037883a 	mov	sp,fp
10015074:	dfc00117 	ldw	ra,4(sp)
10015078:	df000017 	ldw	fp,0(sp)
1001507c:	dec00204 	addi	sp,sp,8
10015080:	f800283a 	ret

10015084 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10015084:	defff904 	addi	sp,sp,-28
10015088:	dfc00615 	stw	ra,24(sp)
1001508c:	df000515 	stw	fp,20(sp)
10015090:	df000504 	addi	fp,sp,20
10015094:	e13ffd15 	stw	r4,-12(fp)
10015098:	e17ffe15 	stw	r5,-8(fp)
1001509c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100150a0:	e0bffd17 	ldw	r2,-12(fp)
100150a4:	10000816 	blt	r2,zero,100150c8 <write+0x44>
100150a8:	e13ffd17 	ldw	r4,-12(fp)
100150ac:	01400304 	movi	r5,12
100150b0:	0006df00 	call	10006df0 <__mulsi3>
100150b4:	1007883a 	mov	r3,r2
100150b8:	008400b4 	movhi	r2,4098
100150bc:	10a75204 	addi	r2,r2,-25272
100150c0:	1885883a 	add	r2,r3,r2
100150c4:	00000106 	br	100150cc <write+0x48>
100150c8:	0005883a 	mov	r2,zero
100150cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
100150d0:	e0bffb17 	ldw	r2,-20(fp)
100150d4:	10002126 	beq	r2,zero,1001515c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
100150d8:	e0bffb17 	ldw	r2,-20(fp)
100150dc:	10800217 	ldw	r2,8(r2)
100150e0:	108000cc 	andi	r2,r2,3
100150e4:	10001826 	beq	r2,zero,10015148 <write+0xc4>
100150e8:	e0bffb17 	ldw	r2,-20(fp)
100150ec:	10800017 	ldw	r2,0(r2)
100150f0:	10800617 	ldw	r2,24(r2)
100150f4:	10001426 	beq	r2,zero,10015148 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
100150f8:	e0bffb17 	ldw	r2,-20(fp)
100150fc:	10800017 	ldw	r2,0(r2)
10015100:	10800617 	ldw	r2,24(r2)
10015104:	e0ffff17 	ldw	r3,-4(fp)
10015108:	e13ffb17 	ldw	r4,-20(fp)
1001510c:	e17ffe17 	ldw	r5,-8(fp)
10015110:	180d883a 	mov	r6,r3
10015114:	103ee83a 	callr	r2
10015118:	e0bffc15 	stw	r2,-16(fp)
1001511c:	e0bffc17 	ldw	r2,-16(fp)
10015120:	1000070e 	bge	r2,zero,10015140 <write+0xbc>
      {
        ALT_ERRNO = -rval;
10015124:	00150340 	call	10015034 <alt_get_errno>
10015128:	1007883a 	mov	r3,r2
1001512c:	e0bffc17 	ldw	r2,-16(fp)
10015130:	0085c83a 	sub	r2,zero,r2
10015134:	18800015 	stw	r2,0(r3)
        return -1;
10015138:	00bfffc4 	movi	r2,-1
1001513c:	00000c06 	br	10015170 <write+0xec>
      }
      return rval;
10015140:	e0bffc17 	ldw	r2,-16(fp)
10015144:	00000a06 	br	10015170 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10015148:	00150340 	call	10015034 <alt_get_errno>
1001514c:	1007883a 	mov	r3,r2
10015150:	00800344 	movi	r2,13
10015154:	18800015 	stw	r2,0(r3)
10015158:	00000406 	br	1001516c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1001515c:	00150340 	call	10015034 <alt_get_errno>
10015160:	1007883a 	mov	r3,r2
10015164:	00801444 	movi	r2,81
10015168:	18800015 	stw	r2,0(r3)
  }
  return -1;
1001516c:	00bfffc4 	movi	r2,-1
}
10015170:	e037883a 	mov	sp,fp
10015174:	dfc00117 	ldw	ra,4(sp)
10015178:	df000017 	ldw	fp,0(sp)
1001517c:	dec00204 	addi	sp,sp,8
10015180:	f800283a 	ret

10015184 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10015184:	defffd04 	addi	sp,sp,-12
10015188:	dfc00215 	stw	ra,8(sp)
1001518c:	df000115 	stw	fp,4(sp)
10015190:	df000104 	addi	fp,sp,4
10015194:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10015198:	e13fff17 	ldw	r4,-4(fp)
1001519c:	014400b4 	movhi	r5,4098
100151a0:	296bd204 	addi	r5,r5,-20664
100151a4:	0015f880 	call	10015f88 <alt_dev_llist_insert>
}
100151a8:	e037883a 	mov	sp,fp
100151ac:	dfc00117 	ldw	ra,4(sp)
100151b0:	df000017 	ldw	fp,0(sp)
100151b4:	dec00204 	addi	sp,sp,8
100151b8:	f800283a 	ret

100151bc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
100151bc:	defffd04 	addi	sp,sp,-12
100151c0:	dfc00215 	stw	ra,8(sp)
100151c4:	df000115 	stw	fp,4(sp)
100151c8:	df000104 	addi	fp,sp,4
100151cc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
100151d0:	00169700 	call	10016970 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
100151d4:	00800044 	movi	r2,1
100151d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
100151dc:	e037883a 	mov	sp,fp
100151e0:	dfc00117 	ldw	ra,4(sp)
100151e4:	df000017 	ldw	fp,0(sp)
100151e8:	dec00204 	addi	sp,sp,8
100151ec:	f800283a 	ret

100151f0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
100151f0:	defffe04 	addi	sp,sp,-8
100151f4:	dfc00115 	stw	ra,4(sp)
100151f8:	df000015 	stw	fp,0(sp)
100151fc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10015200:	010400b4 	movhi	r4,4098
10015204:	2127bc04 	addi	r4,r4,-24848
10015208:	000b883a 	mov	r5,zero
1001520c:	01800144 	movi	r6,5
10015210:	001539c0 	call	1001539c <altera_avalon_jtag_uart_init>
10015214:	010400b4 	movhi	r4,4098
10015218:	2127b204 	addi	r4,r4,-24888
1001521c:	00151840 	call	10015184 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10015220:	0001883a 	nop
}
10015224:	e037883a 	mov	sp,fp
10015228:	dfc00117 	ldw	ra,4(sp)
1001522c:	df000017 	ldw	fp,0(sp)
10015230:	dec00204 	addi	sp,sp,8
10015234:	f800283a 	ret

10015238 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10015238:	defffa04 	addi	sp,sp,-24
1001523c:	dfc00515 	stw	ra,20(sp)
10015240:	df000415 	stw	fp,16(sp)
10015244:	df000404 	addi	fp,sp,16
10015248:	e13ffd15 	stw	r4,-12(fp)
1001524c:	e17ffe15 	stw	r5,-8(fp)
10015250:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10015254:	e0bffd17 	ldw	r2,-12(fp)
10015258:	10800017 	ldw	r2,0(r2)
1001525c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10015260:	e0bffc17 	ldw	r2,-16(fp)
10015264:	10c00a04 	addi	r3,r2,40
10015268:	e0bffd17 	ldw	r2,-12(fp)
1001526c:	10800217 	ldw	r2,8(r2)
10015270:	1809883a 	mov	r4,r3
10015274:	e17ffe17 	ldw	r5,-8(fp)
10015278:	e1bfff17 	ldw	r6,-4(fp)
1001527c:	100f883a 	mov	r7,r2
10015280:	00158600 	call	10015860 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10015284:	e037883a 	mov	sp,fp
10015288:	dfc00117 	ldw	ra,4(sp)
1001528c:	df000017 	ldw	fp,0(sp)
10015290:	dec00204 	addi	sp,sp,8
10015294:	f800283a 	ret

10015298 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10015298:	defffa04 	addi	sp,sp,-24
1001529c:	dfc00515 	stw	ra,20(sp)
100152a0:	df000415 	stw	fp,16(sp)
100152a4:	df000404 	addi	fp,sp,16
100152a8:	e13ffd15 	stw	r4,-12(fp)
100152ac:	e17ffe15 	stw	r5,-8(fp)
100152b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100152b4:	e0bffd17 	ldw	r2,-12(fp)
100152b8:	10800017 	ldw	r2,0(r2)
100152bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
100152c0:	e0bffc17 	ldw	r2,-16(fp)
100152c4:	10c00a04 	addi	r3,r2,40
100152c8:	e0bffd17 	ldw	r2,-12(fp)
100152cc:	10800217 	ldw	r2,8(r2)
100152d0:	1809883a 	mov	r4,r3
100152d4:	e17ffe17 	ldw	r5,-8(fp)
100152d8:	e1bfff17 	ldw	r6,-4(fp)
100152dc:	100f883a 	mov	r7,r2
100152e0:	0015a6c0 	call	10015a6c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
100152e4:	e037883a 	mov	sp,fp
100152e8:	dfc00117 	ldw	ra,4(sp)
100152ec:	df000017 	ldw	fp,0(sp)
100152f0:	dec00204 	addi	sp,sp,8
100152f4:	f800283a 	ret

100152f8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
100152f8:	defffc04 	addi	sp,sp,-16
100152fc:	dfc00315 	stw	ra,12(sp)
10015300:	df000215 	stw	fp,8(sp)
10015304:	df000204 	addi	fp,sp,8
10015308:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1001530c:	e0bfff17 	ldw	r2,-4(fp)
10015310:	10800017 	ldw	r2,0(r2)
10015314:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10015318:	e0bffe17 	ldw	r2,-8(fp)
1001531c:	10c00a04 	addi	r3,r2,40
10015320:	e0bfff17 	ldw	r2,-4(fp)
10015324:	10800217 	ldw	r2,8(r2)
10015328:	1809883a 	mov	r4,r3
1001532c:	100b883a 	mov	r5,r2
10015330:	001570c0 	call	1001570c <altera_avalon_jtag_uart_close>
}
10015334:	e037883a 	mov	sp,fp
10015338:	dfc00117 	ldw	ra,4(sp)
1001533c:	df000017 	ldw	fp,0(sp)
10015340:	dec00204 	addi	sp,sp,8
10015344:	f800283a 	ret

10015348 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10015348:	defffa04 	addi	sp,sp,-24
1001534c:	dfc00515 	stw	ra,20(sp)
10015350:	df000415 	stw	fp,16(sp)
10015354:	df000404 	addi	fp,sp,16
10015358:	e13ffd15 	stw	r4,-12(fp)
1001535c:	e17ffe15 	stw	r5,-8(fp)
10015360:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10015364:	e0bffd17 	ldw	r2,-12(fp)
10015368:	10800017 	ldw	r2,0(r2)
1001536c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10015370:	e0bffc17 	ldw	r2,-16(fp)
10015374:	10800a04 	addi	r2,r2,40
10015378:	1009883a 	mov	r4,r2
1001537c:	e17ffe17 	ldw	r5,-8(fp)
10015380:	e1bfff17 	ldw	r6,-4(fp)
10015384:	00157740 	call	10015774 <altera_avalon_jtag_uart_ioctl>
}
10015388:	e037883a 	mov	sp,fp
1001538c:	dfc00117 	ldw	ra,4(sp)
10015390:	df000017 	ldw	fp,0(sp)
10015394:	dec00204 	addi	sp,sp,8
10015398:	f800283a 	ret

1001539c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1001539c:	defffa04 	addi	sp,sp,-24
100153a0:	dfc00515 	stw	ra,20(sp)
100153a4:	df000415 	stw	fp,16(sp)
100153a8:	df000404 	addi	fp,sp,16
100153ac:	e13ffd15 	stw	r4,-12(fp)
100153b0:	e17ffe15 	stw	r5,-8(fp)
100153b4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100153b8:	e0bffd17 	ldw	r2,-12(fp)
100153bc:	00c00044 	movi	r3,1
100153c0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
100153c4:	e0bffd17 	ldw	r2,-12(fp)
100153c8:	10800017 	ldw	r2,0(r2)
100153cc:	10800104 	addi	r2,r2,4
100153d0:	1007883a 	mov	r3,r2
100153d4:	e0bffd17 	ldw	r2,-12(fp)
100153d8:	10800817 	ldw	r2,32(r2)
100153dc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
100153e0:	e0fffe17 	ldw	r3,-8(fp)
100153e4:	e0bfff17 	ldw	r2,-4(fp)
100153e8:	d8000015 	stw	zero,0(sp)
100153ec:	1809883a 	mov	r4,r3
100153f0:	100b883a 	mov	r5,r2
100153f4:	01840074 	movhi	r6,4097
100153f8:	31951804 	addi	r6,r6,21600
100153fc:	e1fffd17 	ldw	r7,-12(fp)
10015400:	00161080 	call	10016108 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10015404:	e0bffd17 	ldw	r2,-12(fp)
10015408:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1001540c:	e0bffd17 	ldw	r2,-12(fp)
10015410:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10015414:	008400b4 	movhi	r2,4098
10015418:	10b2a104 	addi	r2,r2,-13692
1001541c:	10800017 	ldw	r2,0(r2)
10015420:	1809883a 	mov	r4,r3
10015424:	100b883a 	mov	r5,r2
10015428:	01840074 	movhi	r6,4097
1001542c:	31959904 	addi	r6,r6,22116
10015430:	e1fffd17 	ldw	r7,-12(fp)
10015434:	0015c840 	call	10015c84 <alt_alarm_start>
10015438:	1000040e 	bge	r2,zero,1001544c <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1001543c:	e0fffd17 	ldw	r3,-12(fp)
10015440:	00a00034 	movhi	r2,32768
10015444:	10bfffc4 	addi	r2,r2,-1
10015448:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1001544c:	e037883a 	mov	sp,fp
10015450:	dfc00117 	ldw	ra,4(sp)
10015454:	df000017 	ldw	fp,0(sp)
10015458:	dec00204 	addi	sp,sp,8
1001545c:	f800283a 	ret

10015460 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10015460:	defff804 	addi	sp,sp,-32
10015464:	df000715 	stw	fp,28(sp)
10015468:	df000704 	addi	fp,sp,28
1001546c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10015470:	e0bfff17 	ldw	r2,-4(fp)
10015474:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10015478:	e0bffb17 	ldw	r2,-20(fp)
1001547c:	10800017 	ldw	r2,0(r2)
10015480:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10015484:	e0bffc17 	ldw	r2,-16(fp)
10015488:	10800104 	addi	r2,r2,4
1001548c:	10800037 	ldwio	r2,0(r2)
10015490:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10015494:	e0bffd17 	ldw	r2,-12(fp)
10015498:	1080c00c 	andi	r2,r2,768
1001549c:	1000011e 	bne	r2,zero,100154a4 <altera_avalon_jtag_uart_irq+0x44>
      break;
100154a0:	00006c06 	br	10015654 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
100154a4:	e0bffd17 	ldw	r2,-12(fp)
100154a8:	1080400c 	andi	r2,r2,256
100154ac:	10003426 	beq	r2,zero,10015580 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
100154b0:	00800074 	movhi	r2,1
100154b4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100154b8:	e0bffb17 	ldw	r2,-20(fp)
100154bc:	10800a17 	ldw	r2,40(r2)
100154c0:	10800044 	addi	r2,r2,1
100154c4:	1081ffcc 	andi	r2,r2,2047
100154c8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
100154cc:	e0bffb17 	ldw	r2,-20(fp)
100154d0:	10c00b17 	ldw	r3,44(r2)
100154d4:	e0bffe17 	ldw	r2,-8(fp)
100154d8:	1880011e 	bne	r3,r2,100154e0 <altera_avalon_jtag_uart_irq+0x80>
          break;
100154dc:	00001606 	br	10015538 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
100154e0:	e0bffc17 	ldw	r2,-16(fp)
100154e4:	10800037 	ldwio	r2,0(r2)
100154e8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
100154ec:	e0bff917 	ldw	r2,-28(fp)
100154f0:	10a0000c 	andi	r2,r2,32768
100154f4:	1000011e 	bne	r2,zero,100154fc <altera_avalon_jtag_uart_irq+0x9c>
          break;
100154f8:	00000f06 	br	10015538 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
100154fc:	e0bffb17 	ldw	r2,-20(fp)
10015500:	10800a17 	ldw	r2,40(r2)
10015504:	e0fff917 	ldw	r3,-28(fp)
10015508:	1809883a 	mov	r4,r3
1001550c:	e0fffb17 	ldw	r3,-20(fp)
10015510:	1885883a 	add	r2,r3,r2
10015514:	10800e04 	addi	r2,r2,56
10015518:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001551c:	e0bffb17 	ldw	r2,-20(fp)
10015520:	10800a17 	ldw	r2,40(r2)
10015524:	10800044 	addi	r2,r2,1
10015528:	10c1ffcc 	andi	r3,r2,2047
1001552c:	e0bffb17 	ldw	r2,-20(fp)
10015530:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10015534:	003fe006 	br	100154b8 <__alt_data_end+0xf80154b8>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10015538:	e0bff917 	ldw	r2,-28(fp)
1001553c:	10bfffec 	andhi	r2,r2,65535
10015540:	10000f26 	beq	r2,zero,10015580 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10015544:	e0bffb17 	ldw	r2,-20(fp)
10015548:	10c00817 	ldw	r3,32(r2)
1001554c:	00bfff84 	movi	r2,-2
10015550:	1886703a 	and	r3,r3,r2
10015554:	e0bffb17 	ldw	r2,-20(fp)
10015558:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1001555c:	e0bffc17 	ldw	r2,-16(fp)
10015560:	10800104 	addi	r2,r2,4
10015564:	1007883a 	mov	r3,r2
10015568:	e0bffb17 	ldw	r2,-20(fp)
1001556c:	10800817 	ldw	r2,32(r2)
10015570:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10015574:	e0bffc17 	ldw	r2,-16(fp)
10015578:	10800104 	addi	r2,r2,4
1001557c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10015580:	e0bffd17 	ldw	r2,-12(fp)
10015584:	1080800c 	andi	r2,r2,512
10015588:	10003126 	beq	r2,zero,10015650 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1001558c:	e0bffd17 	ldw	r2,-12(fp)
10015590:	1004d43a 	srli	r2,r2,16
10015594:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10015598:	00001406 	br	100155ec <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1001559c:	e0bffc17 	ldw	r2,-16(fp)
100155a0:	e0fffb17 	ldw	r3,-20(fp)
100155a4:	18c00d17 	ldw	r3,52(r3)
100155a8:	e13ffb17 	ldw	r4,-20(fp)
100155ac:	20c7883a 	add	r3,r4,r3
100155b0:	18c20e04 	addi	r3,r3,2104
100155b4:	18c00003 	ldbu	r3,0(r3)
100155b8:	18c03fcc 	andi	r3,r3,255
100155bc:	18c0201c 	xori	r3,r3,128
100155c0:	18ffe004 	addi	r3,r3,-128
100155c4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100155c8:	e0bffb17 	ldw	r2,-20(fp)
100155cc:	10800d17 	ldw	r2,52(r2)
100155d0:	10800044 	addi	r2,r2,1
100155d4:	10c1ffcc 	andi	r3,r2,2047
100155d8:	e0bffb17 	ldw	r2,-20(fp)
100155dc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
100155e0:	e0bffa17 	ldw	r2,-24(fp)
100155e4:	10bfffc4 	addi	r2,r2,-1
100155e8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
100155ec:	e0bffa17 	ldw	r2,-24(fp)
100155f0:	10000526 	beq	r2,zero,10015608 <altera_avalon_jtag_uart_irq+0x1a8>
100155f4:	e0bffb17 	ldw	r2,-20(fp)
100155f8:	10c00d17 	ldw	r3,52(r2)
100155fc:	e0bffb17 	ldw	r2,-20(fp)
10015600:	10800c17 	ldw	r2,48(r2)
10015604:	18bfe51e 	bne	r3,r2,1001559c <__alt_data_end+0xf801559c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10015608:	e0bffa17 	ldw	r2,-24(fp)
1001560c:	10001026 	beq	r2,zero,10015650 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10015610:	e0bffb17 	ldw	r2,-20(fp)
10015614:	10c00817 	ldw	r3,32(r2)
10015618:	00bfff44 	movi	r2,-3
1001561c:	1886703a 	and	r3,r3,r2
10015620:	e0bffb17 	ldw	r2,-20(fp)
10015624:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10015628:	e0bffb17 	ldw	r2,-20(fp)
1001562c:	10800017 	ldw	r2,0(r2)
10015630:	10800104 	addi	r2,r2,4
10015634:	1007883a 	mov	r3,r2
10015638:	e0bffb17 	ldw	r2,-20(fp)
1001563c:	10800817 	ldw	r2,32(r2)
10015640:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10015644:	e0bffc17 	ldw	r2,-16(fp)
10015648:	10800104 	addi	r2,r2,4
1001564c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10015650:	003f8c06 	br	10015484 <__alt_data_end+0xf8015484>
}
10015654:	e037883a 	mov	sp,fp
10015658:	df000017 	ldw	fp,0(sp)
1001565c:	dec00104 	addi	sp,sp,4
10015660:	f800283a 	ret

10015664 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10015664:	defff804 	addi	sp,sp,-32
10015668:	df000715 	stw	fp,28(sp)
1001566c:	df000704 	addi	fp,sp,28
10015670:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10015674:	e0bffb17 	ldw	r2,-20(fp)
10015678:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1001567c:	e0bff917 	ldw	r2,-28(fp)
10015680:	10800017 	ldw	r2,0(r2)
10015684:	10800104 	addi	r2,r2,4
10015688:	10800037 	ldwio	r2,0(r2)
1001568c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10015690:	e0bffa17 	ldw	r2,-24(fp)
10015694:	1081000c 	andi	r2,r2,1024
10015698:	10000b26 	beq	r2,zero,100156c8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1001569c:	e0bff917 	ldw	r2,-28(fp)
100156a0:	10800017 	ldw	r2,0(r2)
100156a4:	10800104 	addi	r2,r2,4
100156a8:	1007883a 	mov	r3,r2
100156ac:	e0bff917 	ldw	r2,-28(fp)
100156b0:	10800817 	ldw	r2,32(r2)
100156b4:	10810014 	ori	r2,r2,1024
100156b8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
100156bc:	e0bff917 	ldw	r2,-28(fp)
100156c0:	10000915 	stw	zero,36(r2)
100156c4:	00000a06 	br	100156f0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
100156c8:	e0bff917 	ldw	r2,-28(fp)
100156cc:	10c00917 	ldw	r3,36(r2)
100156d0:	00a00034 	movhi	r2,32768
100156d4:	10bfff04 	addi	r2,r2,-4
100156d8:	10c00536 	bltu	r2,r3,100156f0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
100156dc:	e0bff917 	ldw	r2,-28(fp)
100156e0:	10800917 	ldw	r2,36(r2)
100156e4:	10c00044 	addi	r3,r2,1
100156e8:	e0bff917 	ldw	r2,-28(fp)
100156ec:	10c00915 	stw	r3,36(r2)
100156f0:	008400b4 	movhi	r2,4098
100156f4:	10b2a104 	addi	r2,r2,-13692
100156f8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
100156fc:	e037883a 	mov	sp,fp
10015700:	df000017 	ldw	fp,0(sp)
10015704:	dec00104 	addi	sp,sp,4
10015708:	f800283a 	ret

1001570c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1001570c:	defffd04 	addi	sp,sp,-12
10015710:	df000215 	stw	fp,8(sp)
10015714:	df000204 	addi	fp,sp,8
10015718:	e13ffe15 	stw	r4,-8(fp)
1001571c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10015720:	00000506 	br	10015738 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10015724:	e0bfff17 	ldw	r2,-4(fp)
10015728:	1090000c 	andi	r2,r2,16384
1001572c:	10000226 	beq	r2,zero,10015738 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10015730:	00bffd44 	movi	r2,-11
10015734:	00000b06 	br	10015764 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10015738:	e0bffe17 	ldw	r2,-8(fp)
1001573c:	10c00d17 	ldw	r3,52(r2)
10015740:	e0bffe17 	ldw	r2,-8(fp)
10015744:	10800c17 	ldw	r2,48(r2)
10015748:	18800526 	beq	r3,r2,10015760 <altera_avalon_jtag_uart_close+0x54>
1001574c:	e0bffe17 	ldw	r2,-8(fp)
10015750:	10c00917 	ldw	r3,36(r2)
10015754:	e0bffe17 	ldw	r2,-8(fp)
10015758:	10800117 	ldw	r2,4(r2)
1001575c:	18bff136 	bltu	r3,r2,10015724 <__alt_data_end+0xf8015724>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10015760:	0005883a 	mov	r2,zero
}
10015764:	e037883a 	mov	sp,fp
10015768:	df000017 	ldw	fp,0(sp)
1001576c:	dec00104 	addi	sp,sp,4
10015770:	f800283a 	ret

10015774 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10015774:	defffa04 	addi	sp,sp,-24
10015778:	df000515 	stw	fp,20(sp)
1001577c:	df000504 	addi	fp,sp,20
10015780:	e13ffd15 	stw	r4,-12(fp)
10015784:	e17ffe15 	stw	r5,-8(fp)
10015788:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1001578c:	00bff9c4 	movi	r2,-25
10015790:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10015794:	e0bffe17 	ldw	r2,-8(fp)
10015798:	10da8060 	cmpeqi	r3,r2,27137
1001579c:	1800031e 	bne	r3,zero,100157ac <altera_avalon_jtag_uart_ioctl+0x38>
100157a0:	109a80a0 	cmpeqi	r2,r2,27138
100157a4:	1000191e 	bne	r2,zero,1001580c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
100157a8:	00002806 	br	1001584c <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
100157ac:	e0bffd17 	ldw	r2,-12(fp)
100157b0:	10c00117 	ldw	r3,4(r2)
100157b4:	00a00034 	movhi	r2,32768
100157b8:	10bfffc4 	addi	r2,r2,-1
100157bc:	18801226 	beq	r3,r2,10015808 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
100157c0:	e0bfff17 	ldw	r2,-4(fp)
100157c4:	10800017 	ldw	r2,0(r2)
100157c8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
100157cc:	e0bffc17 	ldw	r2,-16(fp)
100157d0:	10800090 	cmplti	r2,r2,2
100157d4:	1000061e 	bne	r2,zero,100157f0 <altera_avalon_jtag_uart_ioctl+0x7c>
100157d8:	e0fffc17 	ldw	r3,-16(fp)
100157dc:	00a00034 	movhi	r2,32768
100157e0:	10bfffc4 	addi	r2,r2,-1
100157e4:	18800226 	beq	r3,r2,100157f0 <altera_avalon_jtag_uart_ioctl+0x7c>
100157e8:	e0bffc17 	ldw	r2,-16(fp)
100157ec:	00000206 	br	100157f8 <altera_avalon_jtag_uart_ioctl+0x84>
100157f0:	00a00034 	movhi	r2,32768
100157f4:	10bfff84 	addi	r2,r2,-2
100157f8:	e0fffd17 	ldw	r3,-12(fp)
100157fc:	18800115 	stw	r2,4(r3)
      rc = 0;
10015800:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10015804:	00001106 	br	1001584c <altera_avalon_jtag_uart_ioctl+0xd8>
10015808:	00001006 	br	1001584c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1001580c:	e0bffd17 	ldw	r2,-12(fp)
10015810:	10c00117 	ldw	r3,4(r2)
10015814:	00a00034 	movhi	r2,32768
10015818:	10bfffc4 	addi	r2,r2,-1
1001581c:	18800a26 	beq	r3,r2,10015848 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10015820:	e0bffd17 	ldw	r2,-12(fp)
10015824:	10c00917 	ldw	r3,36(r2)
10015828:	e0bffd17 	ldw	r2,-12(fp)
1001582c:	10800117 	ldw	r2,4(r2)
10015830:	1885803a 	cmpltu	r2,r3,r2
10015834:	10c03fcc 	andi	r3,r2,255
10015838:	e0bfff17 	ldw	r2,-4(fp)
1001583c:	10c00015 	stw	r3,0(r2)
      rc = 0;
10015840:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10015844:	00000006 	br	10015848 <altera_avalon_jtag_uart_ioctl+0xd4>
10015848:	0001883a 	nop

  default:
    break;
  }

  return rc;
1001584c:	e0bffb17 	ldw	r2,-20(fp)
}
10015850:	e037883a 	mov	sp,fp
10015854:	df000017 	ldw	fp,0(sp)
10015858:	dec00104 	addi	sp,sp,4
1001585c:	f800283a 	ret

10015860 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10015860:	defff304 	addi	sp,sp,-52
10015864:	dfc00c15 	stw	ra,48(sp)
10015868:	df000b15 	stw	fp,44(sp)
1001586c:	df000b04 	addi	fp,sp,44
10015870:	e13ffc15 	stw	r4,-16(fp)
10015874:	e17ffd15 	stw	r5,-12(fp)
10015878:	e1bffe15 	stw	r6,-8(fp)
1001587c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10015880:	e0bffd17 	ldw	r2,-12(fp)
10015884:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10015888:	00004906 	br	100159b0 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1001588c:	e0bffc17 	ldw	r2,-16(fp)
10015890:	10800a17 	ldw	r2,40(r2)
10015894:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10015898:	e0bffc17 	ldw	r2,-16(fp)
1001589c:	10800b17 	ldw	r2,44(r2)
100158a0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
100158a4:	e0fff717 	ldw	r3,-36(fp)
100158a8:	e0bff817 	ldw	r2,-32(fp)
100158ac:	18800536 	bltu	r3,r2,100158c4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
100158b0:	e0fff717 	ldw	r3,-36(fp)
100158b4:	e0bff817 	ldw	r2,-32(fp)
100158b8:	1885c83a 	sub	r2,r3,r2
100158bc:	e0bff615 	stw	r2,-40(fp)
100158c0:	00000406 	br	100158d4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
100158c4:	00c20004 	movi	r3,2048
100158c8:	e0bff817 	ldw	r2,-32(fp)
100158cc:	1885c83a 	sub	r2,r3,r2
100158d0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100158d4:	e0bff617 	ldw	r2,-40(fp)
100158d8:	1000011e 	bne	r2,zero,100158e0 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
100158dc:	00001d06 	br	10015954 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
100158e0:	e0fffe17 	ldw	r3,-8(fp)
100158e4:	e0bff617 	ldw	r2,-40(fp)
100158e8:	1880022e 	bgeu	r3,r2,100158f4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
100158ec:	e0bffe17 	ldw	r2,-8(fp)
100158f0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
100158f4:	e0bff817 	ldw	r2,-32(fp)
100158f8:	10800e04 	addi	r2,r2,56
100158fc:	e0fffc17 	ldw	r3,-16(fp)
10015900:	1885883a 	add	r2,r3,r2
10015904:	e13ff517 	ldw	r4,-44(fp)
10015908:	100b883a 	mov	r5,r2
1001590c:	e1bff617 	ldw	r6,-40(fp)
10015910:	0008f580 	call	10008f58 <memcpy>
      ptr   += n;
10015914:	e0fff517 	ldw	r3,-44(fp)
10015918:	e0bff617 	ldw	r2,-40(fp)
1001591c:	1885883a 	add	r2,r3,r2
10015920:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10015924:	e0fffe17 	ldw	r3,-8(fp)
10015928:	e0bff617 	ldw	r2,-40(fp)
1001592c:	1885c83a 	sub	r2,r3,r2
10015930:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10015934:	e0fff817 	ldw	r3,-32(fp)
10015938:	e0bff617 	ldw	r2,-40(fp)
1001593c:	1885883a 	add	r2,r3,r2
10015940:	10c1ffcc 	andi	r3,r2,2047
10015944:	e0bffc17 	ldw	r2,-16(fp)
10015948:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1001594c:	e0bffe17 	ldw	r2,-8(fp)
10015950:	00bfce16 	blt	zero,r2,1001588c <__alt_data_end+0xf801588c>

    /* If we read any data then return it */
    if (ptr != buffer)
10015954:	e0fff517 	ldw	r3,-44(fp)
10015958:	e0bffd17 	ldw	r2,-12(fp)
1001595c:	18800126 	beq	r3,r2,10015964 <altera_avalon_jtag_uart_read+0x104>
      break;
10015960:	00001506 	br	100159b8 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10015964:	e0bfff17 	ldw	r2,-4(fp)
10015968:	1090000c 	andi	r2,r2,16384
1001596c:	10000126 	beq	r2,zero,10015974 <altera_avalon_jtag_uart_read+0x114>
      break;
10015970:	00001106 	br	100159b8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10015974:	0001883a 	nop
10015978:	e0bffc17 	ldw	r2,-16(fp)
1001597c:	10c00a17 	ldw	r3,40(r2)
10015980:	e0bff717 	ldw	r2,-36(fp)
10015984:	1880051e 	bne	r3,r2,1001599c <altera_avalon_jtag_uart_read+0x13c>
10015988:	e0bffc17 	ldw	r2,-16(fp)
1001598c:	10c00917 	ldw	r3,36(r2)
10015990:	e0bffc17 	ldw	r2,-16(fp)
10015994:	10800117 	ldw	r2,4(r2)
10015998:	18bff736 	bltu	r3,r2,10015978 <__alt_data_end+0xf8015978>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1001599c:	e0bffc17 	ldw	r2,-16(fp)
100159a0:	10c00a17 	ldw	r3,40(r2)
100159a4:	e0bff717 	ldw	r2,-36(fp)
100159a8:	1880011e 	bne	r3,r2,100159b0 <altera_avalon_jtag_uart_read+0x150>
      break;
100159ac:	00000206 	br	100159b8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100159b0:	e0bffe17 	ldw	r2,-8(fp)
100159b4:	00bfb516 	blt	zero,r2,1001588c <__alt_data_end+0xf801588c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
100159b8:	e0fff517 	ldw	r3,-44(fp)
100159bc:	e0bffd17 	ldw	r2,-12(fp)
100159c0:	18801826 	beq	r3,r2,10015a24 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100159c4:	0005303a 	rdctl	r2,status
100159c8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100159cc:	e0fffa17 	ldw	r3,-24(fp)
100159d0:	00bfff84 	movi	r2,-2
100159d4:	1884703a 	and	r2,r3,r2
100159d8:	1001703a 	wrctl	status,r2
  
  return context;
100159dc:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
100159e0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100159e4:	e0bffc17 	ldw	r2,-16(fp)
100159e8:	10800817 	ldw	r2,32(r2)
100159ec:	10c00054 	ori	r3,r2,1
100159f0:	e0bffc17 	ldw	r2,-16(fp)
100159f4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100159f8:	e0bffc17 	ldw	r2,-16(fp)
100159fc:	10800017 	ldw	r2,0(r2)
10015a00:	10800104 	addi	r2,r2,4
10015a04:	1007883a 	mov	r3,r2
10015a08:	e0bffc17 	ldw	r2,-16(fp)
10015a0c:	10800817 	ldw	r2,32(r2)
10015a10:	18800035 	stwio	r2,0(r3)
10015a14:	e0bff917 	ldw	r2,-28(fp)
10015a18:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10015a1c:	e0bffb17 	ldw	r2,-20(fp)
10015a20:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10015a24:	e0fff517 	ldw	r3,-44(fp)
10015a28:	e0bffd17 	ldw	r2,-12(fp)
10015a2c:	18800426 	beq	r3,r2,10015a40 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
10015a30:	e0fff517 	ldw	r3,-44(fp)
10015a34:	e0bffd17 	ldw	r2,-12(fp)
10015a38:	1885c83a 	sub	r2,r3,r2
10015a3c:	00000606 	br	10015a58 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
10015a40:	e0bfff17 	ldw	r2,-4(fp)
10015a44:	1090000c 	andi	r2,r2,16384
10015a48:	10000226 	beq	r2,zero,10015a54 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
10015a4c:	00bffd44 	movi	r2,-11
10015a50:	00000106 	br	10015a58 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
10015a54:	00bffec4 	movi	r2,-5
}
10015a58:	e037883a 	mov	sp,fp
10015a5c:	dfc00117 	ldw	ra,4(sp)
10015a60:	df000017 	ldw	fp,0(sp)
10015a64:	dec00204 	addi	sp,sp,8
10015a68:	f800283a 	ret

10015a6c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10015a6c:	defff304 	addi	sp,sp,-52
10015a70:	dfc00c15 	stw	ra,48(sp)
10015a74:	df000b15 	stw	fp,44(sp)
10015a78:	df000b04 	addi	fp,sp,44
10015a7c:	e13ffc15 	stw	r4,-16(fp)
10015a80:	e17ffd15 	stw	r5,-12(fp)
10015a84:	e1bffe15 	stw	r6,-8(fp)
10015a88:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10015a8c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10015a90:	e0bffd17 	ldw	r2,-12(fp)
10015a94:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10015a98:	00003806 	br	10015b7c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10015a9c:	e0bffc17 	ldw	r2,-16(fp)
10015aa0:	10800c17 	ldw	r2,48(r2)
10015aa4:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
10015aa8:	e0bffc17 	ldw	r2,-16(fp)
10015aac:	10800d17 	ldw	r2,52(r2)
10015ab0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10015ab4:	e0fff817 	ldw	r3,-32(fp)
10015ab8:	e0bff517 	ldw	r2,-44(fp)
10015abc:	1880062e 	bgeu	r3,r2,10015ad8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10015ac0:	e0fff517 	ldw	r3,-44(fp)
10015ac4:	e0bff817 	ldw	r2,-32(fp)
10015ac8:	1885c83a 	sub	r2,r3,r2
10015acc:	10bfffc4 	addi	r2,r2,-1
10015ad0:	e0bff615 	stw	r2,-40(fp)
10015ad4:	00000b06 	br	10015b04 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10015ad8:	e0bff517 	ldw	r2,-44(fp)
10015adc:	10000526 	beq	r2,zero,10015af4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10015ae0:	00c20004 	movi	r3,2048
10015ae4:	e0bff817 	ldw	r2,-32(fp)
10015ae8:	1885c83a 	sub	r2,r3,r2
10015aec:	e0bff615 	stw	r2,-40(fp)
10015af0:	00000406 	br	10015b04 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10015af4:	00c1ffc4 	movi	r3,2047
10015af8:	e0bff817 	ldw	r2,-32(fp)
10015afc:	1885c83a 	sub	r2,r3,r2
10015b00:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10015b04:	e0bff617 	ldw	r2,-40(fp)
10015b08:	1000011e 	bne	r2,zero,10015b10 <altera_avalon_jtag_uart_write+0xa4>
        break;
10015b0c:	00001d06 	br	10015b84 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
10015b10:	e0fffe17 	ldw	r3,-8(fp)
10015b14:	e0bff617 	ldw	r2,-40(fp)
10015b18:	1880022e 	bgeu	r3,r2,10015b24 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
10015b1c:	e0bffe17 	ldw	r2,-8(fp)
10015b20:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10015b24:	e0bff817 	ldw	r2,-32(fp)
10015b28:	10820e04 	addi	r2,r2,2104
10015b2c:	e0fffc17 	ldw	r3,-16(fp)
10015b30:	1885883a 	add	r2,r3,r2
10015b34:	1009883a 	mov	r4,r2
10015b38:	e17ffd17 	ldw	r5,-12(fp)
10015b3c:	e1bff617 	ldw	r6,-40(fp)
10015b40:	0008f580 	call	10008f58 <memcpy>
      ptr   += n;
10015b44:	e0fffd17 	ldw	r3,-12(fp)
10015b48:	e0bff617 	ldw	r2,-40(fp)
10015b4c:	1885883a 	add	r2,r3,r2
10015b50:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10015b54:	e0fffe17 	ldw	r3,-8(fp)
10015b58:	e0bff617 	ldw	r2,-40(fp)
10015b5c:	1885c83a 	sub	r2,r3,r2
10015b60:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10015b64:	e0fff817 	ldw	r3,-32(fp)
10015b68:	e0bff617 	ldw	r2,-40(fp)
10015b6c:	1885883a 	add	r2,r3,r2
10015b70:	10c1ffcc 	andi	r3,r2,2047
10015b74:	e0bffc17 	ldw	r2,-16(fp)
10015b78:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10015b7c:	e0bffe17 	ldw	r2,-8(fp)
10015b80:	00bfc616 	blt	zero,r2,10015a9c <__alt_data_end+0xf8015a9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10015b84:	0005303a 	rdctl	r2,status
10015b88:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10015b8c:	e0fffa17 	ldw	r3,-24(fp)
10015b90:	00bfff84 	movi	r2,-2
10015b94:	1884703a 	and	r2,r3,r2
10015b98:	1001703a 	wrctl	status,r2
  
  return context;
10015b9c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10015ba0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10015ba4:	e0bffc17 	ldw	r2,-16(fp)
10015ba8:	10800817 	ldw	r2,32(r2)
10015bac:	10c00094 	ori	r3,r2,2
10015bb0:	e0bffc17 	ldw	r2,-16(fp)
10015bb4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10015bb8:	e0bffc17 	ldw	r2,-16(fp)
10015bbc:	10800017 	ldw	r2,0(r2)
10015bc0:	10800104 	addi	r2,r2,4
10015bc4:	1007883a 	mov	r3,r2
10015bc8:	e0bffc17 	ldw	r2,-16(fp)
10015bcc:	10800817 	ldw	r2,32(r2)
10015bd0:	18800035 	stwio	r2,0(r3)
10015bd4:	e0bff917 	ldw	r2,-28(fp)
10015bd8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10015bdc:	e0bffb17 	ldw	r2,-20(fp)
10015be0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10015be4:	e0bffe17 	ldw	r2,-8(fp)
10015be8:	0080120e 	bge	zero,r2,10015c34 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
10015bec:	e0bfff17 	ldw	r2,-4(fp)
10015bf0:	1090000c 	andi	r2,r2,16384
10015bf4:	10000126 	beq	r2,zero,10015bfc <altera_avalon_jtag_uart_write+0x190>
        break;
10015bf8:	00001006 	br	10015c3c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10015bfc:	0001883a 	nop
10015c00:	e0bffc17 	ldw	r2,-16(fp)
10015c04:	10c00d17 	ldw	r3,52(r2)
10015c08:	e0bff517 	ldw	r2,-44(fp)
10015c0c:	1880051e 	bne	r3,r2,10015c24 <altera_avalon_jtag_uart_write+0x1b8>
10015c10:	e0bffc17 	ldw	r2,-16(fp)
10015c14:	10c00917 	ldw	r3,36(r2)
10015c18:	e0bffc17 	ldw	r2,-16(fp)
10015c1c:	10800117 	ldw	r2,4(r2)
10015c20:	18bff736 	bltu	r3,r2,10015c00 <__alt_data_end+0xf8015c00>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10015c24:	e0bffc17 	ldw	r2,-16(fp)
10015c28:	10800917 	ldw	r2,36(r2)
10015c2c:	10000126 	beq	r2,zero,10015c34 <altera_avalon_jtag_uart_write+0x1c8>
         break;
10015c30:	00000206 	br	10015c3c <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
10015c34:	e0bffe17 	ldw	r2,-8(fp)
10015c38:	00bf9716 	blt	zero,r2,10015a98 <__alt_data_end+0xf8015a98>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10015c3c:	e0fffd17 	ldw	r3,-12(fp)
10015c40:	e0bff717 	ldw	r2,-36(fp)
10015c44:	18800426 	beq	r3,r2,10015c58 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
10015c48:	e0fffd17 	ldw	r3,-12(fp)
10015c4c:	e0bff717 	ldw	r2,-36(fp)
10015c50:	1885c83a 	sub	r2,r3,r2
10015c54:	00000606 	br	10015c70 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
10015c58:	e0bfff17 	ldw	r2,-4(fp)
10015c5c:	1090000c 	andi	r2,r2,16384
10015c60:	10000226 	beq	r2,zero,10015c6c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
10015c64:	00bffd44 	movi	r2,-11
10015c68:	00000106 	br	10015c70 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10015c6c:	00bffec4 	movi	r2,-5
}
10015c70:	e037883a 	mov	sp,fp
10015c74:	dfc00117 	ldw	ra,4(sp)
10015c78:	df000017 	ldw	fp,0(sp)
10015c7c:	dec00204 	addi	sp,sp,8
10015c80:	f800283a 	ret

10015c84 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10015c84:	defff504 	addi	sp,sp,-44
10015c88:	df000a15 	stw	fp,40(sp)
10015c8c:	df000a04 	addi	fp,sp,40
10015c90:	e13ffc15 	stw	r4,-16(fp)
10015c94:	e17ffd15 	stw	r5,-12(fp)
10015c98:	e1bffe15 	stw	r6,-8(fp)
10015c9c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10015ca0:	e03ff615 	stw	zero,-40(fp)
10015ca4:	008400b4 	movhi	r2,4098
10015ca8:	10b2a104 	addi	r2,r2,-13692
10015cac:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
10015cb0:	10003f26 	beq	r2,zero,10015db0 <alt_alarm_start+0x12c>
  {
    if (alarm)
10015cb4:	e0bffc17 	ldw	r2,-16(fp)
10015cb8:	10003b26 	beq	r2,zero,10015da8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
10015cbc:	e0bffc17 	ldw	r2,-16(fp)
10015cc0:	e0fffe17 	ldw	r3,-8(fp)
10015cc4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10015cc8:	e0bffc17 	ldw	r2,-16(fp)
10015ccc:	e0ffff17 	ldw	r3,-4(fp)
10015cd0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10015cd4:	0005303a 	rdctl	r2,status
10015cd8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10015cdc:	e0fff817 	ldw	r3,-32(fp)
10015ce0:	00bfff84 	movi	r2,-2
10015ce4:	1884703a 	and	r2,r3,r2
10015ce8:	1001703a 	wrctl	status,r2
  
  return context;
10015cec:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
10015cf0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10015cf4:	008400b4 	movhi	r2,4098
10015cf8:	10b2a204 	addi	r2,r2,-13688
10015cfc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
10015d00:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10015d04:	e0fffd17 	ldw	r3,-12(fp)
10015d08:	e0bff617 	ldw	r2,-40(fp)
10015d0c:	1885883a 	add	r2,r3,r2
10015d10:	10c00044 	addi	r3,r2,1
10015d14:	e0bffc17 	ldw	r2,-16(fp)
10015d18:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10015d1c:	e0bffc17 	ldw	r2,-16(fp)
10015d20:	10c00217 	ldw	r3,8(r2)
10015d24:	e0bff617 	ldw	r2,-40(fp)
10015d28:	1880042e 	bgeu	r3,r2,10015d3c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
10015d2c:	e0bffc17 	ldw	r2,-16(fp)
10015d30:	00c00044 	movi	r3,1
10015d34:	10c00405 	stb	r3,16(r2)
10015d38:	00000206 	br	10015d44 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10015d3c:	e0bffc17 	ldw	r2,-16(fp)
10015d40:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10015d44:	e0fffc17 	ldw	r3,-16(fp)
10015d48:	008400b4 	movhi	r2,4098
10015d4c:	10abd804 	addi	r2,r2,-20640
10015d50:	e0bff915 	stw	r2,-28(fp)
10015d54:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10015d58:	e0bffa17 	ldw	r2,-24(fp)
10015d5c:	e0fff917 	ldw	r3,-28(fp)
10015d60:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10015d64:	e0bff917 	ldw	r2,-28(fp)
10015d68:	10c00017 	ldw	r3,0(r2)
10015d6c:	e0bffa17 	ldw	r2,-24(fp)
10015d70:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10015d74:	e0bff917 	ldw	r2,-28(fp)
10015d78:	10800017 	ldw	r2,0(r2)
10015d7c:	e0fffa17 	ldw	r3,-24(fp)
10015d80:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10015d84:	e0bff917 	ldw	r2,-28(fp)
10015d88:	e0fffa17 	ldw	r3,-24(fp)
10015d8c:	10c00015 	stw	r3,0(r2)
10015d90:	e0bff717 	ldw	r2,-36(fp)
10015d94:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10015d98:	e0bffb17 	ldw	r2,-20(fp)
10015d9c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10015da0:	0005883a 	mov	r2,zero
10015da4:	00000306 	br	10015db4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
10015da8:	00bffa84 	movi	r2,-22
10015dac:	00000106 	br	10015db4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
10015db0:	00bfde84 	movi	r2,-134
  }
}
10015db4:	e037883a 	mov	sp,fp
10015db8:	df000017 	ldw	fp,0(sp)
10015dbc:	dec00104 	addi	sp,sp,4
10015dc0:	f800283a 	ret

10015dc4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10015dc4:	defffa04 	addi	sp,sp,-24
10015dc8:	dfc00515 	stw	ra,20(sp)
10015dcc:	df000415 	stw	fp,16(sp)
10015dd0:	df000404 	addi	fp,sp,16
10015dd4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
10015dd8:	00800244 	movi	r2,9
10015ddc:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10015de0:	e13ffd17 	ldw	r4,-12(fp)
10015de4:	014003f4 	movhi	r5,15
10015de8:	29509004 	addi	r5,r5,16960
10015dec:	0006df00 	call	10006df0 <__mulsi3>
10015df0:	0100bef4 	movhi	r4,763
10015df4:	213c2004 	addi	r4,r4,-3968
10015df8:	100b883a 	mov	r5,r2
10015dfc:	0006de00 	call	10006de0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10015e00:	01200034 	movhi	r4,32768
10015e04:	213fffc4 	addi	r4,r4,-1
10015e08:	100b883a 	mov	r5,r2
10015e0c:	0006de00 	call	10006de0 <__udivsi3>
10015e10:	e13fff17 	ldw	r4,-4(fp)
10015e14:	100b883a 	mov	r5,r2
10015e18:	0006de00 	call	10006de0 <__udivsi3>
10015e1c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10015e20:	e0bffe17 	ldw	r2,-8(fp)
10015e24:	10002a26 	beq	r2,zero,10015ed0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10015e28:	e03ffc15 	stw	zero,-16(fp)
10015e2c:	00001706 	br	10015e8c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10015e30:	00a00034 	movhi	r2,32768
10015e34:	10bfffc4 	addi	r2,r2,-1
10015e38:	10bfffc4 	addi	r2,r2,-1
10015e3c:	103ffe1e 	bne	r2,zero,10015e38 <__alt_data_end+0xf8015e38>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10015e40:	e13ffd17 	ldw	r4,-12(fp)
10015e44:	014003f4 	movhi	r5,15
10015e48:	29509004 	addi	r5,r5,16960
10015e4c:	0006df00 	call	10006df0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10015e50:	0100bef4 	movhi	r4,763
10015e54:	213c2004 	addi	r4,r4,-3968
10015e58:	100b883a 	mov	r5,r2
10015e5c:	0006de00 	call	10006de0 <__udivsi3>
10015e60:	01200034 	movhi	r4,32768
10015e64:	213fffc4 	addi	r4,r4,-1
10015e68:	100b883a 	mov	r5,r2
10015e6c:	0006de00 	call	10006de0 <__udivsi3>
10015e70:	1007883a 	mov	r3,r2
10015e74:	e0bfff17 	ldw	r2,-4(fp)
10015e78:	10c5c83a 	sub	r2,r2,r3
10015e7c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10015e80:	e0bffc17 	ldw	r2,-16(fp)
10015e84:	10800044 	addi	r2,r2,1
10015e88:	e0bffc15 	stw	r2,-16(fp)
10015e8c:	e0fffc17 	ldw	r3,-16(fp)
10015e90:	e0bffe17 	ldw	r2,-8(fp)
10015e94:	18bfe616 	blt	r3,r2,10015e30 <__alt_data_end+0xf8015e30>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10015e98:	e13ffd17 	ldw	r4,-12(fp)
10015e9c:	014003f4 	movhi	r5,15
10015ea0:	29509004 	addi	r5,r5,16960
10015ea4:	0006df00 	call	10006df0 <__mulsi3>
10015ea8:	0100bef4 	movhi	r4,763
10015eac:	213c2004 	addi	r4,r4,-3968
10015eb0:	100b883a 	mov	r5,r2
10015eb4:	0006de00 	call	10006de0 <__udivsi3>
10015eb8:	1009883a 	mov	r4,r2
10015ebc:	e17fff17 	ldw	r5,-4(fp)
10015ec0:	0006df00 	call	10006df0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10015ec4:	10bfffc4 	addi	r2,r2,-1
10015ec8:	103ffe1e 	bne	r2,zero,10015ec4 <__alt_data_end+0xf8015ec4>
10015ecc:	00000d06 	br	10015f04 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10015ed0:	e13ffd17 	ldw	r4,-12(fp)
10015ed4:	014003f4 	movhi	r5,15
10015ed8:	29509004 	addi	r5,r5,16960
10015edc:	0006df00 	call	10006df0 <__mulsi3>
10015ee0:	0100bef4 	movhi	r4,763
10015ee4:	213c2004 	addi	r4,r4,-3968
10015ee8:	100b883a 	mov	r5,r2
10015eec:	0006de00 	call	10006de0 <__udivsi3>
10015ef0:	1009883a 	mov	r4,r2
10015ef4:	e17fff17 	ldw	r5,-4(fp)
10015ef8:	0006df00 	call	10006df0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10015efc:	10bfffc4 	addi	r2,r2,-1
10015f00:	00bffe16 	blt	zero,r2,10015efc <__alt_data_end+0xf8015efc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10015f04:	0005883a 	mov	r2,zero
}
10015f08:	e037883a 	mov	sp,fp
10015f0c:	dfc00117 	ldw	ra,4(sp)
10015f10:	df000017 	ldw	fp,0(sp)
10015f14:	dec00204 	addi	sp,sp,8
10015f18:	f800283a 	ret

10015f1c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10015f1c:	deffff04 	addi	sp,sp,-4
10015f20:	df000015 	stw	fp,0(sp)
10015f24:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10015f28:	e037883a 	mov	sp,fp
10015f2c:	df000017 	ldw	fp,0(sp)
10015f30:	dec00104 	addi	sp,sp,4
10015f34:	f800283a 	ret

10015f38 <alt_get_errno>:
10015f38:	defffe04 	addi	sp,sp,-8
10015f3c:	dfc00115 	stw	ra,4(sp)
10015f40:	df000015 	stw	fp,0(sp)
10015f44:	d839883a 	mov	fp,sp
10015f48:	008400b4 	movhi	r2,4098
10015f4c:	10abd504 	addi	r2,r2,-20652
10015f50:	10800017 	ldw	r2,0(r2)
10015f54:	10000526 	beq	r2,zero,10015f6c <alt_get_errno+0x34>
10015f58:	008400b4 	movhi	r2,4098
10015f5c:	10abd504 	addi	r2,r2,-20652
10015f60:	10800017 	ldw	r2,0(r2)
10015f64:	103ee83a 	callr	r2
10015f68:	00000206 	br	10015f74 <alt_get_errno+0x3c>
10015f6c:	008400b4 	movhi	r2,4098
10015f70:	10b29c04 	addi	r2,r2,-13712
10015f74:	e037883a 	mov	sp,fp
10015f78:	dfc00117 	ldw	ra,4(sp)
10015f7c:	df000017 	ldw	fp,0(sp)
10015f80:	dec00204 	addi	sp,sp,8
10015f84:	f800283a 	ret

10015f88 <alt_dev_llist_insert>:
10015f88:	defffa04 	addi	sp,sp,-24
10015f8c:	dfc00515 	stw	ra,20(sp)
10015f90:	df000415 	stw	fp,16(sp)
10015f94:	df000404 	addi	fp,sp,16
10015f98:	e13ffe15 	stw	r4,-8(fp)
10015f9c:	e17fff15 	stw	r5,-4(fp)
10015fa0:	e0bffe17 	ldw	r2,-8(fp)
10015fa4:	10000326 	beq	r2,zero,10015fb4 <alt_dev_llist_insert+0x2c>
10015fa8:	e0bffe17 	ldw	r2,-8(fp)
10015fac:	10800217 	ldw	r2,8(r2)
10015fb0:	1000061e 	bne	r2,zero,10015fcc <alt_dev_llist_insert+0x44>
10015fb4:	0015f380 	call	10015f38 <alt_get_errno>
10015fb8:	1007883a 	mov	r3,r2
10015fbc:	00800584 	movi	r2,22
10015fc0:	18800015 	stw	r2,0(r3)
10015fc4:	00bffa84 	movi	r2,-22
10015fc8:	00001306 	br	10016018 <alt_dev_llist_insert+0x90>
10015fcc:	e0bffe17 	ldw	r2,-8(fp)
10015fd0:	e0ffff17 	ldw	r3,-4(fp)
10015fd4:	e0fffc15 	stw	r3,-16(fp)
10015fd8:	e0bffd15 	stw	r2,-12(fp)
10015fdc:	e0bffd17 	ldw	r2,-12(fp)
10015fe0:	e0fffc17 	ldw	r3,-16(fp)
10015fe4:	10c00115 	stw	r3,4(r2)
10015fe8:	e0bffc17 	ldw	r2,-16(fp)
10015fec:	10c00017 	ldw	r3,0(r2)
10015ff0:	e0bffd17 	ldw	r2,-12(fp)
10015ff4:	10c00015 	stw	r3,0(r2)
10015ff8:	e0bffc17 	ldw	r2,-16(fp)
10015ffc:	10800017 	ldw	r2,0(r2)
10016000:	e0fffd17 	ldw	r3,-12(fp)
10016004:	10c00115 	stw	r3,4(r2)
10016008:	e0bffc17 	ldw	r2,-16(fp)
1001600c:	e0fffd17 	ldw	r3,-12(fp)
10016010:	10c00015 	stw	r3,0(r2)
10016014:	0005883a 	mov	r2,zero
10016018:	e037883a 	mov	sp,fp
1001601c:	dfc00117 	ldw	ra,4(sp)
10016020:	df000017 	ldw	fp,0(sp)
10016024:	dec00204 	addi	sp,sp,8
10016028:	f800283a 	ret

1001602c <_do_ctors>:
1001602c:	defffd04 	addi	sp,sp,-12
10016030:	dfc00215 	stw	ra,8(sp)
10016034:	df000115 	stw	fp,4(sp)
10016038:	df000104 	addi	fp,sp,4
1001603c:	00840074 	movhi	r2,4097
10016040:	109bea04 	addi	r2,r2,28584
10016044:	e0bfff15 	stw	r2,-4(fp)
10016048:	00000606 	br	10016064 <_do_ctors+0x38>
1001604c:	e0bfff17 	ldw	r2,-4(fp)
10016050:	10800017 	ldw	r2,0(r2)
10016054:	103ee83a 	callr	r2
10016058:	e0bfff17 	ldw	r2,-4(fp)
1001605c:	10bfff04 	addi	r2,r2,-4
10016060:	e0bfff15 	stw	r2,-4(fp)
10016064:	e0ffff17 	ldw	r3,-4(fp)
10016068:	00840074 	movhi	r2,4097
1001606c:	109beb04 	addi	r2,r2,28588
10016070:	18bff62e 	bgeu	r3,r2,1001604c <__alt_data_end+0xf801604c>
10016074:	0001883a 	nop
10016078:	e037883a 	mov	sp,fp
1001607c:	dfc00117 	ldw	ra,4(sp)
10016080:	df000017 	ldw	fp,0(sp)
10016084:	dec00204 	addi	sp,sp,8
10016088:	f800283a 	ret

1001608c <_do_dtors>:
1001608c:	defffd04 	addi	sp,sp,-12
10016090:	dfc00215 	stw	ra,8(sp)
10016094:	df000115 	stw	fp,4(sp)
10016098:	df000104 	addi	fp,sp,4
1001609c:	00840074 	movhi	r2,4097
100160a0:	109bea04 	addi	r2,r2,28584
100160a4:	e0bfff15 	stw	r2,-4(fp)
100160a8:	00000606 	br	100160c4 <_do_dtors+0x38>
100160ac:	e0bfff17 	ldw	r2,-4(fp)
100160b0:	10800017 	ldw	r2,0(r2)
100160b4:	103ee83a 	callr	r2
100160b8:	e0bfff17 	ldw	r2,-4(fp)
100160bc:	10bfff04 	addi	r2,r2,-4
100160c0:	e0bfff15 	stw	r2,-4(fp)
100160c4:	e0ffff17 	ldw	r3,-4(fp)
100160c8:	00840074 	movhi	r2,4097
100160cc:	109beb04 	addi	r2,r2,28588
100160d0:	18bff62e 	bgeu	r3,r2,100160ac <__alt_data_end+0xf80160ac>
100160d4:	0001883a 	nop
100160d8:	e037883a 	mov	sp,fp
100160dc:	dfc00117 	ldw	ra,4(sp)
100160e0:	df000017 	ldw	fp,0(sp)
100160e4:	dec00204 	addi	sp,sp,8
100160e8:	f800283a 	ret

100160ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
100160ec:	deffff04 	addi	sp,sp,-4
100160f0:	df000015 	stw	fp,0(sp)
100160f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
100160f8:	e037883a 	mov	sp,fp
100160fc:	df000017 	ldw	fp,0(sp)
10016100:	dec00104 	addi	sp,sp,4
10016104:	f800283a 	ret

10016108 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10016108:	defff904 	addi	sp,sp,-28
1001610c:	dfc00615 	stw	ra,24(sp)
10016110:	df000515 	stw	fp,20(sp)
10016114:	df000504 	addi	fp,sp,20
10016118:	e13ffc15 	stw	r4,-16(fp)
1001611c:	e17ffd15 	stw	r5,-12(fp)
10016120:	e1bffe15 	stw	r6,-8(fp)
10016124:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10016128:	e0800217 	ldw	r2,8(fp)
1001612c:	d8800015 	stw	r2,0(sp)
10016130:	e13ffc17 	ldw	r4,-16(fp)
10016134:	e17ffd17 	ldw	r5,-12(fp)
10016138:	e1bffe17 	ldw	r6,-8(fp)
1001613c:	e1ffff17 	ldw	r7,-4(fp)
10016140:	00162e80 	call	100162e8 <alt_iic_isr_register>
}  
10016144:	e037883a 	mov	sp,fp
10016148:	dfc00117 	ldw	ra,4(sp)
1001614c:	df000017 	ldw	fp,0(sp)
10016150:	dec00204 	addi	sp,sp,8
10016154:	f800283a 	ret

10016158 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10016158:	defff904 	addi	sp,sp,-28
1001615c:	df000615 	stw	fp,24(sp)
10016160:	df000604 	addi	fp,sp,24
10016164:	e13ffe15 	stw	r4,-8(fp)
10016168:	e17fff15 	stw	r5,-4(fp)
1001616c:	e0bfff17 	ldw	r2,-4(fp)
10016170:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10016174:	0005303a 	rdctl	r2,status
10016178:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001617c:	e0fffb17 	ldw	r3,-20(fp)
10016180:	00bfff84 	movi	r2,-2
10016184:	1884703a 	and	r2,r3,r2
10016188:	1001703a 	wrctl	status,r2
  
  return context;
1001618c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10016190:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10016194:	e0bffa17 	ldw	r2,-24(fp)
10016198:	00c00044 	movi	r3,1
1001619c:	1884983a 	sll	r2,r3,r2
100161a0:	1007883a 	mov	r3,r2
100161a4:	008400b4 	movhi	r2,4098
100161a8:	10b2a004 	addi	r2,r2,-13696
100161ac:	10800017 	ldw	r2,0(r2)
100161b0:	1886b03a 	or	r3,r3,r2
100161b4:	008400b4 	movhi	r2,4098
100161b8:	10b2a004 	addi	r2,r2,-13696
100161bc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100161c0:	008400b4 	movhi	r2,4098
100161c4:	10b2a004 	addi	r2,r2,-13696
100161c8:	10800017 	ldw	r2,0(r2)
100161cc:	100170fa 	wrctl	ienable,r2
100161d0:	e0bffc17 	ldw	r2,-16(fp)
100161d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100161d8:	e0bffd17 	ldw	r2,-12(fp)
100161dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100161e0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
100161e4:	0001883a 	nop
}
100161e8:	e037883a 	mov	sp,fp
100161ec:	df000017 	ldw	fp,0(sp)
100161f0:	dec00104 	addi	sp,sp,4
100161f4:	f800283a 	ret

100161f8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
100161f8:	defff904 	addi	sp,sp,-28
100161fc:	df000615 	stw	fp,24(sp)
10016200:	df000604 	addi	fp,sp,24
10016204:	e13ffe15 	stw	r4,-8(fp)
10016208:	e17fff15 	stw	r5,-4(fp)
1001620c:	e0bfff17 	ldw	r2,-4(fp)
10016210:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10016214:	0005303a 	rdctl	r2,status
10016218:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001621c:	e0fffb17 	ldw	r3,-20(fp)
10016220:	00bfff84 	movi	r2,-2
10016224:	1884703a 	and	r2,r3,r2
10016228:	1001703a 	wrctl	status,r2
  
  return context;
1001622c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10016230:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10016234:	e0bffa17 	ldw	r2,-24(fp)
10016238:	00c00044 	movi	r3,1
1001623c:	1884983a 	sll	r2,r3,r2
10016240:	0084303a 	nor	r2,zero,r2
10016244:	1007883a 	mov	r3,r2
10016248:	008400b4 	movhi	r2,4098
1001624c:	10b2a004 	addi	r2,r2,-13696
10016250:	10800017 	ldw	r2,0(r2)
10016254:	1886703a 	and	r3,r3,r2
10016258:	008400b4 	movhi	r2,4098
1001625c:	10b2a004 	addi	r2,r2,-13696
10016260:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10016264:	008400b4 	movhi	r2,4098
10016268:	10b2a004 	addi	r2,r2,-13696
1001626c:	10800017 	ldw	r2,0(r2)
10016270:	100170fa 	wrctl	ienable,r2
10016274:	e0bffc17 	ldw	r2,-16(fp)
10016278:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001627c:	e0bffd17 	ldw	r2,-12(fp)
10016280:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10016284:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10016288:	0001883a 	nop
}
1001628c:	e037883a 	mov	sp,fp
10016290:	df000017 	ldw	fp,0(sp)
10016294:	dec00104 	addi	sp,sp,4
10016298:	f800283a 	ret

1001629c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1001629c:	defffc04 	addi	sp,sp,-16
100162a0:	df000315 	stw	fp,12(sp)
100162a4:	df000304 	addi	fp,sp,12
100162a8:	e13ffe15 	stw	r4,-8(fp)
100162ac:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
100162b0:	000530fa 	rdctl	r2,ienable
100162b4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
100162b8:	e0bfff17 	ldw	r2,-4(fp)
100162bc:	00c00044 	movi	r3,1
100162c0:	1884983a 	sll	r2,r3,r2
100162c4:	1007883a 	mov	r3,r2
100162c8:	e0bffd17 	ldw	r2,-12(fp)
100162cc:	1884703a 	and	r2,r3,r2
100162d0:	1004c03a 	cmpne	r2,r2,zero
100162d4:	10803fcc 	andi	r2,r2,255
}
100162d8:	e037883a 	mov	sp,fp
100162dc:	df000017 	ldw	fp,0(sp)
100162e0:	dec00104 	addi	sp,sp,4
100162e4:	f800283a 	ret

100162e8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100162e8:	defff504 	addi	sp,sp,-44
100162ec:	dfc00a15 	stw	ra,40(sp)
100162f0:	df000915 	stw	fp,36(sp)
100162f4:	df000904 	addi	fp,sp,36
100162f8:	e13ffc15 	stw	r4,-16(fp)
100162fc:	e17ffd15 	stw	r5,-12(fp)
10016300:	e1bffe15 	stw	r6,-8(fp)
10016304:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10016308:	00bffa84 	movi	r2,-22
1001630c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10016310:	e0bffd17 	ldw	r2,-12(fp)
10016314:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10016318:	e0bff817 	ldw	r2,-32(fp)
1001631c:	10800808 	cmpgei	r2,r2,32
10016320:	1000271e 	bne	r2,zero,100163c0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10016324:	0005303a 	rdctl	r2,status
10016328:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001632c:	e0fffa17 	ldw	r3,-24(fp)
10016330:	00bfff84 	movi	r2,-2
10016334:	1884703a 	and	r2,r3,r2
10016338:	1001703a 	wrctl	status,r2
  
  return context;
1001633c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10016340:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
10016344:	008400b4 	movhi	r2,4098
10016348:	10b2ad04 	addi	r2,r2,-13644
1001634c:	e0fff817 	ldw	r3,-32(fp)
10016350:	180690fa 	slli	r3,r3,3
10016354:	10c5883a 	add	r2,r2,r3
10016358:	e0fffe17 	ldw	r3,-8(fp)
1001635c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10016360:	008400b4 	movhi	r2,4098
10016364:	10b2ad04 	addi	r2,r2,-13644
10016368:	e0fff817 	ldw	r3,-32(fp)
1001636c:	180690fa 	slli	r3,r3,3
10016370:	10c5883a 	add	r2,r2,r3
10016374:	10800104 	addi	r2,r2,4
10016378:	e0ffff17 	ldw	r3,-4(fp)
1001637c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10016380:	e0bffe17 	ldw	r2,-8(fp)
10016384:	10000526 	beq	r2,zero,1001639c <alt_iic_isr_register+0xb4>
10016388:	e0bff817 	ldw	r2,-32(fp)
1001638c:	e13ffc17 	ldw	r4,-16(fp)
10016390:	100b883a 	mov	r5,r2
10016394:	00161580 	call	10016158 <alt_ic_irq_enable>
10016398:	00000406 	br	100163ac <alt_iic_isr_register+0xc4>
1001639c:	e0bff817 	ldw	r2,-32(fp)
100163a0:	e13ffc17 	ldw	r4,-16(fp)
100163a4:	100b883a 	mov	r5,r2
100163a8:	00161f80 	call	100161f8 <alt_ic_irq_disable>
100163ac:	e0bff715 	stw	r2,-36(fp)
100163b0:	e0bff917 	ldw	r2,-28(fp)
100163b4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100163b8:	e0bffb17 	ldw	r2,-20(fp)
100163bc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
100163c0:	e0bff717 	ldw	r2,-36(fp)
}
100163c4:	e037883a 	mov	sp,fp
100163c8:	dfc00117 	ldw	ra,4(sp)
100163cc:	df000017 	ldw	fp,0(sp)
100163d0:	dec00204 	addi	sp,sp,8
100163d4:	f800283a 	ret

100163d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
100163d8:	defff804 	addi	sp,sp,-32
100163dc:	dfc00715 	stw	ra,28(sp)
100163e0:	df000615 	stw	fp,24(sp)
100163e4:	dc000515 	stw	r16,20(sp)
100163e8:	df000604 	addi	fp,sp,24
100163ec:	e13ffb15 	stw	r4,-20(fp)
100163f0:	e17ffc15 	stw	r5,-16(fp)
100163f4:	e1bffd15 	stw	r6,-12(fp)
100163f8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
100163fc:	e13ffc17 	ldw	r4,-16(fp)
10016400:	e17ffd17 	ldw	r5,-12(fp)
10016404:	e1bffe17 	ldw	r6,-8(fp)
10016408:	00166740 	call	10016674 <open>
1001640c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10016410:	e0bffa17 	ldw	r2,-24(fp)
10016414:	10002216 	blt	r2,zero,100164a0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10016418:	040400b4 	movhi	r16,4098
1001641c:	84275204 	addi	r16,r16,-25272
10016420:	e0bffa17 	ldw	r2,-24(fp)
10016424:	1009883a 	mov	r4,r2
10016428:	01400304 	movi	r5,12
1001642c:	0006df00 	call	10006df0 <__mulsi3>
10016430:	8085883a 	add	r2,r16,r2
10016434:	10c00017 	ldw	r3,0(r2)
10016438:	e0bffb17 	ldw	r2,-20(fp)
1001643c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10016440:	040400b4 	movhi	r16,4098
10016444:	84275204 	addi	r16,r16,-25272
10016448:	e0bffa17 	ldw	r2,-24(fp)
1001644c:	1009883a 	mov	r4,r2
10016450:	01400304 	movi	r5,12
10016454:	0006df00 	call	10006df0 <__mulsi3>
10016458:	8085883a 	add	r2,r16,r2
1001645c:	10800104 	addi	r2,r2,4
10016460:	10c00017 	ldw	r3,0(r2)
10016464:	e0bffb17 	ldw	r2,-20(fp)
10016468:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1001646c:	040400b4 	movhi	r16,4098
10016470:	84275204 	addi	r16,r16,-25272
10016474:	e0bffa17 	ldw	r2,-24(fp)
10016478:	1009883a 	mov	r4,r2
1001647c:	01400304 	movi	r5,12
10016480:	0006df00 	call	10006df0 <__mulsi3>
10016484:	8085883a 	add	r2,r16,r2
10016488:	10800204 	addi	r2,r2,8
1001648c:	10c00017 	ldw	r3,0(r2)
10016490:	e0bffb17 	ldw	r2,-20(fp)
10016494:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10016498:	e13ffa17 	ldw	r4,-24(fp)
1001649c:	0014ed40 	call	10014ed4 <alt_release_fd>
  }
} 
100164a0:	e6ffff04 	addi	sp,fp,-4
100164a4:	dfc00217 	ldw	ra,8(sp)
100164a8:	df000117 	ldw	fp,4(sp)
100164ac:	dc000017 	ldw	r16,0(sp)
100164b0:	dec00304 	addi	sp,sp,12
100164b4:	f800283a 	ret

100164b8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
100164b8:	defffb04 	addi	sp,sp,-20
100164bc:	dfc00415 	stw	ra,16(sp)
100164c0:	df000315 	stw	fp,12(sp)
100164c4:	df000304 	addi	fp,sp,12
100164c8:	e13ffd15 	stw	r4,-12(fp)
100164cc:	e17ffe15 	stw	r5,-8(fp)
100164d0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
100164d4:	010400b4 	movhi	r4,4098
100164d8:	21275504 	addi	r4,r4,-25260
100164dc:	e17ffd17 	ldw	r5,-12(fp)
100164e0:	01800044 	movi	r6,1
100164e4:	01c07fc4 	movi	r7,511
100164e8:	00163d80 	call	100163d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
100164ec:	010400b4 	movhi	r4,4098
100164f0:	21275204 	addi	r4,r4,-25272
100164f4:	e17ffe17 	ldw	r5,-8(fp)
100164f8:	000d883a 	mov	r6,zero
100164fc:	01c07fc4 	movi	r7,511
10016500:	00163d80 	call	100163d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10016504:	010400b4 	movhi	r4,4098
10016508:	21275804 	addi	r4,r4,-25248
1001650c:	e17fff17 	ldw	r5,-4(fp)
10016510:	01800044 	movi	r6,1
10016514:	01c07fc4 	movi	r7,511
10016518:	00163d80 	call	100163d8 <alt_open_fd>
}  
1001651c:	e037883a 	mov	sp,fp
10016520:	dfc00117 	ldw	ra,4(sp)
10016524:	df000017 	ldw	fp,0(sp)
10016528:	dec00204 	addi	sp,sp,8
1001652c:	f800283a 	ret

10016530 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10016530:	defffe04 	addi	sp,sp,-8
10016534:	dfc00115 	stw	ra,4(sp)
10016538:	df000015 	stw	fp,0(sp)
1001653c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10016540:	008400b4 	movhi	r2,4098
10016544:	10abd504 	addi	r2,r2,-20652
10016548:	10800017 	ldw	r2,0(r2)
1001654c:	10000526 	beq	r2,zero,10016564 <alt_get_errno+0x34>
10016550:	008400b4 	movhi	r2,4098
10016554:	10abd504 	addi	r2,r2,-20652
10016558:	10800017 	ldw	r2,0(r2)
1001655c:	103ee83a 	callr	r2
10016560:	00000206 	br	1001656c <alt_get_errno+0x3c>
10016564:	008400b4 	movhi	r2,4098
10016568:	10b29c04 	addi	r2,r2,-13712
}
1001656c:	e037883a 	mov	sp,fp
10016570:	dfc00117 	ldw	ra,4(sp)
10016574:	df000017 	ldw	fp,0(sp)
10016578:	dec00204 	addi	sp,sp,8
1001657c:	f800283a 	ret

10016580 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10016580:	defffb04 	addi	sp,sp,-20
10016584:	dfc00415 	stw	ra,16(sp)
10016588:	df000315 	stw	fp,12(sp)
1001658c:	dc000215 	stw	r16,8(sp)
10016590:	df000304 	addi	fp,sp,12
10016594:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10016598:	e0bffe17 	ldw	r2,-8(fp)
1001659c:	10800217 	ldw	r2,8(r2)
100165a0:	10d00034 	orhi	r3,r2,16384
100165a4:	e0bffe17 	ldw	r2,-8(fp)
100165a8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100165ac:	e03ffd15 	stw	zero,-12(fp)
100165b0:	00002306 	br	10016640 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100165b4:	040400b4 	movhi	r16,4098
100165b8:	84275204 	addi	r16,r16,-25272
100165bc:	e0bffd17 	ldw	r2,-12(fp)
100165c0:	1009883a 	mov	r4,r2
100165c4:	01400304 	movi	r5,12
100165c8:	0006df00 	call	10006df0 <__mulsi3>
100165cc:	8085883a 	add	r2,r16,r2
100165d0:	10c00017 	ldw	r3,0(r2)
100165d4:	e0bffe17 	ldw	r2,-8(fp)
100165d8:	10800017 	ldw	r2,0(r2)
100165dc:	1880151e 	bne	r3,r2,10016634 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100165e0:	040400b4 	movhi	r16,4098
100165e4:	84275204 	addi	r16,r16,-25272
100165e8:	e0bffd17 	ldw	r2,-12(fp)
100165ec:	1009883a 	mov	r4,r2
100165f0:	01400304 	movi	r5,12
100165f4:	0006df00 	call	10006df0 <__mulsi3>
100165f8:	8085883a 	add	r2,r16,r2
100165fc:	10800204 	addi	r2,r2,8
10016600:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10016604:	10000b0e 	bge	r2,zero,10016634 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10016608:	e13ffd17 	ldw	r4,-12(fp)
1001660c:	01400304 	movi	r5,12
10016610:	0006df00 	call	10006df0 <__mulsi3>
10016614:	1007883a 	mov	r3,r2
10016618:	008400b4 	movhi	r2,4098
1001661c:	10a75204 	addi	r2,r2,-25272
10016620:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10016624:	e0bffe17 	ldw	r2,-8(fp)
10016628:	18800226 	beq	r3,r2,10016634 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1001662c:	00bffcc4 	movi	r2,-13
10016630:	00000a06 	br	1001665c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10016634:	e0bffd17 	ldw	r2,-12(fp)
10016638:	10800044 	addi	r2,r2,1
1001663c:	e0bffd15 	stw	r2,-12(fp)
10016640:	008400b4 	movhi	r2,4098
10016644:	10abd404 	addi	r2,r2,-20656
10016648:	10800017 	ldw	r2,0(r2)
1001664c:	1007883a 	mov	r3,r2
10016650:	e0bffd17 	ldw	r2,-12(fp)
10016654:	18bfd72e 	bgeu	r3,r2,100165b4 <__alt_data_end+0xf80165b4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10016658:	0005883a 	mov	r2,zero
}
1001665c:	e6ffff04 	addi	sp,fp,-4
10016660:	dfc00217 	ldw	ra,8(sp)
10016664:	df000117 	ldw	fp,4(sp)
10016668:	dc000017 	ldw	r16,0(sp)
1001666c:	dec00304 	addi	sp,sp,12
10016670:	f800283a 	ret

10016674 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10016674:	defff604 	addi	sp,sp,-40
10016678:	dfc00915 	stw	ra,36(sp)
1001667c:	df000815 	stw	fp,32(sp)
10016680:	df000804 	addi	fp,sp,32
10016684:	e13ffd15 	stw	r4,-12(fp)
10016688:	e17ffe15 	stw	r5,-8(fp)
1001668c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10016690:	00bfffc4 	movi	r2,-1
10016694:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10016698:	00bffb44 	movi	r2,-19
1001669c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
100166a0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
100166a4:	e13ffd17 	ldw	r4,-12(fp)
100166a8:	014400b4 	movhi	r5,4098
100166ac:	296bd204 	addi	r5,r5,-20664
100166b0:	00169900 	call	10016990 <alt_find_dev>
100166b4:	e0bff815 	stw	r2,-32(fp)
100166b8:	e0bff817 	ldw	r2,-32(fp)
100166bc:	1000051e 	bne	r2,zero,100166d4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
100166c0:	e13ffd17 	ldw	r4,-12(fp)
100166c4:	0016a200 	call	10016a20 <alt_find_file>
100166c8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
100166cc:	00800044 	movi	r2,1
100166d0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
100166d4:	e0bff817 	ldw	r2,-32(fp)
100166d8:	10002b26 	beq	r2,zero,10016788 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
100166dc:	e13ff817 	ldw	r4,-32(fp)
100166e0:	0016b340 	call	10016b34 <alt_get_fd>
100166e4:	e0bff915 	stw	r2,-28(fp)
100166e8:	e0bff917 	ldw	r2,-28(fp)
100166ec:	1000030e 	bge	r2,zero,100166fc <open+0x88>
    {
      status = index;
100166f0:	e0bff917 	ldw	r2,-28(fp)
100166f4:	e0bffa15 	stw	r2,-24(fp)
100166f8:	00002506 	br	10016790 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
100166fc:	e13ff917 	ldw	r4,-28(fp)
10016700:	01400304 	movi	r5,12
10016704:	0006df00 	call	10006df0 <__mulsi3>
10016708:	1007883a 	mov	r3,r2
1001670c:	008400b4 	movhi	r2,4098
10016710:	10a75204 	addi	r2,r2,-25272
10016714:	1885883a 	add	r2,r3,r2
10016718:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1001671c:	e0fffe17 	ldw	r3,-8(fp)
10016720:	00900034 	movhi	r2,16384
10016724:	10bfffc4 	addi	r2,r2,-1
10016728:	1886703a 	and	r3,r3,r2
1001672c:	e0bffc17 	ldw	r2,-16(fp)
10016730:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10016734:	e0bffb17 	ldw	r2,-20(fp)
10016738:	1000051e 	bne	r2,zero,10016750 <open+0xdc>
1001673c:	e13ffc17 	ldw	r4,-16(fp)
10016740:	00165800 	call	10016580 <alt_file_locked>
10016744:	e0bffa15 	stw	r2,-24(fp)
10016748:	e0bffa17 	ldw	r2,-24(fp)
1001674c:	10001016 	blt	r2,zero,10016790 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10016750:	e0bff817 	ldw	r2,-32(fp)
10016754:	10800317 	ldw	r2,12(r2)
10016758:	10000826 	beq	r2,zero,1001677c <open+0x108>
1001675c:	e0bff817 	ldw	r2,-32(fp)
10016760:	10800317 	ldw	r2,12(r2)
10016764:	e13ffc17 	ldw	r4,-16(fp)
10016768:	e17ffd17 	ldw	r5,-12(fp)
1001676c:	e1bffe17 	ldw	r6,-8(fp)
10016770:	e1ffff17 	ldw	r7,-4(fp)
10016774:	103ee83a 	callr	r2
10016778:	00000106 	br	10016780 <open+0x10c>
1001677c:	0005883a 	mov	r2,zero
10016780:	e0bffa15 	stw	r2,-24(fp)
10016784:	00000206 	br	10016790 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10016788:	00bffb44 	movi	r2,-19
1001678c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10016790:	e0bffa17 	ldw	r2,-24(fp)
10016794:	1000090e 	bge	r2,zero,100167bc <open+0x148>
  {
    alt_release_fd (index);  
10016798:	e13ff917 	ldw	r4,-28(fp)
1001679c:	0014ed40 	call	10014ed4 <alt_release_fd>
    ALT_ERRNO = -status;
100167a0:	00165300 	call	10016530 <alt_get_errno>
100167a4:	1007883a 	mov	r3,r2
100167a8:	e0bffa17 	ldw	r2,-24(fp)
100167ac:	0085c83a 	sub	r2,zero,r2
100167b0:	18800015 	stw	r2,0(r3)
    return -1;
100167b4:	00bfffc4 	movi	r2,-1
100167b8:	00000106 	br	100167c0 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
100167bc:	e0bff917 	ldw	r2,-28(fp)
}
100167c0:	e037883a 	mov	sp,fp
100167c4:	dfc00117 	ldw	ra,4(sp)
100167c8:	df000017 	ldw	fp,0(sp)
100167cc:	dec00204 	addi	sp,sp,8
100167d0:	f800283a 	ret

100167d4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
100167d4:	defffa04 	addi	sp,sp,-24
100167d8:	df000515 	stw	fp,20(sp)
100167dc:	df000504 	addi	fp,sp,20
100167e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100167e4:	0005303a 	rdctl	r2,status
100167e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100167ec:	e0fffc17 	ldw	r3,-16(fp)
100167f0:	00bfff84 	movi	r2,-2
100167f4:	1884703a 	and	r2,r3,r2
100167f8:	1001703a 	wrctl	status,r2
  
  return context;
100167fc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10016800:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10016804:	e0bfff17 	ldw	r2,-4(fp)
10016808:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1001680c:	e0bffd17 	ldw	r2,-12(fp)
10016810:	10800017 	ldw	r2,0(r2)
10016814:	e0fffd17 	ldw	r3,-12(fp)
10016818:	18c00117 	ldw	r3,4(r3)
1001681c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10016820:	e0bffd17 	ldw	r2,-12(fp)
10016824:	10800117 	ldw	r2,4(r2)
10016828:	e0fffd17 	ldw	r3,-12(fp)
1001682c:	18c00017 	ldw	r3,0(r3)
10016830:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10016834:	e0bffd17 	ldw	r2,-12(fp)
10016838:	e0fffd17 	ldw	r3,-12(fp)
1001683c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10016840:	e0bffd17 	ldw	r2,-12(fp)
10016844:	e0fffd17 	ldw	r3,-12(fp)
10016848:	10c00015 	stw	r3,0(r2)
1001684c:	e0bffb17 	ldw	r2,-20(fp)
10016850:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10016854:	e0bffe17 	ldw	r2,-8(fp)
10016858:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1001685c:	e037883a 	mov	sp,fp
10016860:	df000017 	ldw	fp,0(sp)
10016864:	dec00104 	addi	sp,sp,4
10016868:	f800283a 	ret

1001686c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1001686c:	defffb04 	addi	sp,sp,-20
10016870:	dfc00415 	stw	ra,16(sp)
10016874:	df000315 	stw	fp,12(sp)
10016878:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1001687c:	d0a00e17 	ldw	r2,-32712(gp)
10016880:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10016884:	d0a6d817 	ldw	r2,-25760(gp)
10016888:	10800044 	addi	r2,r2,1
1001688c:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10016890:	00002e06 	br	1001694c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10016894:	e0bffd17 	ldw	r2,-12(fp)
10016898:	10800017 	ldw	r2,0(r2)
1001689c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
100168a0:	e0bffd17 	ldw	r2,-12(fp)
100168a4:	10800403 	ldbu	r2,16(r2)
100168a8:	10803fcc 	andi	r2,r2,255
100168ac:	10000426 	beq	r2,zero,100168c0 <alt_tick+0x54>
100168b0:	d0a6d817 	ldw	r2,-25760(gp)
100168b4:	1000021e 	bne	r2,zero,100168c0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
100168b8:	e0bffd17 	ldw	r2,-12(fp)
100168bc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
100168c0:	e0bffd17 	ldw	r2,-12(fp)
100168c4:	10800217 	ldw	r2,8(r2)
100168c8:	d0e6d817 	ldw	r3,-25760(gp)
100168cc:	18801d36 	bltu	r3,r2,10016944 <alt_tick+0xd8>
100168d0:	e0bffd17 	ldw	r2,-12(fp)
100168d4:	10800403 	ldbu	r2,16(r2)
100168d8:	10803fcc 	andi	r2,r2,255
100168dc:	1000191e 	bne	r2,zero,10016944 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
100168e0:	e0bffd17 	ldw	r2,-12(fp)
100168e4:	10800317 	ldw	r2,12(r2)
100168e8:	e0fffd17 	ldw	r3,-12(fp)
100168ec:	18c00517 	ldw	r3,20(r3)
100168f0:	1809883a 	mov	r4,r3
100168f4:	103ee83a 	callr	r2
100168f8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
100168fc:	e0bfff17 	ldw	r2,-4(fp)
10016900:	1000031e 	bne	r2,zero,10016910 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10016904:	e13ffd17 	ldw	r4,-12(fp)
10016908:	00167d40 	call	100167d4 <alt_alarm_stop>
1001690c:	00000d06 	br	10016944 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10016910:	e0bffd17 	ldw	r2,-12(fp)
10016914:	10c00217 	ldw	r3,8(r2)
10016918:	e0bfff17 	ldw	r2,-4(fp)
1001691c:	1887883a 	add	r3,r3,r2
10016920:	e0bffd17 	ldw	r2,-12(fp)
10016924:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10016928:	e0bffd17 	ldw	r2,-12(fp)
1001692c:	10c00217 	ldw	r3,8(r2)
10016930:	d0a6d817 	ldw	r2,-25760(gp)
10016934:	1880032e 	bgeu	r3,r2,10016944 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10016938:	e0bffd17 	ldw	r2,-12(fp)
1001693c:	00c00044 	movi	r3,1
10016940:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10016944:	e0bffe17 	ldw	r2,-8(fp)
10016948:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1001694c:	e0fffd17 	ldw	r3,-12(fp)
10016950:	d0a00e04 	addi	r2,gp,-32712
10016954:	18bfcf1e 	bne	r3,r2,10016894 <__alt_data_end+0xf8016894>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10016958:	0001883a 	nop
}
1001695c:	e037883a 	mov	sp,fp
10016960:	dfc00117 	ldw	ra,4(sp)
10016964:	df000017 	ldw	fp,0(sp)
10016968:	dec00204 	addi	sp,sp,8
1001696c:	f800283a 	ret

10016970 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10016970:	deffff04 	addi	sp,sp,-4
10016974:	df000015 	stw	fp,0(sp)
10016978:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1001697c:	000170fa 	wrctl	ienable,zero
}
10016980:	e037883a 	mov	sp,fp
10016984:	df000017 	ldw	fp,0(sp)
10016988:	dec00104 	addi	sp,sp,4
1001698c:	f800283a 	ret

10016990 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10016990:	defffa04 	addi	sp,sp,-24
10016994:	dfc00515 	stw	ra,20(sp)
10016998:	df000415 	stw	fp,16(sp)
1001699c:	df000404 	addi	fp,sp,16
100169a0:	e13ffe15 	stw	r4,-8(fp)
100169a4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
100169a8:	e0bfff17 	ldw	r2,-4(fp)
100169ac:	10800017 	ldw	r2,0(r2)
100169b0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
100169b4:	e13ffe17 	ldw	r4,-8(fp)
100169b8:	00092400 	call	10009240 <strlen>
100169bc:	10800044 	addi	r2,r2,1
100169c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100169c4:	00000d06 	br	100169fc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
100169c8:	e0bffc17 	ldw	r2,-16(fp)
100169cc:	10c00217 	ldw	r3,8(r2)
100169d0:	e0bffd17 	ldw	r2,-12(fp)
100169d4:	1809883a 	mov	r4,r3
100169d8:	e17ffe17 	ldw	r5,-8(fp)
100169dc:	100d883a 	mov	r6,r2
100169e0:	0016c540 	call	10016c54 <memcmp>
100169e4:	1000021e 	bne	r2,zero,100169f0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
100169e8:	e0bffc17 	ldw	r2,-16(fp)
100169ec:	00000706 	br	10016a0c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
100169f0:	e0bffc17 	ldw	r2,-16(fp)
100169f4:	10800017 	ldw	r2,0(r2)
100169f8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100169fc:	e0fffc17 	ldw	r3,-16(fp)
10016a00:	e0bfff17 	ldw	r2,-4(fp)
10016a04:	18bff01e 	bne	r3,r2,100169c8 <__alt_data_end+0xf80169c8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10016a08:	0005883a 	mov	r2,zero
}
10016a0c:	e037883a 	mov	sp,fp
10016a10:	dfc00117 	ldw	ra,4(sp)
10016a14:	df000017 	ldw	fp,0(sp)
10016a18:	dec00204 	addi	sp,sp,8
10016a1c:	f800283a 	ret

10016a20 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10016a20:	defffb04 	addi	sp,sp,-20
10016a24:	dfc00415 	stw	ra,16(sp)
10016a28:	df000315 	stw	fp,12(sp)
10016a2c:	df000304 	addi	fp,sp,12
10016a30:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10016a34:	008400b4 	movhi	r2,4098
10016a38:	10abd004 	addi	r2,r2,-20672
10016a3c:	10800017 	ldw	r2,0(r2)
10016a40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10016a44:	00003106 	br	10016b0c <alt_find_file+0xec>
  {
    len = strlen(next->name);
10016a48:	e0bffd17 	ldw	r2,-12(fp)
10016a4c:	10800217 	ldw	r2,8(r2)
10016a50:	1009883a 	mov	r4,r2
10016a54:	00092400 	call	10009240 <strlen>
10016a58:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10016a5c:	e0bffd17 	ldw	r2,-12(fp)
10016a60:	10c00217 	ldw	r3,8(r2)
10016a64:	e0bffe17 	ldw	r2,-8(fp)
10016a68:	10bfffc4 	addi	r2,r2,-1
10016a6c:	1885883a 	add	r2,r3,r2
10016a70:	10800003 	ldbu	r2,0(r2)
10016a74:	10803fcc 	andi	r2,r2,255
10016a78:	1080201c 	xori	r2,r2,128
10016a7c:	10bfe004 	addi	r2,r2,-128
10016a80:	10800bd8 	cmpnei	r2,r2,47
10016a84:	1000031e 	bne	r2,zero,10016a94 <alt_find_file+0x74>
    {
      len -= 1;
10016a88:	e0bffe17 	ldw	r2,-8(fp)
10016a8c:	10bfffc4 	addi	r2,r2,-1
10016a90:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10016a94:	e0bffe17 	ldw	r2,-8(fp)
10016a98:	e0ffff17 	ldw	r3,-4(fp)
10016a9c:	1885883a 	add	r2,r3,r2
10016aa0:	10800003 	ldbu	r2,0(r2)
10016aa4:	10803fcc 	andi	r2,r2,255
10016aa8:	1080201c 	xori	r2,r2,128
10016aac:	10bfe004 	addi	r2,r2,-128
10016ab0:	10800be0 	cmpeqi	r2,r2,47
10016ab4:	1000081e 	bne	r2,zero,10016ad8 <alt_find_file+0xb8>
10016ab8:	e0bffe17 	ldw	r2,-8(fp)
10016abc:	e0ffff17 	ldw	r3,-4(fp)
10016ac0:	1885883a 	add	r2,r3,r2
10016ac4:	10800003 	ldbu	r2,0(r2)
10016ac8:	10803fcc 	andi	r2,r2,255
10016acc:	1080201c 	xori	r2,r2,128
10016ad0:	10bfe004 	addi	r2,r2,-128
10016ad4:	10000a1e 	bne	r2,zero,10016b00 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10016ad8:	e0bffd17 	ldw	r2,-12(fp)
10016adc:	10c00217 	ldw	r3,8(r2)
10016ae0:	e0bffe17 	ldw	r2,-8(fp)
10016ae4:	1809883a 	mov	r4,r3
10016ae8:	e17fff17 	ldw	r5,-4(fp)
10016aec:	100d883a 	mov	r6,r2
10016af0:	0016c540 	call	10016c54 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10016af4:	1000021e 	bne	r2,zero,10016b00 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10016af8:	e0bffd17 	ldw	r2,-12(fp)
10016afc:	00000806 	br	10016b20 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10016b00:	e0bffd17 	ldw	r2,-12(fp)
10016b04:	10800017 	ldw	r2,0(r2)
10016b08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10016b0c:	e0fffd17 	ldw	r3,-12(fp)
10016b10:	008400b4 	movhi	r2,4098
10016b14:	10abd004 	addi	r2,r2,-20672
10016b18:	18bfcb1e 	bne	r3,r2,10016a48 <__alt_data_end+0xf8016a48>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10016b1c:	0005883a 	mov	r2,zero
}
10016b20:	e037883a 	mov	sp,fp
10016b24:	dfc00117 	ldw	ra,4(sp)
10016b28:	df000017 	ldw	fp,0(sp)
10016b2c:	dec00204 	addi	sp,sp,8
10016b30:	f800283a 	ret

10016b34 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10016b34:	defffa04 	addi	sp,sp,-24
10016b38:	dfc00515 	stw	ra,20(sp)
10016b3c:	df000415 	stw	fp,16(sp)
10016b40:	dc000315 	stw	r16,12(sp)
10016b44:	df000404 	addi	fp,sp,16
10016b48:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10016b4c:	00bffa04 	movi	r2,-24
10016b50:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10016b54:	e03ffc15 	stw	zero,-16(fp)
10016b58:	00002106 	br	10016be0 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10016b5c:	040400b4 	movhi	r16,4098
10016b60:	84275204 	addi	r16,r16,-25272
10016b64:	e0bffc17 	ldw	r2,-16(fp)
10016b68:	1009883a 	mov	r4,r2
10016b6c:	01400304 	movi	r5,12
10016b70:	0006df00 	call	10006df0 <__mulsi3>
10016b74:	8085883a 	add	r2,r16,r2
10016b78:	10800017 	ldw	r2,0(r2)
10016b7c:	1000151e 	bne	r2,zero,10016bd4 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10016b80:	040400b4 	movhi	r16,4098
10016b84:	84275204 	addi	r16,r16,-25272
10016b88:	e0bffc17 	ldw	r2,-16(fp)
10016b8c:	1009883a 	mov	r4,r2
10016b90:	01400304 	movi	r5,12
10016b94:	0006df00 	call	10006df0 <__mulsi3>
10016b98:	8085883a 	add	r2,r16,r2
10016b9c:	e0fffe17 	ldw	r3,-8(fp)
10016ba0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10016ba4:	008400b4 	movhi	r2,4098
10016ba8:	10abd404 	addi	r2,r2,-20656
10016bac:	10c00017 	ldw	r3,0(r2)
10016bb0:	e0bffc17 	ldw	r2,-16(fp)
10016bb4:	1880040e 	bge	r3,r2,10016bc8 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10016bb8:	008400b4 	movhi	r2,4098
10016bbc:	10abd404 	addi	r2,r2,-20656
10016bc0:	e0fffc17 	ldw	r3,-16(fp)
10016bc4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10016bc8:	e0bffc17 	ldw	r2,-16(fp)
10016bcc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10016bd0:	00000606 	br	10016bec <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10016bd4:	e0bffc17 	ldw	r2,-16(fp)
10016bd8:	10800044 	addi	r2,r2,1
10016bdc:	e0bffc15 	stw	r2,-16(fp)
10016be0:	e0bffc17 	ldw	r2,-16(fp)
10016be4:	10800810 	cmplti	r2,r2,32
10016be8:	103fdc1e 	bne	r2,zero,10016b5c <__alt_data_end+0xf8016b5c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10016bec:	e0bffd17 	ldw	r2,-12(fp)
}
10016bf0:	e6ffff04 	addi	sp,fp,-4
10016bf4:	dfc00217 	ldw	ra,8(sp)
10016bf8:	df000117 	ldw	fp,4(sp)
10016bfc:	dc000017 	ldw	r16,0(sp)
10016c00:	dec00304 	addi	sp,sp,12
10016c04:	f800283a 	ret

10016c08 <atexit>:
10016c08:	200b883a 	mov	r5,r4
10016c0c:	000d883a 	mov	r6,zero
10016c10:	0009883a 	mov	r4,zero
10016c14:	000f883a 	mov	r7,zero
10016c18:	0016cd01 	jmpi	10016cd0 <__register_exitproc>

10016c1c <exit>:
10016c1c:	defffe04 	addi	sp,sp,-8
10016c20:	000b883a 	mov	r5,zero
10016c24:	dc000015 	stw	r16,0(sp)
10016c28:	dfc00115 	stw	ra,4(sp)
10016c2c:	2021883a 	mov	r16,r4
10016c30:	0016de40 	call	10016de4 <__call_exitprocs>
10016c34:	008400b4 	movhi	r2,4098
10016c38:	10abca04 	addi	r2,r2,-20696
10016c3c:	11000017 	ldw	r4,0(r2)
10016c40:	20800f17 	ldw	r2,60(r4)
10016c44:	10000126 	beq	r2,zero,10016c4c <exit+0x30>
10016c48:	103ee83a 	callr	r2
10016c4c:	8009883a 	mov	r4,r16
10016c50:	0016f780 	call	10016f78 <_exit>

10016c54 <memcmp>:
10016c54:	01c000c4 	movi	r7,3
10016c58:	3980192e 	bgeu	r7,r6,10016cc0 <memcmp+0x6c>
10016c5c:	2144b03a 	or	r2,r4,r5
10016c60:	11c4703a 	and	r2,r2,r7
10016c64:	10000f26 	beq	r2,zero,10016ca4 <memcmp+0x50>
10016c68:	20800003 	ldbu	r2,0(r4)
10016c6c:	28c00003 	ldbu	r3,0(r5)
10016c70:	10c0151e 	bne	r2,r3,10016cc8 <memcmp+0x74>
10016c74:	31bfff84 	addi	r6,r6,-2
10016c78:	01ffffc4 	movi	r7,-1
10016c7c:	00000406 	br	10016c90 <memcmp+0x3c>
10016c80:	20800003 	ldbu	r2,0(r4)
10016c84:	28c00003 	ldbu	r3,0(r5)
10016c88:	31bfffc4 	addi	r6,r6,-1
10016c8c:	10c00e1e 	bne	r2,r3,10016cc8 <memcmp+0x74>
10016c90:	21000044 	addi	r4,r4,1
10016c94:	29400044 	addi	r5,r5,1
10016c98:	31fff91e 	bne	r6,r7,10016c80 <__alt_data_end+0xf8016c80>
10016c9c:	0005883a 	mov	r2,zero
10016ca0:	f800283a 	ret
10016ca4:	20c00017 	ldw	r3,0(r4)
10016ca8:	28800017 	ldw	r2,0(r5)
10016cac:	1880041e 	bne	r3,r2,10016cc0 <memcmp+0x6c>
10016cb0:	31bfff04 	addi	r6,r6,-4
10016cb4:	21000104 	addi	r4,r4,4
10016cb8:	29400104 	addi	r5,r5,4
10016cbc:	39bff936 	bltu	r7,r6,10016ca4 <__alt_data_end+0xf8016ca4>
10016cc0:	303fe91e 	bne	r6,zero,10016c68 <__alt_data_end+0xf8016c68>
10016cc4:	003ff506 	br	10016c9c <__alt_data_end+0xf8016c9c>
10016cc8:	10c5c83a 	sub	r2,r2,r3
10016ccc:	f800283a 	ret

10016cd0 <__register_exitproc>:
10016cd0:	008400b4 	movhi	r2,4098
10016cd4:	defffa04 	addi	sp,sp,-24
10016cd8:	10abca04 	addi	r2,r2,-20696
10016cdc:	dc000315 	stw	r16,12(sp)
10016ce0:	14000017 	ldw	r16,0(r2)
10016ce4:	dc400415 	stw	r17,16(sp)
10016ce8:	dfc00515 	stw	ra,20(sp)
10016cec:	80805217 	ldw	r2,328(r16)
10016cf0:	2023883a 	mov	r17,r4
10016cf4:	10003626 	beq	r2,zero,10016dd0 <__register_exitproc+0x100>
10016cf8:	10c00117 	ldw	r3,4(r2)
10016cfc:	010007c4 	movi	r4,31
10016d00:	20c00e16 	blt	r4,r3,10016d3c <__register_exitproc+0x6c>
10016d04:	1a400044 	addi	r9,r3,1
10016d08:	8800211e 	bne	r17,zero,10016d90 <__register_exitproc+0xc0>
10016d0c:	18c00084 	addi	r3,r3,2
10016d10:	18c7883a 	add	r3,r3,r3
10016d14:	18c7883a 	add	r3,r3,r3
10016d18:	12400115 	stw	r9,4(r2)
10016d1c:	10c7883a 	add	r3,r2,r3
10016d20:	19400015 	stw	r5,0(r3)
10016d24:	0005883a 	mov	r2,zero
10016d28:	dfc00517 	ldw	ra,20(sp)
10016d2c:	dc400417 	ldw	r17,16(sp)
10016d30:	dc000317 	ldw	r16,12(sp)
10016d34:	dec00604 	addi	sp,sp,24
10016d38:	f800283a 	ret
10016d3c:	00800034 	movhi	r2,0
10016d40:	10800004 	addi	r2,r2,0
10016d44:	10002526 	beq	r2,zero,10016ddc <__register_exitproc+0x10c>
10016d48:	01006404 	movi	r4,400
10016d4c:	d9400015 	stw	r5,0(sp)
10016d50:	d9800115 	stw	r6,4(sp)
10016d54:	d9c00215 	stw	r7,8(sp)
10016d58:	00000000 	call	10000000 <__alt_mem_sdram>
10016d5c:	d9400017 	ldw	r5,0(sp)
10016d60:	d9800117 	ldw	r6,4(sp)
10016d64:	d9c00217 	ldw	r7,8(sp)
10016d68:	10001c26 	beq	r2,zero,10016ddc <__register_exitproc+0x10c>
10016d6c:	80c05217 	ldw	r3,328(r16)
10016d70:	10000115 	stw	zero,4(r2)
10016d74:	02400044 	movi	r9,1
10016d78:	10c00015 	stw	r3,0(r2)
10016d7c:	80805215 	stw	r2,328(r16)
10016d80:	10006215 	stw	zero,392(r2)
10016d84:	10006315 	stw	zero,396(r2)
10016d88:	0007883a 	mov	r3,zero
10016d8c:	883fdf26 	beq	r17,zero,10016d0c <__alt_data_end+0xf8016d0c>
10016d90:	18d1883a 	add	r8,r3,r3
10016d94:	4211883a 	add	r8,r8,r8
10016d98:	1211883a 	add	r8,r2,r8
10016d9c:	41802215 	stw	r6,136(r8)
10016da0:	01000044 	movi	r4,1
10016da4:	11806217 	ldw	r6,392(r2)
10016da8:	20c8983a 	sll	r4,r4,r3
10016dac:	310cb03a 	or	r6,r6,r4
10016db0:	11806215 	stw	r6,392(r2)
10016db4:	41c04215 	stw	r7,264(r8)
10016db8:	01800084 	movi	r6,2
10016dbc:	89bfd31e 	bne	r17,r6,10016d0c <__alt_data_end+0xf8016d0c>
10016dc0:	11806317 	ldw	r6,396(r2)
10016dc4:	3108b03a 	or	r4,r6,r4
10016dc8:	11006315 	stw	r4,396(r2)
10016dcc:	003fcf06 	br	10016d0c <__alt_data_end+0xf8016d0c>
10016dd0:	80805304 	addi	r2,r16,332
10016dd4:	80805215 	stw	r2,328(r16)
10016dd8:	003fc706 	br	10016cf8 <__alt_data_end+0xf8016cf8>
10016ddc:	00bfffc4 	movi	r2,-1
10016de0:	003fd106 	br	10016d28 <__alt_data_end+0xf8016d28>

10016de4 <__call_exitprocs>:
10016de4:	008400b4 	movhi	r2,4098
10016de8:	10abca04 	addi	r2,r2,-20696
10016dec:	10800017 	ldw	r2,0(r2)
10016df0:	defff404 	addi	sp,sp,-48
10016df4:	dd800815 	stw	r22,32(sp)
10016df8:	d8800015 	stw	r2,0(sp)
10016dfc:	10805204 	addi	r2,r2,328
10016e00:	dd000615 	stw	r20,24(sp)
10016e04:	dc800415 	stw	r18,16(sp)
10016e08:	dfc00b15 	stw	ra,44(sp)
10016e0c:	df000a15 	stw	fp,40(sp)
10016e10:	ddc00915 	stw	r23,36(sp)
10016e14:	dd400715 	stw	r21,28(sp)
10016e18:	dcc00515 	stw	r19,20(sp)
10016e1c:	dc400315 	stw	r17,12(sp)
10016e20:	dc000215 	stw	r16,8(sp)
10016e24:	2025883a 	mov	r18,r4
10016e28:	2829883a 	mov	r20,r5
10016e2c:	d8800115 	stw	r2,4(sp)
10016e30:	05bfffc4 	movi	r22,-1
10016e34:	d8800017 	ldw	r2,0(sp)
10016e38:	14c05217 	ldw	r19,328(r2)
10016e3c:	98001d26 	beq	r19,zero,10016eb4 <__call_exitprocs+0xd0>
10016e40:	dd400117 	ldw	r21,4(sp)
10016e44:	98800117 	ldw	r2,4(r19)
10016e48:	173fffc4 	addi	fp,r2,-1
10016e4c:	e0000d16 	blt	fp,zero,10016e84 <__call_exitprocs+0xa0>
10016e50:	14000044 	addi	r16,r2,1
10016e54:	8421883a 	add	r16,r16,r16
10016e58:	8421883a 	add	r16,r16,r16
10016e5c:	84402004 	addi	r17,r16,128
10016e60:	9c63883a 	add	r17,r19,r17
10016e64:	9c21883a 	add	r16,r19,r16
10016e68:	a0001e26 	beq	r20,zero,10016ee4 <__call_exitprocs+0x100>
10016e6c:	80804017 	ldw	r2,256(r16)
10016e70:	15001c26 	beq	r2,r20,10016ee4 <__call_exitprocs+0x100>
10016e74:	e73fffc4 	addi	fp,fp,-1
10016e78:	843fff04 	addi	r16,r16,-4
10016e7c:	8c7fff04 	addi	r17,r17,-4
10016e80:	e5bff91e 	bne	fp,r22,10016e68 <__alt_data_end+0xf8016e68>
10016e84:	00800034 	movhi	r2,0
10016e88:	10800004 	addi	r2,r2,0
10016e8c:	10000926 	beq	r2,zero,10016eb4 <__call_exitprocs+0xd0>
10016e90:	98800117 	ldw	r2,4(r19)
10016e94:	1000311e 	bne	r2,zero,10016f5c <__call_exitprocs+0x178>
10016e98:	98800017 	ldw	r2,0(r19)
10016e9c:	10003426 	beq	r2,zero,10016f70 <__call_exitprocs+0x18c>
10016ea0:	9809883a 	mov	r4,r19
10016ea4:	a8800015 	stw	r2,0(r21)
10016ea8:	00000000 	call	10000000 <__alt_mem_sdram>
10016eac:	acc00017 	ldw	r19,0(r21)
10016eb0:	983fe41e 	bne	r19,zero,10016e44 <__alt_data_end+0xf8016e44>
10016eb4:	dfc00b17 	ldw	ra,44(sp)
10016eb8:	df000a17 	ldw	fp,40(sp)
10016ebc:	ddc00917 	ldw	r23,36(sp)
10016ec0:	dd800817 	ldw	r22,32(sp)
10016ec4:	dd400717 	ldw	r21,28(sp)
10016ec8:	dd000617 	ldw	r20,24(sp)
10016ecc:	dcc00517 	ldw	r19,20(sp)
10016ed0:	dc800417 	ldw	r18,16(sp)
10016ed4:	dc400317 	ldw	r17,12(sp)
10016ed8:	dc000217 	ldw	r16,8(sp)
10016edc:	dec00c04 	addi	sp,sp,48
10016ee0:	f800283a 	ret
10016ee4:	98800117 	ldw	r2,4(r19)
10016ee8:	80c00017 	ldw	r3,0(r16)
10016eec:	10bfffc4 	addi	r2,r2,-1
10016ef0:	17001526 	beq	r2,fp,10016f48 <__call_exitprocs+0x164>
10016ef4:	80000015 	stw	zero,0(r16)
10016ef8:	183fde26 	beq	r3,zero,10016e74 <__alt_data_end+0xf8016e74>
10016efc:	00800044 	movi	r2,1
10016f00:	1708983a 	sll	r4,r2,fp
10016f04:	98806217 	ldw	r2,392(r19)
10016f08:	9dc00117 	ldw	r23,4(r19)
10016f0c:	2084703a 	and	r2,r4,r2
10016f10:	1000061e 	bne	r2,zero,10016f2c <__call_exitprocs+0x148>
10016f14:	183ee83a 	callr	r3
10016f18:	98800117 	ldw	r2,4(r19)
10016f1c:	15ffc51e 	bne	r2,r23,10016e34 <__alt_data_end+0xf8016e34>
10016f20:	a8800017 	ldw	r2,0(r21)
10016f24:	14ffd326 	beq	r2,r19,10016e74 <__alt_data_end+0xf8016e74>
10016f28:	003fc206 	br	10016e34 <__alt_data_end+0xf8016e34>
10016f2c:	98806317 	ldw	r2,396(r19)
10016f30:	2084703a 	and	r2,r4,r2
10016f34:	1000061e 	bne	r2,zero,10016f50 <__call_exitprocs+0x16c>
10016f38:	89400017 	ldw	r5,0(r17)
10016f3c:	9009883a 	mov	r4,r18
10016f40:	183ee83a 	callr	r3
10016f44:	003ff406 	br	10016f18 <__alt_data_end+0xf8016f18>
10016f48:	9f000115 	stw	fp,4(r19)
10016f4c:	003fea06 	br	10016ef8 <__alt_data_end+0xf8016ef8>
10016f50:	89000017 	ldw	r4,0(r17)
10016f54:	183ee83a 	callr	r3
10016f58:	003fef06 	br	10016f18 <__alt_data_end+0xf8016f18>
10016f5c:	98800017 	ldw	r2,0(r19)
10016f60:	982b883a 	mov	r21,r19
10016f64:	1027883a 	mov	r19,r2
10016f68:	983fb61e 	bne	r19,zero,10016e44 <__alt_data_end+0xf8016e44>
10016f6c:	003fd106 	br	10016eb4 <__alt_data_end+0xf8016eb4>
10016f70:	0005883a 	mov	r2,zero
10016f74:	003ffa06 	br	10016f60 <__alt_data_end+0xf8016f60>

10016f78 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10016f78:	defffd04 	addi	sp,sp,-12
10016f7c:	df000215 	stw	fp,8(sp)
10016f80:	df000204 	addi	fp,sp,8
10016f84:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10016f88:	0001883a 	nop
10016f8c:	e0bfff17 	ldw	r2,-4(fp)
10016f90:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10016f94:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10016f98:	10000226 	beq	r2,zero,10016fa4 <_exit+0x2c>
    ALT_SIM_FAIL();
10016f9c:	002af070 	cmpltui	zero,zero,43969
10016fa0:	00000106 	br	10016fa8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10016fa4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10016fa8:	003fff06 	br	10016fa8 <__alt_data_end+0xf8016fa8>
