
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00017ebc memsz 0x00017ebc flags r-x
    LOAD off    0x00018edc vaddr 0x10017edc paddr 0x100199c8 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x0001b4b4 vaddr 0x1001b4b4 paddr 0x1001b4b4 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001586c  100001bc  100001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000024b4  10015a28  10015a28  00016a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  10017edc  100199c8  00018edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  1001b4b4  1001b4b4  0001b4b4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0001a9c8  2**0
                  CONTENTS
  7 .sdram        00000000  1001b614  1001b614  0001a9c8  2**0
                  CONTENTS
  8 .comment      00000046  00000000  00000000  0001a9c8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000e68  00000000  00000000  0001aa10  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000255f0  00000000  00000000  0001b878  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009b25  00000000  00000000  00040e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c3d7  00000000  00000000  0004a98d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000024d4  00000000  00000000  00056d64  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000038c3  00000000  00000000  00059238  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000191aa  00000000  00000000  0005cafb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00075ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001890  00000000  00000000  00075ce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007ab4f  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0007ab52  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007ab5e  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007ab5f  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007ab60  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007ab64  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007ab68  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0007ab6c  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0007ab77  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0007ab82  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0007ab8d  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001b  00000000  00000000  0007ab98  2**0
                  CONTENTS, READONLY
 30 .jdi          00004442  00000000  00000000  0007abb3  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001bfc30  00000000  00000000  0007eff5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001bc l    d  .text	00000000 .text
10015a28 l    d  .rodata	00000000 .rodata
10017edc l    d  .rwdata	00000000 .rwdata
1001b4b4 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
1001b614 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
100001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
1001b4b4 l     O .bss	00000002 ctl_reg.3318
1001b4b6 l     O .bss	00000002 no_device.3319
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
10005740 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10017d22 l     O .rodata	00000010 zeroes.4181
10017d32 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10009fa4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1000bb4c l     F .text	00000008 __fp_lock
1000bb54 l     F .text	00000008 __fp_unlock
1000bb68 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10017edc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10018320 l     O .rwdata	00000020 lc_ctype_charset
10018300 l     O .rwdata	00000020 lc_message_charset
10018340 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10017d64 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000ef60 l     F .text	000000fc __sprint_r.part.0
10017e98 l     O .rodata	00000010 blanks.4125
10017e88 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
100131cc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
100132f4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10013320 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10013428 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10013524 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10013610 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
100137fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100199b8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
10013ab0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10013c00 l     F .text	00000038 alt_dev_reg
10018928 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10013edc l     F .text	00000204 altera_avalon_jtag_uart_irq
100140e0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100149b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10014e54 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10014fac l     F .text	00000050 alt_get_errno
10014ffc l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
1000e5a0 g     F .text	00000074 _mprec_log10
1000e68c g     F .text	0000008c __any_on
1001098c g     F .text	00000054 _isatty_r
10017d70 g     O .rodata	00000028 __mprec_tinytens
1001373c g     F .text	00000078 alt_main
10007b74 g     F .text	000000b8 _puts_r
1001b514 g     O .bss	00000100 alt_irq
100109e0 g     F .text	0000005c _lseek_r
100199c8 g       *ABS*	00000000 __flash_rwdata_start
10012d8c g     F .text	00000084 .hidden __eqdf2
1001b614 g       *ABS*	00000000 __alt_heap_start
10007b38 g     F .text	0000003c printf
10010c08 g     F .text	0000009c _wcrtomb_r
1000ee58 g     F .text	0000005c __sseek
1000beb0 g     F .text	00000010 __sinit
10010a98 g     F .text	00000154 __swbuf_r
1000c928 g     F .text	0000007c _setlocale_r
1000bd08 g     F .text	00000078 __sfmoreglue
100137d8 g     F .text	00000024 __malloc_unlock
10005644 g     F .text	00000080 UsbGetRetryCnt
1000d450 g     F .text	0000015c memmove
100001f8 g     F .text	00000050 IO_init
1000be98 g     F .text	00000018 _cleanup
1000d6d0 g     F .text	000000a8 _Balloc
100063e0 g     F .text	00000078 .hidden __fixsfsi
10012e10 g     F .text	000000e0 .hidden __gtdf2
100153ec g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10010934 g     F .text	00000058 _fstat_r
1001b4d0 g     O .bss	00000004 errno
1000edd4 g     F .text	00000008 __seofread
1001b4d8 g     O .bss	00000004 alt_argv
10021988 g       *ABS*	00000000 _gp
10013a80 g     F .text	00000030 usleep
10005ee4 g     F .text	000004fc .hidden __subsf3
100187a8 g     O .rwdata	00000180 alt_fd_list
1001540c g     F .text	00000090 alt_find_dev
100079d4 g     F .text	00000138 memcpy
1000bb5c g     F .text	0000000c _cleanup_r
10013058 g     F .text	000000d0 .hidden __floatsidf
10014f34 g     F .text	00000078 alt_io_redirect
10012ef0 g     F .text	000000e0 .hidden __ltdf2
10015a28 g       *ABS*	00000000 __DTOR_END__
10007c2c g     F .text	00000014 puts
1000ecb8 g     F .text	00000074 __fpclassifyd
1000e4fc g     F .text	000000a4 __ratio
10010498 g     F .text	00000024 __vfiprintf_internal
100142dc g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
10007b0c g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000585c g     F .text	00000008 .hidden __udivsi3
10013478 g     F .text	000000ac isatty
10017dc0 g     O .rodata	000000c8 __mprec_tens
1000c9a4 g     F .text	0000000c __locale_charset
10005e2c g     F .text	000000b8 .hidden __lesf2
1001b4cc g     O .bss	00000004 __malloc_top_pad
10004ce4 g     F .text	00000264 UsbGetConfigDesc2
10019990 g     O .rwdata	00000004 __mb_cur_max
1000c9d4 g     F .text	0000000c _localeconv_r
1000daf8 g     F .text	0000003c __i2b
1000c314 g     F .text	000004a4 __sfvwrite_r
1000ed2c g     F .text	00000054 _sbrk_r
10010a3c g     F .text	0000005c _read_r
100199b0 g     O .rwdata	00000004 alt_max_fd
10010644 g     F .text	00000100 _fclose_r
1000bb1c g     F .text	00000030 fflush
1001b4c8 g     O .bss	00000004 __malloc_max_sbrked_mem
100076c8 g     F .text	00000110 .hidden __extendsfdf2
10011b70 g     F .text	0000089c .hidden __adddf3
1000e2a4 g     F .text	0000011c __b2d
10011554 g     F .text	0000061c .hidden __umoddi3
10013660 g     F .text	000000dc lseek
10019988 g     O .rwdata	00000004 _global_impure_ptr
1000e718 g     F .text	000005a0 _realloc_r
1001b614 g       *ABS*	00000000 __bss_end
10014d64 g     F .text	000000f0 alt_iic_isr_register
100152e8 g     F .text	00000104 alt_tick
10010f14 g     F .text	00000640 .hidden __udivdi3
10010758 g     F .text	00000184 _fputwc_r
10017d98 g     O .rodata	00000028 __mprec_bigtens
1000d8dc g     F .text	00000104 __s2b
10013128 g     F .text	000000a4 .hidden __floatunsidf
1000e04c g     F .text	00000060 __mcmp
10004744 g     F .text	000000fc UsbSetAddress
1000bed0 g     F .text	00000018 __fp_lock_all
10014d18 g     F .text	0000004c alt_ic_irq_enabled
10015250 g     F .text	00000098 alt_alarm_stop
1001b4e0 g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000d0 alt_irq_handler
10018780 g     O .rwdata	00000028 alt_dev_null
10014998 g     F .text	0000001c alt_dcache_flush_all
1000d9e0 g     F .text	00000068 __hi0bits
100002c0 g     F .text	00000074 IO_read
10012fd0 g     F .text	00000088 .hidden __fixdfsi
100199c8 g       *ABS*	00000000 __ram_rwdata_end
100199a8 g     O .rwdata	00000008 alt_dev_list
10013b00 g     F .text	00000100 write
10005d74 g     F .text	000000b8 .hidden __gtsf2
10017edc g       *ABS*	00000000 __ram_rodata_end
10013370 g     F .text	000000b8 fstat
10012ef0 g     F .text	000000e0 .hidden __ledf2
100056c4 g     F .text	0000007c UsbPrintMem
1000ddc4 g     F .text	00000140 __pow5mult
1000f074 g     F .text	00001424 ___vfiprintf_internal_r
1001b4c0 g     O .bss	00000004 __nlocale_changed
10005864 g     F .text	00000008 .hidden __umodsi3
1001b614 g       *ABS*	00000000 end
10013e18 g     F .text	000000c4 altera_avalon_jtag_uart_init
10015a28 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10007970 g     F .text	00000064 .hidden __clzsi2
100144e8 g     F .text	00000218 altera_avalon_jtag_uart_write
1000bec0 g     F .text	00000004 __sfp_lock_acquire
1000d368 g     F .text	000000e8 memchr
10007d54 g     F .text	000020fc ___vfprintf_internal_r
10005044 g     F .text	000000fc UsbClassRequest
1000c024 g     F .text	000002f0 _free_r
1000c9b0 g     F .text	00000010 __locale_mb_cur_max
10015860 g     F .text	00000194 __call_exitprocs
1001b4bc g     O .bss	00000004 __mlocale_changed
10019994 g     O .rwdata	00000004 __malloc_sbrk_base
100001bc g     F .text	0000003c _start
1001b4e4 g     O .bss	00000004 _alt_tick_rate
10007c58 g     F .text	00000064 rand
1000df04 g     F .text	00000148 __lshift
1001b4e8 g     O .bss	00000004 _alt_nticks
1001384c g     F .text	00000104 read
10013c6c g     F .text	00000048 alt_sys_init
10006458 g     F .text	00000134 .hidden __floatsisf
1001574c g     F .text	00000114 __register_exitproc
1000db34 g     F .text	00000290 __multiply
10014188 g     F .text	00000068 altera_avalon_jtag_uart_close
1000586c g     F .text	00000028 .hidden __mulsi3
10017edc g       *ABS*	00000000 __ram_rwdata_start
10015a28 g       *ABS*	00000000 __ram_rodata_start
1001b4ec g     O .bss	00000028 __malloc_current_mallinfo
1000e3c0 g     F .text	0000013c __d2b
10004840 g     F .text	00000144 UsbGetDeviceDesc1
10013cb4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
100155b0 g     F .text	000000d4 alt_get_fd
10014840 g     F .text	00000158 alt_busy_sleep
10010518 g     F .text	00000054 _close_r
100156d0 g     F .text	0000007c memcmp
10013d74 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1001b614 g       *ABS*	00000000 __alt_stack_base
10013dc4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10009e74 g     F .text	00000130 __swsetup_r
1001240c g     F .text	00000980 .hidden __divdf3
1000bd80 g     F .text	00000118 __sfp
1000e614 g     F .text	00000078 __copybits
10018378 g     O .rwdata	00000408 __malloc_av_
1000becc g     F .text	00000004 __sinit_lock_release
1000658c g     F .text	0000086c .hidden __muldf3
1000ed80 g     F .text	00000054 __sread
100055c0 g     F .text	00000084 UsbWaitTDListDone
1001549c g     F .text	00000114 alt_find_file
10014a04 g     F .text	000000a4 alt_dev_llist_insert
100137b4 g     F .text	00000024 __malloc_lock
100139d0 g     F .text	000000b0 sbrk
1000b8f4 g     F .text	00000228 _fflush_r
1001056c g     F .text	000000d8 _calloc_r
1001b4b4 g       *ABS*	00000000 __bss_start
1000d5ac g     F .text	00000124 memset
10000334 g     F .text	000042c8 main
1001b4dc g     O .bss	00000004 alt_envp
1001b4c4 g     O .bss	00000004 __malloc_max_total_mem
10013d14 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10004f48 g     F .text	000000fc UsbSetConfig
10010bec g     F .text	0000001c __swbuf
10007c40 g     F .text	00000018 srand
10005e2c g     F .text	000000b8 .hidden __ltsf2
1000eeb4 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
10010744 g     F .text	00000014 fclose
100077d8 g     F .text	00000198 .hidden __truncdfsf2
1000a1cc g     F .text	00001728 _dtoa_r
1000cbc0 g     F .text	000007a8 _malloc_r
10010d7c g     F .text	00000030 __ascii_wctomb
100199b4 g     O .rwdata	00000004 alt_errno
1000c7b8 g     F .text	000000b8 _fwalk
100057ac g     F .text	00000054 .hidden __divsi3
1000bf00 g     F .text	00000124 _malloc_trim_r
10005140 g     F .text	00000144 UsbGetHidDesc
10015a28 g       *ABS*	00000000 __CTOR_END__
1000eebc g     F .text	000000a4 strcmp
10015a28 g       *ABS*	00000000 __flash_rodata_start
10015a28 g       *ABS*	00000000 __DTOR_LIST__
10012d8c g     F .text	00000084 .hidden __nedf2
10004650 g     F .text	00000044 UsbRead
10013c38 g     F .text	00000034 alt_irq_init
10013950 g     F .text	00000080 alt_release_fd
10017bdc g     O .rodata	00000100 .hidden __clz_tab
1001b4b8 g     O .bss	00000004 _PathLocale
10015684 g     F .text	00000014 atexit
10005d74 g     F .text	000000b8 .hidden __gesf2
100104bc g     F .text	0000005c _write_r
1000c9e0 g     F .text	0000001c setlocale
1001998c g     O .rwdata	00000004 _impure_ptr
1001b4d4 g     O .bss	00000004 alt_argc
10014b08 g     F .text	00000060 _do_dtors
1000c9cc g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
1000e244 g     F .text	00000060 __ulp
1000bee8 g     F .text	00000018 __fp_unlock_all
100199a0 g     O .rwdata	00000008 alt_fs_list
10005284 g     F .text	0000033c UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000c9fc g     F .text	0000000c localeconv
10014b84 g     F .text	00000050 alt_ic_isr_register
100199c8 g       *ABS*	00000000 _edata
1001b614 g       *ABS*	00000000 _end
100045fc g     F .text	00000054 UsbWrite
100001bc g       *ABS*	00000000 __ram_exceptions_end
100141f0 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10014c74 g     F .text	000000a4 alt_ic_irq_disable
1000eddc g     F .text	0000007c __swrite
10019998 g     O .rwdata	00000004 __malloc_trim_threshold
1000c9c0 g     F .text	0000000c __locale_msgcharset
10015698 g     F .text	00000038 exit
1000c870 g     F .text	000000b8 _fwalk_reent
1000e0ac g     F .text	00000198 __mdiff
10005800 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
1000bec4 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10000248 g     F .text	00000078 IO_write
100159f4 g     F .text	00000034 _exit
10014700 g     F .text	00000140 alt_alarm_start
10010e08 g     F .text	0000010c .hidden __muldi3
1000ca08 g     F .text	000001b8 __smakebuf_r
10007cbc g     F .text	00000098 strlen
100150f0 g     F .text	00000160 open
10012e10 g     F .text	000000e0 .hidden __gedf2
1001999c g     O .rwdata	00000004 __wctomb
1000f05c g     F .text	00000018 __sprint_r
10014b68 g     F .text	0000001c alt_icache_flush_all
100199bc g     O .rwdata	00000004 alt_priority_mask
10014bd4 g     F .text	000000a0 alt_ic_irq_enable
10009e50 g     F .text	00000024 __vfprintf_internal
10010dac g     F .text	0000005c _wctomb_r
10006df8 g     F .text	000008d0 .hidden __subdf3
1000da48 g     F .text	000000b0 __lo0bits
10004b58 g     F .text	0000018c UsbGetConfigDesc1
100199c0 g     O .rwdata	00000008 alt_alarm_list
10014aa8 g     F .text	00000060 _do_ctors
10004694 g     F .text	000000b0 UsbSoftReset
10010ca4 g     F .text	000000d8 wcrtomb
1001321c g     F .text	000000d8 close
10005894 g     F .text	000004e0 .hidden __addsf3
10004984 g     F .text	000001d4 UsbGetDeviceDesc2
1001358c g     F .text	00000084 alt_load
100108dc g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
1000bec8 g     F .text	00000004 __sinit_lock_acquire
1000d7a0 g     F .text	0000013c __multadd
1000d778 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406f14 	ori	at,at,444
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001426 	beq	r2,zero,1000017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	008400b4 	movhi	r2,4098
10000130:	10ad4504 	addi	r2,r2,-19180
10000134:	e0fffd17 	ldw	r3,-12(fp)
10000138:	180690fa 	slli	r3,r3,3
1000013c:	10c5883a 	add	r2,r2,r3
10000140:	10c00017 	ldw	r3,0(r2)
10000144:	008400b4 	movhi	r2,4098
10000148:	10ad4504 	addi	r2,r2,-19180
1000014c:	e13ffd17 	ldw	r4,-12(fp)
10000150:	200890fa 	slli	r4,r4,3
10000154:	1105883a 	add	r2,r2,r4
10000158:	10800104 	addi	r2,r2,4
1000015c:	10800017 	ldw	r2,0(r2)
10000160:	1009883a 	mov	r4,r2
10000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
10000178:	00000706 	br	10000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000017c:	e0bffc17 	ldw	r2,-16(fp)
10000180:	1085883a 	add	r2,r2,r2
10000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000188:	e0bffd17 	ldw	r2,-12(fp)
1000018c:	10800044 	addi	r2,r2,1
10000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
10000194:	003fe106 	br	1000011c <__alt_data_end+0xf800011c>

    active = alt_irq_pending ();
10000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000019c:	e0bffb17 	ldw	r2,-20(fp)
100001a0:	103fdb1e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	e037883a 	mov	sp,fp
100001ac:	dfc00117 	ldw	ra,4(sp)
100001b0:	df000017 	ldw	fp,0(sp)
100001b4:	dec00204 	addi	sp,sp,8
100001b8:	f800283a 	ret

Disassembly of section .text:

100001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001bc:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c4:	068400b4 	movhi	gp,4098
    ori gp, gp, %lo(_gp)
100001c8:	d6866214 	ori	gp,gp,6536
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001cc:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001d0:	10ad2d14 	ori	r2,r2,46260

    movhi r3, %hi(__bss_end)
100001d4:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001d8:	18ed8514 	ori	r3,r3,46612

    beq r2, r3, 1f
100001dc:	10c00326 	beq	r2,r3,100001ec <_start+0x30>

0:
    stw zero, (r2)
100001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e8:	10fffd36 	bltu	r2,r3,100001e0 <__alt_data_end+0xf80001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001ec:	001358c0 	call	1001358c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001f0:	001373c0 	call	1001373c <alt_main>

100001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f4:	003fff06 	br	100001f4 <__alt_data_end+0xf80001f4>

100001f8 <IO_init>:
#define otg_hpi_cs			(volatile char*)	OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*)	OTG_HPI_W_BASE


void IO_init(void)
{
100001f8:	deffff04 	addi	sp,sp,-4
100001fc:	df000015 	stw	fp,0(sp)
10000200:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 1;
10000204:	0080e804 	movi	r2,928
10000208:	00c00044 	movi	r3,1
1000020c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10000210:	0080f004 	movi	r2,960
10000214:	00c00044 	movi	r3,1
10000218:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
1000021c:	0080ec04 	movi	r2,944
10000220:	00c00044 	movi	r3,1
10000224:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
10000228:	0080f804 	movi	r2,992
1000022c:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
10000230:	0080f404 	movi	r2,976
10000234:	10000015 	stw	zero,0(r2)
}
10000238:	e037883a 	mov	sp,fp
1000023c:	df000017 	ldw	fp,0(sp)
10000240:	dec00104 	addi	sp,sp,4
10000244:	f800283a 	ret

10000248 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
10000248:	defffd04 	addi	sp,sp,-12
1000024c:	df000215 	stw	fp,8(sp)
10000250:	df000204 	addi	fp,sp,8
10000254:	2007883a 	mov	r3,r4
10000258:	2805883a 	mov	r2,r5
1000025c:	e0fffe05 	stb	r3,-8(fp)
10000260:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
10000264:	0080f804 	movi	r2,992
10000268:	e0fffe03 	ldbu	r3,-8(fp)
1000026c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
10000270:	0080f404 	movi	r2,976
10000274:	e0ffff0b 	ldhu	r3,-4(fp)
10000278:	10c00015 	stw	r3,0(r2)
	
	*otg_hpi_r = 1;
1000027c:	0080f004 	movi	r2,960
10000280:	00c00044 	movi	r3,1
10000284:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 0;
10000288:	0080e804 	movi	r2,928
1000028c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10000290:	0080ec04 	movi	r2,944
10000294:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
10000298:	0080ec04 	movi	r2,944
1000029c:	00c00044 	movi	r3,1
100002a0:	10c00005 	stb	r3,0(r2)
	
	*otg_hpi_cs = 1;
100002a4:	0080e804 	movi	r2,928
100002a8:	00c00044 	movi	r3,1
100002ac:	10c00005 	stb	r3,0(r2)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
}
100002b0:	e037883a 	mov	sp,fp
100002b4:	df000017 	ldw	fp,0(sp)
100002b8:	dec00104 	addi	sp,sp,4
100002bc:	f800283a 	ret

100002c0 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
100002c0:	defffd04 	addi	sp,sp,-12
100002c4:	df000215 	stw	fp,8(sp)
100002c8:	df000204 	addi	fp,sp,8
100002cc:	2005883a 	mov	r2,r4
100002d0:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	
	*otg_hpi_address = Address;
100002d4:	0080f804 	movi	r2,992
100002d8:	e0ffff03 	ldbu	r3,-4(fp)
100002dc:	10c00015 	stw	r3,0(r2)
		
	*otg_hpi_w = 1;
100002e0:	0080ec04 	movi	r2,944
100002e4:	00c00044 	movi	r3,1
100002e8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 0;
100002ec:	0080e804 	movi	r2,928
100002f0:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
100002f4:	0080f004 	movi	r2,960
100002f8:	10000005 	stb	zero,0(r2)
	
	temp = *otg_hpi_data;
100002fc:	0080f404 	movi	r2,976
10000300:	10800017 	ldw	r2,0(r2)
10000304:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
10000308:	0080f004 	movi	r2,960
1000030c:	00c00044 	movi	r3,1
10000310:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000314:	0080e804 	movi	r2,928
10000318:	00c00044 	movi	r3,1
1000031c:	10c00005 	stb	r3,0(r2)
	
	return temp;
10000320:	e0bffe0b 	ldhu	r2,-8(fp)
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	//printf("%x\n",temp);
	return temp;
}
10000324:	e037883a 	mov	sp,fp
10000328:	df000017 	ldw	fp,0(sp)
1000032c:	dec00104 	addi	sp,sp,4
10000330:	f800283a 	ret

10000334 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
10000334:	def92504 	addi	sp,sp,-7020
10000338:	dfc6da15 	stw	ra,7016(sp)
1000033c:	df06d915 	stw	fp,7012(sp)
10000340:	dc86d815 	stw	r18,7008(sp)
10000344:	dc46d715 	stw	r17,7004(sp)
10000348:	dc06d615 	stw	r16,7000(sp)
1000034c:	df06d904 	addi	fp,sp,7012
	IO_init();
10000350:	00001f80 	call	100001f8 <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
10000354:	e0394b0d 	sth	zero,-6868(fp)
	long keycode = 0;
10000358:	e0394c15 	stw	zero,-6864(fp)
	alt_u8 toggle = 0;
1000035c:	e0392785 	stb	zero,-7010(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
10000360:	01040074 	movhi	r4,4097
10000364:	21168a04 	addi	r4,r4,23080
10000368:	0007c2c0 	call	10007c2c <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
1000036c:	00046940 	call	10004694 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10000370:	01005104 	movi	r4,324
10000374:	000b883a 	mov	r5,zero
10000378:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
1000037c:	01302414 	movui	r4,49296
10000380:	017fffd4 	movui	r5,65535
10000384:	00045fc0 	call	100045fc <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10000388:	01006d04 	movi	r4,436
1000038c:	01409604 	movi	r5,600
10000390:	00045fc0 	call	100045fc <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10000394:	00811004 	movi	r2,1088
10000398:	e0b9270d 	sth	r2,-7012(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
1000039c:	e0b9270b 	ldhu	r2,-7012(fp)
100003a0:	01005084 	movi	r4,322
100003a4:	100b883a 	mov	r5,r2
100003a8:	00045fc0 	call	100045fc <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
100003ac:	00808404 	movi	r2,528
100003b0:	e0b94d0d 	sth	r2,-6860(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
100003b4:	e0b94d0b 	ldhu	r2,-6860(fp)
100003b8:	01302314 	movui	r4,49292
100003bc:	100b883a 	mov	r5,r2
100003c0:	00045fc0 	call	100045fc <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
100003c4:	01007104 	movi	r4,452
100003c8:	000b883a 	mov	r5,zero
100003cc:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100003d0:	01007184 	movi	r4,454
100003d4:	000b883a 	mov	r5,zero
100003d8:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
100003dc:	01007204 	movi	r4,456
100003e0:	000b883a 	mov	r5,zero
100003e4:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
100003e8:	01007284 	movi	r4,458
100003ec:	000b883a 	mov	r5,zero
100003f0:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
100003f4:	01007304 	movi	r4,460
100003f8:	000b883a 	mov	r5,zero
100003fc:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000400:	01007384 	movi	r4,462
10000404:	000b883a 	mov	r5,zero
10000408:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
1000040c:	01007404 	movi	r4,464
10000410:	000b883a 	mov	r5,zero
10000414:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10000418:	01007484 	movi	r4,466
1000041c:	000b883a 	mov	r5,zero
10000420:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000424:	01007504 	movi	r4,468
10000428:	000b883a 	mov	r5,zero
1000042c:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10000430:	01007584 	movi	r4,470
10000434:	000b883a 	mov	r5,zero
10000438:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
1000043c:	01007604 	movi	r4,472
10000440:	000b883a 	mov	r5,zero
10000444:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10000448:	01007684 	movi	r4,474
1000044c:	000b883a 	mov	r5,zero
10000450:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000454:	01007704 	movi	r4,476
10000458:	000b883a 	mov	r5,zero
1000045c:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10000460:	01007784 	movi	r4,478
10000464:	000b883a 	mov	r5,zero
10000468:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
1000046c:	01007084 	movi	r4,450
10000470:	01401c84 	movi	r5,114
10000474:	00045fc0 	call	100045fc <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000478:	01000044 	movi	r4,1
1000047c:	01738054 	movui	r5,52737
10000480:	00002480 	call	10000248 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10000484:	0001883a 	nop
10000488:	010000c4 	movi	r4,3
1000048c:	00002c00 	call	100002c0 <IO_read>
10000490:	10bfffcc 	andi	r2,r2,65535
10000494:	103ffc26 	beq	r2,zero,10000488 <__alt_data_end+0xf8000488>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000498:	0001883a 	nop
1000049c:	01000044 	movi	r4,1
100004a0:	00002c00 	call	100002c0 <IO_read>
100004a4:	10bfffcc 	andi	r2,r2,65535
100004a8:	1083fb58 	cmpnei	r2,r2,4077
100004ac:	10000826 	beq	r2,zero,100004d0 <main+0x19c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100004b0:	01000044 	movi	r4,1
100004b4:	00002c00 	call	100002c0 <IO_read>
100004b8:	10bfffcc 	andi	r2,r2,65535
100004bc:	01040074 	movhi	r4,4097
100004c0:	21169004 	addi	r4,r4,23104
100004c4:	100b883a 	mov	r5,r2
100004c8:	0007b380 	call	10007b38 <printf>
		goto USB_HOT_PLUG;
100004cc:	003fa706 	br	1000036c <__alt_data_end+0xf800036c>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
100004d0:	01040074 	movhi	r4,4097
100004d4:	21169904 	addi	r4,r4,23140
100004d8:	0007b380 	call	10007b38 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
100004dc:	01007084 	movi	r4,450
100004e0:	01401d04 	movi	r5,116
100004e4:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
100004e8:	01007104 	movi	r4,452
100004ec:	01400f04 	movi	r5,60
100004f0:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100004f4:	01007184 	movi	r4,454
100004f8:	000b883a 	mov	r5,zero
100004fc:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000500:	01007204 	movi	r4,456
10000504:	000b883a 	mov	r5,zero
10000508:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
1000050c:	01007284 	movi	r4,458
10000510:	000b883a 	mov	r5,zero
10000514:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10000518:	01007304 	movi	r4,460
1000051c:	000b883a 	mov	r5,zero
10000520:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000524:	01007384 	movi	r4,462
10000528:	000b883a 	mov	r5,zero
1000052c:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000530:	01007404 	movi	r4,464
10000534:	000b883a 	mov	r5,zero
10000538:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
1000053c:	01007484 	movi	r4,466
10000540:	000b883a 	mov	r5,zero
10000544:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000548:	01007504 	movi	r4,468
1000054c:	000b883a 	mov	r5,zero
10000550:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10000554:	01007584 	movi	r4,470
10000558:	000b883a 	mov	r5,zero
1000055c:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10000560:	01007604 	movi	r4,472
10000564:	000b883a 	mov	r5,zero
10000568:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
1000056c:	01007684 	movi	r4,474
10000570:	000b883a 	mov	r5,zero
10000574:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000578:	01007704 	movi	r4,476
1000057c:	000b883a 	mov	r5,zero
10000580:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10000584:	01007784 	movi	r4,478
10000588:	000b883a 	mov	r5,zero
1000058c:	00045fc0 	call	100045fc <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000590:	01000044 	movi	r4,1
10000594:	01738054 	movui	r5,52737
10000598:	00002480 	call	10000248 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
1000059c:	0001883a 	nop
100005a0:	01000044 	movi	r4,1
100005a4:	00002c00 	call	100002c0 <IO_read>
100005a8:	10bfffcc 	andi	r2,r2,65535
100005ac:	1083fb58 	cmpnei	r2,r2,4077
100005b0:	10000826 	beq	r2,zero,100005d4 <main+0x2a0>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100005b4:	01000044 	movi	r4,1
100005b8:	00002c00 	call	100002c0 <IO_read>
100005bc:	10bfffcc 	andi	r2,r2,65535
100005c0:	01040074 	movhi	r4,4097
100005c4:	21169004 	addi	r4,r4,23104
100005c8:	100b883a 	mov	r5,r2
100005cc:	0007b380 	call	10007b38 <printf>
		goto USB_HOT_PLUG;
100005d0:	003f6606 	br	1000036c <__alt_data_end+0xf800036c>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
100005d4:	00b02284 	movi	r2,-16246
100005d8:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
100005dc:	008c0004 	movi	r2,12288
100005e0:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
100005e4:	00880004 	movi	r2,8192
100005e8:	e0b94b0d 	sth	r2,-6868(fp)
	usb_ctl_val = UsbRead(ctl_reg);
100005ec:	d0a6cb0b 	ldhu	r2,-25812(gp)
100005f0:	10bfffcc 	andi	r2,r2,65535
100005f4:	1009883a 	mov	r4,r2
100005f8:	00046500 	call	10004650 <UsbRead>
100005fc:	e0b9270d 	sth	r2,-7012(fp)

	if (!(usb_ctl_val & no_device))
10000600:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000604:	e0f9270b 	ldhu	r3,-7012(fp)
10000608:	1884703a 	and	r2,r3,r2
1000060c:	10bfffcc 	andi	r2,r2,65535
10000610:	1000341e 	bne	r2,zero,100006e4 <main+0x3b0>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000614:	e03927c5 	stb	zero,-7009(fp)
10000618:	00001006 	br	1000065c <main+0x328>
		{
			usleep(5*1000);
1000061c:	0104e204 	movi	r4,5000
10000620:	0013a800 	call	10013a80 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10000624:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000628:	10bfffcc 	andi	r2,r2,65535
1000062c:	1009883a 	mov	r4,r2
10000630:	00046500 	call	10004650 <UsbRead>
10000634:	e0b9270d 	sth	r2,-7012(fp)
			if(usb_ctl_val & no_device) break;
10000638:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000063c:	e0f9270b 	ldhu	r3,-7012(fp)
10000640:	1884703a 	and	r2,r3,r2
10000644:	10bfffcc 	andi	r2,r2,65535
10000648:	10000126 	beq	r2,zero,10000650 <main+0x31c>
1000064c:	00000606 	br	10000668 <main+0x334>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000650:	e0b927c3 	ldbu	r2,-7009(fp)
10000654:	10800044 	addi	r2,r2,1
10000658:	e0b927c5 	stb	r2,-7009(fp)
1000065c:	e0b927c3 	ldbu	r2,-7009(fp)
10000660:	10800170 	cmpltui	r2,r2,5
10000664:	103fed1e 	bne	r2,zero,1000061c <__alt_data_end+0xf800061c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
		}
		if(!(usb_ctl_val & no_device))
10000668:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000066c:	e0f9270b 	ldhu	r3,-7012(fp)
10000670:	1884703a 	and	r2,r3,r2
10000674:	10bfffcc 	andi	r2,r2,65535
10000678:	1000261e 	bne	r2,zero,10000714 <main+0x3e0>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
1000067c:	01040074 	movhi	r4,4097
10000680:	21169d04 	addi	r4,r4,23156
10000684:	0007c2c0 	call	10007c2c <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10000688:	01040074 	movhi	r4,4097
1000068c:	2116a704 	addi	r4,r4,23196
10000690:	0007c2c0 	call	10007c2c <puts>
			while (!(usb_ctl_val & no_device))
10000694:	00000d06 	br	100006cc <main+0x398>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10000698:	d0a6cb0b 	ldhu	r2,-25812(gp)
1000069c:	10bfffcc 	andi	r2,r2,65535
100006a0:	1009883a 	mov	r4,r2
100006a4:	00046500 	call	10004650 <UsbRead>
100006a8:	e0b9270d 	sth	r2,-7012(fp)
				if(usb_ctl_val & no_device)
100006ac:	d0a6cb8b 	ldhu	r2,-25810(gp)
100006b0:	e0f9270b 	ldhu	r3,-7012(fp)
100006b4:	1884703a 	and	r2,r3,r2
100006b8:	10bfffcc 	andi	r2,r2,65535
100006bc:	10000126 	beq	r2,zero,100006c4 <main+0x390>
					goto USB_HOT_PLUG;
100006c0:	003f2a06 	br	1000036c <__alt_data_end+0xf800036c>

				usleep(2000);
100006c4:	0101f404 	movi	r4,2000
100006c8:	0013a800 	call	10013a80 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
100006cc:	d0a6cb8b 	ldhu	r2,-25810(gp)
100006d0:	e0f9270b 	ldhu	r3,-7012(fp)
100006d4:	1884703a 	and	r2,r3,r2
100006d8:	10bfffcc 	andi	r2,r2,65535
100006dc:	103fee26 	beq	r2,zero,10000698 <__alt_data_end+0xf8000698>
100006e0:	00000c06 	br	10000714 <main+0x3e0>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
100006e4:	e0f9270b 	ldhu	r3,-7012(fp)
100006e8:	e0b94b0b 	ldhu	r2,-6868(fp)
100006ec:	1884703a 	and	r2,r3,r2
100006f0:	10bfffcc 	andi	r2,r2,65535
100006f4:	10000426 	beq	r2,zero,10000708 <main+0x3d4>
		{
			printf("[INFO]: full speed device\n");
100006f8:	01040074 	movhi	r4,4097
100006fc:	2116b304 	addi	r4,r4,23244
10000700:	0007c2c0 	call	10007c2c <puts>
10000704:	00000306 	br	10000714 <main+0x3e0>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10000708:	01040074 	movhi	r4,4097
1000070c:	2116ba04 	addi	r4,r4,23272
10000710:	0007c2c0 	call	10007c2c <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10000714:	00047440 	call	10004744 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000718:	00000306 	br	10000728 <main+0x3f4>
	{
		UsbSetAddress();
1000071c:	00047440 	call	10004744 <UsbSetAddress>
		usleep(10*1000);
10000720:	0109c404 	movi	r4,10000
10000724:	0013a800 	call	10013a80 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000728:	010000c4 	movi	r4,3
1000072c:	00002c00 	call	100002c0 <IO_read>
10000730:	10bfffcc 	andi	r2,r2,65535
10000734:	1080040c 	andi	r2,r2,16
10000738:	103ff826 	beq	r2,zero,1000071c <__alt_data_end+0xf800071c>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000073c:	00055c00 	call	100055c0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
10000740:	01000084 	movi	r4,2
10000744:	01414184 	movi	r5,1286
10000748:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000074c:	0009883a 	mov	r4,zero
10000750:	00002c00 	call	100002c0 <IO_read>
10000754:	10bfffcc 	andi	r2,r2,65535
10000758:	01040074 	movhi	r4,4097
1000075c:	2116c104 	addi	r4,r4,23300
10000760:	100b883a 	mov	r5,r2
10000764:	0007b380 	call	10007b38 <printf>

	IO_write(HPI_ADDR,0x0508); // n
10000768:	01000084 	movi	r4,2
1000076c:	01414204 	movi	r5,1288
10000770:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000774:	0009883a 	mov	r4,zero
10000778:	00002c00 	call	100002c0 <IO_read>
1000077c:	e0b9270d 	sth	r2,-7012(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10000780:	e0b9270b 	ldhu	r2,-7012(fp)
10000784:	01040074 	movhi	r4,4097
10000788:	2116cc04 	addi	r4,r4,23344
1000078c:	100b883a 	mov	r5,r2
10000790:	0007b380 	call	10007b38 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10000794:	e0b9270b 	ldhu	r2,-7012(fp)
10000798:	108000e0 	cmpeqi	r2,r2,3
1000079c:	1000031e 	bne	r2,zero,100007ac <main+0x478>
	{
		usb_ctl_val = UsbGetRetryCnt();
100007a0:	00056440 	call	10005644 <UsbGetRetryCnt>
100007a4:	e0b9270d 	sth	r2,-7012(fp)

		goto USB_HOT_PLUG;
100007a8:	003ef006 	br	1000036c <__alt_data_end+0xf800036c>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
100007ac:	01040074 	movhi	r4,4097
100007b0:	2116d804 	addi	r4,r4,23392
100007b4:	0007c2c0 	call	10007c2c <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
100007b8:	00048400 	call	10004840 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007bc:	00000306 	br	100007cc <main+0x498>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
100007c0:	00048400 	call	10004840 <UsbGetDeviceDesc1>
		usleep(10*1000);
100007c4:	0109c404 	movi	r4,10000
100007c8:	0013a800 	call	10013a80 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007cc:	010000c4 	movi	r4,3
100007d0:	00002c00 	call	100002c0 <IO_read>
100007d4:	10bfffcc 	andi	r2,r2,65535
100007d8:	1080040c 	andi	r2,r2,16
100007dc:	103ff826 	beq	r2,zero,100007c0 <__alt_data_end+0xf80007c0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100007e0:	00055c00 	call	100055c0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100007e4:	01000084 	movi	r4,2
100007e8:	01414184 	movi	r5,1286
100007ec:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
100007f0:	0009883a 	mov	r4,zero
100007f4:	00002c00 	call	100002c0 <IO_read>
100007f8:	10bfffcc 	andi	r2,r2,65535
100007fc:	01040074 	movhi	r4,4097
10000800:	2116e704 	addi	r4,r4,23452
10000804:	100b883a 	mov	r5,r2
10000808:	0007b380 	call	10007b38 <printf>

	IO_write(HPI_ADDR,0x0508);
1000080c:	01000084 	movi	r4,2
10000810:	01414204 	movi	r5,1288
10000814:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000818:	0009883a 	mov	r4,zero
1000081c:	00002c00 	call	100002c0 <IO_read>
10000820:	e0b9270d 	sth	r2,-7012(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000824:	e0b9270b 	ldhu	r2,-7012(fp)
10000828:	01040074 	movhi	r4,4097
1000082c:	2116f204 	addi	r4,r4,23496
10000830:	100b883a 	mov	r5,r2
10000834:	0007b380 	call	10007b38 <printf>
	while (usb_ctl_val != 0x03)
10000838:	00000206 	br	10000844 <main+0x510>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000083c:	00056440 	call	10005644 <UsbGetRetryCnt>
10000840:	e0b9270d 	sth	r2,-7012(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000844:	e0b9270b 	ldhu	r2,-7012(fp)
10000848:	108000d8 	cmpnei	r2,r2,3
1000084c:	103ffb1e 	bne	r2,zero,1000083c <__alt_data_end+0xf800083c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10000850:	01040074 	movhi	r4,4097
10000854:	2116fe04 	addi	r4,r4,23544
10000858:	0007c2c0 	call	10007c2c <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
1000085c:	00049840 	call	10004984 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000860:	00000306 	br	10000870 <main+0x53c>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10000864:	00049840 	call	10004984 <UsbGetDeviceDesc2>
		usleep(10*1000);
10000868:	0109c404 	movi	r4,10000
1000086c:	0013a800 	call	10013a80 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000870:	010000c4 	movi	r4,3
10000874:	00002c00 	call	100002c0 <IO_read>
10000878:	10bfffcc 	andi	r2,r2,65535
1000087c:	1080040c 	andi	r2,r2,16
10000880:	103ff826 	beq	r2,zero,10000864 <__alt_data_end+0xf8000864>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000884:	00055c00 	call	100055c0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000888:	01000084 	movi	r4,2
1000088c:	01414184 	movi	r5,1286
10000890:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000894:	0009883a 	mov	r4,zero
10000898:	00002c00 	call	100002c0 <IO_read>
1000089c:	10bfffcc 	andi	r2,r2,65535
100008a0:	01040074 	movhi	r4,4097
100008a4:	2116e704 	addi	r4,r4,23452
100008a8:	100b883a 	mov	r5,r2
100008ac:	0007b380 	call	10007b38 <printf>

	IO_write(HPI_ADDR,0x0508);
100008b0:	01000084 	movi	r4,2
100008b4:	01414204 	movi	r5,1288
100008b8:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100008bc:	0009883a 	mov	r4,zero
100008c0:	00002c00 	call	100002c0 <IO_read>
100008c4:	e0b9270d 	sth	r2,-7012(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100008c8:	e0b9270b 	ldhu	r2,-7012(fp)
100008cc:	01040074 	movhi	r4,4097
100008d0:	2116f204 	addi	r4,r4,23496
100008d4:	100b883a 	mov	r5,r2
100008d8:	0007b380 	call	10007b38 <printf>
	while (usb_ctl_val != 0x03)
100008dc:	00000206 	br	100008e8 <main+0x5b4>
	{
		usb_ctl_val = UsbGetRetryCnt();
100008e0:	00056440 	call	10005644 <UsbGetRetryCnt>
100008e4:	e0b9270d 	sth	r2,-7012(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100008e8:	e0b9270b 	ldhu	r2,-7012(fp)
100008ec:	108000d8 	cmpnei	r2,r2,3
100008f0:	103ffb1e 	bne	r2,zero,100008e0 <__alt_data_end+0xf80008e0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
100008f4:	01040074 	movhi	r4,4097
100008f8:	21171204 	addi	r4,r4,23624
100008fc:	0007c2c0 	call	10007c2c <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
10000900:	0004b580 	call	10004b58 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000904:	00000306 	br	10000914 <main+0x5e0>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
10000908:	0004b580 	call	10004b58 <UsbGetConfigDesc1>
		usleep(10*1000);
1000090c:	0109c404 	movi	r4,10000
10000910:	0013a800 	call	10013a80 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000914:	010000c4 	movi	r4,3
10000918:	00002c00 	call	100002c0 <IO_read>
1000091c:	10bfffcc 	andi	r2,r2,65535
10000920:	1080040c 	andi	r2,r2,16
10000924:	103ff826 	beq	r2,zero,10000908 <__alt_data_end+0xf8000908>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000928:	00055c00 	call	100055c0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000092c:	01000084 	movi	r4,2
10000930:	01414184 	movi	r5,1286
10000934:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000938:	0009883a 	mov	r4,zero
1000093c:	00002c00 	call	100002c0 <IO_read>
10000940:	10bfffcc 	andi	r2,r2,65535
10000944:	01040074 	movhi	r4,4097
10000948:	21172404 	addi	r4,r4,23696
1000094c:	100b883a 	mov	r5,r2
10000950:	0007b380 	call	10007b38 <printf>

	IO_write(HPI_ADDR,0x0508);
10000954:	01000084 	movi	r4,2
10000958:	01414204 	movi	r5,1288
1000095c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000960:	0009883a 	mov	r4,zero
10000964:	00002c00 	call	100002c0 <IO_read>
10000968:	e0b9270d 	sth	r2,-7012(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
1000096c:	e0b9270b 	ldhu	r2,-7012(fp)
10000970:	01040074 	movhi	r4,4097
10000974:	21172f04 	addi	r4,r4,23740
10000978:	100b883a 	mov	r5,r2
1000097c:	0007b380 	call	10007b38 <printf>
	while (usb_ctl_val != 0x03)
10000980:	00000206 	br	1000098c <main+0x658>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000984:	00056440 	call	10005644 <UsbGetRetryCnt>
10000988:	e0b9270d 	sth	r2,-7012(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
1000098c:	e0b9270b 	ldhu	r2,-7012(fp)
10000990:	108000d8 	cmpnei	r2,r2,3
10000994:	103ffb1e 	bne	r2,zero,10000984 <__alt_data_end+0xf8000984>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10000998:	01040074 	movhi	r4,4097
1000099c:	21173b04 	addi	r4,r4,23788
100009a0:	0007c2c0 	call	10007c2c <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
100009a4:	0004ce40 	call	10004ce4 <UsbGetConfigDesc2>

	usleep(100*1000);
100009a8:	010000b4 	movhi	r4,2
100009ac:	2121a804 	addi	r4,r4,-31072
100009b0:	0013a800 	call	10013a80 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009b4:	00000306 	br	100009c4 <main+0x690>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
100009b8:	0004ce40 	call	10004ce4 <UsbGetConfigDesc2>
		usleep(10*1000);
100009bc:	0109c404 	movi	r4,10000
100009c0:	0013a800 	call	10013a80 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009c4:	010000c4 	movi	r4,3
100009c8:	00002c00 	call	100002c0 <IO_read>
100009cc:	10bfffcc 	andi	r2,r2,65535
100009d0:	1080040c 	andi	r2,r2,16
100009d4:	103ff826 	beq	r2,zero,100009b8 <__alt_data_end+0xf80009b8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100009d8:	00055c00 	call	100055c0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100009dc:	01000084 	movi	r4,2
100009e0:	01414184 	movi	r5,1286
100009e4:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
100009e8:	0009883a 	mov	r4,zero
100009ec:	00002c00 	call	100002c0 <IO_read>
100009f0:	10bfffcc 	andi	r2,r2,65535
100009f4:	01040074 	movhi	r4,4097
100009f8:	21174e04 	addi	r4,r4,23864
100009fc:	100b883a 	mov	r5,r2
10000a00:	0007b380 	call	10007b38 <printf>

	IO_write(HPI_ADDR,0x0508);
10000a04:	01000084 	movi	r4,2
10000a08:	01414204 	movi	r5,1288
10000a0c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000a10:	0009883a 	mov	r4,zero
10000a14:	00002c00 	call	100002c0 <IO_read>
10000a18:	e0b9270d 	sth	r2,-7012(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10000a1c:	e0b9270b 	ldhu	r2,-7012(fp)
10000a20:	01040074 	movhi	r4,4097
10000a24:	21175904 	addi	r4,r4,23908
10000a28:	100b883a 	mov	r5,r2
10000a2c:	0007b380 	call	10007b38 <printf>
	while (usb_ctl_val != 0x03)
10000a30:	00000206 	br	10000a3c <main+0x708>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000a34:	00056440 	call	10005644 <UsbGetRetryCnt>
10000a38:	e0b9270d 	sth	r2,-7012(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000a3c:	e0b9270b 	ldhu	r2,-7012(fp)
10000a40:	108000d8 	cmpnei	r2,r2,3
10000a44:	103ffb1e 	bne	r2,zero,10000a34 <__alt_data_end+0xf8000a34>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000a48:	01040074 	movhi	r4,4097
10000a4c:	21176504 	addi	r4,r4,23956
10000a50:	0007c2c0 	call	10007c2c <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000a54:	01000084 	movi	r4,2
10000a58:	01415b04 	movi	r5,1388
10000a5c:	00002480 	call	10000248 <IO_write>
	code = IO_read(HPI_DATA);
10000a60:	0009883a 	mov	r4,zero
10000a64:	00002c00 	call	100002c0 <IO_read>
10000a68:	e0b94d8d 	sth	r2,-6858(fp)
	code = code & 0x003;
10000a6c:	e0b94d8b 	ldhu	r2,-6858(fp)
10000a70:	108000cc 	andi	r2,r2,3
10000a74:	e0b94d8d 	sth	r2,-6858(fp)
	printf("\ncode = %x\n", code);
10000a78:	e0b94d8b 	ldhu	r2,-6858(fp)
10000a7c:	01040074 	movhi	r4,4097
10000a80:	21177804 	addi	r4,r4,24032
10000a84:	100b883a 	mov	r5,r2
10000a88:	0007b380 	call	10007b38 <printf>

	if (code == 0x01)
10000a8c:	e0b94d8b 	ldhu	r2,-6858(fp)
10000a90:	10800058 	cmpnei	r2,r2,1
10000a94:	1000041e 	bne	r2,zero,10000aa8 <main+0x774>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000a98:	01040074 	movhi	r4,4097
10000a9c:	21177b04 	addi	r4,r4,24044
10000aa0:	0007c2c0 	call	10007c2c <puts>
10000aa4:	00000306 	br	10000ab4 <main+0x780>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000aa8:	01040074 	movhi	r4,4097
10000aac:	21178a04 	addi	r4,r4,24104
10000ab0:	0007c2c0 	call	10007c2c <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000ab4:	01000084 	movi	r4,2
10000ab8:	01415d84 	movi	r5,1398
10000abc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x073F);
10000ac0:	0009883a 	mov	r4,zero
10000ac4:	0141cfc4 	movi	r5,1855
10000ac8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x8105);
10000acc:	0009883a 	mov	r4,zero
10000ad0:	01604154 	movui	r5,33029
10000ad4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0003);
10000ad8:	0009883a 	mov	r4,zero
10000adc:	014000c4 	movi	r5,3
10000ae0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);
10000ae4:	0009883a 	mov	r4,zero
10000ae8:	01400204 	movi	r5,8
10000aec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10000af0:	0009883a 	mov	r4,zero
10000af4:	016b0294 	movui	r5,44042
10000af8:	00002480 	call	10000248 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000afc:	01006c04 	movi	r4,432
10000b00:	01415d84 	movi	r5,1398
10000b04:	00045fc0 	call	100045fc <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000b08:	01000084 	movi	r4,2
10000b0c:	01415f04 	movi	r5,1404
10000b10:	00002480 	call	10000248 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000b14:	0009883a 	mov	r4,zero
10000b18:	00002c00 	call	100002c0 <IO_read>
10000b1c:	e0b94e05 	stb	r2,-6856(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000b20:	e0b94e03 	ldbu	r2,-6856(fp)
10000b24:	01040074 	movhi	r4,4097
10000b28:	21179304 	addi	r4,r4,24140
10000b2c:	100b883a 	mov	r5,r2
10000b30:	0007b380 	call	10007b38 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000b34:	0004f480 	call	10004f48 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b38:	00000306 	br	10000b48 <main+0x814>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000b3c:	0004f480 	call	10004f48 <UsbSetConfig>
		usleep(10*1000);
10000b40:	0109c404 	movi	r4,10000
10000b44:	0013a800 	call	10013a80 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b48:	010000c4 	movi	r4,3
10000b4c:	00002c00 	call	100002c0 <IO_read>
10000b50:	10bfffcc 	andi	r2,r2,65535
10000b54:	1080040c 	andi	r2,r2,16
10000b58:	103ff826 	beq	r2,zero,10000b3c <__alt_data_end+0xf8000b3c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000b5c:	00055c00 	call	100055c0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000b60:	01000084 	movi	r4,2
10000b64:	01414184 	movi	r5,1286
10000b68:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000b6c:	0009883a 	mov	r4,zero
10000b70:	00002c00 	call	100002c0 <IO_read>
10000b74:	10bfffcc 	andi	r2,r2,65535
10000b78:	01040074 	movhi	r4,4097
10000b7c:	21179d04 	addi	r4,r4,24180
10000b80:	100b883a 	mov	r5,r2
10000b84:	0007b380 	call	10007b38 <printf>

	IO_write(HPI_ADDR,0x0508);
10000b88:	01000084 	movi	r4,2
10000b8c:	01414204 	movi	r5,1288
10000b90:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000b94:	0009883a 	mov	r4,zero
10000b98:	00002c00 	call	100002c0 <IO_read>
10000b9c:	e0b9270d 	sth	r2,-7012(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000ba0:	e0b9270b 	ldhu	r2,-7012(fp)
10000ba4:	01040074 	movhi	r4,4097
10000ba8:	2117a804 	addi	r4,r4,24224
10000bac:	100b883a 	mov	r5,r2
10000bb0:	0007b380 	call	10007b38 <printf>
	while (usb_ctl_val != 0x03)
10000bb4:	00000206 	br	10000bc0 <main+0x88c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000bb8:	00056440 	call	10005644 <UsbGetRetryCnt>
10000bbc:	e0b9270d 	sth	r2,-7012(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000bc0:	e0b9270b 	ldhu	r2,-7012(fp)
10000bc4:	108000d8 	cmpnei	r2,r2,3
10000bc8:	103ffb1e 	bne	r2,zero,10000bb8 <__alt_data_end+0xf8000bb8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000bcc:	01040074 	movhi	r4,4097
10000bd0:	2117b404 	addi	r4,r4,24272
10000bd4:	0007c2c0 	call	10007c2c <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000bd8:	00050440 	call	10005044 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bdc:	00000306 	br	10000bec <main+0x8b8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000be0:	00050440 	call	10005044 <UsbClassRequest>
		usleep(10*1000);
10000be4:	0109c404 	movi	r4,10000
10000be8:	0013a800 	call	10013a80 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bec:	010000c4 	movi	r4,3
10000bf0:	00002c00 	call	100002c0 <IO_read>
10000bf4:	10bfffcc 	andi	r2,r2,65535
10000bf8:	1080040c 	andi	r2,r2,16
10000bfc:	103ff826 	beq	r2,zero,10000be0 <__alt_data_end+0xf8000be0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000c00:	00055c00 	call	100055c0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000c04:	01000084 	movi	r4,2
10000c08:	01414184 	movi	r5,1286
10000c0c:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000c10:	0009883a 	mov	r4,zero
10000c14:	00002c00 	call	100002c0 <IO_read>
10000c18:	10bfffcc 	andi	r2,r2,65535
10000c1c:	01040074 	movhi	r4,4097
10000c20:	2117c604 	addi	r4,r4,24344
10000c24:	100b883a 	mov	r5,r2
10000c28:	0007b380 	call	10007b38 <printf>

	IO_write(HPI_ADDR,0x0508);
10000c2c:	01000084 	movi	r4,2
10000c30:	01414204 	movi	r5,1288
10000c34:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000c38:	0009883a 	mov	r4,zero
10000c3c:	00002c00 	call	100002c0 <IO_read>
10000c40:	e0b9270d 	sth	r2,-7012(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000c44:	e0b9270b 	ldhu	r2,-7012(fp)
10000c48:	01040074 	movhi	r4,4097
10000c4c:	2117d104 	addi	r4,r4,24388
10000c50:	100b883a 	mov	r5,r2
10000c54:	0007b380 	call	10007b38 <printf>
	while (usb_ctl_val != 0x03)
10000c58:	00000206 	br	10000c64 <main+0x930>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000c5c:	00056440 	call	10005644 <UsbGetRetryCnt>
10000c60:	e0b9270d 	sth	r2,-7012(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000c64:	e0b9270b 	ldhu	r2,-7012(fp)
10000c68:	108000d8 	cmpnei	r2,r2,3
10000c6c:	103ffb1e 	bne	r2,zero,10000c5c <__alt_data_end+0xf8000c5c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000c70:	01040074 	movhi	r4,4097
10000c74:	2117dd04 	addi	r4,r4,24436
10000c78:	0007c2c0 	call	10007c2c <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10000c7c:	00051400 	call	10005140 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c80:	00000306 	br	10000c90 <main+0x95c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10000c84:	00051400 	call	10005140 <UsbGetHidDesc>
		usleep(10*1000);
10000c88:	0109c404 	movi	r4,10000
10000c8c:	0013a800 	call	10013a80 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c90:	010000c4 	movi	r4,3
10000c94:	00002c00 	call	100002c0 <IO_read>
10000c98:	10bfffcc 	andi	r2,r2,65535
10000c9c:	1080040c 	andi	r2,r2,16
10000ca0:	103ff826 	beq	r2,zero,10000c84 <__alt_data_end+0xf8000c84>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000ca4:	00055c00 	call	100055c0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000ca8:	01000084 	movi	r4,2
10000cac:	01414184 	movi	r5,1286
10000cb0:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000cb4:	0009883a 	mov	r4,zero
10000cb8:	00002c00 	call	100002c0 <IO_read>
10000cbc:	10bfffcc 	andi	r2,r2,65535
10000cc0:	01040074 	movhi	r4,4097
10000cc4:	2117c604 	addi	r4,r4,24344
10000cc8:	100b883a 	mov	r5,r2
10000ccc:	0007b380 	call	10007b38 <printf>

	IO_write(HPI_ADDR,0x0508);
10000cd0:	01000084 	movi	r4,2
10000cd4:	01414204 	movi	r5,1288
10000cd8:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000cdc:	0009883a 	mov	r4,zero
10000ce0:	00002c00 	call	100002c0 <IO_read>
10000ce4:	e0b9270d 	sth	r2,-7012(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000ce8:	e0b9270b 	ldhu	r2,-7012(fp)
10000cec:	01040074 	movhi	r4,4097
10000cf0:	2117d104 	addi	r4,r4,24388
10000cf4:	100b883a 	mov	r5,r2
10000cf8:	0007b380 	call	10007b38 <printf>
	while (usb_ctl_val != 0x03)
10000cfc:	00000206 	br	10000d08 <main+0x9d4>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d00:	00056440 	call	10005644 <UsbGetRetryCnt>
10000d04:	e0b9270d 	sth	r2,-7012(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000d08:	e0b9270b 	ldhu	r2,-7012(fp)
10000d0c:	108000d8 	cmpnei	r2,r2,3
10000d10:	103ffb1e 	bne	r2,zero,10000d00 <__alt_data_end+0xf8000d00>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10000d14:	01040074 	movhi	r4,4097
10000d18:	2117ef04 	addi	r4,r4,24508
10000d1c:	0007c2c0 	call	10007c2c <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10000d20:	00052840 	call	10005284 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d24:	00000306 	br	10000d34 <main+0xa00>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10000d28:	00052840 	call	10005284 <UsbGetReportDesc>
		usleep(10*1000);
10000d2c:	0109c404 	movi	r4,10000
10000d30:	0013a800 	call	10013a80 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d34:	010000c4 	movi	r4,3
10000d38:	00002c00 	call	100002c0 <IO_read>
10000d3c:	10bfffcc 	andi	r2,r2,65535
10000d40:	1080040c 	andi	r2,r2,16
10000d44:	103ff826 	beq	r2,zero,10000d28 <__alt_data_end+0xf8000d28>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000d48:	00055c00 	call	100055c0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000d4c:	01000084 	movi	r4,2
10000d50:	01414184 	movi	r5,1286
10000d54:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d58:	0009883a 	mov	r4,zero
10000d5c:	00002c00 	call	100002c0 <IO_read>
10000d60:	10bfffcc 	andi	r2,r2,65535
10000d64:	01040074 	movhi	r4,4097
10000d68:	21180304 	addi	r4,r4,24588
10000d6c:	100b883a 	mov	r5,r2
10000d70:	0007b380 	call	10007b38 <printf>

	IO_write(HPI_ADDR,0x0508);
10000d74:	01000084 	movi	r4,2
10000d78:	01414204 	movi	r5,1288
10000d7c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000d80:	0009883a 	mov	r4,zero
10000d84:	00002c00 	call	100002c0 <IO_read>
10000d88:	e0b9270d 	sth	r2,-7012(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10000d8c:	e0b9270b 	ldhu	r2,-7012(fp)
10000d90:	01040074 	movhi	r4,4097
10000d94:	21180f04 	addi	r4,r4,24636
10000d98:	100b883a 	mov	r5,r2
10000d9c:	0007b380 	call	10007b38 <printf>
	while (usb_ctl_val != 0x03)
10000da0:	00000206 	br	10000dac <main+0xa78>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000da4:	00056440 	call	10005644 <UsbGetRetryCnt>
10000da8:	e0b9270d 	sth	r2,-7012(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000dac:	e0b9270b 	ldhu	r2,-7012(fp)
10000db0:	108000d8 	cmpnei	r2,r2,3
10000db4:	103ffb1e 	bne	r2,zero,10000da4 <__alt_data_end+0xf8000da4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10000db8:	01040074 	movhi	r4,4097
10000dbc:	21181b04 	addi	r4,r4,24684
10000dc0:	0007c2c0 	call	10007c2c <puts>
	 *
	 *
	 *
	 *
	 */
	int scene[5][16][21] = 	{
10000dc4:	00840074 	movhi	r2,4097
10000dc8:	10984a04 	addi	r2,r2,24872
10000dcc:	e0f96d04 	addi	r3,fp,-6732
10000dd0:	100b883a 	mov	r5,r2
10000dd4:	00869004 	movi	r2,6720
10000dd8:	1809883a 	mov	r4,r3
10000ddc:	100d883a 	mov	r6,r2
10000de0:	00079d40 	call	100079d4 <memcpy>
							{3,3,3,3,3,3,3,1,1,1,3,3,0,0,0,0,0,0,0,0,1,1},
							{3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
							}
							};

	usleep(10000);
10000de4:	0109c404 	movi	r4,10000
10000de8:	0013a800 	call	10013a80 <usleep>
	*HEALTH = 3;
10000dec:	00805c04 	movi	r2,368
10000df0:	00c000c4 	movi	r3,3
10000df4:	10c00015 	stw	r3,0(r2)
	*SAMUS_EN = 1;
10000df8:	0080dc04 	movi	r2,880
10000dfc:	00c00044 	movi	r3,1
10000e00:	10c00005 	stb	r3,0(r2)
	*SAMUS_X = 150;
10000e04:	0080d804 	movi	r2,864
10000e08:	00c02584 	movi	r3,150
10000e0c:	10c00015 	stw	r3,0(r2)
	*SAMUS_Y = 400;
10000e10:	0080d404 	movi	r2,848
10000e14:	00c06404 	movi	r3,400
10000e18:	10c00015 	stw	r3,0(r2)
    *SCENE_SELECT = 4;
10000e1c:	00804804 	movi	r2,288
10000e20:	00c00104 	movi	r3,4
10000e24:	10c00015 	stw	r3,0(r2)
	*LOSS_EN = False;
10000e28:	00805404 	movi	r2,336
10000e2c:	10000015 	stw	zero,0(r2)
	*TIT_EN = False;
10000e30:	00805804 	movi	r2,352
10000e34:	10000015 	stw	zero,0(r2)
	int SAMUS_BOT = 70;
10000e38:	00801184 	movi	r2,70
10000e3c:	e0b94f15 	stw	r2,-6852(fp)
	int SAMUS_RIGHT = 35;
10000e40:	008008c4 	movi	r2,35
10000e44:	e0b95015 	stw	r2,-6848(fp)
	int samus_inv_counter = 0;
10000e48:	e0392815 	stw	zero,-7008(fp)
	int samus_inv_counter_start = False;
10000e4c:	e0392915 	stw	zero,-7004(fp)
	float y_inc = 0;
10000e50:	e0392a15 	stw	zero,-7000(fp)
	float gravity = .8;
10000e54:	008fd374 	movhi	r2,16205
10000e58:	10b33344 	addi	r2,r2,-13107
10000e5c:	e0b95115 	stw	r2,-6844(fp)
	float jump_height = 0;
10000e60:	e0392b15 	stw	zero,-6996(fp)
	float max_jump_height = 100;
10000e64:	0090b234 	movhi	r2,17096
10000e68:	e0b95215 	stw	r2,-6840(fp)
	int grounded = False;
10000e6c:	e0392c15 	stw	zero,-6992(fp)
	int let_go = False;
10000e70:	e0392d15 	stw	zero,-6988(fp)
	int has_control = True;
10000e74:	00800044 	movi	r2,1
10000e78:	e0b92e15 	stw	r2,-6984(fp)
	int y_set = False;
10000e7c:	e0392f15 	stw	zero,-6980(fp)
	int button_let_go = True;
10000e80:	00800044 	movi	r2,1
10000e84:	e0b93015 	stw	r2,-6976(fp)
	int bulinc = 12;
10000e88:	00800304 	movi	r2,12
10000e8c:	e0b95315 	stw	r2,-6836(fp)
	int bul1Left = 0;
10000e90:	e0393115 	stw	zero,-6972(fp)
	int bul1Up = 0;
10000e94:	e0393215 	stw	zero,-6968(fp)
	int bul1start = 0;
10000e98:	e0393315 	stw	zero,-6964(fp)
	int bul2Left = 0;
10000e9c:	e0393415 	stw	zero,-6960(fp)
	int bul2Up = 0;
10000ea0:	e0393515 	stw	zero,-6956(fp)
	int bul2start = 0;
10000ea4:	e0393615 	stw	zero,-6952(fp)
	int bul3Left = 0;
10000ea8:	e0393715 	stw	zero,-6948(fp)
	int bul3Up = 0;
10000eac:	e0393815 	stw	zero,-6944(fp)
	int bul3start = 0;
10000eb0:	e0393915 	stw	zero,-6940(fp)
	int bullet_en = True;
10000eb4:	00800044 	movi	r2,1
10000eb8:	e0b93a15 	stw	r2,-6936(fp)
	int sceneNum = 3;
10000ebc:	008000c4 	movi	r2,3
10000ec0:	e0b95415 	stw	r2,-6832(fp)
	int sceneStart = True;
10000ec4:	00800044 	movi	r2,1
10000ec8:	e0b93b15 	stw	r2,-6932(fp)
	int scenVictory = False;
10000ecc:	e0395515 	stw	zero,-6828(fp)
	int finalVictory = False;
10000ed0:	e0395615 	stw	zero,-6824(fp)
	int scene0_x = 0;
10000ed4:	e0395715 	stw	zero,-6820(fp)
	int scene0_y = 0;
10000ed8:	e0395815 	stw	zero,-6816(fp)
	int scene0_dir = 0;
10000edc:	e0395915 	stw	zero,-6812(fp)
	int scene1_dir = 0;
10000ee0:	e0395a15 	stw	zero,-6808(fp)
	int scene2_dir = 0;
10000ee4:	e0395b15 	stw	zero,-6804(fp)
	int scene3_dir = 0;
10000ee8:	e0395c15 	stw	zero,-6800(fp)
	int scene4_dir = 0;
10000eec:	e0395d15 	stw	zero,-6796(fp)
	int scene1_x = 0;
10000ef0:	e0395e15 	stw	zero,-6792(fp)
	int scene1_y = 0;
10000ef4:	e0395f15 	stw	zero,-6788(fp)
	int scene2_x = 0;
10000ef8:	e0396015 	stw	zero,-6784(fp)
	int scene2_y = 0;
10000efc:	e0396115 	stw	zero,-6780(fp)
	int scene3_x = 10;
10000f00:	00800284 	movi	r2,10
10000f04:	e0b96215 	stw	r2,-6776(fp)
	int scene3_y = 110;
10000f08:	00801b84 	movi	r2,110
10000f0c:	e0b96315 	stw	r2,-6772(fp)
	int scene4_x = 0;
10000f10:	e0396415 	stw	zero,-6768(fp)
	int scene4_y = 0;
10000f14:	e0396515 	stw	zero,-6764(fp)
	int monster1_1_x_scene3 = 420;
10000f18:	00806904 	movi	r2,420
10000f1c:	e0b96615 	stw	r2,-6760(fp)
	int monster1_1_y_scene3 = 185;
10000f20:	00802e44 	movi	r2,185
10000f24:	e0b96715 	stw	r2,-6756(fp)
	int monster1_1_x = 420;
10000f28:	00806904 	movi	r2,420
10000f2c:	e0b93c15 	stw	r2,-6928(fp)
	int monster1_1_y = 185;
10000f30:	00802e44 	movi	r2,185
10000f34:	e0b93d15 	stw	r2,-6924(fp)
	int monster1_1_left = True;
10000f38:	00800044 	movi	r2,1
10000f3c:	e0b93e15 	stw	r2,-6920(fp)
	int monster1_1_health = 3;
10000f40:	008000c4 	movi	r2,3
10000f44:	e0b93f15 	stw	r2,-6916(fp)
	int monster2_1_x_scene3 = 420;
10000f48:	00806904 	movi	r2,420
10000f4c:	e0b96815 	stw	r2,-6752(fp)
	int monster2_1_y_scene3 = 30;
10000f50:	00800784 	movi	r2,30
10000f54:	e0b96915 	stw	r2,-6748(fp)
	int monster2_1_x = 220;
10000f58:	00803704 	movi	r2,220
10000f5c:	e0b94015 	stw	r2,-6912(fp)
	int monster2_1_y = 55;
10000f60:	00800dc4 	movi	r2,55
10000f64:	e0b94115 	stw	r2,-6908(fp)
	int monster2_1_left = True;
10000f68:	00800044 	movi	r2,1
10000f6c:	e0b94215 	stw	r2,-6904(fp)
	int monster2_jump_counter = 0;
10000f70:	e0394315 	stw	zero,-6900(fp)
	int monster2_grounded = True;
10000f74:	00800044 	movi	r2,1
10000f78:	e0b96a15 	stw	r2,-6744(fp)
	int mon2_at_top = True;
10000f7c:	00800044 	movi	r2,1
10000f80:	e0b94415 	stw	r2,-6896(fp)
	int mon2_hit_bot = False;
10000f84:	e0394515 	stw	zero,-6892(fp)
	float mon_2_y_inc = 0;
10000f88:	e0394615 	stw	zero,-6888(fp)
	int monster2_1_health = 3;
10000f8c:	008000c4 	movi	r2,3
10000f90:	e0b94715 	stw	r2,-6884(fp)
	int monster3_1_x_scene3 = 180;
10000f94:	00802d04 	movi	r2,180
10000f98:	e0b96b15 	stw	r2,-6740(fp)
	int monster3_1_y_scene3 = 215;
10000f9c:	008035c4 	movi	r2,215
10000fa0:	e0b96c15 	stw	r2,-6736(fp)
	int monster3_1_x = 220;
10000fa4:	00803704 	movi	r2,220
10000fa8:	e0b94815 	stw	r2,-6880(fp)
	int monster3_1_y = 55;
10000fac:	00800dc4 	movi	r2,55
10000fb0:	e0b94915 	stw	r2,-6876(fp)
	int monster3_1_left = False;
10000fb4:	e0394a15 	stw	zero,-6872(fp)

	while(1)
	{
		toggle++;
10000fb8:	e0b92783 	ldbu	r2,-7010(fp)
10000fbc:	10800044 	addi	r2,r2,1
10000fc0:	e0b92785 	stb	r2,-7010(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10000fc4:	01000084 	movi	r4,2
10000fc8:	01414004 	movi	r5,1280
10000fcc:	00002480 	call	10000248 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10000fd0:	0009883a 	mov	r4,zero
10000fd4:	01414704 	movi	r5,1308
10000fd8:	00002480 	call	10000248 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000fdc:	e0b94e03 	ldbu	r2,-6856(fp)
10000fe0:	108003cc 	andi	r2,r2,15
10000fe4:	0009883a 	mov	r4,zero
10000fe8:	100b883a 	mov	r5,r2
10000fec:	00002480 	call	10000248 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000ff0:	0009883a 	mov	r4,zero
10000ff4:	0140a444 	movi	r5,657
10000ff8:	00002480 	call	10000248 <IO_write>
		if(toggle%2)
10000ffc:	e0b92783 	ldbu	r2,-7010(fp)
10001000:	1080004c 	andi	r2,r2,1
10001004:	10803fcc 	andi	r2,r2,255
10001008:	10000426 	beq	r2,zero,1000101c <main+0xce8>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
1000100c:	0009883a 	mov	r4,zero
10001010:	01400044 	movi	r5,1
10001014:	00002480 	call	10000248 <IO_write>
10001018:	00000306 	br	10001028 <main+0xcf4>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
1000101c:	0009883a 	mov	r4,zero
10001020:	01401044 	movi	r5,65
10001024:	00002480 	call	10000248 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10001028:	0009883a 	mov	r4,zero
1000102c:	014004c4 	movi	r5,19
10001030:	00002480 	call	10000248 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
10001034:	0009883a 	mov	r4,zero
10001038:	000b883a 	mov	r5,zero
1000103c:	00002480 	call	10000248 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001040:	01006c04 	movi	r4,432
10001044:	01414004 	movi	r5,1280
10001048:	00045fc0 	call	100045fc <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000104c:	00002406 	br	100010e0 <main+0xdac>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10001050:	01000084 	movi	r4,2
10001054:	01414004 	movi	r5,1280
10001058:	00002480 	call	10000248 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
1000105c:	0009883a 	mov	r4,zero
10001060:	01414704 	movi	r5,1308
10001064:	00002480 	call	10000248 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10001068:	e0b94e03 	ldbu	r2,-6856(fp)
1000106c:	108003cc 	andi	r2,r2,15
10001070:	0009883a 	mov	r4,zero
10001074:	100b883a 	mov	r5,r2
10001078:	00002480 	call	10000248 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
1000107c:	0009883a 	mov	r4,zero
10001080:	0140a444 	movi	r5,657
10001084:	00002480 	call	10000248 <IO_write>
			if(toggle%2)
10001088:	e0b92783 	ldbu	r2,-7010(fp)
1000108c:	1080004c 	andi	r2,r2,1
10001090:	10803fcc 	andi	r2,r2,255
10001094:	10000426 	beq	r2,zero,100010a8 <main+0xd74>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10001098:	0009883a 	mov	r4,zero
1000109c:	01400044 	movi	r5,1
100010a0:	00002480 	call	10000248 <IO_write>
100010a4:	00000306 	br	100010b4 <main+0xd80>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
100010a8:	0009883a 	mov	r4,zero
100010ac:	01401044 	movi	r5,65
100010b0:	00002480 	call	10000248 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
100010b4:	0009883a 	mov	r4,zero
100010b8:	014004c4 	movi	r5,19
100010bc:	00002480 	call	10000248 <IO_write>
			IO_write(HPI_DATA,0x0000);//
100010c0:	0009883a 	mov	r4,zero
100010c4:	000b883a 	mov	r5,zero
100010c8:	00002480 	call	10000248 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100010cc:	01006c04 	movi	r4,432
100010d0:	01414004 	movi	r5,1280
100010d4:	00045fc0 	call	100045fc <UsbWrite>
			usleep(10*1000);
100010d8:	0109c404 	movi	r4,10000
100010dc:	0013a800 	call	10013a80 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100010e0:	010000c4 	movi	r4,3
100010e4:	00002c00 	call	100002c0 <IO_read>
100010e8:	10bfffcc 	andi	r2,r2,65535
100010ec:	1080040c 	andi	r2,r2,16
100010f0:	103fd726 	beq	r2,zero,10001050 <__alt_data_end+0xf8001050>
			usleep(10*1000);
		}//end while



		usb_ctl_val = UsbWaitTDListDone();
100010f4:	00055c00 	call	100055c0 <UsbWaitTDListDone>
100010f8:	e0b9270d 	sth	r2,-7012(fp)

		// packet starts from 0x051c, reading third byte
		// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
		IO_write(HPI_ADDR,0x051e); //the start address
100010fc:	01000084 	movi	r4,2
10001100:	01414784 	movi	r5,1310
10001104:	00002480 	call	10000248 <IO_write>
		keycode = IO_read(HPI_DATA);
10001108:	0009883a 	mov	r4,zero
1000110c:	00002c00 	call	100002c0 <IO_read>
10001110:	10bfffcc 	andi	r2,r2,65535
10001114:	e0b94c15 	stw	r2,-6864(fp)
		printf("\nkeycode value is %x\n",keycode);
10001118:	01040074 	movhi	r4,4097
1000111c:	21182f04 	addi	r4,r4,24764
10001120:	e1794c17 	ldw	r5,-6864(fp)
10001124:	0007b380 	call	10007b38 <printf>
		IOWR(KEYCODE_BASE, 0, keycode & 0xff);
10001128:	e0b94c17 	ldw	r2,-6864(fp)
1000112c:	10c03fcc 	andi	r3,r2,255
10001130:	0080e404 	movi	r2,912
10001134:	10c00035 	stwio	r3,0(r2)


		usleep(200);//usleep(5000);
10001138:	01003204 	movi	r4,200
1000113c:	0013a800 	call	10013a80 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10001140:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001144:	10bfffcc 	andi	r2,r2,65535
10001148:	1009883a 	mov	r4,r2
1000114c:	00046500 	call	10004650 <UsbRead>
10001150:	e0b9270d 	sth	r2,-7012(fp)

		if(!(usb_ctl_val & no_device))
10001154:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001158:	e0f9270b 	ldhu	r3,-7012(fp)
1000115c:	1884703a 	and	r2,r3,r2
10001160:	10bfffcc 	andi	r2,r2,65535
10001164:	1000201e 	bne	r2,zero,100011e8 <main+0xeb4>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10001168:	e03927c5 	stb	zero,-7009(fp)
1000116c:	00001006 	br	100011b0 <main+0xe7c>
			{
				usleep(5*1000);
10001170:	0104e204 	movi	r4,5000
10001174:	0013a800 	call	10013a80 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
10001178:	d0a6cb0b 	ldhu	r2,-25812(gp)
1000117c:	10bfffcc 	andi	r2,r2,65535
10001180:	1009883a 	mov	r4,r2
10001184:	00046500 	call	10004650 <UsbRead>
10001188:	e0b9270d 	sth	r2,-7012(fp)
				if(usb_ctl_val & no_device) break;
1000118c:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001190:	e0f9270b 	ldhu	r3,-7012(fp)
10001194:	1884703a 	and	r2,r3,r2
10001198:	10bfffcc 	andi	r2,r2,65535
1000119c:	10000126 	beq	r2,zero,100011a4 <main+0xe70>
100011a0:	00000606 	br	100011bc <main+0xe88>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
100011a4:	e0b927c3 	ldbu	r2,-7009(fp)
100011a8:	10800044 	addi	r2,r2,1
100011ac:	e0b927c5 	stb	r2,-7009(fp)
100011b0:	e0b927c3 	ldbu	r2,-7009(fp)
100011b4:	108001f0 	cmpltui	r2,r2,7
100011b8:	103fed1e 	bne	r2,zero,10001170 <__alt_data_end+0xf8001170>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
			}
			if(!(usb_ctl_val & no_device))
100011bc:	d0a6cb8b 	ldhu	r2,-25810(gp)
100011c0:	e0f9270b 	ldhu	r3,-7012(fp)
100011c4:	1884703a 	and	r2,r3,r2
100011c8:	10bfffcc 	andi	r2,r2,65535
100011cc:	1000061e 	bne	r2,zero,100011e8 <main+0xeb4>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
100011d0:	01040074 	movhi	r4,4097
100011d4:	21183504 	addi	r4,r4,24788
100011d8:	0007c2c0 	call	10007c2c <puts>
				printf("[INFO]: please insert again!!! \n");
100011dc:	01040074 	movhi	r4,4097
100011e0:	21184004 	addi	r4,r4,24832
100011e4:	0007c2c0 	call	10007c2c <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
100011e8:	00001d06 	br	10001260 <main+0xf2c>
		{

			usb_ctl_val = UsbRead(ctl_reg);
100011ec:	d0a6cb0b 	ldhu	r2,-25812(gp)
100011f0:	10bfffcc 	andi	r2,r2,65535
100011f4:	1009883a 	mov	r4,r2
100011f8:	00046500 	call	10004650 <UsbRead>
100011fc:	e0b9270d 	sth	r2,-7012(fp)
			usleep(5*1000);
10001200:	0104e204 	movi	r4,5000
10001204:	0013a800 	call	10013a80 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001208:	d0a6cb0b 	ldhu	r2,-25812(gp)
1000120c:	10bfffcc 	andi	r2,r2,65535
10001210:	1009883a 	mov	r4,r2
10001214:	00046500 	call	10004650 <UsbRead>
10001218:	e0b9270d 	sth	r2,-7012(fp)
			usleep(5*1000);
1000121c:	0104e204 	movi	r4,5000
10001220:	0013a800 	call	10013a80 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001224:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001228:	10bfffcc 	andi	r2,r2,65535
1000122c:	1009883a 	mov	r4,r2
10001230:	00046500 	call	10004650 <UsbRead>
10001234:	e0b9270d 	sth	r2,-7012(fp)
			usleep(5*1000);
10001238:	0104e204 	movi	r4,5000
1000123c:	0013a800 	call	10013a80 <usleep>

			if(usb_ctl_val & no_device)
10001240:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001244:	e0f9270b 	ldhu	r3,-7012(fp)
10001248:	1884703a 	and	r2,r3,r2
1000124c:	10bfffcc 	andi	r2,r2,65535
10001250:	10000126 	beq	r2,zero,10001258 <main+0xf24>
				goto USB_HOT_PLUG;
10001254:	003c4506 	br	1000036c <__alt_data_end+0xf800036c>

			usleep(200);
10001258:	01003204 	movi	r4,200
1000125c:	0013a800 	call	10013a80 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
10001260:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001264:	e0f9270b 	ldhu	r3,-7012(fp)
10001268:	1884703a 	and	r2,r3,r2
1000126c:	10bfffcc 	andi	r2,r2,65535
10001270:	103fde26 	beq	r2,zero,100011ec <__alt_data_end+0xf80011ec>
			usleep(200);
		}


    // GAME START
	if(*HEALTH == 0){
10001274:	00805c04 	movi	r2,368
10001278:	10800017 	ldw	r2,0(r2)
1000127c:	10000f1e 	bne	r2,zero,100012bc <main+0xf88>
		if (keycode == 0x15){
10001280:	e0b94c17 	ldw	r2,-6864(fp)
10001284:	10800558 	cmpnei	r2,r2,21
10001288:	1000081e 	bne	r2,zero,100012ac <main+0xf78>
			sceneStart = True;
1000128c:	00800044 	movi	r2,1
10001290:	e0b93b15 	stw	r2,-6932(fp)
			*HEALTH = 3;
10001294:	00805c04 	movi	r2,368
10001298:	00c000c4 	movi	r3,3
1000129c:	10c00015 	stw	r3,0(r2)
			*LOSS_EN = False;
100012a0:	00805404 	movi	r2,336
100012a4:	10000015 	stw	zero,0(r2)
		}
		else{
			*LOSS_EN = True;
		}
		continue;
100012a8:	000cd306 	br	100045f8 <main+0x42c4>
			sceneStart = True;
			*HEALTH = 3;
			*LOSS_EN = False;
		}
		else{
			*LOSS_EN = True;
100012ac:	00805404 	movi	r2,336
100012b0:	00c00044 	movi	r3,1
100012b4:	10c00015 	stw	r3,0(r2)
		}
		continue;
100012b8:	000ccf06 	br	100045f8 <main+0x42c4>
	}
	if(keycode==0x17){
100012bc:	e0b94c17 	ldw	r2,-6864(fp)
100012c0:	108005d8 	cmpnei	r2,r2,23
100012c4:	1000041e 	bne	r2,zero,100012d8 <main+0xfa4>
		*TIT_EN = True;
100012c8:	00805804 	movi	r2,352
100012cc:	00c00044 	movi	r3,1
100012d0:	10c00015 	stw	r3,0(r2)
		continue;
100012d4:	000cc806 	br	100045f8 <main+0x42c4>
	}
	else{
		*TIT_EN = False;
100012d8:	00805804 	movi	r2,352
100012dc:	10000015 	stw	zero,0(r2)
	}
	if(*MON1_EN == False && *MON2_EN == False){
100012e0:	0080c804 	movi	r2,800
100012e4:	10800003 	ldbu	r2,0(r2)
100012e8:	10803fcc 	andi	r2,r2,255
100012ec:	1080201c 	xori	r2,r2,128
100012f0:	10bfe004 	addi	r2,r2,-128
100012f4:	10000a1e 	bne	r2,zero,10001320 <main+0xfec>
100012f8:	0080bc04 	movi	r2,752
100012fc:	10800003 	ldbu	r2,0(r2)
10001300:	10803fcc 	andi	r2,r2,255
10001304:	1080201c 	xori	r2,r2,128
10001308:	10bfe004 	addi	r2,r2,-128
1000130c:	1000041e 	bne	r2,zero,10001320 <main+0xfec>
		*WIN_EN = True;
10001310:	00805004 	movi	r2,320
10001314:	00c00044 	movi	r3,1
10001318:	10c00015 	stw	r3,0(r2)
1000131c:	00000206 	br	10001328 <main+0xff4>
	}
	else{
		*WIN_EN = False;
10001320:	00805004 	movi	r2,320
10001324:	10000015 	stw	zero,0(r2)
	}
	//Scene Init
	if(sceneStart == True){
10001328:	e0b93b17 	ldw	r2,-6932(fp)
1000132c:	10800058 	cmpnei	r2,r2,1
10001330:	10002e1e 	bne	r2,zero,100013ec <main+0x10b8>
		if(sceneNum == 3){
10001334:	e0b95417 	ldw	r2,-6832(fp)
10001338:	108000d8 	cmpnei	r2,r2,3
1000133c:	1000241e 	bne	r2,zero,100013d0 <main+0x109c>
			*SAMUS_X = scene3_x;
10001340:	0080d804 	movi	r2,864
10001344:	e0f96217 	ldw	r3,-6776(fp)
10001348:	10c00015 	stw	r3,0(r2)
			*SAMUS_Y = scene3_y;
1000134c:	0080d404 	movi	r2,848
10001350:	e0f96317 	ldw	r3,-6772(fp)
10001354:	10c00015 	stw	r3,0(r2)
			*SAMUS_DIR = scene3_dir;
10001358:	00804c04 	movi	r2,304
1000135c:	e0f95c17 	ldw	r3,-6800(fp)
10001360:	10c00005 	stb	r3,0(r2)
			monster1_1_x = monster1_1_x_scene3;
10001364:	e0b96617 	ldw	r2,-6760(fp)
10001368:	e0b93c15 	stw	r2,-6928(fp)
			monster1_1_y = monster1_1_y_scene3;
1000136c:	e0b96717 	ldw	r2,-6756(fp)
10001370:	e0b93d15 	stw	r2,-6924(fp)
			monster1_1_health = 3;
10001374:	008000c4 	movi	r2,3
10001378:	e0b93f15 	stw	r2,-6916(fp)
			monster2_1_x = monster2_1_x_scene3;
1000137c:	e0b96817 	ldw	r2,-6752(fp)
10001380:	e0b94015 	stw	r2,-6912(fp)
			monster2_1_y = monster2_1_y_scene3;
10001384:	e0b96917 	ldw	r2,-6748(fp)
10001388:	e0b94115 	stw	r2,-6908(fp)
			monster2_1_health = 3;
1000138c:	008000c4 	movi	r2,3
10001390:	e0b94715 	stw	r2,-6884(fp)
			mon2_at_top = True;
10001394:	00800044 	movi	r2,1
10001398:	e0b94415 	stw	r2,-6896(fp)
			monster3_1_x = monster3_1_x_scene3;
1000139c:	e0b96b17 	ldw	r2,-6740(fp)
100013a0:	e0b94815 	stw	r2,-6880(fp)
			monster3_1_y = monster3_1_y_scene3;
100013a4:	e0b96c17 	ldw	r2,-6736(fp)
100013a8:	e0b94915 	stw	r2,-6876(fp)
			*MON1_EN = 1;
100013ac:	0080c804 	movi	r2,800
100013b0:	00c00044 	movi	r3,1
100013b4:	10c00005 	stb	r3,0(r2)
			*MON2_EN = 1;
100013b8:	0080bc04 	movi	r2,752
100013bc:	00c00044 	movi	r3,1
100013c0:	10c00005 	stb	r3,0(r2)
			*MON3_EN = 1;
100013c4:	0080b004 	movi	r2,704
100013c8:	00c00044 	movi	r3,1
100013cc:	10c00005 	stb	r3,0(r2)
		}
		sceneStart = False;
100013d0:	e0393b15 	stw	zero,-6932(fp)
		*EXP1_EN = 0;
100013d4:	0080a404 	movi	r2,656
100013d8:	10000015 	stw	zero,0(r2)
		*EXP2_EN = 0;
100013dc:	00809804 	movi	r2,608
100013e0:	10000015 	stw	zero,0(r2)
		*EXP3_EN = 0;
100013e4:	00808c04 	movi	r2,560
100013e8:	10000015 	stw	zero,0(r2)
	}


    //SAMUS MOVEMENT
    *TIT_EN = 0;
100013ec:	00805804 	movi	r2,352
100013f0:	10000015 	stw	zero,0(r2)
    //Move Right
    if(((keycode&0x0000FF)==0x1A || (keycode&0x00FF00)>>8 == 0x1A || (keycode&0xFF0000)>>16 == 0x1A) && has_control == True){
100013f4:	e0b94c17 	ldw	r2,-6864(fp)
100013f8:	10803fcc 	andi	r2,r2,255
100013fc:	108006a0 	cmpeqi	r2,r2,26
10001400:	10000a1e 	bne	r2,zero,1000142c <main+0x10f8>
10001404:	e0b94c17 	ldw	r2,-6864(fp)
10001408:	10bfc00c 	andi	r2,r2,65280
1000140c:	1005d23a 	srai	r2,r2,8
10001410:	108006a0 	cmpeqi	r2,r2,26
10001414:	1000051e 	bne	r2,zero,1000142c <main+0x10f8>
10001418:	e0b94c17 	ldw	r2,-6864(fp)
1000141c:	10803fec 	andhi	r2,r2,255
10001420:	1005d43a 	srai	r2,r2,16
10001424:	10800698 	cmpnei	r2,r2,26
10001428:	1000071e 	bne	r2,zero,10001448 <main+0x1114>
1000142c:	e0b92e17 	ldw	r2,-6984(fp)
10001430:	10800058 	cmpnei	r2,r2,1
10001434:	1000041e 	bne	r2,zero,10001448 <main+0x1114>
    	*SAMUS_UP = 1;
10001438:	00804404 	movi	r2,272
1000143c:	00c00044 	movi	r3,1
10001440:	10c00005 	stb	r3,0(r2)
10001444:	00000206 	br	10001450 <main+0x111c>
    }
    else{
    	*SAMUS_UP = 0;
10001448:	00804404 	movi	r2,272
1000144c:	10000005 	stb	zero,0(r2)
    }
    //Move right
    if(((keycode&0x0000FF)==7 || (keycode&0x00FF00)>>8 == 7 || (keycode&0xFF0000)>>16 == 7) && has_control == True){
10001450:	e0b94c17 	ldw	r2,-6864(fp)
10001454:	10803fcc 	andi	r2,r2,255
10001458:	108001e0 	cmpeqi	r2,r2,7
1000145c:	10000a1e 	bne	r2,zero,10001488 <main+0x1154>
10001460:	e0b94c17 	ldw	r2,-6864(fp)
10001464:	10bfc00c 	andi	r2,r2,65280
10001468:	1005d23a 	srai	r2,r2,8
1000146c:	108001e0 	cmpeqi	r2,r2,7
10001470:	1000051e 	bne	r2,zero,10001488 <main+0x1154>
10001474:	e0b94c17 	ldw	r2,-6864(fp)
10001478:	10803fec 	andhi	r2,r2,255
1000147c:	1005d43a 	srai	r2,r2,16
10001480:	108001d8 	cmpnei	r2,r2,7
10001484:	1000911e 	bne	r2,zero,100016cc <main+0x1398>
10001488:	e0b92e17 	ldw	r2,-6984(fp)
1000148c:	10800058 	cmpnei	r2,r2,1
10001490:	10008e1e 	bne	r2,zero,100016cc <main+0x1398>
    	if(scene[sceneNum][(*SAMUS_Y+10)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+25)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+50)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+70)/30][(*SAMUS_X+40)/30]==0){
10001494:	0080d404 	movi	r2,848
10001498:	10800017 	ldw	r2,0(r2)
1000149c:	10800284 	addi	r2,r2,10
100014a0:	1009883a 	mov	r4,r2
100014a4:	01400784 	movi	r5,30
100014a8:	00057ac0 	call	100057ac <__divsi3>
100014ac:	1023883a 	mov	r17,r2
100014b0:	0080d804 	movi	r2,864
100014b4:	10800017 	ldw	r2,0(r2)
100014b8:	10800a04 	addi	r2,r2,40
100014bc:	1009883a 	mov	r4,r2
100014c0:	01400784 	movi	r5,30
100014c4:	00057ac0 	call	100057ac <__divsi3>
100014c8:	1021883a 	mov	r16,r2
100014cc:	e4b95417 	ldw	r18,-6832(fp)
100014d0:	8809883a 	mov	r4,r17
100014d4:	01400544 	movi	r5,21
100014d8:	000586c0 	call	1000586c <__mulsi3>
100014dc:	1023883a 	mov	r17,r2
100014e0:	9009883a 	mov	r4,r18
100014e4:	01405404 	movi	r5,336
100014e8:	000586c0 	call	1000586c <__mulsi3>
100014ec:	8885883a 	add	r2,r17,r2
100014f0:	1405883a 	add	r2,r2,r16
100014f4:	1085883a 	add	r2,r2,r2
100014f8:	1085883a 	add	r2,r2,r2
100014fc:	e0f92704 	addi	r3,fp,-7012
10001500:	1885883a 	add	r2,r3,r2
10001504:	10804604 	addi	r2,r2,280
10001508:	10800017 	ldw	r2,0(r2)
1000150c:	10006e1e 	bne	r2,zero,100016c8 <main+0x1394>
10001510:	0080d404 	movi	r2,848
10001514:	10800017 	ldw	r2,0(r2)
10001518:	10800644 	addi	r2,r2,25
1000151c:	1009883a 	mov	r4,r2
10001520:	01400784 	movi	r5,30
10001524:	00057ac0 	call	100057ac <__divsi3>
10001528:	1023883a 	mov	r17,r2
1000152c:	0080d804 	movi	r2,864
10001530:	10800017 	ldw	r2,0(r2)
10001534:	10800a04 	addi	r2,r2,40
10001538:	1009883a 	mov	r4,r2
1000153c:	01400784 	movi	r5,30
10001540:	00057ac0 	call	100057ac <__divsi3>
10001544:	1021883a 	mov	r16,r2
10001548:	e4b95417 	ldw	r18,-6832(fp)
1000154c:	8809883a 	mov	r4,r17
10001550:	01400544 	movi	r5,21
10001554:	000586c0 	call	1000586c <__mulsi3>
10001558:	1023883a 	mov	r17,r2
1000155c:	9009883a 	mov	r4,r18
10001560:	01405404 	movi	r5,336
10001564:	000586c0 	call	1000586c <__mulsi3>
10001568:	8885883a 	add	r2,r17,r2
1000156c:	1405883a 	add	r2,r2,r16
10001570:	1085883a 	add	r2,r2,r2
10001574:	1085883a 	add	r2,r2,r2
10001578:	e0f92704 	addi	r3,fp,-7012
1000157c:	1885883a 	add	r2,r3,r2
10001580:	10804604 	addi	r2,r2,280
10001584:	10800017 	ldw	r2,0(r2)
10001588:	10004f1e 	bne	r2,zero,100016c8 <main+0x1394>
1000158c:	0080d404 	movi	r2,848
10001590:	10800017 	ldw	r2,0(r2)
10001594:	10800c84 	addi	r2,r2,50
10001598:	1009883a 	mov	r4,r2
1000159c:	01400784 	movi	r5,30
100015a0:	00057ac0 	call	100057ac <__divsi3>
100015a4:	1023883a 	mov	r17,r2
100015a8:	0080d804 	movi	r2,864
100015ac:	10800017 	ldw	r2,0(r2)
100015b0:	10800a04 	addi	r2,r2,40
100015b4:	1009883a 	mov	r4,r2
100015b8:	01400784 	movi	r5,30
100015bc:	00057ac0 	call	100057ac <__divsi3>
100015c0:	1021883a 	mov	r16,r2
100015c4:	e4b95417 	ldw	r18,-6832(fp)
100015c8:	8809883a 	mov	r4,r17
100015cc:	01400544 	movi	r5,21
100015d0:	000586c0 	call	1000586c <__mulsi3>
100015d4:	1023883a 	mov	r17,r2
100015d8:	9009883a 	mov	r4,r18
100015dc:	01405404 	movi	r5,336
100015e0:	000586c0 	call	1000586c <__mulsi3>
100015e4:	8885883a 	add	r2,r17,r2
100015e8:	1405883a 	add	r2,r2,r16
100015ec:	1085883a 	add	r2,r2,r2
100015f0:	1085883a 	add	r2,r2,r2
100015f4:	e0f92704 	addi	r3,fp,-7012
100015f8:	1885883a 	add	r2,r3,r2
100015fc:	10804604 	addi	r2,r2,280
10001600:	10800017 	ldw	r2,0(r2)
10001604:	1000301e 	bne	r2,zero,100016c8 <main+0x1394>
10001608:	0080d404 	movi	r2,848
1000160c:	10800017 	ldw	r2,0(r2)
10001610:	10801184 	addi	r2,r2,70
10001614:	1009883a 	mov	r4,r2
10001618:	01400784 	movi	r5,30
1000161c:	00057ac0 	call	100057ac <__divsi3>
10001620:	1023883a 	mov	r17,r2
10001624:	0080d804 	movi	r2,864
10001628:	10800017 	ldw	r2,0(r2)
1000162c:	10800a04 	addi	r2,r2,40
10001630:	1009883a 	mov	r4,r2
10001634:	01400784 	movi	r5,30
10001638:	00057ac0 	call	100057ac <__divsi3>
1000163c:	1021883a 	mov	r16,r2
10001640:	e4b95417 	ldw	r18,-6832(fp)
10001644:	8809883a 	mov	r4,r17
10001648:	01400544 	movi	r5,21
1000164c:	000586c0 	call	1000586c <__mulsi3>
10001650:	1023883a 	mov	r17,r2
10001654:	9009883a 	mov	r4,r18
10001658:	01405404 	movi	r5,336
1000165c:	000586c0 	call	1000586c <__mulsi3>
10001660:	8885883a 	add	r2,r17,r2
10001664:	1405883a 	add	r2,r2,r16
10001668:	1085883a 	add	r2,r2,r2
1000166c:	1085883a 	add	r2,r2,r2
10001670:	e0f92704 	addi	r3,fp,-7012
10001674:	1885883a 	add	r2,r3,r2
10001678:	10804604 	addi	r2,r2,280
1000167c:	10800017 	ldw	r2,0(r2)
10001680:	1000111e 	bne	r2,zero,100016c8 <main+0x1394>
    		*SAMUS_DIR = 0;
10001684:	00804c04 	movi	r2,304
10001688:	10000005 	stb	zero,0(r2)
    		*SAMUS_X+=6;
1000168c:	0080d804 	movi	r2,864
10001690:	00c0d804 	movi	r3,864
10001694:	18c00017 	ldw	r3,0(r3)
10001698:	18c00184 	addi	r3,r3,6
1000169c:	10c00015 	stw	r3,0(r2)
    		if(grounded == True){
100016a0:	e0b92c17 	ldw	r2,-6992(fp)
100016a4:	10800058 	cmpnei	r2,r2,1
100016a8:	1000041e 	bne	r2,zero,100016bc <main+0x1388>
    			*SAMUS_WALK = 1;
100016ac:	0080d004 	movi	r2,832
100016b0:	00c00044 	movi	r3,1
100016b4:	10c00005 	stb	r3,0(r2)
100016b8:	00000306 	br	100016c8 <main+0x1394>
    		}
    		else{
    			*SAMUS_WALK = 0;
100016bc:	0080d004 	movi	r2,832
100016c0:	10000005 	stb	zero,0(r2)
    else{
    	*SAMUS_UP = 0;
    }
    //Move right
    if(((keycode&0x0000FF)==7 || (keycode&0x00FF00)>>8 == 7 || (keycode&0xFF0000)>>16 == 7) && has_control == True){
    	if(scene[sceneNum][(*SAMUS_Y+10)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+25)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+50)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+70)/30][(*SAMUS_X+40)/30]==0){
100016c4:	0000a306 	br	10001954 <main+0x1620>
100016c8:	0000a206 	br	10001954 <main+0x1620>
    			*SAMUS_WALK = 0;
    		}
    	}
    }
    //Move Left
    else if(((keycode&0x0000FF)==4 || (keycode&0x00FF00)>>8 == 4 || (keycode&0xFF0000)>>16 == 4) && has_control == True){
100016cc:	e0b94c17 	ldw	r2,-6864(fp)
100016d0:	10803fcc 	andi	r2,r2,255
100016d4:	10800120 	cmpeqi	r2,r2,4
100016d8:	10000a1e 	bne	r2,zero,10001704 <main+0x13d0>
100016dc:	e0b94c17 	ldw	r2,-6864(fp)
100016e0:	10bfc00c 	andi	r2,r2,65280
100016e4:	1005d23a 	srai	r2,r2,8
100016e8:	10800120 	cmpeqi	r2,r2,4
100016ec:	1000051e 	bne	r2,zero,10001704 <main+0x13d0>
100016f0:	e0b94c17 	ldw	r2,-6864(fp)
100016f4:	10803fec 	andhi	r2,r2,255
100016f8:	1005d43a 	srai	r2,r2,16
100016fc:	10800118 	cmpnei	r2,r2,4
10001700:	1000921e 	bne	r2,zero,1000194c <main+0x1618>
10001704:	e0b92e17 	ldw	r2,-6984(fp)
10001708:	10800058 	cmpnei	r2,r2,1
1000170c:	10008f1e 	bne	r2,zero,1000194c <main+0x1618>
    	if(scene[sceneNum][(*SAMUS_Y+15)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+25)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+50)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+70)/30][(*SAMUS_X-3)/30]==0){
10001710:	0080d404 	movi	r2,848
10001714:	10800017 	ldw	r2,0(r2)
10001718:	108003c4 	addi	r2,r2,15
1000171c:	1009883a 	mov	r4,r2
10001720:	01400784 	movi	r5,30
10001724:	00057ac0 	call	100057ac <__divsi3>
10001728:	1023883a 	mov	r17,r2
1000172c:	0080d804 	movi	r2,864
10001730:	10800017 	ldw	r2,0(r2)
10001734:	10bfff44 	addi	r2,r2,-3
10001738:	1009883a 	mov	r4,r2
1000173c:	01400784 	movi	r5,30
10001740:	00057ac0 	call	100057ac <__divsi3>
10001744:	1021883a 	mov	r16,r2
10001748:	e4b95417 	ldw	r18,-6832(fp)
1000174c:	8809883a 	mov	r4,r17
10001750:	01400544 	movi	r5,21
10001754:	000586c0 	call	1000586c <__mulsi3>
10001758:	1023883a 	mov	r17,r2
1000175c:	9009883a 	mov	r4,r18
10001760:	01405404 	movi	r5,336
10001764:	000586c0 	call	1000586c <__mulsi3>
10001768:	8885883a 	add	r2,r17,r2
1000176c:	1405883a 	add	r2,r2,r16
10001770:	1085883a 	add	r2,r2,r2
10001774:	1085883a 	add	r2,r2,r2
10001778:	e0f92704 	addi	r3,fp,-7012
1000177c:	1885883a 	add	r2,r3,r2
10001780:	10804604 	addi	r2,r2,280
10001784:	10800017 	ldw	r2,0(r2)
10001788:	10006f1e 	bne	r2,zero,10001948 <main+0x1614>
1000178c:	0080d404 	movi	r2,848
10001790:	10800017 	ldw	r2,0(r2)
10001794:	10800644 	addi	r2,r2,25
10001798:	1009883a 	mov	r4,r2
1000179c:	01400784 	movi	r5,30
100017a0:	00057ac0 	call	100057ac <__divsi3>
100017a4:	1023883a 	mov	r17,r2
100017a8:	0080d804 	movi	r2,864
100017ac:	10800017 	ldw	r2,0(r2)
100017b0:	10bfff44 	addi	r2,r2,-3
100017b4:	1009883a 	mov	r4,r2
100017b8:	01400784 	movi	r5,30
100017bc:	00057ac0 	call	100057ac <__divsi3>
100017c0:	1021883a 	mov	r16,r2
100017c4:	e4b95417 	ldw	r18,-6832(fp)
100017c8:	8809883a 	mov	r4,r17
100017cc:	01400544 	movi	r5,21
100017d0:	000586c0 	call	1000586c <__mulsi3>
100017d4:	1023883a 	mov	r17,r2
100017d8:	9009883a 	mov	r4,r18
100017dc:	01405404 	movi	r5,336
100017e0:	000586c0 	call	1000586c <__mulsi3>
100017e4:	8885883a 	add	r2,r17,r2
100017e8:	1405883a 	add	r2,r2,r16
100017ec:	1085883a 	add	r2,r2,r2
100017f0:	1085883a 	add	r2,r2,r2
100017f4:	e0f92704 	addi	r3,fp,-7012
100017f8:	1885883a 	add	r2,r3,r2
100017fc:	10804604 	addi	r2,r2,280
10001800:	10800017 	ldw	r2,0(r2)
10001804:	1000501e 	bne	r2,zero,10001948 <main+0x1614>
10001808:	0080d404 	movi	r2,848
1000180c:	10800017 	ldw	r2,0(r2)
10001810:	10800c84 	addi	r2,r2,50
10001814:	1009883a 	mov	r4,r2
10001818:	01400784 	movi	r5,30
1000181c:	00057ac0 	call	100057ac <__divsi3>
10001820:	1023883a 	mov	r17,r2
10001824:	0080d804 	movi	r2,864
10001828:	10800017 	ldw	r2,0(r2)
1000182c:	10bfff44 	addi	r2,r2,-3
10001830:	1009883a 	mov	r4,r2
10001834:	01400784 	movi	r5,30
10001838:	00057ac0 	call	100057ac <__divsi3>
1000183c:	1021883a 	mov	r16,r2
10001840:	e4b95417 	ldw	r18,-6832(fp)
10001844:	8809883a 	mov	r4,r17
10001848:	01400544 	movi	r5,21
1000184c:	000586c0 	call	1000586c <__mulsi3>
10001850:	1023883a 	mov	r17,r2
10001854:	9009883a 	mov	r4,r18
10001858:	01405404 	movi	r5,336
1000185c:	000586c0 	call	1000586c <__mulsi3>
10001860:	8885883a 	add	r2,r17,r2
10001864:	1405883a 	add	r2,r2,r16
10001868:	1085883a 	add	r2,r2,r2
1000186c:	1085883a 	add	r2,r2,r2
10001870:	e0f92704 	addi	r3,fp,-7012
10001874:	1885883a 	add	r2,r3,r2
10001878:	10804604 	addi	r2,r2,280
1000187c:	10800017 	ldw	r2,0(r2)
10001880:	1000311e 	bne	r2,zero,10001948 <main+0x1614>
10001884:	0080d404 	movi	r2,848
10001888:	10800017 	ldw	r2,0(r2)
1000188c:	10801184 	addi	r2,r2,70
10001890:	1009883a 	mov	r4,r2
10001894:	01400784 	movi	r5,30
10001898:	00057ac0 	call	100057ac <__divsi3>
1000189c:	1023883a 	mov	r17,r2
100018a0:	0080d804 	movi	r2,864
100018a4:	10800017 	ldw	r2,0(r2)
100018a8:	10bfff44 	addi	r2,r2,-3
100018ac:	1009883a 	mov	r4,r2
100018b0:	01400784 	movi	r5,30
100018b4:	00057ac0 	call	100057ac <__divsi3>
100018b8:	1021883a 	mov	r16,r2
100018bc:	e4b95417 	ldw	r18,-6832(fp)
100018c0:	8809883a 	mov	r4,r17
100018c4:	01400544 	movi	r5,21
100018c8:	000586c0 	call	1000586c <__mulsi3>
100018cc:	1023883a 	mov	r17,r2
100018d0:	9009883a 	mov	r4,r18
100018d4:	01405404 	movi	r5,336
100018d8:	000586c0 	call	1000586c <__mulsi3>
100018dc:	8885883a 	add	r2,r17,r2
100018e0:	1405883a 	add	r2,r2,r16
100018e4:	1085883a 	add	r2,r2,r2
100018e8:	1085883a 	add	r2,r2,r2
100018ec:	e0f92704 	addi	r3,fp,-7012
100018f0:	1885883a 	add	r2,r3,r2
100018f4:	10804604 	addi	r2,r2,280
100018f8:	10800017 	ldw	r2,0(r2)
100018fc:	1000121e 	bne	r2,zero,10001948 <main+0x1614>
    		*SAMUS_DIR = 1;
10001900:	00804c04 	movi	r2,304
10001904:	00c00044 	movi	r3,1
10001908:	10c00005 	stb	r3,0(r2)
    		*SAMUS_X-=6;
1000190c:	0080d804 	movi	r2,864
10001910:	00c0d804 	movi	r3,864
10001914:	18c00017 	ldw	r3,0(r3)
10001918:	18fffe84 	addi	r3,r3,-6
1000191c:	10c00015 	stw	r3,0(r2)
    		if(grounded == True){
10001920:	e0b92c17 	ldw	r2,-6992(fp)
10001924:	10800058 	cmpnei	r2,r2,1
10001928:	1000041e 	bne	r2,zero,1000193c <main+0x1608>
				*SAMUS_WALK = 1;
1000192c:	0080d004 	movi	r2,832
10001930:	00c00044 	movi	r3,1
10001934:	10c00005 	stb	r3,0(r2)
10001938:	00000306 	br	10001948 <main+0x1614>
			}
    		else{
				*SAMUS_WALK = 0;
1000193c:	0080d004 	movi	r2,832
10001940:	10000005 	stb	zero,0(r2)
    		}
    	}
    }
    //Move Left
    else if(((keycode&0x0000FF)==4 || (keycode&0x00FF00)>>8 == 4 || (keycode&0xFF0000)>>16 == 4) && has_control == True){
    	if(scene[sceneNum][(*SAMUS_Y+15)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+25)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+50)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+70)/30][(*SAMUS_X-3)/30]==0){
10001944:	00000306 	br	10001954 <main+0x1620>
10001948:	00000206 	br	10001954 <main+0x1620>
				*SAMUS_WALK = 0;
			}
    	}
    }
    else{
        *SAMUS_WALK = 0;
1000194c:	0080d004 	movi	r2,832
10001950:	10000005 	stb	zero,0(r2)
    }

    // Jump code
    if(grounded == False){
10001954:	e0b92c17 	ldw	r2,-6992(fp)
10001958:	1000041e 	bne	r2,zero,1000196c <main+0x1638>
    	*SAMUS_JUMP = 1;
1000195c:	0080cc04 	movi	r2,816
10001960:	00c00044 	movi	r3,1
10001964:	10c00005 	stb	r3,0(r2)
10001968:	00000206 	br	10001974 <main+0x1640>
    }
    else{
    	*SAMUS_JUMP = 0;
1000196c:	0080cc04 	movi	r2,816
10001970:	10000005 	stb	zero,0(r2)
    }
    if(((keycode&0x0000FF)==0x2c || (keycode&0x00FF00)>>8 == 0x2c || (keycode&0xFF0000)>>16 == 0x2c) && grounded == True && let_go == False && button_let_go == True && has_control == True){
10001974:	e0b94c17 	ldw	r2,-6864(fp)
10001978:	10803fcc 	andi	r2,r2,255
1000197c:	10800b20 	cmpeqi	r2,r2,44
10001980:	10000a1e 	bne	r2,zero,100019ac <main+0x1678>
10001984:	e0b94c17 	ldw	r2,-6864(fp)
10001988:	10bfc00c 	andi	r2,r2,65280
1000198c:	1005d23a 	srai	r2,r2,8
10001990:	10800b20 	cmpeqi	r2,r2,44
10001994:	1000051e 	bne	r2,zero,100019ac <main+0x1678>
10001998:	e0b94c17 	ldw	r2,-6864(fp)
1000199c:	10803fec 	andhi	r2,r2,255
100019a0:	1005d43a 	srai	r2,r2,16
100019a4:	10800b18 	cmpnei	r2,r2,44
100019a8:	1000121e 	bne	r2,zero,100019f4 <main+0x16c0>
100019ac:	e0b92c17 	ldw	r2,-6992(fp)
100019b0:	10800058 	cmpnei	r2,r2,1
100019b4:	10000f1e 	bne	r2,zero,100019f4 <main+0x16c0>
100019b8:	e0b92d17 	ldw	r2,-6988(fp)
100019bc:	10000d1e 	bne	r2,zero,100019f4 <main+0x16c0>
100019c0:	e0b93017 	ldw	r2,-6976(fp)
100019c4:	10800058 	cmpnei	r2,r2,1
100019c8:	10000a1e 	bne	r2,zero,100019f4 <main+0x16c0>
100019cc:	e0b92e17 	ldw	r2,-6984(fp)
100019d0:	10800058 	cmpnei	r2,r2,1
100019d4:	1000071e 	bne	r2,zero,100019f4 <main+0x16c0>
    	y_inc = -12;
100019d8:	00b05034 	movhi	r2,49472
100019dc:	e0b92a15 	stw	r2,-7000(fp)
    	grounded = False;
100019e0:	e0392c15 	stw	zero,-6992(fp)
    	let_go = True;
100019e4:	00800044 	movi	r2,1
100019e8:	e0b92d15 	stw	r2,-6988(fp)
    	jump_height = 0;
100019ec:	e0392b15 	stw	zero,-6996(fp)
    	button_let_go = False;
100019f0:	e0393015 	stw	zero,-6976(fp)
    }
    if((((keycode&0x0000FF)!=0x2c && (keycode&0x00FF00)>>8 != 0x2c && (keycode&0xFF0000)>>16 != 0x2c))){
100019f4:	e0b94c17 	ldw	r2,-6864(fp)
100019f8:	10803fcc 	andi	r2,r2,255
100019fc:	10800b20 	cmpeqi	r2,r2,44
10001a00:	10000c1e 	bne	r2,zero,10001a34 <main+0x1700>
10001a04:	e0b94c17 	ldw	r2,-6864(fp)
10001a08:	10bfc00c 	andi	r2,r2,65280
10001a0c:	1005d23a 	srai	r2,r2,8
10001a10:	10800b20 	cmpeqi	r2,r2,44
10001a14:	1000071e 	bne	r2,zero,10001a34 <main+0x1700>
10001a18:	e0b94c17 	ldw	r2,-6864(fp)
10001a1c:	10803fec 	andhi	r2,r2,255
10001a20:	1005d43a 	srai	r2,r2,16
10001a24:	10800b20 	cmpeqi	r2,r2,44
10001a28:	1000021e 	bne	r2,zero,10001a34 <main+0x1700>
    	button_let_go = True;
10001a2c:	00800044 	movi	r2,1
10001a30:	e0b93015 	stw	r2,-6976(fp)
    }
    if((((keycode&0x0000FF)!=0x2c && (keycode&0x00FF00)>>8 != 0x2c && (keycode&0xFF0000)>>16 != 0x2c) && let_go == True)){
10001a34:	e0b94c17 	ldw	r2,-6864(fp)
10001a38:	10803fcc 	andi	r2,r2,255
10001a3c:	10800b20 	cmpeqi	r2,r2,44
10001a40:	10000e1e 	bne	r2,zero,10001a7c <main+0x1748>
10001a44:	e0b94c17 	ldw	r2,-6864(fp)
10001a48:	10bfc00c 	andi	r2,r2,65280
10001a4c:	1005d23a 	srai	r2,r2,8
10001a50:	10800b20 	cmpeqi	r2,r2,44
10001a54:	1000091e 	bne	r2,zero,10001a7c <main+0x1748>
10001a58:	e0b94c17 	ldw	r2,-6864(fp)
10001a5c:	10803fec 	andhi	r2,r2,255
10001a60:	1005d43a 	srai	r2,r2,16
10001a64:	10800b20 	cmpeqi	r2,r2,44
10001a68:	1000041e 	bne	r2,zero,10001a7c <main+0x1748>
10001a6c:	e0b92d17 	ldw	r2,-6988(fp)
10001a70:	10800058 	cmpnei	r2,r2,1
10001a74:	1000011e 	bne	r2,zero,10001a7c <main+0x1748>
    	let_go = False;
10001a78:	e0392d15 	stw	zero,-6988(fp)
    }

    if(let_go == False || jump_height >= max_jump_height){
10001a7c:	e0b92d17 	ldw	r2,-6988(fp)
10001a80:	10000426 	beq	r2,zero,10001a94 <main+0x1760>
10001a84:	e1392b17 	ldw	r4,-6996(fp)
10001a88:	e1795217 	ldw	r5,-6840(fp)
10001a8c:	0005d740 	call	10005d74 <__gesf2>
10001a90:	10000c16 	blt	r2,zero,10001ac4 <main+0x1790>
    	if(y_inc < -6){
10001a94:	e1392a17 	ldw	r4,-7000(fp)
10001a98:	01703034 	movhi	r5,49344
10001a9c:	0005e2c0 	call	10005e2c <__lesf2>
10001aa0:	1000020e 	bge	r2,zero,10001aac <main+0x1778>
    		y_inc = -6;
10001aa4:	00b03034 	movhi	r2,49344
10001aa8:	e0b92a15 	stw	r2,-7000(fp)
    	}
    	y_inc += gravity;
10001aac:	e1392a17 	ldw	r4,-7000(fp)
10001ab0:	e1795117 	ldw	r5,-6844(fp)
10001ab4:	00058940 	call	10005894 <__addsf3>
10001ab8:	1007883a 	mov	r3,r2
10001abc:	e0f92a15 	stw	r3,-7000(fp)
    	let_go = False;
10001ac0:	e0392d15 	stw	zero,-6988(fp)
    }

    if(grounded == True){
10001ac4:	e0b92c17 	ldw	r2,-6992(fp)
10001ac8:	10800058 	cmpnei	r2,r2,1
10001acc:	1000011e 	bne	r2,zero,10001ad4 <main+0x17a0>
    	y_inc = 0;
10001ad0:	e0392a15 	stw	zero,-7000(fp)
    }
    if(y_inc > 12){
10001ad4:	e1392a17 	ldw	r4,-7000(fp)
10001ad8:	01505034 	movhi	r5,16704
10001adc:	0005d740 	call	10005d74 <__gesf2>
10001ae0:	0080020e 	bge	zero,r2,10001aec <main+0x17b8>
    	y_inc = 12;
10001ae4:	00905034 	movhi	r2,16704
10001ae8:	e0b92a15 	stw	r2,-7000(fp)
    }

    *SAMUS_Y += y_inc;
10001aec:	0400d404 	movi	r16,848
10001af0:	0080d404 	movi	r2,848
10001af4:	10800017 	ldw	r2,0(r2)
10001af8:	1009883a 	mov	r4,r2
10001afc:	00064580 	call	10006458 <__floatsisf>
10001b00:	1007883a 	mov	r3,r2
10001b04:	1809883a 	mov	r4,r3
10001b08:	e1792a17 	ldw	r5,-7000(fp)
10001b0c:	00058940 	call	10005894 <__addsf3>
10001b10:	1007883a 	mov	r3,r2
10001b14:	1805883a 	mov	r2,r3
10001b18:	1009883a 	mov	r4,r2
10001b1c:	00063e00 	call	100063e0 <__fixsfsi>
10001b20:	80800015 	stw	r2,0(r16)
    jump_height -= y_inc;
10001b24:	e1392b17 	ldw	r4,-6996(fp)
10001b28:	e1792a17 	ldw	r5,-7000(fp)
10001b2c:	0005ee40 	call	10005ee4 <__subsf3>
10001b30:	1007883a 	mov	r3,r2
10001b34:	e0f92b15 	stw	r3,-6996(fp)

    //bot collision detection
    if((scene[sceneNum][(*SAMUS_Y+80)/30][(*SAMUS_X+5)/30] != 0 || scene[sceneNum][(*SAMUS_Y+80)/30][(*SAMUS_X+33)/30] != 0)){
10001b38:	0080d404 	movi	r2,848
10001b3c:	10800017 	ldw	r2,0(r2)
10001b40:	10801404 	addi	r2,r2,80
10001b44:	1009883a 	mov	r4,r2
10001b48:	01400784 	movi	r5,30
10001b4c:	00057ac0 	call	100057ac <__divsi3>
10001b50:	1023883a 	mov	r17,r2
10001b54:	0080d804 	movi	r2,864
10001b58:	10800017 	ldw	r2,0(r2)
10001b5c:	10800144 	addi	r2,r2,5
10001b60:	1009883a 	mov	r4,r2
10001b64:	01400784 	movi	r5,30
10001b68:	00057ac0 	call	100057ac <__divsi3>
10001b6c:	1021883a 	mov	r16,r2
10001b70:	e4b95417 	ldw	r18,-6832(fp)
10001b74:	8809883a 	mov	r4,r17
10001b78:	01400544 	movi	r5,21
10001b7c:	000586c0 	call	1000586c <__mulsi3>
10001b80:	1023883a 	mov	r17,r2
10001b84:	9009883a 	mov	r4,r18
10001b88:	01405404 	movi	r5,336
10001b8c:	000586c0 	call	1000586c <__mulsi3>
10001b90:	8885883a 	add	r2,r17,r2
10001b94:	1405883a 	add	r2,r2,r16
10001b98:	1085883a 	add	r2,r2,r2
10001b9c:	1085883a 	add	r2,r2,r2
10001ba0:	e0f92704 	addi	r3,fp,-7012
10001ba4:	1885883a 	add	r2,r3,r2
10001ba8:	10804604 	addi	r2,r2,280
10001bac:	10800017 	ldw	r2,0(r2)
10001bb0:	10001f1e 	bne	r2,zero,10001c30 <main+0x18fc>
10001bb4:	0080d404 	movi	r2,848
10001bb8:	10800017 	ldw	r2,0(r2)
10001bbc:	10801404 	addi	r2,r2,80
10001bc0:	1009883a 	mov	r4,r2
10001bc4:	01400784 	movi	r5,30
10001bc8:	00057ac0 	call	100057ac <__divsi3>
10001bcc:	1023883a 	mov	r17,r2
10001bd0:	0080d804 	movi	r2,864
10001bd4:	10800017 	ldw	r2,0(r2)
10001bd8:	10800844 	addi	r2,r2,33
10001bdc:	1009883a 	mov	r4,r2
10001be0:	01400784 	movi	r5,30
10001be4:	00057ac0 	call	100057ac <__divsi3>
10001be8:	1021883a 	mov	r16,r2
10001bec:	e4b95417 	ldw	r18,-6832(fp)
10001bf0:	8809883a 	mov	r4,r17
10001bf4:	01400544 	movi	r5,21
10001bf8:	000586c0 	call	1000586c <__mulsi3>
10001bfc:	1023883a 	mov	r17,r2
10001c00:	9009883a 	mov	r4,r18
10001c04:	01405404 	movi	r5,336
10001c08:	000586c0 	call	1000586c <__mulsi3>
10001c0c:	8885883a 	add	r2,r17,r2
10001c10:	1405883a 	add	r2,r2,r16
10001c14:	1085883a 	add	r2,r2,r2
10001c18:	1085883a 	add	r2,r2,r2
10001c1c:	e0f92704 	addi	r3,fp,-7012
10001c20:	1885883a 	add	r2,r3,r2
10001c24:	10804604 	addi	r2,r2,280
10001c28:	10800017 	ldw	r2,0(r2)
10001c2c:	10000e26 	beq	r2,zero,10001c68 <main+0x1934>
    	*SAMUS_Y = (*SAMUS_Y/30)*30+19;
10001c30:	0400d404 	movi	r16,848
10001c34:	0080d404 	movi	r2,848
10001c38:	10800017 	ldw	r2,0(r2)
10001c3c:	1009883a 	mov	r4,r2
10001c40:	01400784 	movi	r5,30
10001c44:	00057ac0 	call	100057ac <__divsi3>
10001c48:	1009883a 	mov	r4,r2
10001c4c:	01400784 	movi	r5,30
10001c50:	000586c0 	call	1000586c <__mulsi3>
10001c54:	108004c4 	addi	r2,r2,19
10001c58:	80800015 	stw	r2,0(r16)
    	grounded = True;
10001c5c:	00800044 	movi	r2,1
10001c60:	e0b92c15 	stw	r2,-6992(fp)
10001c64:	00000106 	br	10001c6c <main+0x1938>
    }
    else{
    	grounded = False;
10001c68:	e0392c15 	stw	zero,-6992(fp)
    }

    if(grounded == False){
10001c6c:	e0b92c17 	ldw	r2,-6992(fp)
10001c70:	1000021e 	bne	r2,zero,10001c7c <main+0x1948>
    	*SAMUS_WALK = 0;
10001c74:	0080d004 	movi	r2,832
10001c78:	10000005 	stb	zero,0(r2)
    }

    //If hits head
    if(scene[sceneNum][(*SAMUS_Y+5)/30][(*SAMUS_X+2)/30] != 0 || scene[sceneNum][(*SAMUS_Y+5)/30][(*SAMUS_X+33)/30] != 0){
10001c7c:	0080d404 	movi	r2,848
10001c80:	10800017 	ldw	r2,0(r2)
10001c84:	10800144 	addi	r2,r2,5
10001c88:	1009883a 	mov	r4,r2
10001c8c:	01400784 	movi	r5,30
10001c90:	00057ac0 	call	100057ac <__divsi3>
10001c94:	1023883a 	mov	r17,r2
10001c98:	0080d804 	movi	r2,864
10001c9c:	10800017 	ldw	r2,0(r2)
10001ca0:	10800084 	addi	r2,r2,2
10001ca4:	1009883a 	mov	r4,r2
10001ca8:	01400784 	movi	r5,30
10001cac:	00057ac0 	call	100057ac <__divsi3>
10001cb0:	1021883a 	mov	r16,r2
10001cb4:	e4b95417 	ldw	r18,-6832(fp)
10001cb8:	8809883a 	mov	r4,r17
10001cbc:	01400544 	movi	r5,21
10001cc0:	000586c0 	call	1000586c <__mulsi3>
10001cc4:	1023883a 	mov	r17,r2
10001cc8:	9009883a 	mov	r4,r18
10001ccc:	01405404 	movi	r5,336
10001cd0:	000586c0 	call	1000586c <__mulsi3>
10001cd4:	8885883a 	add	r2,r17,r2
10001cd8:	1405883a 	add	r2,r2,r16
10001cdc:	1085883a 	add	r2,r2,r2
10001ce0:	1085883a 	add	r2,r2,r2
10001ce4:	e0f92704 	addi	r3,fp,-7012
10001ce8:	1885883a 	add	r2,r3,r2
10001cec:	10804604 	addi	r2,r2,280
10001cf0:	10800017 	ldw	r2,0(r2)
10001cf4:	10001f1e 	bne	r2,zero,10001d74 <main+0x1a40>
10001cf8:	0080d404 	movi	r2,848
10001cfc:	10800017 	ldw	r2,0(r2)
10001d00:	10800144 	addi	r2,r2,5
10001d04:	1009883a 	mov	r4,r2
10001d08:	01400784 	movi	r5,30
10001d0c:	00057ac0 	call	100057ac <__divsi3>
10001d10:	1023883a 	mov	r17,r2
10001d14:	0080d804 	movi	r2,864
10001d18:	10800017 	ldw	r2,0(r2)
10001d1c:	10800844 	addi	r2,r2,33
10001d20:	1009883a 	mov	r4,r2
10001d24:	01400784 	movi	r5,30
10001d28:	00057ac0 	call	100057ac <__divsi3>
10001d2c:	1021883a 	mov	r16,r2
10001d30:	e4b95417 	ldw	r18,-6832(fp)
10001d34:	8809883a 	mov	r4,r17
10001d38:	01400544 	movi	r5,21
10001d3c:	000586c0 	call	1000586c <__mulsi3>
10001d40:	1023883a 	mov	r17,r2
10001d44:	9009883a 	mov	r4,r18
10001d48:	01405404 	movi	r5,336
10001d4c:	000586c0 	call	1000586c <__mulsi3>
10001d50:	8885883a 	add	r2,r17,r2
10001d54:	1405883a 	add	r2,r2,r16
10001d58:	1085883a 	add	r2,r2,r2
10001d5c:	1085883a 	add	r2,r2,r2
10001d60:	e0f92704 	addi	r3,fp,-7012
10001d64:	1885883a 	add	r2,r3,r2
10001d68:	10804604 	addi	r2,r2,280
10001d6c:	10800017 	ldw	r2,0(r2)
10001d70:	10000426 	beq	r2,zero,10001d84 <main+0x1a50>
    	y_inc = -y_inc;
10001d74:	e0b92a17 	ldw	r2,-7000(fp)
10001d78:	10a0003c 	xorhi	r2,r2,32768
10001d7c:	e0b92a15 	stw	r2,-7000(fp)
    	let_go = False;
10001d80:	e0392d15 	stw	zero,-6988(fp)
    }


    //Bullet code
    if(!((keycode&0x0000FF)==0x0d || (keycode&0x00FF00)>>8 == 0x0d || (keycode&0xFF0000)>>16 == 0x0d)){
10001d84:	e0b94c17 	ldw	r2,-6864(fp)
10001d88:	10803fcc 	andi	r2,r2,255
10001d8c:	10800360 	cmpeqi	r2,r2,13
10001d90:	10000c1e 	bne	r2,zero,10001dc4 <main+0x1a90>
10001d94:	e0b94c17 	ldw	r2,-6864(fp)
10001d98:	10bfc00c 	andi	r2,r2,65280
10001d9c:	1005d23a 	srai	r2,r2,8
10001da0:	10800360 	cmpeqi	r2,r2,13
10001da4:	1000071e 	bne	r2,zero,10001dc4 <main+0x1a90>
10001da8:	e0b94c17 	ldw	r2,-6864(fp)
10001dac:	10803fec 	andhi	r2,r2,255
10001db0:	1005d43a 	srai	r2,r2,16
10001db4:	10800360 	cmpeqi	r2,r2,13
10001db8:	1000021e 	bne	r2,zero,10001dc4 <main+0x1a90>
    	bullet_en = True;
10001dbc:	00800044 	movi	r2,1
10001dc0:	e0b93a15 	stw	r2,-6936(fp)
    }
    if(((keycode&0x0000FF)==0x0d || (keycode&0x00FF00)>>8 == 0x0d || (keycode&0xFF0000)>>16 == 0x0d) && bullet_en == True){
10001dc4:	e0b94c17 	ldw	r2,-6864(fp)
10001dc8:	10803fcc 	andi	r2,r2,255
10001dcc:	10800360 	cmpeqi	r2,r2,13
10001dd0:	10000a1e 	bne	r2,zero,10001dfc <main+0x1ac8>
10001dd4:	e0b94c17 	ldw	r2,-6864(fp)
10001dd8:	10bfc00c 	andi	r2,r2,65280
10001ddc:	1005d23a 	srai	r2,r2,8
10001de0:	10800360 	cmpeqi	r2,r2,13
10001de4:	1000051e 	bne	r2,zero,10001dfc <main+0x1ac8>
10001de8:	e0b94c17 	ldw	r2,-6864(fp)
10001dec:	10803fec 	andhi	r2,r2,255
10001df0:	1005d43a 	srai	r2,r2,16
10001df4:	10800358 	cmpnei	r2,r2,13
10001df8:	1000db1e 	bne	r2,zero,10002168 <main+0x1e34>
10001dfc:	e0b93a17 	ldw	r2,-6936(fp)
10001e00:	10800058 	cmpnei	r2,r2,1
10001e04:	1000d81e 	bne	r2,zero,10002168 <main+0x1e34>
    	if(*BUL1_EN == True && *BUL2_EN == True && *BUL3_EN == False){
10001e08:	00808004 	movi	r2,512
10001e0c:	10800017 	ldw	r2,0(r2)
10001e10:	10800058 	cmpnei	r2,r2,1
10001e14:	1000481e 	bne	r2,zero,10001f38 <main+0x1c04>
10001e18:	00807404 	movi	r2,464
10001e1c:	10800017 	ldw	r2,0(r2)
10001e20:	10800058 	cmpnei	r2,r2,1
10001e24:	1000441e 	bne	r2,zero,10001f38 <main+0x1c04>
10001e28:	00806804 	movi	r2,416
10001e2c:	10800017 	ldw	r2,0(r2)
10001e30:	1000411e 	bne	r2,zero,10001f38 <main+0x1c04>
    		if(*SAMUS_DIR == 1){
10001e34:	00804c04 	movi	r2,304
10001e38:	10800003 	ldbu	r2,0(r2)
10001e3c:	10803fcc 	andi	r2,r2,255
10001e40:	1080201c 	xori	r2,r2,128
10001e44:	10bfe004 	addi	r2,r2,-128
10001e48:	10800058 	cmpnei	r2,r2,1
10001e4c:	10000f1e 	bne	r2,zero,10001e8c <main+0x1b58>
    			*BUL3_EN = True;
10001e50:	00806804 	movi	r2,416
10001e54:	00c00044 	movi	r3,1
10001e58:	10c00015 	stw	r3,0(r2)
    			*BUL3_X = *SAMUS_X;
10001e5c:	00806404 	movi	r2,400
10001e60:	00c0d804 	movi	r3,864
10001e64:	18c00017 	ldw	r3,0(r3)
10001e68:	10c00015 	stw	r3,0(r2)
    			*BUL3_Y = *SAMUS_Y+25;
10001e6c:	00806004 	movi	r2,384
10001e70:	00c0d404 	movi	r3,848
10001e74:	18c00017 	ldw	r3,0(r3)
10001e78:	18c00644 	addi	r3,r3,25
10001e7c:	10c00015 	stw	r3,0(r2)
    			bul3Left = True;
10001e80:	00800044 	movi	r2,1
10001e84:	e0b93715 	stw	r2,-6948(fp)
10001e88:	00000e06 	br	10001ec4 <main+0x1b90>
    		}
    		else{
    			*BUL3_EN = True;
10001e8c:	00806804 	movi	r2,416
10001e90:	00c00044 	movi	r3,1
10001e94:	10c00015 	stw	r3,0(r2)
    			*BUL3_X = *SAMUS_X+30;
10001e98:	00806404 	movi	r2,400
10001e9c:	00c0d804 	movi	r3,864
10001ea0:	18c00017 	ldw	r3,0(r3)
10001ea4:	18c00784 	addi	r3,r3,30
10001ea8:	10c00015 	stw	r3,0(r2)
    			*BUL3_Y = *SAMUS_Y+25;
10001eac:	00806004 	movi	r2,384
10001eb0:	00c0d404 	movi	r3,848
10001eb4:	18c00017 	ldw	r3,0(r3)
10001eb8:	18c00644 	addi	r3,r3,25
10001ebc:	10c00015 	stw	r3,0(r2)
    			bul3Left = False;
10001ec0:	e0393715 	stw	zero,-6948(fp)
    		}
    		if((keycode&0x0000FF)==0x1A || (keycode&0x00FF00)>>8 == 0x1A || (keycode&0xFF0000)>>16 == 0x1A){
10001ec4:	e0b94c17 	ldw	r2,-6864(fp)
10001ec8:	10803fcc 	andi	r2,r2,255
10001ecc:	108006a0 	cmpeqi	r2,r2,26
10001ed0:	10000a1e 	bne	r2,zero,10001efc <main+0x1bc8>
10001ed4:	e0b94c17 	ldw	r2,-6864(fp)
10001ed8:	10bfc00c 	andi	r2,r2,65280
10001edc:	1005d23a 	srai	r2,r2,8
10001ee0:	108006a0 	cmpeqi	r2,r2,26
10001ee4:	1000051e 	bne	r2,zero,10001efc <main+0x1bc8>
10001ee8:	e0b94c17 	ldw	r2,-6864(fp)
10001eec:	10803fec 	andhi	r2,r2,255
10001ef0:	1005d43a 	srai	r2,r2,16
10001ef4:	10800698 	cmpnei	r2,r2,26
10001ef8:	10000c1e 	bne	r2,zero,10001f2c <main+0x1bf8>
    			bul3Up = True;
10001efc:	00800044 	movi	r2,1
10001f00:	e0b93815 	stw	r2,-6944(fp)
    			*BUL3_Y = *SAMUS_Y;
10001f04:	00806004 	movi	r2,384
10001f08:	00c0d404 	movi	r3,848
10001f0c:	18c00017 	ldw	r3,0(r3)
10001f10:	10c00015 	stw	r3,0(r2)
    			*BUL3_X = *SAMUS_X+18;
10001f14:	00806404 	movi	r2,400
10001f18:	00c0d804 	movi	r3,864
10001f1c:	18c00017 	ldw	r3,0(r3)
10001f20:	18c00484 	addi	r3,r3,18
10001f24:	10c00015 	stw	r3,0(r2)
10001f28:	00000106 	br	10001f30 <main+0x1bfc>
    		}
    		else{
    			bul3Up = False;
10001f2c:	e0393815 	stw	zero,-6944(fp)
    		}
    		bul3start = 0;
10001f30:	e0393915 	stw	zero,-6940(fp)
10001f34:	00008b06 	br	10002164 <main+0x1e30>
    	}
    	else if(*BUL1_EN == True && *BUL2_EN == False){
10001f38:	00808004 	movi	r2,512
10001f3c:	10800017 	ldw	r2,0(r2)
10001f40:	10800058 	cmpnei	r2,r2,1
10001f44:	1000441e 	bne	r2,zero,10002058 <main+0x1d24>
10001f48:	00807404 	movi	r2,464
10001f4c:	10800017 	ldw	r2,0(r2)
10001f50:	1000411e 	bne	r2,zero,10002058 <main+0x1d24>

			if(*SAMUS_DIR == 1){
10001f54:	00804c04 	movi	r2,304
10001f58:	10800003 	ldbu	r2,0(r2)
10001f5c:	10803fcc 	andi	r2,r2,255
10001f60:	1080201c 	xori	r2,r2,128
10001f64:	10bfe004 	addi	r2,r2,-128
10001f68:	10800058 	cmpnei	r2,r2,1
10001f6c:	10000f1e 	bne	r2,zero,10001fac <main+0x1c78>
				*BUL2_EN = True;
10001f70:	00807404 	movi	r2,464
10001f74:	00c00044 	movi	r3,1
10001f78:	10c00015 	stw	r3,0(r2)
				*BUL2_X = *SAMUS_X;
10001f7c:	00807004 	movi	r2,448
10001f80:	00c0d804 	movi	r3,864
10001f84:	18c00017 	ldw	r3,0(r3)
10001f88:	10c00015 	stw	r3,0(r2)
				*BUL2_Y = *SAMUS_Y+25;
10001f8c:	00806c04 	movi	r2,432
10001f90:	00c0d404 	movi	r3,848
10001f94:	18c00017 	ldw	r3,0(r3)
10001f98:	18c00644 	addi	r3,r3,25
10001f9c:	10c00015 	stw	r3,0(r2)
				bul2Left = True;
10001fa0:	00800044 	movi	r2,1
10001fa4:	e0b93415 	stw	r2,-6960(fp)
10001fa8:	00000e06 	br	10001fe4 <main+0x1cb0>
			}
			else{
				*BUL2_EN = True;
10001fac:	00807404 	movi	r2,464
10001fb0:	00c00044 	movi	r3,1
10001fb4:	10c00015 	stw	r3,0(r2)
				*BUL2_X = *SAMUS_X+30;
10001fb8:	00807004 	movi	r2,448
10001fbc:	00c0d804 	movi	r3,864
10001fc0:	18c00017 	ldw	r3,0(r3)
10001fc4:	18c00784 	addi	r3,r3,30
10001fc8:	10c00015 	stw	r3,0(r2)
				*BUL2_Y = *SAMUS_Y+25;
10001fcc:	00806c04 	movi	r2,432
10001fd0:	00c0d404 	movi	r3,848
10001fd4:	18c00017 	ldw	r3,0(r3)
10001fd8:	18c00644 	addi	r3,r3,25
10001fdc:	10c00015 	stw	r3,0(r2)
				bul2Left = False;
10001fe0:	e0393415 	stw	zero,-6960(fp)
			}

			if((keycode&0x0000FF)==0x1A || (keycode&0x00FF00)>>8 == 0x1A || (keycode&0xFF0000)>>16 == 0x1A){
10001fe4:	e0b94c17 	ldw	r2,-6864(fp)
10001fe8:	10803fcc 	andi	r2,r2,255
10001fec:	108006a0 	cmpeqi	r2,r2,26
10001ff0:	10000a1e 	bne	r2,zero,1000201c <main+0x1ce8>
10001ff4:	e0b94c17 	ldw	r2,-6864(fp)
10001ff8:	10bfc00c 	andi	r2,r2,65280
10001ffc:	1005d23a 	srai	r2,r2,8
10002000:	108006a0 	cmpeqi	r2,r2,26
10002004:	1000051e 	bne	r2,zero,1000201c <main+0x1ce8>
10002008:	e0b94c17 	ldw	r2,-6864(fp)
1000200c:	10803fec 	andhi	r2,r2,255
10002010:	1005d43a 	srai	r2,r2,16
10002014:	10800698 	cmpnei	r2,r2,26
10002018:	10000c1e 	bne	r2,zero,1000204c <main+0x1d18>
				bul2Up = True;
1000201c:	00800044 	movi	r2,1
10002020:	e0b93515 	stw	r2,-6956(fp)
				*BUL2_Y = *SAMUS_Y;
10002024:	00806c04 	movi	r2,432
10002028:	00c0d404 	movi	r3,848
1000202c:	18c00017 	ldw	r3,0(r3)
10002030:	10c00015 	stw	r3,0(r2)
				*BUL2_X = *SAMUS_X+18;
10002034:	00807004 	movi	r2,448
10002038:	00c0d804 	movi	r3,864
1000203c:	18c00017 	ldw	r3,0(r3)
10002040:	18c00484 	addi	r3,r3,18
10002044:	10c00015 	stw	r3,0(r2)
10002048:	00000106 	br	10002050 <main+0x1d1c>
			}
			else{
				bul2Up = False;
1000204c:	e0393515 	stw	zero,-6956(fp)
			}
			bul2start = 0;
10002050:	e0393615 	stw	zero,-6952(fp)
10002054:	00004306 	br	10002164 <main+0x1e30>
		}
    	else if(*BUL1_EN == False){
10002058:	00808004 	movi	r2,512
1000205c:	10800017 	ldw	r2,0(r2)
10002060:	1000401e 	bne	r2,zero,10002164 <main+0x1e30>
			if(*SAMUS_DIR == 1){
10002064:	00804c04 	movi	r2,304
10002068:	10800003 	ldbu	r2,0(r2)
1000206c:	10803fcc 	andi	r2,r2,255
10002070:	1080201c 	xori	r2,r2,128
10002074:	10bfe004 	addi	r2,r2,-128
10002078:	10800058 	cmpnei	r2,r2,1
1000207c:	10000f1e 	bne	r2,zero,100020bc <main+0x1d88>
				*BUL1_EN = True;
10002080:	00808004 	movi	r2,512
10002084:	00c00044 	movi	r3,1
10002088:	10c00015 	stw	r3,0(r2)
				*BUL1_X = *SAMUS_X;
1000208c:	00807c04 	movi	r2,496
10002090:	00c0d804 	movi	r3,864
10002094:	18c00017 	ldw	r3,0(r3)
10002098:	10c00015 	stw	r3,0(r2)
				*BUL1_Y = *SAMUS_Y+25;
1000209c:	00807804 	movi	r2,480
100020a0:	00c0d404 	movi	r3,848
100020a4:	18c00017 	ldw	r3,0(r3)
100020a8:	18c00644 	addi	r3,r3,25
100020ac:	10c00015 	stw	r3,0(r2)
				bul1Left = True;
100020b0:	00800044 	movi	r2,1
100020b4:	e0b93115 	stw	r2,-6972(fp)
100020b8:	00000e06 	br	100020f4 <main+0x1dc0>
			}
			else{
				*BUL1_EN = True;
100020bc:	00808004 	movi	r2,512
100020c0:	00c00044 	movi	r3,1
100020c4:	10c00015 	stw	r3,0(r2)
				*BUL1_X = *SAMUS_X+30;
100020c8:	00807c04 	movi	r2,496
100020cc:	00c0d804 	movi	r3,864
100020d0:	18c00017 	ldw	r3,0(r3)
100020d4:	18c00784 	addi	r3,r3,30
100020d8:	10c00015 	stw	r3,0(r2)
				*BUL1_Y = *SAMUS_Y+25;
100020dc:	00807804 	movi	r2,480
100020e0:	00c0d404 	movi	r3,848
100020e4:	18c00017 	ldw	r3,0(r3)
100020e8:	18c00644 	addi	r3,r3,25
100020ec:	10c00015 	stw	r3,0(r2)
				bul1Left = False;
100020f0:	e0393115 	stw	zero,-6972(fp)
			}
			bul1start = 0;
100020f4:	e0393315 	stw	zero,-6964(fp)
			if((keycode&0x0000FF)==0x1A || (keycode&0x00FF00)>>8 == 0x1A || (keycode&0xFF0000)>>16 == 0x1A){
100020f8:	e0b94c17 	ldw	r2,-6864(fp)
100020fc:	10803fcc 	andi	r2,r2,255
10002100:	108006a0 	cmpeqi	r2,r2,26
10002104:	10000a1e 	bne	r2,zero,10002130 <main+0x1dfc>
10002108:	e0b94c17 	ldw	r2,-6864(fp)
1000210c:	10bfc00c 	andi	r2,r2,65280
10002110:	1005d23a 	srai	r2,r2,8
10002114:	108006a0 	cmpeqi	r2,r2,26
10002118:	1000051e 	bne	r2,zero,10002130 <main+0x1dfc>
1000211c:	e0b94c17 	ldw	r2,-6864(fp)
10002120:	10803fec 	andhi	r2,r2,255
10002124:	1005d43a 	srai	r2,r2,16
10002128:	10800698 	cmpnei	r2,r2,26
1000212c:	10000c1e 	bne	r2,zero,10002160 <main+0x1e2c>
				bul1Up = True;
10002130:	00800044 	movi	r2,1
10002134:	e0b93215 	stw	r2,-6968(fp)
				*BUL1_Y = *SAMUS_Y;
10002138:	00807804 	movi	r2,480
1000213c:	00c0d404 	movi	r3,848
10002140:	18c00017 	ldw	r3,0(r3)
10002144:	10c00015 	stw	r3,0(r2)
				*BUL1_X = *SAMUS_X+18;
10002148:	00807c04 	movi	r2,496
1000214c:	00c0d804 	movi	r3,864
10002150:	18c00017 	ldw	r3,0(r3)
10002154:	18c00484 	addi	r3,r3,18
10002158:	10c00015 	stw	r3,0(r2)
1000215c:	00000106 	br	10002164 <main+0x1e30>
			}
			else{
				bul1Up = False;
10002160:	e0393215 	stw	zero,-6968(fp)
			}
		}
    	bullet_en = False;
10002164:	e0393a15 	stw	zero,-6936(fp)
    }
    //Left collisions
    if(*BUL3_EN == True && bul1Up == False && bul3Left == True && (scene[sceneNum][(*BUL3_Y)/30][(*BUL3_X-8)/30]!=0 || scene[sceneNum][(*BUL3_Y+8)/30][(*BUL3_X-8)/30]!=0)){
10002168:	00806804 	movi	r2,416
1000216c:	10800017 	ldw	r2,0(r2)
10002170:	10800058 	cmpnei	r2,r2,1
10002174:	1000441e 	bne	r2,zero,10002288 <main+0x1f54>
10002178:	e0b93217 	ldw	r2,-6968(fp)
1000217c:	1000421e 	bne	r2,zero,10002288 <main+0x1f54>
10002180:	e0b93717 	ldw	r2,-6948(fp)
10002184:	10800058 	cmpnei	r2,r2,1
10002188:	10003f1e 	bne	r2,zero,10002288 <main+0x1f54>
1000218c:	00806004 	movi	r2,384
10002190:	10800017 	ldw	r2,0(r2)
10002194:	1009883a 	mov	r4,r2
10002198:	01400784 	movi	r5,30
1000219c:	00057ac0 	call	100057ac <__divsi3>
100021a0:	1023883a 	mov	r17,r2
100021a4:	00806404 	movi	r2,400
100021a8:	10800017 	ldw	r2,0(r2)
100021ac:	10bffe04 	addi	r2,r2,-8
100021b0:	1009883a 	mov	r4,r2
100021b4:	01400784 	movi	r5,30
100021b8:	00057ac0 	call	100057ac <__divsi3>
100021bc:	1021883a 	mov	r16,r2
100021c0:	e4b95417 	ldw	r18,-6832(fp)
100021c4:	8809883a 	mov	r4,r17
100021c8:	01400544 	movi	r5,21
100021cc:	000586c0 	call	1000586c <__mulsi3>
100021d0:	1023883a 	mov	r17,r2
100021d4:	9009883a 	mov	r4,r18
100021d8:	01405404 	movi	r5,336
100021dc:	000586c0 	call	1000586c <__mulsi3>
100021e0:	8885883a 	add	r2,r17,r2
100021e4:	1405883a 	add	r2,r2,r16
100021e8:	1085883a 	add	r2,r2,r2
100021ec:	1085883a 	add	r2,r2,r2
100021f0:	e0f92704 	addi	r3,fp,-7012
100021f4:	1885883a 	add	r2,r3,r2
100021f8:	10804604 	addi	r2,r2,280
100021fc:	10800017 	ldw	r2,0(r2)
10002200:	10001f1e 	bne	r2,zero,10002280 <main+0x1f4c>
10002204:	00806004 	movi	r2,384
10002208:	10800017 	ldw	r2,0(r2)
1000220c:	10800204 	addi	r2,r2,8
10002210:	1009883a 	mov	r4,r2
10002214:	01400784 	movi	r5,30
10002218:	00057ac0 	call	100057ac <__divsi3>
1000221c:	1023883a 	mov	r17,r2
10002220:	00806404 	movi	r2,400
10002224:	10800017 	ldw	r2,0(r2)
10002228:	10bffe04 	addi	r2,r2,-8
1000222c:	1009883a 	mov	r4,r2
10002230:	01400784 	movi	r5,30
10002234:	00057ac0 	call	100057ac <__divsi3>
10002238:	1021883a 	mov	r16,r2
1000223c:	e4b95417 	ldw	r18,-6832(fp)
10002240:	8809883a 	mov	r4,r17
10002244:	01400544 	movi	r5,21
10002248:	000586c0 	call	1000586c <__mulsi3>
1000224c:	1023883a 	mov	r17,r2
10002250:	9009883a 	mov	r4,r18
10002254:	01405404 	movi	r5,336
10002258:	000586c0 	call	1000586c <__mulsi3>
1000225c:	8885883a 	add	r2,r17,r2
10002260:	1405883a 	add	r2,r2,r16
10002264:	1085883a 	add	r2,r2,r2
10002268:	1085883a 	add	r2,r2,r2
1000226c:	e0f92704 	addi	r3,fp,-7012
10002270:	1885883a 	add	r2,r3,r2
10002274:	10804604 	addi	r2,r2,280
10002278:	10800017 	ldw	r2,0(r2)
1000227c:	10000226 	beq	r2,zero,10002288 <main+0x1f54>
    	*BUL3_EN = False;
10002280:	00806804 	movi	r2,416
10002284:	10000015 	stw	zero,0(r2)
    }
    if(*BUL1_EN == True && bul1Up == False && bul1Left == True && (scene[sceneNum][(*BUL1_Y)/30][(*BUL1_X-8)/30]!=0 || scene[sceneNum][(*BUL1_Y+8)/30][(*BUL1_X-8)/30]!=0)){
10002288:	00808004 	movi	r2,512
1000228c:	10800017 	ldw	r2,0(r2)
10002290:	10800058 	cmpnei	r2,r2,1
10002294:	1000441e 	bne	r2,zero,100023a8 <main+0x2074>
10002298:	e0b93217 	ldw	r2,-6968(fp)
1000229c:	1000421e 	bne	r2,zero,100023a8 <main+0x2074>
100022a0:	e0b93117 	ldw	r2,-6972(fp)
100022a4:	10800058 	cmpnei	r2,r2,1
100022a8:	10003f1e 	bne	r2,zero,100023a8 <main+0x2074>
100022ac:	00807804 	movi	r2,480
100022b0:	10800017 	ldw	r2,0(r2)
100022b4:	1009883a 	mov	r4,r2
100022b8:	01400784 	movi	r5,30
100022bc:	00057ac0 	call	100057ac <__divsi3>
100022c0:	1023883a 	mov	r17,r2
100022c4:	00807c04 	movi	r2,496
100022c8:	10800017 	ldw	r2,0(r2)
100022cc:	10bffe04 	addi	r2,r2,-8
100022d0:	1009883a 	mov	r4,r2
100022d4:	01400784 	movi	r5,30
100022d8:	00057ac0 	call	100057ac <__divsi3>
100022dc:	1021883a 	mov	r16,r2
100022e0:	e4b95417 	ldw	r18,-6832(fp)
100022e4:	8809883a 	mov	r4,r17
100022e8:	01400544 	movi	r5,21
100022ec:	000586c0 	call	1000586c <__mulsi3>
100022f0:	1023883a 	mov	r17,r2
100022f4:	9009883a 	mov	r4,r18
100022f8:	01405404 	movi	r5,336
100022fc:	000586c0 	call	1000586c <__mulsi3>
10002300:	8885883a 	add	r2,r17,r2
10002304:	1405883a 	add	r2,r2,r16
10002308:	1085883a 	add	r2,r2,r2
1000230c:	1085883a 	add	r2,r2,r2
10002310:	e0f92704 	addi	r3,fp,-7012
10002314:	1885883a 	add	r2,r3,r2
10002318:	10804604 	addi	r2,r2,280
1000231c:	10800017 	ldw	r2,0(r2)
10002320:	10001f1e 	bne	r2,zero,100023a0 <main+0x206c>
10002324:	00807804 	movi	r2,480
10002328:	10800017 	ldw	r2,0(r2)
1000232c:	10800204 	addi	r2,r2,8
10002330:	1009883a 	mov	r4,r2
10002334:	01400784 	movi	r5,30
10002338:	00057ac0 	call	100057ac <__divsi3>
1000233c:	1023883a 	mov	r17,r2
10002340:	00807c04 	movi	r2,496
10002344:	10800017 	ldw	r2,0(r2)
10002348:	10bffe04 	addi	r2,r2,-8
1000234c:	1009883a 	mov	r4,r2
10002350:	01400784 	movi	r5,30
10002354:	00057ac0 	call	100057ac <__divsi3>
10002358:	1021883a 	mov	r16,r2
1000235c:	e4b95417 	ldw	r18,-6832(fp)
10002360:	8809883a 	mov	r4,r17
10002364:	01400544 	movi	r5,21
10002368:	000586c0 	call	1000586c <__mulsi3>
1000236c:	1023883a 	mov	r17,r2
10002370:	9009883a 	mov	r4,r18
10002374:	01405404 	movi	r5,336
10002378:	000586c0 	call	1000586c <__mulsi3>
1000237c:	8885883a 	add	r2,r17,r2
10002380:	1405883a 	add	r2,r2,r16
10002384:	1085883a 	add	r2,r2,r2
10002388:	1085883a 	add	r2,r2,r2
1000238c:	e0f92704 	addi	r3,fp,-7012
10002390:	1885883a 	add	r2,r3,r2
10002394:	10804604 	addi	r2,r2,280
10002398:	10800017 	ldw	r2,0(r2)
1000239c:	10000226 	beq	r2,zero,100023a8 <main+0x2074>
		*BUL1_EN = False;
100023a0:	00808004 	movi	r2,512
100023a4:	10000015 	stw	zero,0(r2)
	}
    if(*BUL2_EN == True && bul2Up == False && bul2Left == True && (scene[sceneNum][(*BUL2_Y)/30][(*BUL2_X-8)/30]!=0 || scene[sceneNum][(*BUL2_Y+8)/30][(*BUL2_X-8)/30]!=0)){
100023a8:	00807404 	movi	r2,464
100023ac:	10800017 	ldw	r2,0(r2)
100023b0:	10800058 	cmpnei	r2,r2,1
100023b4:	1000441e 	bne	r2,zero,100024c8 <main+0x2194>
100023b8:	e0b93517 	ldw	r2,-6956(fp)
100023bc:	1000421e 	bne	r2,zero,100024c8 <main+0x2194>
100023c0:	e0b93417 	ldw	r2,-6960(fp)
100023c4:	10800058 	cmpnei	r2,r2,1
100023c8:	10003f1e 	bne	r2,zero,100024c8 <main+0x2194>
100023cc:	00806c04 	movi	r2,432
100023d0:	10800017 	ldw	r2,0(r2)
100023d4:	1009883a 	mov	r4,r2
100023d8:	01400784 	movi	r5,30
100023dc:	00057ac0 	call	100057ac <__divsi3>
100023e0:	1023883a 	mov	r17,r2
100023e4:	00807004 	movi	r2,448
100023e8:	10800017 	ldw	r2,0(r2)
100023ec:	10bffe04 	addi	r2,r2,-8
100023f0:	1009883a 	mov	r4,r2
100023f4:	01400784 	movi	r5,30
100023f8:	00057ac0 	call	100057ac <__divsi3>
100023fc:	1021883a 	mov	r16,r2
10002400:	e4b95417 	ldw	r18,-6832(fp)
10002404:	8809883a 	mov	r4,r17
10002408:	01400544 	movi	r5,21
1000240c:	000586c0 	call	1000586c <__mulsi3>
10002410:	1023883a 	mov	r17,r2
10002414:	9009883a 	mov	r4,r18
10002418:	01405404 	movi	r5,336
1000241c:	000586c0 	call	1000586c <__mulsi3>
10002420:	8885883a 	add	r2,r17,r2
10002424:	1405883a 	add	r2,r2,r16
10002428:	1085883a 	add	r2,r2,r2
1000242c:	1085883a 	add	r2,r2,r2
10002430:	e0f92704 	addi	r3,fp,-7012
10002434:	1885883a 	add	r2,r3,r2
10002438:	10804604 	addi	r2,r2,280
1000243c:	10800017 	ldw	r2,0(r2)
10002440:	10001f1e 	bne	r2,zero,100024c0 <main+0x218c>
10002444:	00806c04 	movi	r2,432
10002448:	10800017 	ldw	r2,0(r2)
1000244c:	10800204 	addi	r2,r2,8
10002450:	1009883a 	mov	r4,r2
10002454:	01400784 	movi	r5,30
10002458:	00057ac0 	call	100057ac <__divsi3>
1000245c:	1023883a 	mov	r17,r2
10002460:	00807004 	movi	r2,448
10002464:	10800017 	ldw	r2,0(r2)
10002468:	10bffe04 	addi	r2,r2,-8
1000246c:	1009883a 	mov	r4,r2
10002470:	01400784 	movi	r5,30
10002474:	00057ac0 	call	100057ac <__divsi3>
10002478:	1021883a 	mov	r16,r2
1000247c:	e4b95417 	ldw	r18,-6832(fp)
10002480:	8809883a 	mov	r4,r17
10002484:	01400544 	movi	r5,21
10002488:	000586c0 	call	1000586c <__mulsi3>
1000248c:	1023883a 	mov	r17,r2
10002490:	9009883a 	mov	r4,r18
10002494:	01405404 	movi	r5,336
10002498:	000586c0 	call	1000586c <__mulsi3>
1000249c:	8885883a 	add	r2,r17,r2
100024a0:	1405883a 	add	r2,r2,r16
100024a4:	1085883a 	add	r2,r2,r2
100024a8:	1085883a 	add	r2,r2,r2
100024ac:	e0f92704 	addi	r3,fp,-7012
100024b0:	1885883a 	add	r2,r3,r2
100024b4:	10804604 	addi	r2,r2,280
100024b8:	10800017 	ldw	r2,0(r2)
100024bc:	10000226 	beq	r2,zero,100024c8 <main+0x2194>
		*BUL2_EN = False;
100024c0:	00807404 	movi	r2,464
100024c4:	10000015 	stw	zero,0(r2)
	}
    //Right collisions
    if(*BUL3_EN == True && bul3Up == False && bul3Left == False && (scene[sceneNum][(*BUL3_Y)/30][(*BUL3_X+18)/30]!=0 || scene[sceneNum][(*BUL3_Y+8)/30][(*BUL3_X+18)/30]!=0)){
100024c8:	00806804 	movi	r2,416
100024cc:	10800017 	ldw	r2,0(r2)
100024d0:	10800058 	cmpnei	r2,r2,1
100024d4:	1000431e 	bne	r2,zero,100025e4 <main+0x22b0>
100024d8:	e0b93817 	ldw	r2,-6944(fp)
100024dc:	1000411e 	bne	r2,zero,100025e4 <main+0x22b0>
100024e0:	e0b93717 	ldw	r2,-6948(fp)
100024e4:	10003f1e 	bne	r2,zero,100025e4 <main+0x22b0>
100024e8:	00806004 	movi	r2,384
100024ec:	10800017 	ldw	r2,0(r2)
100024f0:	1009883a 	mov	r4,r2
100024f4:	01400784 	movi	r5,30
100024f8:	00057ac0 	call	100057ac <__divsi3>
100024fc:	1023883a 	mov	r17,r2
10002500:	00806404 	movi	r2,400
10002504:	10800017 	ldw	r2,0(r2)
10002508:	10800484 	addi	r2,r2,18
1000250c:	1009883a 	mov	r4,r2
10002510:	01400784 	movi	r5,30
10002514:	00057ac0 	call	100057ac <__divsi3>
10002518:	1021883a 	mov	r16,r2
1000251c:	e4b95417 	ldw	r18,-6832(fp)
10002520:	8809883a 	mov	r4,r17
10002524:	01400544 	movi	r5,21
10002528:	000586c0 	call	1000586c <__mulsi3>
1000252c:	1023883a 	mov	r17,r2
10002530:	9009883a 	mov	r4,r18
10002534:	01405404 	movi	r5,336
10002538:	000586c0 	call	1000586c <__mulsi3>
1000253c:	8885883a 	add	r2,r17,r2
10002540:	1405883a 	add	r2,r2,r16
10002544:	1085883a 	add	r2,r2,r2
10002548:	1085883a 	add	r2,r2,r2
1000254c:	e0f92704 	addi	r3,fp,-7012
10002550:	1885883a 	add	r2,r3,r2
10002554:	10804604 	addi	r2,r2,280
10002558:	10800017 	ldw	r2,0(r2)
1000255c:	10001f1e 	bne	r2,zero,100025dc <main+0x22a8>
10002560:	00806004 	movi	r2,384
10002564:	10800017 	ldw	r2,0(r2)
10002568:	10800204 	addi	r2,r2,8
1000256c:	1009883a 	mov	r4,r2
10002570:	01400784 	movi	r5,30
10002574:	00057ac0 	call	100057ac <__divsi3>
10002578:	1023883a 	mov	r17,r2
1000257c:	00806404 	movi	r2,400
10002580:	10800017 	ldw	r2,0(r2)
10002584:	10800484 	addi	r2,r2,18
10002588:	1009883a 	mov	r4,r2
1000258c:	01400784 	movi	r5,30
10002590:	00057ac0 	call	100057ac <__divsi3>
10002594:	1021883a 	mov	r16,r2
10002598:	e4b95417 	ldw	r18,-6832(fp)
1000259c:	8809883a 	mov	r4,r17
100025a0:	01400544 	movi	r5,21
100025a4:	000586c0 	call	1000586c <__mulsi3>
100025a8:	1023883a 	mov	r17,r2
100025ac:	9009883a 	mov	r4,r18
100025b0:	01405404 	movi	r5,336
100025b4:	000586c0 	call	1000586c <__mulsi3>
100025b8:	8885883a 	add	r2,r17,r2
100025bc:	1405883a 	add	r2,r2,r16
100025c0:	1085883a 	add	r2,r2,r2
100025c4:	1085883a 	add	r2,r2,r2
100025c8:	e0f92704 	addi	r3,fp,-7012
100025cc:	1885883a 	add	r2,r3,r2
100025d0:	10804604 	addi	r2,r2,280
100025d4:	10800017 	ldw	r2,0(r2)
100025d8:	10000226 	beq	r2,zero,100025e4 <main+0x22b0>
		*BUL3_EN = False;
100025dc:	00806804 	movi	r2,416
100025e0:	10000015 	stw	zero,0(r2)
	}
	if(*BUL1_EN == True && bul1Up == False && bul1Left == False && (scene[sceneNum][(*BUL1_Y)/30][(*BUL1_X+18)/30]!=0 || scene[sceneNum][(*BUL1_Y+8)/30][((*BUL1_X+18)/30)]!=0)){
100025e4:	00808004 	movi	r2,512
100025e8:	10800017 	ldw	r2,0(r2)
100025ec:	10800058 	cmpnei	r2,r2,1
100025f0:	1000431e 	bne	r2,zero,10002700 <main+0x23cc>
100025f4:	e0b93217 	ldw	r2,-6968(fp)
100025f8:	1000411e 	bne	r2,zero,10002700 <main+0x23cc>
100025fc:	e0b93117 	ldw	r2,-6972(fp)
10002600:	10003f1e 	bne	r2,zero,10002700 <main+0x23cc>
10002604:	00807804 	movi	r2,480
10002608:	10800017 	ldw	r2,0(r2)
1000260c:	1009883a 	mov	r4,r2
10002610:	01400784 	movi	r5,30
10002614:	00057ac0 	call	100057ac <__divsi3>
10002618:	1023883a 	mov	r17,r2
1000261c:	00807c04 	movi	r2,496
10002620:	10800017 	ldw	r2,0(r2)
10002624:	10800484 	addi	r2,r2,18
10002628:	1009883a 	mov	r4,r2
1000262c:	01400784 	movi	r5,30
10002630:	00057ac0 	call	100057ac <__divsi3>
10002634:	1021883a 	mov	r16,r2
10002638:	e4b95417 	ldw	r18,-6832(fp)
1000263c:	8809883a 	mov	r4,r17
10002640:	01400544 	movi	r5,21
10002644:	000586c0 	call	1000586c <__mulsi3>
10002648:	1023883a 	mov	r17,r2
1000264c:	9009883a 	mov	r4,r18
10002650:	01405404 	movi	r5,336
10002654:	000586c0 	call	1000586c <__mulsi3>
10002658:	8885883a 	add	r2,r17,r2
1000265c:	1405883a 	add	r2,r2,r16
10002660:	1085883a 	add	r2,r2,r2
10002664:	1085883a 	add	r2,r2,r2
10002668:	e0f92704 	addi	r3,fp,-7012
1000266c:	1885883a 	add	r2,r3,r2
10002670:	10804604 	addi	r2,r2,280
10002674:	10800017 	ldw	r2,0(r2)
10002678:	10001f1e 	bne	r2,zero,100026f8 <main+0x23c4>
1000267c:	00807804 	movi	r2,480
10002680:	10800017 	ldw	r2,0(r2)
10002684:	10800204 	addi	r2,r2,8
10002688:	1009883a 	mov	r4,r2
1000268c:	01400784 	movi	r5,30
10002690:	00057ac0 	call	100057ac <__divsi3>
10002694:	1023883a 	mov	r17,r2
10002698:	00807c04 	movi	r2,496
1000269c:	10800017 	ldw	r2,0(r2)
100026a0:	10800484 	addi	r2,r2,18
100026a4:	1009883a 	mov	r4,r2
100026a8:	01400784 	movi	r5,30
100026ac:	00057ac0 	call	100057ac <__divsi3>
100026b0:	1021883a 	mov	r16,r2
100026b4:	e4b95417 	ldw	r18,-6832(fp)
100026b8:	8809883a 	mov	r4,r17
100026bc:	01400544 	movi	r5,21
100026c0:	000586c0 	call	1000586c <__mulsi3>
100026c4:	1023883a 	mov	r17,r2
100026c8:	9009883a 	mov	r4,r18
100026cc:	01405404 	movi	r5,336
100026d0:	000586c0 	call	1000586c <__mulsi3>
100026d4:	8885883a 	add	r2,r17,r2
100026d8:	1405883a 	add	r2,r2,r16
100026dc:	1085883a 	add	r2,r2,r2
100026e0:	1085883a 	add	r2,r2,r2
100026e4:	e0f92704 	addi	r3,fp,-7012
100026e8:	1885883a 	add	r2,r3,r2
100026ec:	10804604 	addi	r2,r2,280
100026f0:	10800017 	ldw	r2,0(r2)
100026f4:	10000226 	beq	r2,zero,10002700 <main+0x23cc>
		*BUL1_EN = False;
100026f8:	00808004 	movi	r2,512
100026fc:	10000015 	stw	zero,0(r2)
	}
	if(*BUL2_EN == True && bul2Up == False && bul2Left == False && (scene[sceneNum][(*BUL2_Y)/30][(*BUL2_X+18)/30]!=0 || scene[sceneNum][(*BUL2_Y+8)/30][((*BUL2_X+18)/30)]!=0)){
10002700:	00807404 	movi	r2,464
10002704:	10800017 	ldw	r2,0(r2)
10002708:	10800058 	cmpnei	r2,r2,1
1000270c:	1000431e 	bne	r2,zero,1000281c <main+0x24e8>
10002710:	e0b93517 	ldw	r2,-6956(fp)
10002714:	1000411e 	bne	r2,zero,1000281c <main+0x24e8>
10002718:	e0b93417 	ldw	r2,-6960(fp)
1000271c:	10003f1e 	bne	r2,zero,1000281c <main+0x24e8>
10002720:	00806c04 	movi	r2,432
10002724:	10800017 	ldw	r2,0(r2)
10002728:	1009883a 	mov	r4,r2
1000272c:	01400784 	movi	r5,30
10002730:	00057ac0 	call	100057ac <__divsi3>
10002734:	1023883a 	mov	r17,r2
10002738:	00807004 	movi	r2,448
1000273c:	10800017 	ldw	r2,0(r2)
10002740:	10800484 	addi	r2,r2,18
10002744:	1009883a 	mov	r4,r2
10002748:	01400784 	movi	r5,30
1000274c:	00057ac0 	call	100057ac <__divsi3>
10002750:	1021883a 	mov	r16,r2
10002754:	e4b95417 	ldw	r18,-6832(fp)
10002758:	8809883a 	mov	r4,r17
1000275c:	01400544 	movi	r5,21
10002760:	000586c0 	call	1000586c <__mulsi3>
10002764:	1023883a 	mov	r17,r2
10002768:	9009883a 	mov	r4,r18
1000276c:	01405404 	movi	r5,336
10002770:	000586c0 	call	1000586c <__mulsi3>
10002774:	8885883a 	add	r2,r17,r2
10002778:	1405883a 	add	r2,r2,r16
1000277c:	1085883a 	add	r2,r2,r2
10002780:	1085883a 	add	r2,r2,r2
10002784:	e0f92704 	addi	r3,fp,-7012
10002788:	1885883a 	add	r2,r3,r2
1000278c:	10804604 	addi	r2,r2,280
10002790:	10800017 	ldw	r2,0(r2)
10002794:	10001f1e 	bne	r2,zero,10002814 <main+0x24e0>
10002798:	00806c04 	movi	r2,432
1000279c:	10800017 	ldw	r2,0(r2)
100027a0:	10800204 	addi	r2,r2,8
100027a4:	1009883a 	mov	r4,r2
100027a8:	01400784 	movi	r5,30
100027ac:	00057ac0 	call	100057ac <__divsi3>
100027b0:	1023883a 	mov	r17,r2
100027b4:	00807004 	movi	r2,448
100027b8:	10800017 	ldw	r2,0(r2)
100027bc:	10800484 	addi	r2,r2,18
100027c0:	1009883a 	mov	r4,r2
100027c4:	01400784 	movi	r5,30
100027c8:	00057ac0 	call	100057ac <__divsi3>
100027cc:	1021883a 	mov	r16,r2
100027d0:	e4b95417 	ldw	r18,-6832(fp)
100027d4:	8809883a 	mov	r4,r17
100027d8:	01400544 	movi	r5,21
100027dc:	000586c0 	call	1000586c <__mulsi3>
100027e0:	1023883a 	mov	r17,r2
100027e4:	9009883a 	mov	r4,r18
100027e8:	01405404 	movi	r5,336
100027ec:	000586c0 	call	1000586c <__mulsi3>
100027f0:	8885883a 	add	r2,r17,r2
100027f4:	1405883a 	add	r2,r2,r16
100027f8:	1085883a 	add	r2,r2,r2
100027fc:	1085883a 	add	r2,r2,r2
10002800:	e0f92704 	addi	r3,fp,-7012
10002804:	1885883a 	add	r2,r3,r2
10002808:	10804604 	addi	r2,r2,280
1000280c:	10800017 	ldw	r2,0(r2)
10002810:	10000226 	beq	r2,zero,1000281c <main+0x24e8>
		*BUL2_EN = False;
10002814:	00807404 	movi	r2,464
10002818:	10000015 	stw	zero,0(r2)
	}
	//Top collisions
	if(*BUL1_EN == True && bul1Up == True && (scene[sceneNum][(*BUL1_Y-8)/30][(*BUL1_X)/30]!=0 || scene[sceneNum][(*BUL1_Y-8)/30][(*BUL1_X+8)/30]!=0)){
1000281c:	00808004 	movi	r2,512
10002820:	10800017 	ldw	r2,0(r2)
10002824:	10800058 	cmpnei	r2,r2,1
10002828:	1000421e 	bne	r2,zero,10002934 <main+0x2600>
1000282c:	e0b93217 	ldw	r2,-6968(fp)
10002830:	10800058 	cmpnei	r2,r2,1
10002834:	10003f1e 	bne	r2,zero,10002934 <main+0x2600>
10002838:	00807804 	movi	r2,480
1000283c:	10800017 	ldw	r2,0(r2)
10002840:	10bffe04 	addi	r2,r2,-8
10002844:	1009883a 	mov	r4,r2
10002848:	01400784 	movi	r5,30
1000284c:	00057ac0 	call	100057ac <__divsi3>
10002850:	1023883a 	mov	r17,r2
10002854:	00807c04 	movi	r2,496
10002858:	10800017 	ldw	r2,0(r2)
1000285c:	1009883a 	mov	r4,r2
10002860:	01400784 	movi	r5,30
10002864:	00057ac0 	call	100057ac <__divsi3>
10002868:	1021883a 	mov	r16,r2
1000286c:	e4b95417 	ldw	r18,-6832(fp)
10002870:	8809883a 	mov	r4,r17
10002874:	01400544 	movi	r5,21
10002878:	000586c0 	call	1000586c <__mulsi3>
1000287c:	1023883a 	mov	r17,r2
10002880:	9009883a 	mov	r4,r18
10002884:	01405404 	movi	r5,336
10002888:	000586c0 	call	1000586c <__mulsi3>
1000288c:	8885883a 	add	r2,r17,r2
10002890:	1405883a 	add	r2,r2,r16
10002894:	1085883a 	add	r2,r2,r2
10002898:	1085883a 	add	r2,r2,r2
1000289c:	e0f92704 	addi	r3,fp,-7012
100028a0:	1885883a 	add	r2,r3,r2
100028a4:	10804604 	addi	r2,r2,280
100028a8:	10800017 	ldw	r2,0(r2)
100028ac:	10001f1e 	bne	r2,zero,1000292c <main+0x25f8>
100028b0:	00807804 	movi	r2,480
100028b4:	10800017 	ldw	r2,0(r2)
100028b8:	10bffe04 	addi	r2,r2,-8
100028bc:	1009883a 	mov	r4,r2
100028c0:	01400784 	movi	r5,30
100028c4:	00057ac0 	call	100057ac <__divsi3>
100028c8:	1023883a 	mov	r17,r2
100028cc:	00807c04 	movi	r2,496
100028d0:	10800017 	ldw	r2,0(r2)
100028d4:	10800204 	addi	r2,r2,8
100028d8:	1009883a 	mov	r4,r2
100028dc:	01400784 	movi	r5,30
100028e0:	00057ac0 	call	100057ac <__divsi3>
100028e4:	1021883a 	mov	r16,r2
100028e8:	e4b95417 	ldw	r18,-6832(fp)
100028ec:	8809883a 	mov	r4,r17
100028f0:	01400544 	movi	r5,21
100028f4:	000586c0 	call	1000586c <__mulsi3>
100028f8:	1023883a 	mov	r17,r2
100028fc:	9009883a 	mov	r4,r18
10002900:	01405404 	movi	r5,336
10002904:	000586c0 	call	1000586c <__mulsi3>
10002908:	8885883a 	add	r2,r17,r2
1000290c:	1405883a 	add	r2,r2,r16
10002910:	1085883a 	add	r2,r2,r2
10002914:	1085883a 	add	r2,r2,r2
10002918:	e0f92704 	addi	r3,fp,-7012
1000291c:	1885883a 	add	r2,r3,r2
10002920:	10804604 	addi	r2,r2,280
10002924:	10800017 	ldw	r2,0(r2)
10002928:	10000226 	beq	r2,zero,10002934 <main+0x2600>
		*BUL1_EN = False;
1000292c:	00808004 	movi	r2,512
10002930:	10000015 	stw	zero,0(r2)
	}
	if(*BUL2_EN == True && bul2Up == True && (scene[sceneNum][(*BUL2_Y-8)/30][(*BUL2_X)/30]!=0 || scene[sceneNum][(*BUL2_Y-8)/30][(*BUL2_X+8)/30]!=0)){
10002934:	00807404 	movi	r2,464
10002938:	10800017 	ldw	r2,0(r2)
1000293c:	10800058 	cmpnei	r2,r2,1
10002940:	1000421e 	bne	r2,zero,10002a4c <main+0x2718>
10002944:	e0b93517 	ldw	r2,-6956(fp)
10002948:	10800058 	cmpnei	r2,r2,1
1000294c:	10003f1e 	bne	r2,zero,10002a4c <main+0x2718>
10002950:	00806c04 	movi	r2,432
10002954:	10800017 	ldw	r2,0(r2)
10002958:	10bffe04 	addi	r2,r2,-8
1000295c:	1009883a 	mov	r4,r2
10002960:	01400784 	movi	r5,30
10002964:	00057ac0 	call	100057ac <__divsi3>
10002968:	1023883a 	mov	r17,r2
1000296c:	00807004 	movi	r2,448
10002970:	10800017 	ldw	r2,0(r2)
10002974:	1009883a 	mov	r4,r2
10002978:	01400784 	movi	r5,30
1000297c:	00057ac0 	call	100057ac <__divsi3>
10002980:	1021883a 	mov	r16,r2
10002984:	e4b95417 	ldw	r18,-6832(fp)
10002988:	8809883a 	mov	r4,r17
1000298c:	01400544 	movi	r5,21
10002990:	000586c0 	call	1000586c <__mulsi3>
10002994:	1023883a 	mov	r17,r2
10002998:	9009883a 	mov	r4,r18
1000299c:	01405404 	movi	r5,336
100029a0:	000586c0 	call	1000586c <__mulsi3>
100029a4:	8885883a 	add	r2,r17,r2
100029a8:	1405883a 	add	r2,r2,r16
100029ac:	1085883a 	add	r2,r2,r2
100029b0:	1085883a 	add	r2,r2,r2
100029b4:	e0f92704 	addi	r3,fp,-7012
100029b8:	1885883a 	add	r2,r3,r2
100029bc:	10804604 	addi	r2,r2,280
100029c0:	10800017 	ldw	r2,0(r2)
100029c4:	10001f1e 	bne	r2,zero,10002a44 <main+0x2710>
100029c8:	00806c04 	movi	r2,432
100029cc:	10800017 	ldw	r2,0(r2)
100029d0:	10bffe04 	addi	r2,r2,-8
100029d4:	1009883a 	mov	r4,r2
100029d8:	01400784 	movi	r5,30
100029dc:	00057ac0 	call	100057ac <__divsi3>
100029e0:	1023883a 	mov	r17,r2
100029e4:	00807004 	movi	r2,448
100029e8:	10800017 	ldw	r2,0(r2)
100029ec:	10800204 	addi	r2,r2,8
100029f0:	1009883a 	mov	r4,r2
100029f4:	01400784 	movi	r5,30
100029f8:	00057ac0 	call	100057ac <__divsi3>
100029fc:	1021883a 	mov	r16,r2
10002a00:	e4b95417 	ldw	r18,-6832(fp)
10002a04:	8809883a 	mov	r4,r17
10002a08:	01400544 	movi	r5,21
10002a0c:	000586c0 	call	1000586c <__mulsi3>
10002a10:	1023883a 	mov	r17,r2
10002a14:	9009883a 	mov	r4,r18
10002a18:	01405404 	movi	r5,336
10002a1c:	000586c0 	call	1000586c <__mulsi3>
10002a20:	8885883a 	add	r2,r17,r2
10002a24:	1405883a 	add	r2,r2,r16
10002a28:	1085883a 	add	r2,r2,r2
10002a2c:	1085883a 	add	r2,r2,r2
10002a30:	e0f92704 	addi	r3,fp,-7012
10002a34:	1885883a 	add	r2,r3,r2
10002a38:	10804604 	addi	r2,r2,280
10002a3c:	10800017 	ldw	r2,0(r2)
10002a40:	10000226 	beq	r2,zero,10002a4c <main+0x2718>
		*BUL2_EN = False;
10002a44:	00807404 	movi	r2,464
10002a48:	10000015 	stw	zero,0(r2)
	}
	if(*BUL3_EN == True && bul3Up == True && (scene[sceneNum][(*BUL3_Y-8)/30][(*BUL3_X)/30]!=0 || scene[sceneNum][(*BUL3_Y-8)/30][(*BUL3_X+8)/30]!=0)){
10002a4c:	00806804 	movi	r2,416
10002a50:	10800017 	ldw	r2,0(r2)
10002a54:	10800058 	cmpnei	r2,r2,1
10002a58:	1000421e 	bne	r2,zero,10002b64 <main+0x2830>
10002a5c:	e0b93817 	ldw	r2,-6944(fp)
10002a60:	10800058 	cmpnei	r2,r2,1
10002a64:	10003f1e 	bne	r2,zero,10002b64 <main+0x2830>
10002a68:	00806004 	movi	r2,384
10002a6c:	10800017 	ldw	r2,0(r2)
10002a70:	10bffe04 	addi	r2,r2,-8
10002a74:	1009883a 	mov	r4,r2
10002a78:	01400784 	movi	r5,30
10002a7c:	00057ac0 	call	100057ac <__divsi3>
10002a80:	1023883a 	mov	r17,r2
10002a84:	00806404 	movi	r2,400
10002a88:	10800017 	ldw	r2,0(r2)
10002a8c:	1009883a 	mov	r4,r2
10002a90:	01400784 	movi	r5,30
10002a94:	00057ac0 	call	100057ac <__divsi3>
10002a98:	1021883a 	mov	r16,r2
10002a9c:	e4b95417 	ldw	r18,-6832(fp)
10002aa0:	8809883a 	mov	r4,r17
10002aa4:	01400544 	movi	r5,21
10002aa8:	000586c0 	call	1000586c <__mulsi3>
10002aac:	1023883a 	mov	r17,r2
10002ab0:	9009883a 	mov	r4,r18
10002ab4:	01405404 	movi	r5,336
10002ab8:	000586c0 	call	1000586c <__mulsi3>
10002abc:	8885883a 	add	r2,r17,r2
10002ac0:	1405883a 	add	r2,r2,r16
10002ac4:	1085883a 	add	r2,r2,r2
10002ac8:	1085883a 	add	r2,r2,r2
10002acc:	e0f92704 	addi	r3,fp,-7012
10002ad0:	1885883a 	add	r2,r3,r2
10002ad4:	10804604 	addi	r2,r2,280
10002ad8:	10800017 	ldw	r2,0(r2)
10002adc:	10001f1e 	bne	r2,zero,10002b5c <main+0x2828>
10002ae0:	00806004 	movi	r2,384
10002ae4:	10800017 	ldw	r2,0(r2)
10002ae8:	10bffe04 	addi	r2,r2,-8
10002aec:	1009883a 	mov	r4,r2
10002af0:	01400784 	movi	r5,30
10002af4:	00057ac0 	call	100057ac <__divsi3>
10002af8:	1023883a 	mov	r17,r2
10002afc:	00806404 	movi	r2,400
10002b00:	10800017 	ldw	r2,0(r2)
10002b04:	10800204 	addi	r2,r2,8
10002b08:	1009883a 	mov	r4,r2
10002b0c:	01400784 	movi	r5,30
10002b10:	00057ac0 	call	100057ac <__divsi3>
10002b14:	1021883a 	mov	r16,r2
10002b18:	e4b95417 	ldw	r18,-6832(fp)
10002b1c:	8809883a 	mov	r4,r17
10002b20:	01400544 	movi	r5,21
10002b24:	000586c0 	call	1000586c <__mulsi3>
10002b28:	1023883a 	mov	r17,r2
10002b2c:	9009883a 	mov	r4,r18
10002b30:	01405404 	movi	r5,336
10002b34:	000586c0 	call	1000586c <__mulsi3>
10002b38:	8885883a 	add	r2,r17,r2
10002b3c:	1405883a 	add	r2,r2,r16
10002b40:	1085883a 	add	r2,r2,r2
10002b44:	1085883a 	add	r2,r2,r2
10002b48:	e0f92704 	addi	r3,fp,-7012
10002b4c:	1885883a 	add	r2,r3,r2
10002b50:	10804604 	addi	r2,r2,280
10002b54:	10800017 	ldw	r2,0(r2)
10002b58:	10000226 	beq	r2,zero,10002b64 <main+0x2830>
		*BUL3_EN = False;
10002b5c:	00806804 	movi	r2,416
10002b60:	10000015 	stw	zero,0(r2)
	}

    if(*BUL3_EN == True){
10002b64:	00806804 	movi	r2,416
10002b68:	10800017 	ldw	r2,0(r2)
10002b6c:	10800058 	cmpnei	r2,r2,1
10002b70:	1000241e 	bne	r2,zero,10002c04 <main+0x28d0>
    	if(bul3start >= 90)
10002b74:	e0b93917 	ldw	r2,-6940(fp)
10002b78:	10801690 	cmplti	r2,r2,90
10002b7c:	1000031e 	bne	r2,zero,10002b8c <main+0x2858>
    		*BUL3_EN = False;
10002b80:	00806804 	movi	r2,416
10002b84:	10000015 	stw	zero,0(r2)
10002b88:	00001e06 	br	10002c04 <main+0x28d0>
    	else{
    		if(bul3Up == True){
10002b8c:	e0b93817 	ldw	r2,-6944(fp)
10002b90:	10800058 	cmpnei	r2,r2,1
10002b94:	1000071e 	bne	r2,zero,10002bb4 <main+0x2880>
    			*BUL3_Y -= bulinc;
10002b98:	00806004 	movi	r2,384
10002b9c:	00c06004 	movi	r3,384
10002ba0:	19000017 	ldw	r4,0(r3)
10002ba4:	e0f95317 	ldw	r3,-6836(fp)
10002ba8:	20c7c83a 	sub	r3,r4,r3
10002bac:	10c00015 	stw	r3,0(r2)
10002bb0:	00001006 	br	10002bf4 <main+0x28c0>
    		}
    		else if(bul3Left == True){
10002bb4:	e0b93717 	ldw	r2,-6948(fp)
10002bb8:	10800058 	cmpnei	r2,r2,1
10002bbc:	1000071e 	bne	r2,zero,10002bdc <main+0x28a8>
    			*BUL3_X -= bulinc;
10002bc0:	00806404 	movi	r2,400
10002bc4:	00c06404 	movi	r3,400
10002bc8:	19000017 	ldw	r4,0(r3)
10002bcc:	e0f95317 	ldw	r3,-6836(fp)
10002bd0:	20c7c83a 	sub	r3,r4,r3
10002bd4:	10c00015 	stw	r3,0(r2)
10002bd8:	00000606 	br	10002bf4 <main+0x28c0>
    		}
    		else{
    			*BUL3_X += bulinc;
10002bdc:	00806404 	movi	r2,400
10002be0:	00c06404 	movi	r3,400
10002be4:	19000017 	ldw	r4,0(r3)
10002be8:	e0f95317 	ldw	r3,-6836(fp)
10002bec:	20c7883a 	add	r3,r4,r3
10002bf0:	10c00015 	stw	r3,0(r2)
    		}
    		bul3start += bulinc;
10002bf4:	e0f93917 	ldw	r3,-6940(fp)
10002bf8:	e0b95317 	ldw	r2,-6836(fp)
10002bfc:	1885883a 	add	r2,r3,r2
10002c00:	e0b93915 	stw	r2,-6940(fp)
    	}
    }
    if(*BUL2_EN == True){
10002c04:	00807404 	movi	r2,464
10002c08:	10800017 	ldw	r2,0(r2)
10002c0c:	10800058 	cmpnei	r2,r2,1
10002c10:	1000241e 	bne	r2,zero,10002ca4 <main+0x2970>
		if(bul2start >= 90)
10002c14:	e0b93617 	ldw	r2,-6952(fp)
10002c18:	10801690 	cmplti	r2,r2,90
10002c1c:	1000031e 	bne	r2,zero,10002c2c <main+0x28f8>
			*BUL2_EN = False;
10002c20:	00807404 	movi	r2,464
10002c24:	10000015 	stw	zero,0(r2)
10002c28:	00001e06 	br	10002ca4 <main+0x2970>
		else{
			if(bul2Up == True){
10002c2c:	e0b93517 	ldw	r2,-6956(fp)
10002c30:	10800058 	cmpnei	r2,r2,1
10002c34:	1000071e 	bne	r2,zero,10002c54 <main+0x2920>
				*BUL2_Y -= bulinc;
10002c38:	00806c04 	movi	r2,432
10002c3c:	00c06c04 	movi	r3,432
10002c40:	19000017 	ldw	r4,0(r3)
10002c44:	e0f95317 	ldw	r3,-6836(fp)
10002c48:	20c7c83a 	sub	r3,r4,r3
10002c4c:	10c00015 	stw	r3,0(r2)
10002c50:	00001006 	br	10002c94 <main+0x2960>
			}
			else if(bul2Left == True){
10002c54:	e0b93417 	ldw	r2,-6960(fp)
10002c58:	10800058 	cmpnei	r2,r2,1
10002c5c:	1000071e 	bne	r2,zero,10002c7c <main+0x2948>
				*BUL2_X -= bulinc;
10002c60:	00807004 	movi	r2,448
10002c64:	00c07004 	movi	r3,448
10002c68:	19000017 	ldw	r4,0(r3)
10002c6c:	e0f95317 	ldw	r3,-6836(fp)
10002c70:	20c7c83a 	sub	r3,r4,r3
10002c74:	10c00015 	stw	r3,0(r2)
10002c78:	00000606 	br	10002c94 <main+0x2960>
			}
			else{
				*BUL2_X += bulinc;
10002c7c:	00807004 	movi	r2,448
10002c80:	00c07004 	movi	r3,448
10002c84:	19000017 	ldw	r4,0(r3)
10002c88:	e0f95317 	ldw	r3,-6836(fp)
10002c8c:	20c7883a 	add	r3,r4,r3
10002c90:	10c00015 	stw	r3,0(r2)
			}
			bul2start += bulinc;
10002c94:	e0f93617 	ldw	r3,-6952(fp)
10002c98:	e0b95317 	ldw	r2,-6836(fp)
10002c9c:	1885883a 	add	r2,r3,r2
10002ca0:	e0b93615 	stw	r2,-6952(fp)
		}
	}
    if(*BUL1_EN == True){
10002ca4:	00808004 	movi	r2,512
10002ca8:	10800017 	ldw	r2,0(r2)
10002cac:	10800058 	cmpnei	r2,r2,1
10002cb0:	1000241e 	bne	r2,zero,10002d44 <main+0x2a10>
		if(bul1start >= 90)
10002cb4:	e0b93317 	ldw	r2,-6964(fp)
10002cb8:	10801690 	cmplti	r2,r2,90
10002cbc:	1000031e 	bne	r2,zero,10002ccc <main+0x2998>
			*BUL1_EN = False;
10002cc0:	00808004 	movi	r2,512
10002cc4:	10000015 	stw	zero,0(r2)
10002cc8:	00001e06 	br	10002d44 <main+0x2a10>
		else{
			if(bul1Up == True){
10002ccc:	e0b93217 	ldw	r2,-6968(fp)
10002cd0:	10800058 	cmpnei	r2,r2,1
10002cd4:	1000071e 	bne	r2,zero,10002cf4 <main+0x29c0>
				*BUL1_Y -= bulinc;
10002cd8:	00807804 	movi	r2,480
10002cdc:	00c07804 	movi	r3,480
10002ce0:	19000017 	ldw	r4,0(r3)
10002ce4:	e0f95317 	ldw	r3,-6836(fp)
10002ce8:	20c7c83a 	sub	r3,r4,r3
10002cec:	10c00015 	stw	r3,0(r2)
10002cf0:	00001006 	br	10002d34 <main+0x2a00>
			}
			else if(bul1Left == True){
10002cf4:	e0b93117 	ldw	r2,-6972(fp)
10002cf8:	10800058 	cmpnei	r2,r2,1
10002cfc:	1000071e 	bne	r2,zero,10002d1c <main+0x29e8>
				*BUL1_X -= bulinc;
10002d00:	00807c04 	movi	r2,496
10002d04:	00c07c04 	movi	r3,496
10002d08:	19000017 	ldw	r4,0(r3)
10002d0c:	e0f95317 	ldw	r3,-6836(fp)
10002d10:	20c7c83a 	sub	r3,r4,r3
10002d14:	10c00015 	stw	r3,0(r2)
10002d18:	00000606 	br	10002d34 <main+0x2a00>
			}
			else{
				*BUL1_X += bulinc;
10002d1c:	00807c04 	movi	r2,496
10002d20:	00c07c04 	movi	r3,496
10002d24:	19000017 	ldw	r4,0(r3)
10002d28:	e0f95317 	ldw	r3,-6836(fp)
10002d2c:	20c7883a 	add	r3,r4,r3
10002d30:	10c00015 	stw	r3,0(r2)
			}
			bul1start += bulinc;
10002d34:	e0f93317 	ldw	r3,-6964(fp)
10002d38:	e0b95317 	ldw	r2,-6836(fp)
10002d3c:	1885883a 	add	r2,r3,r2
10002d40:	e0b93315 	stw	r2,-6964(fp)
		}
	}


    //monsters code
    *MON1_X = monster1_1_x;
10002d44:	0080c404 	movi	r2,784
10002d48:	e0f93c17 	ldw	r3,-6928(fp)
10002d4c:	10c00015 	stw	r3,0(r2)
    *MON1_Y = monster1_1_y;
10002d50:	0080c004 	movi	r2,768
10002d54:	e0f93d17 	ldw	r3,-6924(fp)
10002d58:	10c00015 	stw	r3,0(r2)
    if(*MON1_EN == True){
10002d5c:	0080c804 	movi	r2,800
10002d60:	10800003 	ldbu	r2,0(r2)
10002d64:	10803fcc 	andi	r2,r2,255
10002d68:	1080201c 	xori	r2,r2,128
10002d6c:	10bfe004 	addi	r2,r2,-128
10002d70:	10800058 	cmpnei	r2,r2,1
10002d74:	10000a1e 	bne	r2,zero,10002da0 <main+0x2a6c>
		if(monster1_1_left == True){
10002d78:	e0b93e17 	ldw	r2,-6920(fp)
10002d7c:	10800058 	cmpnei	r2,r2,1
10002d80:	1000041e 	bne	r2,zero,10002d94 <main+0x2a60>
			monster1_1_x-=2;
10002d84:	e0b93c17 	ldw	r2,-6928(fp)
10002d88:	10bfff84 	addi	r2,r2,-2
10002d8c:	e0b93c15 	stw	r2,-6928(fp)
10002d90:	00000306 	br	10002da0 <main+0x2a6c>
		}
		else{
			monster1_1_x+=2;
10002d94:	e0b93c17 	ldw	r2,-6928(fp)
10002d98:	10800084 	addi	r2,r2,2
10002d9c:	e0b93c15 	stw	r2,-6928(fp)
		}
    }
    //Monster 1
    if(scene[sceneNum][(monster1_1_y+35)/30][monster1_1_x/30]==0){
10002da0:	e0b93d17 	ldw	r2,-6924(fp)
10002da4:	108008c4 	addi	r2,r2,35
10002da8:	1009883a 	mov	r4,r2
10002dac:	01400784 	movi	r5,30
10002db0:	00057ac0 	call	100057ac <__divsi3>
10002db4:	1023883a 	mov	r17,r2
10002db8:	e0b93c17 	ldw	r2,-6928(fp)
10002dbc:	1009883a 	mov	r4,r2
10002dc0:	01400784 	movi	r5,30
10002dc4:	00057ac0 	call	100057ac <__divsi3>
10002dc8:	1021883a 	mov	r16,r2
10002dcc:	e4b95417 	ldw	r18,-6832(fp)
10002dd0:	8809883a 	mov	r4,r17
10002dd4:	01400544 	movi	r5,21
10002dd8:	000586c0 	call	1000586c <__mulsi3>
10002ddc:	1023883a 	mov	r17,r2
10002de0:	9009883a 	mov	r4,r18
10002de4:	01405404 	movi	r5,336
10002de8:	000586c0 	call	1000586c <__mulsi3>
10002dec:	8885883a 	add	r2,r17,r2
10002df0:	1405883a 	add	r2,r2,r16
10002df4:	1085883a 	add	r2,r2,r2
10002df8:	1085883a 	add	r2,r2,r2
10002dfc:	e0f92704 	addi	r3,fp,-7012
10002e00:	1885883a 	add	r2,r3,r2
10002e04:	10804604 	addi	r2,r2,280
10002e08:	10800017 	ldw	r2,0(r2)
10002e0c:	1000021e 	bne	r2,zero,10002e18 <main+0x2ae4>
    	monster1_1_left = False;
10002e10:	e0393e15 	stw	zero,-6920(fp)
10002e14:	00001f06 	br	10002e94 <main+0x2b60>
    }
    else if(scene[sceneNum][(monster1_1_y+35)/30][(monster1_1_x+30)/30]==0){
10002e18:	e0b93d17 	ldw	r2,-6924(fp)
10002e1c:	108008c4 	addi	r2,r2,35
10002e20:	1009883a 	mov	r4,r2
10002e24:	01400784 	movi	r5,30
10002e28:	00057ac0 	call	100057ac <__divsi3>
10002e2c:	1023883a 	mov	r17,r2
10002e30:	e0b93c17 	ldw	r2,-6928(fp)
10002e34:	10800784 	addi	r2,r2,30
10002e38:	1009883a 	mov	r4,r2
10002e3c:	01400784 	movi	r5,30
10002e40:	00057ac0 	call	100057ac <__divsi3>
10002e44:	1021883a 	mov	r16,r2
10002e48:	e4b95417 	ldw	r18,-6832(fp)
10002e4c:	8809883a 	mov	r4,r17
10002e50:	01400544 	movi	r5,21
10002e54:	000586c0 	call	1000586c <__mulsi3>
10002e58:	1023883a 	mov	r17,r2
10002e5c:	9009883a 	mov	r4,r18
10002e60:	01405404 	movi	r5,336
10002e64:	000586c0 	call	1000586c <__mulsi3>
10002e68:	8885883a 	add	r2,r17,r2
10002e6c:	1405883a 	add	r2,r2,r16
10002e70:	1085883a 	add	r2,r2,r2
10002e74:	1085883a 	add	r2,r2,r2
10002e78:	e0f92704 	addi	r3,fp,-7012
10002e7c:	1885883a 	add	r2,r3,r2
10002e80:	10804604 	addi	r2,r2,280
10002e84:	10800017 	ldw	r2,0(r2)
10002e88:	1000021e 	bne	r2,zero,10002e94 <main+0x2b60>
    	monster1_1_left = True;
10002e8c:	00800044 	movi	r2,1
10002e90:	e0b93e15 	stw	r2,-6920(fp)
    }
    //Monster 2
    *MON2_X = monster2_1_x;
10002e94:	0080b804 	movi	r2,736
10002e98:	e0f94017 	ldw	r3,-6912(fp)
10002e9c:	10c00015 	stw	r3,0(r2)
	*MON2_Y = monster2_1_y;
10002ea0:	0080b404 	movi	r2,720
10002ea4:	e0f94117 	ldw	r3,-6908(fp)
10002ea8:	10c00015 	stw	r3,0(r2)
	if(*MON2_EN == True){
10002eac:	0080bc04 	movi	r2,752
10002eb0:	10800003 	ldbu	r2,0(r2)
10002eb4:	10803fcc 	andi	r2,r2,255
10002eb8:	1080201c 	xori	r2,r2,128
10002ebc:	10bfe004 	addi	r2,r2,-128
10002ec0:	10800058 	cmpnei	r2,r2,1
10002ec4:	1000101e 	bne	r2,zero,10002f08 <main+0x2bd4>
		if(monster2_1_left == True && mon2_at_top == False){
10002ec8:	e0b94217 	ldw	r2,-6904(fp)
10002ecc:	10800058 	cmpnei	r2,r2,1
10002ed0:	1000061e 	bne	r2,zero,10002eec <main+0x2bb8>
10002ed4:	e0b94417 	ldw	r2,-6896(fp)
10002ed8:	1000041e 	bne	r2,zero,10002eec <main+0x2bb8>
			monster2_1_x-=3;
10002edc:	e0b94017 	ldw	r2,-6912(fp)
10002ee0:	10bfff44 	addi	r2,r2,-3
10002ee4:	e0b94015 	stw	r2,-6912(fp)
10002ee8:	00000706 	br	10002f08 <main+0x2bd4>
		}
		else if(monster2_1_left == False && mon2_at_top == False){
10002eec:	e0b94217 	ldw	r2,-6904(fp)
10002ef0:	1000051e 	bne	r2,zero,10002f08 <main+0x2bd4>
10002ef4:	e0b94417 	ldw	r2,-6896(fp)
10002ef8:	1000031e 	bne	r2,zero,10002f08 <main+0x2bd4>
			monster2_1_x+=3;
10002efc:	e0b94017 	ldw	r2,-6912(fp)
10002f00:	108000c4 	addi	r2,r2,3
10002f04:	e0b94015 	stw	r2,-6912(fp)
		}
	}
	//Monster 3
	*MON3_X = monster3_1_x;
10002f08:	0080ac04 	movi	r2,688
10002f0c:	e0f94817 	ldw	r3,-6880(fp)
10002f10:	10c00015 	stw	r3,0(r2)
	*MON3_Y = monster3_1_y;
10002f14:	0080a804 	movi	r2,672
10002f18:	e0f94917 	ldw	r3,-6876(fp)
10002f1c:	10c00015 	stw	r3,0(r2)
	if(*MON3_EN == True){
10002f20:	0080b004 	movi	r2,704
10002f24:	10800003 	ldbu	r2,0(r2)
10002f28:	10803fcc 	andi	r2,r2,255
10002f2c:	1080201c 	xori	r2,r2,128
10002f30:	10bfe004 	addi	r2,r2,-128
10002f34:	10800058 	cmpnei	r2,r2,1
10002f38:	10000a1e 	bne	r2,zero,10002f64 <main+0x2c30>
		if(monster3_1_left == True){
10002f3c:	e0b94a17 	ldw	r2,-6872(fp)
10002f40:	10800058 	cmpnei	r2,r2,1
10002f44:	1000041e 	bne	r2,zero,10002f58 <main+0x2c24>
			monster3_1_x-=5;
10002f48:	e0b94817 	ldw	r2,-6880(fp)
10002f4c:	10bffec4 	addi	r2,r2,-5
10002f50:	e0b94815 	stw	r2,-6880(fp)
10002f54:	00000306 	br	10002f64 <main+0x2c30>
		}
		else{
			monster3_1_x+=5;
10002f58:	e0b94817 	ldw	r2,-6880(fp)
10002f5c:	10800144 	addi	r2,r2,5
10002f60:	e0b94815 	stw	r2,-6880(fp)
		}
	}

	//Monster 1 collision detection
	if(scene[sceneNum][(monster1_1_y+35)/30][monster1_1_x/30]==0){
10002f64:	e0b93d17 	ldw	r2,-6924(fp)
10002f68:	108008c4 	addi	r2,r2,35
10002f6c:	1009883a 	mov	r4,r2
10002f70:	01400784 	movi	r5,30
10002f74:	00057ac0 	call	100057ac <__divsi3>
10002f78:	1023883a 	mov	r17,r2
10002f7c:	e0b93c17 	ldw	r2,-6928(fp)
10002f80:	1009883a 	mov	r4,r2
10002f84:	01400784 	movi	r5,30
10002f88:	00057ac0 	call	100057ac <__divsi3>
10002f8c:	1021883a 	mov	r16,r2
10002f90:	e4b95417 	ldw	r18,-6832(fp)
10002f94:	8809883a 	mov	r4,r17
10002f98:	01400544 	movi	r5,21
10002f9c:	000586c0 	call	1000586c <__mulsi3>
10002fa0:	1023883a 	mov	r17,r2
10002fa4:	9009883a 	mov	r4,r18
10002fa8:	01405404 	movi	r5,336
10002fac:	000586c0 	call	1000586c <__mulsi3>
10002fb0:	8885883a 	add	r2,r17,r2
10002fb4:	1405883a 	add	r2,r2,r16
10002fb8:	1085883a 	add	r2,r2,r2
10002fbc:	1085883a 	add	r2,r2,r2
10002fc0:	e0f92704 	addi	r3,fp,-7012
10002fc4:	1885883a 	add	r2,r3,r2
10002fc8:	10804604 	addi	r2,r2,280
10002fcc:	10800017 	ldw	r2,0(r2)
10002fd0:	1000021e 	bne	r2,zero,10002fdc <main+0x2ca8>
		monster1_1_left = False;
10002fd4:	e0393e15 	stw	zero,-6920(fp)
10002fd8:	00001f06 	br	10003058 <main+0x2d24>
	}
	else if(scene[sceneNum][(monster1_1_y+35)/30][(monster1_1_x+30)/30]==0){
10002fdc:	e0b93d17 	ldw	r2,-6924(fp)
10002fe0:	108008c4 	addi	r2,r2,35
10002fe4:	1009883a 	mov	r4,r2
10002fe8:	01400784 	movi	r5,30
10002fec:	00057ac0 	call	100057ac <__divsi3>
10002ff0:	1023883a 	mov	r17,r2
10002ff4:	e0b93c17 	ldw	r2,-6928(fp)
10002ff8:	10800784 	addi	r2,r2,30
10002ffc:	1009883a 	mov	r4,r2
10003000:	01400784 	movi	r5,30
10003004:	00057ac0 	call	100057ac <__divsi3>
10003008:	1021883a 	mov	r16,r2
1000300c:	e4b95417 	ldw	r18,-6832(fp)
10003010:	8809883a 	mov	r4,r17
10003014:	01400544 	movi	r5,21
10003018:	000586c0 	call	1000586c <__mulsi3>
1000301c:	1023883a 	mov	r17,r2
10003020:	9009883a 	mov	r4,r18
10003024:	01405404 	movi	r5,336
10003028:	000586c0 	call	1000586c <__mulsi3>
1000302c:	8885883a 	add	r2,r17,r2
10003030:	1405883a 	add	r2,r2,r16
10003034:	1085883a 	add	r2,r2,r2
10003038:	1085883a 	add	r2,r2,r2
1000303c:	e0f92704 	addi	r3,fp,-7012
10003040:	1885883a 	add	r2,r3,r2
10003044:	10804604 	addi	r2,r2,280
10003048:	10800017 	ldw	r2,0(r2)
1000304c:	1000021e 	bne	r2,zero,10003058 <main+0x2d24>
		monster1_1_left = True;
10003050:	00800044 	movi	r2,1
10003054:	e0b93e15 	stw	r2,-6920(fp)
	}
	//Monster 2 collision detection
	if(scene[sceneNum][(monster2_1_y+25)/30][monster2_1_x/30]!=0 || scene[sceneNum][(monster2_1_y)/30][monster2_1_x/30]!=0){
10003058:	e0b94117 	ldw	r2,-6908(fp)
1000305c:	10800644 	addi	r2,r2,25
10003060:	1009883a 	mov	r4,r2
10003064:	01400784 	movi	r5,30
10003068:	00057ac0 	call	100057ac <__divsi3>
1000306c:	1023883a 	mov	r17,r2
10003070:	e0b94017 	ldw	r2,-6912(fp)
10003074:	1009883a 	mov	r4,r2
10003078:	01400784 	movi	r5,30
1000307c:	00057ac0 	call	100057ac <__divsi3>
10003080:	1021883a 	mov	r16,r2
10003084:	e4b95417 	ldw	r18,-6832(fp)
10003088:	8809883a 	mov	r4,r17
1000308c:	01400544 	movi	r5,21
10003090:	000586c0 	call	1000586c <__mulsi3>
10003094:	1023883a 	mov	r17,r2
10003098:	9009883a 	mov	r4,r18
1000309c:	01405404 	movi	r5,336
100030a0:	000586c0 	call	1000586c <__mulsi3>
100030a4:	8885883a 	add	r2,r17,r2
100030a8:	1405883a 	add	r2,r2,r16
100030ac:	1085883a 	add	r2,r2,r2
100030b0:	1085883a 	add	r2,r2,r2
100030b4:	e0f92704 	addi	r3,fp,-7012
100030b8:	1885883a 	add	r2,r3,r2
100030bc:	10804604 	addi	r2,r2,280
100030c0:	10800017 	ldw	r2,0(r2)
100030c4:	10001b1e 	bne	r2,zero,10003134 <main+0x2e00>
100030c8:	e0b94117 	ldw	r2,-6908(fp)
100030cc:	1009883a 	mov	r4,r2
100030d0:	01400784 	movi	r5,30
100030d4:	00057ac0 	call	100057ac <__divsi3>
100030d8:	1023883a 	mov	r17,r2
100030dc:	e0b94017 	ldw	r2,-6912(fp)
100030e0:	1009883a 	mov	r4,r2
100030e4:	01400784 	movi	r5,30
100030e8:	00057ac0 	call	100057ac <__divsi3>
100030ec:	1021883a 	mov	r16,r2
100030f0:	e4b95417 	ldw	r18,-6832(fp)
100030f4:	8809883a 	mov	r4,r17
100030f8:	01400544 	movi	r5,21
100030fc:	000586c0 	call	1000586c <__mulsi3>
10003100:	1023883a 	mov	r17,r2
10003104:	9009883a 	mov	r4,r18
10003108:	01405404 	movi	r5,336
1000310c:	000586c0 	call	1000586c <__mulsi3>
10003110:	8885883a 	add	r2,r17,r2
10003114:	1405883a 	add	r2,r2,r16
10003118:	1085883a 	add	r2,r2,r2
1000311c:	1085883a 	add	r2,r2,r2
10003120:	e0f92704 	addi	r3,fp,-7012
10003124:	1885883a 	add	r2,r3,r2
10003128:	10804604 	addi	r2,r2,280
1000312c:	10800017 	ldw	r2,0(r2)
10003130:	10000226 	beq	r2,zero,1000313c <main+0x2e08>
		monster2_1_left = False;
10003134:	e0394215 	stw	zero,-6904(fp)
10003138:	00003b06 	br	10003228 <main+0x2ef4>
	}
	else if(scene[sceneNum][(monster2_1_y+25)/30][(monster2_1_x+45)/30]!=0 || scene[sceneNum][(monster2_1_y)/30][(monster2_1_x+45)/30]!=0){
1000313c:	e0b94117 	ldw	r2,-6908(fp)
10003140:	10800644 	addi	r2,r2,25
10003144:	1009883a 	mov	r4,r2
10003148:	01400784 	movi	r5,30
1000314c:	00057ac0 	call	100057ac <__divsi3>
10003150:	1023883a 	mov	r17,r2
10003154:	e0b94017 	ldw	r2,-6912(fp)
10003158:	10800b44 	addi	r2,r2,45
1000315c:	1009883a 	mov	r4,r2
10003160:	01400784 	movi	r5,30
10003164:	00057ac0 	call	100057ac <__divsi3>
10003168:	1021883a 	mov	r16,r2
1000316c:	e4b95417 	ldw	r18,-6832(fp)
10003170:	8809883a 	mov	r4,r17
10003174:	01400544 	movi	r5,21
10003178:	000586c0 	call	1000586c <__mulsi3>
1000317c:	1023883a 	mov	r17,r2
10003180:	9009883a 	mov	r4,r18
10003184:	01405404 	movi	r5,336
10003188:	000586c0 	call	1000586c <__mulsi3>
1000318c:	8885883a 	add	r2,r17,r2
10003190:	1405883a 	add	r2,r2,r16
10003194:	1085883a 	add	r2,r2,r2
10003198:	1085883a 	add	r2,r2,r2
1000319c:	e0f92704 	addi	r3,fp,-7012
100031a0:	1885883a 	add	r2,r3,r2
100031a4:	10804604 	addi	r2,r2,280
100031a8:	10800017 	ldw	r2,0(r2)
100031ac:	10001c1e 	bne	r2,zero,10003220 <main+0x2eec>
100031b0:	e0b94117 	ldw	r2,-6908(fp)
100031b4:	1009883a 	mov	r4,r2
100031b8:	01400784 	movi	r5,30
100031bc:	00057ac0 	call	100057ac <__divsi3>
100031c0:	1023883a 	mov	r17,r2
100031c4:	e0b94017 	ldw	r2,-6912(fp)
100031c8:	10800b44 	addi	r2,r2,45
100031cc:	1009883a 	mov	r4,r2
100031d0:	01400784 	movi	r5,30
100031d4:	00057ac0 	call	100057ac <__divsi3>
100031d8:	1021883a 	mov	r16,r2
100031dc:	e4b95417 	ldw	r18,-6832(fp)
100031e0:	8809883a 	mov	r4,r17
100031e4:	01400544 	movi	r5,21
100031e8:	000586c0 	call	1000586c <__mulsi3>
100031ec:	1023883a 	mov	r17,r2
100031f0:	9009883a 	mov	r4,r18
100031f4:	01405404 	movi	r5,336
100031f8:	000586c0 	call	1000586c <__mulsi3>
100031fc:	8885883a 	add	r2,r17,r2
10003200:	1405883a 	add	r2,r2,r16
10003204:	1085883a 	add	r2,r2,r2
10003208:	1085883a 	add	r2,r2,r2
1000320c:	e0f92704 	addi	r3,fp,-7012
10003210:	1885883a 	add	r2,r3,r2
10003214:	10804604 	addi	r2,r2,280
10003218:	10800017 	ldw	r2,0(r2)
1000321c:	10000226 	beq	r2,zero,10003228 <main+0x2ef4>
		monster2_1_left = True;
10003220:	00800044 	movi	r2,1
10003224:	e0b94215 	stw	r2,-6904(fp)
	}
	//Monster 2 Jump Code
	if(*MON2_EN == True){
10003228:	0080bc04 	movi	r2,752
1000322c:	10800003 	ldbu	r2,0(r2)
10003230:	10803fcc 	andi	r2,r2,255
10003234:	1080201c 	xori	r2,r2,128
10003238:	10bfe004 	addi	r2,r2,-128
1000323c:	10800058 	cmpnei	r2,r2,1
10003240:	1000e11e 	bne	r2,zero,100035c8 <main+0x3294>
		if (monster2_jump_counter >= 40 && mon2_at_top == True){
10003244:	e0b94317 	ldw	r2,-6900(fp)
10003248:	10800a10 	cmplti	r2,r2,40
1000324c:	1000131e 	bne	r2,zero,1000329c <main+0x2f68>
10003250:	e0b94417 	ldw	r2,-6896(fp)
10003254:	10800058 	cmpnei	r2,r2,1
10003258:	1000101e 	bne	r2,zero,1000329c <main+0x2f68>
			mon_2_y_inc = 15;
1000325c:	00905c34 	movhi	r2,16752
10003260:	e0b94615 	stw	r2,-6888(fp)
			monster2_grounded = False;
10003264:	e0396a15 	stw	zero,-6744(fp)
			mon2_hit_bot = False;
10003268:	e0394515 	stw	zero,-6892(fp)
			monster2_1_left = rand()%2;
1000326c:	0007c580 	call	10007c58 <rand>
10003270:	1007883a 	mov	r3,r2
10003274:	00a00034 	movhi	r2,32768
10003278:	10800044 	addi	r2,r2,1
1000327c:	1884703a 	and	r2,r3,r2
10003280:	1000040e 	bge	r2,zero,10003294 <main+0x2f60>
10003284:	10bfffc4 	addi	r2,r2,-1
10003288:	00ffff84 	movi	r3,-2
1000328c:	10c4b03a 	or	r2,r2,r3
10003290:	10800044 	addi	r2,r2,1
10003294:	e0b94215 	stw	r2,-6904(fp)
			mon2_at_top = False;
10003298:	e0394415 	stw	zero,-6896(fp)
		}
		if(mon2_at_top == False){
1000329c:	e0b94417 	ldw	r2,-6896(fp)
100032a0:	1000231e 	bne	r2,zero,10003330 <main+0x2ffc>
			monster2_jump_counter = 0;
100032a4:	e0394315 	stw	zero,-6900(fp)
			mon_2_y_inc -= (gravity*.35);
100032a8:	e1394617 	ldw	r4,-6888(fp)
100032ac:	00076c80 	call	100076c8 <__extendsfdf2>
100032b0:	1021883a 	mov	r16,r2
100032b4:	1823883a 	mov	r17,r3
100032b8:	e1395117 	ldw	r4,-6844(fp)
100032bc:	00076c80 	call	100076c8 <__extendsfdf2>
100032c0:	100b883a 	mov	r5,r2
100032c4:	180d883a 	mov	r6,r3
100032c8:	2809883a 	mov	r4,r5
100032cc:	300b883a 	mov	r5,r6
100032d0:	019999b4 	movhi	r6,26214
100032d4:	31999984 	addi	r6,r6,26214
100032d8:	01cff5b4 	movhi	r7,16342
100032dc:	39d99984 	addi	r7,r7,26214
100032e0:	000658c0 	call	1000658c <__muldf3>
100032e4:	1009883a 	mov	r4,r2
100032e8:	180b883a 	mov	r5,r3
100032ec:	2005883a 	mov	r2,r4
100032f0:	2807883a 	mov	r3,r5
100032f4:	8009883a 	mov	r4,r16
100032f8:	880b883a 	mov	r5,r17
100032fc:	100d883a 	mov	r6,r2
10003300:	180f883a 	mov	r7,r3
10003304:	0006df80 	call	10006df8 <__subdf3>
10003308:	1009883a 	mov	r4,r2
1000330c:	180b883a 	mov	r5,r3
10003310:	2005883a 	mov	r2,r4
10003314:	2807883a 	mov	r3,r5
10003318:	1009883a 	mov	r4,r2
1000331c:	180b883a 	mov	r5,r3
10003320:	00077d80 	call	100077d8 <__truncdfsf2>
10003324:	1007883a 	mov	r3,r2
10003328:	e0f94615 	stw	r3,-6888(fp)
1000332c:	00000106 	br	10003334 <main+0x3000>
		}
		else{
			mon_2_y_inc = 0;
10003330:	e0394615 	stw	zero,-6888(fp)
		}

		if(mon_2_y_inc < -15){
10003334:	e1394617 	ldw	r4,-6888(fp)
10003338:	01705c34 	movhi	r5,49520
1000333c:	0005e2c0 	call	10005e2c <__lesf2>
10003340:	1000020e 	bge	r2,zero,1000334c <main+0x3018>
			mon_2_y_inc = -15;
10003344:	00b05c34 	movhi	r2,49520
10003348:	e0b94615 	stw	r2,-6888(fp)
		}
		if(mon_2_y_inc > 15){
1000334c:	e1394617 	ldw	r4,-6888(fp)
10003350:	01505c34 	movhi	r5,16752
10003354:	0005d740 	call	10005d74 <__gesf2>
10003358:	0080020e 	bge	zero,r2,10003364 <main+0x3030>
			mon_2_y_inc = 15;
1000335c:	00905c34 	movhi	r2,16752
10003360:	e0b94615 	stw	r2,-6888(fp)
		}
		if(mon2_hit_bot == False || mon_2_y_inc < 0){
10003364:	e0b94517 	ldw	r2,-6892(fp)
10003368:	10000426 	beq	r2,zero,1000337c <main+0x3048>
1000336c:	e1394617 	ldw	r4,-6888(fp)
10003370:	000b883a 	mov	r5,zero
10003374:	0005e2c0 	call	10005e2c <__lesf2>
10003378:	10000b0e 	bge	r2,zero,100033a8 <main+0x3074>
			monster2_1_y += mon_2_y_inc;
1000337c:	e1394117 	ldw	r4,-6908(fp)
10003380:	00064580 	call	10006458 <__floatsisf>
10003384:	1007883a 	mov	r3,r2
10003388:	1809883a 	mov	r4,r3
1000338c:	e1794617 	ldw	r5,-6888(fp)
10003390:	00058940 	call	10005894 <__addsf3>
10003394:	1007883a 	mov	r3,r2
10003398:	1805883a 	mov	r2,r3
1000339c:	1009883a 	mov	r4,r2
100033a0:	00063e00 	call	100063e0 <__fixsfsi>
100033a4:	e0b94115 	stw	r2,-6908(fp)
		}

		//mon2 bot collision detection
		if((scene[sceneNum][(monster2_1_y+30)/30][(monster2_1_x+5)/30] != 0 || scene[sceneNum][(monster2_1_y+30)/30][(monster2_1_x+40)/30] != 0)){
100033a8:	e0b94117 	ldw	r2,-6908(fp)
100033ac:	10800784 	addi	r2,r2,30
100033b0:	1009883a 	mov	r4,r2
100033b4:	01400784 	movi	r5,30
100033b8:	00057ac0 	call	100057ac <__divsi3>
100033bc:	1023883a 	mov	r17,r2
100033c0:	e0b94017 	ldw	r2,-6912(fp)
100033c4:	10800144 	addi	r2,r2,5
100033c8:	1009883a 	mov	r4,r2
100033cc:	01400784 	movi	r5,30
100033d0:	00057ac0 	call	100057ac <__divsi3>
100033d4:	1021883a 	mov	r16,r2
100033d8:	e4b95417 	ldw	r18,-6832(fp)
100033dc:	8809883a 	mov	r4,r17
100033e0:	01400544 	movi	r5,21
100033e4:	000586c0 	call	1000586c <__mulsi3>
100033e8:	1023883a 	mov	r17,r2
100033ec:	9009883a 	mov	r4,r18
100033f0:	01405404 	movi	r5,336
100033f4:	000586c0 	call	1000586c <__mulsi3>
100033f8:	8885883a 	add	r2,r17,r2
100033fc:	1405883a 	add	r2,r2,r16
10003400:	1085883a 	add	r2,r2,r2
10003404:	1085883a 	add	r2,r2,r2
10003408:	e0f92704 	addi	r3,fp,-7012
1000340c:	1885883a 	add	r2,r3,r2
10003410:	10804604 	addi	r2,r2,280
10003414:	10800017 	ldw	r2,0(r2)
10003418:	10001d1e 	bne	r2,zero,10003490 <main+0x315c>
1000341c:	e0b94117 	ldw	r2,-6908(fp)
10003420:	10800784 	addi	r2,r2,30
10003424:	1009883a 	mov	r4,r2
10003428:	01400784 	movi	r5,30
1000342c:	00057ac0 	call	100057ac <__divsi3>
10003430:	1023883a 	mov	r17,r2
10003434:	e0b94017 	ldw	r2,-6912(fp)
10003438:	10800a04 	addi	r2,r2,40
1000343c:	1009883a 	mov	r4,r2
10003440:	01400784 	movi	r5,30
10003444:	00057ac0 	call	100057ac <__divsi3>
10003448:	1021883a 	mov	r16,r2
1000344c:	e4b95417 	ldw	r18,-6832(fp)
10003450:	8809883a 	mov	r4,r17
10003454:	01400544 	movi	r5,21
10003458:	000586c0 	call	1000586c <__mulsi3>
1000345c:	1023883a 	mov	r17,r2
10003460:	9009883a 	mov	r4,r18
10003464:	01405404 	movi	r5,336
10003468:	000586c0 	call	1000586c <__mulsi3>
1000346c:	8885883a 	add	r2,r17,r2
10003470:	1405883a 	add	r2,r2,r16
10003474:	1085883a 	add	r2,r2,r2
10003478:	1085883a 	add	r2,r2,r2
1000347c:	e0f92704 	addi	r3,fp,-7012
10003480:	1885883a 	add	r2,r3,r2
10003484:	10804604 	addi	r2,r2,280
10003488:	10800017 	ldw	r2,0(r2)
1000348c:	10000a26 	beq	r2,zero,100034b8 <main+0x3184>
			monster2_1_y = (monster2_1_y/30)*30;
10003490:	e0b94117 	ldw	r2,-6908(fp)
10003494:	1009883a 	mov	r4,r2
10003498:	01400784 	movi	r5,30
1000349c:	00057ac0 	call	100057ac <__divsi3>
100034a0:	1009883a 	mov	r4,r2
100034a4:	01400784 	movi	r5,30
100034a8:	000586c0 	call	1000586c <__mulsi3>
100034ac:	e0b94115 	stw	r2,-6908(fp)
			mon2_hit_bot = True;
100034b0:	00800044 	movi	r2,1
100034b4:	e0b94515 	stw	r2,-6892(fp)
		}

		//If hits head
		if((scene[sceneNum][(monster2_1_y-5)/30][(monster2_1_x+5)/30] != 0 || scene[sceneNum][(monster2_1_y-5)/30][(monster2_1_x+40)/30] != 0) && mon_2_y_inc < 0){
100034b8:	e0b94117 	ldw	r2,-6908(fp)
100034bc:	10bffec4 	addi	r2,r2,-5
100034c0:	1009883a 	mov	r4,r2
100034c4:	01400784 	movi	r5,30
100034c8:	00057ac0 	call	100057ac <__divsi3>
100034cc:	1023883a 	mov	r17,r2
100034d0:	e0b94017 	ldw	r2,-6912(fp)
100034d4:	10800144 	addi	r2,r2,5
100034d8:	1009883a 	mov	r4,r2
100034dc:	01400784 	movi	r5,30
100034e0:	00057ac0 	call	100057ac <__divsi3>
100034e4:	1021883a 	mov	r16,r2
100034e8:	e4b95417 	ldw	r18,-6832(fp)
100034ec:	8809883a 	mov	r4,r17
100034f0:	01400544 	movi	r5,21
100034f4:	000586c0 	call	1000586c <__mulsi3>
100034f8:	1023883a 	mov	r17,r2
100034fc:	9009883a 	mov	r4,r18
10003500:	01405404 	movi	r5,336
10003504:	000586c0 	call	1000586c <__mulsi3>
10003508:	8885883a 	add	r2,r17,r2
1000350c:	1405883a 	add	r2,r2,r16
10003510:	1085883a 	add	r2,r2,r2
10003514:	1085883a 	add	r2,r2,r2
10003518:	e0f92704 	addi	r3,fp,-7012
1000351c:	1885883a 	add	r2,r3,r2
10003520:	10804604 	addi	r2,r2,280
10003524:	10800017 	ldw	r2,0(r2)
10003528:	10001d1e 	bne	r2,zero,100035a0 <main+0x326c>
1000352c:	e0b94117 	ldw	r2,-6908(fp)
10003530:	10bffec4 	addi	r2,r2,-5
10003534:	1009883a 	mov	r4,r2
10003538:	01400784 	movi	r5,30
1000353c:	00057ac0 	call	100057ac <__divsi3>
10003540:	1023883a 	mov	r17,r2
10003544:	e0b94017 	ldw	r2,-6912(fp)
10003548:	10800a04 	addi	r2,r2,40
1000354c:	1009883a 	mov	r4,r2
10003550:	01400784 	movi	r5,30
10003554:	00057ac0 	call	100057ac <__divsi3>
10003558:	1021883a 	mov	r16,r2
1000355c:	e4b95417 	ldw	r18,-6832(fp)
10003560:	8809883a 	mov	r4,r17
10003564:	01400544 	movi	r5,21
10003568:	000586c0 	call	1000586c <__mulsi3>
1000356c:	1023883a 	mov	r17,r2
10003570:	9009883a 	mov	r4,r18
10003574:	01405404 	movi	r5,336
10003578:	000586c0 	call	1000586c <__mulsi3>
1000357c:	8885883a 	add	r2,r17,r2
10003580:	1405883a 	add	r2,r2,r16
10003584:	1085883a 	add	r2,r2,r2
10003588:	1085883a 	add	r2,r2,r2
1000358c:	e0f92704 	addi	r3,fp,-7012
10003590:	1885883a 	add	r2,r3,r2
10003594:	10804604 	addi	r2,r2,280
10003598:	10800017 	ldw	r2,0(r2)
1000359c:	10000726 	beq	r2,zero,100035bc <main+0x3288>
100035a0:	e1394617 	ldw	r4,-6888(fp)
100035a4:	000b883a 	mov	r5,zero
100035a8:	0005e2c0 	call	10005e2c <__lesf2>
100035ac:	1000030e 	bge	r2,zero,100035bc <main+0x3288>
			mon_2_y_inc = 0;
100035b0:	e0394615 	stw	zero,-6888(fp)
			mon2_at_top = True;
100035b4:	00800044 	movi	r2,1
100035b8:	e0b94415 	stw	r2,-6896(fp)
		}

		monster2_jump_counter+=1;
100035bc:	e0b94317 	ldw	r2,-6900(fp)
100035c0:	10800044 	addi	r2,r2,1
100035c4:	e0b94315 	stw	r2,-6900(fp)
		}
		//Monster 3 collision detection
		if(scene[sceneNum][(monster3_1_y)/30][(monster3_1_x-5)/30]!=0 || scene[sceneNum][(monster3_1_y+10)/30][(monster3_1_x-5)/30]!=0){
100035c8:	e0b94917 	ldw	r2,-6876(fp)
100035cc:	1009883a 	mov	r4,r2
100035d0:	01400784 	movi	r5,30
100035d4:	00057ac0 	call	100057ac <__divsi3>
100035d8:	1023883a 	mov	r17,r2
100035dc:	e0b94817 	ldw	r2,-6880(fp)
100035e0:	10bffec4 	addi	r2,r2,-5
100035e4:	1009883a 	mov	r4,r2
100035e8:	01400784 	movi	r5,30
100035ec:	00057ac0 	call	100057ac <__divsi3>
100035f0:	1021883a 	mov	r16,r2
100035f4:	e4b95417 	ldw	r18,-6832(fp)
100035f8:	8809883a 	mov	r4,r17
100035fc:	01400544 	movi	r5,21
10003600:	000586c0 	call	1000586c <__mulsi3>
10003604:	1023883a 	mov	r17,r2
10003608:	9009883a 	mov	r4,r18
1000360c:	01405404 	movi	r5,336
10003610:	000586c0 	call	1000586c <__mulsi3>
10003614:	8885883a 	add	r2,r17,r2
10003618:	1405883a 	add	r2,r2,r16
1000361c:	1085883a 	add	r2,r2,r2
10003620:	1085883a 	add	r2,r2,r2
10003624:	e0f92704 	addi	r3,fp,-7012
10003628:	1885883a 	add	r2,r3,r2
1000362c:	10804604 	addi	r2,r2,280
10003630:	10800017 	ldw	r2,0(r2)
10003634:	10001d1e 	bne	r2,zero,100036ac <main+0x3378>
10003638:	e0b94917 	ldw	r2,-6876(fp)
1000363c:	10800284 	addi	r2,r2,10
10003640:	1009883a 	mov	r4,r2
10003644:	01400784 	movi	r5,30
10003648:	00057ac0 	call	100057ac <__divsi3>
1000364c:	1023883a 	mov	r17,r2
10003650:	e0b94817 	ldw	r2,-6880(fp)
10003654:	10bffec4 	addi	r2,r2,-5
10003658:	1009883a 	mov	r4,r2
1000365c:	01400784 	movi	r5,30
10003660:	00057ac0 	call	100057ac <__divsi3>
10003664:	1021883a 	mov	r16,r2
10003668:	e4b95417 	ldw	r18,-6832(fp)
1000366c:	8809883a 	mov	r4,r17
10003670:	01400544 	movi	r5,21
10003674:	000586c0 	call	1000586c <__mulsi3>
10003678:	1023883a 	mov	r17,r2
1000367c:	9009883a 	mov	r4,r18
10003680:	01405404 	movi	r5,336
10003684:	000586c0 	call	1000586c <__mulsi3>
10003688:	8885883a 	add	r2,r17,r2
1000368c:	1405883a 	add	r2,r2,r16
10003690:	1085883a 	add	r2,r2,r2
10003694:	1085883a 	add	r2,r2,r2
10003698:	e0f92704 	addi	r3,fp,-7012
1000369c:	1885883a 	add	r2,r3,r2
100036a0:	10804604 	addi	r2,r2,280
100036a4:	10800017 	ldw	r2,0(r2)
100036a8:	10000226 	beq	r2,zero,100036b4 <main+0x3380>
			monster3_1_left = False;
100036ac:	e0394a15 	stw	zero,-6872(fp)
100036b0:	00003b06 	br	100037a0 <main+0x346c>
		}
		else if(scene[sceneNum][(monster3_1_y)/30][(monster3_1_x+35)/30]!=0 || scene[sceneNum][(monster3_1_y+10)/30][(monster3_1_x+35)/30]!=0){
100036b4:	e0b94917 	ldw	r2,-6876(fp)
100036b8:	1009883a 	mov	r4,r2
100036bc:	01400784 	movi	r5,30
100036c0:	00057ac0 	call	100057ac <__divsi3>
100036c4:	1023883a 	mov	r17,r2
100036c8:	e0b94817 	ldw	r2,-6880(fp)
100036cc:	108008c4 	addi	r2,r2,35
100036d0:	1009883a 	mov	r4,r2
100036d4:	01400784 	movi	r5,30
100036d8:	00057ac0 	call	100057ac <__divsi3>
100036dc:	1021883a 	mov	r16,r2
100036e0:	e4b95417 	ldw	r18,-6832(fp)
100036e4:	8809883a 	mov	r4,r17
100036e8:	01400544 	movi	r5,21
100036ec:	000586c0 	call	1000586c <__mulsi3>
100036f0:	1023883a 	mov	r17,r2
100036f4:	9009883a 	mov	r4,r18
100036f8:	01405404 	movi	r5,336
100036fc:	000586c0 	call	1000586c <__mulsi3>
10003700:	8885883a 	add	r2,r17,r2
10003704:	1405883a 	add	r2,r2,r16
10003708:	1085883a 	add	r2,r2,r2
1000370c:	1085883a 	add	r2,r2,r2
10003710:	e0f92704 	addi	r3,fp,-7012
10003714:	1885883a 	add	r2,r3,r2
10003718:	10804604 	addi	r2,r2,280
1000371c:	10800017 	ldw	r2,0(r2)
10003720:	10001d1e 	bne	r2,zero,10003798 <main+0x3464>
10003724:	e0b94917 	ldw	r2,-6876(fp)
10003728:	10800284 	addi	r2,r2,10
1000372c:	1009883a 	mov	r4,r2
10003730:	01400784 	movi	r5,30
10003734:	00057ac0 	call	100057ac <__divsi3>
10003738:	1023883a 	mov	r17,r2
1000373c:	e0b94817 	ldw	r2,-6880(fp)
10003740:	108008c4 	addi	r2,r2,35
10003744:	1009883a 	mov	r4,r2
10003748:	01400784 	movi	r5,30
1000374c:	00057ac0 	call	100057ac <__divsi3>
10003750:	1021883a 	mov	r16,r2
10003754:	e4b95417 	ldw	r18,-6832(fp)
10003758:	8809883a 	mov	r4,r17
1000375c:	01400544 	movi	r5,21
10003760:	000586c0 	call	1000586c <__mulsi3>
10003764:	1023883a 	mov	r17,r2
10003768:	9009883a 	mov	r4,r18
1000376c:	01405404 	movi	r5,336
10003770:	000586c0 	call	1000586c <__mulsi3>
10003774:	8885883a 	add	r2,r17,r2
10003778:	1405883a 	add	r2,r2,r16
1000377c:	1085883a 	add	r2,r2,r2
10003780:	1085883a 	add	r2,r2,r2
10003784:	e0f92704 	addi	r3,fp,-7012
10003788:	1885883a 	add	r2,r3,r2
1000378c:	10804604 	addi	r2,r2,280
10003790:	10800017 	ldw	r2,0(r2)
10003794:	10000226 	beq	r2,zero,100037a0 <main+0x346c>
			monster3_1_left = True;
10003798:	00800044 	movi	r2,1
1000379c:	e0b94a15 	stw	r2,-6872(fp)
		}


		//bullet collision with monsters
		if(*BUL1_X+12 > monster1_1_x && *BUL1_X < monster1_1_x+30 && *BUL1_Y+12 > monster1_1_y && *BUL1_Y < monster1_1_y+30 && *MON1_EN == True && *BUL1_EN == 1){
100037a0:	00807c04 	movi	r2,496
100037a4:	10800017 	ldw	r2,0(r2)
100037a8:	10800304 	addi	r2,r2,12
100037ac:	e0f93c17 	ldw	r3,-6928(fp)
100037b0:	18801f0e 	bge	r3,r2,10003830 <main+0x34fc>
100037b4:	00807c04 	movi	r2,496
100037b8:	10c00017 	ldw	r3,0(r2)
100037bc:	e0b93c17 	ldw	r2,-6928(fp)
100037c0:	10800784 	addi	r2,r2,30
100037c4:	18801a0e 	bge	r3,r2,10003830 <main+0x34fc>
100037c8:	00807804 	movi	r2,480
100037cc:	10800017 	ldw	r2,0(r2)
100037d0:	10800304 	addi	r2,r2,12
100037d4:	e0f93d17 	ldw	r3,-6924(fp)
100037d8:	1880150e 	bge	r3,r2,10003830 <main+0x34fc>
100037dc:	00807804 	movi	r2,480
100037e0:	10c00017 	ldw	r3,0(r2)
100037e4:	e0b93d17 	ldw	r2,-6924(fp)
100037e8:	10800784 	addi	r2,r2,30
100037ec:	1880100e 	bge	r3,r2,10003830 <main+0x34fc>
100037f0:	0080c804 	movi	r2,800
100037f4:	10800003 	ldbu	r2,0(r2)
100037f8:	10803fcc 	andi	r2,r2,255
100037fc:	1080201c 	xori	r2,r2,128
10003800:	10bfe004 	addi	r2,r2,-128
10003804:	10800058 	cmpnei	r2,r2,1
10003808:	1000091e 	bne	r2,zero,10003830 <main+0x34fc>
1000380c:	00808004 	movi	r2,512
10003810:	10800017 	ldw	r2,0(r2)
10003814:	10800058 	cmpnei	r2,r2,1
10003818:	1000051e 	bne	r2,zero,10003830 <main+0x34fc>
			*BUL1_EN=0;
1000381c:	00808004 	movi	r2,512
10003820:	10000015 	stw	zero,0(r2)
			monster1_1_health-=1;
10003824:	e0b93f17 	ldw	r2,-6916(fp)
10003828:	10bfffc4 	addi	r2,r2,-1
1000382c:	e0b93f15 	stw	r2,-6916(fp)
		}
		if(*BUL2_X+12 > monster1_1_x && *BUL2_X < monster1_1_x+30 && *BUL2_Y+12 > monster1_1_y && *BUL2_Y < monster1_1_y+30 && *MON1_EN == True && *BUL2_EN == 1){
10003830:	00807004 	movi	r2,448
10003834:	10800017 	ldw	r2,0(r2)
10003838:	10800304 	addi	r2,r2,12
1000383c:	e0f93c17 	ldw	r3,-6928(fp)
10003840:	18801f0e 	bge	r3,r2,100038c0 <main+0x358c>
10003844:	00807004 	movi	r2,448
10003848:	10c00017 	ldw	r3,0(r2)
1000384c:	e0b93c17 	ldw	r2,-6928(fp)
10003850:	10800784 	addi	r2,r2,30
10003854:	18801a0e 	bge	r3,r2,100038c0 <main+0x358c>
10003858:	00806c04 	movi	r2,432
1000385c:	10800017 	ldw	r2,0(r2)
10003860:	10800304 	addi	r2,r2,12
10003864:	e0f93d17 	ldw	r3,-6924(fp)
10003868:	1880150e 	bge	r3,r2,100038c0 <main+0x358c>
1000386c:	00806c04 	movi	r2,432
10003870:	10c00017 	ldw	r3,0(r2)
10003874:	e0b93d17 	ldw	r2,-6924(fp)
10003878:	10800784 	addi	r2,r2,30
1000387c:	1880100e 	bge	r3,r2,100038c0 <main+0x358c>
10003880:	0080c804 	movi	r2,800
10003884:	10800003 	ldbu	r2,0(r2)
10003888:	10803fcc 	andi	r2,r2,255
1000388c:	1080201c 	xori	r2,r2,128
10003890:	10bfe004 	addi	r2,r2,-128
10003894:	10800058 	cmpnei	r2,r2,1
10003898:	1000091e 	bne	r2,zero,100038c0 <main+0x358c>
1000389c:	00807404 	movi	r2,464
100038a0:	10800017 	ldw	r2,0(r2)
100038a4:	10800058 	cmpnei	r2,r2,1
100038a8:	1000051e 	bne	r2,zero,100038c0 <main+0x358c>
			*BUL2_EN=0;
100038ac:	00807404 	movi	r2,464
100038b0:	10000015 	stw	zero,0(r2)
			monster1_1_health-=1;
100038b4:	e0b93f17 	ldw	r2,-6916(fp)
100038b8:	10bfffc4 	addi	r2,r2,-1
100038bc:	e0b93f15 	stw	r2,-6916(fp)
		}
		if(*BUL3_X+12 > monster1_1_x && *BUL3_X < monster1_1_x+30 && *BUL3_Y+12 > monster1_1_y && *BUL3_Y < monster1_1_y+30 && *MON1_EN == True && *BUL3_EN == 1){
100038c0:	00806404 	movi	r2,400
100038c4:	10800017 	ldw	r2,0(r2)
100038c8:	10800304 	addi	r2,r2,12
100038cc:	e0f93c17 	ldw	r3,-6928(fp)
100038d0:	18801f0e 	bge	r3,r2,10003950 <main+0x361c>
100038d4:	00806404 	movi	r2,400
100038d8:	10c00017 	ldw	r3,0(r2)
100038dc:	e0b93c17 	ldw	r2,-6928(fp)
100038e0:	10800784 	addi	r2,r2,30
100038e4:	18801a0e 	bge	r3,r2,10003950 <main+0x361c>
100038e8:	00806004 	movi	r2,384
100038ec:	10800017 	ldw	r2,0(r2)
100038f0:	10800304 	addi	r2,r2,12
100038f4:	e0f93d17 	ldw	r3,-6924(fp)
100038f8:	1880150e 	bge	r3,r2,10003950 <main+0x361c>
100038fc:	00806004 	movi	r2,384
10003900:	10c00017 	ldw	r3,0(r2)
10003904:	e0b93d17 	ldw	r2,-6924(fp)
10003908:	10800784 	addi	r2,r2,30
1000390c:	1880100e 	bge	r3,r2,10003950 <main+0x361c>
10003910:	0080c804 	movi	r2,800
10003914:	10800003 	ldbu	r2,0(r2)
10003918:	10803fcc 	andi	r2,r2,255
1000391c:	1080201c 	xori	r2,r2,128
10003920:	10bfe004 	addi	r2,r2,-128
10003924:	10800058 	cmpnei	r2,r2,1
10003928:	1000091e 	bne	r2,zero,10003950 <main+0x361c>
1000392c:	00806804 	movi	r2,416
10003930:	10800017 	ldw	r2,0(r2)
10003934:	10800058 	cmpnei	r2,r2,1
10003938:	1000051e 	bne	r2,zero,10003950 <main+0x361c>
			*BUL3_EN=0;
1000393c:	00806804 	movi	r2,416
10003940:	10000015 	stw	zero,0(r2)
			monster1_1_health-=1;
10003944:	e0b93f17 	ldw	r2,-6916(fp)
10003948:	10bfffc4 	addi	r2,r2,-1
1000394c:	e0b93f15 	stw	r2,-6916(fp)
		}
		if(*BUL1_X+12 > monster2_1_x && *BUL1_X < monster2_1_x+30 && *BUL1_Y+12 > monster2_1_y && *BUL1_Y < monster2_1_y+30 && *MON2_EN == True && *BUL1_EN == 1){
10003950:	00807c04 	movi	r2,496
10003954:	10800017 	ldw	r2,0(r2)
10003958:	10800304 	addi	r2,r2,12
1000395c:	e0f94017 	ldw	r3,-6912(fp)
10003960:	18801f0e 	bge	r3,r2,100039e0 <main+0x36ac>
10003964:	00807c04 	movi	r2,496
10003968:	10c00017 	ldw	r3,0(r2)
1000396c:	e0b94017 	ldw	r2,-6912(fp)
10003970:	10800784 	addi	r2,r2,30
10003974:	18801a0e 	bge	r3,r2,100039e0 <main+0x36ac>
10003978:	00807804 	movi	r2,480
1000397c:	10800017 	ldw	r2,0(r2)
10003980:	10800304 	addi	r2,r2,12
10003984:	e0f94117 	ldw	r3,-6908(fp)
10003988:	1880150e 	bge	r3,r2,100039e0 <main+0x36ac>
1000398c:	00807804 	movi	r2,480
10003990:	10c00017 	ldw	r3,0(r2)
10003994:	e0b94117 	ldw	r2,-6908(fp)
10003998:	10800784 	addi	r2,r2,30
1000399c:	1880100e 	bge	r3,r2,100039e0 <main+0x36ac>
100039a0:	0080bc04 	movi	r2,752
100039a4:	10800003 	ldbu	r2,0(r2)
100039a8:	10803fcc 	andi	r2,r2,255
100039ac:	1080201c 	xori	r2,r2,128
100039b0:	10bfe004 	addi	r2,r2,-128
100039b4:	10800058 	cmpnei	r2,r2,1
100039b8:	1000091e 	bne	r2,zero,100039e0 <main+0x36ac>
100039bc:	00808004 	movi	r2,512
100039c0:	10800017 	ldw	r2,0(r2)
100039c4:	10800058 	cmpnei	r2,r2,1
100039c8:	1000051e 	bne	r2,zero,100039e0 <main+0x36ac>
			*BUL1_EN=0;
100039cc:	00808004 	movi	r2,512
100039d0:	10000015 	stw	zero,0(r2)
			monster2_1_health-=1;
100039d4:	e0b94717 	ldw	r2,-6884(fp)
100039d8:	10bfffc4 	addi	r2,r2,-1
100039dc:	e0b94715 	stw	r2,-6884(fp)
		}
		if(*BUL2_X+12 > monster2_1_x && *BUL2_X < monster2_1_x+30 && *BUL2_Y+12 > monster2_1_y && *BUL2_Y < monster2_1_y+30 && *MON2_EN == True && *BUL2_EN == 1){
100039e0:	00807004 	movi	r2,448
100039e4:	10800017 	ldw	r2,0(r2)
100039e8:	10800304 	addi	r2,r2,12
100039ec:	e0f94017 	ldw	r3,-6912(fp)
100039f0:	18801f0e 	bge	r3,r2,10003a70 <main+0x373c>
100039f4:	00807004 	movi	r2,448
100039f8:	10c00017 	ldw	r3,0(r2)
100039fc:	e0b94017 	ldw	r2,-6912(fp)
10003a00:	10800784 	addi	r2,r2,30
10003a04:	18801a0e 	bge	r3,r2,10003a70 <main+0x373c>
10003a08:	00806c04 	movi	r2,432
10003a0c:	10800017 	ldw	r2,0(r2)
10003a10:	10800304 	addi	r2,r2,12
10003a14:	e0f94117 	ldw	r3,-6908(fp)
10003a18:	1880150e 	bge	r3,r2,10003a70 <main+0x373c>
10003a1c:	00806c04 	movi	r2,432
10003a20:	10c00017 	ldw	r3,0(r2)
10003a24:	e0b94117 	ldw	r2,-6908(fp)
10003a28:	10800784 	addi	r2,r2,30
10003a2c:	1880100e 	bge	r3,r2,10003a70 <main+0x373c>
10003a30:	0080bc04 	movi	r2,752
10003a34:	10800003 	ldbu	r2,0(r2)
10003a38:	10803fcc 	andi	r2,r2,255
10003a3c:	1080201c 	xori	r2,r2,128
10003a40:	10bfe004 	addi	r2,r2,-128
10003a44:	10800058 	cmpnei	r2,r2,1
10003a48:	1000091e 	bne	r2,zero,10003a70 <main+0x373c>
10003a4c:	00807404 	movi	r2,464
10003a50:	10800017 	ldw	r2,0(r2)
10003a54:	10800058 	cmpnei	r2,r2,1
10003a58:	1000051e 	bne	r2,zero,10003a70 <main+0x373c>
			*BUL2_EN=0;
10003a5c:	00807404 	movi	r2,464
10003a60:	10000015 	stw	zero,0(r2)
			monster2_1_health-=1;
10003a64:	e0b94717 	ldw	r2,-6884(fp)
10003a68:	10bfffc4 	addi	r2,r2,-1
10003a6c:	e0b94715 	stw	r2,-6884(fp)
		}
		if(*BUL3_X+12 > monster2_1_x && *BUL3_X < monster2_1_x+30 && *BUL3_Y+12 > monster2_1_y && *BUL3_Y < monster2_1_y+30 && *MON2_EN == True && *BUL3_EN == 1){
10003a70:	00806404 	movi	r2,400
10003a74:	10800017 	ldw	r2,0(r2)
10003a78:	10800304 	addi	r2,r2,12
10003a7c:	e0f94017 	ldw	r3,-6912(fp)
10003a80:	18801f0e 	bge	r3,r2,10003b00 <main+0x37cc>
10003a84:	00806404 	movi	r2,400
10003a88:	10c00017 	ldw	r3,0(r2)
10003a8c:	e0b94017 	ldw	r2,-6912(fp)
10003a90:	10800784 	addi	r2,r2,30
10003a94:	18801a0e 	bge	r3,r2,10003b00 <main+0x37cc>
10003a98:	00806004 	movi	r2,384
10003a9c:	10800017 	ldw	r2,0(r2)
10003aa0:	10800304 	addi	r2,r2,12
10003aa4:	e0f94117 	ldw	r3,-6908(fp)
10003aa8:	1880150e 	bge	r3,r2,10003b00 <main+0x37cc>
10003aac:	00806004 	movi	r2,384
10003ab0:	10c00017 	ldw	r3,0(r2)
10003ab4:	e0b94117 	ldw	r2,-6908(fp)
10003ab8:	10800784 	addi	r2,r2,30
10003abc:	1880100e 	bge	r3,r2,10003b00 <main+0x37cc>
10003ac0:	0080bc04 	movi	r2,752
10003ac4:	10800003 	ldbu	r2,0(r2)
10003ac8:	10803fcc 	andi	r2,r2,255
10003acc:	1080201c 	xori	r2,r2,128
10003ad0:	10bfe004 	addi	r2,r2,-128
10003ad4:	10800058 	cmpnei	r2,r2,1
10003ad8:	1000091e 	bne	r2,zero,10003b00 <main+0x37cc>
10003adc:	00806804 	movi	r2,416
10003ae0:	10800017 	ldw	r2,0(r2)
10003ae4:	10800058 	cmpnei	r2,r2,1
10003ae8:	1000051e 	bne	r2,zero,10003b00 <main+0x37cc>
			*BUL3_EN=0;
10003aec:	00806804 	movi	r2,416
10003af0:	10000015 	stw	zero,0(r2)
			monster2_1_health-=1;
10003af4:	e0b94717 	ldw	r2,-6884(fp)
10003af8:	10bfffc4 	addi	r2,r2,-1
10003afc:	e0b94715 	stw	r2,-6884(fp)
		}
		if(*BUL1_X+12 > monster3_1_x && *BUL1_X < monster3_1_x+30 && *BUL1_Y+12 > monster3_1_y && *BUL1_Y < monster3_1_y+10 && *MON3_EN == True && *BUL1_EN == 1){
10003b00:	00807c04 	movi	r2,496
10003b04:	10800017 	ldw	r2,0(r2)
10003b08:	10800304 	addi	r2,r2,12
10003b0c:	e0f94817 	ldw	r3,-6880(fp)
10003b10:	18801c0e 	bge	r3,r2,10003b84 <main+0x3850>
10003b14:	00807c04 	movi	r2,496
10003b18:	10c00017 	ldw	r3,0(r2)
10003b1c:	e0b94817 	ldw	r2,-6880(fp)
10003b20:	10800784 	addi	r2,r2,30
10003b24:	1880170e 	bge	r3,r2,10003b84 <main+0x3850>
10003b28:	00807804 	movi	r2,480
10003b2c:	10800017 	ldw	r2,0(r2)
10003b30:	10800304 	addi	r2,r2,12
10003b34:	e0f94917 	ldw	r3,-6876(fp)
10003b38:	1880120e 	bge	r3,r2,10003b84 <main+0x3850>
10003b3c:	00807804 	movi	r2,480
10003b40:	10c00017 	ldw	r3,0(r2)
10003b44:	e0b94917 	ldw	r2,-6876(fp)
10003b48:	10800284 	addi	r2,r2,10
10003b4c:	18800d0e 	bge	r3,r2,10003b84 <main+0x3850>
10003b50:	0080b004 	movi	r2,704
10003b54:	10800003 	ldbu	r2,0(r2)
10003b58:	10803fcc 	andi	r2,r2,255
10003b5c:	1080201c 	xori	r2,r2,128
10003b60:	10bfe004 	addi	r2,r2,-128
10003b64:	10800058 	cmpnei	r2,r2,1
10003b68:	1000061e 	bne	r2,zero,10003b84 <main+0x3850>
10003b6c:	00808004 	movi	r2,512
10003b70:	10800017 	ldw	r2,0(r2)
10003b74:	10800058 	cmpnei	r2,r2,1
10003b78:	1000021e 	bne	r2,zero,10003b84 <main+0x3850>
			*BUL1_EN=0;
10003b7c:	00808004 	movi	r2,512
10003b80:	10000015 	stw	zero,0(r2)
		}
		if(*BUL2_X+12 > monster3_1_x && *BUL2_X < monster3_1_x+30 && *BUL2_Y+12 > monster3_1_y && *BUL2_Y < monster3_1_y+10 && *MON3_EN == True && *BUL2_EN == 1){
10003b84:	00807004 	movi	r2,448
10003b88:	10800017 	ldw	r2,0(r2)
10003b8c:	10800304 	addi	r2,r2,12
10003b90:	e0f94817 	ldw	r3,-6880(fp)
10003b94:	18801c0e 	bge	r3,r2,10003c08 <main+0x38d4>
10003b98:	00807004 	movi	r2,448
10003b9c:	10c00017 	ldw	r3,0(r2)
10003ba0:	e0b94817 	ldw	r2,-6880(fp)
10003ba4:	10800784 	addi	r2,r2,30
10003ba8:	1880170e 	bge	r3,r2,10003c08 <main+0x38d4>
10003bac:	00806c04 	movi	r2,432
10003bb0:	10800017 	ldw	r2,0(r2)
10003bb4:	10800304 	addi	r2,r2,12
10003bb8:	e0f94917 	ldw	r3,-6876(fp)
10003bbc:	1880120e 	bge	r3,r2,10003c08 <main+0x38d4>
10003bc0:	00806c04 	movi	r2,432
10003bc4:	10c00017 	ldw	r3,0(r2)
10003bc8:	e0b94917 	ldw	r2,-6876(fp)
10003bcc:	10800284 	addi	r2,r2,10
10003bd0:	18800d0e 	bge	r3,r2,10003c08 <main+0x38d4>
10003bd4:	0080b004 	movi	r2,704
10003bd8:	10800003 	ldbu	r2,0(r2)
10003bdc:	10803fcc 	andi	r2,r2,255
10003be0:	1080201c 	xori	r2,r2,128
10003be4:	10bfe004 	addi	r2,r2,-128
10003be8:	10800058 	cmpnei	r2,r2,1
10003bec:	1000061e 	bne	r2,zero,10003c08 <main+0x38d4>
10003bf0:	00807404 	movi	r2,464
10003bf4:	10800017 	ldw	r2,0(r2)
10003bf8:	10800058 	cmpnei	r2,r2,1
10003bfc:	1000021e 	bne	r2,zero,10003c08 <main+0x38d4>
			*BUL2_EN=0;
10003c00:	00807404 	movi	r2,464
10003c04:	10000015 	stw	zero,0(r2)
		}
		if(*BUL3_X+12 > monster3_1_x && *BUL3_X < monster3_1_x+30 && *BUL3_Y+12 > monster3_1_y && *BUL3_Y < monster3_1_y+10 && *MON3_EN == True && *BUL3_EN == 1){
10003c08:	00806404 	movi	r2,400
10003c0c:	10800017 	ldw	r2,0(r2)
10003c10:	10800304 	addi	r2,r2,12
10003c14:	e0f94817 	ldw	r3,-6880(fp)
10003c18:	18801c0e 	bge	r3,r2,10003c8c <main+0x3958>
10003c1c:	00806404 	movi	r2,400
10003c20:	10c00017 	ldw	r3,0(r2)
10003c24:	e0b94817 	ldw	r2,-6880(fp)
10003c28:	10800784 	addi	r2,r2,30
10003c2c:	1880170e 	bge	r3,r2,10003c8c <main+0x3958>
10003c30:	00806004 	movi	r2,384
10003c34:	10800017 	ldw	r2,0(r2)
10003c38:	10800304 	addi	r2,r2,12
10003c3c:	e0f94917 	ldw	r3,-6876(fp)
10003c40:	1880120e 	bge	r3,r2,10003c8c <main+0x3958>
10003c44:	00806004 	movi	r2,384
10003c48:	10c00017 	ldw	r3,0(r2)
10003c4c:	e0b94917 	ldw	r2,-6876(fp)
10003c50:	10800284 	addi	r2,r2,10
10003c54:	18800d0e 	bge	r3,r2,10003c8c <main+0x3958>
10003c58:	0080b004 	movi	r2,704
10003c5c:	10800003 	ldbu	r2,0(r2)
10003c60:	10803fcc 	andi	r2,r2,255
10003c64:	1080201c 	xori	r2,r2,128
10003c68:	10bfe004 	addi	r2,r2,-128
10003c6c:	10800058 	cmpnei	r2,r2,1
10003c70:	1000061e 	bne	r2,zero,10003c8c <main+0x3958>
10003c74:	00806804 	movi	r2,416
10003c78:	10800017 	ldw	r2,0(r2)
10003c7c:	10800058 	cmpnei	r2,r2,1
10003c80:	1000021e 	bne	r2,zero,10003c8c <main+0x3958>
			*BUL3_EN=0;
10003c84:	00806804 	movi	r2,416
10003c88:	10000015 	stw	zero,0(r2)
		}

		if(monster1_1_health == 0){
10003c8c:	e0b93f17 	ldw	r2,-6916(fp)
10003c90:	10000d1e 	bne	r2,zero,10003cc8 <main+0x3994>
			*MON1_EN = 0;
10003c94:	0080c804 	movi	r2,800
10003c98:	10000005 	stb	zero,0(r2)
			*EXP1_X = monster1_1_x-10;
10003c9c:	0080a004 	movi	r2,640
10003ca0:	e0f93c17 	ldw	r3,-6928(fp)
10003ca4:	18fffd84 	addi	r3,r3,-10
10003ca8:	10c00015 	stw	r3,0(r2)
			*EXP1_Y = monster1_1_y-10;
10003cac:	00809c04 	movi	r2,624
10003cb0:	e0f93d17 	ldw	r3,-6924(fp)
10003cb4:	18fffd84 	addi	r3,r3,-10
10003cb8:	10c00015 	stw	r3,0(r2)
			*EXP1_EN = 1;
10003cbc:	0080a404 	movi	r2,656
10003cc0:	00c00044 	movi	r3,1
10003cc4:	10c00015 	stw	r3,0(r2)
		}
		if(monster2_1_health == 0){
10003cc8:	e0b94717 	ldw	r2,-6884(fp)
10003ccc:	10000b1e 	bne	r2,zero,10003cfc <main+0x39c8>
			*MON2_EN = 0;
10003cd0:	0080bc04 	movi	r2,752
10003cd4:	10000005 	stb	zero,0(r2)
			*EXP2_X = monster2_1_x;
10003cd8:	00809404 	movi	r2,592
10003cdc:	e0f94017 	ldw	r3,-6912(fp)
10003ce0:	10c00015 	stw	r3,0(r2)
			*EXP2_Y = monster2_1_y;
10003ce4:	00809004 	movi	r2,576
10003ce8:	e0f94117 	ldw	r3,-6908(fp)
10003cec:	10c00015 	stw	r3,0(r2)
			*EXP2_EN = 1;
10003cf0:	00809804 	movi	r2,608
10003cf4:	00c00044 	movi	r3,1
10003cf8:	10c00015 	stw	r3,0(r2)
		}

		//Samus Collision with monster
		if(*SAMUS_X+45 > monster3_1_x && *SAMUS_X < monster3_1_x+30 && ((*SAMUS_Y+70 > monster3_1_y && *SAMUS_Y < monster3_1_y+10 && grounded == True) || (*SAMUS_Y+45 > monster3_1_y && *SAMUS_Y < monster3_1_y+10 && grounded == False)) && *MON3_EN == True && *SAMUS_EN == 1 && samus_inv_counter_start == False){
10003cfc:	0080d804 	movi	r2,864
10003d00:	10800017 	ldw	r2,0(r2)
10003d04:	10800b44 	addi	r2,r2,45
10003d08:	e0f94817 	ldw	r3,-6880(fp)
10003d0c:	1880370e 	bge	r3,r2,10003dec <main+0x3ab8>
10003d10:	0080d804 	movi	r2,864
10003d14:	10c00017 	ldw	r3,0(r2)
10003d18:	e0b94817 	ldw	r2,-6880(fp)
10003d1c:	10800784 	addi	r2,r2,30
10003d20:	1880320e 	bge	r3,r2,10003dec <main+0x3ab8>
10003d24:	0080d404 	movi	r2,848
10003d28:	10800017 	ldw	r2,0(r2)
10003d2c:	10801184 	addi	r2,r2,70
10003d30:	e0f94917 	ldw	r3,-6876(fp)
10003d34:	1880080e 	bge	r3,r2,10003d58 <main+0x3a24>
10003d38:	0080d404 	movi	r2,848
10003d3c:	10c00017 	ldw	r3,0(r2)
10003d40:	e0b94917 	ldw	r2,-6876(fp)
10003d44:	10800284 	addi	r2,r2,10
10003d48:	1880030e 	bge	r3,r2,10003d58 <main+0x3a24>
10003d4c:	e0b92c17 	ldw	r2,-6992(fp)
10003d50:	10800060 	cmpeqi	r2,r2,1
10003d54:	10000c1e 	bne	r2,zero,10003d88 <main+0x3a54>
10003d58:	0080d404 	movi	r2,848
10003d5c:	10800017 	ldw	r2,0(r2)
10003d60:	10800b44 	addi	r2,r2,45
10003d64:	e0f94917 	ldw	r3,-6876(fp)
10003d68:	1880200e 	bge	r3,r2,10003dec <main+0x3ab8>
10003d6c:	0080d404 	movi	r2,848
10003d70:	10c00017 	ldw	r3,0(r2)
10003d74:	e0b94917 	ldw	r2,-6876(fp)
10003d78:	10800284 	addi	r2,r2,10
10003d7c:	18801b0e 	bge	r3,r2,10003dec <main+0x3ab8>
10003d80:	e0b92c17 	ldw	r2,-6992(fp)
10003d84:	1000191e 	bne	r2,zero,10003dec <main+0x3ab8>
10003d88:	0080b004 	movi	r2,704
10003d8c:	10800003 	ldbu	r2,0(r2)
10003d90:	10803fcc 	andi	r2,r2,255
10003d94:	1080201c 	xori	r2,r2,128
10003d98:	10bfe004 	addi	r2,r2,-128
10003d9c:	10800058 	cmpnei	r2,r2,1
10003da0:	1000121e 	bne	r2,zero,10003dec <main+0x3ab8>
10003da4:	0080dc04 	movi	r2,880
10003da8:	10800003 	ldbu	r2,0(r2)
10003dac:	10803fcc 	andi	r2,r2,255
10003db0:	1080201c 	xori	r2,r2,128
10003db4:	10bfe004 	addi	r2,r2,-128
10003db8:	10800058 	cmpnei	r2,r2,1
10003dbc:	10000b1e 	bne	r2,zero,10003dec <main+0x3ab8>
10003dc0:	e0b92917 	ldw	r2,-7004(fp)
10003dc4:	1000091e 	bne	r2,zero,10003dec <main+0x3ab8>
			samus_inv_counter_start = True;
10003dc8:	00800044 	movi	r2,1
10003dcc:	e0b92915 	stw	r2,-7004(fp)
			y_set = False;
10003dd0:	e0392f15 	stw	zero,-6980(fp)
			*HEALTH = *HEALTH-1;
10003dd4:	00805c04 	movi	r2,368
10003dd8:	00c05c04 	movi	r3,368
10003ddc:	18c00017 	ldw	r3,0(r3)
10003de0:	18ffffc4 	addi	r3,r3,-1
10003de4:	10c00015 	stw	r3,0(r2)
10003de8:	00007706 	br	10003fc8 <main+0x3c94>
		}
		else if(*SAMUS_X+45 > monster2_1_x && *SAMUS_X < monster2_1_x+45 && ((*SAMUS_Y+70 > monster2_1_y && *SAMUS_Y < monster2_1_y+33 && grounded == True) || (*SAMUS_Y+45 > monster2_1_y && *SAMUS_Y < monster2_1_y+33 && grounded == False)) && *MON2_EN == True && *SAMUS_EN == 1 && samus_inv_counter_start == False){
10003dec:	0080d804 	movi	r2,864
10003df0:	10800017 	ldw	r2,0(r2)
10003df4:	10800b44 	addi	r2,r2,45
10003df8:	e0f94017 	ldw	r3,-6912(fp)
10003dfc:	1880370e 	bge	r3,r2,10003edc <main+0x3ba8>
10003e00:	0080d804 	movi	r2,864
10003e04:	10c00017 	ldw	r3,0(r2)
10003e08:	e0b94017 	ldw	r2,-6912(fp)
10003e0c:	10800b44 	addi	r2,r2,45
10003e10:	1880320e 	bge	r3,r2,10003edc <main+0x3ba8>
10003e14:	0080d404 	movi	r2,848
10003e18:	10800017 	ldw	r2,0(r2)
10003e1c:	10801184 	addi	r2,r2,70
10003e20:	e0f94117 	ldw	r3,-6908(fp)
10003e24:	1880080e 	bge	r3,r2,10003e48 <main+0x3b14>
10003e28:	0080d404 	movi	r2,848
10003e2c:	10c00017 	ldw	r3,0(r2)
10003e30:	e0b94117 	ldw	r2,-6908(fp)
10003e34:	10800844 	addi	r2,r2,33
10003e38:	1880030e 	bge	r3,r2,10003e48 <main+0x3b14>
10003e3c:	e0b92c17 	ldw	r2,-6992(fp)
10003e40:	10800060 	cmpeqi	r2,r2,1
10003e44:	10000c1e 	bne	r2,zero,10003e78 <main+0x3b44>
10003e48:	0080d404 	movi	r2,848
10003e4c:	10800017 	ldw	r2,0(r2)
10003e50:	10800b44 	addi	r2,r2,45
10003e54:	e0f94117 	ldw	r3,-6908(fp)
10003e58:	1880200e 	bge	r3,r2,10003edc <main+0x3ba8>
10003e5c:	0080d404 	movi	r2,848
10003e60:	10c00017 	ldw	r3,0(r2)
10003e64:	e0b94117 	ldw	r2,-6908(fp)
10003e68:	10800844 	addi	r2,r2,33
10003e6c:	18801b0e 	bge	r3,r2,10003edc <main+0x3ba8>
10003e70:	e0b92c17 	ldw	r2,-6992(fp)
10003e74:	1000191e 	bne	r2,zero,10003edc <main+0x3ba8>
10003e78:	0080bc04 	movi	r2,752
10003e7c:	10800003 	ldbu	r2,0(r2)
10003e80:	10803fcc 	andi	r2,r2,255
10003e84:	1080201c 	xori	r2,r2,128
10003e88:	10bfe004 	addi	r2,r2,-128
10003e8c:	10800058 	cmpnei	r2,r2,1
10003e90:	1000121e 	bne	r2,zero,10003edc <main+0x3ba8>
10003e94:	0080dc04 	movi	r2,880
10003e98:	10800003 	ldbu	r2,0(r2)
10003e9c:	10803fcc 	andi	r2,r2,255
10003ea0:	1080201c 	xori	r2,r2,128
10003ea4:	10bfe004 	addi	r2,r2,-128
10003ea8:	10800058 	cmpnei	r2,r2,1
10003eac:	10000b1e 	bne	r2,zero,10003edc <main+0x3ba8>
10003eb0:	e0b92917 	ldw	r2,-7004(fp)
10003eb4:	1000091e 	bne	r2,zero,10003edc <main+0x3ba8>
			samus_inv_counter_start = True;
10003eb8:	00800044 	movi	r2,1
10003ebc:	e0b92915 	stw	r2,-7004(fp)
			y_set = False;
10003ec0:	e0392f15 	stw	zero,-6980(fp)
			*HEALTH = *HEALTH-1;
10003ec4:	00805c04 	movi	r2,368
10003ec8:	00c05c04 	movi	r3,368
10003ecc:	18c00017 	ldw	r3,0(r3)
10003ed0:	18ffffc4 	addi	r3,r3,-1
10003ed4:	10c00015 	stw	r3,0(r2)
10003ed8:	00003b06 	br	10003fc8 <main+0x3c94>
		}
		else if(*SAMUS_X+45 > monster1_1_x && *SAMUS_X < monster1_1_x+30 && ((*SAMUS_Y+70 > monster1_1_y && *SAMUS_Y < monster1_1_y+30 && grounded == True) || (*SAMUS_Y+45 > monster1_1_y && *SAMUS_Y < monster1_1_y+30 && grounded == False)) && *MON1_EN == True && *SAMUS_EN == 1 && samus_inv_counter_start == False){
10003edc:	0080d804 	movi	r2,864
10003ee0:	10800017 	ldw	r2,0(r2)
10003ee4:	10800b44 	addi	r2,r2,45
10003ee8:	e0f93c17 	ldw	r3,-6928(fp)
10003eec:	1880360e 	bge	r3,r2,10003fc8 <main+0x3c94>
10003ef0:	0080d804 	movi	r2,864
10003ef4:	10c00017 	ldw	r3,0(r2)
10003ef8:	e0b93c17 	ldw	r2,-6928(fp)
10003efc:	10800784 	addi	r2,r2,30
10003f00:	1880310e 	bge	r3,r2,10003fc8 <main+0x3c94>
10003f04:	0080d404 	movi	r2,848
10003f08:	10800017 	ldw	r2,0(r2)
10003f0c:	10801184 	addi	r2,r2,70
10003f10:	e0f93d17 	ldw	r3,-6924(fp)
10003f14:	1880080e 	bge	r3,r2,10003f38 <main+0x3c04>
10003f18:	0080d404 	movi	r2,848
10003f1c:	10c00017 	ldw	r3,0(r2)
10003f20:	e0b93d17 	ldw	r2,-6924(fp)
10003f24:	10800784 	addi	r2,r2,30
10003f28:	1880030e 	bge	r3,r2,10003f38 <main+0x3c04>
10003f2c:	e0b92c17 	ldw	r2,-6992(fp)
10003f30:	10800060 	cmpeqi	r2,r2,1
10003f34:	10000c1e 	bne	r2,zero,10003f68 <main+0x3c34>
10003f38:	0080d404 	movi	r2,848
10003f3c:	10800017 	ldw	r2,0(r2)
10003f40:	10800b44 	addi	r2,r2,45
10003f44:	e0f93d17 	ldw	r3,-6924(fp)
10003f48:	18801f0e 	bge	r3,r2,10003fc8 <main+0x3c94>
10003f4c:	0080d404 	movi	r2,848
10003f50:	10c00017 	ldw	r3,0(r2)
10003f54:	e0b93d17 	ldw	r2,-6924(fp)
10003f58:	10800784 	addi	r2,r2,30
10003f5c:	18801a0e 	bge	r3,r2,10003fc8 <main+0x3c94>
10003f60:	e0b92c17 	ldw	r2,-6992(fp)
10003f64:	1000181e 	bne	r2,zero,10003fc8 <main+0x3c94>
10003f68:	0080c804 	movi	r2,800
10003f6c:	10800003 	ldbu	r2,0(r2)
10003f70:	10803fcc 	andi	r2,r2,255
10003f74:	1080201c 	xori	r2,r2,128
10003f78:	10bfe004 	addi	r2,r2,-128
10003f7c:	10800058 	cmpnei	r2,r2,1
10003f80:	1000111e 	bne	r2,zero,10003fc8 <main+0x3c94>
10003f84:	0080dc04 	movi	r2,880
10003f88:	10800003 	ldbu	r2,0(r2)
10003f8c:	10803fcc 	andi	r2,r2,255
10003f90:	1080201c 	xori	r2,r2,128
10003f94:	10bfe004 	addi	r2,r2,-128
10003f98:	10800058 	cmpnei	r2,r2,1
10003f9c:	10000a1e 	bne	r2,zero,10003fc8 <main+0x3c94>
10003fa0:	e0b92917 	ldw	r2,-7004(fp)
10003fa4:	1000081e 	bne	r2,zero,10003fc8 <main+0x3c94>
			samus_inv_counter_start = True;
10003fa8:	00800044 	movi	r2,1
10003fac:	e0b92915 	stw	r2,-7004(fp)
			y_set = False;
10003fb0:	e0392f15 	stw	zero,-6980(fp)
			*HEALTH = *HEALTH-1;
10003fb4:	00805c04 	movi	r2,368
10003fb8:	00c05c04 	movi	r3,368
10003fbc:	18c00017 	ldw	r3,0(r3)
10003fc0:	18ffffc4 	addi	r3,r3,-1
10003fc4:	10c00015 	stw	r3,0(r2)
		}

		if(samus_inv_counter_start == True){
10003fc8:	e0b92917 	ldw	r2,-7004(fp)
10003fcc:	10800058 	cmpnei	r2,r2,1
10003fd0:	10017f1e 	bne	r2,zero,100045d0 <main+0x429c>
			if(*SAMUS_EN == False){
10003fd4:	0080dc04 	movi	r2,880
10003fd8:	10800003 	ldbu	r2,0(r2)
10003fdc:	10803fcc 	andi	r2,r2,255
10003fe0:	1080201c 	xori	r2,r2,128
10003fe4:	10bfe004 	addi	r2,r2,-128
10003fe8:	1000041e 	bne	r2,zero,10003ffc <main+0x3cc8>
				*SAMUS_EN = True;
10003fec:	0080dc04 	movi	r2,880
10003ff0:	00c00044 	movi	r3,1
10003ff4:	10c00005 	stb	r3,0(r2)
10003ff8:	00000206 	br	10004004 <main+0x3cd0>
			}
			else{
				*SAMUS_EN = False;
10003ffc:	0080dc04 	movi	r2,880
10004000:	10000005 	stb	zero,0(r2)
			}
			if(samus_inv_counter < 15){
10004004:	e0b92817 	ldw	r2,-7008(fp)
10004008:	108003c8 	cmpgei	r2,r2,15
1000400c:	1001621e 	bne	r2,zero,10004598 <main+0x4264>
				if(scene[sceneNum][(*SAMUS_Y+15)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+25)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+50)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+70)/30][(*SAMUS_X-3)/30]==0 && *SAMUS_DIR == 0){
10004010:	0080d404 	movi	r2,848
10004014:	10800017 	ldw	r2,0(r2)
10004018:	108003c4 	addi	r2,r2,15
1000401c:	1009883a 	mov	r4,r2
10004020:	01400784 	movi	r5,30
10004024:	00057ac0 	call	100057ac <__divsi3>
10004028:	1023883a 	mov	r17,r2
1000402c:	0080d804 	movi	r2,864
10004030:	10800017 	ldw	r2,0(r2)
10004034:	10bfff44 	addi	r2,r2,-3
10004038:	1009883a 	mov	r4,r2
1000403c:	01400784 	movi	r5,30
10004040:	00057ac0 	call	100057ac <__divsi3>
10004044:	1021883a 	mov	r16,r2
10004048:	e4b95417 	ldw	r18,-6832(fp)
1000404c:	8809883a 	mov	r4,r17
10004050:	01400544 	movi	r5,21
10004054:	000586c0 	call	1000586c <__mulsi3>
10004058:	1023883a 	mov	r17,r2
1000405c:	9009883a 	mov	r4,r18
10004060:	01405404 	movi	r5,336
10004064:	000586c0 	call	1000586c <__mulsi3>
10004068:	8885883a 	add	r2,r17,r2
1000406c:	1405883a 	add	r2,r2,r16
10004070:	1085883a 	add	r2,r2,r2
10004074:	1085883a 	add	r2,r2,r2
10004078:	e0f92704 	addi	r3,fp,-7012
1000407c:	1885883a 	add	r2,r3,r2
10004080:	10804604 	addi	r2,r2,280
10004084:	10800017 	ldw	r2,0(r2)
10004088:	10006f1e 	bne	r2,zero,10004248 <main+0x3f14>
1000408c:	0080d404 	movi	r2,848
10004090:	10800017 	ldw	r2,0(r2)
10004094:	10800644 	addi	r2,r2,25
10004098:	1009883a 	mov	r4,r2
1000409c:	01400784 	movi	r5,30
100040a0:	00057ac0 	call	100057ac <__divsi3>
100040a4:	1023883a 	mov	r17,r2
100040a8:	0080d804 	movi	r2,864
100040ac:	10800017 	ldw	r2,0(r2)
100040b0:	10bfff44 	addi	r2,r2,-3
100040b4:	1009883a 	mov	r4,r2
100040b8:	01400784 	movi	r5,30
100040bc:	00057ac0 	call	100057ac <__divsi3>
100040c0:	1021883a 	mov	r16,r2
100040c4:	e4b95417 	ldw	r18,-6832(fp)
100040c8:	8809883a 	mov	r4,r17
100040cc:	01400544 	movi	r5,21
100040d0:	000586c0 	call	1000586c <__mulsi3>
100040d4:	1023883a 	mov	r17,r2
100040d8:	9009883a 	mov	r4,r18
100040dc:	01405404 	movi	r5,336
100040e0:	000586c0 	call	1000586c <__mulsi3>
100040e4:	8885883a 	add	r2,r17,r2
100040e8:	1405883a 	add	r2,r2,r16
100040ec:	1085883a 	add	r2,r2,r2
100040f0:	1085883a 	add	r2,r2,r2
100040f4:	e0f92704 	addi	r3,fp,-7012
100040f8:	1885883a 	add	r2,r3,r2
100040fc:	10804604 	addi	r2,r2,280
10004100:	10800017 	ldw	r2,0(r2)
10004104:	1000501e 	bne	r2,zero,10004248 <main+0x3f14>
10004108:	0080d404 	movi	r2,848
1000410c:	10800017 	ldw	r2,0(r2)
10004110:	10800c84 	addi	r2,r2,50
10004114:	1009883a 	mov	r4,r2
10004118:	01400784 	movi	r5,30
1000411c:	00057ac0 	call	100057ac <__divsi3>
10004120:	1023883a 	mov	r17,r2
10004124:	0080d804 	movi	r2,864
10004128:	10800017 	ldw	r2,0(r2)
1000412c:	10bfff44 	addi	r2,r2,-3
10004130:	1009883a 	mov	r4,r2
10004134:	01400784 	movi	r5,30
10004138:	00057ac0 	call	100057ac <__divsi3>
1000413c:	1021883a 	mov	r16,r2
10004140:	e4b95417 	ldw	r18,-6832(fp)
10004144:	8809883a 	mov	r4,r17
10004148:	01400544 	movi	r5,21
1000414c:	000586c0 	call	1000586c <__mulsi3>
10004150:	1023883a 	mov	r17,r2
10004154:	9009883a 	mov	r4,r18
10004158:	01405404 	movi	r5,336
1000415c:	000586c0 	call	1000586c <__mulsi3>
10004160:	8885883a 	add	r2,r17,r2
10004164:	1405883a 	add	r2,r2,r16
10004168:	1085883a 	add	r2,r2,r2
1000416c:	1085883a 	add	r2,r2,r2
10004170:	e0f92704 	addi	r3,fp,-7012
10004174:	1885883a 	add	r2,r3,r2
10004178:	10804604 	addi	r2,r2,280
1000417c:	10800017 	ldw	r2,0(r2)
10004180:	1000311e 	bne	r2,zero,10004248 <main+0x3f14>
10004184:	0080d404 	movi	r2,848
10004188:	10800017 	ldw	r2,0(r2)
1000418c:	10801184 	addi	r2,r2,70
10004190:	1009883a 	mov	r4,r2
10004194:	01400784 	movi	r5,30
10004198:	00057ac0 	call	100057ac <__divsi3>
1000419c:	1023883a 	mov	r17,r2
100041a0:	0080d804 	movi	r2,864
100041a4:	10800017 	ldw	r2,0(r2)
100041a8:	10bfff44 	addi	r2,r2,-3
100041ac:	1009883a 	mov	r4,r2
100041b0:	01400784 	movi	r5,30
100041b4:	00057ac0 	call	100057ac <__divsi3>
100041b8:	1021883a 	mov	r16,r2
100041bc:	e4b95417 	ldw	r18,-6832(fp)
100041c0:	8809883a 	mov	r4,r17
100041c4:	01400544 	movi	r5,21
100041c8:	000586c0 	call	1000586c <__mulsi3>
100041cc:	1023883a 	mov	r17,r2
100041d0:	9009883a 	mov	r4,r18
100041d4:	01405404 	movi	r5,336
100041d8:	000586c0 	call	1000586c <__mulsi3>
100041dc:	8885883a 	add	r2,r17,r2
100041e0:	1405883a 	add	r2,r2,r16
100041e4:	1085883a 	add	r2,r2,r2
100041e8:	1085883a 	add	r2,r2,r2
100041ec:	e0f92704 	addi	r3,fp,-7012
100041f0:	1885883a 	add	r2,r3,r2
100041f4:	10804604 	addi	r2,r2,280
100041f8:	10800017 	ldw	r2,0(r2)
100041fc:	1000121e 	bne	r2,zero,10004248 <main+0x3f14>
10004200:	00804c04 	movi	r2,304
10004204:	10800003 	ldbu	r2,0(r2)
10004208:	10803fcc 	andi	r2,r2,255
1000420c:	1080201c 	xori	r2,r2,128
10004210:	10bfe004 	addi	r2,r2,-128
10004214:	10000c1e 	bne	r2,zero,10004248 <main+0x3f14>
					*SAMUS_X-=((25-samus_inv_counter)/2);
10004218:	00c0d804 	movi	r3,864
1000421c:	0080d804 	movi	r2,864
10004220:	11000017 	ldw	r4,0(r2)
10004224:	01400644 	movi	r5,25
10004228:	e0b92817 	ldw	r2,-7008(fp)
1000422c:	2885c83a 	sub	r2,r5,r2
10004230:	100ad7fa 	srli	r5,r2,31
10004234:	2885883a 	add	r2,r5,r2
10004238:	1005d07a 	srai	r2,r2,1
1000423c:	2085c83a 	sub	r2,r4,r2
10004240:	18800015 	stw	r2,0(r3)
10004244:	00008e06 	br	10004480 <main+0x414c>
				}
				else if(scene[sceneNum][(*SAMUS_Y+10)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+25)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+50)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+70)/30][(*SAMUS_X+40)/30]==0 && *SAMUS_DIR == 1){
10004248:	0080d404 	movi	r2,848
1000424c:	10800017 	ldw	r2,0(r2)
10004250:	10800284 	addi	r2,r2,10
10004254:	1009883a 	mov	r4,r2
10004258:	01400784 	movi	r5,30
1000425c:	00057ac0 	call	100057ac <__divsi3>
10004260:	1023883a 	mov	r17,r2
10004264:	0080d804 	movi	r2,864
10004268:	10800017 	ldw	r2,0(r2)
1000426c:	10800a04 	addi	r2,r2,40
10004270:	1009883a 	mov	r4,r2
10004274:	01400784 	movi	r5,30
10004278:	00057ac0 	call	100057ac <__divsi3>
1000427c:	1021883a 	mov	r16,r2
10004280:	e4b95417 	ldw	r18,-6832(fp)
10004284:	8809883a 	mov	r4,r17
10004288:	01400544 	movi	r5,21
1000428c:	000586c0 	call	1000586c <__mulsi3>
10004290:	1023883a 	mov	r17,r2
10004294:	9009883a 	mov	r4,r18
10004298:	01405404 	movi	r5,336
1000429c:	000586c0 	call	1000586c <__mulsi3>
100042a0:	8885883a 	add	r2,r17,r2
100042a4:	1405883a 	add	r2,r2,r16
100042a8:	1085883a 	add	r2,r2,r2
100042ac:	1085883a 	add	r2,r2,r2
100042b0:	e0f92704 	addi	r3,fp,-7012
100042b4:	1885883a 	add	r2,r3,r2
100042b8:	10804604 	addi	r2,r2,280
100042bc:	10800017 	ldw	r2,0(r2)
100042c0:	10006f1e 	bne	r2,zero,10004480 <main+0x414c>
100042c4:	0080d404 	movi	r2,848
100042c8:	10800017 	ldw	r2,0(r2)
100042cc:	10800644 	addi	r2,r2,25
100042d0:	1009883a 	mov	r4,r2
100042d4:	01400784 	movi	r5,30
100042d8:	00057ac0 	call	100057ac <__divsi3>
100042dc:	1023883a 	mov	r17,r2
100042e0:	0080d804 	movi	r2,864
100042e4:	10800017 	ldw	r2,0(r2)
100042e8:	10800a04 	addi	r2,r2,40
100042ec:	1009883a 	mov	r4,r2
100042f0:	01400784 	movi	r5,30
100042f4:	00057ac0 	call	100057ac <__divsi3>
100042f8:	1021883a 	mov	r16,r2
100042fc:	e4b95417 	ldw	r18,-6832(fp)
10004300:	8809883a 	mov	r4,r17
10004304:	01400544 	movi	r5,21
10004308:	000586c0 	call	1000586c <__mulsi3>
1000430c:	1023883a 	mov	r17,r2
10004310:	9009883a 	mov	r4,r18
10004314:	01405404 	movi	r5,336
10004318:	000586c0 	call	1000586c <__mulsi3>
1000431c:	8885883a 	add	r2,r17,r2
10004320:	1405883a 	add	r2,r2,r16
10004324:	1085883a 	add	r2,r2,r2
10004328:	1085883a 	add	r2,r2,r2
1000432c:	e0f92704 	addi	r3,fp,-7012
10004330:	1885883a 	add	r2,r3,r2
10004334:	10804604 	addi	r2,r2,280
10004338:	10800017 	ldw	r2,0(r2)
1000433c:	1000501e 	bne	r2,zero,10004480 <main+0x414c>
10004340:	0080d404 	movi	r2,848
10004344:	10800017 	ldw	r2,0(r2)
10004348:	10800c84 	addi	r2,r2,50
1000434c:	1009883a 	mov	r4,r2
10004350:	01400784 	movi	r5,30
10004354:	00057ac0 	call	100057ac <__divsi3>
10004358:	1023883a 	mov	r17,r2
1000435c:	0080d804 	movi	r2,864
10004360:	10800017 	ldw	r2,0(r2)
10004364:	10800a04 	addi	r2,r2,40
10004368:	1009883a 	mov	r4,r2
1000436c:	01400784 	movi	r5,30
10004370:	00057ac0 	call	100057ac <__divsi3>
10004374:	1021883a 	mov	r16,r2
10004378:	e4b95417 	ldw	r18,-6832(fp)
1000437c:	8809883a 	mov	r4,r17
10004380:	01400544 	movi	r5,21
10004384:	000586c0 	call	1000586c <__mulsi3>
10004388:	1023883a 	mov	r17,r2
1000438c:	9009883a 	mov	r4,r18
10004390:	01405404 	movi	r5,336
10004394:	000586c0 	call	1000586c <__mulsi3>
10004398:	8885883a 	add	r2,r17,r2
1000439c:	1405883a 	add	r2,r2,r16
100043a0:	1085883a 	add	r2,r2,r2
100043a4:	1085883a 	add	r2,r2,r2
100043a8:	e0f92704 	addi	r3,fp,-7012
100043ac:	1885883a 	add	r2,r3,r2
100043b0:	10804604 	addi	r2,r2,280
100043b4:	10800017 	ldw	r2,0(r2)
100043b8:	1000311e 	bne	r2,zero,10004480 <main+0x414c>
100043bc:	0080d404 	movi	r2,848
100043c0:	10800017 	ldw	r2,0(r2)
100043c4:	10801184 	addi	r2,r2,70
100043c8:	1009883a 	mov	r4,r2
100043cc:	01400784 	movi	r5,30
100043d0:	00057ac0 	call	100057ac <__divsi3>
100043d4:	1023883a 	mov	r17,r2
100043d8:	0080d804 	movi	r2,864
100043dc:	10800017 	ldw	r2,0(r2)
100043e0:	10800a04 	addi	r2,r2,40
100043e4:	1009883a 	mov	r4,r2
100043e8:	01400784 	movi	r5,30
100043ec:	00057ac0 	call	100057ac <__divsi3>
100043f0:	1021883a 	mov	r16,r2
100043f4:	e4b95417 	ldw	r18,-6832(fp)
100043f8:	8809883a 	mov	r4,r17
100043fc:	01400544 	movi	r5,21
10004400:	000586c0 	call	1000586c <__mulsi3>
10004404:	1023883a 	mov	r17,r2
10004408:	9009883a 	mov	r4,r18
1000440c:	01405404 	movi	r5,336
10004410:	000586c0 	call	1000586c <__mulsi3>
10004414:	8885883a 	add	r2,r17,r2
10004418:	1405883a 	add	r2,r2,r16
1000441c:	1085883a 	add	r2,r2,r2
10004420:	1085883a 	add	r2,r2,r2
10004424:	e0f92704 	addi	r3,fp,-7012
10004428:	1885883a 	add	r2,r3,r2
1000442c:	10804604 	addi	r2,r2,280
10004430:	10800017 	ldw	r2,0(r2)
10004434:	1000121e 	bne	r2,zero,10004480 <main+0x414c>
10004438:	00804c04 	movi	r2,304
1000443c:	10800003 	ldbu	r2,0(r2)
10004440:	10803fcc 	andi	r2,r2,255
10004444:	1080201c 	xori	r2,r2,128
10004448:	10bfe004 	addi	r2,r2,-128
1000444c:	10800058 	cmpnei	r2,r2,1
10004450:	10000b1e 	bne	r2,zero,10004480 <main+0x414c>
						*SAMUS_X+=((25-samus_inv_counter)/2);
10004454:	00c0d804 	movi	r3,864
10004458:	0080d804 	movi	r2,864
1000445c:	11000017 	ldw	r4,0(r2)
10004460:	01400644 	movi	r5,25
10004464:	e0b92817 	ldw	r2,-7008(fp)
10004468:	2885c83a 	sub	r2,r5,r2
1000446c:	100ad7fa 	srli	r5,r2,31
10004470:	2885883a 	add	r2,r5,r2
10004474:	1005d07a 	srai	r2,r2,1
10004478:	2085883a 	add	r2,r4,r2
1000447c:	18800015 	stw	r2,0(r3)
				}
				if(scene[sceneNum][(*SAMUS_Y+5)/30][(*SAMUS_X+2)/30] != 0 || scene[sceneNum][(*SAMUS_Y+5)/30][(*SAMUS_X+33)/30] == 0 && y_set == False){
10004480:	0080d404 	movi	r2,848
10004484:	10800017 	ldw	r2,0(r2)
10004488:	10800144 	addi	r2,r2,5
1000448c:	1009883a 	mov	r4,r2
10004490:	01400784 	movi	r5,30
10004494:	00057ac0 	call	100057ac <__divsi3>
10004498:	1023883a 	mov	r17,r2
1000449c:	0080d804 	movi	r2,864
100044a0:	10800017 	ldw	r2,0(r2)
100044a4:	10800084 	addi	r2,r2,2
100044a8:	1009883a 	mov	r4,r2
100044ac:	01400784 	movi	r5,30
100044b0:	00057ac0 	call	100057ac <__divsi3>
100044b4:	1021883a 	mov	r16,r2
100044b8:	e4b95417 	ldw	r18,-6832(fp)
100044bc:	8809883a 	mov	r4,r17
100044c0:	01400544 	movi	r5,21
100044c4:	000586c0 	call	1000586c <__mulsi3>
100044c8:	1023883a 	mov	r17,r2
100044cc:	9009883a 	mov	r4,r18
100044d0:	01405404 	movi	r5,336
100044d4:	000586c0 	call	1000586c <__mulsi3>
100044d8:	8885883a 	add	r2,r17,r2
100044dc:	1405883a 	add	r2,r2,r16
100044e0:	1085883a 	add	r2,r2,r2
100044e4:	1085883a 	add	r2,r2,r2
100044e8:	e0f92704 	addi	r3,fp,-7012
100044ec:	1885883a 	add	r2,r3,r2
100044f0:	10804604 	addi	r2,r2,280
100044f4:	10800017 	ldw	r2,0(r2)
100044f8:	1000211e 	bne	r2,zero,10004580 <main+0x424c>
100044fc:	0080d404 	movi	r2,848
10004500:	10800017 	ldw	r2,0(r2)
10004504:	10800144 	addi	r2,r2,5
10004508:	1009883a 	mov	r4,r2
1000450c:	01400784 	movi	r5,30
10004510:	00057ac0 	call	100057ac <__divsi3>
10004514:	1023883a 	mov	r17,r2
10004518:	0080d804 	movi	r2,864
1000451c:	10800017 	ldw	r2,0(r2)
10004520:	10800844 	addi	r2,r2,33
10004524:	1009883a 	mov	r4,r2
10004528:	01400784 	movi	r5,30
1000452c:	00057ac0 	call	100057ac <__divsi3>
10004530:	1021883a 	mov	r16,r2
10004534:	e4b95417 	ldw	r18,-6832(fp)
10004538:	8809883a 	mov	r4,r17
1000453c:	01400544 	movi	r5,21
10004540:	000586c0 	call	1000586c <__mulsi3>
10004544:	1023883a 	mov	r17,r2
10004548:	9009883a 	mov	r4,r18
1000454c:	01405404 	movi	r5,336
10004550:	000586c0 	call	1000586c <__mulsi3>
10004554:	8885883a 	add	r2,r17,r2
10004558:	1405883a 	add	r2,r2,r16
1000455c:	1085883a 	add	r2,r2,r2
10004560:	1085883a 	add	r2,r2,r2
10004564:	e0f92704 	addi	r3,fp,-7012
10004568:	1885883a 	add	r2,r3,r2
1000456c:	10804604 	addi	r2,r2,280
10004570:	10800017 	ldw	r2,0(r2)
10004574:	1000061e 	bne	r2,zero,10004590 <main+0x425c>
10004578:	e0b92f17 	ldw	r2,-6980(fp)
1000457c:	1000041e 	bne	r2,zero,10004590 <main+0x425c>
					y_inc= -5;
10004580:	00b02834 	movhi	r2,49312
10004584:	e0b92a15 	stw	r2,-7000(fp)
					y_set = True;
10004588:	00800044 	movi	r2,1
1000458c:	e0b92f15 	stw	r2,-6980(fp)
				}
				has_control = False;
10004590:	e0392e15 	stw	zero,-6984(fp)
10004594:	00000206 	br	100045a0 <main+0x426c>
			}
			else{
				has_control = True;
10004598:	00800044 	movi	r2,1
1000459c:	e0b92e15 	stw	r2,-6984(fp)
			}
			if(samus_inv_counter >= 50){
100045a0:	e0b92817 	ldw	r2,-7008(fp)
100045a4:	10800c90 	cmplti	r2,r2,50
100045a8:	1000061e 	bne	r2,zero,100045c4 <main+0x4290>
				samus_inv_counter = 0;
100045ac:	e0392815 	stw	zero,-7008(fp)
				samus_inv_counter_start = False;
100045b0:	e0392915 	stw	zero,-7004(fp)
				*SAMUS_EN = True;
100045b4:	0080dc04 	movi	r2,880
100045b8:	00c00044 	movi	r3,1
100045bc:	10c00005 	stb	r3,0(r2)
100045c0:	00000306 	br	100045d0 <main+0x429c>
			}
			else{
				samus_inv_counter+=1;
100045c4:	e0b92817 	ldw	r2,-7008(fp)
100045c8:	10800044 	addi	r2,r2,1
100045cc:	e0b92815 	stw	r2,-7008(fp)
			}
		}
		printf("%d %d", samus_inv_counter, samus_inv_counter_start);
100045d0:	01040074 	movhi	r4,4097
100045d4:	21184804 	addi	r4,r4,24864
100045d8:	e1792817 	ldw	r5,-7008(fp)
100045dc:	e1b92917 	ldw	r6,-7004(fp)
100045e0:	0007b380 	call	10007b38 <printf>
		//EXTRA
		//debugging reset
		if (keycode == 0x15){
100045e4:	e0b94c17 	ldw	r2,-6864(fp)
100045e8:	10800558 	cmpnei	r2,r2,21
100045ec:	1000021e 	bne	r2,zero,100045f8 <main+0x42c4>
			sceneStart = True;
100045f0:	00800044 	movi	r2,1
100045f4:	e0b93b15 	stw	r2,-6932(fp)
		}
	}//end while
100045f8:	00326f06 	br	10000fb8 <__alt_data_end+0xf8000fb8>

100045fc <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
100045fc:	defffc04 	addi	sp,sp,-16
10004600:	dfc00315 	stw	ra,12(sp)
10004604:	df000215 	stw	fp,8(sp)
10004608:	df000204 	addi	fp,sp,8
1000460c:	2007883a 	mov	r3,r4
10004610:	2805883a 	mov	r2,r5
10004614:	e0fffe0d 	sth	r3,-8(fp)
10004618:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
1000461c:	e0bffe0b 	ldhu	r2,-8(fp)
10004620:	01000084 	movi	r4,2
10004624:	100b883a 	mov	r5,r2
10004628:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA, Data);
1000462c:	e0bfff0b 	ldhu	r2,-4(fp)
10004630:	0009883a 	mov	r4,zero
10004634:	100b883a 	mov	r5,r2
10004638:	00002480 	call	10000248 <IO_write>
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
}
1000463c:	e037883a 	mov	sp,fp
10004640:	dfc00117 	ldw	ra,4(sp)
10004644:	df000017 	ldw	fp,0(sp)
10004648:	dec00204 	addi	sp,sp,8
1000464c:	f800283a 	ret

10004650 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10004650:	defffd04 	addi	sp,sp,-12
10004654:	dfc00215 	stw	ra,8(sp)
10004658:	df000115 	stw	fp,4(sp)
1000465c:	df000104 	addi	fp,sp,4
10004660:	2005883a 	mov	r2,r4
10004664:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
10004668:	e0bfff0b 	ldhu	r2,-4(fp)
1000466c:	01000084 	movi	r4,2
10004670:	100b883a 	mov	r5,r2
10004674:	00002480 	call	10000248 <IO_write>
	return IO_read(HPI_DATA);
10004678:	0009883a 	mov	r4,zero
1000467c:	00002c00 	call	100002c0 <IO_read>
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
}
10004680:	e037883a 	mov	sp,fp
10004684:	dfc00117 	ldw	ra,4(sp)
10004688:	df000017 	ldw	fp,0(sp)
1000468c:	dec00204 	addi	sp,sp,8
10004690:	f800283a 	ret

10004694 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10004694:	defffe04 	addi	sp,sp,-8
10004698:	dfc00115 	stw	ra,4(sp)
1000469c:	df000015 	stw	fp,0(sp)
100046a0:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
100046a4:	01000044 	movi	r4,1
100046a8:	017e9414 	movui	r5,64080
100046ac:	00002480 	call	10000248 <IO_write>
	usleep(100000);
100046b0:	010000b4 	movhi	r4,2
100046b4:	2121a804 	addi	r4,r4,-31072
100046b8:	0013a800 	call	10013a80 <usleep>
	printf("[USB INIT]:reset finished!\n");
100046bc:	01040074 	movhi	r4,4097
100046c0:	211eda04 	addi	r4,r4,31592
100046c4:	0007c2c0 	call	10007c2c <puts>

	usleep(500000);
100046c8:	01000234 	movhi	r4,8
100046cc:	21284804 	addi	r4,r4,-24288
100046d0:	0013a800 	call	10013a80 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
100046d4:	01040074 	movhi	r4,4097
100046d8:	211ee104 	addi	r4,r4,31620
100046dc:	0007c2c0 	call	10007c2c <puts>
	IO_read(HPI_MAILBOX);
100046e0:	01000044 	movi	r4,1
100046e4:	00002c00 	call	100002c0 <IO_read>
	IO_read(HPI_STATUS);
100046e8:	010000c4 	movi	r4,3
100046ec:	00002c00 	call	100002c0 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
100046f0:	01005104 	movi	r4,324
100046f4:	00046500 	call	10004650 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
100046f8:	01005104 	movi	r4,324
100046fc:	000b883a 	mov	r5,zero
10004700:	00045fc0 	call	100045fc <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
10004704:	01005204 	movi	r4,328
10004708:	00046500 	call	10004650 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
1000470c:	01005204 	movi	r4,328
10004710:	000b883a 	mov	r5,zero
10004714:	00045fc0 	call	100045fc <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10004718:	01302414 	movui	r4,49296
1000471c:	017fffd4 	movui	r5,65535
10004720:	00045fc0 	call	100045fc <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10004724:	01302c14 	movui	r4,49328
10004728:	017fffd4 	movui	r5,65535
1000472c:	00045fc0 	call	100045fc <UsbWrite>
}
10004730:	e037883a 	mov	sp,fp
10004734:	dfc00117 	ldw	ra,4(sp)
10004738:	df000017 	ldw	fp,0(sp)
1000473c:	dec00204 	addi	sp,sp,8
10004740:	f800283a 	ret

10004744 <UsbSetAddress>:


void UsbSetAddress()
{
10004744:	defffe04 	addi	sp,sp,-8
10004748:	dfc00115 	stw	ra,4(sp)
1000474c:	df000015 	stw	fp,0(sp)
10004750:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10004754:	01000084 	movi	r4,2
10004758:	01414004 	movi	r5,1280
1000475c:	00002480 	call	10000248 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
10004760:	0009883a 	mov	r4,zero
10004764:	01414304 	movi	r5,1292
10004768:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000476c:	0009883a 	mov	r4,zero
10004770:	01400204 	movi	r5,8
10004774:	00002480 	call	10000248 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
10004778:	0009883a 	mov	r4,zero
1000477c:	01403404 	movi	r5,208
10004780:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10004784:	0009883a 	mov	r4,zero
10004788:	01400044 	movi	r5,1
1000478c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10004790:	0009883a 	mov	r4,zero
10004794:	014004c4 	movi	r5,19
10004798:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000479c:	0009883a 	mov	r4,zero
100047a0:	01414504 	movi	r5,1300
100047a4:	00002480 	call	10000248 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
100047a8:	0009883a 	mov	r4,zero
100047ac:	01414004 	movi	r5,1280
100047b0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);
100047b4:	0009883a 	mov	r4,zero
100047b8:	01400084 	movi	r5,2
100047bc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
100047c0:	0009883a 	mov	r4,zero
100047c4:	000b883a 	mov	r5,zero
100047c8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
100047cc:	0009883a 	mov	r4,zero
100047d0:	000b883a 	mov	r5,zero
100047d4:	00002480 	call	10000248 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
100047d8:	0009883a 	mov	r4,zero
100047dc:	000b883a 	mov	r5,zero
100047e0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//
100047e4:	0009883a 	mov	r4,zero
100047e8:	000b883a 	mov	r5,zero
100047ec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0090);//
100047f0:	0009883a 	mov	r4,zero
100047f4:	01402404 	movi	r5,144
100047f8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
100047fc:	0009883a 	mov	r4,zero
10004800:	01401044 	movi	r5,65
10004804:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10004808:	0009883a 	mov	r4,zero
1000480c:	014004c4 	movi	r5,19
10004810:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10004814:	0009883a 	mov	r4,zero
10004818:	000b883a 	mov	r5,zero
1000481c:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10004820:	01006c04 	movi	r4,432
10004824:	01414004 	movi	r5,1280
10004828:	00045fc0 	call	100045fc <UsbWrite>
}
1000482c:	e037883a 	mov	sp,fp
10004830:	dfc00117 	ldw	ra,4(sp)
10004834:	df000017 	ldw	fp,0(sp)
10004838:	dec00204 	addi	sp,sp,8
1000483c:	f800283a 	ret

10004840 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
10004840:	defffe04 	addi	sp,sp,-8
10004844:	dfc00115 	stw	ra,4(sp)
10004848:	df000015 	stw	fp,0(sp)
1000484c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10004850:	01000084 	movi	r4,2
10004854:	01414004 	movi	r5,1280
10004858:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
1000485c:	0009883a 	mov	r4,zero
10004860:	01414304 	movi	r5,1292
10004864:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10004868:	0009883a 	mov	r4,zero
1000486c:	01400204 	movi	r5,8
10004870:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10004874:	0009883a 	mov	r4,zero
10004878:	0140b404 	movi	r5,720
1000487c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10004880:	0009883a 	mov	r4,zero
10004884:	01400044 	movi	r5,1
10004888:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000488c:	0009883a 	mov	r4,zero
10004890:	014004c4 	movi	r5,19
10004894:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10004898:	0009883a 	mov	r4,zero
1000489c:	01414504 	movi	r5,1300
100048a0:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100048a4:	0009883a 	mov	r4,zero
100048a8:	0141a004 	movi	r5,1664
100048ac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
100048b0:	0009883a 	mov	r4,zero
100048b4:	01404004 	movi	r5,256
100048b8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
100048bc:	0009883a 	mov	r4,zero
100048c0:	000b883a 	mov	r5,zero
100048c4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);
100048c8:	0009883a 	mov	r4,zero
100048cc:	01400204 	movi	r5,8
100048d0:	00002480 	call	10000248 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
100048d4:	0009883a 	mov	r4,zero
100048d8:	01414b04 	movi	r5,1324
100048dc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//
100048e0:	0009883a 	mov	r4,zero
100048e4:	01400204 	movi	r5,8
100048e8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//
100048ec:	0009883a 	mov	r4,zero
100048f0:	0140a404 	movi	r5,656
100048f4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
100048f8:	0009883a 	mov	r4,zero
100048fc:	01401044 	movi	r5,65
10004900:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10004904:	0009883a 	mov	r4,zero
10004908:	014004c4 	movi	r5,19
1000490c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);
10004910:	0009883a 	mov	r4,zero
10004914:	01414804 	movi	r5,1312
10004918:	00002480 	call	10000248 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
1000491c:	0009883a 	mov	r4,zero
10004920:	000b883a 	mov	r5,zero
10004924:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10004928:	0009883a 	mov	r4,zero
1000492c:	000b883a 	mov	r5,zero
10004930:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
10004934:	0009883a 	mov	r4,zero
10004938:	01408404 	movi	r5,528
1000493c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
10004940:	0009883a 	mov	r4,zero
10004944:	01401044 	movi	r5,65
10004948:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000494c:	0009883a 	mov	r4,zero
10004950:	014004c4 	movi	r5,19
10004954:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10004958:	0009883a 	mov	r4,zero
1000495c:	000b883a 	mov	r5,zero
10004960:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10004964:	01006c04 	movi	r4,432
10004968:	01414004 	movi	r5,1280
1000496c:	00045fc0 	call	100045fc <UsbWrite>
}
10004970:	e037883a 	mov	sp,fp
10004974:	dfc00117 	ldw	ra,4(sp)
10004978:	df000017 	ldw	fp,0(sp)
1000497c:	dec00204 	addi	sp,sp,8
10004980:	f800283a 	ret

10004984 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
10004984:	defffe04 	addi	sp,sp,-8
10004988:	dfc00115 	stw	ra,4(sp)
1000498c:	df000015 	stw	fp,0(sp)
10004990:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10004994:	01000084 	movi	r4,2
10004998:	01414004 	movi	r5,1280
1000499c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100049a0:	0009883a 	mov	r4,zero
100049a4:	01414304 	movi	r5,1292
100049a8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100049ac:	0009883a 	mov	r4,zero
100049b0:	01400204 	movi	r5,8
100049b4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100049b8:	0009883a 	mov	r4,zero
100049bc:	0140b404 	movi	r5,720
100049c0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
100049c4:	0009883a 	mov	r4,zero
100049c8:	01400044 	movi	r5,1
100049cc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
100049d0:	0009883a 	mov	r4,zero
100049d4:	014004c4 	movi	r5,19
100049d8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
100049dc:	0009883a 	mov	r4,zero
100049e0:	01414504 	movi	r5,1300
100049e4:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100049e8:	0009883a 	mov	r4,zero
100049ec:	0141a004 	movi	r5,1664
100049f0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
100049f4:	0009883a 	mov	r4,zero
100049f8:	01404004 	movi	r5,256
100049fc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10004a00:	0009883a 	mov	r4,zero
10004a04:	000b883a 	mov	r5,zero
10004a08:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10004a0c:	0009883a 	mov	r4,zero
10004a10:	01400484 	movi	r5,18
10004a14:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10004a18:	0009883a 	mov	r4,zero
10004a1c:	01415104 	movi	r5,1348
10004a20:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10004a24:	0009883a 	mov	r4,zero
10004a28:	01400204 	movi	r5,8
10004a2c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10004a30:	0009883a 	mov	r4,zero
10004a34:	0140a404 	movi	r5,656
10004a38:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10004a3c:	0009883a 	mov	r4,zero
10004a40:	01401044 	movi	r5,65
10004a44:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10004a48:	0009883a 	mov	r4,zero
10004a4c:	014004c4 	movi	r5,19
10004a50:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10004a54:	0009883a 	mov	r4,zero
10004a58:	01414804 	movi	r5,1312
10004a5c:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10004a60:	0009883a 	mov	r4,zero
10004a64:	01415304 	movi	r5,1356
10004a68:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10004a6c:	0009883a 	mov	r4,zero
10004a70:	01400204 	movi	r5,8
10004a74:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10004a78:	0009883a 	mov	r4,zero
10004a7c:	0140a404 	movi	r5,656
10004a80:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
10004a84:	0009883a 	mov	r4,zero
10004a88:	01400044 	movi	r5,1
10004a8c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10004a90:	0009883a 	mov	r4,zero
10004a94:	014004c4 	movi	r5,19
10004a98:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10004a9c:	0009883a 	mov	r4,zero
10004aa0:	01414b04 	movi	r5,1324
10004aa4:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
10004aa8:	0009883a 	mov	r4,zero
10004aac:	01415504 	movi	r5,1364
10004ab0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
10004ab4:	0009883a 	mov	r4,zero
10004ab8:	01400084 	movi	r5,2
10004abc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10004ac0:	0009883a 	mov	r4,zero
10004ac4:	0140a404 	movi	r5,656
10004ac8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10004acc:	0009883a 	mov	r4,zero
10004ad0:	01401044 	movi	r5,65
10004ad4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10004ad8:	0009883a 	mov	r4,zero
10004adc:	014004c4 	movi	r5,19
10004ae0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10004ae4:	0009883a 	mov	r4,zero
10004ae8:	01414e04 	movi	r5,1336
10004aec:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10004af0:	0009883a 	mov	r4,zero
10004af4:	000b883a 	mov	r5,zero
10004af8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10004afc:	0009883a 	mov	r4,zero
10004b00:	000b883a 	mov	r5,zero
10004b04:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10004b08:	0009883a 	mov	r4,zero
10004b0c:	01408404 	movi	r5,528
10004b10:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10004b14:	0009883a 	mov	r4,zero
10004b18:	01401044 	movi	r5,65
10004b1c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10004b20:	0009883a 	mov	r4,zero
10004b24:	014004c4 	movi	r5,19
10004b28:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10004b2c:	0009883a 	mov	r4,zero
10004b30:	000b883a 	mov	r5,zero
10004b34:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10004b38:	01006c04 	movi	r4,432
10004b3c:	01414004 	movi	r5,1280
10004b40:	00045fc0 	call	100045fc <UsbWrite>
}
10004b44:	e037883a 	mov	sp,fp
10004b48:	dfc00117 	ldw	ra,4(sp)
10004b4c:	df000017 	ldw	fp,0(sp)
10004b50:	dec00204 	addi	sp,sp,8
10004b54:	f800283a 	ret

10004b58 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
10004b58:	defffe04 	addi	sp,sp,-8
10004b5c:	dfc00115 	stw	ra,4(sp)
10004b60:	df000015 	stw	fp,0(sp)
10004b64:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10004b68:	01000084 	movi	r4,2
10004b6c:	01414004 	movi	r5,1280
10004b70:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10004b74:	0009883a 	mov	r4,zero
10004b78:	01414304 	movi	r5,1292
10004b7c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10004b80:	0009883a 	mov	r4,zero
10004b84:	01400204 	movi	r5,8
10004b88:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10004b8c:	0009883a 	mov	r4,zero
10004b90:	0140b404 	movi	r5,720
10004b94:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10004b98:	0009883a 	mov	r4,zero
10004b9c:	01400044 	movi	r5,1
10004ba0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10004ba4:	0009883a 	mov	r4,zero
10004ba8:	014004c4 	movi	r5,19
10004bac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10004bb0:	0009883a 	mov	r4,zero
10004bb4:	01414504 	movi	r5,1300
10004bb8:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10004bbc:	0009883a 	mov	r4,zero
10004bc0:	0141a004 	movi	r5,1664
10004bc4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10004bc8:	0009883a 	mov	r4,zero
10004bcc:	01408004 	movi	r5,512
10004bd0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10004bd4:	0009883a 	mov	r4,zero
10004bd8:	000b883a 	mov	r5,zero
10004bdc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10004be0:	0009883a 	mov	r4,zero
10004be4:	01400244 	movi	r5,9
10004be8:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10004bec:	0009883a 	mov	r4,zero
10004bf0:	01415104 	movi	r5,1348
10004bf4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10004bf8:	0009883a 	mov	r4,zero
10004bfc:	01400204 	movi	r5,8
10004c00:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10004c04:	0009883a 	mov	r4,zero
10004c08:	0140a404 	movi	r5,656
10004c0c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10004c10:	0009883a 	mov	r4,zero
10004c14:	01401044 	movi	r5,65
10004c18:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10004c1c:	0009883a 	mov	r4,zero
10004c20:	014004c4 	movi	r5,19
10004c24:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10004c28:	0009883a 	mov	r4,zero
10004c2c:	01414804 	movi	r5,1312
10004c30:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10004c34:	0009883a 	mov	r4,zero
10004c38:	01415304 	movi	r5,1356
10004c3c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
10004c40:	0009883a 	mov	r4,zero
10004c44:	01400044 	movi	r5,1
10004c48:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10004c4c:	0009883a 	mov	r4,zero
10004c50:	0140a404 	movi	r5,656
10004c54:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10004c58:	0009883a 	mov	r4,zero
10004c5c:	01400044 	movi	r5,1
10004c60:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10004c64:	0009883a 	mov	r4,zero
10004c68:	014004c4 	movi	r5,19
10004c6c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10004c70:	0009883a 	mov	r4,zero
10004c74:	01414b04 	movi	r5,1324
10004c78:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10004c7c:	0009883a 	mov	r4,zero
10004c80:	000b883a 	mov	r5,zero
10004c84:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10004c88:	0009883a 	mov	r4,zero
10004c8c:	000b883a 	mov	r5,zero
10004c90:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10004c94:	0009883a 	mov	r4,zero
10004c98:	01408404 	movi	r5,528
10004c9c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10004ca0:	0009883a 	mov	r4,zero
10004ca4:	01401044 	movi	r5,65
10004ca8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10004cac:	0009883a 	mov	r4,zero
10004cb0:	014004c4 	movi	r5,19
10004cb4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10004cb8:	0009883a 	mov	r4,zero
10004cbc:	000b883a 	mov	r5,zero
10004cc0:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10004cc4:	01006c04 	movi	r4,432
10004cc8:	01414004 	movi	r5,1280
10004ccc:	00045fc0 	call	100045fc <UsbWrite>
}
10004cd0:	e037883a 	mov	sp,fp
10004cd4:	dfc00117 	ldw	ra,4(sp)
10004cd8:	df000017 	ldw	fp,0(sp)
10004cdc:	dec00204 	addi	sp,sp,8
10004ce0:	f800283a 	ret

10004ce4 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
10004ce4:	defffe04 	addi	sp,sp,-8
10004ce8:	dfc00115 	stw	ra,4(sp)
10004cec:	df000015 	stw	fp,0(sp)
10004cf0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10004cf4:	01000084 	movi	r4,2
10004cf8:	01414004 	movi	r5,1280
10004cfc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10004d00:	0009883a 	mov	r4,zero
10004d04:	01414304 	movi	r5,1292
10004d08:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10004d0c:	0009883a 	mov	r4,zero
10004d10:	01400204 	movi	r5,8
10004d14:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10004d18:	0009883a 	mov	r4,zero
10004d1c:	0140b404 	movi	r5,720
10004d20:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10004d24:	0009883a 	mov	r4,zero
10004d28:	01400044 	movi	r5,1
10004d2c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10004d30:	0009883a 	mov	r4,zero
10004d34:	014004c4 	movi	r5,19
10004d38:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10004d3c:	0009883a 	mov	r4,zero
10004d40:	01414504 	movi	r5,1300
10004d44:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10004d48:	0009883a 	mov	r4,zero
10004d4c:	0141a004 	movi	r5,1664
10004d50:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10004d54:	0009883a 	mov	r4,zero
10004d58:	01408004 	movi	r5,512
10004d5c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10004d60:	0009883a 	mov	r4,zero
10004d64:	000b883a 	mov	r5,zero
10004d68:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
10004d6c:	0009883a 	mov	r4,zero
10004d70:	01403fc4 	movi	r5,255
10004d74:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
10004d78:	0009883a 	mov	r4,zero
10004d7c:	01415704 	movi	r5,1372
10004d80:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10004d84:	0009883a 	mov	r4,zero
10004d88:	01400204 	movi	r5,8
10004d8c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10004d90:	0009883a 	mov	r4,zero
10004d94:	0140a404 	movi	r5,656
10004d98:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10004d9c:	0009883a 	mov	r4,zero
10004da0:	01401044 	movi	r5,65
10004da4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10004da8:	0009883a 	mov	r4,zero
10004dac:	014004c4 	movi	r5,19
10004db0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10004db4:	0009883a 	mov	r4,zero
10004db8:	01414804 	movi	r5,1312
10004dbc:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10004dc0:	0009883a 	mov	r4,zero
10004dc4:	01415904 	movi	r5,1380
10004dc8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10004dcc:	0009883a 	mov	r4,zero
10004dd0:	01400204 	movi	r5,8
10004dd4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10004dd8:	0009883a 	mov	r4,zero
10004ddc:	0140a404 	movi	r5,656
10004de0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10004de4:	0009883a 	mov	r4,zero
10004de8:	01400044 	movi	r5,1
10004dec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10004df0:	0009883a 	mov	r4,zero
10004df4:	014004c4 	movi	r5,19
10004df8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10004dfc:	0009883a 	mov	r4,zero
10004e00:	01414b04 	movi	r5,1324
10004e04:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
10004e08:	0009883a 	mov	r4,zero
10004e0c:	01415b04 	movi	r5,1388
10004e10:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10004e14:	0009883a 	mov	r4,zero
10004e18:	01400204 	movi	r5,8
10004e1c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10004e20:	0009883a 	mov	r4,zero
10004e24:	0140a404 	movi	r5,656
10004e28:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10004e2c:	0009883a 	mov	r4,zero
10004e30:	01401044 	movi	r5,65
10004e34:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10004e38:	0009883a 	mov	r4,zero
10004e3c:	014004c4 	movi	r5,19
10004e40:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10004e44:	0009883a 	mov	r4,zero
10004e48:	01414e04 	movi	r5,1336
10004e4c:	00002480 	call	10000248 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
10004e50:	0009883a 	mov	r4,zero
10004e54:	01415d04 	movi	r5,1396
10004e58:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10004e5c:	0009883a 	mov	r4,zero
10004e60:	01400204 	movi	r5,8
10004e64:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10004e68:	0009883a 	mov	r4,zero
10004e6c:	0140a404 	movi	r5,656
10004e70:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10004e74:	0009883a 	mov	r4,zero
10004e78:	01400044 	movi	r5,1
10004e7c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10004e80:	0009883a 	mov	r4,zero
10004e84:	014004c4 	movi	r5,19
10004e88:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10004e8c:	0009883a 	mov	r4,zero
10004e90:	01415104 	movi	r5,1348
10004e94:	00002480 	call	10000248 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10004e98:	0009883a 	mov	r4,zero
10004e9c:	01415f04 	movi	r5,1404
10004ea0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10004ea4:	0009883a 	mov	r4,zero
10004ea8:	01400084 	movi	r5,2
10004eac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10004eb0:	0009883a 	mov	r4,zero
10004eb4:	0140a404 	movi	r5,656
10004eb8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10004ebc:	0009883a 	mov	r4,zero
10004ec0:	01401044 	movi	r5,65
10004ec4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10004ec8:	0009883a 	mov	r4,zero
10004ecc:	014004c4 	movi	r5,19
10004ed0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10004ed4:	0009883a 	mov	r4,zero
10004ed8:	01415404 	movi	r5,1360
10004edc:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10004ee0:	0009883a 	mov	r4,zero
10004ee4:	000b883a 	mov	r5,zero
10004ee8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10004eec:	0009883a 	mov	r4,zero
10004ef0:	000b883a 	mov	r5,zero
10004ef4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10004ef8:	0009883a 	mov	r4,zero
10004efc:	01408404 	movi	r5,528
10004f00:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10004f04:	0009883a 	mov	r4,zero
10004f08:	01401044 	movi	r5,65
10004f0c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10004f10:	0009883a 	mov	r4,zero
10004f14:	014004c4 	movi	r5,19
10004f18:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10004f1c:	0009883a 	mov	r4,zero
10004f20:	000b883a 	mov	r5,zero
10004f24:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10004f28:	01006c04 	movi	r4,432
10004f2c:	01414004 	movi	r5,1280
10004f30:	00045fc0 	call	100045fc <UsbWrite>
}
10004f34:	e037883a 	mov	sp,fp
10004f38:	dfc00117 	ldw	ra,4(sp)
10004f3c:	df000017 	ldw	fp,0(sp)
10004f40:	dec00204 	addi	sp,sp,8
10004f44:	f800283a 	ret

10004f48 <UsbSetConfig>:

void UsbSetConfig()
{
10004f48:	defffe04 	addi	sp,sp,-8
10004f4c:	dfc00115 	stw	ra,4(sp)
10004f50:	df000015 	stw	fp,0(sp)
10004f54:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10004f58:	01000084 	movi	r4,2
10004f5c:	01414004 	movi	r5,1280
10004f60:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10004f64:	0009883a 	mov	r4,zero
10004f68:	01414304 	movi	r5,1292
10004f6c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10004f70:	0009883a 	mov	r4,zero
10004f74:	01400204 	movi	r5,8
10004f78:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10004f7c:	0009883a 	mov	r4,zero
10004f80:	0140b404 	movi	r5,720
10004f84:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10004f88:	0009883a 	mov	r4,zero
10004f8c:	01400044 	movi	r5,1
10004f90:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10004f94:	0009883a 	mov	r4,zero
10004f98:	014004c4 	movi	r5,19
10004f9c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10004fa0:	0009883a 	mov	r4,zero
10004fa4:	01414504 	movi	r5,1300
10004fa8:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10004fac:	0009883a 	mov	r4,zero
10004fb0:	01424004 	movi	r5,2304
10004fb4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10004fb8:	0009883a 	mov	r4,zero
10004fbc:	01400044 	movi	r5,1
10004fc0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10004fc4:	0009883a 	mov	r4,zero
10004fc8:	000b883a 	mov	r5,zero
10004fcc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10004fd0:	0009883a 	mov	r4,zero
10004fd4:	000b883a 	mov	r5,zero
10004fd8:	00002480 	call	10000248 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10004fdc:	0009883a 	mov	r4,zero
10004fe0:	000b883a 	mov	r5,zero
10004fe4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10004fe8:	0009883a 	mov	r4,zero
10004fec:	000b883a 	mov	r5,zero
10004ff0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10004ff4:	0009883a 	mov	r4,zero
10004ff8:	0140a404 	movi	r5,656
10004ffc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10005000:	0009883a 	mov	r4,zero
10005004:	01401044 	movi	r5,65
10005008:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000500c:	0009883a 	mov	r4,zero
10005010:	014004c4 	movi	r5,19
10005014:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10005018:	0009883a 	mov	r4,zero
1000501c:	000b883a 	mov	r5,zero
10005020:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10005024:	01006c04 	movi	r4,432
10005028:	01414004 	movi	r5,1280
1000502c:	00045fc0 	call	100045fc <UsbWrite>

}
10005030:	e037883a 	mov	sp,fp
10005034:	dfc00117 	ldw	ra,4(sp)
10005038:	df000017 	ldw	fp,0(sp)
1000503c:	dec00204 	addi	sp,sp,8
10005040:	f800283a 	ret

10005044 <UsbClassRequest>:

void UsbClassRequest()
{
10005044:	defffe04 	addi	sp,sp,-8
10005048:	dfc00115 	stw	ra,4(sp)
1000504c:	df000015 	stw	fp,0(sp)
10005050:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10005054:	01000084 	movi	r4,2
10005058:	01414004 	movi	r5,1280
1000505c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10005060:	0009883a 	mov	r4,zero
10005064:	01414304 	movi	r5,1292
10005068:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000506c:	0009883a 	mov	r4,zero
10005070:	01400204 	movi	r5,8
10005074:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10005078:	0009883a 	mov	r4,zero
1000507c:	0140b404 	movi	r5,720
10005080:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10005084:	0009883a 	mov	r4,zero
10005088:	01400044 	movi	r5,1
1000508c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10005090:	0009883a 	mov	r4,zero
10005094:	014004c4 	movi	r5,19
10005098:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000509c:	0009883a 	mov	r4,zero
100050a0:	01414504 	movi	r5,1300
100050a4:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
100050a8:	0009883a 	mov	r4,zero
100050ac:	01428844 	movi	r5,2593
100050b0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
100050b4:	0009883a 	mov	r4,zero
100050b8:	000b883a 	mov	r5,zero
100050bc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
100050c0:	0009883a 	mov	r4,zero
100050c4:	000b883a 	mov	r5,zero
100050c8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
100050cc:	0009883a 	mov	r4,zero
100050d0:	000b883a 	mov	r5,zero
100050d4:	00002480 	call	10000248 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
100050d8:	0009883a 	mov	r4,zero
100050dc:	000b883a 	mov	r5,zero
100050e0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
100050e4:	0009883a 	mov	r4,zero
100050e8:	000b883a 	mov	r5,zero
100050ec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
100050f0:	0009883a 	mov	r4,zero
100050f4:	0140a404 	movi	r5,656
100050f8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
100050fc:	0009883a 	mov	r4,zero
10005100:	01401044 	movi	r5,65
10005104:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10005108:	0009883a 	mov	r4,zero
1000510c:	014004c4 	movi	r5,19
10005110:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10005114:	0009883a 	mov	r4,zero
10005118:	000b883a 	mov	r5,zero
1000511c:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10005120:	01006c04 	movi	r4,432
10005124:	01414004 	movi	r5,1280
10005128:	00045fc0 	call	100045fc <UsbWrite>
}
1000512c:	e037883a 	mov	sp,fp
10005130:	dfc00117 	ldw	ra,4(sp)
10005134:	df000017 	ldw	fp,0(sp)
10005138:	dec00204 	addi	sp,sp,8
1000513c:	f800283a 	ret

10005140 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10005140:	defffe04 	addi	sp,sp,-8
10005144:	dfc00115 	stw	ra,4(sp)
10005148:	df000015 	stw	fp,0(sp)
1000514c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10005150:	01000084 	movi	r4,2
10005154:	01414004 	movi	r5,1280
10005158:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
1000515c:	0009883a 	mov	r4,zero
10005160:	01414304 	movi	r5,1292
10005164:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10005168:	0009883a 	mov	r4,zero
1000516c:	01400204 	movi	r5,8
10005170:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10005174:	0009883a 	mov	r4,zero
10005178:	0140b404 	movi	r5,720
1000517c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10005180:	0009883a 	mov	r4,zero
10005184:	01400044 	movi	r5,1
10005188:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000518c:	0009883a 	mov	r4,zero
10005190:	014004c4 	movi	r5,19
10005194:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10005198:	0009883a 	mov	r4,zero
1000519c:	01414504 	movi	r5,1300
100051a0:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
100051a4:	0009883a 	mov	r4,zero
100051a8:	0141a044 	movi	r5,1665
100051ac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
100051b0:	0009883a 	mov	r4,zero
100051b4:	01484004 	movi	r5,8448
100051b8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100051bc:	0009883a 	mov	r4,zero
100051c0:	000b883a 	mov	r5,zero
100051c4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
100051c8:	0009883a 	mov	r4,zero
100051cc:	01401ec4 	movi	r5,123
100051d0:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
100051d4:	0009883a 	mov	r4,zero
100051d8:	01415104 	movi	r5,1348
100051dc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100051e0:	0009883a 	mov	r4,zero
100051e4:	01400204 	movi	r5,8
100051e8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100051ec:	0009883a 	mov	r4,zero
100051f0:	0140a404 	movi	r5,656
100051f4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100051f8:	0009883a 	mov	r4,zero
100051fc:	01401044 	movi	r5,65
10005200:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10005204:	0009883a 	mov	r4,zero
10005208:	014004c4 	movi	r5,19
1000520c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10005210:	0009883a 	mov	r4,zero
10005214:	01414804 	movi	r5,1312
10005218:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
1000521c:	0009883a 	mov	r4,zero
10005220:	000b883a 	mov	r5,zero
10005224:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10005228:	0009883a 	mov	r4,zero
1000522c:	000b883a 	mov	r5,zero
10005230:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10005234:	0009883a 	mov	r4,zero
10005238:	01408404 	movi	r5,528
1000523c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10005240:	0009883a 	mov	r4,zero
10005244:	01401044 	movi	r5,65
10005248:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
1000524c:	0009883a 	mov	r4,zero
10005250:	014004c4 	movi	r5,19
10005254:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10005258:	0009883a 	mov	r4,zero
1000525c:	000b883a 	mov	r5,zero
10005260:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10005264:	01006c04 	movi	r4,432
10005268:	01414004 	movi	r5,1280
1000526c:	00045fc0 	call	100045fc <UsbWrite>

}
10005270:	e037883a 	mov	sp,fp
10005274:	dfc00117 	ldw	ra,4(sp)
10005278:	df000017 	ldw	fp,0(sp)
1000527c:	dec00204 	addi	sp,sp,8
10005280:	f800283a 	ret

10005284 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10005284:	defffe04 	addi	sp,sp,-8
10005288:	dfc00115 	stw	ra,4(sp)
1000528c:	df000015 	stw	fp,0(sp)
10005290:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10005294:	01000084 	movi	r4,2
10005298:	01414004 	movi	r5,1280
1000529c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100052a0:	0009883a 	mov	r4,zero
100052a4:	01414304 	movi	r5,1292
100052a8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100052ac:	0009883a 	mov	r4,zero
100052b0:	01400204 	movi	r5,8
100052b4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100052b8:	0009883a 	mov	r4,zero
100052bc:	0140b404 	movi	r5,720
100052c0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
100052c4:	0009883a 	mov	r4,zero
100052c8:	01400044 	movi	r5,1
100052cc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
100052d0:	0009883a 	mov	r4,zero
100052d4:	014004c4 	movi	r5,19
100052d8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
100052dc:	0009883a 	mov	r4,zero
100052e0:	01414504 	movi	r5,1300
100052e4:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
100052e8:	0009883a 	mov	r4,zero
100052ec:	0141a044 	movi	r5,1665
100052f0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
100052f4:	0009883a 	mov	r4,zero
100052f8:	01488004 	movi	r5,8704
100052fc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10005300:	0009883a 	mov	r4,zero
10005304:	000b883a 	mov	r5,zero
10005308:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
1000530c:	0009883a 	mov	r4,zero
10005310:	01401ec4 	movi	r5,123
10005314:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10005318:	0009883a 	mov	r4,zero
1000531c:	01416004 	movi	r5,1408
10005320:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10005324:	0009883a 	mov	r4,zero
10005328:	01400204 	movi	r5,8
1000532c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10005330:	0009883a 	mov	r4,zero
10005334:	0140a404 	movi	r5,656
10005338:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000533c:	0009883a 	mov	r4,zero
10005340:	01401044 	movi	r5,65
10005344:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10005348:	0009883a 	mov	r4,zero
1000534c:	014004c4 	movi	r5,19
10005350:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10005354:	0009883a 	mov	r4,zero
10005358:	01414804 	movi	r5,1312
1000535c:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10005360:	0009883a 	mov	r4,zero
10005364:	01416204 	movi	r5,1416
10005368:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
1000536c:	0009883a 	mov	r4,zero
10005370:	01400204 	movi	r5,8
10005374:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10005378:	0009883a 	mov	r4,zero
1000537c:	0140a404 	movi	r5,656
10005380:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10005384:	0009883a 	mov	r4,zero
10005388:	01400044 	movi	r5,1
1000538c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10005390:	0009883a 	mov	r4,zero
10005394:	014004c4 	movi	r5,19
10005398:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
1000539c:	0009883a 	mov	r4,zero
100053a0:	01414b04 	movi	r5,1324
100053a4:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
100053a8:	0009883a 	mov	r4,zero
100053ac:	01416404 	movi	r5,1424
100053b0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100053b4:	0009883a 	mov	r4,zero
100053b8:	01400204 	movi	r5,8
100053bc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100053c0:	0009883a 	mov	r4,zero
100053c4:	0140a404 	movi	r5,656
100053c8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100053cc:	0009883a 	mov	r4,zero
100053d0:	01401044 	movi	r5,65
100053d4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100053d8:	0009883a 	mov	r4,zero
100053dc:	014004c4 	movi	r5,19
100053e0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
100053e4:	0009883a 	mov	r4,zero
100053e8:	01414e04 	movi	r5,1336
100053ec:	00002480 	call	10000248 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
100053f0:	0009883a 	mov	r4,zero
100053f4:	01416604 	movi	r5,1432
100053f8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
100053fc:	0009883a 	mov	r4,zero
10005400:	01400204 	movi	r5,8
10005404:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10005408:	0009883a 	mov	r4,zero
1000540c:	0140a404 	movi	r5,656
10005410:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10005414:	0009883a 	mov	r4,zero
10005418:	01400044 	movi	r5,1
1000541c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10005420:	0009883a 	mov	r4,zero
10005424:	014004c4 	movi	r5,19
10005428:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
1000542c:	0009883a 	mov	r4,zero
10005430:	01415104 	movi	r5,1348
10005434:	00002480 	call	10000248 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10005438:	0009883a 	mov	r4,zero
1000543c:	01416804 	movi	r5,1440
10005440:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10005444:	0009883a 	mov	r4,zero
10005448:	01400204 	movi	r5,8
1000544c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10005450:	0009883a 	mov	r4,zero
10005454:	0140a404 	movi	r5,656
10005458:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
1000545c:	0009883a 	mov	r4,zero
10005460:	01401044 	movi	r5,65
10005464:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10005468:	0009883a 	mov	r4,zero
1000546c:	014004c4 	movi	r5,19
10005470:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10005474:	0009883a 	mov	r4,zero
10005478:	01415404 	movi	r5,1360
1000547c:	00002480 	call	10000248 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10005480:	0009883a 	mov	r4,zero
10005484:	01416a04 	movi	r5,1448
10005488:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
1000548c:	0009883a 	mov	r4,zero
10005490:	01400204 	movi	r5,8
10005494:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10005498:	0009883a 	mov	r4,zero
1000549c:	0140a404 	movi	r5,656
100054a0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100054a4:	0009883a 	mov	r4,zero
100054a8:	01400044 	movi	r5,1
100054ac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100054b0:	0009883a 	mov	r4,zero
100054b4:	014004c4 	movi	r5,19
100054b8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
100054bc:	0009883a 	mov	r4,zero
100054c0:	01415704 	movi	r5,1372
100054c4:	00002480 	call	10000248 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
100054c8:	0009883a 	mov	r4,zero
100054cc:	01416c04 	movi	r5,1456
100054d0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100054d4:	0009883a 	mov	r4,zero
100054d8:	01400204 	movi	r5,8
100054dc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
100054e0:	0009883a 	mov	r4,zero
100054e4:	0140a404 	movi	r5,656
100054e8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
100054ec:	0009883a 	mov	r4,zero
100054f0:	01401044 	movi	r5,65
100054f4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100054f8:	0009883a 	mov	r4,zero
100054fc:	014004c4 	movi	r5,19
10005500:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10005504:	0009883a 	mov	r4,zero
10005508:	01415a04 	movi	r5,1384
1000550c:	00002480 	call	10000248 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10005510:	0009883a 	mov	r4,zero
10005514:	01416e04 	movi	r5,1464
10005518:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
1000551c:	0009883a 	mov	r4,zero
10005520:	014000c4 	movi	r5,3
10005524:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10005528:	0009883a 	mov	r4,zero
1000552c:	0140a404 	movi	r5,656
10005530:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10005534:	0009883a 	mov	r4,zero
10005538:	01400044 	movi	r5,1
1000553c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10005540:	0009883a 	mov	r4,zero
10005544:	014004c4 	movi	r5,19
10005548:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
1000554c:	0009883a 	mov	r4,zero
10005550:	01415d04 	movi	r5,1396
10005554:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10005558:	0009883a 	mov	r4,zero
1000555c:	000b883a 	mov	r5,zero
10005560:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10005564:	0009883a 	mov	r4,zero
10005568:	000b883a 	mov	r5,zero
1000556c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
10005570:	0009883a 	mov	r4,zero
10005574:	01408404 	movi	r5,528
10005578:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000557c:	0009883a 	mov	r4,zero
10005580:	01401044 	movi	r5,65
10005584:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10005588:	0009883a 	mov	r4,zero
1000558c:	014004c4 	movi	r5,19
10005590:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10005594:	0009883a 	mov	r4,zero
10005598:	000b883a 	mov	r5,zero
1000559c:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100055a0:	01006c04 	movi	r4,432
100055a4:	01414004 	movi	r5,1280
100055a8:	00045fc0 	call	100045fc <UsbWrite>

}
100055ac:	e037883a 	mov	sp,fp
100055b0:	dfc00117 	ldw	ra,4(sp)
100055b4:	df000017 	ldw	fp,0(sp)
100055b8:	dec00204 	addi	sp,sp,8
100055bc:	f800283a 	ret

100055c0 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
100055c0:	defffd04 	addi	sp,sp,-12
100055c4:	dfc00215 	stw	ra,8(sp)
100055c8:	df000115 	stw	fp,4(sp)
100055cc:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
100055d0:	01005104 	movi	r4,324
100055d4:	00046500 	call	10004650 <UsbRead>
100055d8:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
100055dc:	01005104 	movi	r4,324
100055e0:	000b883a 	mov	r5,zero
100055e4:	00045fc0 	call	100045fc <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100055e8:	00000d06 	br	10005620 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
100055ec:	e0bfff0b 	ldhu	r2,-4(fp)
100055f0:	10000526 	beq	r2,zero,10005608 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
100055f4:	e0bfff0b 	ldhu	r2,-4(fp)
100055f8:	01040074 	movhi	r4,4097
100055fc:	211eea04 	addi	r4,r4,31656
10005600:	100b883a 	mov	r5,r2
10005604:	0007b380 	call	10007b38 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10005608:	01005104 	movi	r4,324
1000560c:	00046500 	call	10004650 <UsbRead>
10005610:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10005614:	01005104 	movi	r4,324
10005618:	000b883a 	mov	r5,zero
1000561c:	00045fc0 	call	100045fc <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10005620:	e0bfff0b 	ldhu	r2,-4(fp)
10005624:	10840018 	cmpnei	r2,r2,4096
10005628:	103ff01e 	bne	r2,zero,100055ec <__alt_data_end+0xf80055ec>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
1000562c:	e0bfff0b 	ldhu	r2,-4(fp)
}
10005630:	e037883a 	mov	sp,fp
10005634:	dfc00117 	ldw	ra,4(sp)
10005638:	df000017 	ldw	fp,0(sp)
1000563c:	dec00204 	addi	sp,sp,8
10005640:	f800283a 	ret

10005644 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10005644:	defffd04 	addi	sp,sp,-12
10005648:	dfc00215 	stw	ra,8(sp)
1000564c:	df000115 	stw	fp,4(sp)
10005650:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10005654:	010000c4 	movi	r4,3
10005658:	00002c00 	call	100002c0 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
1000565c:	01005104 	movi	r4,324
10005660:	00046500 	call	10004650 <UsbRead>
10005664:	10bfffcc 	andi	r2,r2,65535
10005668:	10840018 	cmpnei	r2,r2,4096
1000566c:	1000091e 	bne	r2,zero,10005694 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10005670:	01005104 	movi	r4,324
10005674:	000b883a 	mov	r5,zero
10005678:	00045fc0 	call	100045fc <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000567c:	0001883a 	nop
10005680:	010000c4 	movi	r4,3
10005684:	00002c00 	call	100002c0 <IO_read>
10005688:	10bfffcc 	andi	r2,r2,65535
1000568c:	1080040c 	andi	r2,r2,16
10005690:	103ffb26 	beq	r2,zero,10005680 <__alt_data_end+0xf8005680>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10005694:	01000084 	movi	r4,2
10005698:	01414204 	movi	r5,1288
1000569c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100056a0:	0009883a 	mov	r4,zero
100056a4:	00002c00 	call	100002c0 <IO_read>
100056a8:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
100056ac:	e0bfff0b 	ldhu	r2,-4(fp)
}
100056b0:	e037883a 	mov	sp,fp
100056b4:	dfc00117 	ldw	ra,4(sp)
100056b8:	df000017 	ldw	fp,0(sp)
100056bc:	dec00204 	addi	sp,sp,8
100056c0:	f800283a 	ret

100056c4 <UsbPrintMem>:


void UsbPrintMem()
{
100056c4:	defffc04 	addi	sp,sp,-16
100056c8:	dfc00315 	stw	ra,12(sp)
100056cc:	df000215 	stw	fp,8(sp)
100056d0:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
100056d4:	01000084 	movi	r4,2
100056d8:	01414004 	movi	r5,1280
100056dc:	00002480 	call	10000248 <IO_write>
	for (i = 0; i <= 200; i += 2)
100056e0:	e03ffe15 	stw	zero,-8(fp)
100056e4:	00000e06 	br	10005720 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
100056e8:	0009883a 	mov	r4,zero
100056ec:	00002c00 	call	100002c0 <IO_read>
100056f0:	10bfffcc 	andi	r2,r2,65535
100056f4:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
100056f8:	e0bffe17 	ldw	r2,-8(fp)
100056fc:	10814004 	addi	r2,r2,1280
10005700:	01040074 	movhi	r4,4097
10005704:	211ef204 	addi	r4,r4,31688
10005708:	100b883a 	mov	r5,r2
1000570c:	e1bfff17 	ldw	r6,-4(fp)
10005710:	0007b380 	call	10007b38 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10005714:	e0bffe17 	ldw	r2,-8(fp)
10005718:	10800084 	addi	r2,r2,2
1000571c:	e0bffe15 	stw	r2,-8(fp)
10005720:	e0bffe17 	ldw	r2,-8(fp)
10005724:	10803250 	cmplti	r2,r2,201
10005728:	103fef1e 	bne	r2,zero,100056e8 <__alt_data_end+0xf80056e8>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
1000572c:	e037883a 	mov	sp,fp
10005730:	dfc00117 	ldw	ra,4(sp)
10005734:	df000017 	ldw	fp,0(sp)
10005738:	dec00204 	addi	sp,sp,8
1000573c:	f800283a 	ret

10005740 <udivmodsi4>:
10005740:	2900182e 	bgeu	r5,r4,100057a4 <udivmodsi4+0x64>
10005744:	28001716 	blt	r5,zero,100057a4 <udivmodsi4+0x64>
10005748:	00800804 	movi	r2,32
1000574c:	00c00044 	movi	r3,1
10005750:	00000206 	br	1000575c <udivmodsi4+0x1c>
10005754:	10001126 	beq	r2,zero,1000579c <udivmodsi4+0x5c>
10005758:	28000516 	blt	r5,zero,10005770 <udivmodsi4+0x30>
1000575c:	294b883a 	add	r5,r5,r5
10005760:	10bfffc4 	addi	r2,r2,-1
10005764:	18c7883a 	add	r3,r3,r3
10005768:	293ffa36 	bltu	r5,r4,10005754 <__alt_data_end+0xf8005754>
1000576c:	18000b26 	beq	r3,zero,1000579c <udivmodsi4+0x5c>
10005770:	0005883a 	mov	r2,zero
10005774:	21400236 	bltu	r4,r5,10005780 <udivmodsi4+0x40>
10005778:	2149c83a 	sub	r4,r4,r5
1000577c:	10c4b03a 	or	r2,r2,r3
10005780:	1806d07a 	srli	r3,r3,1
10005784:	280ad07a 	srli	r5,r5,1
10005788:	183ffa1e 	bne	r3,zero,10005774 <__alt_data_end+0xf8005774>
1000578c:	3000011e 	bne	r6,zero,10005794 <udivmodsi4+0x54>
10005790:	f800283a 	ret
10005794:	2005883a 	mov	r2,r4
10005798:	f800283a 	ret
1000579c:	0005883a 	mov	r2,zero
100057a0:	003ffa06 	br	1000578c <__alt_data_end+0xf800578c>
100057a4:	00c00044 	movi	r3,1
100057a8:	003ff106 	br	10005770 <__alt_data_end+0xf8005770>

100057ac <__divsi3>:
100057ac:	defffe04 	addi	sp,sp,-8
100057b0:	dfc00115 	stw	ra,4(sp)
100057b4:	dc000015 	stw	r16,0(sp)
100057b8:	20000b16 	blt	r4,zero,100057e8 <__divsi3+0x3c>
100057bc:	0021883a 	mov	r16,zero
100057c0:	28000c16 	blt	r5,zero,100057f4 <__divsi3+0x48>
100057c4:	000d883a 	mov	r6,zero
100057c8:	00057400 	call	10005740 <udivmodsi4>
100057cc:	0407c83a 	sub	r3,zero,r16
100057d0:	1884f03a 	xor	r2,r3,r2
100057d4:	1405883a 	add	r2,r2,r16
100057d8:	dfc00117 	ldw	ra,4(sp)
100057dc:	dc000017 	ldw	r16,0(sp)
100057e0:	dec00204 	addi	sp,sp,8
100057e4:	f800283a 	ret
100057e8:	0109c83a 	sub	r4,zero,r4
100057ec:	04000044 	movi	r16,1
100057f0:	283ff40e 	bge	r5,zero,100057c4 <__alt_data_end+0xf80057c4>
100057f4:	014bc83a 	sub	r5,zero,r5
100057f8:	8400005c 	xori	r16,r16,1
100057fc:	003ff106 	br	100057c4 <__alt_data_end+0xf80057c4>

10005800 <__modsi3>:
10005800:	defffd04 	addi	sp,sp,-12
10005804:	dfc00215 	stw	ra,8(sp)
10005808:	dc400115 	stw	r17,4(sp)
1000580c:	dc000015 	stw	r16,0(sp)
10005810:	20000c16 	blt	r4,zero,10005844 <__modsi3+0x44>
10005814:	0023883a 	mov	r17,zero
10005818:	0021883a 	mov	r16,zero
1000581c:	28000d16 	blt	r5,zero,10005854 <__modsi3+0x54>
10005820:	01800044 	movi	r6,1
10005824:	00057400 	call	10005740 <udivmodsi4>
10005828:	1404f03a 	xor	r2,r2,r16
1000582c:	8885883a 	add	r2,r17,r2
10005830:	dfc00217 	ldw	ra,8(sp)
10005834:	dc400117 	ldw	r17,4(sp)
10005838:	dc000017 	ldw	r16,0(sp)
1000583c:	dec00304 	addi	sp,sp,12
10005840:	f800283a 	ret
10005844:	0109c83a 	sub	r4,zero,r4
10005848:	04400044 	movi	r17,1
1000584c:	043fffc4 	movi	r16,-1
10005850:	283ff30e 	bge	r5,zero,10005820 <__alt_data_end+0xf8005820>
10005854:	014bc83a 	sub	r5,zero,r5
10005858:	003ff106 	br	10005820 <__alt_data_end+0xf8005820>

1000585c <__udivsi3>:
1000585c:	000d883a 	mov	r6,zero
10005860:	00057401 	jmpi	10005740 <udivmodsi4>

10005864 <__umodsi3>:
10005864:	01800044 	movi	r6,1
10005868:	00057401 	jmpi	10005740 <udivmodsi4>

1000586c <__mulsi3>:
1000586c:	0005883a 	mov	r2,zero
10005870:	20000726 	beq	r4,zero,10005890 <__mulsi3+0x24>
10005874:	20c0004c 	andi	r3,r4,1
10005878:	2008d07a 	srli	r4,r4,1
1000587c:	18000126 	beq	r3,zero,10005884 <__mulsi3+0x18>
10005880:	1145883a 	add	r2,r2,r5
10005884:	294b883a 	add	r5,r5,r5
10005888:	203ffa1e 	bne	r4,zero,10005874 <__alt_data_end+0xf8005874>
1000588c:	f800283a 	ret
10005890:	f800283a 	ret

10005894 <__addsf3>:
10005894:	defffc04 	addi	sp,sp,-16
10005898:	2004d7fa 	srli	r2,r4,31
1000589c:	280ed5fa 	srli	r7,r5,23
100058a0:	dc000015 	stw	r16,0(sp)
100058a4:	01802034 	movhi	r6,128
100058a8:	2020d5fa 	srli	r16,r4,23
100058ac:	31bfffc4 	addi	r6,r6,-1
100058b0:	2810d7fa 	srli	r8,r5,31
100058b4:	3108703a 	and	r4,r6,r4
100058b8:	dc800215 	stw	r18,8(sp)
100058bc:	314c703a 	and	r6,r6,r5
100058c0:	84003fcc 	andi	r16,r16,255
100058c4:	200690fa 	slli	r3,r4,3
100058c8:	dfc00315 	stw	ra,12(sp)
100058cc:	39003fcc 	andi	r4,r7,255
100058d0:	dc400115 	stw	r17,4(sp)
100058d4:	14803fcc 	andi	r18,r2,255
100058d8:	300c90fa 	slli	r6,r6,3
100058dc:	810bc83a 	sub	r5,r16,r4
100058e0:	92004826 	beq	r18,r8,10005a04 <__addsf3+0x170>
100058e4:	01406c0e 	bge	zero,r5,10005a98 <__addsf3+0x204>
100058e8:	20001e1e 	bne	r4,zero,10005964 <__addsf3+0xd0>
100058ec:	3000611e 	bne	r6,zero,10005a74 <__addsf3+0x1e0>
100058f0:	188001cc 	andi	r2,r3,7
100058f4:	10000426 	beq	r2,zero,10005908 <__addsf3+0x74>
100058f8:	190003cc 	andi	r4,r3,15
100058fc:	00800104 	movi	r2,4
10005900:	20800126 	beq	r4,r2,10005908 <__addsf3+0x74>
10005904:	18c00104 	addi	r3,r3,4
10005908:	1901002c 	andhi	r4,r3,1024
1000590c:	9005883a 	mov	r2,r18
10005910:	20003426 	beq	r4,zero,100059e4 <__addsf3+0x150>
10005914:	81400044 	addi	r5,r16,1
10005918:	01003fc4 	movi	r4,255
1000591c:	29006926 	beq	r5,r4,10005ac4 <__addsf3+0x230>
10005920:	180691ba 	slli	r3,r3,6
10005924:	1808d27a 	srli	r4,r3,9
10005928:	29403fcc 	andi	r5,r5,255
1000592c:	280a95fa 	slli	r5,r5,23
10005930:	10803fcc 	andi	r2,r2,255
10005934:	00c02034 	movhi	r3,128
10005938:	100497fa 	slli	r2,r2,31
1000593c:	18ffffc4 	addi	r3,r3,-1
10005940:	20c6703a 	and	r3,r4,r3
10005944:	1946b03a 	or	r3,r3,r5
10005948:	1884b03a 	or	r2,r3,r2
1000594c:	dfc00317 	ldw	ra,12(sp)
10005950:	dc800217 	ldw	r18,8(sp)
10005954:	dc400117 	ldw	r17,4(sp)
10005958:	dc000017 	ldw	r16,0(sp)
1000595c:	dec00404 	addi	sp,sp,16
10005960:	f800283a 	ret
10005964:	00803fc4 	movi	r2,255
10005968:	80bfe126 	beq	r16,r2,100058f0 <__alt_data_end+0xf80058f0>
1000596c:	31810034 	orhi	r6,r6,1024
10005970:	008006c4 	movi	r2,27
10005974:	11405b0e 	bge	r2,r5,10005ae4 <__addsf3+0x250>
10005978:	01400044 	movi	r5,1
1000597c:	1947c83a 	sub	r3,r3,r5
10005980:	1881002c 	andhi	r2,r3,1024
10005984:	10001426 	beq	r2,zero,100059d8 <__addsf3+0x144>
10005988:	04410034 	movhi	r17,1024
1000598c:	8c7fffc4 	addi	r17,r17,-1
10005990:	1c62703a 	and	r17,r3,r17
10005994:	8809883a 	mov	r4,r17
10005998:	00079700 	call	10007970 <__clzsi2>
1000599c:	10bffec4 	addi	r2,r2,-5
100059a0:	88a2983a 	sll	r17,r17,r2
100059a4:	14004a16 	blt	r2,r16,10005ad0 <__addsf3+0x23c>
100059a8:	140bc83a 	sub	r5,r2,r16
100059ac:	00c007c4 	movi	r3,31
100059b0:	1947c83a 	sub	r3,r3,r5
100059b4:	88c6983a 	sll	r3,r17,r3
100059b8:	29400044 	addi	r5,r5,1
100059bc:	8962d83a 	srl	r17,r17,r5
100059c0:	1806c03a 	cmpne	r3,r3,zero
100059c4:	0021883a 	mov	r16,zero
100059c8:	1c46b03a 	or	r3,r3,r17
100059cc:	003fc806 	br	100058f0 <__alt_data_end+0xf80058f0>
100059d0:	1000e526 	beq	r2,zero,10005d68 <__addsf3+0x4d4>
100059d4:	1007883a 	mov	r3,r2
100059d8:	188001cc 	andi	r2,r3,7
100059dc:	103fc61e 	bne	r2,zero,100058f8 <__alt_data_end+0xf80058f8>
100059e0:	9005883a 	mov	r2,r18
100059e4:	01003fc4 	movi	r4,255
100059e8:	1806d0fa 	srli	r3,r3,3
100059ec:	81001a26 	beq	r16,r4,10005a58 <__addsf3+0x1c4>
100059f0:	01002034 	movhi	r4,128
100059f4:	213fffc4 	addi	r4,r4,-1
100059f8:	800b883a 	mov	r5,r16
100059fc:	1908703a 	and	r4,r3,r4
10005a00:	003fc906 	br	10005928 <__alt_data_end+0xf8005928>
10005a04:	01403e0e 	bge	zero,r5,10005b00 <__addsf3+0x26c>
10005a08:	20001e26 	beq	r4,zero,10005a84 <__addsf3+0x1f0>
10005a0c:	01003fc4 	movi	r4,255
10005a10:	813fb726 	beq	r16,r4,100058f0 <__alt_data_end+0xf80058f0>
10005a14:	31810034 	orhi	r6,r6,1024
10005a18:	010006c4 	movi	r4,27
10005a1c:	2140570e 	bge	r4,r5,10005b7c <__addsf3+0x2e8>
10005a20:	01400044 	movi	r5,1
10005a24:	1947883a 	add	r3,r3,r5
10005a28:	1901002c 	andhi	r4,r3,1024
10005a2c:	203fea26 	beq	r4,zero,100059d8 <__alt_data_end+0xf80059d8>
10005a30:	84000044 	addi	r16,r16,1
10005a34:	01003fc4 	movi	r4,255
10005a38:	81007526 	beq	r16,r4,10005c10 <__addsf3+0x37c>
10005a3c:	00bf0034 	movhi	r2,64512
10005a40:	10bfffc4 	addi	r2,r2,-1
10005a44:	1900004c 	andi	r4,r3,1
10005a48:	1886703a 	and	r3,r3,r2
10005a4c:	1806d07a 	srli	r3,r3,1
10005a50:	1906b03a 	or	r3,r3,r4
10005a54:	003fa606 	br	100058f0 <__alt_data_end+0xf80058f0>
10005a58:	18001a26 	beq	r3,zero,10005ac4 <__addsf3+0x230>
10005a5c:	19001034 	orhi	r4,r3,64
10005a60:	00c02034 	movhi	r3,128
10005a64:	18ffffc4 	addi	r3,r3,-1
10005a68:	017fffc4 	movi	r5,-1
10005a6c:	20c8703a 	and	r4,r4,r3
10005a70:	003fad06 	br	10005928 <__alt_data_end+0xf8005928>
10005a74:	297fffc4 	addi	r5,r5,-1
10005a78:	28002c1e 	bne	r5,zero,10005b2c <__addsf3+0x298>
10005a7c:	1987c83a 	sub	r3,r3,r6
10005a80:	003fbf06 	br	10005980 <__alt_data_end+0xf8005980>
10005a84:	303f9a26 	beq	r6,zero,100058f0 <__alt_data_end+0xf80058f0>
10005a88:	297fffc4 	addi	r5,r5,-1
10005a8c:	28004b1e 	bne	r5,zero,10005bbc <__addsf3+0x328>
10005a90:	1987883a 	add	r3,r3,r6
10005a94:	003fe406 	br	10005a28 <__alt_data_end+0xf8005a28>
10005a98:	2800271e 	bne	r5,zero,10005b38 <__addsf3+0x2a4>
10005a9c:	80800044 	addi	r2,r16,1
10005aa0:	10803fcc 	andi	r2,r2,255
10005aa4:	01000044 	movi	r4,1
10005aa8:	2080520e 	bge	r4,r2,10005bf4 <__addsf3+0x360>
10005aac:	19a3c83a 	sub	r17,r3,r6
10005ab0:	8881002c 	andhi	r2,r17,1024
10005ab4:	10002c26 	beq	r2,zero,10005b68 <__addsf3+0x2d4>
10005ab8:	30e3c83a 	sub	r17,r6,r3
10005abc:	4025883a 	mov	r18,r8
10005ac0:	003fb406 	br	10005994 <__alt_data_end+0xf8005994>
10005ac4:	017fffc4 	movi	r5,-1
10005ac8:	0009883a 	mov	r4,zero
10005acc:	003f9606 	br	10005928 <__alt_data_end+0xf8005928>
10005ad0:	00ff0034 	movhi	r3,64512
10005ad4:	18ffffc4 	addi	r3,r3,-1
10005ad8:	80a1c83a 	sub	r16,r16,r2
10005adc:	88c6703a 	and	r3,r17,r3
10005ae0:	003f8306 	br	100058f0 <__alt_data_end+0xf80058f0>
10005ae4:	00800804 	movi	r2,32
10005ae8:	1145c83a 	sub	r2,r2,r5
10005aec:	3084983a 	sll	r2,r6,r2
10005af0:	314cd83a 	srl	r6,r6,r5
10005af4:	100ac03a 	cmpne	r5,r2,zero
10005af8:	298ab03a 	or	r5,r5,r6
10005afc:	003f9f06 	br	1000597c <__alt_data_end+0xf800597c>
10005b00:	2800451e 	bne	r5,zero,10005c18 <__addsf3+0x384>
10005b04:	81000044 	addi	r4,r16,1
10005b08:	21c03fcc 	andi	r7,r4,255
10005b0c:	01400044 	movi	r5,1
10005b10:	29c02d0e 	bge	r5,r7,10005bc8 <__addsf3+0x334>
10005b14:	01403fc4 	movi	r5,255
10005b18:	21403c26 	beq	r4,r5,10005c0c <__addsf3+0x378>
10005b1c:	30c7883a 	add	r3,r6,r3
10005b20:	1806d07a 	srli	r3,r3,1
10005b24:	2021883a 	mov	r16,r4
10005b28:	003f7106 	br	100058f0 <__alt_data_end+0xf80058f0>
10005b2c:	00803fc4 	movi	r2,255
10005b30:	80bf8f1e 	bne	r16,r2,10005970 <__alt_data_end+0xf8005970>
10005b34:	003f6e06 	br	100058f0 <__alt_data_end+0xf80058f0>
10005b38:	80001726 	beq	r16,zero,10005b98 <__addsf3+0x304>
10005b3c:	00803fc4 	movi	r2,255
10005b40:	20801a26 	beq	r4,r2,10005bac <__addsf3+0x318>
10005b44:	014bc83a 	sub	r5,zero,r5
10005b48:	18c10034 	orhi	r3,r3,1024
10005b4c:	008006c4 	movi	r2,27
10005b50:	1140430e 	bge	r2,r5,10005c60 <__addsf3+0x3cc>
10005b54:	00c00044 	movi	r3,1
10005b58:	30c7c83a 	sub	r3,r6,r3
10005b5c:	2021883a 	mov	r16,r4
10005b60:	4025883a 	mov	r18,r8
10005b64:	003f8606 	br	10005980 <__alt_data_end+0xf8005980>
10005b68:	883f8a1e 	bne	r17,zero,10005994 <__alt_data_end+0xf8005994>
10005b6c:	0007883a 	mov	r3,zero
10005b70:	0005883a 	mov	r2,zero
10005b74:	0021883a 	mov	r16,zero
10005b78:	003f9a06 	br	100059e4 <__alt_data_end+0xf80059e4>
10005b7c:	01000804 	movi	r4,32
10005b80:	2149c83a 	sub	r4,r4,r5
10005b84:	3108983a 	sll	r4,r6,r4
10005b88:	314cd83a 	srl	r6,r6,r5
10005b8c:	200ac03a 	cmpne	r5,r4,zero
10005b90:	298ab03a 	or	r5,r5,r6
10005b94:	003fa306 	br	10005a24 <__alt_data_end+0xf8005a24>
10005b98:	18000426 	beq	r3,zero,10005bac <__addsf3+0x318>
10005b9c:	014a303a 	nor	r5,zero,r5
10005ba0:	283fed26 	beq	r5,zero,10005b58 <__alt_data_end+0xf8005b58>
10005ba4:	00803fc4 	movi	r2,255
10005ba8:	20bfe81e 	bne	r4,r2,10005b4c <__alt_data_end+0xf8005b4c>
10005bac:	3007883a 	mov	r3,r6
10005bb0:	2021883a 	mov	r16,r4
10005bb4:	4025883a 	mov	r18,r8
10005bb8:	003f4d06 	br	100058f0 <__alt_data_end+0xf80058f0>
10005bbc:	01003fc4 	movi	r4,255
10005bc0:	813f951e 	bne	r16,r4,10005a18 <__alt_data_end+0xf8005a18>
10005bc4:	003f4a06 	br	100058f0 <__alt_data_end+0xf80058f0>
10005bc8:	8000471e 	bne	r16,zero,10005ce8 <__addsf3+0x454>
10005bcc:	18006126 	beq	r3,zero,10005d54 <__addsf3+0x4c0>
10005bd0:	303f4726 	beq	r6,zero,100058f0 <__alt_data_end+0xf80058f0>
10005bd4:	1987883a 	add	r3,r3,r6
10005bd8:	1881002c 	andhi	r2,r3,1024
10005bdc:	103f7e26 	beq	r2,zero,100059d8 <__alt_data_end+0xf80059d8>
10005be0:	00bf0034 	movhi	r2,64512
10005be4:	10bfffc4 	addi	r2,r2,-1
10005be8:	2821883a 	mov	r16,r5
10005bec:	1886703a 	and	r3,r3,r2
10005bf0:	003f3f06 	br	100058f0 <__alt_data_end+0xf80058f0>
10005bf4:	8000141e 	bne	r16,zero,10005c48 <__addsf3+0x3b4>
10005bf8:	1800311e 	bne	r3,zero,10005cc0 <__addsf3+0x42c>
10005bfc:	30004626 	beq	r6,zero,10005d18 <__addsf3+0x484>
10005c00:	3007883a 	mov	r3,r6
10005c04:	4025883a 	mov	r18,r8
10005c08:	003f3906 	br	100058f0 <__alt_data_end+0xf80058f0>
10005c0c:	2021883a 	mov	r16,r4
10005c10:	0007883a 	mov	r3,zero
10005c14:	003f7306 	br	100059e4 <__alt_data_end+0xf80059e4>
10005c18:	8000181e 	bne	r16,zero,10005c7c <__addsf3+0x3e8>
10005c1c:	18002f26 	beq	r3,zero,10005cdc <__addsf3+0x448>
10005c20:	014a303a 	nor	r5,zero,r5
10005c24:	28000526 	beq	r5,zero,10005c3c <__addsf3+0x3a8>
10005c28:	01c03fc4 	movi	r7,255
10005c2c:	21c02b26 	beq	r4,r7,10005cdc <__addsf3+0x448>
10005c30:	01c006c4 	movi	r7,27
10005c34:	3940400e 	bge	r7,r5,10005d38 <__addsf3+0x4a4>
10005c38:	00c00044 	movi	r3,1
10005c3c:	1987883a 	add	r3,r3,r6
10005c40:	2021883a 	mov	r16,r4
10005c44:	003f7806 	br	10005a28 <__alt_data_end+0xf8005a28>
10005c48:	1800111e 	bne	r3,zero,10005c90 <__addsf3+0x3fc>
10005c4c:	30003526 	beq	r6,zero,10005d24 <__addsf3+0x490>
10005c50:	3007883a 	mov	r3,r6
10005c54:	4025883a 	mov	r18,r8
10005c58:	04003fc4 	movi	r16,255
10005c5c:	003f2406 	br	100058f0 <__alt_data_end+0xf80058f0>
10005c60:	00800804 	movi	r2,32
10005c64:	1145c83a 	sub	r2,r2,r5
10005c68:	1884983a 	sll	r2,r3,r2
10005c6c:	194ad83a 	srl	r5,r3,r5
10005c70:	1006c03a 	cmpne	r3,r2,zero
10005c74:	1946b03a 	or	r3,r3,r5
10005c78:	003fb706 	br	10005b58 <__alt_data_end+0xf8005b58>
10005c7c:	01c03fc4 	movi	r7,255
10005c80:	21c01626 	beq	r4,r7,10005cdc <__addsf3+0x448>
10005c84:	014bc83a 	sub	r5,zero,r5
10005c88:	18c10034 	orhi	r3,r3,1024
10005c8c:	003fe806 	br	10005c30 <__alt_data_end+0xf8005c30>
10005c90:	30001f26 	beq	r6,zero,10005d10 <__addsf3+0x47c>
10005c94:	1806d0fa 	srli	r3,r3,3
10005c98:	1880102c 	andhi	r2,r3,64
10005c9c:	10000526 	beq	r2,zero,10005cb4 <__addsf3+0x420>
10005ca0:	300cd0fa 	srli	r6,r6,3
10005ca4:	3080102c 	andhi	r2,r6,64
10005ca8:	1000021e 	bne	r2,zero,10005cb4 <__addsf3+0x420>
10005cac:	3007883a 	mov	r3,r6
10005cb0:	4025883a 	mov	r18,r8
10005cb4:	180690fa 	slli	r3,r3,3
10005cb8:	04003fc4 	movi	r16,255
10005cbc:	003f0c06 	br	100058f0 <__alt_data_end+0xf80058f0>
10005cc0:	303f0b26 	beq	r6,zero,100058f0 <__alt_data_end+0xf80058f0>
10005cc4:	1985c83a 	sub	r2,r3,r6
10005cc8:	1101002c 	andhi	r4,r2,1024
10005ccc:	203f4026 	beq	r4,zero,100059d0 <__alt_data_end+0xf80059d0>
10005cd0:	30c7c83a 	sub	r3,r6,r3
10005cd4:	4025883a 	mov	r18,r8
10005cd8:	003f0506 	br	100058f0 <__alt_data_end+0xf80058f0>
10005cdc:	3007883a 	mov	r3,r6
10005ce0:	2021883a 	mov	r16,r4
10005ce4:	003f0206 	br	100058f0 <__alt_data_end+0xf80058f0>
10005ce8:	18001c26 	beq	r3,zero,10005d5c <__addsf3+0x4c8>
10005cec:	30000826 	beq	r6,zero,10005d10 <__addsf3+0x47c>
10005cf0:	1806d0fa 	srli	r3,r3,3
10005cf4:	1880102c 	andhi	r2,r3,64
10005cf8:	103fee26 	beq	r2,zero,10005cb4 <__alt_data_end+0xf8005cb4>
10005cfc:	300cd0fa 	srli	r6,r6,3
10005d00:	3080102c 	andhi	r2,r6,64
10005d04:	103feb1e 	bne	r2,zero,10005cb4 <__alt_data_end+0xf8005cb4>
10005d08:	3007883a 	mov	r3,r6
10005d0c:	003fe906 	br	10005cb4 <__alt_data_end+0xf8005cb4>
10005d10:	04003fc4 	movi	r16,255
10005d14:	003ef606 	br	100058f0 <__alt_data_end+0xf80058f0>
10005d18:	8007883a 	mov	r3,r16
10005d1c:	0005883a 	mov	r2,zero
10005d20:	003f3006 	br	100059e4 <__alt_data_end+0xf80059e4>
10005d24:	00c10034 	movhi	r3,1024
10005d28:	0005883a 	mov	r2,zero
10005d2c:	18fffe04 	addi	r3,r3,-8
10005d30:	04003fc4 	movi	r16,255
10005d34:	003f2b06 	br	100059e4 <__alt_data_end+0xf80059e4>
10005d38:	01c00804 	movi	r7,32
10005d3c:	394fc83a 	sub	r7,r7,r5
10005d40:	19ce983a 	sll	r7,r3,r7
10005d44:	194ad83a 	srl	r5,r3,r5
10005d48:	3806c03a 	cmpne	r3,r7,zero
10005d4c:	1946b03a 	or	r3,r3,r5
10005d50:	003fba06 	br	10005c3c <__alt_data_end+0xf8005c3c>
10005d54:	3007883a 	mov	r3,r6
10005d58:	003ee506 	br	100058f0 <__alt_data_end+0xf80058f0>
10005d5c:	3007883a 	mov	r3,r6
10005d60:	04003fc4 	movi	r16,255
10005d64:	003ee206 	br	100058f0 <__alt_data_end+0xf80058f0>
10005d68:	0007883a 	mov	r3,zero
10005d6c:	0005883a 	mov	r2,zero
10005d70:	003f1c06 	br	100059e4 <__alt_data_end+0xf80059e4>

10005d74 <__gesf2>:
10005d74:	2004d5fa 	srli	r2,r4,23
10005d78:	2806d5fa 	srli	r3,r5,23
10005d7c:	01802034 	movhi	r6,128
10005d80:	31bfffc4 	addi	r6,r6,-1
10005d84:	10803fcc 	andi	r2,r2,255
10005d88:	01c03fc4 	movi	r7,255
10005d8c:	3110703a 	and	r8,r6,r4
10005d90:	18c03fcc 	andi	r3,r3,255
10005d94:	314c703a 	and	r6,r6,r5
10005d98:	2008d7fa 	srli	r4,r4,31
10005d9c:	280ad7fa 	srli	r5,r5,31
10005da0:	11c00926 	beq	r2,r7,10005dc8 <__gesf2+0x54>
10005da4:	19c01226 	beq	r3,r7,10005df0 <__gesf2+0x7c>
10005da8:	1000091e 	bne	r2,zero,10005dd0 <__gesf2+0x5c>
10005dac:	4013003a 	cmpeq	r9,r8,zero
10005db0:	480f883a 	mov	r7,r9
10005db4:	1800091e 	bne	r3,zero,10005ddc <__gesf2+0x68>
10005db8:	3000081e 	bne	r6,zero,10005ddc <__gesf2+0x68>
10005dbc:	48001026 	beq	r9,zero,10005e00 <__gesf2+0x8c>
10005dc0:	0005883a 	mov	r2,zero
10005dc4:	f800283a 	ret
10005dc8:	4000161e 	bne	r8,zero,10005e24 <__gesf2+0xb0>
10005dcc:	18800826 	beq	r3,r2,10005df0 <__gesf2+0x7c>
10005dd0:	1800091e 	bne	r3,zero,10005df8 <__gesf2+0x84>
10005dd4:	000f883a 	mov	r7,zero
10005dd8:	30000926 	beq	r6,zero,10005e00 <__gesf2+0x8c>
10005ddc:	29403fcc 	andi	r5,r5,255
10005de0:	38000626 	beq	r7,zero,10005dfc <__gesf2+0x88>
10005de4:	2800071e 	bne	r5,zero,10005e04 <__gesf2+0x90>
10005de8:	00bfffc4 	movi	r2,-1
10005dec:	f800283a 	ret
10005df0:	30000c1e 	bne	r6,zero,10005e24 <__gesf2+0xb0>
10005df4:	103fed26 	beq	r2,zero,10005dac <__alt_data_end+0xf8005dac>
10005df8:	29403fcc 	andi	r5,r5,255
10005dfc:	21400326 	beq	r4,r5,10005e0c <__gesf2+0x98>
10005e00:	203ff91e 	bne	r4,zero,10005de8 <__alt_data_end+0xf8005de8>
10005e04:	00800044 	movi	r2,1
10005e08:	f800283a 	ret
10005e0c:	18bffc16 	blt	r3,r2,10005e00 <__alt_data_end+0xf8005e00>
10005e10:	10c00216 	blt	r2,r3,10005e1c <__gesf2+0xa8>
10005e14:	323ffa36 	bltu	r6,r8,10005e00 <__alt_data_end+0xf8005e00>
10005e18:	41bfe92e 	bgeu	r8,r6,10005dc0 <__alt_data_end+0xf8005dc0>
10005e1c:	203ff226 	beq	r4,zero,10005de8 <__alt_data_end+0xf8005de8>
10005e20:	003ff806 	br	10005e04 <__alt_data_end+0xf8005e04>
10005e24:	00bfff84 	movi	r2,-2
10005e28:	f800283a 	ret

10005e2c <__lesf2>:
10005e2c:	2004d5fa 	srli	r2,r4,23
10005e30:	280cd5fa 	srli	r6,r5,23
10005e34:	00c02034 	movhi	r3,128
10005e38:	18ffffc4 	addi	r3,r3,-1
10005e3c:	10803fcc 	andi	r2,r2,255
10005e40:	01c03fc4 	movi	r7,255
10005e44:	1910703a 	and	r8,r3,r4
10005e48:	31803fcc 	andi	r6,r6,255
10005e4c:	1946703a 	and	r3,r3,r5
10005e50:	2008d7fa 	srli	r4,r4,31
10005e54:	280ad7fa 	srli	r5,r5,31
10005e58:	11c00a26 	beq	r2,r7,10005e84 <__lesf2+0x58>
10005e5c:	31c01526 	beq	r6,r7,10005eb4 <__lesf2+0x88>
10005e60:	10000a1e 	bne	r2,zero,10005e8c <__lesf2+0x60>
10005e64:	4013003a 	cmpeq	r9,r8,zero
10005e68:	480f883a 	mov	r7,r9
10005e6c:	30000d26 	beq	r6,zero,10005ea4 <__lesf2+0x78>
10005e70:	29403fcc 	andi	r5,r5,255
10005e74:	38001426 	beq	r7,zero,10005ec8 <__lesf2+0x9c>
10005e78:	2800081e 	bne	r5,zero,10005e9c <__lesf2+0x70>
10005e7c:	00bfffc4 	movi	r2,-1
10005e80:	f800283a 	ret
10005e84:	40000c1e 	bne	r8,zero,10005eb8 <__lesf2+0x8c>
10005e88:	30800a26 	beq	r6,r2,10005eb4 <__lesf2+0x88>
10005e8c:	30000d1e 	bne	r6,zero,10005ec4 <__lesf2+0x98>
10005e90:	000f883a 	mov	r7,zero
10005e94:	183ff61e 	bne	r3,zero,10005e70 <__alt_data_end+0xf8005e70>
10005e98:	203ff81e 	bne	r4,zero,10005e7c <__alt_data_end+0xf8005e7c>
10005e9c:	00800044 	movi	r2,1
10005ea0:	f800283a 	ret
10005ea4:	183ff21e 	bne	r3,zero,10005e70 <__alt_data_end+0xf8005e70>
10005ea8:	483ffb26 	beq	r9,zero,10005e98 <__alt_data_end+0xf8005e98>
10005eac:	0005883a 	mov	r2,zero
10005eb0:	f800283a 	ret
10005eb4:	18000226 	beq	r3,zero,10005ec0 <__lesf2+0x94>
10005eb8:	00800084 	movi	r2,2
10005ebc:	f800283a 	ret
10005ec0:	103fe826 	beq	r2,zero,10005e64 <__alt_data_end+0xf8005e64>
10005ec4:	29403fcc 	andi	r5,r5,255
10005ec8:	217ff31e 	bne	r4,r5,10005e98 <__alt_data_end+0xf8005e98>
10005ecc:	30bff216 	blt	r6,r2,10005e98 <__alt_data_end+0xf8005e98>
10005ed0:	11800216 	blt	r2,r6,10005edc <__lesf2+0xb0>
10005ed4:	1a3ff036 	bltu	r3,r8,10005e98 <__alt_data_end+0xf8005e98>
10005ed8:	40fff42e 	bgeu	r8,r3,10005eac <__alt_data_end+0xf8005eac>
10005edc:	203fe726 	beq	r4,zero,10005e7c <__alt_data_end+0xf8005e7c>
10005ee0:	003fee06 	br	10005e9c <__alt_data_end+0xf8005e9c>

10005ee4 <__subsf3>:
10005ee4:	defffc04 	addi	sp,sp,-16
10005ee8:	280ed5fa 	srli	r7,r5,23
10005eec:	02002034 	movhi	r8,128
10005ef0:	280d883a 	mov	r6,r5
10005ef4:	423fffc4 	addi	r8,r8,-1
10005ef8:	200ad5fa 	srli	r5,r4,23
10005efc:	dc400115 	stw	r17,4(sp)
10005f00:	2022d7fa 	srli	r17,r4,31
10005f04:	4108703a 	and	r4,r8,r4
10005f08:	dc000015 	stw	r16,0(sp)
10005f0c:	4190703a 	and	r8,r8,r6
10005f10:	200690fa 	slli	r3,r4,3
10005f14:	dfc00315 	stw	ra,12(sp)
10005f18:	dc800215 	stw	r18,8(sp)
10005f1c:	39c03fcc 	andi	r7,r7,255
10005f20:	01003fc4 	movi	r4,255
10005f24:	8805883a 	mov	r2,r17
10005f28:	2c003fcc 	andi	r16,r5,255
10005f2c:	8c403fcc 	andi	r17,r17,255
10005f30:	300cd7fa 	srli	r6,r6,31
10005f34:	401090fa 	slli	r8,r8,3
10005f38:	39006126 	beq	r7,r4,100060c0 <__subsf3+0x1dc>
10005f3c:	3180005c 	xori	r6,r6,1
10005f40:	89804926 	beq	r17,r6,10006068 <__subsf3+0x184>
10005f44:	81c5c83a 	sub	r2,r16,r7
10005f48:	0080710e 	bge	zero,r2,10006110 <__subsf3+0x22c>
10005f4c:	38001e1e 	bne	r7,zero,10005fc8 <__subsf3+0xe4>
10005f50:	4000651e 	bne	r8,zero,100060e8 <__subsf3+0x204>
10005f54:	188001cc 	andi	r2,r3,7
10005f58:	10000426 	beq	r2,zero,10005f6c <__subsf3+0x88>
10005f5c:	190003cc 	andi	r4,r3,15
10005f60:	00800104 	movi	r2,4
10005f64:	20800126 	beq	r4,r2,10005f6c <__subsf3+0x88>
10005f68:	18c00104 	addi	r3,r3,4
10005f6c:	1901002c 	andhi	r4,r3,1024
10005f70:	8880004c 	andi	r2,r17,1
10005f74:	20003426 	beq	r4,zero,10006048 <__subsf3+0x164>
10005f78:	81400044 	addi	r5,r16,1
10005f7c:	01003fc4 	movi	r4,255
10005f80:	29006e26 	beq	r5,r4,1000613c <__subsf3+0x258>
10005f84:	180691ba 	slli	r3,r3,6
10005f88:	1808d27a 	srli	r4,r3,9
10005f8c:	29403fcc 	andi	r5,r5,255
10005f90:	280a95fa 	slli	r5,r5,23
10005f94:	10803fcc 	andi	r2,r2,255
10005f98:	00c02034 	movhi	r3,128
10005f9c:	100497fa 	slli	r2,r2,31
10005fa0:	18ffffc4 	addi	r3,r3,-1
10005fa4:	20c6703a 	and	r3,r4,r3
10005fa8:	1946b03a 	or	r3,r3,r5
10005fac:	1884b03a 	or	r2,r3,r2
10005fb0:	dfc00317 	ldw	ra,12(sp)
10005fb4:	dc800217 	ldw	r18,8(sp)
10005fb8:	dc400117 	ldw	r17,4(sp)
10005fbc:	dc000017 	ldw	r16,0(sp)
10005fc0:	dec00404 	addi	sp,sp,16
10005fc4:	f800283a 	ret
10005fc8:	01003fc4 	movi	r4,255
10005fcc:	813fe126 	beq	r16,r4,10005f54 <__alt_data_end+0xf8005f54>
10005fd0:	42010034 	orhi	r8,r8,1024
10005fd4:	010006c4 	movi	r4,27
10005fd8:	2080600e 	bge	r4,r2,1000615c <__subsf3+0x278>
10005fdc:	02000044 	movi	r8,1
10005fe0:	1a07c83a 	sub	r3,r3,r8
10005fe4:	1881002c 	andhi	r2,r3,1024
10005fe8:	10001426 	beq	r2,zero,1000603c <__subsf3+0x158>
10005fec:	04810034 	movhi	r18,1024
10005ff0:	94bfffc4 	addi	r18,r18,-1
10005ff4:	1ca4703a 	and	r18,r3,r18
10005ff8:	9009883a 	mov	r4,r18
10005ffc:	00079700 	call	10007970 <__clzsi2>
10006000:	10bffec4 	addi	r2,r2,-5
10006004:	90a4983a 	sll	r18,r18,r2
10006008:	14004f16 	blt	r2,r16,10006148 <__subsf3+0x264>
1000600c:	140bc83a 	sub	r5,r2,r16
10006010:	00c007c4 	movi	r3,31
10006014:	1947c83a 	sub	r3,r3,r5
10006018:	90c6983a 	sll	r3,r18,r3
1000601c:	29400044 	addi	r5,r5,1
10006020:	9164d83a 	srl	r18,r18,r5
10006024:	1806c03a 	cmpne	r3,r3,zero
10006028:	0021883a 	mov	r16,zero
1000602c:	1c86b03a 	or	r3,r3,r18
10006030:	003fc806 	br	10005f54 <__alt_data_end+0xf8005f54>
10006034:	1000e726 	beq	r2,zero,100063d4 <__subsf3+0x4f0>
10006038:	1007883a 	mov	r3,r2
1000603c:	188001cc 	andi	r2,r3,7
10006040:	103fc61e 	bne	r2,zero,10005f5c <__alt_data_end+0xf8005f5c>
10006044:	8880004c 	andi	r2,r17,1
10006048:	01003fc4 	movi	r4,255
1000604c:	1806d0fa 	srli	r3,r3,3
10006050:	81001e26 	beq	r16,r4,100060cc <__subsf3+0x1e8>
10006054:	01002034 	movhi	r4,128
10006058:	213fffc4 	addi	r4,r4,-1
1000605c:	800b883a 	mov	r5,r16
10006060:	1908703a 	and	r4,r3,r4
10006064:	003fc906 	br	10005f8c <__alt_data_end+0xf8005f8c>
10006068:	81c9c83a 	sub	r4,r16,r7
1000606c:	0100420e 	bge	zero,r4,10006178 <__subsf3+0x294>
10006070:	38002226 	beq	r7,zero,100060fc <__subsf3+0x218>
10006074:	01403fc4 	movi	r5,255
10006078:	817fb626 	beq	r16,r5,10005f54 <__alt_data_end+0xf8005f54>
1000607c:	42010034 	orhi	r8,r8,1024
10006080:	014006c4 	movi	r5,27
10006084:	2900580e 	bge	r5,r4,100061e8 <__subsf3+0x304>
10006088:	01000044 	movi	r4,1
1000608c:	1907883a 	add	r3,r3,r4
10006090:	1901002c 	andhi	r4,r3,1024
10006094:	203fe926 	beq	r4,zero,1000603c <__alt_data_end+0xf800603c>
10006098:	84000044 	addi	r16,r16,1
1000609c:	01003fc4 	movi	r4,255
100060a0:	81007626 	beq	r16,r4,1000627c <__subsf3+0x398>
100060a4:	00bf0034 	movhi	r2,64512
100060a8:	10bfffc4 	addi	r2,r2,-1
100060ac:	1900004c 	andi	r4,r3,1
100060b0:	1886703a 	and	r3,r3,r2
100060b4:	1806d07a 	srli	r3,r3,1
100060b8:	1906b03a 	or	r3,r3,r4
100060bc:	003fa506 	br	10005f54 <__alt_data_end+0xf8005f54>
100060c0:	403f9e26 	beq	r8,zero,10005f3c <__alt_data_end+0xf8005f3c>
100060c4:	31803fcc 	andi	r6,r6,255
100060c8:	003f9d06 	br	10005f40 <__alt_data_end+0xf8005f40>
100060cc:	18001b26 	beq	r3,zero,1000613c <__subsf3+0x258>
100060d0:	19001034 	orhi	r4,r3,64
100060d4:	00c02034 	movhi	r3,128
100060d8:	18ffffc4 	addi	r3,r3,-1
100060dc:	017fffc4 	movi	r5,-1
100060e0:	20c8703a 	and	r4,r4,r3
100060e4:	003fa906 	br	10005f8c <__alt_data_end+0xf8005f8c>
100060e8:	10bfffc4 	addi	r2,r2,-1
100060ec:	103fbc26 	beq	r2,zero,10005fe0 <__alt_data_end+0xf8005fe0>
100060f0:	01003fc4 	movi	r4,255
100060f4:	813fb71e 	bne	r16,r4,10005fd4 <__alt_data_end+0xf8005fd4>
100060f8:	003f9606 	br	10005f54 <__alt_data_end+0xf8005f54>
100060fc:	403f9526 	beq	r8,zero,10005f54 <__alt_data_end+0xf8005f54>
10006100:	213fffc4 	addi	r4,r4,-1
10006104:	2000481e 	bne	r4,zero,10006228 <__subsf3+0x344>
10006108:	1a07883a 	add	r3,r3,r8
1000610c:	003fe006 	br	10006090 <__alt_data_end+0xf8006090>
10006110:	1000241e 	bne	r2,zero,100061a4 <__subsf3+0x2c0>
10006114:	80800044 	addi	r2,r16,1
10006118:	10803fcc 	andi	r2,r2,255
1000611c:	01000044 	movi	r4,1
10006120:	20804f0e 	bge	r4,r2,10006260 <__subsf3+0x37c>
10006124:	1a25c83a 	sub	r18,r3,r8
10006128:	9081002c 	andhi	r2,r18,1024
1000612c:	10002926 	beq	r2,zero,100061d4 <__subsf3+0x2f0>
10006130:	40e5c83a 	sub	r18,r8,r3
10006134:	3023883a 	mov	r17,r6
10006138:	003faf06 	br	10005ff8 <__alt_data_end+0xf8005ff8>
1000613c:	017fffc4 	movi	r5,-1
10006140:	0009883a 	mov	r4,zero
10006144:	003f9106 	br	10005f8c <__alt_data_end+0xf8005f8c>
10006148:	00ff0034 	movhi	r3,64512
1000614c:	18ffffc4 	addi	r3,r3,-1
10006150:	80a1c83a 	sub	r16,r16,r2
10006154:	90c6703a 	and	r3,r18,r3
10006158:	003f7e06 	br	10005f54 <__alt_data_end+0xf8005f54>
1000615c:	01000804 	movi	r4,32
10006160:	2089c83a 	sub	r4,r4,r2
10006164:	4108983a 	sll	r4,r8,r4
10006168:	4090d83a 	srl	r8,r8,r2
1000616c:	2004c03a 	cmpne	r2,r4,zero
10006170:	1210b03a 	or	r8,r2,r8
10006174:	003f9a06 	br	10005fe0 <__alt_data_end+0xf8005fe0>
10006178:	2000421e 	bne	r4,zero,10006284 <__subsf3+0x3a0>
1000617c:	81000044 	addi	r4,r16,1
10006180:	21803fcc 	andi	r6,r4,255
10006184:	01400044 	movi	r5,1
10006188:	29802a0e 	bge	r5,r6,10006234 <__subsf3+0x350>
1000618c:	01403fc4 	movi	r5,255
10006190:	21403926 	beq	r4,r5,10006278 <__subsf3+0x394>
10006194:	40c7883a 	add	r3,r8,r3
10006198:	1806d07a 	srli	r3,r3,1
1000619c:	2021883a 	mov	r16,r4
100061a0:	003f6c06 	br	10005f54 <__alt_data_end+0xf8005f54>
100061a4:	80001726 	beq	r16,zero,10006204 <__subsf3+0x320>
100061a8:	01003fc4 	movi	r4,255
100061ac:	39001a26 	beq	r7,r4,10006218 <__subsf3+0x334>
100061b0:	0085c83a 	sub	r2,zero,r2
100061b4:	18c10034 	orhi	r3,r3,1024
100061b8:	010006c4 	movi	r4,27
100061bc:	2080430e 	bge	r4,r2,100062cc <__subsf3+0x3e8>
100061c0:	00c00044 	movi	r3,1
100061c4:	40c7c83a 	sub	r3,r8,r3
100061c8:	3821883a 	mov	r16,r7
100061cc:	3023883a 	mov	r17,r6
100061d0:	003f8406 	br	10005fe4 <__alt_data_end+0xf8005fe4>
100061d4:	903f881e 	bne	r18,zero,10005ff8 <__alt_data_end+0xf8005ff8>
100061d8:	0007883a 	mov	r3,zero
100061dc:	0005883a 	mov	r2,zero
100061e0:	0021883a 	mov	r16,zero
100061e4:	003f9806 	br	10006048 <__alt_data_end+0xf8006048>
100061e8:	01400804 	movi	r5,32
100061ec:	290bc83a 	sub	r5,r5,r4
100061f0:	414a983a 	sll	r5,r8,r5
100061f4:	4110d83a 	srl	r8,r8,r4
100061f8:	2808c03a 	cmpne	r4,r5,zero
100061fc:	2208b03a 	or	r4,r4,r8
10006200:	003fa206 	br	1000608c <__alt_data_end+0xf800608c>
10006204:	18000426 	beq	r3,zero,10006218 <__subsf3+0x334>
10006208:	0084303a 	nor	r2,zero,r2
1000620c:	103fed26 	beq	r2,zero,100061c4 <__alt_data_end+0xf80061c4>
10006210:	01003fc4 	movi	r4,255
10006214:	393fe81e 	bne	r7,r4,100061b8 <__alt_data_end+0xf80061b8>
10006218:	4007883a 	mov	r3,r8
1000621c:	3821883a 	mov	r16,r7
10006220:	3023883a 	mov	r17,r6
10006224:	003f4b06 	br	10005f54 <__alt_data_end+0xf8005f54>
10006228:	01403fc4 	movi	r5,255
1000622c:	817f941e 	bne	r16,r5,10006080 <__alt_data_end+0xf8006080>
10006230:	003f4806 	br	10005f54 <__alt_data_end+0xf8005f54>
10006234:	8000471e 	bne	r16,zero,10006354 <__subsf3+0x470>
10006238:	18006126 	beq	r3,zero,100063c0 <__subsf3+0x4dc>
1000623c:	403f4526 	beq	r8,zero,10005f54 <__alt_data_end+0xf8005f54>
10006240:	1a07883a 	add	r3,r3,r8
10006244:	1881002c 	andhi	r2,r3,1024
10006248:	103f7c26 	beq	r2,zero,1000603c <__alt_data_end+0xf800603c>
1000624c:	00bf0034 	movhi	r2,64512
10006250:	10bfffc4 	addi	r2,r2,-1
10006254:	2821883a 	mov	r16,r5
10006258:	1886703a 	and	r3,r3,r2
1000625c:	003f3d06 	br	10005f54 <__alt_data_end+0xf8005f54>
10006260:	8000141e 	bne	r16,zero,100062b4 <__subsf3+0x3d0>
10006264:	1800311e 	bne	r3,zero,1000632c <__subsf3+0x448>
10006268:	40004626 	beq	r8,zero,10006384 <__subsf3+0x4a0>
1000626c:	4007883a 	mov	r3,r8
10006270:	3023883a 	mov	r17,r6
10006274:	003f3706 	br	10005f54 <__alt_data_end+0xf8005f54>
10006278:	2021883a 	mov	r16,r4
1000627c:	0007883a 	mov	r3,zero
10006280:	003f7106 	br	10006048 <__alt_data_end+0xf8006048>
10006284:	8000181e 	bne	r16,zero,100062e8 <__subsf3+0x404>
10006288:	18002f26 	beq	r3,zero,10006348 <__subsf3+0x464>
1000628c:	0108303a 	nor	r4,zero,r4
10006290:	20000526 	beq	r4,zero,100062a8 <__subsf3+0x3c4>
10006294:	01403fc4 	movi	r5,255
10006298:	39402b26 	beq	r7,r5,10006348 <__subsf3+0x464>
1000629c:	014006c4 	movi	r5,27
100062a0:	2900400e 	bge	r5,r4,100063a4 <__subsf3+0x4c0>
100062a4:	00c00044 	movi	r3,1
100062a8:	1a07883a 	add	r3,r3,r8
100062ac:	3821883a 	mov	r16,r7
100062b0:	003f7706 	br	10006090 <__alt_data_end+0xf8006090>
100062b4:	1800111e 	bne	r3,zero,100062fc <__subsf3+0x418>
100062b8:	40003526 	beq	r8,zero,10006390 <__subsf3+0x4ac>
100062bc:	4007883a 	mov	r3,r8
100062c0:	3023883a 	mov	r17,r6
100062c4:	04003fc4 	movi	r16,255
100062c8:	003f2206 	br	10005f54 <__alt_data_end+0xf8005f54>
100062cc:	01000804 	movi	r4,32
100062d0:	2089c83a 	sub	r4,r4,r2
100062d4:	1908983a 	sll	r4,r3,r4
100062d8:	1884d83a 	srl	r2,r3,r2
100062dc:	2006c03a 	cmpne	r3,r4,zero
100062e0:	1886b03a 	or	r3,r3,r2
100062e4:	003fb706 	br	100061c4 <__alt_data_end+0xf80061c4>
100062e8:	01403fc4 	movi	r5,255
100062ec:	39401626 	beq	r7,r5,10006348 <__subsf3+0x464>
100062f0:	0109c83a 	sub	r4,zero,r4
100062f4:	18c10034 	orhi	r3,r3,1024
100062f8:	003fe806 	br	1000629c <__alt_data_end+0xf800629c>
100062fc:	40001f26 	beq	r8,zero,1000637c <__subsf3+0x498>
10006300:	1806d0fa 	srli	r3,r3,3
10006304:	1880102c 	andhi	r2,r3,64
10006308:	10000526 	beq	r2,zero,10006320 <__subsf3+0x43c>
1000630c:	4010d0fa 	srli	r8,r8,3
10006310:	4080102c 	andhi	r2,r8,64
10006314:	1000021e 	bne	r2,zero,10006320 <__subsf3+0x43c>
10006318:	4007883a 	mov	r3,r8
1000631c:	3023883a 	mov	r17,r6
10006320:	180690fa 	slli	r3,r3,3
10006324:	04003fc4 	movi	r16,255
10006328:	003f0a06 	br	10005f54 <__alt_data_end+0xf8005f54>
1000632c:	403f0926 	beq	r8,zero,10005f54 <__alt_data_end+0xf8005f54>
10006330:	1a05c83a 	sub	r2,r3,r8
10006334:	1101002c 	andhi	r4,r2,1024
10006338:	203f3e26 	beq	r4,zero,10006034 <__alt_data_end+0xf8006034>
1000633c:	40c7c83a 	sub	r3,r8,r3
10006340:	3023883a 	mov	r17,r6
10006344:	003f0306 	br	10005f54 <__alt_data_end+0xf8005f54>
10006348:	4007883a 	mov	r3,r8
1000634c:	3821883a 	mov	r16,r7
10006350:	003f0006 	br	10005f54 <__alt_data_end+0xf8005f54>
10006354:	18001c26 	beq	r3,zero,100063c8 <__subsf3+0x4e4>
10006358:	40000826 	beq	r8,zero,1000637c <__subsf3+0x498>
1000635c:	1806d0fa 	srli	r3,r3,3
10006360:	1880102c 	andhi	r2,r3,64
10006364:	103fee26 	beq	r2,zero,10006320 <__alt_data_end+0xf8006320>
10006368:	4010d0fa 	srli	r8,r8,3
1000636c:	4080102c 	andhi	r2,r8,64
10006370:	103feb1e 	bne	r2,zero,10006320 <__alt_data_end+0xf8006320>
10006374:	4007883a 	mov	r3,r8
10006378:	003fe906 	br	10006320 <__alt_data_end+0xf8006320>
1000637c:	04003fc4 	movi	r16,255
10006380:	003ef406 	br	10005f54 <__alt_data_end+0xf8005f54>
10006384:	8007883a 	mov	r3,r16
10006388:	0005883a 	mov	r2,zero
1000638c:	003f2e06 	br	10006048 <__alt_data_end+0xf8006048>
10006390:	00c10034 	movhi	r3,1024
10006394:	0005883a 	mov	r2,zero
10006398:	18fffe04 	addi	r3,r3,-8
1000639c:	04003fc4 	movi	r16,255
100063a0:	003f2906 	br	10006048 <__alt_data_end+0xf8006048>
100063a4:	01400804 	movi	r5,32
100063a8:	290bc83a 	sub	r5,r5,r4
100063ac:	194a983a 	sll	r5,r3,r5
100063b0:	1908d83a 	srl	r4,r3,r4
100063b4:	2806c03a 	cmpne	r3,r5,zero
100063b8:	1906b03a 	or	r3,r3,r4
100063bc:	003fba06 	br	100062a8 <__alt_data_end+0xf80062a8>
100063c0:	4007883a 	mov	r3,r8
100063c4:	003ee306 	br	10005f54 <__alt_data_end+0xf8005f54>
100063c8:	4007883a 	mov	r3,r8
100063cc:	04003fc4 	movi	r16,255
100063d0:	003ee006 	br	10005f54 <__alt_data_end+0xf8005f54>
100063d4:	0007883a 	mov	r3,zero
100063d8:	0005883a 	mov	r2,zero
100063dc:	003f1a06 	br	10006048 <__alt_data_end+0xf8006048>

100063e0 <__fixsfsi>:
100063e0:	2006d5fa 	srli	r3,r4,23
100063e4:	00802034 	movhi	r2,128
100063e8:	10bfffc4 	addi	r2,r2,-1
100063ec:	18c03fcc 	andi	r3,r3,255
100063f0:	01401f84 	movi	r5,126
100063f4:	1104703a 	and	r2,r2,r4
100063f8:	2008d7fa 	srli	r4,r4,31
100063fc:	28c0110e 	bge	r5,r3,10006444 <__fixsfsi+0x64>
10006400:	01402744 	movi	r5,157
10006404:	28c00b16 	blt	r5,r3,10006434 <__fixsfsi+0x54>
10006408:	01402544 	movi	r5,149
1000640c:	10802034 	orhi	r2,r2,128
10006410:	28c00e16 	blt	r5,r3,1000644c <__fixsfsi+0x6c>
10006414:	01402584 	movi	r5,150
10006418:	28c7c83a 	sub	r3,r5,r3
1000641c:	10c6d83a 	srl	r3,r2,r3
10006420:	21003fcc 	andi	r4,r4,255
10006424:	0105c83a 	sub	r2,zero,r4
10006428:	1886f03a 	xor	r3,r3,r2
1000642c:	1905883a 	add	r2,r3,r4
10006430:	f800283a 	ret
10006434:	00a00034 	movhi	r2,32768
10006438:	10bfffc4 	addi	r2,r2,-1
1000643c:	2085883a 	add	r2,r4,r2
10006440:	f800283a 	ret
10006444:	0005883a 	mov	r2,zero
10006448:	f800283a 	ret
1000644c:	18ffda84 	addi	r3,r3,-150
10006450:	10c6983a 	sll	r3,r2,r3
10006454:	003ff206 	br	10006420 <__alt_data_end+0xf8006420>

10006458 <__floatsisf>:
10006458:	defffd04 	addi	sp,sp,-12
1000645c:	dc000015 	stw	r16,0(sp)
10006460:	dfc00215 	stw	ra,8(sp)
10006464:	dc400115 	stw	r17,4(sp)
10006468:	2021883a 	mov	r16,r4
1000646c:	20003a26 	beq	r4,zero,10006558 <__floatsisf+0x100>
10006470:	2022d7fa 	srli	r17,r4,31
10006474:	88000126 	beq	r17,zero,1000647c <__floatsisf+0x24>
10006478:	0121c83a 	sub	r16,zero,r4
1000647c:	8009883a 	mov	r4,r16
10006480:	00079700 	call	10007970 <__clzsi2>
10006484:	00c02784 	movi	r3,158
10006488:	1887c83a 	sub	r3,r3,r2
1000648c:	01802584 	movi	r6,150
10006490:	800b883a 	mov	r5,r16
10006494:	30c01616 	blt	r6,r3,100064f0 <__floatsisf+0x98>
10006498:	01000204 	movi	r4,8
1000649c:	2080020e 	bge	r4,r2,100064a8 <__floatsisf+0x50>
100064a0:	10bffe04 	addi	r2,r2,-8
100064a4:	80a0983a 	sll	r16,r16,r2
100064a8:	00802034 	movhi	r2,128
100064ac:	10bfffc4 	addi	r2,r2,-1
100064b0:	8809883a 	mov	r4,r17
100064b4:	80a0703a 	and	r16,r16,r2
100064b8:	18803fcc 	andi	r2,r3,255
100064bc:	100695fa 	slli	r3,r2,23
100064c0:	20803fcc 	andi	r2,r4,255
100064c4:	100897fa 	slli	r4,r2,31
100064c8:	00802034 	movhi	r2,128
100064cc:	10bfffc4 	addi	r2,r2,-1
100064d0:	8084703a 	and	r2,r16,r2
100064d4:	10c4b03a 	or	r2,r2,r3
100064d8:	1104b03a 	or	r2,r2,r4
100064dc:	dfc00217 	ldw	ra,8(sp)
100064e0:	dc400117 	ldw	r17,4(sp)
100064e4:	dc000017 	ldw	r16,0(sp)
100064e8:	dec00304 	addi	sp,sp,12
100064ec:	f800283a 	ret
100064f0:	01002644 	movi	r4,153
100064f4:	20c01c16 	blt	r4,r3,10006568 <__floatsisf+0x110>
100064f8:	01000144 	movi	r4,5
100064fc:	2080020e 	bge	r4,r2,10006508 <__floatsisf+0xb0>
10006500:	113ffec4 	addi	r4,r2,-5
10006504:	290a983a 	sll	r5,r5,r4
10006508:	043f0034 	movhi	r16,64512
1000650c:	843fffc4 	addi	r16,r16,-1
10006510:	298001cc 	andi	r6,r5,7
10006514:	2c20703a 	and	r16,r5,r16
10006518:	30000426 	beq	r6,zero,1000652c <__floatsisf+0xd4>
1000651c:	294003cc 	andi	r5,r5,15
10006520:	01000104 	movi	r4,4
10006524:	29000126 	beq	r5,r4,1000652c <__floatsisf+0xd4>
10006528:	8121883a 	add	r16,r16,r4
1000652c:	8101002c 	andhi	r4,r16,1024
10006530:	20000526 	beq	r4,zero,10006548 <__floatsisf+0xf0>
10006534:	00c027c4 	movi	r3,159
10006538:	1887c83a 	sub	r3,r3,r2
1000653c:	00bf0034 	movhi	r2,64512
10006540:	10bfffc4 	addi	r2,r2,-1
10006544:	80a0703a 	and	r16,r16,r2
10006548:	802091ba 	slli	r16,r16,6
1000654c:	8809883a 	mov	r4,r17
10006550:	8020d27a 	srli	r16,r16,9
10006554:	003fd806 	br	100064b8 <__alt_data_end+0xf80064b8>
10006558:	0009883a 	mov	r4,zero
1000655c:	0007883a 	mov	r3,zero
10006560:	0021883a 	mov	r16,zero
10006564:	003fd406 	br	100064b8 <__alt_data_end+0xf80064b8>
10006568:	01800144 	movi	r6,5
1000656c:	110006c4 	addi	r4,r2,27
10006570:	8108983a 	sll	r4,r16,r4
10006574:	308fc83a 	sub	r7,r6,r2
10006578:	81cad83a 	srl	r5,r16,r7
1000657c:	2008c03a 	cmpne	r4,r4,zero
10006580:	214ab03a 	or	r5,r4,r5
10006584:	30bfe00e 	bge	r6,r2,10006508 <__alt_data_end+0xf8006508>
10006588:	003fdd06 	br	10006500 <__alt_data_end+0xf8006500>

1000658c <__muldf3>:
1000658c:	deffee04 	addi	sp,sp,-72
10006590:	dd000c15 	stw	r20,48(sp)
10006594:	2828d53a 	srli	r20,r5,20
10006598:	dd400d15 	stw	r21,52(sp)
1000659c:	282ad7fa 	srli	r21,r5,31
100065a0:	dc000815 	stw	r16,32(sp)
100065a4:	04000434 	movhi	r16,16
100065a8:	ddc00f15 	stw	r23,60(sp)
100065ac:	dcc00b15 	stw	r19,44(sp)
100065b0:	dc800a15 	stw	r18,40(sp)
100065b4:	843fffc4 	addi	r16,r16,-1
100065b8:	dfc01115 	stw	ra,68(sp)
100065bc:	df001015 	stw	fp,64(sp)
100065c0:	dd800e15 	stw	r22,56(sp)
100065c4:	dc400915 	stw	r17,36(sp)
100065c8:	a501ffcc 	andi	r20,r20,2047
100065cc:	2025883a 	mov	r18,r4
100065d0:	202f883a 	mov	r23,r4
100065d4:	2c20703a 	and	r16,r5,r16
100065d8:	a827883a 	mov	r19,r21
100065dc:	aa403fcc 	andi	r9,r21,255
100065e0:	a0005926 	beq	r20,zero,10006748 <__muldf3+0x1bc>
100065e4:	0081ffc4 	movi	r2,2047
100065e8:	a0803426 	beq	r20,r2,100066bc <__muldf3+0x130>
100065ec:	84000434 	orhi	r16,r16,16
100065f0:	2004d77a 	srli	r2,r4,29
100065f4:	802090fa 	slli	r16,r16,3
100065f8:	202e90fa 	slli	r23,r4,3
100065fc:	a53f0044 	addi	r20,r20,-1023
10006600:	80a0b03a 	or	r16,r16,r2
10006604:	000b883a 	mov	r5,zero
10006608:	0039883a 	mov	fp,zero
1000660c:	3806d53a 	srli	r3,r7,20
10006610:	382cd7fa 	srli	r22,r7,31
10006614:	00800434 	movhi	r2,16
10006618:	10bfffc4 	addi	r2,r2,-1
1000661c:	18c1ffcc 	andi	r3,r3,2047
10006620:	3025883a 	mov	r18,r6
10006624:	38a2703a 	and	r17,r7,r2
10006628:	b2803fcc 	andi	r10,r22,255
1000662c:	18006426 	beq	r3,zero,100067c0 <__muldf3+0x234>
10006630:	0081ffc4 	movi	r2,2047
10006634:	18805c26 	beq	r3,r2,100067a8 <__muldf3+0x21c>
10006638:	8c400434 	orhi	r17,r17,16
1000663c:	3004d77a 	srli	r2,r6,29
10006640:	882290fa 	slli	r17,r17,3
10006644:	302490fa 	slli	r18,r6,3
10006648:	18ff0044 	addi	r3,r3,-1023
1000664c:	88a2b03a 	or	r17,r17,r2
10006650:	000f883a 	mov	r7,zero
10006654:	394ab03a 	or	r5,r7,r5
10006658:	280a90ba 	slli	r5,r5,2
1000665c:	00840034 	movhi	r2,4096
10006660:	10999f04 	addi	r2,r2,26236
10006664:	288b883a 	add	r5,r5,r2
10006668:	28800017 	ldw	r2,0(r5)
1000666c:	a0c7883a 	add	r3,r20,r3
10006670:	b54cf03a 	xor	r6,r22,r21
10006674:	1a000044 	addi	r8,r3,1
10006678:	1000683a 	jmp	r2
1000667c:	100068c0 	call	1100068c <_gp+0xfded04>
10006680:	100068ac 	andhi	zero,r2,418
10006684:	100068ac 	andhi	zero,r2,418
10006688:	10006898 	cmpnei	zero,r2,418
1000668c:	100066d8 	cmpnei	zero,r2,411
10006690:	100066d8 	cmpnei	zero,r2,411
10006694:	10006880 	call	11000688 <_gp+0xfded00>
10006698:	10006898 	cmpnei	zero,r2,418
1000669c:	100066d8 	cmpnei	zero,r2,411
100066a0:	10006880 	call	11000688 <_gp+0xfded00>
100066a4:	100066d8 	cmpnei	zero,r2,411
100066a8:	10006898 	cmpnei	zero,r2,418
100066ac:	100066dc 	xori	zero,r2,411
100066b0:	100066dc 	xori	zero,r2,411
100066b4:	100066dc 	xori	zero,r2,411
100066b8:	10006bfc 	xorhi	zero,r2,431
100066bc:	8104b03a 	or	r2,r16,r4
100066c0:	10006c1e 	bne	r2,zero,10006874 <__muldf3+0x2e8>
100066c4:	01400204 	movi	r5,8
100066c8:	0021883a 	mov	r16,zero
100066cc:	002f883a 	mov	r23,zero
100066d0:	07000084 	movi	fp,2
100066d4:	003fcd06 	br	1000660c <__alt_data_end+0xf800660c>
100066d8:	3013883a 	mov	r9,r6
100066dc:	00800084 	movi	r2,2
100066e0:	e080501e 	bne	fp,r2,10006824 <__muldf3+0x298>
100066e4:	4cc0004c 	andi	r19,r9,1
100066e8:	0101ffc4 	movi	r4,2047
100066ec:	0021883a 	mov	r16,zero
100066f0:	002f883a 	mov	r23,zero
100066f4:	2008953a 	slli	r4,r4,20
100066f8:	98c03fcc 	andi	r3,r19,255
100066fc:	04400434 	movhi	r17,16
10006700:	8c7fffc4 	addi	r17,r17,-1
10006704:	180697fa 	slli	r3,r3,31
10006708:	8460703a 	and	r16,r16,r17
1000670c:	8120b03a 	or	r16,r16,r4
10006710:	80c6b03a 	or	r3,r16,r3
10006714:	b805883a 	mov	r2,r23
10006718:	dfc01117 	ldw	ra,68(sp)
1000671c:	df001017 	ldw	fp,64(sp)
10006720:	ddc00f17 	ldw	r23,60(sp)
10006724:	dd800e17 	ldw	r22,56(sp)
10006728:	dd400d17 	ldw	r21,52(sp)
1000672c:	dd000c17 	ldw	r20,48(sp)
10006730:	dcc00b17 	ldw	r19,44(sp)
10006734:	dc800a17 	ldw	r18,40(sp)
10006738:	dc400917 	ldw	r17,36(sp)
1000673c:	dc000817 	ldw	r16,32(sp)
10006740:	dec01204 	addi	sp,sp,72
10006744:	f800283a 	ret
10006748:	8104b03a 	or	r2,r16,r4
1000674c:	10004426 	beq	r2,zero,10006860 <__muldf3+0x2d4>
10006750:	80014b26 	beq	r16,zero,10006c80 <__muldf3+0x6f4>
10006754:	8009883a 	mov	r4,r16
10006758:	d9800715 	stw	r6,28(sp)
1000675c:	d9c00215 	stw	r7,8(sp)
10006760:	da400415 	stw	r9,16(sp)
10006764:	00079700 	call	10007970 <__clzsi2>
10006768:	d9800717 	ldw	r6,28(sp)
1000676c:	d9c00217 	ldw	r7,8(sp)
10006770:	da400417 	ldw	r9,16(sp)
10006774:	1007883a 	mov	r3,r2
10006778:	01000a04 	movi	r4,40
1000677c:	1dfffe04 	addi	r23,r3,-8
10006780:	20c9c83a 	sub	r4,r4,r3
10006784:	85e0983a 	sll	r16,r16,r23
10006788:	9108d83a 	srl	r4,r18,r4
1000678c:	95ee983a 	sll	r23,r18,r23
10006790:	2420b03a 	or	r16,r4,r16
10006794:	053f0344 	movi	r20,-1011
10006798:	a0e9c83a 	sub	r20,r20,r3
1000679c:	000b883a 	mov	r5,zero
100067a0:	0039883a 	mov	fp,zero
100067a4:	003f9906 	br	1000660c <__alt_data_end+0xf800660c>
100067a8:	8984b03a 	or	r2,r17,r6
100067ac:	10002a1e 	bne	r2,zero,10006858 <__muldf3+0x2cc>
100067b0:	0023883a 	mov	r17,zero
100067b4:	0025883a 	mov	r18,zero
100067b8:	01c00084 	movi	r7,2
100067bc:	003fa506 	br	10006654 <__alt_data_end+0xf8006654>
100067c0:	8984b03a 	or	r2,r17,r6
100067c4:	10002026 	beq	r2,zero,10006848 <__muldf3+0x2bc>
100067c8:	88011c26 	beq	r17,zero,10006c3c <__muldf3+0x6b0>
100067cc:	8809883a 	mov	r4,r17
100067d0:	d9400215 	stw	r5,8(sp)
100067d4:	d9800715 	stw	r6,28(sp)
100067d8:	da400415 	stw	r9,16(sp)
100067dc:	da800315 	stw	r10,12(sp)
100067e0:	00079700 	call	10007970 <__clzsi2>
100067e4:	d9400217 	ldw	r5,8(sp)
100067e8:	d9800717 	ldw	r6,28(sp)
100067ec:	da400417 	ldw	r9,16(sp)
100067f0:	da800317 	ldw	r10,12(sp)
100067f4:	1007883a 	mov	r3,r2
100067f8:	01000a04 	movi	r4,40
100067fc:	1cbffe04 	addi	r18,r3,-8
10006800:	20c9c83a 	sub	r4,r4,r3
10006804:	8ca2983a 	sll	r17,r17,r18
10006808:	3108d83a 	srl	r4,r6,r4
1000680c:	34a4983a 	sll	r18,r6,r18
10006810:	2462b03a 	or	r17,r4,r17
10006814:	00bf0344 	movi	r2,-1011
10006818:	10c7c83a 	sub	r3,r2,r3
1000681c:	000f883a 	mov	r7,zero
10006820:	003f8c06 	br	10006654 <__alt_data_end+0xf8006654>
10006824:	008000c4 	movi	r2,3
10006828:	e0816d26 	beq	fp,r2,10006de0 <__muldf3+0x854>
1000682c:	00800044 	movi	r2,1
10006830:	e081321e 	bne	fp,r2,10006cfc <__muldf3+0x770>
10006834:	48a6703a 	and	r19,r9,r2
10006838:	0009883a 	mov	r4,zero
1000683c:	0021883a 	mov	r16,zero
10006840:	002f883a 	mov	r23,zero
10006844:	003fab06 	br	100066f4 <__alt_data_end+0xf80066f4>
10006848:	0023883a 	mov	r17,zero
1000684c:	0025883a 	mov	r18,zero
10006850:	01c00044 	movi	r7,1
10006854:	003f7f06 	br	10006654 <__alt_data_end+0xf8006654>
10006858:	01c000c4 	movi	r7,3
1000685c:	003f7d06 	br	10006654 <__alt_data_end+0xf8006654>
10006860:	01400104 	movi	r5,4
10006864:	0021883a 	mov	r16,zero
10006868:	002f883a 	mov	r23,zero
1000686c:	07000044 	movi	fp,1
10006870:	003f6606 	br	1000660c <__alt_data_end+0xf800660c>
10006874:	01400304 	movi	r5,12
10006878:	070000c4 	movi	fp,3
1000687c:	003f6306 	br	1000660c <__alt_data_end+0xf800660c>
10006880:	04000434 	movhi	r16,16
10006884:	0027883a 	mov	r19,zero
10006888:	843fffc4 	addi	r16,r16,-1
1000688c:	05ffffc4 	movi	r23,-1
10006890:	0101ffc4 	movi	r4,2047
10006894:	003f9706 	br	100066f4 <__alt_data_end+0xf80066f4>
10006898:	8821883a 	mov	r16,r17
1000689c:	902f883a 	mov	r23,r18
100068a0:	5013883a 	mov	r9,r10
100068a4:	3839883a 	mov	fp,r7
100068a8:	003f8c06 	br	100066dc <__alt_data_end+0xf80066dc>
100068ac:	8821883a 	mov	r16,r17
100068b0:	902f883a 	mov	r23,r18
100068b4:	3013883a 	mov	r9,r6
100068b8:	3839883a 	mov	fp,r7
100068bc:	003f8706 	br	100066dc <__alt_data_end+0xf80066dc>
100068c0:	b82ad43a 	srli	r21,r23,16
100068c4:	9038d43a 	srli	fp,r18,16
100068c8:	bdffffcc 	andi	r23,r23,65535
100068cc:	94bfffcc 	andi	r18,r18,65535
100068d0:	9009883a 	mov	r4,r18
100068d4:	b80b883a 	mov	r5,r23
100068d8:	d8c00515 	stw	r3,20(sp)
100068dc:	d9800715 	stw	r6,28(sp)
100068e0:	da000615 	stw	r8,24(sp)
100068e4:	000586c0 	call	1000586c <__mulsi3>
100068e8:	9009883a 	mov	r4,r18
100068ec:	a80b883a 	mov	r5,r21
100068f0:	1029883a 	mov	r20,r2
100068f4:	000586c0 	call	1000586c <__mulsi3>
100068f8:	e009883a 	mov	r4,fp
100068fc:	a80b883a 	mov	r5,r21
10006900:	102d883a 	mov	r22,r2
10006904:	000586c0 	call	1000586c <__mulsi3>
10006908:	e009883a 	mov	r4,fp
1000690c:	b80b883a 	mov	r5,r23
10006910:	1027883a 	mov	r19,r2
10006914:	000586c0 	call	1000586c <__mulsi3>
10006918:	a008d43a 	srli	r4,r20,16
1000691c:	b085883a 	add	r2,r22,r2
10006920:	d8c00517 	ldw	r3,20(sp)
10006924:	110f883a 	add	r7,r2,r4
10006928:	d9800717 	ldw	r6,28(sp)
1000692c:	da000617 	ldw	r8,24(sp)
10006930:	3d80022e 	bgeu	r7,r22,1000693c <__muldf3+0x3b0>
10006934:	00800074 	movhi	r2,1
10006938:	98a7883a 	add	r19,r19,r2
1000693c:	3804943a 	slli	r2,r7,16
10006940:	380ed43a 	srli	r7,r7,16
10006944:	882cd43a 	srli	r22,r17,16
10006948:	a53fffcc 	andi	r20,r20,65535
1000694c:	8c7fffcc 	andi	r17,r17,65535
10006950:	1529883a 	add	r20,r2,r20
10006954:	8809883a 	mov	r4,r17
10006958:	b80b883a 	mov	r5,r23
1000695c:	d8c00515 	stw	r3,20(sp)
10006960:	d9800715 	stw	r6,28(sp)
10006964:	da000615 	stw	r8,24(sp)
10006968:	d9c00015 	stw	r7,0(sp)
1000696c:	dd000115 	stw	r20,4(sp)
10006970:	000586c0 	call	1000586c <__mulsi3>
10006974:	a80b883a 	mov	r5,r21
10006978:	8809883a 	mov	r4,r17
1000697c:	d8800415 	stw	r2,16(sp)
10006980:	000586c0 	call	1000586c <__mulsi3>
10006984:	a80b883a 	mov	r5,r21
10006988:	b009883a 	mov	r4,r22
1000698c:	1029883a 	mov	r20,r2
10006990:	000586c0 	call	1000586c <__mulsi3>
10006994:	b009883a 	mov	r4,r22
10006998:	b80b883a 	mov	r5,r23
1000699c:	102b883a 	mov	r21,r2
100069a0:	000586c0 	call	1000586c <__mulsi3>
100069a4:	da400417 	ldw	r9,16(sp)
100069a8:	a085883a 	add	r2,r20,r2
100069ac:	d8c00517 	ldw	r3,20(sp)
100069b0:	4808d43a 	srli	r4,r9,16
100069b4:	d9800717 	ldw	r6,28(sp)
100069b8:	da000617 	ldw	r8,24(sp)
100069bc:	1109883a 	add	r4,r2,r4
100069c0:	2500022e 	bgeu	r4,r20,100069cc <__muldf3+0x440>
100069c4:	00800074 	movhi	r2,1
100069c8:	a8ab883a 	add	r21,r21,r2
100069cc:	200e943a 	slli	r7,r4,16
100069d0:	2004d43a 	srli	r2,r4,16
100069d4:	802ed43a 	srli	r23,r16,16
100069d8:	843fffcc 	andi	r16,r16,65535
100069dc:	4d3fffcc 	andi	r20,r9,65535
100069e0:	9009883a 	mov	r4,r18
100069e4:	800b883a 	mov	r5,r16
100069e8:	3d29883a 	add	r20,r7,r20
100069ec:	d8c00515 	stw	r3,20(sp)
100069f0:	d9800715 	stw	r6,28(sp)
100069f4:	da000615 	stw	r8,24(sp)
100069f8:	a8ab883a 	add	r21,r21,r2
100069fc:	000586c0 	call	1000586c <__mulsi3>
10006a00:	9009883a 	mov	r4,r18
10006a04:	b80b883a 	mov	r5,r23
10006a08:	d8800315 	stw	r2,12(sp)
10006a0c:	000586c0 	call	1000586c <__mulsi3>
10006a10:	e009883a 	mov	r4,fp
10006a14:	b80b883a 	mov	r5,r23
10006a18:	1025883a 	mov	r18,r2
10006a1c:	000586c0 	call	1000586c <__mulsi3>
10006a20:	e009883a 	mov	r4,fp
10006a24:	800b883a 	mov	r5,r16
10006a28:	d8800215 	stw	r2,8(sp)
10006a2c:	000586c0 	call	1000586c <__mulsi3>
10006a30:	da800317 	ldw	r10,12(sp)
10006a34:	d9400017 	ldw	r5,0(sp)
10006a38:	9085883a 	add	r2,r18,r2
10006a3c:	5008d43a 	srli	r4,r10,16
10006a40:	a153883a 	add	r9,r20,r5
10006a44:	d8c00517 	ldw	r3,20(sp)
10006a48:	1109883a 	add	r4,r2,r4
10006a4c:	d9800717 	ldw	r6,28(sp)
10006a50:	da000617 	ldw	r8,24(sp)
10006a54:	dac00217 	ldw	r11,8(sp)
10006a58:	2480022e 	bgeu	r4,r18,10006a64 <__muldf3+0x4d8>
10006a5c:	00800074 	movhi	r2,1
10006a60:	5897883a 	add	r11,r11,r2
10006a64:	200e943a 	slli	r7,r4,16
10006a68:	2038d43a 	srli	fp,r4,16
10006a6c:	52bfffcc 	andi	r10,r10,65535
10006a70:	3a8f883a 	add	r7,r7,r10
10006a74:	8809883a 	mov	r4,r17
10006a78:	800b883a 	mov	r5,r16
10006a7c:	d8c00515 	stw	r3,20(sp)
10006a80:	d9800715 	stw	r6,28(sp)
10006a84:	d9c00215 	stw	r7,8(sp)
10006a88:	da000615 	stw	r8,24(sp)
10006a8c:	da400415 	stw	r9,16(sp)
10006a90:	5f39883a 	add	fp,r11,fp
10006a94:	000586c0 	call	1000586c <__mulsi3>
10006a98:	8809883a 	mov	r4,r17
10006a9c:	b80b883a 	mov	r5,r23
10006aa0:	1025883a 	mov	r18,r2
10006aa4:	000586c0 	call	1000586c <__mulsi3>
10006aa8:	b009883a 	mov	r4,r22
10006aac:	b80b883a 	mov	r5,r23
10006ab0:	d8800315 	stw	r2,12(sp)
10006ab4:	000586c0 	call	1000586c <__mulsi3>
10006ab8:	b009883a 	mov	r4,r22
10006abc:	800b883a 	mov	r5,r16
10006ac0:	1023883a 	mov	r17,r2
10006ac4:	000586c0 	call	1000586c <__mulsi3>
10006ac8:	da800317 	ldw	r10,12(sp)
10006acc:	9008d43a 	srli	r4,r18,16
10006ad0:	d8c00517 	ldw	r3,20(sp)
10006ad4:	5085883a 	add	r2,r10,r2
10006ad8:	1109883a 	add	r4,r2,r4
10006adc:	d9800717 	ldw	r6,28(sp)
10006ae0:	d9c00217 	ldw	r7,8(sp)
10006ae4:	da000617 	ldw	r8,24(sp)
10006ae8:	da400417 	ldw	r9,16(sp)
10006aec:	2280022e 	bgeu	r4,r10,10006af8 <__muldf3+0x56c>
10006af0:	00800074 	movhi	r2,1
10006af4:	88a3883a 	add	r17,r17,r2
10006af8:	2004943a 	slli	r2,r4,16
10006afc:	94bfffcc 	andi	r18,r18,65535
10006b00:	4ce7883a 	add	r19,r9,r19
10006b04:	14a5883a 	add	r18,r2,r18
10006b08:	9d29803a 	cmpltu	r20,r19,r20
10006b0c:	9565883a 	add	r18,r18,r21
10006b10:	9505883a 	add	r2,r18,r20
10006b14:	99e7883a 	add	r19,r19,r7
10006b18:	99cf803a 	cmpltu	r7,r19,r7
10006b1c:	e08b883a 	add	r5,fp,r2
10006b20:	2008d43a 	srli	r4,r4,16
10006b24:	29ef883a 	add	r23,r5,r7
10006b28:	1529803a 	cmpltu	r20,r2,r20
10006b2c:	956b803a 	cmpltu	r21,r18,r21
10006b30:	b9cf803a 	cmpltu	r7,r23,r7
10006b34:	a564b03a 	or	r18,r20,r21
10006b38:	2f39803a 	cmpltu	fp,r5,fp
10006b3c:	9125883a 	add	r18,r18,r4
10006b40:	3f38b03a 	or	fp,r7,fp
10006b44:	9725883a 	add	r18,r18,fp
10006b48:	9804927a 	slli	r2,r19,9
10006b4c:	9463883a 	add	r17,r18,r17
10006b50:	d9000117 	ldw	r4,4(sp)
10006b54:	b820d5fa 	srli	r16,r23,23
10006b58:	8822927a 	slli	r17,r17,9
10006b5c:	9826d5fa 	srli	r19,r19,23
10006b60:	1104b03a 	or	r2,r2,r4
10006b64:	b82e927a 	slli	r23,r23,9
10006b68:	1004c03a 	cmpne	r2,r2,zero
10006b6c:	8c20b03a 	or	r16,r17,r16
10006b70:	14e6b03a 	or	r19,r2,r19
10006b74:	8080402c 	andhi	r2,r16,256
10006b78:	9deeb03a 	or	r23,r19,r23
10006b7c:	10000726 	beq	r2,zero,10006b9c <__muldf3+0x610>
10006b80:	b804d07a 	srli	r2,r23,1
10006b84:	800697fa 	slli	r3,r16,31
10006b88:	bdc0004c 	andi	r23,r23,1
10006b8c:	8020d07a 	srli	r16,r16,1
10006b90:	b8aeb03a 	or	r23,r23,r2
10006b94:	b8eeb03a 	or	r23,r23,r3
10006b98:	4007883a 	mov	r3,r8
10006b9c:	1900ffc4 	addi	r4,r3,1023
10006ba0:	01004d0e 	bge	zero,r4,10006cd8 <__muldf3+0x74c>
10006ba4:	b88001cc 	andi	r2,r23,7
10006ba8:	10000726 	beq	r2,zero,10006bc8 <__muldf3+0x63c>
10006bac:	b94003cc 	andi	r5,r23,15
10006bb0:	00800104 	movi	r2,4
10006bb4:	28800426 	beq	r5,r2,10006bc8 <__muldf3+0x63c>
10006bb8:	b885883a 	add	r2,r23,r2
10006bbc:	15ef803a 	cmpltu	r23,r2,r23
10006bc0:	85e1883a 	add	r16,r16,r23
10006bc4:	102f883a 	mov	r23,r2
10006bc8:	8080402c 	andhi	r2,r16,256
10006bcc:	10000426 	beq	r2,zero,10006be0 <__muldf3+0x654>
10006bd0:	00bfc034 	movhi	r2,65280
10006bd4:	10bfffc4 	addi	r2,r2,-1
10006bd8:	19010004 	addi	r4,r3,1024
10006bdc:	80a0703a 	and	r16,r16,r2
10006be0:	0081ff84 	movi	r2,2046
10006be4:	1100340e 	bge	r2,r4,10006cb8 <__muldf3+0x72c>
10006be8:	34c0004c 	andi	r19,r6,1
10006bec:	0101ffc4 	movi	r4,2047
10006bf0:	0021883a 	mov	r16,zero
10006bf4:	002f883a 	mov	r23,zero
10006bf8:	003ebe06 	br	100066f4 <__alt_data_end+0xf80066f4>
10006bfc:	8080022c 	andhi	r2,r16,8
10006c00:	10000926 	beq	r2,zero,10006c28 <__muldf3+0x69c>
10006c04:	8880022c 	andhi	r2,r17,8
10006c08:	1000071e 	bne	r2,zero,10006c28 <__muldf3+0x69c>
10006c0c:	00800434 	movhi	r2,16
10006c10:	8c000234 	orhi	r16,r17,8
10006c14:	10bfffc4 	addi	r2,r2,-1
10006c18:	b027883a 	mov	r19,r22
10006c1c:	80a0703a 	and	r16,r16,r2
10006c20:	902f883a 	mov	r23,r18
10006c24:	003f1a06 	br	10006890 <__alt_data_end+0xf8006890>
10006c28:	00800434 	movhi	r2,16
10006c2c:	84000234 	orhi	r16,r16,8
10006c30:	10bfffc4 	addi	r2,r2,-1
10006c34:	80a0703a 	and	r16,r16,r2
10006c38:	003f1506 	br	10006890 <__alt_data_end+0xf8006890>
10006c3c:	3009883a 	mov	r4,r6
10006c40:	d9400215 	stw	r5,8(sp)
10006c44:	d9800715 	stw	r6,28(sp)
10006c48:	da400415 	stw	r9,16(sp)
10006c4c:	da800315 	stw	r10,12(sp)
10006c50:	00079700 	call	10007970 <__clzsi2>
10006c54:	10c00804 	addi	r3,r2,32
10006c58:	010009c4 	movi	r4,39
10006c5c:	d9400217 	ldw	r5,8(sp)
10006c60:	d9800717 	ldw	r6,28(sp)
10006c64:	da400417 	ldw	r9,16(sp)
10006c68:	da800317 	ldw	r10,12(sp)
10006c6c:	20fee20e 	bge	r4,r3,100067f8 <__alt_data_end+0xf80067f8>
10006c70:	147ffe04 	addi	r17,r2,-8
10006c74:	9462983a 	sll	r17,r18,r17
10006c78:	0025883a 	mov	r18,zero
10006c7c:	003ee506 	br	10006814 <__alt_data_end+0xf8006814>
10006c80:	d9800715 	stw	r6,28(sp)
10006c84:	d9c00215 	stw	r7,8(sp)
10006c88:	da400415 	stw	r9,16(sp)
10006c8c:	00079700 	call	10007970 <__clzsi2>
10006c90:	10c00804 	addi	r3,r2,32
10006c94:	010009c4 	movi	r4,39
10006c98:	d9800717 	ldw	r6,28(sp)
10006c9c:	d9c00217 	ldw	r7,8(sp)
10006ca0:	da400417 	ldw	r9,16(sp)
10006ca4:	20feb40e 	bge	r4,r3,10006778 <__alt_data_end+0xf8006778>
10006ca8:	143ffe04 	addi	r16,r2,-8
10006cac:	9420983a 	sll	r16,r18,r16
10006cb0:	002f883a 	mov	r23,zero
10006cb4:	003eb706 	br	10006794 <__alt_data_end+0xf8006794>
10006cb8:	8004977a 	slli	r2,r16,29
10006cbc:	b82ed0fa 	srli	r23,r23,3
10006cc0:	8020927a 	slli	r16,r16,9
10006cc4:	2101ffcc 	andi	r4,r4,2047
10006cc8:	15eeb03a 	or	r23,r2,r23
10006ccc:	8020d33a 	srli	r16,r16,12
10006cd0:	34c0004c 	andi	r19,r6,1
10006cd4:	003e8706 	br	100066f4 <__alt_data_end+0xf80066f4>
10006cd8:	00bf0084 	movi	r2,-1022
10006cdc:	10c5c83a 	sub	r2,r2,r3
10006ce0:	01000e04 	movi	r4,56
10006ce4:	2080080e 	bge	r4,r2,10006d08 <__muldf3+0x77c>
10006ce8:	34c0004c 	andi	r19,r6,1
10006cec:	0009883a 	mov	r4,zero
10006cf0:	0021883a 	mov	r16,zero
10006cf4:	002f883a 	mov	r23,zero
10006cf8:	003e7e06 	br	100066f4 <__alt_data_end+0xf80066f4>
10006cfc:	4007883a 	mov	r3,r8
10006d00:	480d883a 	mov	r6,r9
10006d04:	003fa506 	br	10006b9c <__alt_data_end+0xf8006b9c>
10006d08:	010007c4 	movi	r4,31
10006d0c:	20801816 	blt	r4,r2,10006d70 <__muldf3+0x7e4>
10006d10:	18c10784 	addi	r3,r3,1054
10006d14:	80c8983a 	sll	r4,r16,r3
10006d18:	b88ad83a 	srl	r5,r23,r2
10006d1c:	b8c6983a 	sll	r3,r23,r3
10006d20:	80a0d83a 	srl	r16,r16,r2
10006d24:	2908b03a 	or	r4,r5,r4
10006d28:	1804c03a 	cmpne	r2,r3,zero
10006d2c:	2088b03a 	or	r4,r4,r2
10006d30:	208001cc 	andi	r2,r4,7
10006d34:	10000726 	beq	r2,zero,10006d54 <__muldf3+0x7c8>
10006d38:	20c003cc 	andi	r3,r4,15
10006d3c:	00800104 	movi	r2,4
10006d40:	18800426 	beq	r3,r2,10006d54 <__muldf3+0x7c8>
10006d44:	20c00104 	addi	r3,r4,4
10006d48:	1905803a 	cmpltu	r2,r3,r4
10006d4c:	80a1883a 	add	r16,r16,r2
10006d50:	1809883a 	mov	r4,r3
10006d54:	8080202c 	andhi	r2,r16,128
10006d58:	10001b26 	beq	r2,zero,10006dc8 <__muldf3+0x83c>
10006d5c:	34c0004c 	andi	r19,r6,1
10006d60:	01000044 	movi	r4,1
10006d64:	0021883a 	mov	r16,zero
10006d68:	002f883a 	mov	r23,zero
10006d6c:	003e6106 	br	100066f4 <__alt_data_end+0xf80066f4>
10006d70:	013ef884 	movi	r4,-1054
10006d74:	20c9c83a 	sub	r4,r4,r3
10006d78:	01400804 	movi	r5,32
10006d7c:	8108d83a 	srl	r4,r16,r4
10006d80:	11401526 	beq	r2,r5,10006dd8 <__muldf3+0x84c>
10006d84:	18c10f84 	addi	r3,r3,1086
10006d88:	80e0983a 	sll	r16,r16,r3
10006d8c:	85eeb03a 	or	r23,r16,r23
10006d90:	b804c03a 	cmpne	r2,r23,zero
10006d94:	1108b03a 	or	r4,r2,r4
10006d98:	20c001cc 	andi	r3,r4,7
10006d9c:	1800061e 	bne	r3,zero,10006db8 <__muldf3+0x82c>
10006da0:	0021883a 	mov	r16,zero
10006da4:	202ed0fa 	srli	r23,r4,3
10006da8:	34c0004c 	andi	r19,r6,1
10006dac:	0009883a 	mov	r4,zero
10006db0:	b8eeb03a 	or	r23,r23,r3
10006db4:	003e4f06 	br	100066f4 <__alt_data_end+0xf80066f4>
10006db8:	20c003cc 	andi	r3,r4,15
10006dbc:	00800104 	movi	r2,4
10006dc0:	0021883a 	mov	r16,zero
10006dc4:	18bfdf1e 	bne	r3,r2,10006d44 <__alt_data_end+0xf8006d44>
10006dc8:	8004927a 	slli	r2,r16,9
10006dcc:	8006977a 	slli	r3,r16,29
10006dd0:	1020d33a 	srli	r16,r2,12
10006dd4:	003ff306 	br	10006da4 <__alt_data_end+0xf8006da4>
10006dd8:	0021883a 	mov	r16,zero
10006ddc:	003feb06 	br	10006d8c <__alt_data_end+0xf8006d8c>
10006de0:	00800434 	movhi	r2,16
10006de4:	84000234 	orhi	r16,r16,8
10006de8:	10bfffc4 	addi	r2,r2,-1
10006dec:	4cc0004c 	andi	r19,r9,1
10006df0:	80a0703a 	and	r16,r16,r2
10006df4:	003ea606 	br	10006890 <__alt_data_end+0xf8006890>

10006df8 <__subdf3>:
10006df8:	00c00434 	movhi	r3,16
10006dfc:	18ffffc4 	addi	r3,r3,-1
10006e00:	defffb04 	addi	sp,sp,-20
10006e04:	28d2703a 	and	r9,r5,r3
10006e08:	3814d53a 	srli	r10,r7,20
10006e0c:	38c6703a 	and	r3,r7,r3
10006e10:	3004d77a 	srli	r2,r6,29
10006e14:	dc800215 	stw	r18,8(sp)
10006e18:	dc000015 	stw	r16,0(sp)
10006e1c:	2824d7fa 	srli	r18,r5,31
10006e20:	2820d53a 	srli	r16,r5,20
10006e24:	481290fa 	slli	r9,r9,3
10006e28:	200ad77a 	srli	r5,r4,29
10006e2c:	180690fa 	slli	r3,r3,3
10006e30:	dc400115 	stw	r17,4(sp)
10006e34:	dfc00415 	stw	ra,16(sp)
10006e38:	202290fa 	slli	r17,r4,3
10006e3c:	dcc00315 	stw	r19,12(sp)
10006e40:	5281ffcc 	andi	r10,r10,2047
10006e44:	0101ffc4 	movi	r4,2047
10006e48:	9011883a 	mov	r8,r18
10006e4c:	8401ffcc 	andi	r16,r16,2047
10006e50:	94803fcc 	andi	r18,r18,255
10006e54:	494ab03a 	or	r5,r9,r5
10006e58:	380ed7fa 	srli	r7,r7,31
10006e5c:	1886b03a 	or	r3,r3,r2
10006e60:	300c90fa 	slli	r6,r6,3
10006e64:	51009026 	beq	r10,r4,100070a8 <__subdf3+0x2b0>
10006e68:	39c0005c 	xori	r7,r7,1
10006e6c:	8285c83a 	sub	r2,r16,r10
10006e70:	91c06f26 	beq	r18,r7,10007030 <__subdf3+0x238>
10006e74:	0080b10e 	bge	zero,r2,1000713c <__subdf3+0x344>
10006e78:	50002a1e 	bne	r10,zero,10006f24 <__subdf3+0x12c>
10006e7c:	1988b03a 	or	r4,r3,r6
10006e80:	2000941e 	bne	r4,zero,100070d4 <__subdf3+0x2dc>
10006e84:	888001cc 	andi	r2,r17,7
10006e88:	10005b26 	beq	r2,zero,10006ff8 <__subdf3+0x200>
10006e8c:	88c003cc 	andi	r3,r17,15
10006e90:	00800104 	movi	r2,4
10006e94:	18805826 	beq	r3,r2,10006ff8 <__subdf3+0x200>
10006e98:	88c00104 	addi	r3,r17,4
10006e9c:	1c63803a 	cmpltu	r17,r3,r17
10006ea0:	2c4b883a 	add	r5,r5,r17
10006ea4:	2880202c 	andhi	r2,r5,128
10006ea8:	9200004c 	andi	r8,r18,1
10006eac:	1823883a 	mov	r17,r3
10006eb0:	10005426 	beq	r2,zero,10007004 <__subdf3+0x20c>
10006eb4:	84000044 	addi	r16,r16,1
10006eb8:	0081ffc4 	movi	r2,2047
10006ebc:	8080bf26 	beq	r16,r2,100071bc <__subdf3+0x3c4>
10006ec0:	013fe034 	movhi	r4,65408
10006ec4:	213fffc4 	addi	r4,r4,-1
10006ec8:	290a703a 	and	r5,r5,r4
10006ecc:	2804977a 	slli	r2,r5,29
10006ed0:	280a927a 	slli	r5,r5,9
10006ed4:	8822d0fa 	srli	r17,r17,3
10006ed8:	8401ffcc 	andi	r16,r16,2047
10006edc:	2808d33a 	srli	r4,r5,12
10006ee0:	1444b03a 	or	r2,r2,r17
10006ee4:	8401ffcc 	andi	r16,r16,2047
10006ee8:	800a953a 	slli	r5,r16,20
10006eec:	40c03fcc 	andi	r3,r8,255
10006ef0:	04000434 	movhi	r16,16
10006ef4:	180697fa 	slli	r3,r3,31
10006ef8:	843fffc4 	addi	r16,r16,-1
10006efc:	2420703a 	and	r16,r4,r16
10006f00:	8160b03a 	or	r16,r16,r5
10006f04:	80c6b03a 	or	r3,r16,r3
10006f08:	dfc00417 	ldw	ra,16(sp)
10006f0c:	dcc00317 	ldw	r19,12(sp)
10006f10:	dc800217 	ldw	r18,8(sp)
10006f14:	dc400117 	ldw	r17,4(sp)
10006f18:	dc000017 	ldw	r16,0(sp)
10006f1c:	dec00504 	addi	sp,sp,20
10006f20:	f800283a 	ret
10006f24:	0101ffc4 	movi	r4,2047
10006f28:	813fd626 	beq	r16,r4,10006e84 <__alt_data_end+0xf8006e84>
10006f2c:	18c02034 	orhi	r3,r3,128
10006f30:	01000e04 	movi	r4,56
10006f34:	2080a416 	blt	r4,r2,100071c8 <__subdf3+0x3d0>
10006f38:	010007c4 	movi	r4,31
10006f3c:	2080c716 	blt	r4,r2,1000725c <__subdf3+0x464>
10006f40:	01000804 	movi	r4,32
10006f44:	2089c83a 	sub	r4,r4,r2
10006f48:	1910983a 	sll	r8,r3,r4
10006f4c:	308ed83a 	srl	r7,r6,r2
10006f50:	3108983a 	sll	r4,r6,r4
10006f54:	1884d83a 	srl	r2,r3,r2
10006f58:	41ccb03a 	or	r6,r8,r7
10006f5c:	2008c03a 	cmpne	r4,r4,zero
10006f60:	310cb03a 	or	r6,r6,r4
10006f64:	898dc83a 	sub	r6,r17,r6
10006f68:	89a3803a 	cmpltu	r17,r17,r6
10006f6c:	288bc83a 	sub	r5,r5,r2
10006f70:	2c4bc83a 	sub	r5,r5,r17
10006f74:	3023883a 	mov	r17,r6
10006f78:	2880202c 	andhi	r2,r5,128
10006f7c:	10006b26 	beq	r2,zero,1000712c <__subdf3+0x334>
10006f80:	04c02034 	movhi	r19,128
10006f84:	9cffffc4 	addi	r19,r19,-1
10006f88:	2ce6703a 	and	r19,r5,r19
10006f8c:	98007c26 	beq	r19,zero,10007180 <__subdf3+0x388>
10006f90:	9809883a 	mov	r4,r19
10006f94:	00079700 	call	10007970 <__clzsi2>
10006f98:	10fffe04 	addi	r3,r2,-8
10006f9c:	010007c4 	movi	r4,31
10006fa0:	20c07d16 	blt	r4,r3,10007198 <__subdf3+0x3a0>
10006fa4:	01400a04 	movi	r5,40
10006fa8:	2885c83a 	sub	r2,r5,r2
10006fac:	888ad83a 	srl	r5,r17,r2
10006fb0:	98e6983a 	sll	r19,r19,r3
10006fb4:	88e2983a 	sll	r17,r17,r3
10006fb8:	2ce6b03a 	or	r19,r5,r19
10006fbc:	1c007a16 	blt	r3,r16,100071a8 <__subdf3+0x3b0>
10006fc0:	1c21c83a 	sub	r16,r3,r16
10006fc4:	81400044 	addi	r5,r16,1
10006fc8:	00c007c4 	movi	r3,31
10006fcc:	19409616 	blt	r3,r5,10007228 <__subdf3+0x430>
10006fd0:	1c21c83a 	sub	r16,r3,r16
10006fd4:	8c08983a 	sll	r4,r17,r16
10006fd8:	8946d83a 	srl	r3,r17,r5
10006fdc:	9c20983a 	sll	r16,r19,r16
10006fe0:	2008c03a 	cmpne	r4,r4,zero
10006fe4:	994ad83a 	srl	r5,r19,r5
10006fe8:	1c06b03a 	or	r3,r3,r16
10006fec:	1922b03a 	or	r17,r3,r4
10006ff0:	0021883a 	mov	r16,zero
10006ff4:	003fa306 	br	10006e84 <__alt_data_end+0xf8006e84>
10006ff8:	2880202c 	andhi	r2,r5,128
10006ffc:	9200004c 	andi	r8,r18,1
10007000:	103fac1e 	bne	r2,zero,10006eb4 <__alt_data_end+0xf8006eb4>
10007004:	2804977a 	slli	r2,r5,29
10007008:	8822d0fa 	srli	r17,r17,3
1000700c:	00c1ffc4 	movi	r3,2047
10007010:	280ad0fa 	srli	r5,r5,3
10007014:	1444b03a 	or	r2,r2,r17
10007018:	80c02726 	beq	r16,r3,100070b8 <__subdf3+0x2c0>
1000701c:	01000434 	movhi	r4,16
10007020:	213fffc4 	addi	r4,r4,-1
10007024:	80e0703a 	and	r16,r16,r3
10007028:	2908703a 	and	r4,r5,r4
1000702c:	003fad06 	br	10006ee4 <__alt_data_end+0xf8006ee4>
10007030:	0080690e 	bge	zero,r2,100071d8 <__subdf3+0x3e0>
10007034:	50002f26 	beq	r10,zero,100070f4 <__subdf3+0x2fc>
10007038:	0101ffc4 	movi	r4,2047
1000703c:	813f9126 	beq	r16,r4,10006e84 <__alt_data_end+0xf8006e84>
10007040:	18c02034 	orhi	r3,r3,128
10007044:	01000e04 	movi	r4,56
10007048:	2080b00e 	bge	r4,r2,1000730c <__subdf3+0x514>
1000704c:	198cb03a 	or	r6,r3,r6
10007050:	300ec03a 	cmpne	r7,r6,zero
10007054:	0005883a 	mov	r2,zero
10007058:	3c4f883a 	add	r7,r7,r17
1000705c:	3c63803a 	cmpltu	r17,r7,r17
10007060:	114b883a 	add	r5,r2,r5
10007064:	2c4b883a 	add	r5,r5,r17
10007068:	3823883a 	mov	r17,r7
1000706c:	2880202c 	andhi	r2,r5,128
10007070:	10002e26 	beq	r2,zero,1000712c <__subdf3+0x334>
10007074:	84000044 	addi	r16,r16,1
10007078:	0081ffc4 	movi	r2,2047
1000707c:	8080de26 	beq	r16,r2,100073f8 <__subdf3+0x600>
10007080:	00bfe034 	movhi	r2,65408
10007084:	10bfffc4 	addi	r2,r2,-1
10007088:	288a703a 	and	r5,r5,r2
1000708c:	880cd07a 	srli	r6,r17,1
10007090:	280897fa 	slli	r4,r5,31
10007094:	88c0004c 	andi	r3,r17,1
10007098:	30e2b03a 	or	r17,r6,r3
1000709c:	280ad07a 	srli	r5,r5,1
100070a0:	8922b03a 	or	r17,r17,r4
100070a4:	003f7706 	br	10006e84 <__alt_data_end+0xf8006e84>
100070a8:	1984b03a 	or	r2,r3,r6
100070ac:	103f6e26 	beq	r2,zero,10006e68 <__alt_data_end+0xf8006e68>
100070b0:	39c03fcc 	andi	r7,r7,255
100070b4:	003f6d06 	br	10006e6c <__alt_data_end+0xf8006e6c>
100070b8:	1146b03a 	or	r3,r2,r5
100070bc:	18003f26 	beq	r3,zero,100071bc <__subdf3+0x3c4>
100070c0:	00c00434 	movhi	r3,16
100070c4:	29000234 	orhi	r4,r5,8
100070c8:	18ffffc4 	addi	r3,r3,-1
100070cc:	20c8703a 	and	r4,r4,r3
100070d0:	003f8406 	br	10006ee4 <__alt_data_end+0xf8006ee4>
100070d4:	10bfffc4 	addi	r2,r2,-1
100070d8:	1000501e 	bne	r2,zero,1000721c <__subdf3+0x424>
100070dc:	898fc83a 	sub	r7,r17,r6
100070e0:	89e3803a 	cmpltu	r17,r17,r7
100070e4:	28cbc83a 	sub	r5,r5,r3
100070e8:	2c4bc83a 	sub	r5,r5,r17
100070ec:	3823883a 	mov	r17,r7
100070f0:	003fa106 	br	10006f78 <__alt_data_end+0xf8006f78>
100070f4:	1988b03a 	or	r4,r3,r6
100070f8:	203f6226 	beq	r4,zero,10006e84 <__alt_data_end+0xf8006e84>
100070fc:	10bfffc4 	addi	r2,r2,-1
10007100:	10009b1e 	bne	r2,zero,10007370 <__subdf3+0x578>
10007104:	344d883a 	add	r6,r6,r17
10007108:	3463803a 	cmpltu	r17,r6,r17
1000710c:	194b883a 	add	r5,r3,r5
10007110:	2c4b883a 	add	r5,r5,r17
10007114:	3023883a 	mov	r17,r6
10007118:	003fd406 	br	1000706c <__alt_data_end+0xf800706c>
1000711c:	1106b03a 	or	r3,r2,r4
10007120:	1800b426 	beq	r3,zero,100073f4 <__subdf3+0x5fc>
10007124:	100b883a 	mov	r5,r2
10007128:	2023883a 	mov	r17,r4
1000712c:	888001cc 	andi	r2,r17,7
10007130:	103f561e 	bne	r2,zero,10006e8c <__alt_data_end+0xf8006e8c>
10007134:	9200004c 	andi	r8,r18,1
10007138:	003fb206 	br	10007004 <__alt_data_end+0xf8007004>
1000713c:	1000531e 	bne	r2,zero,1000728c <__subdf3+0x494>
10007140:	80800044 	addi	r2,r16,1
10007144:	1081ffcc 	andi	r2,r2,2047
10007148:	01000044 	movi	r4,1
1000714c:	2080a00e 	bge	r4,r2,100073d0 <__subdf3+0x5d8>
10007150:	8985c83a 	sub	r2,r17,r6
10007154:	8889803a 	cmpltu	r4,r17,r2
10007158:	28e7c83a 	sub	r19,r5,r3
1000715c:	9927c83a 	sub	r19,r19,r4
10007160:	9900202c 	andhi	r4,r19,128
10007164:	20006226 	beq	r4,zero,100072f0 <__subdf3+0x4f8>
10007168:	3463c83a 	sub	r17,r6,r17
1000716c:	194bc83a 	sub	r5,r3,r5
10007170:	344d803a 	cmpltu	r6,r6,r17
10007174:	29a7c83a 	sub	r19,r5,r6
10007178:	3825883a 	mov	r18,r7
1000717c:	983f841e 	bne	r19,zero,10006f90 <__alt_data_end+0xf8006f90>
10007180:	8809883a 	mov	r4,r17
10007184:	00079700 	call	10007970 <__clzsi2>
10007188:	10800804 	addi	r2,r2,32
1000718c:	10fffe04 	addi	r3,r2,-8
10007190:	010007c4 	movi	r4,31
10007194:	20ff830e 	bge	r4,r3,10006fa4 <__alt_data_end+0xf8006fa4>
10007198:	14fff604 	addi	r19,r2,-40
1000719c:	8ce6983a 	sll	r19,r17,r19
100071a0:	0023883a 	mov	r17,zero
100071a4:	1c3f860e 	bge	r3,r16,10006fc0 <__alt_data_end+0xf8006fc0>
100071a8:	017fe034 	movhi	r5,65408
100071ac:	297fffc4 	addi	r5,r5,-1
100071b0:	80e1c83a 	sub	r16,r16,r3
100071b4:	994a703a 	and	r5,r19,r5
100071b8:	003f3206 	br	10006e84 <__alt_data_end+0xf8006e84>
100071bc:	0009883a 	mov	r4,zero
100071c0:	0005883a 	mov	r2,zero
100071c4:	003f4706 	br	10006ee4 <__alt_data_end+0xf8006ee4>
100071c8:	198cb03a 	or	r6,r3,r6
100071cc:	300cc03a 	cmpne	r6,r6,zero
100071d0:	0005883a 	mov	r2,zero
100071d4:	003f6306 	br	10006f64 <__alt_data_end+0xf8006f64>
100071d8:	10009d1e 	bne	r2,zero,10007450 <__subdf3+0x658>
100071dc:	81c00044 	addi	r7,r16,1
100071e0:	3881ffcc 	andi	r2,r7,2047
100071e4:	02400044 	movi	r9,1
100071e8:	4880680e 	bge	r9,r2,1000738c <__subdf3+0x594>
100071ec:	0081ffc4 	movi	r2,2047
100071f0:	3880ae26 	beq	r7,r2,100074ac <__subdf3+0x6b4>
100071f4:	344d883a 	add	r6,r6,r17
100071f8:	3463803a 	cmpltu	r17,r6,r17
100071fc:	194b883a 	add	r5,r3,r5
10007200:	2c4b883a 	add	r5,r5,r17
10007204:	282297fa 	slli	r17,r5,31
10007208:	300cd07a 	srli	r6,r6,1
1000720c:	280ad07a 	srli	r5,r5,1
10007210:	3821883a 	mov	r16,r7
10007214:	89a2b03a 	or	r17,r17,r6
10007218:	003f1a06 	br	10006e84 <__alt_data_end+0xf8006e84>
1000721c:	0101ffc4 	movi	r4,2047
10007220:	813f431e 	bne	r16,r4,10006f30 <__alt_data_end+0xf8006f30>
10007224:	003f1706 	br	10006e84 <__alt_data_end+0xf8006e84>
10007228:	80bff844 	addi	r2,r16,-31
1000722c:	00c00804 	movi	r3,32
10007230:	9884d83a 	srl	r2,r19,r2
10007234:	28c05126 	beq	r5,r3,1000737c <__subdf3+0x584>
10007238:	00c00fc4 	movi	r3,63
1000723c:	1c21c83a 	sub	r16,r3,r16
10007240:	9c26983a 	sll	r19,r19,r16
10007244:	9c62b03a 	or	r17,r19,r17
10007248:	8822c03a 	cmpne	r17,r17,zero
1000724c:	88a2b03a 	or	r17,r17,r2
10007250:	000b883a 	mov	r5,zero
10007254:	0021883a 	mov	r16,zero
10007258:	003fb406 	br	1000712c <__alt_data_end+0xf800712c>
1000725c:	113ff804 	addi	r4,r2,-32
10007260:	01c00804 	movi	r7,32
10007264:	1908d83a 	srl	r4,r3,r4
10007268:	11c04626 	beq	r2,r7,10007384 <__subdf3+0x58c>
1000726c:	01c01004 	movi	r7,64
10007270:	3885c83a 	sub	r2,r7,r2
10007274:	1884983a 	sll	r2,r3,r2
10007278:	118cb03a 	or	r6,r2,r6
1000727c:	300cc03a 	cmpne	r6,r6,zero
10007280:	310cb03a 	or	r6,r6,r4
10007284:	0005883a 	mov	r2,zero
10007288:	003f3606 	br	10006f64 <__alt_data_end+0xf8006f64>
1000728c:	80002b26 	beq	r16,zero,1000733c <__subdf3+0x544>
10007290:	0101ffc4 	movi	r4,2047
10007294:	51006926 	beq	r10,r4,1000743c <__subdf3+0x644>
10007298:	0085c83a 	sub	r2,zero,r2
1000729c:	29402034 	orhi	r5,r5,128
100072a0:	01000e04 	movi	r4,56
100072a4:	20807d16 	blt	r4,r2,1000749c <__subdf3+0x6a4>
100072a8:	010007c4 	movi	r4,31
100072ac:	2080d916 	blt	r4,r2,10007614 <__subdf3+0x81c>
100072b0:	01000804 	movi	r4,32
100072b4:	2089c83a 	sub	r4,r4,r2
100072b8:	2912983a 	sll	r9,r5,r4
100072bc:	8890d83a 	srl	r8,r17,r2
100072c0:	8908983a 	sll	r4,r17,r4
100072c4:	2884d83a 	srl	r2,r5,r2
100072c8:	4a22b03a 	or	r17,r9,r8
100072cc:	2008c03a 	cmpne	r4,r4,zero
100072d0:	8922b03a 	or	r17,r17,r4
100072d4:	3463c83a 	sub	r17,r6,r17
100072d8:	1885c83a 	sub	r2,r3,r2
100072dc:	344d803a 	cmpltu	r6,r6,r17
100072e0:	118bc83a 	sub	r5,r2,r6
100072e4:	5021883a 	mov	r16,r10
100072e8:	3825883a 	mov	r18,r7
100072ec:	003f2206 	br	10006f78 <__alt_data_end+0xf8006f78>
100072f0:	9886b03a 	or	r3,r19,r2
100072f4:	18001c1e 	bne	r3,zero,10007368 <__subdf3+0x570>
100072f8:	0011883a 	mov	r8,zero
100072fc:	000b883a 	mov	r5,zero
10007300:	0023883a 	mov	r17,zero
10007304:	0021883a 	mov	r16,zero
10007308:	003f3e06 	br	10007004 <__alt_data_end+0xf8007004>
1000730c:	010007c4 	movi	r4,31
10007310:	20803c16 	blt	r4,r2,10007404 <__subdf3+0x60c>
10007314:	01000804 	movi	r4,32
10007318:	2089c83a 	sub	r4,r4,r2
1000731c:	1912983a 	sll	r9,r3,r4
10007320:	308ed83a 	srl	r7,r6,r2
10007324:	3108983a 	sll	r4,r6,r4
10007328:	1884d83a 	srl	r2,r3,r2
1000732c:	49ceb03a 	or	r7,r9,r7
10007330:	2008c03a 	cmpne	r4,r4,zero
10007334:	390eb03a 	or	r7,r7,r4
10007338:	003f4706 	br	10007058 <__alt_data_end+0xf8007058>
1000733c:	2c48b03a 	or	r4,r5,r17
10007340:	20003e26 	beq	r4,zero,1000743c <__subdf3+0x644>
10007344:	0084303a 	nor	r2,zero,r2
10007348:	10003a1e 	bne	r2,zero,10007434 <__subdf3+0x63c>
1000734c:	3463c83a 	sub	r17,r6,r17
10007350:	194bc83a 	sub	r5,r3,r5
10007354:	344d803a 	cmpltu	r6,r6,r17
10007358:	298bc83a 	sub	r5,r5,r6
1000735c:	5021883a 	mov	r16,r10
10007360:	3825883a 	mov	r18,r7
10007364:	003f0406 	br	10006f78 <__alt_data_end+0xf8006f78>
10007368:	1023883a 	mov	r17,r2
1000736c:	003f0706 	br	10006f8c <__alt_data_end+0xf8006f8c>
10007370:	0101ffc4 	movi	r4,2047
10007374:	813f331e 	bne	r16,r4,10007044 <__alt_data_end+0xf8007044>
10007378:	003ec206 	br	10006e84 <__alt_data_end+0xf8006e84>
1000737c:	0027883a 	mov	r19,zero
10007380:	003fb006 	br	10007244 <__alt_data_end+0xf8007244>
10007384:	0005883a 	mov	r2,zero
10007388:	003fbb06 	br	10007278 <__alt_data_end+0xf8007278>
1000738c:	2c44b03a 	or	r2,r5,r17
10007390:	80008b1e 	bne	r16,zero,100075c0 <__subdf3+0x7c8>
10007394:	1000b526 	beq	r2,zero,1000766c <__subdf3+0x874>
10007398:	1984b03a 	or	r2,r3,r6
1000739c:	103eb926 	beq	r2,zero,10006e84 <__alt_data_end+0xf8006e84>
100073a0:	3449883a 	add	r4,r6,r17
100073a4:	2463803a 	cmpltu	r17,r4,r17
100073a8:	194b883a 	add	r5,r3,r5
100073ac:	2c4b883a 	add	r5,r5,r17
100073b0:	2880202c 	andhi	r2,r5,128
100073b4:	2023883a 	mov	r17,r4
100073b8:	103f5c26 	beq	r2,zero,1000712c <__alt_data_end+0xf800712c>
100073bc:	00bfe034 	movhi	r2,65408
100073c0:	10bfffc4 	addi	r2,r2,-1
100073c4:	4821883a 	mov	r16,r9
100073c8:	288a703a 	and	r5,r5,r2
100073cc:	003ead06 	br	10006e84 <__alt_data_end+0xf8006e84>
100073d0:	2c44b03a 	or	r2,r5,r17
100073d4:	8000291e 	bne	r16,zero,1000747c <__subdf3+0x684>
100073d8:	10004f1e 	bne	r2,zero,10007518 <__subdf3+0x720>
100073dc:	1984b03a 	or	r2,r3,r6
100073e0:	10000426 	beq	r2,zero,100073f4 <__subdf3+0x5fc>
100073e4:	180b883a 	mov	r5,r3
100073e8:	3023883a 	mov	r17,r6
100073ec:	3825883a 	mov	r18,r7
100073f0:	003ea406 	br	10006e84 <__alt_data_end+0xf8006e84>
100073f4:	0011883a 	mov	r8,zero
100073f8:	000b883a 	mov	r5,zero
100073fc:	0023883a 	mov	r17,zero
10007400:	003f0006 	br	10007004 <__alt_data_end+0xf8007004>
10007404:	11fff804 	addi	r7,r2,-32
10007408:	19c8d83a 	srl	r4,r3,r7
1000740c:	01c00804 	movi	r7,32
10007410:	11c07e26 	beq	r2,r7,1000760c <__subdf3+0x814>
10007414:	01c01004 	movi	r7,64
10007418:	3885c83a 	sub	r2,r7,r2
1000741c:	1884983a 	sll	r2,r3,r2
10007420:	118cb03a 	or	r6,r2,r6
10007424:	300ec03a 	cmpne	r7,r6,zero
10007428:	390eb03a 	or	r7,r7,r4
1000742c:	0005883a 	mov	r2,zero
10007430:	003f0906 	br	10007058 <__alt_data_end+0xf8007058>
10007434:	0101ffc4 	movi	r4,2047
10007438:	513f991e 	bne	r10,r4,100072a0 <__alt_data_end+0xf80072a0>
1000743c:	180b883a 	mov	r5,r3
10007440:	3023883a 	mov	r17,r6
10007444:	5021883a 	mov	r16,r10
10007448:	3825883a 	mov	r18,r7
1000744c:	003e8d06 	br	10006e84 <__alt_data_end+0xf8006e84>
10007450:	80001a1e 	bne	r16,zero,100074bc <__subdf3+0x6c4>
10007454:	2c48b03a 	or	r4,r5,r17
10007458:	20005526 	beq	r4,zero,100075b0 <__subdf3+0x7b8>
1000745c:	0084303a 	nor	r2,zero,r2
10007460:	1000511e 	bne	r2,zero,100075a8 <__subdf3+0x7b0>
10007464:	89a3883a 	add	r17,r17,r6
10007468:	194b883a 	add	r5,r3,r5
1000746c:	898d803a 	cmpltu	r6,r17,r6
10007470:	298b883a 	add	r5,r5,r6
10007474:	5021883a 	mov	r16,r10
10007478:	003efc06 	br	1000706c <__alt_data_end+0xf800706c>
1000747c:	1000341e 	bne	r2,zero,10007550 <__subdf3+0x758>
10007480:	1984b03a 	or	r2,r3,r6
10007484:	10006f26 	beq	r2,zero,10007644 <__subdf3+0x84c>
10007488:	180b883a 	mov	r5,r3
1000748c:	3023883a 	mov	r17,r6
10007490:	3825883a 	mov	r18,r7
10007494:	0401ffc4 	movi	r16,2047
10007498:	003e7a06 	br	10006e84 <__alt_data_end+0xf8006e84>
1000749c:	2c62b03a 	or	r17,r5,r17
100074a0:	8822c03a 	cmpne	r17,r17,zero
100074a4:	0005883a 	mov	r2,zero
100074a8:	003f8a06 	br	100072d4 <__alt_data_end+0xf80072d4>
100074ac:	3821883a 	mov	r16,r7
100074b0:	000b883a 	mov	r5,zero
100074b4:	0023883a 	mov	r17,zero
100074b8:	003ed206 	br	10007004 <__alt_data_end+0xf8007004>
100074bc:	0101ffc4 	movi	r4,2047
100074c0:	51003b26 	beq	r10,r4,100075b0 <__subdf3+0x7b8>
100074c4:	0085c83a 	sub	r2,zero,r2
100074c8:	29402034 	orhi	r5,r5,128
100074cc:	01000e04 	movi	r4,56
100074d0:	20806216 	blt	r4,r2,1000765c <__subdf3+0x864>
100074d4:	010007c4 	movi	r4,31
100074d8:	20806b16 	blt	r4,r2,10007688 <__subdf3+0x890>
100074dc:	01000804 	movi	r4,32
100074e0:	2089c83a 	sub	r4,r4,r2
100074e4:	2912983a 	sll	r9,r5,r4
100074e8:	888ed83a 	srl	r7,r17,r2
100074ec:	8908983a 	sll	r4,r17,r4
100074f0:	2884d83a 	srl	r2,r5,r2
100074f4:	49e2b03a 	or	r17,r9,r7
100074f8:	2008c03a 	cmpne	r4,r4,zero
100074fc:	8922b03a 	or	r17,r17,r4
10007500:	89a3883a 	add	r17,r17,r6
10007504:	10c5883a 	add	r2,r2,r3
10007508:	898d803a 	cmpltu	r6,r17,r6
1000750c:	118b883a 	add	r5,r2,r6
10007510:	5021883a 	mov	r16,r10
10007514:	003ed506 	br	1000706c <__alt_data_end+0xf800706c>
10007518:	1984b03a 	or	r2,r3,r6
1000751c:	103e5926 	beq	r2,zero,10006e84 <__alt_data_end+0xf8006e84>
10007520:	8989c83a 	sub	r4,r17,r6
10007524:	8911803a 	cmpltu	r8,r17,r4
10007528:	28c5c83a 	sub	r2,r5,r3
1000752c:	1205c83a 	sub	r2,r2,r8
10007530:	1200202c 	andhi	r8,r2,128
10007534:	403ef926 	beq	r8,zero,1000711c <__alt_data_end+0xf800711c>
10007538:	3463c83a 	sub	r17,r6,r17
1000753c:	194bc83a 	sub	r5,r3,r5
10007540:	344d803a 	cmpltu	r6,r6,r17
10007544:	298bc83a 	sub	r5,r5,r6
10007548:	3825883a 	mov	r18,r7
1000754c:	003e4d06 	br	10006e84 <__alt_data_end+0xf8006e84>
10007550:	1984b03a 	or	r2,r3,r6
10007554:	10002b26 	beq	r2,zero,10007604 <__subdf3+0x80c>
10007558:	2808d0fa 	srli	r4,r5,3
1000755c:	8822d0fa 	srli	r17,r17,3
10007560:	280a977a 	slli	r5,r5,29
10007564:	2080022c 	andhi	r2,r4,8
10007568:	2c62b03a 	or	r17,r5,r17
1000756c:	10000826 	beq	r2,zero,10007590 <__subdf3+0x798>
10007570:	1810d0fa 	srli	r8,r3,3
10007574:	4080022c 	andhi	r2,r8,8
10007578:	1000051e 	bne	r2,zero,10007590 <__subdf3+0x798>
1000757c:	300cd0fa 	srli	r6,r6,3
10007580:	1804977a 	slli	r2,r3,29
10007584:	4009883a 	mov	r4,r8
10007588:	3825883a 	mov	r18,r7
1000758c:	11a2b03a 	or	r17,r2,r6
10007590:	880ad77a 	srli	r5,r17,29
10007594:	200890fa 	slli	r4,r4,3
10007598:	882290fa 	slli	r17,r17,3
1000759c:	0401ffc4 	movi	r16,2047
100075a0:	290ab03a 	or	r5,r5,r4
100075a4:	003e3706 	br	10006e84 <__alt_data_end+0xf8006e84>
100075a8:	0101ffc4 	movi	r4,2047
100075ac:	513fc71e 	bne	r10,r4,100074cc <__alt_data_end+0xf80074cc>
100075b0:	180b883a 	mov	r5,r3
100075b4:	3023883a 	mov	r17,r6
100075b8:	5021883a 	mov	r16,r10
100075bc:	003e3106 	br	10006e84 <__alt_data_end+0xf8006e84>
100075c0:	10002d26 	beq	r2,zero,10007678 <__subdf3+0x880>
100075c4:	1984b03a 	or	r2,r3,r6
100075c8:	10000e26 	beq	r2,zero,10007604 <__subdf3+0x80c>
100075cc:	2808d0fa 	srli	r4,r5,3
100075d0:	8822d0fa 	srli	r17,r17,3
100075d4:	280a977a 	slli	r5,r5,29
100075d8:	2080022c 	andhi	r2,r4,8
100075dc:	2c62b03a 	or	r17,r5,r17
100075e0:	103feb26 	beq	r2,zero,10007590 <__alt_data_end+0xf8007590>
100075e4:	180ed0fa 	srli	r7,r3,3
100075e8:	3880022c 	andhi	r2,r7,8
100075ec:	103fe81e 	bne	r2,zero,10007590 <__alt_data_end+0xf8007590>
100075f0:	300cd0fa 	srli	r6,r6,3
100075f4:	1804977a 	slli	r2,r3,29
100075f8:	3809883a 	mov	r4,r7
100075fc:	11a2b03a 	or	r17,r2,r6
10007600:	003fe306 	br	10007590 <__alt_data_end+0xf8007590>
10007604:	0401ffc4 	movi	r16,2047
10007608:	003e1e06 	br	10006e84 <__alt_data_end+0xf8006e84>
1000760c:	0005883a 	mov	r2,zero
10007610:	003f8306 	br	10007420 <__alt_data_end+0xf8007420>
10007614:	113ff804 	addi	r4,r2,-32
10007618:	02000804 	movi	r8,32
1000761c:	2908d83a 	srl	r4,r5,r4
10007620:	12002526 	beq	r2,r8,100076b8 <__subdf3+0x8c0>
10007624:	02001004 	movi	r8,64
10007628:	4085c83a 	sub	r2,r8,r2
1000762c:	288a983a 	sll	r5,r5,r2
10007630:	2c62b03a 	or	r17,r5,r17
10007634:	8822c03a 	cmpne	r17,r17,zero
10007638:	8922b03a 	or	r17,r17,r4
1000763c:	0005883a 	mov	r2,zero
10007640:	003f2406 	br	100072d4 <__alt_data_end+0xf80072d4>
10007644:	01402034 	movhi	r5,128
10007648:	0011883a 	mov	r8,zero
1000764c:	297fffc4 	addi	r5,r5,-1
10007650:	047ffe04 	movi	r17,-8
10007654:	0401ffc4 	movi	r16,2047
10007658:	003e6a06 	br	10007004 <__alt_data_end+0xf8007004>
1000765c:	2c62b03a 	or	r17,r5,r17
10007660:	8822c03a 	cmpne	r17,r17,zero
10007664:	0005883a 	mov	r2,zero
10007668:	003fa506 	br	10007500 <__alt_data_end+0xf8007500>
1000766c:	180b883a 	mov	r5,r3
10007670:	3023883a 	mov	r17,r6
10007674:	003e0306 	br	10006e84 <__alt_data_end+0xf8006e84>
10007678:	180b883a 	mov	r5,r3
1000767c:	3023883a 	mov	r17,r6
10007680:	0401ffc4 	movi	r16,2047
10007684:	003dff06 	br	10006e84 <__alt_data_end+0xf8006e84>
10007688:	113ff804 	addi	r4,r2,-32
1000768c:	01c00804 	movi	r7,32
10007690:	2908d83a 	srl	r4,r5,r4
10007694:	11c00a26 	beq	r2,r7,100076c0 <__subdf3+0x8c8>
10007698:	01c01004 	movi	r7,64
1000769c:	3885c83a 	sub	r2,r7,r2
100076a0:	288a983a 	sll	r5,r5,r2
100076a4:	2c62b03a 	or	r17,r5,r17
100076a8:	8822c03a 	cmpne	r17,r17,zero
100076ac:	8922b03a 	or	r17,r17,r4
100076b0:	0005883a 	mov	r2,zero
100076b4:	003f9206 	br	10007500 <__alt_data_end+0xf8007500>
100076b8:	000b883a 	mov	r5,zero
100076bc:	003fdc06 	br	10007630 <__alt_data_end+0xf8007630>
100076c0:	000b883a 	mov	r5,zero
100076c4:	003ff706 	br	100076a4 <__alt_data_end+0xf80076a4>

100076c8 <__extendsfdf2>:
100076c8:	200ad5fa 	srli	r5,r4,23
100076cc:	defffd04 	addi	sp,sp,-12
100076d0:	dc400115 	stw	r17,4(sp)
100076d4:	29403fcc 	andi	r5,r5,255
100076d8:	29800044 	addi	r6,r5,1
100076dc:	04402034 	movhi	r17,128
100076e0:	dc000015 	stw	r16,0(sp)
100076e4:	8c7fffc4 	addi	r17,r17,-1
100076e8:	dfc00215 	stw	ra,8(sp)
100076ec:	31803fcc 	andi	r6,r6,255
100076f0:	00800044 	movi	r2,1
100076f4:	8922703a 	and	r17,r17,r4
100076f8:	2020d7fa 	srli	r16,r4,31
100076fc:	1180110e 	bge	r2,r6,10007744 <__extendsfdf2+0x7c>
10007700:	880ed0fa 	srli	r7,r17,3
10007704:	8822977a 	slli	r17,r17,29
10007708:	2940e004 	addi	r5,r5,896
1000770c:	2941ffcc 	andi	r5,r5,2047
10007710:	280c953a 	slli	r6,r5,20
10007714:	01400434 	movhi	r5,16
10007718:	800697fa 	slli	r3,r16,31
1000771c:	297fffc4 	addi	r5,r5,-1
10007720:	394a703a 	and	r5,r7,r5
10007724:	298ab03a 	or	r5,r5,r6
10007728:	8805883a 	mov	r2,r17
1000772c:	28c6b03a 	or	r3,r5,r3
10007730:	dfc00217 	ldw	ra,8(sp)
10007734:	dc400117 	ldw	r17,4(sp)
10007738:	dc000017 	ldw	r16,0(sp)
1000773c:	dec00304 	addi	sp,sp,12
10007740:	f800283a 	ret
10007744:	2800111e 	bne	r5,zero,1000778c <__extendsfdf2+0xc4>
10007748:	88001c26 	beq	r17,zero,100077bc <__extendsfdf2+0xf4>
1000774c:	8809883a 	mov	r4,r17
10007750:	00079700 	call	10007970 <__clzsi2>
10007754:	00c00284 	movi	r3,10
10007758:	18801b16 	blt	r3,r2,100077c8 <__extendsfdf2+0x100>
1000775c:	01c002c4 	movi	r7,11
10007760:	388fc83a 	sub	r7,r7,r2
10007764:	10c00544 	addi	r3,r2,21
10007768:	89ced83a 	srl	r7,r17,r7
1000776c:	88e2983a 	sll	r17,r17,r3
10007770:	0180e244 	movi	r6,905
10007774:	308bc83a 	sub	r5,r6,r2
10007778:	01800434 	movhi	r6,16
1000777c:	31bfffc4 	addi	r6,r6,-1
10007780:	398e703a 	and	r7,r7,r6
10007784:	2941ffcc 	andi	r5,r5,2047
10007788:	003fe006 	br	1000770c <__alt_data_end+0xf800770c>
1000778c:	88000826 	beq	r17,zero,100077b0 <__extendsfdf2+0xe8>
10007790:	880ed0fa 	srli	r7,r17,3
10007794:	00800434 	movhi	r2,16
10007798:	10bfffc4 	addi	r2,r2,-1
1000779c:	39c00234 	orhi	r7,r7,8
100077a0:	8822977a 	slli	r17,r17,29
100077a4:	388e703a 	and	r7,r7,r2
100077a8:	0141ffc4 	movi	r5,2047
100077ac:	003fd706 	br	1000770c <__alt_data_end+0xf800770c>
100077b0:	0141ffc4 	movi	r5,2047
100077b4:	000f883a 	mov	r7,zero
100077b8:	003fd406 	br	1000770c <__alt_data_end+0xf800770c>
100077bc:	000b883a 	mov	r5,zero
100077c0:	000f883a 	mov	r7,zero
100077c4:	003fd106 	br	1000770c <__alt_data_end+0xf800770c>
100077c8:	11fffd44 	addi	r7,r2,-11
100077cc:	89ce983a 	sll	r7,r17,r7
100077d0:	0023883a 	mov	r17,zero
100077d4:	003fe606 	br	10007770 <__alt_data_end+0xf8007770>

100077d8 <__truncdfsf2>:
100077d8:	2810d53a 	srli	r8,r5,20
100077dc:	01c00434 	movhi	r7,16
100077e0:	39ffffc4 	addi	r7,r7,-1
100077e4:	29ce703a 	and	r7,r5,r7
100077e8:	380e90fa 	slli	r7,r7,3
100077ec:	4201ffcc 	andi	r8,r8,2047
100077f0:	200cd77a 	srli	r6,r4,29
100077f4:	42400044 	addi	r9,r8,1
100077f8:	4a41ffcc 	andi	r9,r9,2047
100077fc:	00800044 	movi	r2,1
10007800:	398cb03a 	or	r6,r7,r6
10007804:	280ad7fa 	srli	r5,r5,31
10007808:	200e90fa 	slli	r7,r4,3
1000780c:	1240230e 	bge	r2,r9,1000789c <__truncdfsf2+0xc4>
10007810:	40ff2004 	addi	r3,r8,-896
10007814:	00803f84 	movi	r2,254
10007818:	10c01516 	blt	r2,r3,10007870 <__truncdfsf2+0x98>
1000781c:	00c02d0e 	bge	zero,r3,100078d4 <__truncdfsf2+0xfc>
10007820:	200891ba 	slli	r4,r4,6
10007824:	300c90fa 	slli	r6,r6,3
10007828:	380ed77a 	srli	r7,r7,29
1000782c:	2008c03a 	cmpne	r4,r4,zero
10007830:	310cb03a 	or	r6,r6,r4
10007834:	31ccb03a 	or	r6,r6,r7
10007838:	308001cc 	andi	r2,r6,7
1000783c:	10000426 	beq	r2,zero,10007850 <__truncdfsf2+0x78>
10007840:	310003cc 	andi	r4,r6,15
10007844:	00800104 	movi	r2,4
10007848:	20800126 	beq	r4,r2,10007850 <__truncdfsf2+0x78>
1000784c:	31800104 	addi	r6,r6,4
10007850:	3081002c 	andhi	r2,r6,1024
10007854:	10002326 	beq	r2,zero,100078e4 <__truncdfsf2+0x10c>
10007858:	18c00044 	addi	r3,r3,1
1000785c:	00803fc4 	movi	r2,255
10007860:	18800326 	beq	r3,r2,10007870 <__truncdfsf2+0x98>
10007864:	300c91ba 	slli	r6,r6,6
10007868:	300cd27a 	srli	r6,r6,9
1000786c:	00000206 	br	10007878 <__truncdfsf2+0xa0>
10007870:	00ffffc4 	movi	r3,-1
10007874:	000d883a 	mov	r6,zero
10007878:	18c03fcc 	andi	r3,r3,255
1000787c:	180895fa 	slli	r4,r3,23
10007880:	00c02034 	movhi	r3,128
10007884:	280a97fa 	slli	r5,r5,31
10007888:	18ffffc4 	addi	r3,r3,-1
1000788c:	30c6703a 	and	r3,r6,r3
10007890:	1906b03a 	or	r3,r3,r4
10007894:	1944b03a 	or	r2,r3,r5
10007898:	f800283a 	ret
1000789c:	4000071e 	bne	r8,zero,100078bc <__truncdfsf2+0xe4>
100078a0:	31ccb03a 	or	r6,r6,r7
100078a4:	30000d1e 	bne	r6,zero,100078dc <__truncdfsf2+0x104>
100078a8:	0007883a 	mov	r3,zero
100078ac:	00802034 	movhi	r2,128
100078b0:	10bfffc4 	addi	r2,r2,-1
100078b4:	308c703a 	and	r6,r6,r2
100078b8:	003fef06 	br	10007878 <__alt_data_end+0xf8007878>
100078bc:	31c8b03a 	or	r4,r6,r7
100078c0:	203feb26 	beq	r4,zero,10007870 <__alt_data_end+0xf8007870>
100078c4:	300c90fa 	slli	r6,r6,3
100078c8:	00c03fc4 	movi	r3,255
100078cc:	31808034 	orhi	r6,r6,512
100078d0:	003fd906 	br	10007838 <__alt_data_end+0xf8007838>
100078d4:	00bffa44 	movi	r2,-23
100078d8:	1880090e 	bge	r3,r2,10007900 <__truncdfsf2+0x128>
100078dc:	01800144 	movi	r6,5
100078e0:	0007883a 	mov	r3,zero
100078e4:	00803fc4 	movi	r2,255
100078e8:	300cd0fa 	srli	r6,r6,3
100078ec:	18bfef1e 	bne	r3,r2,100078ac <__alt_data_end+0xf80078ac>
100078f0:	303fdf26 	beq	r6,zero,10007870 <__alt_data_end+0xf8007870>
100078f4:	31801034 	orhi	r6,r6,64
100078f8:	00ffffc4 	movi	r3,-1
100078fc:	003feb06 	br	100078ac <__alt_data_end+0xf80078ac>
10007900:	0080e784 	movi	r2,926
10007904:	1205c83a 	sub	r2,r2,r8
10007908:	00c007c4 	movi	r3,31
1000790c:	31802034 	orhi	r6,r6,128
10007910:	18800916 	blt	r3,r2,10007938 <__truncdfsf2+0x160>
10007914:	423f2084 	addi	r8,r8,-894
10007918:	3a06983a 	sll	r3,r7,r8
1000791c:	3210983a 	sll	r8,r6,r8
10007920:	388ed83a 	srl	r7,r7,r2
10007924:	180cc03a 	cmpne	r6,r3,zero
10007928:	418cb03a 	or	r6,r8,r6
1000792c:	31ccb03a 	or	r6,r6,r7
10007930:	0007883a 	mov	r3,zero
10007934:	003fc006 	br	10007838 <__alt_data_end+0xf8007838>
10007938:	00c0df84 	movi	r3,894
1000793c:	1a07c83a 	sub	r3,r3,r8
10007940:	01000804 	movi	r4,32
10007944:	30c6d83a 	srl	r3,r6,r3
10007948:	11000726 	beq	r2,r4,10007968 <__truncdfsf2+0x190>
1000794c:	423f2884 	addi	r8,r8,-862
10007950:	3210983a 	sll	r8,r6,r8
10007954:	41ceb03a 	or	r7,r8,r7
10007958:	380ec03a 	cmpne	r7,r7,zero
1000795c:	38ccb03a 	or	r6,r7,r3
10007960:	0007883a 	mov	r3,zero
10007964:	003fb406 	br	10007838 <__alt_data_end+0xf8007838>
10007968:	0011883a 	mov	r8,zero
1000796c:	003ff906 	br	10007954 <__alt_data_end+0xf8007954>

10007970 <__clzsi2>:
10007970:	00bfffd4 	movui	r2,65535
10007974:	11000b36 	bltu	r2,r4,100079a4 <__clzsi2+0x34>
10007978:	00803fc4 	movi	r2,255
1000797c:	1100122e 	bgeu	r2,r4,100079c8 <__clzsi2+0x58>
10007980:	00c00204 	movi	r3,8
10007984:	01400604 	movi	r5,24
10007988:	20c8d83a 	srl	r4,r4,r3
1000798c:	00840074 	movhi	r2,4097
10007990:	109ef704 	addi	r2,r2,31708
10007994:	1109883a 	add	r4,r2,r4
10007998:	20800003 	ldbu	r2,0(r4)
1000799c:	2885c83a 	sub	r2,r5,r2
100079a0:	f800283a 	ret
100079a4:	00804034 	movhi	r2,256
100079a8:	10bfffc4 	addi	r2,r2,-1
100079ac:	11000336 	bltu	r2,r4,100079bc <__clzsi2+0x4c>
100079b0:	00c00404 	movi	r3,16
100079b4:	180b883a 	mov	r5,r3
100079b8:	003ff306 	br	10007988 <__alt_data_end+0xf8007988>
100079bc:	00c00604 	movi	r3,24
100079c0:	01400204 	movi	r5,8
100079c4:	003ff006 	br	10007988 <__alt_data_end+0xf8007988>
100079c8:	0007883a 	mov	r3,zero
100079cc:	01400804 	movi	r5,32
100079d0:	003fed06 	br	10007988 <__alt_data_end+0xf8007988>

100079d4 <memcpy>:
100079d4:	deffff04 	addi	sp,sp,-4
100079d8:	dc000015 	stw	r16,0(sp)
100079dc:	00c003c4 	movi	r3,15
100079e0:	2005883a 	mov	r2,r4
100079e4:	1980432e 	bgeu	r3,r6,10007af4 <memcpy+0x120>
100079e8:	2146b03a 	or	r3,r4,r5
100079ec:	18c000cc 	andi	r3,r3,3
100079f0:	1800421e 	bne	r3,zero,10007afc <memcpy+0x128>
100079f4:	343ffc04 	addi	r16,r6,-16
100079f8:	8020d13a 	srli	r16,r16,4
100079fc:	28c00104 	addi	r3,r5,4
10007a00:	23400104 	addi	r13,r4,4
10007a04:	801e913a 	slli	r15,r16,4
10007a08:	2b000204 	addi	r12,r5,8
10007a0c:	22c00204 	addi	r11,r4,8
10007a10:	7bc00504 	addi	r15,r15,20
10007a14:	2a800304 	addi	r10,r5,12
10007a18:	22400304 	addi	r9,r4,12
10007a1c:	2bdf883a 	add	r15,r5,r15
10007a20:	2811883a 	mov	r8,r5
10007a24:	200f883a 	mov	r7,r4
10007a28:	41000017 	ldw	r4,0(r8)
10007a2c:	39c00404 	addi	r7,r7,16
10007a30:	18c00404 	addi	r3,r3,16
10007a34:	393ffc15 	stw	r4,-16(r7)
10007a38:	1bbffc17 	ldw	r14,-16(r3)
10007a3c:	6b400404 	addi	r13,r13,16
10007a40:	5ac00404 	addi	r11,r11,16
10007a44:	6bbffc15 	stw	r14,-16(r13)
10007a48:	63800017 	ldw	r14,0(r12)
10007a4c:	4a400404 	addi	r9,r9,16
10007a50:	42000404 	addi	r8,r8,16
10007a54:	5bbffc15 	stw	r14,-16(r11)
10007a58:	53800017 	ldw	r14,0(r10)
10007a5c:	63000404 	addi	r12,r12,16
10007a60:	52800404 	addi	r10,r10,16
10007a64:	4bbffc15 	stw	r14,-16(r9)
10007a68:	1bffef1e 	bne	r3,r15,10007a28 <__alt_data_end+0xf8007a28>
10007a6c:	81c00044 	addi	r7,r16,1
10007a70:	380e913a 	slli	r7,r7,4
10007a74:	310003cc 	andi	r4,r6,15
10007a78:	02c000c4 	movi	r11,3
10007a7c:	11c7883a 	add	r3,r2,r7
10007a80:	29cb883a 	add	r5,r5,r7
10007a84:	59001f2e 	bgeu	r11,r4,10007b04 <memcpy+0x130>
10007a88:	1813883a 	mov	r9,r3
10007a8c:	2811883a 	mov	r8,r5
10007a90:	200f883a 	mov	r7,r4
10007a94:	42800017 	ldw	r10,0(r8)
10007a98:	4a400104 	addi	r9,r9,4
10007a9c:	39ffff04 	addi	r7,r7,-4
10007aa0:	4abfff15 	stw	r10,-4(r9)
10007aa4:	42000104 	addi	r8,r8,4
10007aa8:	59fffa36 	bltu	r11,r7,10007a94 <__alt_data_end+0xf8007a94>
10007aac:	213fff04 	addi	r4,r4,-4
10007ab0:	2008d0ba 	srli	r4,r4,2
10007ab4:	318000cc 	andi	r6,r6,3
10007ab8:	21000044 	addi	r4,r4,1
10007abc:	2109883a 	add	r4,r4,r4
10007ac0:	2109883a 	add	r4,r4,r4
10007ac4:	1907883a 	add	r3,r3,r4
10007ac8:	290b883a 	add	r5,r5,r4
10007acc:	30000626 	beq	r6,zero,10007ae8 <memcpy+0x114>
10007ad0:	198d883a 	add	r6,r3,r6
10007ad4:	29c00003 	ldbu	r7,0(r5)
10007ad8:	18c00044 	addi	r3,r3,1
10007adc:	29400044 	addi	r5,r5,1
10007ae0:	19ffffc5 	stb	r7,-1(r3)
10007ae4:	19bffb1e 	bne	r3,r6,10007ad4 <__alt_data_end+0xf8007ad4>
10007ae8:	dc000017 	ldw	r16,0(sp)
10007aec:	dec00104 	addi	sp,sp,4
10007af0:	f800283a 	ret
10007af4:	2007883a 	mov	r3,r4
10007af8:	003ff406 	br	10007acc <__alt_data_end+0xf8007acc>
10007afc:	2007883a 	mov	r3,r4
10007b00:	003ff306 	br	10007ad0 <__alt_data_end+0xf8007ad0>
10007b04:	200d883a 	mov	r6,r4
10007b08:	003ff006 	br	10007acc <__alt_data_end+0xf8007acc>

10007b0c <_printf_r>:
10007b0c:	defffd04 	addi	sp,sp,-12
10007b10:	dfc00015 	stw	ra,0(sp)
10007b14:	d9800115 	stw	r6,4(sp)
10007b18:	d9c00215 	stw	r7,8(sp)
10007b1c:	280d883a 	mov	r6,r5
10007b20:	21400217 	ldw	r5,8(r4)
10007b24:	d9c00104 	addi	r7,sp,4
10007b28:	0007d540 	call	10007d54 <___vfprintf_internal_r>
10007b2c:	dfc00017 	ldw	ra,0(sp)
10007b30:	dec00304 	addi	sp,sp,12
10007b34:	f800283a 	ret

10007b38 <printf>:
10007b38:	defffc04 	addi	sp,sp,-16
10007b3c:	dfc00015 	stw	ra,0(sp)
10007b40:	d9400115 	stw	r5,4(sp)
10007b44:	d9800215 	stw	r6,8(sp)
10007b48:	d9c00315 	stw	r7,12(sp)
10007b4c:	008400b4 	movhi	r2,4098
10007b50:	10a66304 	addi	r2,r2,-26228
10007b54:	10800017 	ldw	r2,0(r2)
10007b58:	200b883a 	mov	r5,r4
10007b5c:	d9800104 	addi	r6,sp,4
10007b60:	11000217 	ldw	r4,8(r2)
10007b64:	0009e500 	call	10009e50 <__vfprintf_internal>
10007b68:	dfc00017 	ldw	ra,0(sp)
10007b6c:	dec00404 	addi	sp,sp,16
10007b70:	f800283a 	ret

10007b74 <_puts_r>:
10007b74:	defff604 	addi	sp,sp,-40
10007b78:	dc000715 	stw	r16,28(sp)
10007b7c:	2021883a 	mov	r16,r4
10007b80:	2809883a 	mov	r4,r5
10007b84:	dc400815 	stw	r17,32(sp)
10007b88:	dfc00915 	stw	ra,36(sp)
10007b8c:	2823883a 	mov	r17,r5
10007b90:	0007cbc0 	call	10007cbc <strlen>
10007b94:	00c400b4 	movhi	r3,4098
10007b98:	18e66304 	addi	r3,r3,-26228
10007b9c:	18c00017 	ldw	r3,0(r3)
10007ba0:	11000044 	addi	r4,r2,1
10007ba4:	d8800115 	stw	r2,4(sp)
10007ba8:	18c00217 	ldw	r3,8(r3)
10007bac:	01440074 	movhi	r5,4097
10007bb0:	295f3704 	addi	r5,r5,31964
10007bb4:	1880030b 	ldhu	r2,12(r3)
10007bb8:	d9400215 	stw	r5,8(sp)
10007bbc:	d9000615 	stw	r4,24(sp)
10007bc0:	01400044 	movi	r5,1
10007bc4:	01000084 	movi	r4,2
10007bc8:	d9000515 	stw	r4,20(sp)
10007bcc:	dc400015 	stw	r17,0(sp)
10007bd0:	d9400315 	stw	r5,12(sp)
10007bd4:	dec00415 	stw	sp,16(sp)
10007bd8:	1108000c 	andi	r4,r2,8192
10007bdc:	2000061e 	bne	r4,zero,10007bf8 <_puts_r+0x84>
10007be0:	19401917 	ldw	r5,100(r3)
10007be4:	0137ffc4 	movi	r4,-8193
10007be8:	10880014 	ori	r2,r2,8192
10007bec:	2908703a 	and	r4,r5,r4
10007bf0:	1880030d 	sth	r2,12(r3)
10007bf4:	19001915 	stw	r4,100(r3)
10007bf8:	81400217 	ldw	r5,8(r16)
10007bfc:	8009883a 	mov	r4,r16
10007c00:	d9800404 	addi	r6,sp,16
10007c04:	000c3140 	call	1000c314 <__sfvwrite_r>
10007c08:	1000061e 	bne	r2,zero,10007c24 <_puts_r+0xb0>
10007c0c:	00800284 	movi	r2,10
10007c10:	dfc00917 	ldw	ra,36(sp)
10007c14:	dc400817 	ldw	r17,32(sp)
10007c18:	dc000717 	ldw	r16,28(sp)
10007c1c:	dec00a04 	addi	sp,sp,40
10007c20:	f800283a 	ret
10007c24:	00bfffc4 	movi	r2,-1
10007c28:	003ff906 	br	10007c10 <__alt_data_end+0xf8007c10>

10007c2c <puts>:
10007c2c:	008400b4 	movhi	r2,4098
10007c30:	10a66304 	addi	r2,r2,-26228
10007c34:	200b883a 	mov	r5,r4
10007c38:	11000017 	ldw	r4,0(r2)
10007c3c:	0007b741 	jmpi	10007b74 <_puts_r>

10007c40 <srand>:
10007c40:	008400b4 	movhi	r2,4098
10007c44:	10a66304 	addi	r2,r2,-26228
10007c48:	10800017 	ldw	r2,0(r2)
10007c4c:	11002915 	stw	r4,164(r2)
10007c50:	10002a15 	stw	zero,168(r2)
10007c54:	f800283a 	ret

10007c58 <rand>:
10007c58:	008400b4 	movhi	r2,4098
10007c5c:	defffe04 	addi	sp,sp,-8
10007c60:	10a66304 	addi	r2,r2,-26228
10007c64:	dc000015 	stw	r16,0(sp)
10007c68:	14000017 	ldw	r16,0(r2)
10007c6c:	dfc00115 	stw	ra,4(sp)
10007c70:	01932574 	movhi	r6,19605
10007c74:	81002917 	ldw	r4,164(r16)
10007c78:	81402a17 	ldw	r5,168(r16)
10007c7c:	01d614b4 	movhi	r7,22610
10007c80:	319fcb44 	addi	r6,r6,32557
10007c84:	39fd0b44 	addi	r7,r7,-3027
10007c88:	0010e080 	call	10010e08 <__muldi3>
10007c8c:	11000044 	addi	r4,r2,1
10007c90:	2085803a 	cmpltu	r2,r4,r2
10007c94:	10c7883a 	add	r3,r2,r3
10007c98:	00a00034 	movhi	r2,32768
10007c9c:	10bfffc4 	addi	r2,r2,-1
10007ca0:	1884703a 	and	r2,r3,r2
10007ca4:	81002915 	stw	r4,164(r16)
10007ca8:	80c02a15 	stw	r3,168(r16)
10007cac:	dfc00117 	ldw	ra,4(sp)
10007cb0:	dc000017 	ldw	r16,0(sp)
10007cb4:	dec00204 	addi	sp,sp,8
10007cb8:	f800283a 	ret

10007cbc <strlen>:
10007cbc:	208000cc 	andi	r2,r4,3
10007cc0:	10002026 	beq	r2,zero,10007d44 <strlen+0x88>
10007cc4:	20800007 	ldb	r2,0(r4)
10007cc8:	10002026 	beq	r2,zero,10007d4c <strlen+0x90>
10007ccc:	2005883a 	mov	r2,r4
10007cd0:	00000206 	br	10007cdc <strlen+0x20>
10007cd4:	10c00007 	ldb	r3,0(r2)
10007cd8:	18001826 	beq	r3,zero,10007d3c <strlen+0x80>
10007cdc:	10800044 	addi	r2,r2,1
10007ce0:	10c000cc 	andi	r3,r2,3
10007ce4:	183ffb1e 	bne	r3,zero,10007cd4 <__alt_data_end+0xf8007cd4>
10007ce8:	10c00017 	ldw	r3,0(r2)
10007cec:	01ffbff4 	movhi	r7,65279
10007cf0:	39ffbfc4 	addi	r7,r7,-257
10007cf4:	00ca303a 	nor	r5,zero,r3
10007cf8:	01a02074 	movhi	r6,32897
10007cfc:	19c7883a 	add	r3,r3,r7
10007d00:	31a02004 	addi	r6,r6,-32640
10007d04:	1946703a 	and	r3,r3,r5
10007d08:	1986703a 	and	r3,r3,r6
10007d0c:	1800091e 	bne	r3,zero,10007d34 <strlen+0x78>
10007d10:	10800104 	addi	r2,r2,4
10007d14:	10c00017 	ldw	r3,0(r2)
10007d18:	19cb883a 	add	r5,r3,r7
10007d1c:	00c6303a 	nor	r3,zero,r3
10007d20:	28c6703a 	and	r3,r5,r3
10007d24:	1986703a 	and	r3,r3,r6
10007d28:	183ff926 	beq	r3,zero,10007d10 <__alt_data_end+0xf8007d10>
10007d2c:	00000106 	br	10007d34 <strlen+0x78>
10007d30:	10800044 	addi	r2,r2,1
10007d34:	10c00007 	ldb	r3,0(r2)
10007d38:	183ffd1e 	bne	r3,zero,10007d30 <__alt_data_end+0xf8007d30>
10007d3c:	1105c83a 	sub	r2,r2,r4
10007d40:	f800283a 	ret
10007d44:	2005883a 	mov	r2,r4
10007d48:	003fe706 	br	10007ce8 <__alt_data_end+0xf8007ce8>
10007d4c:	0005883a 	mov	r2,zero
10007d50:	f800283a 	ret

10007d54 <___vfprintf_internal_r>:
10007d54:	defeb604 	addi	sp,sp,-1320
10007d58:	dfc14915 	stw	ra,1316(sp)
10007d5c:	ddc14715 	stw	r23,1308(sp)
10007d60:	dd814615 	stw	r22,1304(sp)
10007d64:	202f883a 	mov	r23,r4
10007d68:	282d883a 	mov	r22,r5
10007d6c:	d9812a15 	stw	r6,1192(sp)
10007d70:	d9c12d15 	stw	r7,1204(sp)
10007d74:	df014815 	stw	fp,1312(sp)
10007d78:	dd414515 	stw	r21,1300(sp)
10007d7c:	dd014415 	stw	r20,1296(sp)
10007d80:	dcc14315 	stw	r19,1292(sp)
10007d84:	dc814215 	stw	r18,1288(sp)
10007d88:	dc414115 	stw	r17,1284(sp)
10007d8c:	dc014015 	stw	r16,1280(sp)
10007d90:	000c9d40 	call	1000c9d4 <_localeconv_r>
10007d94:	10800017 	ldw	r2,0(r2)
10007d98:	1009883a 	mov	r4,r2
10007d9c:	d8813515 	stw	r2,1236(sp)
10007da0:	0007cbc0 	call	10007cbc <strlen>
10007da4:	d8813815 	stw	r2,1248(sp)
10007da8:	b8000226 	beq	r23,zero,10007db4 <___vfprintf_internal_r+0x60>
10007dac:	b8800e17 	ldw	r2,56(r23)
10007db0:	10010526 	beq	r2,zero,100081c8 <___vfprintf_internal_r+0x474>
10007db4:	b0c0030b 	ldhu	r3,12(r22)
10007db8:	1908000c 	andi	r4,r3,8192
10007dbc:	1805883a 	mov	r2,r3
10007dc0:	2000071e 	bne	r4,zero,10007de0 <___vfprintf_internal_r+0x8c>
10007dc4:	b1001917 	ldw	r4,100(r22)
10007dc8:	18880014 	ori	r2,r3,8192
10007dcc:	00f7ffc4 	movi	r3,-8193
10007dd0:	20c8703a 	and	r4,r4,r3
10007dd4:	b080030d 	sth	r2,12(r22)
10007dd8:	1007883a 	mov	r3,r2
10007ddc:	b1001915 	stw	r4,100(r22)
10007de0:	1100020c 	andi	r4,r2,8
10007de4:	2000a826 	beq	r4,zero,10008088 <___vfprintf_internal_r+0x334>
10007de8:	b1000417 	ldw	r4,16(r22)
10007dec:	2000a626 	beq	r4,zero,10008088 <___vfprintf_internal_r+0x334>
10007df0:	1080068c 	andi	r2,r2,26
10007df4:	01000284 	movi	r4,10
10007df8:	1100ac26 	beq	r2,r4,100080ac <___vfprintf_internal_r+0x358>
10007dfc:	d8c10e04 	addi	r3,sp,1080
10007e00:	d9010dc4 	addi	r4,sp,1079
10007e04:	d9400404 	addi	r5,sp,16
10007e08:	05040074 	movhi	r20,4097
10007e0c:	1905c83a 	sub	r2,r3,r4
10007e10:	a51f4884 	addi	r20,r20,32034
10007e14:	d8c12815 	stw	r3,1184(sp)
10007e18:	d9012915 	stw	r4,1188(sp)
10007e1c:	d9411e15 	stw	r5,1144(sp)
10007e20:	d8012015 	stw	zero,1152(sp)
10007e24:	d8011f15 	stw	zero,1148(sp)
10007e28:	d8013315 	stw	zero,1228(sp)
10007e2c:	d8013715 	stw	zero,1244(sp)
10007e30:	d8013915 	stw	zero,1252(sp)
10007e34:	d8013b15 	stw	zero,1260(sp)
10007e38:	d8013a15 	stw	zero,1256(sp)
10007e3c:	d8012f15 	stw	zero,1212(sp)
10007e40:	2811883a 	mov	r8,r5
10007e44:	d8813c15 	stw	r2,1264(sp)
10007e48:	d8c12a17 	ldw	r3,1192(sp)
10007e4c:	18800007 	ldb	r2,0(r3)
10007e50:	10021326 	beq	r2,zero,100086a0 <___vfprintf_internal_r+0x94c>
10007e54:	00c00944 	movi	r3,37
10007e58:	dc012a17 	ldw	r16,1192(sp)
10007e5c:	10c0021e 	bne	r2,r3,10007e68 <___vfprintf_internal_r+0x114>
10007e60:	00001606 	br	10007ebc <___vfprintf_internal_r+0x168>
10007e64:	10c08526 	beq	r2,r3,1000807c <___vfprintf_internal_r+0x328>
10007e68:	84000044 	addi	r16,r16,1
10007e6c:	80800007 	ldb	r2,0(r16)
10007e70:	103ffc1e 	bne	r2,zero,10007e64 <__alt_data_end+0xf8007e64>
10007e74:	d9012a17 	ldw	r4,1192(sp)
10007e78:	8123c83a 	sub	r17,r16,r4
10007e7c:	88000f26 	beq	r17,zero,10007ebc <___vfprintf_internal_r+0x168>
10007e80:	d8812a17 	ldw	r2,1192(sp)
10007e84:	d8c12017 	ldw	r3,1152(sp)
10007e88:	44400115 	stw	r17,4(r8)
10007e8c:	40800015 	stw	r2,0(r8)
10007e90:	d8811f17 	ldw	r2,1148(sp)
10007e94:	1c47883a 	add	r3,r3,r17
10007e98:	d8c12015 	stw	r3,1152(sp)
10007e9c:	10800044 	addi	r2,r2,1
10007ea0:	d8811f15 	stw	r2,1148(sp)
10007ea4:	00c001c4 	movi	r3,7
10007ea8:	1880b516 	blt	r3,r2,10008180 <___vfprintf_internal_r+0x42c>
10007eac:	42000204 	addi	r8,r8,8
10007eb0:	d8c12f17 	ldw	r3,1212(sp)
10007eb4:	1c47883a 	add	r3,r3,r17
10007eb8:	d8c12f15 	stw	r3,1212(sp)
10007ebc:	80800007 	ldb	r2,0(r16)
10007ec0:	1000b626 	beq	r2,zero,1000819c <___vfprintf_internal_r+0x448>
10007ec4:	80800044 	addi	r2,r16,1
10007ec8:	84000047 	ldb	r16,1(r16)
10007ecc:	0027883a 	mov	r19,zero
10007ed0:	0039883a 	mov	fp,zero
10007ed4:	dcc12b05 	stb	r19,1196(sp)
10007ed8:	d8012785 	stb	zero,1182(sp)
10007edc:	027fffc4 	movi	r9,-1
10007ee0:	d8012e15 	stw	zero,1208(sp)
10007ee4:	04401604 	movi	r17,88
10007ee8:	04800244 	movi	r18,9
10007eec:	da012a15 	stw	r8,1192(sp)
10007ef0:	e027883a 	mov	r19,fp
10007ef4:	17000044 	addi	fp,r2,1
10007ef8:	80bff804 	addi	r2,r16,-32
10007efc:	88831236 	bltu	r17,r2,10008b48 <___vfprintf_internal_r+0xdf4>
10007f00:	100490ba 	slli	r2,r2,2
10007f04:	01040034 	movhi	r4,4096
10007f08:	211fc604 	addi	r4,r4,32536
10007f0c:	1105883a 	add	r2,r2,r4
10007f10:	10800017 	ldw	r2,0(r2)
10007f14:	1000683a 	jmp	r2
10007f18:	10008a64 	muli	zero,r2,553
10007f1c:	10008b48 	cmpgei	zero,r2,557
10007f20:	10008b48 	cmpgei	zero,r2,557
10007f24:	10008a80 	call	110008a8 <_gp+0xfdef20>
10007f28:	10008b48 	cmpgei	zero,r2,557
10007f2c:	10008b48 	cmpgei	zero,r2,557
10007f30:	10008b48 	cmpgei	zero,r2,557
10007f34:	10008b48 	cmpgei	zero,r2,557
10007f38:	10008b48 	cmpgei	zero,r2,557
10007f3c:	10008b48 	cmpgei	zero,r2,557
10007f40:	10008a90 	cmplti	zero,r2,554
10007f44:	10008ab8 	rdprs	zero,r2,554
10007f48:	10008b48 	cmpgei	zero,r2,557
10007f4c:	100081d4 	ori	zero,r2,519
10007f50:	100081e4 	muli	zero,r2,519
10007f54:	10008b48 	cmpgei	zero,r2,557
10007f58:	10008234 	orhi	zero,r2,520
10007f5c:	10008244 	addi	zero,r2,521
10007f60:	10008244 	addi	zero,r2,521
10007f64:	10008244 	addi	zero,r2,521
10007f68:	10008244 	addi	zero,r2,521
10007f6c:	10008244 	addi	zero,r2,521
10007f70:	10008244 	addi	zero,r2,521
10007f74:	10008244 	addi	zero,r2,521
10007f78:	10008244 	addi	zero,r2,521
10007f7c:	10008244 	addi	zero,r2,521
10007f80:	10008b48 	cmpgei	zero,r2,557
10007f84:	10008b48 	cmpgei	zero,r2,557
10007f88:	10008b48 	cmpgei	zero,r2,557
10007f8c:	10008b48 	cmpgei	zero,r2,557
10007f90:	10008b48 	cmpgei	zero,r2,557
10007f94:	10008b48 	cmpgei	zero,r2,557
10007f98:	10008b48 	cmpgei	zero,r2,557
10007f9c:	10008b48 	cmpgei	zero,r2,557
10007fa0:	10008b48 	cmpgei	zero,r2,557
10007fa4:	10008b48 	cmpgei	zero,r2,557
10007fa8:	10008288 	cmpgei	zero,r2,522
10007fac:	100086a8 	cmpgeui	zero,r2,538
10007fb0:	10008b48 	cmpgei	zero,r2,557
10007fb4:	100086a8 	cmpgeui	zero,r2,538
10007fb8:	10008b48 	cmpgei	zero,r2,557
10007fbc:	10008b48 	cmpgei	zero,r2,557
10007fc0:	10008b48 	cmpgei	zero,r2,557
10007fc4:	10008b48 	cmpgei	zero,r2,557
10007fc8:	10008750 	cmplti	zero,r2,541
10007fcc:	10008b48 	cmpgei	zero,r2,557
10007fd0:	10008b48 	cmpgei	zero,r2,557
10007fd4:	10008760 	cmpeqi	zero,r2,541
10007fd8:	10008b48 	cmpgei	zero,r2,557
10007fdc:	10008b48 	cmpgei	zero,r2,557
10007fe0:	10008b48 	cmpgei	zero,r2,557
10007fe4:	10008b48 	cmpgei	zero,r2,557
10007fe8:	10008b48 	cmpgei	zero,r2,557
10007fec:	100087a4 	muli	zero,r2,542
10007ff0:	10008b48 	cmpgei	zero,r2,557
10007ff4:	10008b48 	cmpgei	zero,r2,557
10007ff8:	100087dc 	xori	zero,r2,543
10007ffc:	10008b48 	cmpgei	zero,r2,557
10008000:	10008b48 	cmpgei	zero,r2,557
10008004:	10008b48 	cmpgei	zero,r2,557
10008008:	10008b48 	cmpgei	zero,r2,557
1000800c:	10008b48 	cmpgei	zero,r2,557
10008010:	10008b48 	cmpgei	zero,r2,557
10008014:	10008b48 	cmpgei	zero,r2,557
10008018:	10008b48 	cmpgei	zero,r2,557
1000801c:	10008b48 	cmpgei	zero,r2,557
10008020:	10008b48 	cmpgei	zero,r2,557
10008024:	10008a18 	cmpnei	zero,r2,552
10008028:	100089c4 	addi	zero,r2,551
1000802c:	100086a8 	cmpgeui	zero,r2,538
10008030:	100086a8 	cmpgeui	zero,r2,538
10008034:	100086a8 	cmpgeui	zero,r2,538
10008038:	10008a08 	cmpgei	zero,r2,552
1000803c:	100089c4 	addi	zero,r2,551
10008040:	10008b48 	cmpgei	zero,r2,557
10008044:	10008b48 	cmpgei	zero,r2,557
10008048:	100088e0 	cmpeqi	zero,r2,547
1000804c:	10008b48 	cmpgei	zero,r2,557
10008050:	100088f8 	rdprs	zero,r2,547
10008054:	10008938 	rdprs	zero,r2,548
10008058:	10008978 	rdprs	zero,r2,549
1000805c:	10008844 	addi	zero,r2,545
10008060:	10008b48 	cmpgei	zero,r2,557
10008064:	10008acc 	andi	zero,r2,555
10008068:	10008b48 	cmpgei	zero,r2,557
1000806c:	10008854 	ori	zero,r2,545
10008070:	10008b48 	cmpgei	zero,r2,557
10008074:	10008b48 	cmpgei	zero,r2,557
10008078:	10008894 	ori	zero,r2,546
1000807c:	d9412a17 	ldw	r5,1192(sp)
10008080:	8163c83a 	sub	r17,r16,r5
10008084:	003f7d06 	br	10007e7c <__alt_data_end+0xf8007e7c>
10008088:	b809883a 	mov	r4,r23
1000808c:	b00b883a 	mov	r5,r22
10008090:	0009e740 	call	10009e74 <__swsetup_r>
10008094:	10002d1e 	bne	r2,zero,1000814c <___vfprintf_internal_r+0x3f8>
10008098:	b0c0030b 	ldhu	r3,12(r22)
1000809c:	01000284 	movi	r4,10
100080a0:	1805883a 	mov	r2,r3
100080a4:	1080068c 	andi	r2,r2,26
100080a8:	113f541e 	bne	r2,r4,10007dfc <__alt_data_end+0xf8007dfc>
100080ac:	b080038b 	ldhu	r2,14(r22)
100080b0:	113fffcc 	andi	r4,r2,65535
100080b4:	2120001c 	xori	r4,r4,32768
100080b8:	21200004 	addi	r4,r4,-32768
100080bc:	203f4f16 	blt	r4,zero,10007dfc <__alt_data_end+0xf8007dfc>
100080c0:	b2c01917 	ldw	r11,100(r22)
100080c4:	b2800717 	ldw	r10,28(r22)
100080c8:	b2400917 	ldw	r9,36(r22)
100080cc:	d9812a17 	ldw	r6,1192(sp)
100080d0:	d9c12d17 	ldw	r7,1204(sp)
100080d4:	02010004 	movi	r8,1024
100080d8:	18ffff4c 	andi	r3,r3,65533
100080dc:	d881078d 	sth	r2,1054(sp)
100080e0:	b809883a 	mov	r4,r23
100080e4:	d8800404 	addi	r2,sp,16
100080e8:	d9410404 	addi	r5,sp,1040
100080ec:	d8c1070d 	sth	r3,1052(sp)
100080f0:	dac11d15 	stw	r11,1140(sp)
100080f4:	da810b15 	stw	r10,1068(sp)
100080f8:	da410d15 	stw	r9,1076(sp)
100080fc:	d8810415 	stw	r2,1040(sp)
10008100:	d8810815 	stw	r2,1056(sp)
10008104:	da010615 	stw	r8,1048(sp)
10008108:	da010915 	stw	r8,1060(sp)
1000810c:	d8010a15 	stw	zero,1064(sp)
10008110:	0007d540 	call	10007d54 <___vfprintf_internal_r>
10008114:	1021883a 	mov	r16,r2
10008118:	10000416 	blt	r2,zero,1000812c <___vfprintf_internal_r+0x3d8>
1000811c:	b809883a 	mov	r4,r23
10008120:	d9410404 	addi	r5,sp,1040
10008124:	000b8f40 	call	1000b8f4 <_fflush_r>
10008128:	1007301e 	bne	r2,zero,10009dec <___vfprintf_internal_r+0x2098>
1000812c:	d881070b 	ldhu	r2,1052(sp)
10008130:	1080100c 	andi	r2,r2,64
10008134:	10000326 	beq	r2,zero,10008144 <___vfprintf_internal_r+0x3f0>
10008138:	b080030b 	ldhu	r2,12(r22)
1000813c:	10801014 	ori	r2,r2,64
10008140:	b080030d 	sth	r2,12(r22)
10008144:	8005883a 	mov	r2,r16
10008148:	00000106 	br	10008150 <___vfprintf_internal_r+0x3fc>
1000814c:	00bfffc4 	movi	r2,-1
10008150:	dfc14917 	ldw	ra,1316(sp)
10008154:	df014817 	ldw	fp,1312(sp)
10008158:	ddc14717 	ldw	r23,1308(sp)
1000815c:	dd814617 	ldw	r22,1304(sp)
10008160:	dd414517 	ldw	r21,1300(sp)
10008164:	dd014417 	ldw	r20,1296(sp)
10008168:	dcc14317 	ldw	r19,1292(sp)
1000816c:	dc814217 	ldw	r18,1288(sp)
10008170:	dc414117 	ldw	r17,1284(sp)
10008174:	dc014017 	ldw	r16,1280(sp)
10008178:	dec14a04 	addi	sp,sp,1320
1000817c:	f800283a 	ret
10008180:	b809883a 	mov	r4,r23
10008184:	b00b883a 	mov	r5,r22
10008188:	d9811e04 	addi	r6,sp,1144
1000818c:	000f05c0 	call	1000f05c <__sprint_r>
10008190:	1000081e 	bne	r2,zero,100081b4 <___vfprintf_internal_r+0x460>
10008194:	da000404 	addi	r8,sp,16
10008198:	003f4506 	br	10007eb0 <__alt_data_end+0xf8007eb0>
1000819c:	d8812017 	ldw	r2,1152(sp)
100081a0:	10000426 	beq	r2,zero,100081b4 <___vfprintf_internal_r+0x460>
100081a4:	b809883a 	mov	r4,r23
100081a8:	b00b883a 	mov	r5,r22
100081ac:	d9811e04 	addi	r6,sp,1144
100081b0:	000f05c0 	call	1000f05c <__sprint_r>
100081b4:	b080030b 	ldhu	r2,12(r22)
100081b8:	1080100c 	andi	r2,r2,64
100081bc:	103fe31e 	bne	r2,zero,1000814c <__alt_data_end+0xf800814c>
100081c0:	d8812f17 	ldw	r2,1212(sp)
100081c4:	003fe206 	br	10008150 <__alt_data_end+0xf8008150>
100081c8:	b809883a 	mov	r4,r23
100081cc:	000beb00 	call	1000beb0 <__sinit>
100081d0:	003ef806 	br	10007db4 <__alt_data_end+0xf8007db4>
100081d4:	e005883a 	mov	r2,fp
100081d8:	9cc00114 	ori	r19,r19,4
100081dc:	e4000007 	ldb	r16,0(fp)
100081e0:	003f4406 	br	10007ef4 <__alt_data_end+0xf8007ef4>
100081e4:	e4000007 	ldb	r16,0(fp)
100081e8:	01000a84 	movi	r4,42
100081ec:	e0800044 	addi	r2,fp,1
100081f0:	8106f626 	beq	r16,r4,10009dcc <___vfprintf_internal_r+0x2078>
100081f4:	857ff404 	addi	r21,r16,-48
100081f8:	1039883a 	mov	fp,r2
100081fc:	0013883a 	mov	r9,zero
10008200:	957f3d36 	bltu	r18,r21,10007ef8 <__alt_data_end+0xf8007ef8>
10008204:	0009883a 	mov	r4,zero
10008208:	01400284 	movi	r5,10
1000820c:	000586c0 	call	1000586c <__mulsi3>
10008210:	e4000007 	ldb	r16,0(fp)
10008214:	a889883a 	add	r4,r21,r2
10008218:	e7000044 	addi	fp,fp,1
1000821c:	857ff404 	addi	r21,r16,-48
10008220:	957ff92e 	bgeu	r18,r21,10008208 <__alt_data_end+0xf8008208>
10008224:	2013883a 	mov	r9,r4
10008228:	203f330e 	bge	r4,zero,10007ef8 <__alt_data_end+0xf8007ef8>
1000822c:	027fffc4 	movi	r9,-1
10008230:	003f3106 	br	10007ef8 <__alt_data_end+0xf8007ef8>
10008234:	9cc02014 	ori	r19,r19,128
10008238:	e005883a 	mov	r2,fp
1000823c:	e4000007 	ldb	r16,0(fp)
10008240:	003f2c06 	br	10007ef4 <__alt_data_end+0xf8007ef4>
10008244:	857ff404 	addi	r21,r16,-48
10008248:	d8012e15 	stw	zero,1208(sp)
1000824c:	e021883a 	mov	r16,fp
10008250:	0009883a 	mov	r4,zero
10008254:	da412c15 	stw	r9,1200(sp)
10008258:	01400284 	movi	r5,10
1000825c:	000586c0 	call	1000586c <__mulsi3>
10008260:	81400007 	ldb	r5,0(r16)
10008264:	1549883a 	add	r4,r2,r21
10008268:	e7000044 	addi	fp,fp,1
1000826c:	2d7ff404 	addi	r21,r5,-48
10008270:	e021883a 	mov	r16,fp
10008274:	957ff82e 	bgeu	r18,r21,10008258 <__alt_data_end+0xf8008258>
10008278:	2821883a 	mov	r16,r5
1000827c:	d9012e15 	stw	r4,1208(sp)
10008280:	da412c17 	ldw	r9,1200(sp)
10008284:	003f1c06 	br	10007ef8 <__alt_data_end+0xf8007ef8>
10008288:	da012a17 	ldw	r8,1192(sp)
1000828c:	df012a15 	stw	fp,1192(sp)
10008290:	9839883a 	mov	fp,r19
10008294:	dcc12b03 	ldbu	r19,1196(sp)
10008298:	e7000414 	ori	fp,fp,16
1000829c:	e080080c 	andi	r2,fp,32
100082a0:	dcc12785 	stb	r19,1182(sp)
100082a4:	d8c12d17 	ldw	r3,1204(sp)
100082a8:	1001ce26 	beq	r2,zero,100089e4 <___vfprintf_internal_r+0xc90>
100082ac:	d9012d17 	ldw	r4,1204(sp)
100082b0:	18800117 	ldw	r2,4(r3)
100082b4:	1c800017 	ldw	r18,0(r3)
100082b8:	21000204 	addi	r4,r4,8
100082bc:	d9012d15 	stw	r4,1204(sp)
100082c0:	102b883a 	mov	r21,r2
100082c4:	10044916 	blt	r2,zero,100093ec <___vfprintf_internal_r+0x1698>
100082c8:	dcc12783 	ldbu	r19,1182(sp)
100082cc:	da413215 	stw	r9,1224(sp)
100082d0:	00800044 	movi	r2,1
100082d4:	9546b03a 	or	r3,r18,r21
100082d8:	48000216 	blt	r9,zero,100082e4 <___vfprintf_internal_r+0x590>
100082dc:	013fdfc4 	movi	r4,-129
100082e0:	e138703a 	and	fp,fp,r4
100082e4:	1802251e 	bne	r3,zero,10008b7c <___vfprintf_internal_r+0xe28>
100082e8:	48031726 	beq	r9,zero,10008f48 <___vfprintf_internal_r+0x11f4>
100082ec:	10803fcc 	andi	r2,r2,255
100082f0:	00c00044 	movi	r3,1
100082f4:	10c24526 	beq	r2,r3,10008c0c <___vfprintf_internal_r+0xeb8>
100082f8:	00c00084 	movi	r3,2
100082fc:	10c33426 	beq	r2,r3,10008fd0 <___vfprintf_internal_r+0x127c>
10008300:	d8c10e04 	addi	r3,sp,1080
10008304:	9008d0fa 	srli	r4,r18,3
10008308:	a80a977a 	slli	r5,r21,29
1000830c:	a82ad0fa 	srli	r21,r21,3
10008310:	948001cc 	andi	r18,r18,7
10008314:	90800c04 	addi	r2,r18,48
10008318:	18ffffc4 	addi	r3,r3,-1
1000831c:	2924b03a 	or	r18,r5,r4
10008320:	18800005 	stb	r2,0(r3)
10008324:	9548b03a 	or	r4,r18,r21
10008328:	203ff61e 	bne	r4,zero,10008304 <__alt_data_end+0xf8008304>
1000832c:	e100004c 	andi	r4,fp,1
10008330:	d8c13115 	stw	r3,1220(sp)
10008334:	20039a1e 	bne	r4,zero,100091a0 <___vfprintf_internal_r+0x144c>
10008338:	d8812817 	ldw	r2,1184(sp)
1000833c:	10e3c83a 	sub	r17,r2,r3
10008340:	8805883a 	mov	r2,r17
10008344:	8a40010e 	bge	r17,r9,1000834c <___vfprintf_internal_r+0x5f8>
10008348:	4805883a 	mov	r2,r9
1000834c:	d8812b15 	stw	r2,1196(sp)
10008350:	d8013415 	stw	zero,1232(sp)
10008354:	98803fcc 	andi	r2,r19,255
10008358:	1080201c 	xori	r2,r2,128
1000835c:	10bfe004 	addi	r2,r2,-128
10008360:	10000326 	beq	r2,zero,10008370 <___vfprintf_internal_r+0x61c>
10008364:	d8c12b17 	ldw	r3,1196(sp)
10008368:	18c00044 	addi	r3,r3,1
1000836c:	d8c12b15 	stw	r3,1196(sp)
10008370:	e0c0008c 	andi	r3,fp,2
10008374:	d8c12c15 	stw	r3,1200(sp)
10008378:	18000326 	beq	r3,zero,10008388 <___vfprintf_internal_r+0x634>
1000837c:	d8c12b17 	ldw	r3,1196(sp)
10008380:	18c00084 	addi	r3,r3,2
10008384:	d8c12b15 	stw	r3,1196(sp)
10008388:	e0c0210c 	andi	r3,fp,132
1000838c:	d8c13015 	stw	r3,1216(sp)
10008390:	1801f81e 	bne	r3,zero,10008b74 <___vfprintf_internal_r+0xe20>
10008394:	d9012e17 	ldw	r4,1208(sp)
10008398:	d8c12b17 	ldw	r3,1196(sp)
1000839c:	20ebc83a 	sub	r21,r4,r3
100083a0:	0541f40e 	bge	zero,r21,10008b74 <___vfprintf_internal_r+0xe20>
100083a4:	02400404 	movi	r9,16
100083a8:	d8c12017 	ldw	r3,1152(sp)
100083ac:	d8811f17 	ldw	r2,1148(sp)
100083b0:	4d45750e 	bge	r9,r21,10009988 <___vfprintf_internal_r+0x1c34>
100083b4:	01440074 	movhi	r5,4097
100083b8:	295f4c84 	addi	r5,r5,32050
100083bc:	d9413615 	stw	r5,1240(sp)
100083c0:	4827883a 	mov	r19,r9
100083c4:	048001c4 	movi	r18,7
100083c8:	00000306 	br	100083d8 <___vfprintf_internal_r+0x684>
100083cc:	ad7ffc04 	addi	r21,r21,-16
100083d0:	42000204 	addi	r8,r8,8
100083d4:	9d40130e 	bge	r19,r21,10008424 <___vfprintf_internal_r+0x6d0>
100083d8:	01040074 	movhi	r4,4097
100083dc:	18c00404 	addi	r3,r3,16
100083e0:	10800044 	addi	r2,r2,1
100083e4:	211f4c84 	addi	r4,r4,32050
100083e8:	41000015 	stw	r4,0(r8)
100083ec:	44c00115 	stw	r19,4(r8)
100083f0:	d8c12015 	stw	r3,1152(sp)
100083f4:	d8811f15 	stw	r2,1148(sp)
100083f8:	90bff40e 	bge	r18,r2,100083cc <__alt_data_end+0xf80083cc>
100083fc:	b809883a 	mov	r4,r23
10008400:	b00b883a 	mov	r5,r22
10008404:	d9811e04 	addi	r6,sp,1144
10008408:	000f05c0 	call	1000f05c <__sprint_r>
1000840c:	103f691e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
10008410:	ad7ffc04 	addi	r21,r21,-16
10008414:	d8c12017 	ldw	r3,1152(sp)
10008418:	d8811f17 	ldw	r2,1148(sp)
1000841c:	da000404 	addi	r8,sp,16
10008420:	9d7fed16 	blt	r19,r21,100083d8 <__alt_data_end+0xf80083d8>
10008424:	d9413617 	ldw	r5,1240(sp)
10008428:	a8c7883a 	add	r3,r21,r3
1000842c:	10800044 	addi	r2,r2,1
10008430:	41400015 	stw	r5,0(r8)
10008434:	45400115 	stw	r21,4(r8)
10008438:	d8c12015 	stw	r3,1152(sp)
1000843c:	d8811f15 	stw	r2,1148(sp)
10008440:	010001c4 	movi	r4,7
10008444:	20832b16 	blt	r4,r2,100090f4 <___vfprintf_internal_r+0x13a0>
10008448:	d8812787 	ldb	r2,1182(sp)
1000844c:	42000204 	addi	r8,r8,8
10008450:	10000c26 	beq	r2,zero,10008484 <___vfprintf_internal_r+0x730>
10008454:	d8811f17 	ldw	r2,1148(sp)
10008458:	d9012784 	addi	r4,sp,1182
1000845c:	18c00044 	addi	r3,r3,1
10008460:	10800044 	addi	r2,r2,1
10008464:	41000015 	stw	r4,0(r8)
10008468:	01000044 	movi	r4,1
1000846c:	41000115 	stw	r4,4(r8)
10008470:	d8c12015 	stw	r3,1152(sp)
10008474:	d8811f15 	stw	r2,1148(sp)
10008478:	010001c4 	movi	r4,7
1000847c:	2082c416 	blt	r4,r2,10008f90 <___vfprintf_internal_r+0x123c>
10008480:	42000204 	addi	r8,r8,8
10008484:	d8812c17 	ldw	r2,1200(sp)
10008488:	10000c26 	beq	r2,zero,100084bc <___vfprintf_internal_r+0x768>
1000848c:	d8811f17 	ldw	r2,1148(sp)
10008490:	d9012704 	addi	r4,sp,1180
10008494:	18c00084 	addi	r3,r3,2
10008498:	10800044 	addi	r2,r2,1
1000849c:	41000015 	stw	r4,0(r8)
100084a0:	01000084 	movi	r4,2
100084a4:	41000115 	stw	r4,4(r8)
100084a8:	d8c12015 	stw	r3,1152(sp)
100084ac:	d8811f15 	stw	r2,1148(sp)
100084b0:	010001c4 	movi	r4,7
100084b4:	2082be16 	blt	r4,r2,10008fb0 <___vfprintf_internal_r+0x125c>
100084b8:	42000204 	addi	r8,r8,8
100084bc:	d9013017 	ldw	r4,1216(sp)
100084c0:	00802004 	movi	r2,128
100084c4:	20822026 	beq	r4,r2,10008d48 <___vfprintf_internal_r+0xff4>
100084c8:	d9413217 	ldw	r5,1224(sp)
100084cc:	2c67c83a 	sub	r19,r5,r17
100084d0:	04c0260e 	bge	zero,r19,1000856c <___vfprintf_internal_r+0x818>
100084d4:	05400404 	movi	r21,16
100084d8:	d8811f17 	ldw	r2,1148(sp)
100084dc:	acc4720e 	bge	r21,r19,100096a8 <___vfprintf_internal_r+0x1954>
100084e0:	01440074 	movhi	r5,4097
100084e4:	295f4884 	addi	r5,r5,32034
100084e8:	d9412c15 	stw	r5,1200(sp)
100084ec:	048001c4 	movi	r18,7
100084f0:	00000306 	br	10008500 <___vfprintf_internal_r+0x7ac>
100084f4:	9cfffc04 	addi	r19,r19,-16
100084f8:	42000204 	addi	r8,r8,8
100084fc:	acc0110e 	bge	r21,r19,10008544 <___vfprintf_internal_r+0x7f0>
10008500:	18c00404 	addi	r3,r3,16
10008504:	10800044 	addi	r2,r2,1
10008508:	45000015 	stw	r20,0(r8)
1000850c:	45400115 	stw	r21,4(r8)
10008510:	d8c12015 	stw	r3,1152(sp)
10008514:	d8811f15 	stw	r2,1148(sp)
10008518:	90bff60e 	bge	r18,r2,100084f4 <__alt_data_end+0xf80084f4>
1000851c:	b809883a 	mov	r4,r23
10008520:	b00b883a 	mov	r5,r22
10008524:	d9811e04 	addi	r6,sp,1144
10008528:	000f05c0 	call	1000f05c <__sprint_r>
1000852c:	103f211e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
10008530:	9cfffc04 	addi	r19,r19,-16
10008534:	d8c12017 	ldw	r3,1152(sp)
10008538:	d8811f17 	ldw	r2,1148(sp)
1000853c:	da000404 	addi	r8,sp,16
10008540:	acffef16 	blt	r21,r19,10008500 <__alt_data_end+0xf8008500>
10008544:	d9012c17 	ldw	r4,1200(sp)
10008548:	1cc7883a 	add	r3,r3,r19
1000854c:	10800044 	addi	r2,r2,1
10008550:	41000015 	stw	r4,0(r8)
10008554:	44c00115 	stw	r19,4(r8)
10008558:	d8c12015 	stw	r3,1152(sp)
1000855c:	d8811f15 	stw	r2,1148(sp)
10008560:	010001c4 	movi	r4,7
10008564:	20828216 	blt	r4,r2,10008f70 <___vfprintf_internal_r+0x121c>
10008568:	42000204 	addi	r8,r8,8
1000856c:	e080400c 	andi	r2,fp,256
10008570:	1001ac1e 	bne	r2,zero,10008c24 <___vfprintf_internal_r+0xed0>
10008574:	d8811f17 	ldw	r2,1148(sp)
10008578:	d9413117 	ldw	r5,1220(sp)
1000857c:	1c47883a 	add	r3,r3,r17
10008580:	10800044 	addi	r2,r2,1
10008584:	41400015 	stw	r5,0(r8)
10008588:	44400115 	stw	r17,4(r8)
1000858c:	d8c12015 	stw	r3,1152(sp)
10008590:	d8811f15 	stw	r2,1148(sp)
10008594:	010001c4 	movi	r4,7
10008598:	20825d16 	blt	r4,r2,10008f10 <___vfprintf_internal_r+0x11bc>
1000859c:	42000204 	addi	r8,r8,8
100085a0:	e080010c 	andi	r2,fp,4
100085a4:	10003126 	beq	r2,zero,1000866c <___vfprintf_internal_r+0x918>
100085a8:	d8812e17 	ldw	r2,1208(sp)
100085ac:	d9012b17 	ldw	r4,1196(sp)
100085b0:	1121c83a 	sub	r16,r2,r4
100085b4:	04002d0e 	bge	zero,r16,1000866c <___vfprintf_internal_r+0x918>
100085b8:	04400404 	movi	r17,16
100085bc:	d8811f17 	ldw	r2,1148(sp)
100085c0:	8c05340e 	bge	r17,r16,10009a94 <___vfprintf_internal_r+0x1d40>
100085c4:	01040074 	movhi	r4,4097
100085c8:	211f4c84 	addi	r4,r4,32050
100085cc:	d9013615 	stw	r4,1240(sp)
100085d0:	048001c4 	movi	r18,7
100085d4:	00000306 	br	100085e4 <___vfprintf_internal_r+0x890>
100085d8:	843ffc04 	addi	r16,r16,-16
100085dc:	42000204 	addi	r8,r8,8
100085e0:	8c00130e 	bge	r17,r16,10008630 <___vfprintf_internal_r+0x8dc>
100085e4:	01440074 	movhi	r5,4097
100085e8:	18c00404 	addi	r3,r3,16
100085ec:	10800044 	addi	r2,r2,1
100085f0:	295f4c84 	addi	r5,r5,32050
100085f4:	41400015 	stw	r5,0(r8)
100085f8:	44400115 	stw	r17,4(r8)
100085fc:	d8c12015 	stw	r3,1152(sp)
10008600:	d8811f15 	stw	r2,1148(sp)
10008604:	90bff40e 	bge	r18,r2,100085d8 <__alt_data_end+0xf80085d8>
10008608:	b809883a 	mov	r4,r23
1000860c:	b00b883a 	mov	r5,r22
10008610:	d9811e04 	addi	r6,sp,1144
10008614:	000f05c0 	call	1000f05c <__sprint_r>
10008618:	103ee61e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
1000861c:	843ffc04 	addi	r16,r16,-16
10008620:	d8c12017 	ldw	r3,1152(sp)
10008624:	d8811f17 	ldw	r2,1148(sp)
10008628:	da000404 	addi	r8,sp,16
1000862c:	8c3fed16 	blt	r17,r16,100085e4 <__alt_data_end+0xf80085e4>
10008630:	d9013617 	ldw	r4,1240(sp)
10008634:	1c07883a 	add	r3,r3,r16
10008638:	10800044 	addi	r2,r2,1
1000863c:	41000015 	stw	r4,0(r8)
10008640:	44000115 	stw	r16,4(r8)
10008644:	d8c12015 	stw	r3,1152(sp)
10008648:	d8811f15 	stw	r2,1148(sp)
1000864c:	010001c4 	movi	r4,7
10008650:	2080060e 	bge	r4,r2,1000866c <___vfprintf_internal_r+0x918>
10008654:	b809883a 	mov	r4,r23
10008658:	b00b883a 	mov	r5,r22
1000865c:	d9811e04 	addi	r6,sp,1144
10008660:	000f05c0 	call	1000f05c <__sprint_r>
10008664:	103ed31e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
10008668:	d8c12017 	ldw	r3,1152(sp)
1000866c:	df012b17 	ldw	fp,1196(sp)
10008670:	d9412e17 	ldw	r5,1208(sp)
10008674:	e140010e 	bge	fp,r5,1000867c <___vfprintf_internal_r+0x928>
10008678:	2839883a 	mov	fp,r5
1000867c:	d8812f17 	ldw	r2,1212(sp)
10008680:	1705883a 	add	r2,r2,fp
10008684:	d8812f15 	stw	r2,1212(sp)
10008688:	1802291e 	bne	r3,zero,10008f30 <___vfprintf_internal_r+0x11dc>
1000868c:	d8c12a17 	ldw	r3,1192(sp)
10008690:	d8011f15 	stw	zero,1148(sp)
10008694:	da000404 	addi	r8,sp,16
10008698:	18800007 	ldb	r2,0(r3)
1000869c:	103ded1e 	bne	r2,zero,10007e54 <__alt_data_end+0xf8007e54>
100086a0:	dc012a17 	ldw	r16,1192(sp)
100086a4:	003e0506 	br	10007ebc <__alt_data_end+0xf8007ebc>
100086a8:	d9012d17 	ldw	r4,1204(sp)
100086ac:	d9412d17 	ldw	r5,1204(sp)
100086b0:	da012a17 	ldw	r8,1192(sp)
100086b4:	21000017 	ldw	r4,0(r4)
100086b8:	29400117 	ldw	r5,4(r5)
100086bc:	df012a15 	stw	fp,1192(sp)
100086c0:	9839883a 	mov	fp,r19
100086c4:	dcc12b03 	ldbu	r19,1196(sp)
100086c8:	d9013715 	stw	r4,1244(sp)
100086cc:	d9413915 	stw	r5,1252(sp)
100086d0:	da013f15 	stw	r8,1276(sp)
100086d4:	da413e15 	stw	r9,1272(sp)
100086d8:	dcc12785 	stb	r19,1182(sp)
100086dc:	000ecb80 	call	1000ecb8 <__fpclassifyd>
100086e0:	d8c12d17 	ldw	r3,1204(sp)
100086e4:	04400044 	movi	r17,1
100086e8:	da013f17 	ldw	r8,1276(sp)
100086ec:	1c800204 	addi	r18,r3,8
100086f0:	da413e17 	ldw	r9,1272(sp)
100086f4:	d9013717 	ldw	r4,1244(sp)
100086f8:	d9413917 	ldw	r5,1252(sp)
100086fc:	1443451e 	bne	r2,r17,10009414 <___vfprintf_internal_r+0x16c0>
10008700:	000d883a 	mov	r6,zero
10008704:	000f883a 	mov	r7,zero
10008708:	0012ef00 	call	10012ef0 <__ledf2>
1000870c:	da013f17 	ldw	r8,1276(sp)
10008710:	1004fe16 	blt	r2,zero,10009b0c <___vfprintf_internal_r+0x1db8>
10008714:	dcc12783 	ldbu	r19,1182(sp)
10008718:	008011c4 	movi	r2,71
1000871c:	14045d0e 	bge	r2,r16,10009894 <___vfprintf_internal_r+0x1b40>
10008720:	01440074 	movhi	r5,4097
10008724:	295f3904 	addi	r5,r5,31972
10008728:	d9413115 	stw	r5,1220(sp)
1000872c:	00c000c4 	movi	r3,3
10008730:	00bfdfc4 	movi	r2,-129
10008734:	d8c12b15 	stw	r3,1196(sp)
10008738:	e0b8703a 	and	fp,fp,r2
1000873c:	dc812d15 	stw	r18,1204(sp)
10008740:	1823883a 	mov	r17,r3
10008744:	d8013215 	stw	zero,1224(sp)
10008748:	d8013415 	stw	zero,1232(sp)
1000874c:	003f0106 	br	10008354 <__alt_data_end+0xf8008354>
10008750:	9cc00214 	ori	r19,r19,8
10008754:	e005883a 	mov	r2,fp
10008758:	e4000007 	ldb	r16,0(fp)
1000875c:	003de506 	br	10007ef4 <__alt_data_end+0xf8007ef4>
10008760:	da012a17 	ldw	r8,1192(sp)
10008764:	df012a15 	stw	fp,1192(sp)
10008768:	9f000414 	ori	fp,r19,16
1000876c:	e0c0080c 	andi	r3,fp,32
10008770:	d8812d17 	ldw	r2,1204(sp)
10008774:	18007626 	beq	r3,zero,10008950 <___vfprintf_internal_r+0xbfc>
10008778:	d9412d17 	ldw	r5,1204(sp)
1000877c:	14800017 	ldw	r18,0(r2)
10008780:	15400117 	ldw	r21,4(r2)
10008784:	29400204 	addi	r5,r5,8
10008788:	d9412d15 	stw	r5,1204(sp)
1000878c:	0005883a 	mov	r2,zero
10008790:	9546b03a 	or	r3,r18,r21
10008794:	d8012785 	stb	zero,1182(sp)
10008798:	da413215 	stw	r9,1224(sp)
1000879c:	0027883a 	mov	r19,zero
100087a0:	003ecd06 	br	100082d8 <__alt_data_end+0xf80082d8>
100087a4:	da012a17 	ldw	r8,1192(sp)
100087a8:	df012a15 	stw	fp,1192(sp)
100087ac:	9f000414 	ori	fp,r19,16
100087b0:	e0c0080c 	andi	r3,fp,32
100087b4:	d8812d17 	ldw	r2,1204(sp)
100087b8:	18002c26 	beq	r3,zero,1000886c <___vfprintf_internal_r+0xb18>
100087bc:	d9012d17 	ldw	r4,1204(sp)
100087c0:	14800017 	ldw	r18,0(r2)
100087c4:	15400117 	ldw	r21,4(r2)
100087c8:	21000204 	addi	r4,r4,8
100087cc:	d9012d15 	stw	r4,1204(sp)
100087d0:	00800044 	movi	r2,1
100087d4:	9546b03a 	or	r3,r18,r21
100087d8:	003fee06 	br	10008794 <__alt_data_end+0xf8008794>
100087dc:	da012a17 	ldw	r8,1192(sp)
100087e0:	df012a15 	stw	fp,1192(sp)
100087e4:	9839883a 	mov	fp,r19
100087e8:	dcc12b03 	ldbu	r19,1196(sp)
100087ec:	01440074 	movhi	r5,4097
100087f0:	295f3c04 	addi	r5,r5,31984
100087f4:	dcc12785 	stb	r19,1182(sp)
100087f8:	d9413b15 	stw	r5,1260(sp)
100087fc:	e0c0080c 	andi	r3,fp,32
10008800:	d8812d17 	ldw	r2,1204(sp)
10008804:	18002e26 	beq	r3,zero,100088c0 <___vfprintf_internal_r+0xb6c>
10008808:	d9412d17 	ldw	r5,1204(sp)
1000880c:	14800017 	ldw	r18,0(r2)
10008810:	15400117 	ldw	r21,4(r2)
10008814:	29400204 	addi	r5,r5,8
10008818:	d9412d15 	stw	r5,1204(sp)
1000881c:	e080004c 	andi	r2,fp,1
10008820:	10025c26 	beq	r2,zero,10009194 <___vfprintf_internal_r+0x1440>
10008824:	9546b03a 	or	r3,r18,r21
10008828:	18038f26 	beq	r3,zero,10009668 <___vfprintf_internal_r+0x1914>
1000882c:	00800c04 	movi	r2,48
10008830:	d8812705 	stb	r2,1180(sp)
10008834:	dc012745 	stb	r16,1181(sp)
10008838:	e7000094 	ori	fp,fp,2
1000883c:	00800084 	movi	r2,2
10008840:	003fd406 	br	10008794 <__alt_data_end+0xf8008794>
10008844:	9cc00814 	ori	r19,r19,32
10008848:	e005883a 	mov	r2,fp
1000884c:	e4000007 	ldb	r16,0(fp)
10008850:	003da806 	br	10007ef4 <__alt_data_end+0xf8007ef4>
10008854:	da012a17 	ldw	r8,1192(sp)
10008858:	df012a15 	stw	fp,1192(sp)
1000885c:	9839883a 	mov	fp,r19
10008860:	e0c0080c 	andi	r3,fp,32
10008864:	d8812d17 	ldw	r2,1204(sp)
10008868:	183fd41e 	bne	r3,zero,100087bc <__alt_data_end+0xf80087bc>
1000886c:	e0c0040c 	andi	r3,fp,16
10008870:	18035f26 	beq	r3,zero,100095f0 <___vfprintf_internal_r+0x189c>
10008874:	d9412d17 	ldw	r5,1204(sp)
10008878:	14800017 	ldw	r18,0(r2)
1000887c:	002b883a 	mov	r21,zero
10008880:	29400104 	addi	r5,r5,4
10008884:	d9412d15 	stw	r5,1204(sp)
10008888:	00800044 	movi	r2,1
1000888c:	9007883a 	mov	r3,r18
10008890:	003fc006 	br	10008794 <__alt_data_end+0xf8008794>
10008894:	da012a17 	ldw	r8,1192(sp)
10008898:	df012a15 	stw	fp,1192(sp)
1000889c:	9839883a 	mov	fp,r19
100088a0:	dcc12b03 	ldbu	r19,1196(sp)
100088a4:	01040074 	movhi	r4,4097
100088a8:	211f4104 	addi	r4,r4,32004
100088ac:	d9013b15 	stw	r4,1260(sp)
100088b0:	dcc12785 	stb	r19,1182(sp)
100088b4:	e0c0080c 	andi	r3,fp,32
100088b8:	d8812d17 	ldw	r2,1204(sp)
100088bc:	183fd21e 	bne	r3,zero,10008808 <__alt_data_end+0xf8008808>
100088c0:	e0c0040c 	andi	r3,fp,16
100088c4:	18035426 	beq	r3,zero,10009618 <___vfprintf_internal_r+0x18c4>
100088c8:	d8c12d17 	ldw	r3,1204(sp)
100088cc:	14800017 	ldw	r18,0(r2)
100088d0:	002b883a 	mov	r21,zero
100088d4:	18c00104 	addi	r3,r3,4
100088d8:	d8c12d15 	stw	r3,1204(sp)
100088dc:	003fcf06 	br	1000881c <__alt_data_end+0xf800881c>
100088e0:	e4000007 	ldb	r16,0(fp)
100088e4:	00801b04 	movi	r2,108
100088e8:	8083f726 	beq	r16,r2,100098c8 <___vfprintf_internal_r+0x1b74>
100088ec:	9cc00414 	ori	r19,r19,16
100088f0:	e005883a 	mov	r2,fp
100088f4:	003d7f06 	br	10007ef4 <__alt_data_end+0xf8007ef4>
100088f8:	da012a17 	ldw	r8,1192(sp)
100088fc:	df012a15 	stw	fp,1192(sp)
10008900:	9839883a 	mov	fp,r19
10008904:	dcc12b03 	ldbu	r19,1196(sp)
10008908:	e080080c 	andi	r2,fp,32
1000890c:	dcc12785 	stb	r19,1182(sp)
10008910:	10032226 	beq	r2,zero,1000959c <___vfprintf_internal_r+0x1848>
10008914:	d9412d17 	ldw	r5,1204(sp)
10008918:	d9012f17 	ldw	r4,1212(sp)
1000891c:	28800017 	ldw	r2,0(r5)
10008920:	2007d7fa 	srai	r3,r4,31
10008924:	29400104 	addi	r5,r5,4
10008928:	d9412d15 	stw	r5,1204(sp)
1000892c:	11000015 	stw	r4,0(r2)
10008930:	10c00115 	stw	r3,4(r2)
10008934:	003d4406 	br	10007e48 <__alt_data_end+0xf8007e48>
10008938:	da012a17 	ldw	r8,1192(sp)
1000893c:	df012a15 	stw	fp,1192(sp)
10008940:	9839883a 	mov	fp,r19
10008944:	e0c0080c 	andi	r3,fp,32
10008948:	d8812d17 	ldw	r2,1204(sp)
1000894c:	183f8a1e 	bne	r3,zero,10008778 <__alt_data_end+0xf8008778>
10008950:	e0c0040c 	andi	r3,fp,16
10008954:	18031c26 	beq	r3,zero,100095c8 <___vfprintf_internal_r+0x1874>
10008958:	14800017 	ldw	r18,0(r2)
1000895c:	d8812d17 	ldw	r2,1204(sp)
10008960:	002b883a 	mov	r21,zero
10008964:	9007883a 	mov	r3,r18
10008968:	10800104 	addi	r2,r2,4
1000896c:	d8812d15 	stw	r2,1204(sp)
10008970:	0005883a 	mov	r2,zero
10008974:	003f8706 	br	10008794 <__alt_data_end+0xf8008794>
10008978:	d9412d17 	ldw	r5,1204(sp)
1000897c:	00800c04 	movi	r2,48
10008980:	d8812705 	stb	r2,1180(sp)
10008984:	2c800017 	ldw	r18,0(r5)
10008988:	00801e04 	movi	r2,120
1000898c:	d8812745 	stb	r2,1181(sp)
10008990:	00840074 	movhi	r2,4097
10008994:	109f4104 	addi	r2,r2,32004
10008998:	29400104 	addi	r5,r5,4
1000899c:	da012a17 	ldw	r8,1192(sp)
100089a0:	d8813b15 	stw	r2,1260(sp)
100089a4:	df012a15 	stw	fp,1192(sp)
100089a8:	002b883a 	mov	r21,zero
100089ac:	9f000094 	ori	fp,r19,2
100089b0:	d9412d15 	stw	r5,1204(sp)
100089b4:	00800084 	movi	r2,2
100089b8:	04001e04 	movi	r16,120
100089bc:	9007883a 	mov	r3,r18
100089c0:	003f7406 	br	10008794 <__alt_data_end+0xf8008794>
100089c4:	da012a17 	ldw	r8,1192(sp)
100089c8:	df012a15 	stw	fp,1192(sp)
100089cc:	9839883a 	mov	fp,r19
100089d0:	dcc12b03 	ldbu	r19,1196(sp)
100089d4:	e080080c 	andi	r2,fp,32
100089d8:	d8c12d17 	ldw	r3,1204(sp)
100089dc:	dcc12785 	stb	r19,1182(sp)
100089e0:	103e321e 	bne	r2,zero,100082ac <__alt_data_end+0xf80082ac>
100089e4:	e080040c 	andi	r2,fp,16
100089e8:	10031326 	beq	r2,zero,10009638 <___vfprintf_internal_r+0x18e4>
100089ec:	1c800017 	ldw	r18,0(r3)
100089f0:	d9412d17 	ldw	r5,1204(sp)
100089f4:	902bd7fa 	srai	r21,r18,31
100089f8:	29400104 	addi	r5,r5,4
100089fc:	d9412d15 	stw	r5,1204(sp)
10008a00:	a805883a 	mov	r2,r21
10008a04:	003e2f06 	br	100082c4 <__alt_data_end+0xf80082c4>
10008a08:	9cc01014 	ori	r19,r19,64
10008a0c:	e005883a 	mov	r2,fp
10008a10:	e4000007 	ldb	r16,0(fp)
10008a14:	003d3706 	br	10007ef4 <__alt_data_end+0xf8007ef4>
10008a18:	d8c12d17 	ldw	r3,1204(sp)
10008a1c:	d9012d17 	ldw	r4,1204(sp)
10008a20:	da012a17 	ldw	r8,1192(sp)
10008a24:	18800017 	ldw	r2,0(r3)
10008a28:	21000104 	addi	r4,r4,4
10008a2c:	00c00044 	movi	r3,1
10008a30:	df012a15 	stw	fp,1192(sp)
10008a34:	d8c12b15 	stw	r3,1196(sp)
10008a38:	9839883a 	mov	fp,r19
10008a3c:	d8012785 	stb	zero,1182(sp)
10008a40:	d8810405 	stb	r2,1040(sp)
10008a44:	d9012d15 	stw	r4,1204(sp)
10008a48:	1823883a 	mov	r17,r3
10008a4c:	d8c10404 	addi	r3,sp,1040
10008a50:	d8013215 	stw	zero,1224(sp)
10008a54:	d8013415 	stw	zero,1232(sp)
10008a58:	d8c13115 	stw	r3,1220(sp)
10008a5c:	0005883a 	mov	r2,zero
10008a60:	003e4306 	br	10008370 <__alt_data_end+0xf8008370>
10008a64:	d8812b07 	ldb	r2,1196(sp)
10008a68:	1002fc1e 	bne	r2,zero,1000965c <___vfprintf_internal_r+0x1908>
10008a6c:	00c00804 	movi	r3,32
10008a70:	d8c12b05 	stb	r3,1196(sp)
10008a74:	e005883a 	mov	r2,fp
10008a78:	e4000007 	ldb	r16,0(fp)
10008a7c:	003d1d06 	br	10007ef4 <__alt_data_end+0xf8007ef4>
10008a80:	9cc00054 	ori	r19,r19,1
10008a84:	e005883a 	mov	r2,fp
10008a88:	e4000007 	ldb	r16,0(fp)
10008a8c:	003d1906 	br	10007ef4 <__alt_data_end+0xf8007ef4>
10008a90:	d9012d17 	ldw	r4,1204(sp)
10008a94:	d9412d17 	ldw	r5,1204(sp)
10008a98:	21000017 	ldw	r4,0(r4)
10008a9c:	28c00104 	addi	r3,r5,4
10008aa0:	d9012e15 	stw	r4,1208(sp)
10008aa4:	20038c16 	blt	r4,zero,100098d8 <___vfprintf_internal_r+0x1b84>
10008aa8:	d8c12d15 	stw	r3,1204(sp)
10008aac:	e005883a 	mov	r2,fp
10008ab0:	e4000007 	ldb	r16,0(fp)
10008ab4:	003d0f06 	br	10007ef4 <__alt_data_end+0xf8007ef4>
10008ab8:	00c00ac4 	movi	r3,43
10008abc:	d8c12b05 	stb	r3,1196(sp)
10008ac0:	e005883a 	mov	r2,fp
10008ac4:	e4000007 	ldb	r16,0(fp)
10008ac8:	003d0a06 	br	10007ef4 <__alt_data_end+0xf8007ef4>
10008acc:	d8c12d17 	ldw	r3,1204(sp)
10008ad0:	d9012d17 	ldw	r4,1204(sp)
10008ad4:	da012a17 	ldw	r8,1192(sp)
10008ad8:	18c00017 	ldw	r3,0(r3)
10008adc:	df012a15 	stw	fp,1192(sp)
10008ae0:	d8012785 	stb	zero,1182(sp)
10008ae4:	d8c13115 	stw	r3,1220(sp)
10008ae8:	9839883a 	mov	fp,r19
10008aec:	24800104 	addi	r18,r4,4
10008af0:	1803f726 	beq	r3,zero,10009ad0 <___vfprintf_internal_r+0x1d7c>
10008af4:	d9013117 	ldw	r4,1220(sp)
10008af8:	48038916 	blt	r9,zero,10009920 <___vfprintf_internal_r+0x1bcc>
10008afc:	480d883a 	mov	r6,r9
10008b00:	000b883a 	mov	r5,zero
10008b04:	da013f15 	stw	r8,1276(sp)
10008b08:	da413e15 	stw	r9,1272(sp)
10008b0c:	000d3680 	call	1000d368 <memchr>
10008b10:	da013f17 	ldw	r8,1276(sp)
10008b14:	da413e17 	ldw	r9,1272(sp)
10008b18:	10045926 	beq	r2,zero,10009c80 <___vfprintf_internal_r+0x1f2c>
10008b1c:	d8c13117 	ldw	r3,1220(sp)
10008b20:	10e3c83a 	sub	r17,r2,r3
10008b24:	4c433516 	blt	r9,r17,100097fc <___vfprintf_internal_r+0x1aa8>
10008b28:	8805883a 	mov	r2,r17
10008b2c:	88038116 	blt	r17,zero,10009934 <___vfprintf_internal_r+0x1be0>
10008b30:	dcc12783 	ldbu	r19,1182(sp)
10008b34:	d8812b15 	stw	r2,1196(sp)
10008b38:	dc812d15 	stw	r18,1204(sp)
10008b3c:	d8013215 	stw	zero,1224(sp)
10008b40:	d8013415 	stw	zero,1232(sp)
10008b44:	003e0306 	br	10008354 <__alt_data_end+0xf8008354>
10008b48:	da012a17 	ldw	r8,1192(sp)
10008b4c:	df012a15 	stw	fp,1192(sp)
10008b50:	9839883a 	mov	fp,r19
10008b54:	dcc12b03 	ldbu	r19,1196(sp)
10008b58:	dcc12785 	stb	r19,1182(sp)
10008b5c:	803d8f26 	beq	r16,zero,1000819c <__alt_data_end+0xf800819c>
10008b60:	00c00044 	movi	r3,1
10008b64:	d8c12b15 	stw	r3,1196(sp)
10008b68:	dc010405 	stb	r16,1040(sp)
10008b6c:	d8012785 	stb	zero,1182(sp)
10008b70:	003fb506 	br	10008a48 <__alt_data_end+0xf8008a48>
10008b74:	d8c12017 	ldw	r3,1152(sp)
10008b78:	003e3506 	br	10008450 <__alt_data_end+0xf8008450>
10008b7c:	10803fcc 	andi	r2,r2,255
10008b80:	00c00044 	movi	r3,1
10008b84:	10fddc1e 	bne	r2,r3,100082f8 <__alt_data_end+0xf80082f8>
10008b88:	a800021e 	bne	r21,zero,10008b94 <___vfprintf_internal_r+0xe40>
10008b8c:	00800244 	movi	r2,9
10008b90:	14801e2e 	bgeu	r2,r18,10008c0c <___vfprintf_internal_r+0xeb8>
10008b94:	dc012b15 	stw	r16,1196(sp)
10008b98:	dc410e04 	addi	r17,sp,1080
10008b9c:	9021883a 	mov	r16,r18
10008ba0:	da012c15 	stw	r8,1200(sp)
10008ba4:	a825883a 	mov	r18,r21
10008ba8:	482b883a 	mov	r21,r9
10008bac:	8009883a 	mov	r4,r16
10008bb0:	900b883a 	mov	r5,r18
10008bb4:	01800284 	movi	r6,10
10008bb8:	000f883a 	mov	r7,zero
10008bbc:	00115540 	call	10011554 <__umoddi3>
10008bc0:	10800c04 	addi	r2,r2,48
10008bc4:	8c7fffc4 	addi	r17,r17,-1
10008bc8:	8009883a 	mov	r4,r16
10008bcc:	900b883a 	mov	r5,r18
10008bd0:	01800284 	movi	r6,10
10008bd4:	000f883a 	mov	r7,zero
10008bd8:	88800005 	stb	r2,0(r17)
10008bdc:	0010f140 	call	10010f14 <__udivdi3>
10008be0:	1021883a 	mov	r16,r2
10008be4:	10c4b03a 	or	r2,r2,r3
10008be8:	1825883a 	mov	r18,r3
10008bec:	103fef1e 	bne	r2,zero,10008bac <__alt_data_end+0xf8008bac>
10008bf0:	d9012817 	ldw	r4,1184(sp)
10008bf4:	dc413115 	stw	r17,1220(sp)
10008bf8:	dc012b17 	ldw	r16,1196(sp)
10008bfc:	da012c17 	ldw	r8,1200(sp)
10008c00:	a813883a 	mov	r9,r21
10008c04:	2463c83a 	sub	r17,r4,r17
10008c08:	003dcd06 	br	10008340 <__alt_data_end+0xf8008340>
10008c0c:	94800c04 	addi	r18,r18,48
10008c10:	d8c10dc4 	addi	r3,sp,1079
10008c14:	dc810dc5 	stb	r18,1079(sp)
10008c18:	dc413c17 	ldw	r17,1264(sp)
10008c1c:	d8c13115 	stw	r3,1220(sp)
10008c20:	003dc706 	br	10008340 <__alt_data_end+0xf8008340>
10008c24:	00801944 	movi	r2,101
10008c28:	1400720e 	bge	r2,r16,10008df4 <___vfprintf_internal_r+0x10a0>
10008c2c:	d9013717 	ldw	r4,1244(sp)
10008c30:	d9413917 	ldw	r5,1252(sp)
10008c34:	000d883a 	mov	r6,zero
10008c38:	000f883a 	mov	r7,zero
10008c3c:	d8c13d15 	stw	r3,1268(sp)
10008c40:	da013f15 	stw	r8,1276(sp)
10008c44:	0012d8c0 	call	10012d8c <__eqdf2>
10008c48:	d8c13d17 	ldw	r3,1268(sp)
10008c4c:	da013f17 	ldw	r8,1276(sp)
10008c50:	1000f41e 	bne	r2,zero,10009024 <___vfprintf_internal_r+0x12d0>
10008c54:	d8811f17 	ldw	r2,1148(sp)
10008c58:	01040074 	movhi	r4,4097
10008c5c:	211f4804 	addi	r4,r4,32032
10008c60:	18c00044 	addi	r3,r3,1
10008c64:	10800044 	addi	r2,r2,1
10008c68:	41000015 	stw	r4,0(r8)
10008c6c:	01000044 	movi	r4,1
10008c70:	41000115 	stw	r4,4(r8)
10008c74:	d8c12015 	stw	r3,1152(sp)
10008c78:	d8811f15 	stw	r2,1148(sp)
10008c7c:	010001c4 	movi	r4,7
10008c80:	20828d16 	blt	r4,r2,100096b8 <___vfprintf_internal_r+0x1964>
10008c84:	42000204 	addi	r8,r8,8
10008c88:	d8812617 	ldw	r2,1176(sp)
10008c8c:	d9413317 	ldw	r5,1228(sp)
10008c90:	11400216 	blt	r2,r5,10008c9c <___vfprintf_internal_r+0xf48>
10008c94:	e080004c 	andi	r2,fp,1
10008c98:	103e4126 	beq	r2,zero,100085a0 <__alt_data_end+0xf80085a0>
10008c9c:	d8813817 	ldw	r2,1248(sp)
10008ca0:	d9013517 	ldw	r4,1236(sp)
10008ca4:	d9413817 	ldw	r5,1248(sp)
10008ca8:	1887883a 	add	r3,r3,r2
10008cac:	d8811f17 	ldw	r2,1148(sp)
10008cb0:	41000015 	stw	r4,0(r8)
10008cb4:	41400115 	stw	r5,4(r8)
10008cb8:	10800044 	addi	r2,r2,1
10008cbc:	d8c12015 	stw	r3,1152(sp)
10008cc0:	d8811f15 	stw	r2,1148(sp)
10008cc4:	010001c4 	movi	r4,7
10008cc8:	20830916 	blt	r4,r2,100098f0 <___vfprintf_internal_r+0x1b9c>
10008ccc:	42000204 	addi	r8,r8,8
10008cd0:	d8813317 	ldw	r2,1228(sp)
10008cd4:	143fffc4 	addi	r16,r2,-1
10008cd8:	043e310e 	bge	zero,r16,100085a0 <__alt_data_end+0xf80085a0>
10008cdc:	04400404 	movi	r17,16
10008ce0:	d8811f17 	ldw	r2,1148(sp)
10008ce4:	8c007e0e 	bge	r17,r16,10008ee0 <___vfprintf_internal_r+0x118c>
10008ce8:	01440074 	movhi	r5,4097
10008cec:	295f4884 	addi	r5,r5,32034
10008cf0:	d9412c15 	stw	r5,1200(sp)
10008cf4:	04c001c4 	movi	r19,7
10008cf8:	00000306 	br	10008d08 <___vfprintf_internal_r+0xfb4>
10008cfc:	42000204 	addi	r8,r8,8
10008d00:	843ffc04 	addi	r16,r16,-16
10008d04:	8c00790e 	bge	r17,r16,10008eec <___vfprintf_internal_r+0x1198>
10008d08:	18c00404 	addi	r3,r3,16
10008d0c:	10800044 	addi	r2,r2,1
10008d10:	45000015 	stw	r20,0(r8)
10008d14:	44400115 	stw	r17,4(r8)
10008d18:	d8c12015 	stw	r3,1152(sp)
10008d1c:	d8811f15 	stw	r2,1148(sp)
10008d20:	98bff60e 	bge	r19,r2,10008cfc <__alt_data_end+0xf8008cfc>
10008d24:	b809883a 	mov	r4,r23
10008d28:	b00b883a 	mov	r5,r22
10008d2c:	d9811e04 	addi	r6,sp,1144
10008d30:	000f05c0 	call	1000f05c <__sprint_r>
10008d34:	103d1f1e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
10008d38:	d8c12017 	ldw	r3,1152(sp)
10008d3c:	d8811f17 	ldw	r2,1148(sp)
10008d40:	da000404 	addi	r8,sp,16
10008d44:	003fee06 	br	10008d00 <__alt_data_end+0xf8008d00>
10008d48:	d9412e17 	ldw	r5,1208(sp)
10008d4c:	d8812b17 	ldw	r2,1196(sp)
10008d50:	28a7c83a 	sub	r19,r5,r2
10008d54:	04fddc0e 	bge	zero,r19,100084c8 <__alt_data_end+0xf80084c8>
10008d58:	05400404 	movi	r21,16
10008d5c:	d8811f17 	ldw	r2,1148(sp)
10008d60:	acc3870e 	bge	r21,r19,10009b80 <___vfprintf_internal_r+0x1e2c>
10008d64:	01440074 	movhi	r5,4097
10008d68:	295f4884 	addi	r5,r5,32034
10008d6c:	d9412c15 	stw	r5,1200(sp)
10008d70:	048001c4 	movi	r18,7
10008d74:	00000306 	br	10008d84 <___vfprintf_internal_r+0x1030>
10008d78:	9cfffc04 	addi	r19,r19,-16
10008d7c:	42000204 	addi	r8,r8,8
10008d80:	acc0110e 	bge	r21,r19,10008dc8 <___vfprintf_internal_r+0x1074>
10008d84:	18c00404 	addi	r3,r3,16
10008d88:	10800044 	addi	r2,r2,1
10008d8c:	45000015 	stw	r20,0(r8)
10008d90:	45400115 	stw	r21,4(r8)
10008d94:	d8c12015 	stw	r3,1152(sp)
10008d98:	d8811f15 	stw	r2,1148(sp)
10008d9c:	90bff60e 	bge	r18,r2,10008d78 <__alt_data_end+0xf8008d78>
10008da0:	b809883a 	mov	r4,r23
10008da4:	b00b883a 	mov	r5,r22
10008da8:	d9811e04 	addi	r6,sp,1144
10008dac:	000f05c0 	call	1000f05c <__sprint_r>
10008db0:	103d001e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
10008db4:	9cfffc04 	addi	r19,r19,-16
10008db8:	d8c12017 	ldw	r3,1152(sp)
10008dbc:	d8811f17 	ldw	r2,1148(sp)
10008dc0:	da000404 	addi	r8,sp,16
10008dc4:	acffef16 	blt	r21,r19,10008d84 <__alt_data_end+0xf8008d84>
10008dc8:	d9012c17 	ldw	r4,1200(sp)
10008dcc:	1cc7883a 	add	r3,r3,r19
10008dd0:	10800044 	addi	r2,r2,1
10008dd4:	41000015 	stw	r4,0(r8)
10008dd8:	44c00115 	stw	r19,4(r8)
10008ddc:	d8c12015 	stw	r3,1152(sp)
10008de0:	d8811f15 	stw	r2,1148(sp)
10008de4:	010001c4 	movi	r4,7
10008de8:	20817816 	blt	r4,r2,100093cc <___vfprintf_internal_r+0x1678>
10008dec:	42000204 	addi	r8,r8,8
10008df0:	003db506 	br	100084c8 <__alt_data_end+0xf80084c8>
10008df4:	d9413317 	ldw	r5,1228(sp)
10008df8:	00800044 	movi	r2,1
10008dfc:	18c00044 	addi	r3,r3,1
10008e00:	11413e0e 	bge	r2,r5,100092fc <___vfprintf_internal_r+0x15a8>
10008e04:	dc011f17 	ldw	r16,1148(sp)
10008e08:	d8813117 	ldw	r2,1220(sp)
10008e0c:	d8c12015 	stw	r3,1152(sp)
10008e10:	84000044 	addi	r16,r16,1
10008e14:	40800015 	stw	r2,0(r8)
10008e18:	00800044 	movi	r2,1
10008e1c:	40800115 	stw	r2,4(r8)
10008e20:	dc011f15 	stw	r16,1148(sp)
10008e24:	008001c4 	movi	r2,7
10008e28:	14015616 	blt	r2,r16,10009384 <___vfprintf_internal_r+0x1630>
10008e2c:	42000204 	addi	r8,r8,8
10008e30:	d9013817 	ldw	r4,1248(sp)
10008e34:	d9413517 	ldw	r5,1236(sp)
10008e38:	84000044 	addi	r16,r16,1
10008e3c:	1907883a 	add	r3,r3,r4
10008e40:	41400015 	stw	r5,0(r8)
10008e44:	41000115 	stw	r4,4(r8)
10008e48:	d8c12015 	stw	r3,1152(sp)
10008e4c:	dc011f15 	stw	r16,1148(sp)
10008e50:	008001c4 	movi	r2,7
10008e54:	14015416 	blt	r2,r16,100093a8 <___vfprintf_internal_r+0x1654>
10008e58:	44400204 	addi	r17,r8,8
10008e5c:	d9013717 	ldw	r4,1244(sp)
10008e60:	d9413917 	ldw	r5,1252(sp)
10008e64:	000d883a 	mov	r6,zero
10008e68:	000f883a 	mov	r7,zero
10008e6c:	d8c13d15 	stw	r3,1268(sp)
10008e70:	0012d8c0 	call	10012d8c <__eqdf2>
10008e74:	d8c13d17 	ldw	r3,1268(sp)
10008e78:	1000a726 	beq	r2,zero,10009118 <___vfprintf_internal_r+0x13c4>
10008e7c:	d9013317 	ldw	r4,1228(sp)
10008e80:	d9413117 	ldw	r5,1220(sp)
10008e84:	84000044 	addi	r16,r16,1
10008e88:	20bfffc4 	addi	r2,r4,-1
10008e8c:	1887883a 	add	r3,r3,r2
10008e90:	29000044 	addi	r4,r5,1
10008e94:	88800115 	stw	r2,4(r17)
10008e98:	89000015 	stw	r4,0(r17)
10008e9c:	d8c12015 	stw	r3,1152(sp)
10008ea0:	dc011f15 	stw	r16,1148(sp)
10008ea4:	008001c4 	movi	r2,7
10008ea8:	14012d16 	blt	r2,r16,10009360 <___vfprintf_internal_r+0x160c>
10008eac:	8c400204 	addi	r17,r17,8
10008eb0:	d9413a17 	ldw	r5,1256(sp)
10008eb4:	dcc122c4 	addi	r19,sp,1163
10008eb8:	84000044 	addi	r16,r16,1
10008ebc:	28c7883a 	add	r3,r5,r3
10008ec0:	8cc00015 	stw	r19,0(r17)
10008ec4:	89400115 	stw	r5,4(r17)
10008ec8:	d8c12015 	stw	r3,1152(sp)
10008ecc:	dc011f15 	stw	r16,1148(sp)
10008ed0:	008001c4 	movi	r2,7
10008ed4:	14000e16 	blt	r2,r16,10008f10 <___vfprintf_internal_r+0x11bc>
10008ed8:	8a000204 	addi	r8,r17,8
10008edc:	003db006 	br	100085a0 <__alt_data_end+0xf80085a0>
10008ee0:	01040074 	movhi	r4,4097
10008ee4:	211f4884 	addi	r4,r4,32034
10008ee8:	d9012c15 	stw	r4,1200(sp)
10008eec:	d9012c17 	ldw	r4,1200(sp)
10008ef0:	1c07883a 	add	r3,r3,r16
10008ef4:	44000115 	stw	r16,4(r8)
10008ef8:	41000015 	stw	r4,0(r8)
10008efc:	10800044 	addi	r2,r2,1
10008f00:	d8c12015 	stw	r3,1152(sp)
10008f04:	d8811f15 	stw	r2,1148(sp)
10008f08:	010001c4 	movi	r4,7
10008f0c:	20bda30e 	bge	r4,r2,1000859c <__alt_data_end+0xf800859c>
10008f10:	b809883a 	mov	r4,r23
10008f14:	b00b883a 	mov	r5,r22
10008f18:	d9811e04 	addi	r6,sp,1144
10008f1c:	000f05c0 	call	1000f05c <__sprint_r>
10008f20:	103ca41e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
10008f24:	d8c12017 	ldw	r3,1152(sp)
10008f28:	da000404 	addi	r8,sp,16
10008f2c:	003d9c06 	br	100085a0 <__alt_data_end+0xf80085a0>
10008f30:	b809883a 	mov	r4,r23
10008f34:	b00b883a 	mov	r5,r22
10008f38:	d9811e04 	addi	r6,sp,1144
10008f3c:	000f05c0 	call	1000f05c <__sprint_r>
10008f40:	103dd226 	beq	r2,zero,1000868c <__alt_data_end+0xf800868c>
10008f44:	003c9b06 	br	100081b4 <__alt_data_end+0xf80081b4>
10008f48:	10803fcc 	andi	r2,r2,255
10008f4c:	1000311e 	bne	r2,zero,10009014 <___vfprintf_internal_r+0x12c0>
10008f50:	e080004c 	andi	r2,fp,1
10008f54:	10002f26 	beq	r2,zero,10009014 <___vfprintf_internal_r+0x12c0>
10008f58:	00800c04 	movi	r2,48
10008f5c:	d8c10dc4 	addi	r3,sp,1079
10008f60:	d8810dc5 	stb	r2,1079(sp)
10008f64:	dc413c17 	ldw	r17,1264(sp)
10008f68:	d8c13115 	stw	r3,1220(sp)
10008f6c:	003cf406 	br	10008340 <__alt_data_end+0xf8008340>
10008f70:	b809883a 	mov	r4,r23
10008f74:	b00b883a 	mov	r5,r22
10008f78:	d9811e04 	addi	r6,sp,1144
10008f7c:	000f05c0 	call	1000f05c <__sprint_r>
10008f80:	103c8c1e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
10008f84:	d8c12017 	ldw	r3,1152(sp)
10008f88:	da000404 	addi	r8,sp,16
10008f8c:	003d7706 	br	1000856c <__alt_data_end+0xf800856c>
10008f90:	b809883a 	mov	r4,r23
10008f94:	b00b883a 	mov	r5,r22
10008f98:	d9811e04 	addi	r6,sp,1144
10008f9c:	000f05c0 	call	1000f05c <__sprint_r>
10008fa0:	103c841e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
10008fa4:	d8c12017 	ldw	r3,1152(sp)
10008fa8:	da000404 	addi	r8,sp,16
10008fac:	003d3506 	br	10008484 <__alt_data_end+0xf8008484>
10008fb0:	b809883a 	mov	r4,r23
10008fb4:	b00b883a 	mov	r5,r22
10008fb8:	d9811e04 	addi	r6,sp,1144
10008fbc:	000f05c0 	call	1000f05c <__sprint_r>
10008fc0:	103c7c1e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
10008fc4:	d8c12017 	ldw	r3,1152(sp)
10008fc8:	da000404 	addi	r8,sp,16
10008fcc:	003d3b06 	br	100084bc <__alt_data_end+0xf80084bc>
10008fd0:	d9413b17 	ldw	r5,1260(sp)
10008fd4:	d8c10e04 	addi	r3,sp,1080
10008fd8:	908003cc 	andi	r2,r18,15
10008fdc:	a808973a 	slli	r4,r21,28
10008fe0:	2885883a 	add	r2,r5,r2
10008fe4:	9024d13a 	srli	r18,r18,4
10008fe8:	10800003 	ldbu	r2,0(r2)
10008fec:	a82ad13a 	srli	r21,r21,4
10008ff0:	18ffffc4 	addi	r3,r3,-1
10008ff4:	24a4b03a 	or	r18,r4,r18
10008ff8:	18800005 	stb	r2,0(r3)
10008ffc:	9544b03a 	or	r2,r18,r21
10009000:	103ff51e 	bne	r2,zero,10008fd8 <__alt_data_end+0xf8008fd8>
10009004:	d9412817 	ldw	r5,1184(sp)
10009008:	d8c13115 	stw	r3,1220(sp)
1000900c:	28e3c83a 	sub	r17,r5,r3
10009010:	003ccb06 	br	10008340 <__alt_data_end+0xf8008340>
10009014:	d8c10e04 	addi	r3,sp,1080
10009018:	0023883a 	mov	r17,zero
1000901c:	d8c13115 	stw	r3,1220(sp)
10009020:	003cc706 	br	10008340 <__alt_data_end+0xf8008340>
10009024:	dc012617 	ldw	r16,1176(sp)
10009028:	0401ab0e 	bge	zero,r16,100096d8 <___vfprintf_internal_r+0x1984>
1000902c:	d8813317 	ldw	r2,1228(sp)
10009030:	d9413117 	ldw	r5,1220(sp)
10009034:	d9013417 	ldw	r4,1232(sp)
10009038:	1023883a 	mov	r17,r2
1000903c:	28a1883a 	add	r16,r5,r2
10009040:	2080010e 	bge	r4,r2,10009048 <___vfprintf_internal_r+0x12f4>
10009044:	2023883a 	mov	r17,r4
10009048:	04400b0e 	bge	zero,r17,10009078 <___vfprintf_internal_r+0x1324>
1000904c:	d8811f17 	ldw	r2,1148(sp)
10009050:	d9413117 	ldw	r5,1220(sp)
10009054:	1c47883a 	add	r3,r3,r17
10009058:	10800044 	addi	r2,r2,1
1000905c:	41400015 	stw	r5,0(r8)
10009060:	44400115 	stw	r17,4(r8)
10009064:	d8c12015 	stw	r3,1152(sp)
10009068:	d8811f15 	stw	r2,1148(sp)
1000906c:	010001c4 	movi	r4,7
10009070:	20826716 	blt	r4,r2,10009a10 <___vfprintf_internal_r+0x1cbc>
10009074:	42000204 	addi	r8,r8,8
10009078:	88026316 	blt	r17,zero,10009a08 <___vfprintf_internal_r+0x1cb4>
1000907c:	d8813417 	ldw	r2,1232(sp)
10009080:	1463c83a 	sub	r17,r2,r17
10009084:	0440590e 	bge	zero,r17,100091ec <___vfprintf_internal_r+0x1498>
10009088:	04c00404 	movi	r19,16
1000908c:	d8811f17 	ldw	r2,1148(sp)
10009090:	9c41770e 	bge	r19,r17,10009670 <___vfprintf_internal_r+0x191c>
10009094:	01440074 	movhi	r5,4097
10009098:	295f4884 	addi	r5,r5,32034
1000909c:	d9412c15 	stw	r5,1200(sp)
100090a0:	054001c4 	movi	r21,7
100090a4:	00000306 	br	100090b4 <___vfprintf_internal_r+0x1360>
100090a8:	42000204 	addi	r8,r8,8
100090ac:	8c7ffc04 	addi	r17,r17,-16
100090b0:	9c41720e 	bge	r19,r17,1000967c <___vfprintf_internal_r+0x1928>
100090b4:	18c00404 	addi	r3,r3,16
100090b8:	10800044 	addi	r2,r2,1
100090bc:	45000015 	stw	r20,0(r8)
100090c0:	44c00115 	stw	r19,4(r8)
100090c4:	d8c12015 	stw	r3,1152(sp)
100090c8:	d8811f15 	stw	r2,1148(sp)
100090cc:	a8bff60e 	bge	r21,r2,100090a8 <__alt_data_end+0xf80090a8>
100090d0:	b809883a 	mov	r4,r23
100090d4:	b00b883a 	mov	r5,r22
100090d8:	d9811e04 	addi	r6,sp,1144
100090dc:	000f05c0 	call	1000f05c <__sprint_r>
100090e0:	103c341e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
100090e4:	d8c12017 	ldw	r3,1152(sp)
100090e8:	d8811f17 	ldw	r2,1148(sp)
100090ec:	da000404 	addi	r8,sp,16
100090f0:	003fee06 	br	100090ac <__alt_data_end+0xf80090ac>
100090f4:	b809883a 	mov	r4,r23
100090f8:	b00b883a 	mov	r5,r22
100090fc:	d9811e04 	addi	r6,sp,1144
10009100:	000f05c0 	call	1000f05c <__sprint_r>
10009104:	103c2b1e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
10009108:	d8c12017 	ldw	r3,1152(sp)
1000910c:	d8812787 	ldb	r2,1182(sp)
10009110:	da000404 	addi	r8,sp,16
10009114:	003cce06 	br	10008450 <__alt_data_end+0xf8008450>
10009118:	d8813317 	ldw	r2,1228(sp)
1000911c:	14ffffc4 	addi	r19,r2,-1
10009120:	04ff630e 	bge	zero,r19,10008eb0 <__alt_data_end+0xf8008eb0>
10009124:	05400404 	movi	r21,16
10009128:	acc0810e 	bge	r21,r19,10009330 <___vfprintf_internal_r+0x15dc>
1000912c:	01440074 	movhi	r5,4097
10009130:	295f4884 	addi	r5,r5,32034
10009134:	d9412c15 	stw	r5,1200(sp)
10009138:	01c001c4 	movi	r7,7
1000913c:	00000306 	br	1000914c <___vfprintf_internal_r+0x13f8>
10009140:	8c400204 	addi	r17,r17,8
10009144:	9cfffc04 	addi	r19,r19,-16
10009148:	acc07c0e 	bge	r21,r19,1000933c <___vfprintf_internal_r+0x15e8>
1000914c:	18c00404 	addi	r3,r3,16
10009150:	84000044 	addi	r16,r16,1
10009154:	8d000015 	stw	r20,0(r17)
10009158:	8d400115 	stw	r21,4(r17)
1000915c:	d8c12015 	stw	r3,1152(sp)
10009160:	dc011f15 	stw	r16,1148(sp)
10009164:	3c3ff60e 	bge	r7,r16,10009140 <__alt_data_end+0xf8009140>
10009168:	b809883a 	mov	r4,r23
1000916c:	b00b883a 	mov	r5,r22
10009170:	d9811e04 	addi	r6,sp,1144
10009174:	d9c13d15 	stw	r7,1268(sp)
10009178:	000f05c0 	call	1000f05c <__sprint_r>
1000917c:	d9c13d17 	ldw	r7,1268(sp)
10009180:	103c0c1e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
10009184:	d8c12017 	ldw	r3,1152(sp)
10009188:	dc011f17 	ldw	r16,1148(sp)
1000918c:	dc400404 	addi	r17,sp,16
10009190:	003fec06 	br	10009144 <__alt_data_end+0xf8009144>
10009194:	00800084 	movi	r2,2
10009198:	9546b03a 	or	r3,r18,r21
1000919c:	003d7d06 	br	10008794 <__alt_data_end+0xf8008794>
100091a0:	10803fcc 	andi	r2,r2,255
100091a4:	1080201c 	xori	r2,r2,128
100091a8:	10bfe004 	addi	r2,r2,-128
100091ac:	01000c04 	movi	r4,48
100091b0:	1101d726 	beq	r2,r4,10009910 <___vfprintf_internal_r+0x1bbc>
100091b4:	d9413117 	ldw	r5,1220(sp)
100091b8:	d8812817 	ldw	r2,1184(sp)
100091bc:	193fffc5 	stb	r4,-1(r3)
100091c0:	297fffc4 	addi	r5,r5,-1
100091c4:	d9413115 	stw	r5,1220(sp)
100091c8:	1163c83a 	sub	r17,r2,r5
100091cc:	003c5c06 	br	10008340 <__alt_data_end+0xf8008340>
100091d0:	b809883a 	mov	r4,r23
100091d4:	b00b883a 	mov	r5,r22
100091d8:	d9811e04 	addi	r6,sp,1144
100091dc:	000f05c0 	call	1000f05c <__sprint_r>
100091e0:	103bf41e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
100091e4:	d8c12017 	ldw	r3,1152(sp)
100091e8:	da000404 	addi	r8,sp,16
100091ec:	d9413117 	ldw	r5,1220(sp)
100091f0:	d9013417 	ldw	r4,1232(sp)
100091f4:	d8812617 	ldw	r2,1176(sp)
100091f8:	2923883a 	add	r17,r5,r4
100091fc:	d9413317 	ldw	r5,1228(sp)
10009200:	11400216 	blt	r2,r5,1000920c <___vfprintf_internal_r+0x14b8>
10009204:	e100004c 	andi	r4,fp,1
10009208:	20000d26 	beq	r4,zero,10009240 <___vfprintf_internal_r+0x14ec>
1000920c:	d9013817 	ldw	r4,1248(sp)
10009210:	d9413517 	ldw	r5,1236(sp)
10009214:	1907883a 	add	r3,r3,r4
10009218:	d9011f17 	ldw	r4,1148(sp)
1000921c:	41400015 	stw	r5,0(r8)
10009220:	d9413817 	ldw	r5,1248(sp)
10009224:	21000044 	addi	r4,r4,1
10009228:	d8c12015 	stw	r3,1152(sp)
1000922c:	41400115 	stw	r5,4(r8)
10009230:	d9011f15 	stw	r4,1148(sp)
10009234:	014001c4 	movi	r5,7
10009238:	2901fd16 	blt	r5,r4,10009a30 <___vfprintf_internal_r+0x1cdc>
1000923c:	42000204 	addi	r8,r8,8
10009240:	d9013317 	ldw	r4,1228(sp)
10009244:	2085c83a 	sub	r2,r4,r2
10009248:	8449c83a 	sub	r4,r16,r17
1000924c:	1021883a 	mov	r16,r2
10009250:	2080010e 	bge	r4,r2,10009258 <___vfprintf_internal_r+0x1504>
10009254:	2021883a 	mov	r16,r4
10009258:	04000a0e 	bge	zero,r16,10009284 <___vfprintf_internal_r+0x1530>
1000925c:	d9011f17 	ldw	r4,1148(sp)
10009260:	1c07883a 	add	r3,r3,r16
10009264:	44400015 	stw	r17,0(r8)
10009268:	21000044 	addi	r4,r4,1
1000926c:	44000115 	stw	r16,4(r8)
10009270:	d8c12015 	stw	r3,1152(sp)
10009274:	d9011f15 	stw	r4,1148(sp)
10009278:	014001c4 	movi	r5,7
1000927c:	29020916 	blt	r5,r4,10009aa4 <___vfprintf_internal_r+0x1d50>
10009280:	42000204 	addi	r8,r8,8
10009284:	80020116 	blt	r16,zero,10009a8c <___vfprintf_internal_r+0x1d38>
10009288:	1421c83a 	sub	r16,r2,r16
1000928c:	043cc40e 	bge	zero,r16,100085a0 <__alt_data_end+0xf80085a0>
10009290:	04400404 	movi	r17,16
10009294:	d8811f17 	ldw	r2,1148(sp)
10009298:	8c3f110e 	bge	r17,r16,10008ee0 <__alt_data_end+0xf8008ee0>
1000929c:	01440074 	movhi	r5,4097
100092a0:	295f4884 	addi	r5,r5,32034
100092a4:	d9412c15 	stw	r5,1200(sp)
100092a8:	04c001c4 	movi	r19,7
100092ac:	00000306 	br	100092bc <___vfprintf_internal_r+0x1568>
100092b0:	42000204 	addi	r8,r8,8
100092b4:	843ffc04 	addi	r16,r16,-16
100092b8:	8c3f0c0e 	bge	r17,r16,10008eec <__alt_data_end+0xf8008eec>
100092bc:	18c00404 	addi	r3,r3,16
100092c0:	10800044 	addi	r2,r2,1
100092c4:	45000015 	stw	r20,0(r8)
100092c8:	44400115 	stw	r17,4(r8)
100092cc:	d8c12015 	stw	r3,1152(sp)
100092d0:	d8811f15 	stw	r2,1148(sp)
100092d4:	98bff60e 	bge	r19,r2,100092b0 <__alt_data_end+0xf80092b0>
100092d8:	b809883a 	mov	r4,r23
100092dc:	b00b883a 	mov	r5,r22
100092e0:	d9811e04 	addi	r6,sp,1144
100092e4:	000f05c0 	call	1000f05c <__sprint_r>
100092e8:	103bb21e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
100092ec:	d8c12017 	ldw	r3,1152(sp)
100092f0:	d8811f17 	ldw	r2,1148(sp)
100092f4:	da000404 	addi	r8,sp,16
100092f8:	003fee06 	br	100092b4 <__alt_data_end+0xf80092b4>
100092fc:	e088703a 	and	r4,fp,r2
10009300:	203ec01e 	bne	r4,zero,10008e04 <__alt_data_end+0xf8008e04>
10009304:	dc011f17 	ldw	r16,1148(sp)
10009308:	d9013117 	ldw	r4,1220(sp)
1000930c:	40800115 	stw	r2,4(r8)
10009310:	84000044 	addi	r16,r16,1
10009314:	41000015 	stw	r4,0(r8)
10009318:	d8c12015 	stw	r3,1152(sp)
1000931c:	dc011f15 	stw	r16,1148(sp)
10009320:	008001c4 	movi	r2,7
10009324:	14000e16 	blt	r2,r16,10009360 <___vfprintf_internal_r+0x160c>
10009328:	44400204 	addi	r17,r8,8
1000932c:	003ee006 	br	10008eb0 <__alt_data_end+0xf8008eb0>
10009330:	01040074 	movhi	r4,4097
10009334:	211f4884 	addi	r4,r4,32034
10009338:	d9012c15 	stw	r4,1200(sp)
1000933c:	d8812c17 	ldw	r2,1200(sp)
10009340:	1cc7883a 	add	r3,r3,r19
10009344:	84000044 	addi	r16,r16,1
10009348:	88800015 	stw	r2,0(r17)
1000934c:	8cc00115 	stw	r19,4(r17)
10009350:	d8c12015 	stw	r3,1152(sp)
10009354:	dc011f15 	stw	r16,1148(sp)
10009358:	008001c4 	movi	r2,7
1000935c:	143ed30e 	bge	r2,r16,10008eac <__alt_data_end+0xf8008eac>
10009360:	b809883a 	mov	r4,r23
10009364:	b00b883a 	mov	r5,r22
10009368:	d9811e04 	addi	r6,sp,1144
1000936c:	000f05c0 	call	1000f05c <__sprint_r>
10009370:	103b901e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
10009374:	d8c12017 	ldw	r3,1152(sp)
10009378:	dc011f17 	ldw	r16,1148(sp)
1000937c:	dc400404 	addi	r17,sp,16
10009380:	003ecb06 	br	10008eb0 <__alt_data_end+0xf8008eb0>
10009384:	b809883a 	mov	r4,r23
10009388:	b00b883a 	mov	r5,r22
1000938c:	d9811e04 	addi	r6,sp,1144
10009390:	000f05c0 	call	1000f05c <__sprint_r>
10009394:	103b871e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
10009398:	d8c12017 	ldw	r3,1152(sp)
1000939c:	dc011f17 	ldw	r16,1148(sp)
100093a0:	da000404 	addi	r8,sp,16
100093a4:	003ea206 	br	10008e30 <__alt_data_end+0xf8008e30>
100093a8:	b809883a 	mov	r4,r23
100093ac:	b00b883a 	mov	r5,r22
100093b0:	d9811e04 	addi	r6,sp,1144
100093b4:	000f05c0 	call	1000f05c <__sprint_r>
100093b8:	103b7e1e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
100093bc:	d8c12017 	ldw	r3,1152(sp)
100093c0:	dc011f17 	ldw	r16,1148(sp)
100093c4:	dc400404 	addi	r17,sp,16
100093c8:	003ea406 	br	10008e5c <__alt_data_end+0xf8008e5c>
100093cc:	b809883a 	mov	r4,r23
100093d0:	b00b883a 	mov	r5,r22
100093d4:	d9811e04 	addi	r6,sp,1144
100093d8:	000f05c0 	call	1000f05c <__sprint_r>
100093dc:	103b751e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
100093e0:	d8c12017 	ldw	r3,1152(sp)
100093e4:	da000404 	addi	r8,sp,16
100093e8:	003c3706 	br	100084c8 <__alt_data_end+0xf80084c8>
100093ec:	04a5c83a 	sub	r18,zero,r18
100093f0:	9004c03a 	cmpne	r2,r18,zero
100093f4:	056bc83a 	sub	r21,zero,r21
100093f8:	a8abc83a 	sub	r21,r21,r2
100093fc:	04c00b44 	movi	r19,45
10009400:	dcc12785 	stb	r19,1182(sp)
10009404:	da413215 	stw	r9,1224(sp)
10009408:	00800044 	movi	r2,1
1000940c:	9546b03a 	or	r3,r18,r21
10009410:	003bb106 	br	100082d8 <__alt_data_end+0xf80082d8>
10009414:	da013f15 	stw	r8,1276(sp)
10009418:	da413e15 	stw	r9,1272(sp)
1000941c:	000ecb80 	call	1000ecb8 <__fpclassifyd>
10009420:	da013f17 	ldw	r8,1276(sp)
10009424:	da413e17 	ldw	r9,1272(sp)
10009428:	1000e526 	beq	r2,zero,100097c0 <___vfprintf_internal_r+0x1a6c>
1000942c:	04fff7c4 	movi	r19,-33
10009430:	00bfffc4 	movi	r2,-1
10009434:	84e6703a 	and	r19,r16,r19
10009438:	48822926 	beq	r9,r2,10009ce0 <___vfprintf_internal_r+0x1f8c>
1000943c:	008011c4 	movi	r2,71
10009440:	98821626 	beq	r19,r2,10009c9c <___vfprintf_internal_r+0x1f48>
10009444:	d9013917 	ldw	r4,1252(sp)
10009448:	e0c04014 	ori	r3,fp,256
1000944c:	d8c12d15 	stw	r3,1204(sp)
10009450:	20021f16 	blt	r4,zero,10009cd0 <___vfprintf_internal_r+0x1f7c>
10009454:	dc413917 	ldw	r17,1252(sp)
10009458:	d8012b05 	stb	zero,1196(sp)
1000945c:	00801984 	movi	r2,102
10009460:	80814d26 	beq	r16,r2,10009998 <___vfprintf_internal_r+0x1c44>
10009464:	00801184 	movi	r2,70
10009468:	80814b26 	beq	r16,r2,10009998 <___vfprintf_internal_r+0x1c44>
1000946c:	00801144 	movi	r2,69
10009470:	98821d26 	beq	r19,r2,10009ce8 <___vfprintf_internal_r+0x1f94>
10009474:	482b883a 	mov	r21,r9
10009478:	d8812604 	addi	r2,sp,1176
1000947c:	d8800115 	stw	r2,4(sp)
10009480:	d9413717 	ldw	r5,1244(sp)
10009484:	d8812504 	addi	r2,sp,1172
10009488:	d8800215 	stw	r2,8(sp)
1000948c:	d8812104 	addi	r2,sp,1156
10009490:	dd400015 	stw	r21,0(sp)
10009494:	d8800315 	stw	r2,12(sp)
10009498:	b809883a 	mov	r4,r23
1000949c:	880d883a 	mov	r6,r17
100094a0:	01c00084 	movi	r7,2
100094a4:	da013f15 	stw	r8,1276(sp)
100094a8:	da413e15 	stw	r9,1272(sp)
100094ac:	000a1cc0 	call	1000a1cc <_dtoa_r>
100094b0:	d8813115 	stw	r2,1220(sp)
100094b4:	008019c4 	movi	r2,103
100094b8:	da013f17 	ldw	r8,1276(sp)
100094bc:	da413e17 	ldw	r9,1272(sp)
100094c0:	80800226 	beq	r16,r2,100094cc <___vfprintf_internal_r+0x1778>
100094c4:	008011c4 	movi	r2,71
100094c8:	8081451e 	bne	r16,r2,100099e0 <___vfprintf_internal_r+0x1c8c>
100094cc:	e080004c 	andi	r2,fp,1
100094d0:	10021e26 	beq	r2,zero,10009d4c <___vfprintf_internal_r+0x1ff8>
100094d4:	d8c13117 	ldw	r3,1220(sp)
100094d8:	1d55883a 	add	r10,r3,r21
100094dc:	d9013717 	ldw	r4,1244(sp)
100094e0:	880b883a 	mov	r5,r17
100094e4:	000d883a 	mov	r6,zero
100094e8:	000f883a 	mov	r7,zero
100094ec:	da013f15 	stw	r8,1276(sp)
100094f0:	da413e15 	stw	r9,1272(sp)
100094f4:	da813d15 	stw	r10,1268(sp)
100094f8:	0012d8c0 	call	10012d8c <__eqdf2>
100094fc:	da013f17 	ldw	r8,1276(sp)
10009500:	da413e17 	ldw	r9,1272(sp)
10009504:	da813d17 	ldw	r10,1268(sp)
10009508:	1001a126 	beq	r2,zero,10009b90 <___vfprintf_internal_r+0x1e3c>
1000950c:	d8812117 	ldw	r2,1156(sp)
10009510:	1280062e 	bgeu	r2,r10,1000952c <___vfprintf_internal_r+0x17d8>
10009514:	01000c04 	movi	r4,48
10009518:	10c00044 	addi	r3,r2,1
1000951c:	d8c12115 	stw	r3,1156(sp)
10009520:	11000005 	stb	r4,0(r2)
10009524:	d8812117 	ldw	r2,1156(sp)
10009528:	12bffb36 	bltu	r2,r10,10009518 <__alt_data_end+0xf8009518>
1000952c:	d8c13117 	ldw	r3,1220(sp)
10009530:	10c5c83a 	sub	r2,r2,r3
10009534:	d8813315 	stw	r2,1228(sp)
10009538:	008011c4 	movi	r2,71
1000953c:	98818926 	beq	r19,r2,10009b64 <___vfprintf_internal_r+0x1e10>
10009540:	00801944 	movi	r2,101
10009544:	14023c0e 	bge	r2,r16,10009e38 <___vfprintf_internal_r+0x20e4>
10009548:	d8c12617 	ldw	r3,1176(sp)
1000954c:	00801984 	movi	r2,102
10009550:	d8c13415 	stw	r3,1232(sp)
10009554:	8081ef26 	beq	r16,r2,10009d14 <___vfprintf_internal_r+0x1fc0>
10009558:	d8c13417 	ldw	r3,1232(sp)
1000955c:	d9013317 	ldw	r4,1228(sp)
10009560:	1901e316 	blt	r3,r4,10009cf0 <___vfprintf_internal_r+0x1f9c>
10009564:	e080004c 	andi	r2,fp,1
10009568:	1001f426 	beq	r2,zero,10009d3c <___vfprintf_internal_r+0x1fe8>
1000956c:	d8c13417 	ldw	r3,1232(sp)
10009570:	1c400044 	addi	r17,r3,1
10009574:	8839883a 	mov	fp,r17
10009578:	8801e416 	blt	r17,zero,10009d0c <___vfprintf_internal_r+0x1fb8>
1000957c:	dd412b07 	ldb	r21,1196(sp)
10009580:	a801701e 	bne	r21,zero,10009b44 <___vfprintf_internal_r+0x1df0>
10009584:	df012b15 	stw	fp,1196(sp)
10009588:	dcc12783 	ldbu	r19,1182(sp)
1000958c:	df012d17 	ldw	fp,1204(sp)
10009590:	d8013215 	stw	zero,1224(sp)
10009594:	dc812d15 	stw	r18,1204(sp)
10009598:	003b6e06 	br	10008354 <__alt_data_end+0xf8008354>
1000959c:	e080040c 	andi	r2,fp,16
100095a0:	1000b51e 	bne	r2,zero,10009878 <___vfprintf_internal_r+0x1b24>
100095a4:	e080100c 	andi	r2,fp,64
100095a8:	10015b26 	beq	r2,zero,10009b18 <___vfprintf_internal_r+0x1dc4>
100095ac:	d9012d17 	ldw	r4,1204(sp)
100095b0:	d9412f17 	ldw	r5,1212(sp)
100095b4:	20800017 	ldw	r2,0(r4)
100095b8:	21000104 	addi	r4,r4,4
100095bc:	d9012d15 	stw	r4,1204(sp)
100095c0:	1140000d 	sth	r5,0(r2)
100095c4:	003a2006 	br	10007e48 <__alt_data_end+0xf8007e48>
100095c8:	e0c0100c 	andi	r3,fp,64
100095cc:	1800a226 	beq	r3,zero,10009858 <___vfprintf_internal_r+0x1b04>
100095d0:	d8c12d17 	ldw	r3,1204(sp)
100095d4:	1480000b 	ldhu	r18,0(r2)
100095d8:	002b883a 	mov	r21,zero
100095dc:	18c00104 	addi	r3,r3,4
100095e0:	d8c12d15 	stw	r3,1204(sp)
100095e4:	0005883a 	mov	r2,zero
100095e8:	9007883a 	mov	r3,r18
100095ec:	003c6906 	br	10008794 <__alt_data_end+0xf8008794>
100095f0:	e0c0100c 	andi	r3,fp,64
100095f4:	18009026 	beq	r3,zero,10009838 <___vfprintf_internal_r+0x1ae4>
100095f8:	1480000b 	ldhu	r18,0(r2)
100095fc:	d8812d17 	ldw	r2,1204(sp)
10009600:	002b883a 	mov	r21,zero
10009604:	9007883a 	mov	r3,r18
10009608:	10800104 	addi	r2,r2,4
1000960c:	d8812d15 	stw	r2,1204(sp)
10009610:	00800044 	movi	r2,1
10009614:	003c5f06 	br	10008794 <__alt_data_end+0xf8008794>
10009618:	e0c0100c 	andi	r3,fp,64
1000961c:	18008026 	beq	r3,zero,10009820 <___vfprintf_internal_r+0x1acc>
10009620:	d9012d17 	ldw	r4,1204(sp)
10009624:	1480000b 	ldhu	r18,0(r2)
10009628:	002b883a 	mov	r21,zero
1000962c:	21000104 	addi	r4,r4,4
10009630:	d9012d15 	stw	r4,1204(sp)
10009634:	003c7906 	br	1000881c <__alt_data_end+0xf800881c>
10009638:	e080100c 	andi	r2,fp,64
1000963c:	10007126 	beq	r2,zero,10009804 <___vfprintf_internal_r+0x1ab0>
10009640:	1c80000f 	ldh	r18,0(r3)
10009644:	d8812d17 	ldw	r2,1204(sp)
10009648:	902bd7fa 	srai	r21,r18,31
1000964c:	10800104 	addi	r2,r2,4
10009650:	d8812d15 	stw	r2,1204(sp)
10009654:	a805883a 	mov	r2,r21
10009658:	003b1a06 	br	100082c4 <__alt_data_end+0xf80082c4>
1000965c:	e4000007 	ldb	r16,0(fp)
10009660:	e005883a 	mov	r2,fp
10009664:	003a2306 	br	10007ef4 <__alt_data_end+0xf8007ef4>
10009668:	00800084 	movi	r2,2
1000966c:	003c4906 	br	10008794 <__alt_data_end+0xf8008794>
10009670:	01040074 	movhi	r4,4097
10009674:	211f4884 	addi	r4,r4,32034
10009678:	d9012c15 	stw	r4,1200(sp)
1000967c:	d9012c17 	ldw	r4,1200(sp)
10009680:	1c47883a 	add	r3,r3,r17
10009684:	10800044 	addi	r2,r2,1
10009688:	41000015 	stw	r4,0(r8)
1000968c:	44400115 	stw	r17,4(r8)
10009690:	d8c12015 	stw	r3,1152(sp)
10009694:	d8811f15 	stw	r2,1148(sp)
10009698:	010001c4 	movi	r4,7
1000969c:	20becc16 	blt	r4,r2,100091d0 <__alt_data_end+0xf80091d0>
100096a0:	42000204 	addi	r8,r8,8
100096a4:	003ed106 	br	100091ec <__alt_data_end+0xf80091ec>
100096a8:	01040074 	movhi	r4,4097
100096ac:	211f4884 	addi	r4,r4,32034
100096b0:	d9012c15 	stw	r4,1200(sp)
100096b4:	003ba306 	br	10008544 <__alt_data_end+0xf8008544>
100096b8:	b809883a 	mov	r4,r23
100096bc:	b00b883a 	mov	r5,r22
100096c0:	d9811e04 	addi	r6,sp,1144
100096c4:	000f05c0 	call	1000f05c <__sprint_r>
100096c8:	103aba1e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
100096cc:	d8c12017 	ldw	r3,1152(sp)
100096d0:	da000404 	addi	r8,sp,16
100096d4:	003d6c06 	br	10008c88 <__alt_data_end+0xf8008c88>
100096d8:	d8811f17 	ldw	r2,1148(sp)
100096dc:	01440074 	movhi	r5,4097
100096e0:	01000044 	movi	r4,1
100096e4:	18c00044 	addi	r3,r3,1
100096e8:	10800044 	addi	r2,r2,1
100096ec:	295f4804 	addi	r5,r5,32032
100096f0:	41000115 	stw	r4,4(r8)
100096f4:	41400015 	stw	r5,0(r8)
100096f8:	d8c12015 	stw	r3,1152(sp)
100096fc:	d8811f15 	stw	r2,1148(sp)
10009700:	010001c4 	movi	r4,7
10009704:	20806716 	blt	r4,r2,100098a4 <___vfprintf_internal_r+0x1b50>
10009708:	42000204 	addi	r8,r8,8
1000970c:	8000041e 	bne	r16,zero,10009720 <___vfprintf_internal_r+0x19cc>
10009710:	d8813317 	ldw	r2,1228(sp)
10009714:	1000021e 	bne	r2,zero,10009720 <___vfprintf_internal_r+0x19cc>
10009718:	e080004c 	andi	r2,fp,1
1000971c:	103ba026 	beq	r2,zero,100085a0 <__alt_data_end+0xf80085a0>
10009720:	d9013817 	ldw	r4,1248(sp)
10009724:	d8811f17 	ldw	r2,1148(sp)
10009728:	d9413517 	ldw	r5,1236(sp)
1000972c:	1907883a 	add	r3,r3,r4
10009730:	10800044 	addi	r2,r2,1
10009734:	41000115 	stw	r4,4(r8)
10009738:	41400015 	stw	r5,0(r8)
1000973c:	d8c12015 	stw	r3,1152(sp)
10009740:	d8811f15 	stw	r2,1148(sp)
10009744:	010001c4 	movi	r4,7
10009748:	20815716 	blt	r4,r2,10009ca8 <___vfprintf_internal_r+0x1f54>
1000974c:	42000204 	addi	r8,r8,8
10009750:	0421c83a 	sub	r16,zero,r16
10009754:	0400810e 	bge	zero,r16,1000995c <___vfprintf_internal_r+0x1c08>
10009758:	04400404 	movi	r17,16
1000975c:	8c00bd0e 	bge	r17,r16,10009a54 <___vfprintf_internal_r+0x1d00>
10009760:	01440074 	movhi	r5,4097
10009764:	295f4884 	addi	r5,r5,32034
10009768:	d9412c15 	stw	r5,1200(sp)
1000976c:	04c001c4 	movi	r19,7
10009770:	00000306 	br	10009780 <___vfprintf_internal_r+0x1a2c>
10009774:	42000204 	addi	r8,r8,8
10009778:	843ffc04 	addi	r16,r16,-16
1000977c:	8c00b80e 	bge	r17,r16,10009a60 <___vfprintf_internal_r+0x1d0c>
10009780:	18c00404 	addi	r3,r3,16
10009784:	10800044 	addi	r2,r2,1
10009788:	45000015 	stw	r20,0(r8)
1000978c:	44400115 	stw	r17,4(r8)
10009790:	d8c12015 	stw	r3,1152(sp)
10009794:	d8811f15 	stw	r2,1148(sp)
10009798:	98bff60e 	bge	r19,r2,10009774 <__alt_data_end+0xf8009774>
1000979c:	b809883a 	mov	r4,r23
100097a0:	b00b883a 	mov	r5,r22
100097a4:	d9811e04 	addi	r6,sp,1144
100097a8:	000f05c0 	call	1000f05c <__sprint_r>
100097ac:	103a811e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
100097b0:	d8c12017 	ldw	r3,1152(sp)
100097b4:	d8811f17 	ldw	r2,1148(sp)
100097b8:	da000404 	addi	r8,sp,16
100097bc:	003fee06 	br	10009778 <__alt_data_end+0xf8009778>
100097c0:	008011c4 	movi	r2,71
100097c4:	1400db16 	blt	r2,r16,10009b34 <___vfprintf_internal_r+0x1de0>
100097c8:	01040074 	movhi	r4,4097
100097cc:	211f3a04 	addi	r4,r4,31976
100097d0:	d9013115 	stw	r4,1220(sp)
100097d4:	00c000c4 	movi	r3,3
100097d8:	00bfdfc4 	movi	r2,-129
100097dc:	d8c12b15 	stw	r3,1196(sp)
100097e0:	e0b8703a 	and	fp,fp,r2
100097e4:	dcc12783 	ldbu	r19,1182(sp)
100097e8:	dc812d15 	stw	r18,1204(sp)
100097ec:	1823883a 	mov	r17,r3
100097f0:	d8013215 	stw	zero,1224(sp)
100097f4:	d8013415 	stw	zero,1232(sp)
100097f8:	003ad606 	br	10008354 <__alt_data_end+0xf8008354>
100097fc:	4823883a 	mov	r17,r9
10009800:	003cc906 	br	10008b28 <__alt_data_end+0xf8008b28>
10009804:	1c800017 	ldw	r18,0(r3)
10009808:	d8c12d17 	ldw	r3,1204(sp)
1000980c:	902bd7fa 	srai	r21,r18,31
10009810:	18c00104 	addi	r3,r3,4
10009814:	d8c12d15 	stw	r3,1204(sp)
10009818:	a805883a 	mov	r2,r21
1000981c:	003aa906 	br	100082c4 <__alt_data_end+0xf80082c4>
10009820:	d9412d17 	ldw	r5,1204(sp)
10009824:	14800017 	ldw	r18,0(r2)
10009828:	002b883a 	mov	r21,zero
1000982c:	29400104 	addi	r5,r5,4
10009830:	d9412d15 	stw	r5,1204(sp)
10009834:	003bf906 	br	1000881c <__alt_data_end+0xf800881c>
10009838:	d8c12d17 	ldw	r3,1204(sp)
1000983c:	14800017 	ldw	r18,0(r2)
10009840:	002b883a 	mov	r21,zero
10009844:	18c00104 	addi	r3,r3,4
10009848:	d8c12d15 	stw	r3,1204(sp)
1000984c:	00800044 	movi	r2,1
10009850:	9007883a 	mov	r3,r18
10009854:	003bcf06 	br	10008794 <__alt_data_end+0xf8008794>
10009858:	d9012d17 	ldw	r4,1204(sp)
1000985c:	14800017 	ldw	r18,0(r2)
10009860:	002b883a 	mov	r21,zero
10009864:	21000104 	addi	r4,r4,4
10009868:	d9012d15 	stw	r4,1204(sp)
1000986c:	0005883a 	mov	r2,zero
10009870:	9007883a 	mov	r3,r18
10009874:	003bc706 	br	10008794 <__alt_data_end+0xf8008794>
10009878:	d9412d17 	ldw	r5,1204(sp)
1000987c:	d8c12f17 	ldw	r3,1212(sp)
10009880:	28800017 	ldw	r2,0(r5)
10009884:	29400104 	addi	r5,r5,4
10009888:	d9412d15 	stw	r5,1204(sp)
1000988c:	10c00015 	stw	r3,0(r2)
10009890:	00396d06 	br	10007e48 <__alt_data_end+0xf8007e48>
10009894:	01040074 	movhi	r4,4097
10009898:	211f3804 	addi	r4,r4,31968
1000989c:	d9013115 	stw	r4,1220(sp)
100098a0:	003ba206 	br	1000872c <__alt_data_end+0xf800872c>
100098a4:	b809883a 	mov	r4,r23
100098a8:	b00b883a 	mov	r5,r22
100098ac:	d9811e04 	addi	r6,sp,1144
100098b0:	000f05c0 	call	1000f05c <__sprint_r>
100098b4:	103a3f1e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
100098b8:	dc012617 	ldw	r16,1176(sp)
100098bc:	d8c12017 	ldw	r3,1152(sp)
100098c0:	da000404 	addi	r8,sp,16
100098c4:	003f9106 	br	1000970c <__alt_data_end+0xf800970c>
100098c8:	e0800044 	addi	r2,fp,1
100098cc:	9cc00814 	ori	r19,r19,32
100098d0:	e4000047 	ldb	r16,1(fp)
100098d4:	00398706 	br	10007ef4 <__alt_data_end+0xf8007ef4>
100098d8:	d8812e17 	ldw	r2,1208(sp)
100098dc:	d8c12d15 	stw	r3,1204(sp)
100098e0:	0085c83a 	sub	r2,zero,r2
100098e4:	d8812e15 	stw	r2,1208(sp)
100098e8:	e005883a 	mov	r2,fp
100098ec:	003a3a06 	br	100081d8 <__alt_data_end+0xf80081d8>
100098f0:	b809883a 	mov	r4,r23
100098f4:	b00b883a 	mov	r5,r22
100098f8:	d9811e04 	addi	r6,sp,1144
100098fc:	000f05c0 	call	1000f05c <__sprint_r>
10009900:	103a2c1e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
10009904:	d8c12017 	ldw	r3,1152(sp)
10009908:	da000404 	addi	r8,sp,16
1000990c:	003cf006 	br	10008cd0 <__alt_data_end+0xf8008cd0>
10009910:	d8c12817 	ldw	r3,1184(sp)
10009914:	d9013117 	ldw	r4,1220(sp)
10009918:	1923c83a 	sub	r17,r3,r4
1000991c:	003a8806 	br	10008340 <__alt_data_end+0xf8008340>
10009920:	da013f15 	stw	r8,1276(sp)
10009924:	0007cbc0 	call	10007cbc <strlen>
10009928:	1023883a 	mov	r17,r2
1000992c:	da013f17 	ldw	r8,1276(sp)
10009930:	883c7f0e 	bge	r17,zero,10008b30 <__alt_data_end+0xf8008b30>
10009934:	0005883a 	mov	r2,zero
10009938:	003c7d06 	br	10008b30 <__alt_data_end+0xf8008b30>
1000993c:	b809883a 	mov	r4,r23
10009940:	b00b883a 	mov	r5,r22
10009944:	d9811e04 	addi	r6,sp,1144
10009948:	000f05c0 	call	1000f05c <__sprint_r>
1000994c:	103a191e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
10009950:	d8c12017 	ldw	r3,1152(sp)
10009954:	d8811f17 	ldw	r2,1148(sp)
10009958:	da000404 	addi	r8,sp,16
1000995c:	d9413317 	ldw	r5,1228(sp)
10009960:	d9013117 	ldw	r4,1220(sp)
10009964:	10800044 	addi	r2,r2,1
10009968:	28c7883a 	add	r3,r5,r3
1000996c:	41000015 	stw	r4,0(r8)
10009970:	41400115 	stw	r5,4(r8)
10009974:	d8c12015 	stw	r3,1152(sp)
10009978:	d8811f15 	stw	r2,1148(sp)
1000997c:	010001c4 	movi	r4,7
10009980:	20bb060e 	bge	r4,r2,1000859c <__alt_data_end+0xf800859c>
10009984:	003d6206 	br	10008f10 <__alt_data_end+0xf8008f10>
10009988:	01040074 	movhi	r4,4097
1000998c:	211f4c84 	addi	r4,r4,32050
10009990:	d9013615 	stw	r4,1240(sp)
10009994:	003aa306 	br	10008424 <__alt_data_end+0xf8008424>
10009998:	d8812604 	addi	r2,sp,1176
1000999c:	d8800115 	stw	r2,4(sp)
100099a0:	d9413717 	ldw	r5,1244(sp)
100099a4:	d8812504 	addi	r2,sp,1172
100099a8:	d8800215 	stw	r2,8(sp)
100099ac:	d8812104 	addi	r2,sp,1156
100099b0:	da400015 	stw	r9,0(sp)
100099b4:	d8800315 	stw	r2,12(sp)
100099b8:	b809883a 	mov	r4,r23
100099bc:	880d883a 	mov	r6,r17
100099c0:	01c000c4 	movi	r7,3
100099c4:	da013f15 	stw	r8,1276(sp)
100099c8:	da413e15 	stw	r9,1272(sp)
100099cc:	000a1cc0 	call	1000a1cc <_dtoa_r>
100099d0:	da413e17 	ldw	r9,1272(sp)
100099d4:	da013f17 	ldw	r8,1276(sp)
100099d8:	d8813115 	stw	r2,1220(sp)
100099dc:	482b883a 	mov	r21,r9
100099e0:	d8c13117 	ldw	r3,1220(sp)
100099e4:	00801184 	movi	r2,70
100099e8:	1d55883a 	add	r10,r3,r21
100099ec:	98bebb1e 	bne	r19,r2,100094dc <__alt_data_end+0xf80094dc>
100099f0:	19000007 	ldb	r4,0(r3)
100099f4:	00800c04 	movi	r2,48
100099f8:	2080dd26 	beq	r4,r2,10009d70 <___vfprintf_internal_r+0x201c>
100099fc:	d8c12617 	ldw	r3,1176(sp)
10009a00:	50d5883a 	add	r10,r10,r3
10009a04:	003eb506 	br	100094dc <__alt_data_end+0xf80094dc>
10009a08:	0023883a 	mov	r17,zero
10009a0c:	003d9b06 	br	1000907c <__alt_data_end+0xf800907c>
10009a10:	b809883a 	mov	r4,r23
10009a14:	b00b883a 	mov	r5,r22
10009a18:	d9811e04 	addi	r6,sp,1144
10009a1c:	000f05c0 	call	1000f05c <__sprint_r>
10009a20:	1039e41e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
10009a24:	d8c12017 	ldw	r3,1152(sp)
10009a28:	da000404 	addi	r8,sp,16
10009a2c:	003d9206 	br	10009078 <__alt_data_end+0xf8009078>
10009a30:	b809883a 	mov	r4,r23
10009a34:	b00b883a 	mov	r5,r22
10009a38:	d9811e04 	addi	r6,sp,1144
10009a3c:	000f05c0 	call	1000f05c <__sprint_r>
10009a40:	1039dc1e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
10009a44:	d8812617 	ldw	r2,1176(sp)
10009a48:	d8c12017 	ldw	r3,1152(sp)
10009a4c:	da000404 	addi	r8,sp,16
10009a50:	003dfb06 	br	10009240 <__alt_data_end+0xf8009240>
10009a54:	01040074 	movhi	r4,4097
10009a58:	211f4884 	addi	r4,r4,32034
10009a5c:	d9012c15 	stw	r4,1200(sp)
10009a60:	d9012c17 	ldw	r4,1200(sp)
10009a64:	1c07883a 	add	r3,r3,r16
10009a68:	10800044 	addi	r2,r2,1
10009a6c:	41000015 	stw	r4,0(r8)
10009a70:	44000115 	stw	r16,4(r8)
10009a74:	d8c12015 	stw	r3,1152(sp)
10009a78:	d8811f15 	stw	r2,1148(sp)
10009a7c:	010001c4 	movi	r4,7
10009a80:	20bfae16 	blt	r4,r2,1000993c <__alt_data_end+0xf800993c>
10009a84:	42000204 	addi	r8,r8,8
10009a88:	003fb406 	br	1000995c <__alt_data_end+0xf800995c>
10009a8c:	0021883a 	mov	r16,zero
10009a90:	003dfd06 	br	10009288 <__alt_data_end+0xf8009288>
10009a94:	01440074 	movhi	r5,4097
10009a98:	295f4c84 	addi	r5,r5,32050
10009a9c:	d9413615 	stw	r5,1240(sp)
10009aa0:	003ae306 	br	10008630 <__alt_data_end+0xf8008630>
10009aa4:	b809883a 	mov	r4,r23
10009aa8:	b00b883a 	mov	r5,r22
10009aac:	d9811e04 	addi	r6,sp,1144
10009ab0:	000f05c0 	call	1000f05c <__sprint_r>
10009ab4:	1039bf1e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
10009ab8:	d8812617 	ldw	r2,1176(sp)
10009abc:	d9413317 	ldw	r5,1228(sp)
10009ac0:	d8c12017 	ldw	r3,1152(sp)
10009ac4:	da000404 	addi	r8,sp,16
10009ac8:	2885c83a 	sub	r2,r5,r2
10009acc:	003ded06 	br	10009284 <__alt_data_end+0xf8009284>
10009ad0:	00800184 	movi	r2,6
10009ad4:	1240012e 	bgeu	r2,r9,10009adc <___vfprintf_internal_r+0x1d88>
10009ad8:	1013883a 	mov	r9,r2
10009adc:	4823883a 	mov	r17,r9
10009ae0:	4805883a 	mov	r2,r9
10009ae4:	4800b216 	blt	r9,zero,10009db0 <___vfprintf_internal_r+0x205c>
10009ae8:	01440074 	movhi	r5,4097
10009aec:	295f4604 	addi	r5,r5,32024
10009af0:	d8812b15 	stw	r2,1196(sp)
10009af4:	dc812d15 	stw	r18,1204(sp)
10009af8:	d8013215 	stw	zero,1224(sp)
10009afc:	d8013415 	stw	zero,1232(sp)
10009b00:	d9413115 	stw	r5,1220(sp)
10009b04:	0005883a 	mov	r2,zero
10009b08:	003a1906 	br	10008370 <__alt_data_end+0xf8008370>
10009b0c:	04c00b44 	movi	r19,45
10009b10:	dcc12785 	stb	r19,1182(sp)
10009b14:	003b0006 	br	10008718 <__alt_data_end+0xf8008718>
10009b18:	d8c12d17 	ldw	r3,1204(sp)
10009b1c:	d9012f17 	ldw	r4,1212(sp)
10009b20:	18800017 	ldw	r2,0(r3)
10009b24:	18c00104 	addi	r3,r3,4
10009b28:	d8c12d15 	stw	r3,1204(sp)
10009b2c:	11000015 	stw	r4,0(r2)
10009b30:	0038c506 	br	10007e48 <__alt_data_end+0xf8007e48>
10009b34:	01440074 	movhi	r5,4097
10009b38:	295f3b04 	addi	r5,r5,31980
10009b3c:	d9413115 	stw	r5,1220(sp)
10009b40:	003f2406 	br	100097d4 <__alt_data_end+0xf80097d4>
10009b44:	00800b44 	movi	r2,45
10009b48:	d8812785 	stb	r2,1182(sp)
10009b4c:	df012b15 	stw	fp,1196(sp)
10009b50:	d8013215 	stw	zero,1224(sp)
10009b54:	df012d17 	ldw	fp,1204(sp)
10009b58:	00800b44 	movi	r2,45
10009b5c:	dc812d15 	stw	r18,1204(sp)
10009b60:	003a0006 	br	10008364 <__alt_data_end+0xf8008364>
10009b64:	d8c12617 	ldw	r3,1176(sp)
10009b68:	00bfff44 	movi	r2,-3
10009b6c:	18800a16 	blt	r3,r2,10009b98 <___vfprintf_internal_r+0x1e44>
10009b70:	48c00916 	blt	r9,r3,10009b98 <___vfprintf_internal_r+0x1e44>
10009b74:	d8c13415 	stw	r3,1232(sp)
10009b78:	040019c4 	movi	r16,103
10009b7c:	003e7606 	br	10009558 <__alt_data_end+0xf8009558>
10009b80:	01040074 	movhi	r4,4097
10009b84:	211f4884 	addi	r4,r4,32034
10009b88:	d9012c15 	stw	r4,1200(sp)
10009b8c:	003c8e06 	br	10008dc8 <__alt_data_end+0xf8008dc8>
10009b90:	5005883a 	mov	r2,r10
10009b94:	003e6506 	br	1000952c <__alt_data_end+0xf800952c>
10009b98:	843fff84 	addi	r16,r16,-2
10009b9c:	1d7fffc4 	addi	r21,r3,-1
10009ba0:	dd412615 	stw	r21,1176(sp)
10009ba4:	dc0122c5 	stb	r16,1163(sp)
10009ba8:	a8009216 	blt	r21,zero,10009df4 <___vfprintf_internal_r+0x20a0>
10009bac:	00800ac4 	movi	r2,43
10009bb0:	d8812305 	stb	r2,1164(sp)
10009bb4:	00800244 	movi	r2,9
10009bb8:	1540660e 	bge	r2,r21,10009d54 <___vfprintf_internal_r+0x2000>
10009bbc:	dcc122c4 	addi	r19,sp,1163
10009bc0:	dc012c15 	stw	r16,1200(sp)
10009bc4:	4023883a 	mov	r17,r8
10009bc8:	9821883a 	mov	r16,r19
10009bcc:	a809883a 	mov	r4,r21
10009bd0:	01400284 	movi	r5,10
10009bd4:	00058000 	call	10005800 <__modsi3>
10009bd8:	10800c04 	addi	r2,r2,48
10009bdc:	843fffc4 	addi	r16,r16,-1
10009be0:	a809883a 	mov	r4,r21
10009be4:	01400284 	movi	r5,10
10009be8:	80800005 	stb	r2,0(r16)
10009bec:	00057ac0 	call	100057ac <__divsi3>
10009bf0:	01000244 	movi	r4,9
10009bf4:	102b883a 	mov	r21,r2
10009bf8:	20bff416 	blt	r4,r2,10009bcc <__alt_data_end+0xf8009bcc>
10009bfc:	8811883a 	mov	r8,r17
10009c00:	10800c04 	addi	r2,r2,48
10009c04:	8023883a 	mov	r17,r16
10009c08:	897fffc4 	addi	r5,r17,-1
10009c0c:	88bfffc5 	stb	r2,-1(r17)
10009c10:	dc012c17 	ldw	r16,1200(sp)
10009c14:	2cc08a2e 	bgeu	r5,r19,10009e40 <___vfprintf_internal_r+0x20ec>
10009c18:	d9812384 	addi	r6,sp,1166
10009c1c:	344dc83a 	sub	r6,r6,r17
10009c20:	d9012344 	addi	r4,sp,1165
10009c24:	998d883a 	add	r6,r19,r6
10009c28:	00000106 	br	10009c30 <___vfprintf_internal_r+0x1edc>
10009c2c:	28800003 	ldbu	r2,0(r5)
10009c30:	20800005 	stb	r2,0(r4)
10009c34:	21000044 	addi	r4,r4,1
10009c38:	29400044 	addi	r5,r5,1
10009c3c:	21bffb1e 	bne	r4,r6,10009c2c <__alt_data_end+0xf8009c2c>
10009c40:	d8812304 	addi	r2,sp,1164
10009c44:	1445c83a 	sub	r2,r2,r17
10009c48:	d9412344 	addi	r5,sp,1165
10009c4c:	2885883a 	add	r2,r5,r2
10009c50:	14e7c83a 	sub	r19,r2,r19
10009c54:	d8813317 	ldw	r2,1228(sp)
10009c58:	d8c13317 	ldw	r3,1228(sp)
10009c5c:	dcc13a15 	stw	r19,1256(sp)
10009c60:	14e3883a 	add	r17,r2,r19
10009c64:	00800044 	movi	r2,1
10009c68:	10c0550e 	bge	r2,r3,10009dc0 <___vfprintf_internal_r+0x206c>
10009c6c:	8c400044 	addi	r17,r17,1
10009c70:	8839883a 	mov	fp,r17
10009c74:	88005016 	blt	r17,zero,10009db8 <___vfprintf_internal_r+0x2064>
10009c78:	d8013415 	stw	zero,1232(sp)
10009c7c:	003e3f06 	br	1000957c <__alt_data_end+0xf800957c>
10009c80:	da412b15 	stw	r9,1196(sp)
10009c84:	dcc12783 	ldbu	r19,1182(sp)
10009c88:	4823883a 	mov	r17,r9
10009c8c:	dc812d15 	stw	r18,1204(sp)
10009c90:	d8013215 	stw	zero,1224(sp)
10009c94:	d8013415 	stw	zero,1232(sp)
10009c98:	0039ae06 	br	10008354 <__alt_data_end+0xf8008354>
10009c9c:	483de91e 	bne	r9,zero,10009444 <__alt_data_end+0xf8009444>
10009ca0:	8813883a 	mov	r9,r17
10009ca4:	003de706 	br	10009444 <__alt_data_end+0xf8009444>
10009ca8:	b809883a 	mov	r4,r23
10009cac:	b00b883a 	mov	r5,r22
10009cb0:	d9811e04 	addi	r6,sp,1144
10009cb4:	000f05c0 	call	1000f05c <__sprint_r>
10009cb8:	10393e1e 	bne	r2,zero,100081b4 <__alt_data_end+0xf80081b4>
10009cbc:	dc012617 	ldw	r16,1176(sp)
10009cc0:	d8c12017 	ldw	r3,1152(sp)
10009cc4:	d8811f17 	ldw	r2,1148(sp)
10009cc8:	da000404 	addi	r8,sp,16
10009ccc:	003ea006 	br	10009750 <__alt_data_end+0xf8009750>
10009cd0:	00c00b44 	movi	r3,45
10009cd4:	2460003c 	xorhi	r17,r4,32768
10009cd8:	d8c12b05 	stb	r3,1196(sp)
10009cdc:	003ddf06 	br	1000945c <__alt_data_end+0xf800945c>
10009ce0:	02400184 	movi	r9,6
10009ce4:	003dd706 	br	10009444 <__alt_data_end+0xf8009444>
10009ce8:	4d400044 	addi	r21,r9,1
10009cec:	003de206 	br	10009478 <__alt_data_end+0xf8009478>
10009cf0:	d8c13417 	ldw	r3,1232(sp)
10009cf4:	00c0490e 	bge	zero,r3,10009e1c <___vfprintf_internal_r+0x20c8>
10009cf8:	04400044 	movi	r17,1
10009cfc:	d9013317 	ldw	r4,1228(sp)
10009d00:	8923883a 	add	r17,r17,r4
10009d04:	8839883a 	mov	fp,r17
10009d08:	883e1c0e 	bge	r17,zero,1000957c <__alt_data_end+0xf800957c>
10009d0c:	0039883a 	mov	fp,zero
10009d10:	003e1a06 	br	1000957c <__alt_data_end+0xf800957c>
10009d14:	00c03b0e 	bge	zero,r3,10009e04 <___vfprintf_internal_r+0x20b0>
10009d18:	4800021e 	bne	r9,zero,10009d24 <___vfprintf_internal_r+0x1fd0>
10009d1c:	e080004c 	andi	r2,fp,1
10009d20:	10000626 	beq	r2,zero,10009d3c <___vfprintf_internal_r+0x1fe8>
10009d24:	d8c13417 	ldw	r3,1232(sp)
10009d28:	4a400044 	addi	r9,r9,1
10009d2c:	1a63883a 	add	r17,r3,r9
10009d30:	8839883a 	mov	fp,r17
10009d34:	883e110e 	bge	r17,zero,1000957c <__alt_data_end+0xf800957c>
10009d38:	003ff406 	br	10009d0c <__alt_data_end+0xf8009d0c>
10009d3c:	1839883a 	mov	fp,r3
10009d40:	18004116 	blt	r3,zero,10009e48 <___vfprintf_internal_r+0x20f4>
10009d44:	dc413417 	ldw	r17,1232(sp)
10009d48:	003e0c06 	br	1000957c <__alt_data_end+0xf800957c>
10009d4c:	d8812117 	ldw	r2,1156(sp)
10009d50:	003df606 	br	1000952c <__alt_data_end+0xf800952c>
10009d54:	00800c04 	movi	r2,48
10009d58:	a8c00c04 	addi	r3,r21,48
10009d5c:	d8812345 	stb	r2,1165(sp)
10009d60:	d8c12385 	stb	r3,1166(sp)
10009d64:	d88123c4 	addi	r2,sp,1167
10009d68:	dcc122c4 	addi	r19,sp,1163
10009d6c:	003fb806 	br	10009c50 <__alt_data_end+0xf8009c50>
10009d70:	d9013717 	ldw	r4,1244(sp)
10009d74:	880b883a 	mov	r5,r17
10009d78:	000d883a 	mov	r6,zero
10009d7c:	000f883a 	mov	r7,zero
10009d80:	da013f15 	stw	r8,1276(sp)
10009d84:	da413e15 	stw	r9,1272(sp)
10009d88:	da813d15 	stw	r10,1268(sp)
10009d8c:	0012d8c0 	call	10012d8c <__eqdf2>
10009d90:	da013f17 	ldw	r8,1276(sp)
10009d94:	da413e17 	ldw	r9,1272(sp)
10009d98:	da813d17 	ldw	r10,1268(sp)
10009d9c:	103f1726 	beq	r2,zero,100099fc <__alt_data_end+0xf80099fc>
10009da0:	00800044 	movi	r2,1
10009da4:	1547c83a 	sub	r3,r2,r21
10009da8:	d8c12615 	stw	r3,1176(sp)
10009dac:	003f1406 	br	10009a00 <__alt_data_end+0xf8009a00>
10009db0:	0005883a 	mov	r2,zero
10009db4:	003f4c06 	br	10009ae8 <__alt_data_end+0xf8009ae8>
10009db8:	0039883a 	mov	fp,zero
10009dbc:	003fae06 	br	10009c78 <__alt_data_end+0xf8009c78>
10009dc0:	e084703a 	and	r2,fp,r2
10009dc4:	103faa26 	beq	r2,zero,10009c70 <__alt_data_end+0xf8009c70>
10009dc8:	003fa806 	br	10009c6c <__alt_data_end+0xf8009c6c>
10009dcc:	d9412d17 	ldw	r5,1204(sp)
10009dd0:	2a400017 	ldw	r9,0(r5)
10009dd4:	28c00104 	addi	r3,r5,4
10009dd8:	d8c12d15 	stw	r3,1204(sp)
10009ddc:	483ebc0e 	bge	r9,zero,100098d0 <__alt_data_end+0xf80098d0>
10009de0:	027fffc4 	movi	r9,-1
10009de4:	e4000047 	ldb	r16,1(fp)
10009de8:	00384206 	br	10007ef4 <__alt_data_end+0xf8007ef4>
10009dec:	043fffc4 	movi	r16,-1
10009df0:	0038ce06 	br	1000812c <__alt_data_end+0xf800812c>
10009df4:	00800b44 	movi	r2,45
10009df8:	056bc83a 	sub	r21,zero,r21
10009dfc:	d8812305 	stb	r2,1164(sp)
10009e00:	003f6c06 	br	10009bb4 <__alt_data_end+0xf8009bb4>
10009e04:	4800081e 	bne	r9,zero,10009e28 <___vfprintf_internal_r+0x20d4>
10009e08:	e080004c 	andi	r2,fp,1
10009e0c:	1000061e 	bne	r2,zero,10009e28 <___vfprintf_internal_r+0x20d4>
10009e10:	07000044 	movi	fp,1
10009e14:	e023883a 	mov	r17,fp
10009e18:	003dd806 	br	1000957c <__alt_data_end+0xf800957c>
10009e1c:	04400084 	movi	r17,2
10009e20:	88e3c83a 	sub	r17,r17,r3
10009e24:	003fb506 	br	10009cfc <__alt_data_end+0xf8009cfc>
10009e28:	4c400084 	addi	r17,r9,2
10009e2c:	8839883a 	mov	fp,r17
10009e30:	883dd20e 	bge	r17,zero,1000957c <__alt_data_end+0xf800957c>
10009e34:	003fb506 	br	10009d0c <__alt_data_end+0xf8009d0c>
10009e38:	d8c12617 	ldw	r3,1176(sp)
10009e3c:	003f5706 	br	10009b9c <__alt_data_end+0xf8009b9c>
10009e40:	d8812344 	addi	r2,sp,1165
10009e44:	003f8206 	br	10009c50 <__alt_data_end+0xf8009c50>
10009e48:	0039883a 	mov	fp,zero
10009e4c:	003fbd06 	br	10009d44 <__alt_data_end+0xf8009d44>

10009e50 <__vfprintf_internal>:
10009e50:	2007883a 	mov	r3,r4
10009e54:	010400b4 	movhi	r4,4098
10009e58:	21266304 	addi	r4,r4,-26228
10009e5c:	21000017 	ldw	r4,0(r4)
10009e60:	2805883a 	mov	r2,r5
10009e64:	300f883a 	mov	r7,r6
10009e68:	180b883a 	mov	r5,r3
10009e6c:	100d883a 	mov	r6,r2
10009e70:	0007d541 	jmpi	10007d54 <___vfprintf_internal_r>

10009e74 <__swsetup_r>:
10009e74:	008400b4 	movhi	r2,4098
10009e78:	defffd04 	addi	sp,sp,-12
10009e7c:	10a66304 	addi	r2,r2,-26228
10009e80:	dc400115 	stw	r17,4(sp)
10009e84:	2023883a 	mov	r17,r4
10009e88:	11000017 	ldw	r4,0(r2)
10009e8c:	dc000015 	stw	r16,0(sp)
10009e90:	dfc00215 	stw	ra,8(sp)
10009e94:	2821883a 	mov	r16,r5
10009e98:	20000226 	beq	r4,zero,10009ea4 <__swsetup_r+0x30>
10009e9c:	20c00e17 	ldw	r3,56(r4)
10009ea0:	18002e26 	beq	r3,zero,10009f5c <__swsetup_r+0xe8>
10009ea4:	8080030b 	ldhu	r2,12(r16)
10009ea8:	10c0020c 	andi	r3,r2,8
10009eac:	100d883a 	mov	r6,r2
10009eb0:	18000f26 	beq	r3,zero,10009ef0 <__swsetup_r+0x7c>
10009eb4:	80c00417 	ldw	r3,16(r16)
10009eb8:	18001526 	beq	r3,zero,10009f10 <__swsetup_r+0x9c>
10009ebc:	1100004c 	andi	r4,r2,1
10009ec0:	20001c1e 	bne	r4,zero,10009f34 <__swsetup_r+0xc0>
10009ec4:	1080008c 	andi	r2,r2,2
10009ec8:	1000261e 	bne	r2,zero,10009f64 <__swsetup_r+0xf0>
10009ecc:	80800517 	ldw	r2,20(r16)
10009ed0:	80800215 	stw	r2,8(r16)
10009ed4:	18001c26 	beq	r3,zero,10009f48 <__swsetup_r+0xd4>
10009ed8:	0005883a 	mov	r2,zero
10009edc:	dfc00217 	ldw	ra,8(sp)
10009ee0:	dc400117 	ldw	r17,4(sp)
10009ee4:	dc000017 	ldw	r16,0(sp)
10009ee8:	dec00304 	addi	sp,sp,12
10009eec:	f800283a 	ret
10009ef0:	3080040c 	andi	r2,r6,16
10009ef4:	10001726 	beq	r2,zero,10009f54 <__swsetup_r+0xe0>
10009ef8:	3080010c 	andi	r2,r6,4
10009efc:	10001b1e 	bne	r2,zero,10009f6c <__swsetup_r+0xf8>
10009f00:	80c00417 	ldw	r3,16(r16)
10009f04:	30800214 	ori	r2,r6,8
10009f08:	8080030d 	sth	r2,12(r16)
10009f0c:	183feb1e 	bne	r3,zero,10009ebc <__alt_data_end+0xf8009ebc>
10009f10:	1140a00c 	andi	r5,r2,640
10009f14:	01008004 	movi	r4,512
10009f18:	293fe826 	beq	r5,r4,10009ebc <__alt_data_end+0xf8009ebc>
10009f1c:	8809883a 	mov	r4,r17
10009f20:	800b883a 	mov	r5,r16
10009f24:	000ca080 	call	1000ca08 <__smakebuf_r>
10009f28:	8080030b 	ldhu	r2,12(r16)
10009f2c:	80c00417 	ldw	r3,16(r16)
10009f30:	003fe206 	br	10009ebc <__alt_data_end+0xf8009ebc>
10009f34:	80800517 	ldw	r2,20(r16)
10009f38:	80000215 	stw	zero,8(r16)
10009f3c:	0085c83a 	sub	r2,zero,r2
10009f40:	80800615 	stw	r2,24(r16)
10009f44:	183fe41e 	bne	r3,zero,10009ed8 <__alt_data_end+0xf8009ed8>
10009f48:	8080030b 	ldhu	r2,12(r16)
10009f4c:	1080200c 	andi	r2,r2,128
10009f50:	103fe226 	beq	r2,zero,10009edc <__alt_data_end+0xf8009edc>
10009f54:	00bfffc4 	movi	r2,-1
10009f58:	003fe006 	br	10009edc <__alt_data_end+0xf8009edc>
10009f5c:	000beb00 	call	1000beb0 <__sinit>
10009f60:	003fd006 	br	10009ea4 <__alt_data_end+0xf8009ea4>
10009f64:	0005883a 	mov	r2,zero
10009f68:	003fd906 	br	10009ed0 <__alt_data_end+0xf8009ed0>
10009f6c:	81400c17 	ldw	r5,48(r16)
10009f70:	28000626 	beq	r5,zero,10009f8c <__swsetup_r+0x118>
10009f74:	80801004 	addi	r2,r16,64
10009f78:	28800326 	beq	r5,r2,10009f88 <__swsetup_r+0x114>
10009f7c:	8809883a 	mov	r4,r17
10009f80:	000c0240 	call	1000c024 <_free_r>
10009f84:	8180030b 	ldhu	r6,12(r16)
10009f88:	80000c15 	stw	zero,48(r16)
10009f8c:	80c00417 	ldw	r3,16(r16)
10009f90:	00bff6c4 	movi	r2,-37
10009f94:	118c703a 	and	r6,r2,r6
10009f98:	80000115 	stw	zero,4(r16)
10009f9c:	80c00015 	stw	r3,0(r16)
10009fa0:	003fd806 	br	10009f04 <__alt_data_end+0xf8009f04>

10009fa4 <quorem>:
10009fa4:	defff204 	addi	sp,sp,-56
10009fa8:	ddc00b15 	stw	r23,44(sp)
10009fac:	20800417 	ldw	r2,16(r4)
10009fb0:	2dc00417 	ldw	r23,16(r5)
10009fb4:	dfc00d15 	stw	ra,52(sp)
10009fb8:	df000c15 	stw	fp,48(sp)
10009fbc:	dd800a15 	stw	r22,40(sp)
10009fc0:	dd400915 	stw	r21,36(sp)
10009fc4:	dd000815 	stw	r20,32(sp)
10009fc8:	dcc00715 	stw	r19,28(sp)
10009fcc:	dc800615 	stw	r18,24(sp)
10009fd0:	dc400515 	stw	r17,20(sp)
10009fd4:	dc000415 	stw	r16,16(sp)
10009fd8:	15c07a16 	blt	r2,r23,1000a1c4 <quorem+0x220>
10009fdc:	bdffffc4 	addi	r23,r23,-1
10009fe0:	bde9883a 	add	r20,r23,r23
10009fe4:	28c00504 	addi	r3,r5,20
10009fe8:	a529883a 	add	r20,r20,r20
10009fec:	1d39883a 	add	fp,r3,r20
10009ff0:	24c00504 	addi	r19,r4,20
10009ff4:	d9400215 	stw	r5,8(sp)
10009ff8:	9d29883a 	add	r20,r19,r20
10009ffc:	e1400017 	ldw	r5,0(fp)
1000a000:	d9000015 	stw	r4,0(sp)
1000a004:	a1000017 	ldw	r4,0(r20)
1000a008:	29400044 	addi	r5,r5,1
1000a00c:	d8c00115 	stw	r3,4(sp)
1000a010:	dd000315 	stw	r20,12(sp)
1000a014:	000585c0 	call	1000585c <__udivsi3>
1000a018:	1025883a 	mov	r18,r2
1000a01c:	10003026 	beq	r2,zero,1000a0e0 <quorem+0x13c>
1000a020:	dc400117 	ldw	r17,4(sp)
1000a024:	9829883a 	mov	r20,r19
1000a028:	002d883a 	mov	r22,zero
1000a02c:	0021883a 	mov	r16,zero
1000a030:	8d400017 	ldw	r21,0(r17)
1000a034:	900b883a 	mov	r5,r18
1000a038:	8c400104 	addi	r17,r17,4
1000a03c:	a93fffcc 	andi	r4,r21,65535
1000a040:	000586c0 	call	1000586c <__mulsi3>
1000a044:	a808d43a 	srli	r4,r21,16
1000a048:	900b883a 	mov	r5,r18
1000a04c:	b0ad883a 	add	r22,r22,r2
1000a050:	000586c0 	call	1000586c <__mulsi3>
1000a054:	a1000017 	ldw	r4,0(r20)
1000a058:	b00cd43a 	srli	r6,r22,16
1000a05c:	b0ffffcc 	andi	r3,r22,65535
1000a060:	217fffcc 	andi	r5,r4,65535
1000a064:	2c21883a 	add	r16,r5,r16
1000a068:	80c7c83a 	sub	r3,r16,r3
1000a06c:	2008d43a 	srli	r4,r4,16
1000a070:	3085883a 	add	r2,r6,r2
1000a074:	1821d43a 	srai	r16,r3,16
1000a078:	117fffcc 	andi	r5,r2,65535
1000a07c:	2149c83a 	sub	r4,r4,r5
1000a080:	2421883a 	add	r16,r4,r16
1000a084:	8008943a 	slli	r4,r16,16
1000a088:	18ffffcc 	andi	r3,r3,65535
1000a08c:	102cd43a 	srli	r22,r2,16
1000a090:	20c8b03a 	or	r4,r4,r3
1000a094:	a1000015 	stw	r4,0(r20)
1000a098:	8021d43a 	srai	r16,r16,16
1000a09c:	a5000104 	addi	r20,r20,4
1000a0a0:	e47fe32e 	bgeu	fp,r17,1000a030 <__alt_data_end+0xf800a030>
1000a0a4:	d8c00317 	ldw	r3,12(sp)
1000a0a8:	18800017 	ldw	r2,0(r3)
1000a0ac:	10000c1e 	bne	r2,zero,1000a0e0 <quorem+0x13c>
1000a0b0:	18bfff04 	addi	r2,r3,-4
1000a0b4:	9880082e 	bgeu	r19,r2,1000a0d8 <quorem+0x134>
1000a0b8:	18ffff17 	ldw	r3,-4(r3)
1000a0bc:	18000326 	beq	r3,zero,1000a0cc <quorem+0x128>
1000a0c0:	00000506 	br	1000a0d8 <quorem+0x134>
1000a0c4:	10c00017 	ldw	r3,0(r2)
1000a0c8:	1800031e 	bne	r3,zero,1000a0d8 <quorem+0x134>
1000a0cc:	10bfff04 	addi	r2,r2,-4
1000a0d0:	bdffffc4 	addi	r23,r23,-1
1000a0d4:	98bffb36 	bltu	r19,r2,1000a0c4 <__alt_data_end+0xf800a0c4>
1000a0d8:	d8c00017 	ldw	r3,0(sp)
1000a0dc:	1dc00415 	stw	r23,16(r3)
1000a0e0:	d9000017 	ldw	r4,0(sp)
1000a0e4:	d9400217 	ldw	r5,8(sp)
1000a0e8:	000e04c0 	call	1000e04c <__mcmp>
1000a0ec:	10002816 	blt	r2,zero,1000a190 <quorem+0x1ec>
1000a0f0:	dc400117 	ldw	r17,4(sp)
1000a0f4:	94800044 	addi	r18,r18,1
1000a0f8:	980d883a 	mov	r6,r19
1000a0fc:	0007883a 	mov	r3,zero
1000a100:	31000017 	ldw	r4,0(r6)
1000a104:	89400017 	ldw	r5,0(r17)
1000a108:	31800104 	addi	r6,r6,4
1000a10c:	20bfffcc 	andi	r2,r4,65535
1000a110:	10c7883a 	add	r3,r2,r3
1000a114:	28bfffcc 	andi	r2,r5,65535
1000a118:	1885c83a 	sub	r2,r3,r2
1000a11c:	280ad43a 	srli	r5,r5,16
1000a120:	2008d43a 	srli	r4,r4,16
1000a124:	1007d43a 	srai	r3,r2,16
1000a128:	10bfffcc 	andi	r2,r2,65535
1000a12c:	2149c83a 	sub	r4,r4,r5
1000a130:	20c9883a 	add	r4,r4,r3
1000a134:	200a943a 	slli	r5,r4,16
1000a138:	8c400104 	addi	r17,r17,4
1000a13c:	2007d43a 	srai	r3,r4,16
1000a140:	2884b03a 	or	r2,r5,r2
1000a144:	30bfff15 	stw	r2,-4(r6)
1000a148:	e47fed2e 	bgeu	fp,r17,1000a100 <__alt_data_end+0xf800a100>
1000a14c:	bdc5883a 	add	r2,r23,r23
1000a150:	1085883a 	add	r2,r2,r2
1000a154:	9887883a 	add	r3,r19,r2
1000a158:	18800017 	ldw	r2,0(r3)
1000a15c:	10000c1e 	bne	r2,zero,1000a190 <quorem+0x1ec>
1000a160:	18bfff04 	addi	r2,r3,-4
1000a164:	9880082e 	bgeu	r19,r2,1000a188 <quorem+0x1e4>
1000a168:	18ffff17 	ldw	r3,-4(r3)
1000a16c:	18000326 	beq	r3,zero,1000a17c <quorem+0x1d8>
1000a170:	00000506 	br	1000a188 <quorem+0x1e4>
1000a174:	10c00017 	ldw	r3,0(r2)
1000a178:	1800031e 	bne	r3,zero,1000a188 <quorem+0x1e4>
1000a17c:	10bfff04 	addi	r2,r2,-4
1000a180:	bdffffc4 	addi	r23,r23,-1
1000a184:	98bffb36 	bltu	r19,r2,1000a174 <__alt_data_end+0xf800a174>
1000a188:	d8c00017 	ldw	r3,0(sp)
1000a18c:	1dc00415 	stw	r23,16(r3)
1000a190:	9005883a 	mov	r2,r18
1000a194:	dfc00d17 	ldw	ra,52(sp)
1000a198:	df000c17 	ldw	fp,48(sp)
1000a19c:	ddc00b17 	ldw	r23,44(sp)
1000a1a0:	dd800a17 	ldw	r22,40(sp)
1000a1a4:	dd400917 	ldw	r21,36(sp)
1000a1a8:	dd000817 	ldw	r20,32(sp)
1000a1ac:	dcc00717 	ldw	r19,28(sp)
1000a1b0:	dc800617 	ldw	r18,24(sp)
1000a1b4:	dc400517 	ldw	r17,20(sp)
1000a1b8:	dc000417 	ldw	r16,16(sp)
1000a1bc:	dec00e04 	addi	sp,sp,56
1000a1c0:	f800283a 	ret
1000a1c4:	0005883a 	mov	r2,zero
1000a1c8:	003ff206 	br	1000a194 <__alt_data_end+0xf800a194>

1000a1cc <_dtoa_r>:
1000a1cc:	20801017 	ldw	r2,64(r4)
1000a1d0:	deffde04 	addi	sp,sp,-136
1000a1d4:	dd401d15 	stw	r21,116(sp)
1000a1d8:	dcc01b15 	stw	r19,108(sp)
1000a1dc:	dc801a15 	stw	r18,104(sp)
1000a1e0:	dc401915 	stw	r17,100(sp)
1000a1e4:	dc001815 	stw	r16,96(sp)
1000a1e8:	dfc02115 	stw	ra,132(sp)
1000a1ec:	df002015 	stw	fp,128(sp)
1000a1f0:	ddc01f15 	stw	r23,124(sp)
1000a1f4:	dd801e15 	stw	r22,120(sp)
1000a1f8:	dd001c15 	stw	r20,112(sp)
1000a1fc:	d9c00315 	stw	r7,12(sp)
1000a200:	2021883a 	mov	r16,r4
1000a204:	302b883a 	mov	r21,r6
1000a208:	2825883a 	mov	r18,r5
1000a20c:	dc402417 	ldw	r17,144(sp)
1000a210:	3027883a 	mov	r19,r6
1000a214:	10000826 	beq	r2,zero,1000a238 <_dtoa_r+0x6c>
1000a218:	21801117 	ldw	r6,68(r4)
1000a21c:	00c00044 	movi	r3,1
1000a220:	100b883a 	mov	r5,r2
1000a224:	1986983a 	sll	r3,r3,r6
1000a228:	11800115 	stw	r6,4(r2)
1000a22c:	10c00215 	stw	r3,8(r2)
1000a230:	000d7780 	call	1000d778 <_Bfree>
1000a234:	80001015 	stw	zero,64(r16)
1000a238:	a8002d16 	blt	r21,zero,1000a2f0 <_dtoa_r+0x124>
1000a23c:	88000015 	stw	zero,0(r17)
1000a240:	a8dffc2c 	andhi	r3,r21,32752
1000a244:	009ffc34 	movhi	r2,32752
1000a248:	18801b26 	beq	r3,r2,1000a2b8 <_dtoa_r+0xec>
1000a24c:	9009883a 	mov	r4,r18
1000a250:	980b883a 	mov	r5,r19
1000a254:	000d883a 	mov	r6,zero
1000a258:	000f883a 	mov	r7,zero
1000a25c:	0012d8c0 	call	10012d8c <__eqdf2>
1000a260:	10002a1e 	bne	r2,zero,1000a30c <_dtoa_r+0x140>
1000a264:	d8c02317 	ldw	r3,140(sp)
1000a268:	d9002517 	ldw	r4,148(sp)
1000a26c:	00800044 	movi	r2,1
1000a270:	18800015 	stw	r2,0(r3)
1000a274:	2001a226 	beq	r4,zero,1000a900 <_dtoa_r+0x734>
1000a278:	00840074 	movhi	r2,4097
1000a27c:	109f4844 	addi	r2,r2,32033
1000a280:	20800015 	stw	r2,0(r4)
1000a284:	10bfffc4 	addi	r2,r2,-1
1000a288:	dfc02117 	ldw	ra,132(sp)
1000a28c:	df002017 	ldw	fp,128(sp)
1000a290:	ddc01f17 	ldw	r23,124(sp)
1000a294:	dd801e17 	ldw	r22,120(sp)
1000a298:	dd401d17 	ldw	r21,116(sp)
1000a29c:	dd001c17 	ldw	r20,112(sp)
1000a2a0:	dcc01b17 	ldw	r19,108(sp)
1000a2a4:	dc801a17 	ldw	r18,104(sp)
1000a2a8:	dc401917 	ldw	r17,100(sp)
1000a2ac:	dc001817 	ldw	r16,96(sp)
1000a2b0:	dec02204 	addi	sp,sp,136
1000a2b4:	f800283a 	ret
1000a2b8:	d8c02317 	ldw	r3,140(sp)
1000a2bc:	0089c3c4 	movi	r2,9999
1000a2c0:	18800015 	stw	r2,0(r3)
1000a2c4:	90017c26 	beq	r18,zero,1000a8b8 <_dtoa_r+0x6ec>
1000a2c8:	00840074 	movhi	r2,4097
1000a2cc:	109f5404 	addi	r2,r2,32080
1000a2d0:	d9002517 	ldw	r4,148(sp)
1000a2d4:	203fec26 	beq	r4,zero,1000a288 <__alt_data_end+0xf800a288>
1000a2d8:	10c000c7 	ldb	r3,3(r2)
1000a2dc:	18017d1e 	bne	r3,zero,1000a8d4 <_dtoa_r+0x708>
1000a2e0:	10c000c4 	addi	r3,r2,3
1000a2e4:	d9802517 	ldw	r6,148(sp)
1000a2e8:	30c00015 	stw	r3,0(r6)
1000a2ec:	003fe606 	br	1000a288 <__alt_data_end+0xf800a288>
1000a2f0:	04e00034 	movhi	r19,32768
1000a2f4:	9cffffc4 	addi	r19,r19,-1
1000a2f8:	00800044 	movi	r2,1
1000a2fc:	ace6703a 	and	r19,r21,r19
1000a300:	88800015 	stw	r2,0(r17)
1000a304:	982b883a 	mov	r21,r19
1000a308:	003fcd06 	br	1000a240 <__alt_data_end+0xf800a240>
1000a30c:	d8800204 	addi	r2,sp,8
1000a310:	a822d53a 	srli	r17,r21,20
1000a314:	d8800015 	stw	r2,0(sp)
1000a318:	8009883a 	mov	r4,r16
1000a31c:	900b883a 	mov	r5,r18
1000a320:	980d883a 	mov	r6,r19
1000a324:	d9c00104 	addi	r7,sp,4
1000a328:	000e3c00 	call	1000e3c0 <__d2b>
1000a32c:	1039883a 	mov	fp,r2
1000a330:	88016a1e 	bne	r17,zero,1000a8dc <_dtoa_r+0x710>
1000a334:	dd000217 	ldw	r20,8(sp)
1000a338:	dc400117 	ldw	r17,4(sp)
1000a33c:	00befbc4 	movi	r2,-1041
1000a340:	a463883a 	add	r17,r20,r17
1000a344:	8882ea16 	blt	r17,r2,1000aef0 <_dtoa_r+0xd24>
1000a348:	00bf0384 	movi	r2,-1010
1000a34c:	1445c83a 	sub	r2,r2,r17
1000a350:	89010484 	addi	r4,r17,1042
1000a354:	a8aa983a 	sll	r21,r21,r2
1000a358:	9108d83a 	srl	r4,r18,r4
1000a35c:	a908b03a 	or	r4,r21,r4
1000a360:	00131280 	call	10013128 <__floatunsidf>
1000a364:	017f8434 	movhi	r5,65040
1000a368:	01800044 	movi	r6,1
1000a36c:	1009883a 	mov	r4,r2
1000a370:	194b883a 	add	r5,r3,r5
1000a374:	8c7fffc4 	addi	r17,r17,-1
1000a378:	d9800f15 	stw	r6,60(sp)
1000a37c:	000d883a 	mov	r6,zero
1000a380:	01cffe34 	movhi	r7,16376
1000a384:	0006df80 	call	10006df8 <__subdf3>
1000a388:	0198dbf4 	movhi	r6,25455
1000a38c:	01cff4f4 	movhi	r7,16339
1000a390:	1009883a 	mov	r4,r2
1000a394:	180b883a 	mov	r5,r3
1000a398:	3190d844 	addi	r6,r6,17249
1000a39c:	39e1e9c4 	addi	r7,r7,-30809
1000a3a0:	000658c0 	call	1000658c <__muldf3>
1000a3a4:	01a2d874 	movhi	r6,35681
1000a3a8:	01cff1f4 	movhi	r7,16327
1000a3ac:	180b883a 	mov	r5,r3
1000a3b0:	31b22cc4 	addi	r6,r6,-14157
1000a3b4:	39e28a04 	addi	r7,r7,-30168
1000a3b8:	1009883a 	mov	r4,r2
1000a3bc:	0011b700 	call	10011b70 <__adddf3>
1000a3c0:	8809883a 	mov	r4,r17
1000a3c4:	102d883a 	mov	r22,r2
1000a3c8:	182b883a 	mov	r21,r3
1000a3cc:	00130580 	call	10013058 <__floatsidf>
1000a3d0:	019427f4 	movhi	r6,20639
1000a3d4:	01cff4f4 	movhi	r7,16339
1000a3d8:	1009883a 	mov	r4,r2
1000a3dc:	180b883a 	mov	r5,r3
1000a3e0:	319e7ec4 	addi	r6,r6,31227
1000a3e4:	39d104c4 	addi	r7,r7,17427
1000a3e8:	000658c0 	call	1000658c <__muldf3>
1000a3ec:	b009883a 	mov	r4,r22
1000a3f0:	a80b883a 	mov	r5,r21
1000a3f4:	100d883a 	mov	r6,r2
1000a3f8:	180f883a 	mov	r7,r3
1000a3fc:	0011b700 	call	10011b70 <__adddf3>
1000a400:	1009883a 	mov	r4,r2
1000a404:	180b883a 	mov	r5,r3
1000a408:	102d883a 	mov	r22,r2
1000a40c:	182b883a 	mov	r21,r3
1000a410:	0012fd00 	call	10012fd0 <__fixdfsi>
1000a414:	b009883a 	mov	r4,r22
1000a418:	a80b883a 	mov	r5,r21
1000a41c:	000d883a 	mov	r6,zero
1000a420:	000f883a 	mov	r7,zero
1000a424:	d8800515 	stw	r2,20(sp)
1000a428:	0012ef00 	call	10012ef0 <__ledf2>
1000a42c:	10023116 	blt	r2,zero,1000acf4 <_dtoa_r+0xb28>
1000a430:	d8c00517 	ldw	r3,20(sp)
1000a434:	00800584 	movi	r2,22
1000a438:	10c21f36 	bltu	r2,r3,1000acb8 <_dtoa_r+0xaec>
1000a43c:	180490fa 	slli	r2,r3,3
1000a440:	00c40074 	movhi	r3,4097
1000a444:	18df7004 	addi	r3,r3,32192
1000a448:	1885883a 	add	r2,r3,r2
1000a44c:	11000017 	ldw	r4,0(r2)
1000a450:	11400117 	ldw	r5,4(r2)
1000a454:	900d883a 	mov	r6,r18
1000a458:	980f883a 	mov	r7,r19
1000a45c:	0012e100 	call	10012e10 <__gedf2>
1000a460:	0082a70e 	bge	zero,r2,1000af00 <_dtoa_r+0xd34>
1000a464:	d9000517 	ldw	r4,20(sp)
1000a468:	d8000c15 	stw	zero,48(sp)
1000a46c:	213fffc4 	addi	r4,r4,-1
1000a470:	d9000515 	stw	r4,20(sp)
1000a474:	a463c83a 	sub	r17,r20,r17
1000a478:	8dbfffc4 	addi	r22,r17,-1
1000a47c:	b0021916 	blt	r22,zero,1000ace4 <_dtoa_r+0xb18>
1000a480:	d8000815 	stw	zero,32(sp)
1000a484:	d8800517 	ldw	r2,20(sp)
1000a488:	10020e16 	blt	r2,zero,1000acc4 <_dtoa_r+0xaf8>
1000a48c:	b0ad883a 	add	r22,r22,r2
1000a490:	d8800a15 	stw	r2,40(sp)
1000a494:	d8000915 	stw	zero,36(sp)
1000a498:	d8c00317 	ldw	r3,12(sp)
1000a49c:	00800244 	movi	r2,9
1000a4a0:	10c11a36 	bltu	r2,r3,1000a90c <_dtoa_r+0x740>
1000a4a4:	00800144 	movi	r2,5
1000a4a8:	10c4fc0e 	bge	r2,r3,1000b89c <_dtoa_r+0x16d0>
1000a4ac:	18ffff04 	addi	r3,r3,-4
1000a4b0:	d8c00315 	stw	r3,12(sp)
1000a4b4:	0029883a 	mov	r20,zero
1000a4b8:	d9800317 	ldw	r6,12(sp)
1000a4bc:	008000c4 	movi	r2,3
1000a4c0:	3083bd26 	beq	r6,r2,1000b3b8 <_dtoa_r+0x11ec>
1000a4c4:	1183670e 	bge	r2,r6,1000b264 <_dtoa_r+0x1098>
1000a4c8:	d8c00317 	ldw	r3,12(sp)
1000a4cc:	00800104 	movi	r2,4
1000a4d0:	1882e726 	beq	r3,r2,1000b070 <_dtoa_r+0xea4>
1000a4d4:	00800144 	movi	r2,5
1000a4d8:	1884f21e 	bne	r3,r2,1000b8a4 <_dtoa_r+0x16d8>
1000a4dc:	00800044 	movi	r2,1
1000a4e0:	d8800b15 	stw	r2,44(sp)
1000a4e4:	d8c02217 	ldw	r3,136(sp)
1000a4e8:	d9000517 	ldw	r4,20(sp)
1000a4ec:	1907883a 	add	r3,r3,r4
1000a4f0:	19800044 	addi	r6,r3,1
1000a4f4:	d8c00d15 	stw	r3,52(sp)
1000a4f8:	d9800615 	stw	r6,24(sp)
1000a4fc:	0183c30e 	bge	zero,r6,1000b40c <_dtoa_r+0x1240>
1000a500:	d9800617 	ldw	r6,24(sp)
1000a504:	3023883a 	mov	r17,r6
1000a508:	80001115 	stw	zero,68(r16)
1000a50c:	008005c4 	movi	r2,23
1000a510:	1184f62e 	bgeu	r2,r6,1000b8ec <_dtoa_r+0x1720>
1000a514:	00c00044 	movi	r3,1
1000a518:	00800104 	movi	r2,4
1000a51c:	1085883a 	add	r2,r2,r2
1000a520:	11000504 	addi	r4,r2,20
1000a524:	180b883a 	mov	r5,r3
1000a528:	18c00044 	addi	r3,r3,1
1000a52c:	313ffb2e 	bgeu	r6,r4,1000a51c <__alt_data_end+0xf800a51c>
1000a530:	81401115 	stw	r5,68(r16)
1000a534:	8009883a 	mov	r4,r16
1000a538:	000d6d00 	call	1000d6d0 <_Balloc>
1000a53c:	d8800715 	stw	r2,28(sp)
1000a540:	80801015 	stw	r2,64(r16)
1000a544:	00800384 	movi	r2,14
1000a548:	1440fd36 	bltu	r2,r17,1000a940 <_dtoa_r+0x774>
1000a54c:	a000fc26 	beq	r20,zero,1000a940 <_dtoa_r+0x774>
1000a550:	d8800517 	ldw	r2,20(sp)
1000a554:	0083b90e 	bge	zero,r2,1000b43c <_dtoa_r+0x1270>
1000a558:	d8c00517 	ldw	r3,20(sp)
1000a55c:	108003cc 	andi	r2,r2,15
1000a560:	100490fa 	slli	r2,r2,3
1000a564:	182fd13a 	srai	r23,r3,4
1000a568:	00c40074 	movhi	r3,4097
1000a56c:	18df7004 	addi	r3,r3,32192
1000a570:	1885883a 	add	r2,r3,r2
1000a574:	b8c0040c 	andi	r3,r23,16
1000a578:	12c00017 	ldw	r11,0(r2)
1000a57c:	12800117 	ldw	r10,4(r2)
1000a580:	18039726 	beq	r3,zero,1000b3e0 <_dtoa_r+0x1214>
1000a584:	00840074 	movhi	r2,4097
1000a588:	109f6604 	addi	r2,r2,32152
1000a58c:	11800817 	ldw	r6,32(r2)
1000a590:	11c00917 	ldw	r7,36(r2)
1000a594:	9009883a 	mov	r4,r18
1000a598:	980b883a 	mov	r5,r19
1000a59c:	da801615 	stw	r10,88(sp)
1000a5a0:	dac01515 	stw	r11,84(sp)
1000a5a4:	001240c0 	call	1001240c <__divdf3>
1000a5a8:	da801617 	ldw	r10,88(sp)
1000a5ac:	dac01517 	ldw	r11,84(sp)
1000a5b0:	bdc003cc 	andi	r23,r23,15
1000a5b4:	044000c4 	movi	r17,3
1000a5b8:	d8800e15 	stw	r2,56(sp)
1000a5bc:	182b883a 	mov	r21,r3
1000a5c0:	b8001126 	beq	r23,zero,1000a608 <_dtoa_r+0x43c>
1000a5c4:	05040074 	movhi	r20,4097
1000a5c8:	a51f6604 	addi	r20,r20,32152
1000a5cc:	5805883a 	mov	r2,r11
1000a5d0:	5007883a 	mov	r3,r10
1000a5d4:	b980004c 	andi	r6,r23,1
1000a5d8:	1009883a 	mov	r4,r2
1000a5dc:	b82fd07a 	srai	r23,r23,1
1000a5e0:	180b883a 	mov	r5,r3
1000a5e4:	30000426 	beq	r6,zero,1000a5f8 <_dtoa_r+0x42c>
1000a5e8:	a1800017 	ldw	r6,0(r20)
1000a5ec:	a1c00117 	ldw	r7,4(r20)
1000a5f0:	8c400044 	addi	r17,r17,1
1000a5f4:	000658c0 	call	1000658c <__muldf3>
1000a5f8:	a5000204 	addi	r20,r20,8
1000a5fc:	b83ff51e 	bne	r23,zero,1000a5d4 <__alt_data_end+0xf800a5d4>
1000a600:	1017883a 	mov	r11,r2
1000a604:	1815883a 	mov	r10,r3
1000a608:	d9000e17 	ldw	r4,56(sp)
1000a60c:	a80b883a 	mov	r5,r21
1000a610:	580d883a 	mov	r6,r11
1000a614:	500f883a 	mov	r7,r10
1000a618:	001240c0 	call	1001240c <__divdf3>
1000a61c:	1029883a 	mov	r20,r2
1000a620:	182b883a 	mov	r21,r3
1000a624:	d9800c17 	ldw	r6,48(sp)
1000a628:	30000626 	beq	r6,zero,1000a644 <_dtoa_r+0x478>
1000a62c:	a009883a 	mov	r4,r20
1000a630:	a80b883a 	mov	r5,r21
1000a634:	000d883a 	mov	r6,zero
1000a638:	01cffc34 	movhi	r7,16368
1000a63c:	0012ef00 	call	10012ef0 <__ledf2>
1000a640:	10043216 	blt	r2,zero,1000b70c <_dtoa_r+0x1540>
1000a644:	8809883a 	mov	r4,r17
1000a648:	00130580 	call	10013058 <__floatsidf>
1000a64c:	1009883a 	mov	r4,r2
1000a650:	180b883a 	mov	r5,r3
1000a654:	a00d883a 	mov	r6,r20
1000a658:	a80f883a 	mov	r7,r21
1000a65c:	000658c0 	call	1000658c <__muldf3>
1000a660:	000d883a 	mov	r6,zero
1000a664:	1009883a 	mov	r4,r2
1000a668:	180b883a 	mov	r5,r3
1000a66c:	01d00734 	movhi	r7,16412
1000a670:	0011b700 	call	10011b70 <__adddf3>
1000a674:	1023883a 	mov	r17,r2
1000a678:	d9800617 	ldw	r6,24(sp)
1000a67c:	00bf3034 	movhi	r2,64704
1000a680:	1885883a 	add	r2,r3,r2
1000a684:	d8800e15 	stw	r2,56(sp)
1000a688:	30032e26 	beq	r6,zero,1000b344 <_dtoa_r+0x1178>
1000a68c:	d8c00517 	ldw	r3,20(sp)
1000a690:	da800617 	ldw	r10,24(sp)
1000a694:	d8c01215 	stw	r3,72(sp)
1000a698:	d9000b17 	ldw	r4,44(sp)
1000a69c:	2003b026 	beq	r4,zero,1000b560 <_dtoa_r+0x1394>
1000a6a0:	50bfffc4 	addi	r2,r10,-1
1000a6a4:	100490fa 	slli	r2,r2,3
1000a6a8:	00c40074 	movhi	r3,4097
1000a6ac:	18df7004 	addi	r3,r3,32192
1000a6b0:	1885883a 	add	r2,r3,r2
1000a6b4:	11800017 	ldw	r6,0(r2)
1000a6b8:	11c00117 	ldw	r7,4(r2)
1000a6bc:	d8800717 	ldw	r2,28(sp)
1000a6c0:	0009883a 	mov	r4,zero
1000a6c4:	014ff834 	movhi	r5,16352
1000a6c8:	da801615 	stw	r10,88(sp)
1000a6cc:	15c00044 	addi	r23,r2,1
1000a6d0:	001240c0 	call	1001240c <__divdf3>
1000a6d4:	d9c00e17 	ldw	r7,56(sp)
1000a6d8:	880d883a 	mov	r6,r17
1000a6dc:	1009883a 	mov	r4,r2
1000a6e0:	180b883a 	mov	r5,r3
1000a6e4:	0006df80 	call	10006df8 <__subdf3>
1000a6e8:	a80b883a 	mov	r5,r21
1000a6ec:	a009883a 	mov	r4,r20
1000a6f0:	d8c01015 	stw	r3,64(sp)
1000a6f4:	d8800e15 	stw	r2,56(sp)
1000a6f8:	0012fd00 	call	10012fd0 <__fixdfsi>
1000a6fc:	1009883a 	mov	r4,r2
1000a700:	d8801715 	stw	r2,92(sp)
1000a704:	00130580 	call	10013058 <__floatsidf>
1000a708:	a009883a 	mov	r4,r20
1000a70c:	a80b883a 	mov	r5,r21
1000a710:	100d883a 	mov	r6,r2
1000a714:	180f883a 	mov	r7,r3
1000a718:	0006df80 	call	10006df8 <__subdf3>
1000a71c:	da001717 	ldw	r8,92(sp)
1000a720:	1829883a 	mov	r20,r3
1000a724:	d8c00717 	ldw	r3,28(sp)
1000a728:	d9000e17 	ldw	r4,56(sp)
1000a72c:	d9401017 	ldw	r5,64(sp)
1000a730:	42000c04 	addi	r8,r8,48
1000a734:	1023883a 	mov	r17,r2
1000a738:	1a000005 	stb	r8,0(r3)
1000a73c:	880d883a 	mov	r6,r17
1000a740:	a00f883a 	mov	r7,r20
1000a744:	402b883a 	mov	r21,r8
1000a748:	0012e100 	call	10012e10 <__gedf2>
1000a74c:	00844516 	blt	zero,r2,1000b864 <_dtoa_r+0x1698>
1000a750:	0009883a 	mov	r4,zero
1000a754:	014ffc34 	movhi	r5,16368
1000a758:	880d883a 	mov	r6,r17
1000a75c:	a00f883a 	mov	r7,r20
1000a760:	0006df80 	call	10006df8 <__subdf3>
1000a764:	d9000e17 	ldw	r4,56(sp)
1000a768:	d9401017 	ldw	r5,64(sp)
1000a76c:	100d883a 	mov	r6,r2
1000a770:	180f883a 	mov	r7,r3
1000a774:	0012e100 	call	10012e10 <__gedf2>
1000a778:	da801617 	ldw	r10,88(sp)
1000a77c:	00843616 	blt	zero,r2,1000b858 <_dtoa_r+0x168c>
1000a780:	00800044 	movi	r2,1
1000a784:	12806e0e 	bge	r2,r10,1000a940 <_dtoa_r+0x774>
1000a788:	d9000717 	ldw	r4,28(sp)
1000a78c:	dd801315 	stw	r22,76(sp)
1000a790:	dc001115 	stw	r16,68(sp)
1000a794:	2295883a 	add	r10,r4,r10
1000a798:	dcc01415 	stw	r19,80(sp)
1000a79c:	502d883a 	mov	r22,r10
1000a7a0:	dcc01017 	ldw	r19,64(sp)
1000a7a4:	b821883a 	mov	r16,r23
1000a7a8:	dc801015 	stw	r18,64(sp)
1000a7ac:	dc800e17 	ldw	r18,56(sp)
1000a7b0:	00000906 	br	1000a7d8 <_dtoa_r+0x60c>
1000a7b4:	0006df80 	call	10006df8 <__subdf3>
1000a7b8:	1009883a 	mov	r4,r2
1000a7bc:	180b883a 	mov	r5,r3
1000a7c0:	900d883a 	mov	r6,r18
1000a7c4:	980f883a 	mov	r7,r19
1000a7c8:	0012ef00 	call	10012ef0 <__ledf2>
1000a7cc:	10040e16 	blt	r2,zero,1000b808 <_dtoa_r+0x163c>
1000a7d0:	b821883a 	mov	r16,r23
1000a7d4:	bd841026 	beq	r23,r22,1000b818 <_dtoa_r+0x164c>
1000a7d8:	9009883a 	mov	r4,r18
1000a7dc:	980b883a 	mov	r5,r19
1000a7e0:	000d883a 	mov	r6,zero
1000a7e4:	01d00934 	movhi	r7,16420
1000a7e8:	000658c0 	call	1000658c <__muldf3>
1000a7ec:	000d883a 	mov	r6,zero
1000a7f0:	01d00934 	movhi	r7,16420
1000a7f4:	8809883a 	mov	r4,r17
1000a7f8:	a00b883a 	mov	r5,r20
1000a7fc:	1025883a 	mov	r18,r2
1000a800:	1827883a 	mov	r19,r3
1000a804:	000658c0 	call	1000658c <__muldf3>
1000a808:	180b883a 	mov	r5,r3
1000a80c:	1009883a 	mov	r4,r2
1000a810:	1823883a 	mov	r17,r3
1000a814:	1029883a 	mov	r20,r2
1000a818:	0012fd00 	call	10012fd0 <__fixdfsi>
1000a81c:	1009883a 	mov	r4,r2
1000a820:	102b883a 	mov	r21,r2
1000a824:	00130580 	call	10013058 <__floatsidf>
1000a828:	a009883a 	mov	r4,r20
1000a82c:	880b883a 	mov	r5,r17
1000a830:	100d883a 	mov	r6,r2
1000a834:	180f883a 	mov	r7,r3
1000a838:	0006df80 	call	10006df8 <__subdf3>
1000a83c:	ad400c04 	addi	r21,r21,48
1000a840:	1009883a 	mov	r4,r2
1000a844:	180b883a 	mov	r5,r3
1000a848:	900d883a 	mov	r6,r18
1000a84c:	980f883a 	mov	r7,r19
1000a850:	85400005 	stb	r21,0(r16)
1000a854:	1023883a 	mov	r17,r2
1000a858:	1829883a 	mov	r20,r3
1000a85c:	0012ef00 	call	10012ef0 <__ledf2>
1000a860:	bdc00044 	addi	r23,r23,1
1000a864:	0009883a 	mov	r4,zero
1000a868:	014ffc34 	movhi	r5,16368
1000a86c:	880d883a 	mov	r6,r17
1000a870:	a00f883a 	mov	r7,r20
1000a874:	103fcf0e 	bge	r2,zero,1000a7b4 <__alt_data_end+0xf800a7b4>
1000a878:	d9801217 	ldw	r6,72(sp)
1000a87c:	dc001117 	ldw	r16,68(sp)
1000a880:	d9800515 	stw	r6,20(sp)
1000a884:	8009883a 	mov	r4,r16
1000a888:	e00b883a 	mov	r5,fp
1000a88c:	000d7780 	call	1000d778 <_Bfree>
1000a890:	d8c00517 	ldw	r3,20(sp)
1000a894:	d9002317 	ldw	r4,140(sp)
1000a898:	d9802517 	ldw	r6,148(sp)
1000a89c:	b8000005 	stb	zero,0(r23)
1000a8a0:	18800044 	addi	r2,r3,1
1000a8a4:	20800015 	stw	r2,0(r4)
1000a8a8:	30027226 	beq	r6,zero,1000b274 <_dtoa_r+0x10a8>
1000a8ac:	35c00015 	stw	r23,0(r6)
1000a8b0:	d8800717 	ldw	r2,28(sp)
1000a8b4:	003e7406 	br	1000a288 <__alt_data_end+0xf800a288>
1000a8b8:	00800434 	movhi	r2,16
1000a8bc:	10bfffc4 	addi	r2,r2,-1
1000a8c0:	a8aa703a 	and	r21,r21,r2
1000a8c4:	a83e801e 	bne	r21,zero,1000a2c8 <__alt_data_end+0xf800a2c8>
1000a8c8:	00840074 	movhi	r2,4097
1000a8cc:	109f5104 	addi	r2,r2,32068
1000a8d0:	003e7f06 	br	1000a2d0 <__alt_data_end+0xf800a2d0>
1000a8d4:	10c00204 	addi	r3,r2,8
1000a8d8:	003e8206 	br	1000a2e4 <__alt_data_end+0xf800a2e4>
1000a8dc:	01400434 	movhi	r5,16
1000a8e0:	297fffc4 	addi	r5,r5,-1
1000a8e4:	994a703a 	and	r5,r19,r5
1000a8e8:	9009883a 	mov	r4,r18
1000a8ec:	8c7f0044 	addi	r17,r17,-1023
1000a8f0:	294ffc34 	orhi	r5,r5,16368
1000a8f4:	dd000217 	ldw	r20,8(sp)
1000a8f8:	d8000f15 	stw	zero,60(sp)
1000a8fc:	003e9f06 	br	1000a37c <__alt_data_end+0xf800a37c>
1000a900:	00840074 	movhi	r2,4097
1000a904:	109f4804 	addi	r2,r2,32032
1000a908:	003e5f06 	br	1000a288 <__alt_data_end+0xf800a288>
1000a90c:	80001115 	stw	zero,68(r16)
1000a910:	8009883a 	mov	r4,r16
1000a914:	000b883a 	mov	r5,zero
1000a918:	000d6d00 	call	1000d6d0 <_Balloc>
1000a91c:	01bfffc4 	movi	r6,-1
1000a920:	d8800715 	stw	r2,28(sp)
1000a924:	80801015 	stw	r2,64(r16)
1000a928:	00800044 	movi	r2,1
1000a92c:	d9800615 	stw	r6,24(sp)
1000a930:	d8800b15 	stw	r2,44(sp)
1000a934:	d8002215 	stw	zero,136(sp)
1000a938:	d9800d15 	stw	r6,52(sp)
1000a93c:	d8000315 	stw	zero,12(sp)
1000a940:	d8800117 	ldw	r2,4(sp)
1000a944:	10008e16 	blt	r2,zero,1000ab80 <_dtoa_r+0x9b4>
1000a948:	d9000517 	ldw	r4,20(sp)
1000a94c:	00c00384 	movi	r3,14
1000a950:	19008b16 	blt	r3,r4,1000ab80 <_dtoa_r+0x9b4>
1000a954:	200490fa 	slli	r2,r4,3
1000a958:	00c40074 	movhi	r3,4097
1000a95c:	d9802217 	ldw	r6,136(sp)
1000a960:	18df7004 	addi	r3,r3,32192
1000a964:	1885883a 	add	r2,r3,r2
1000a968:	14400017 	ldw	r17,0(r2)
1000a96c:	15000117 	ldw	r20,4(r2)
1000a970:	3001c716 	blt	r6,zero,1000b090 <_dtoa_r+0xec4>
1000a974:	880d883a 	mov	r6,r17
1000a978:	a00f883a 	mov	r7,r20
1000a97c:	9009883a 	mov	r4,r18
1000a980:	980b883a 	mov	r5,r19
1000a984:	001240c0 	call	1001240c <__divdf3>
1000a988:	180b883a 	mov	r5,r3
1000a98c:	1009883a 	mov	r4,r2
1000a990:	0012fd00 	call	10012fd0 <__fixdfsi>
1000a994:	1009883a 	mov	r4,r2
1000a998:	102d883a 	mov	r22,r2
1000a99c:	00130580 	call	10013058 <__floatsidf>
1000a9a0:	1009883a 	mov	r4,r2
1000a9a4:	180b883a 	mov	r5,r3
1000a9a8:	880d883a 	mov	r6,r17
1000a9ac:	a00f883a 	mov	r7,r20
1000a9b0:	000658c0 	call	1000658c <__muldf3>
1000a9b4:	9009883a 	mov	r4,r18
1000a9b8:	980b883a 	mov	r5,r19
1000a9bc:	100d883a 	mov	r6,r2
1000a9c0:	180f883a 	mov	r7,r3
1000a9c4:	0006df80 	call	10006df8 <__subdf3>
1000a9c8:	d9000717 	ldw	r4,28(sp)
1000a9cc:	d9800617 	ldw	r6,24(sp)
1000a9d0:	180b883a 	mov	r5,r3
1000a9d4:	b0c00c04 	addi	r3,r22,48
1000a9d8:	20c00005 	stb	r3,0(r4)
1000a9dc:	25c00044 	addi	r23,r4,1
1000a9e0:	01000044 	movi	r4,1
1000a9e4:	1011883a 	mov	r8,r2
1000a9e8:	2807883a 	mov	r3,r5
1000a9ec:	31003d26 	beq	r6,r4,1000aae4 <_dtoa_r+0x918>
1000a9f0:	000d883a 	mov	r6,zero
1000a9f4:	01d00934 	movhi	r7,16420
1000a9f8:	1009883a 	mov	r4,r2
1000a9fc:	000658c0 	call	1000658c <__muldf3>
1000aa00:	1009883a 	mov	r4,r2
1000aa04:	180b883a 	mov	r5,r3
1000aa08:	000d883a 	mov	r6,zero
1000aa0c:	000f883a 	mov	r7,zero
1000aa10:	1027883a 	mov	r19,r2
1000aa14:	182b883a 	mov	r21,r3
1000aa18:	0012d8c0 	call	10012d8c <__eqdf2>
1000aa1c:	103f9926 	beq	r2,zero,1000a884 <__alt_data_end+0xf800a884>
1000aa20:	d8c00617 	ldw	r3,24(sp)
1000aa24:	d9000717 	ldw	r4,28(sp)
1000aa28:	b825883a 	mov	r18,r23
1000aa2c:	18bfffc4 	addi	r2,r3,-1
1000aa30:	20ad883a 	add	r22,r4,r2
1000aa34:	dc000315 	stw	r16,12(sp)
1000aa38:	00000a06 	br	1000aa64 <_dtoa_r+0x898>
1000aa3c:	000658c0 	call	1000658c <__muldf3>
1000aa40:	1009883a 	mov	r4,r2
1000aa44:	180b883a 	mov	r5,r3
1000aa48:	000d883a 	mov	r6,zero
1000aa4c:	000f883a 	mov	r7,zero
1000aa50:	1027883a 	mov	r19,r2
1000aa54:	182b883a 	mov	r21,r3
1000aa58:	b825883a 	mov	r18,r23
1000aa5c:	0012d8c0 	call	10012d8c <__eqdf2>
1000aa60:	10022626 	beq	r2,zero,1000b2fc <_dtoa_r+0x1130>
1000aa64:	880d883a 	mov	r6,r17
1000aa68:	a00f883a 	mov	r7,r20
1000aa6c:	9809883a 	mov	r4,r19
1000aa70:	a80b883a 	mov	r5,r21
1000aa74:	001240c0 	call	1001240c <__divdf3>
1000aa78:	180b883a 	mov	r5,r3
1000aa7c:	1009883a 	mov	r4,r2
1000aa80:	0012fd00 	call	10012fd0 <__fixdfsi>
1000aa84:	1009883a 	mov	r4,r2
1000aa88:	1021883a 	mov	r16,r2
1000aa8c:	00130580 	call	10013058 <__floatsidf>
1000aa90:	1009883a 	mov	r4,r2
1000aa94:	180b883a 	mov	r5,r3
1000aa98:	880d883a 	mov	r6,r17
1000aa9c:	a00f883a 	mov	r7,r20
1000aaa0:	000658c0 	call	1000658c <__muldf3>
1000aaa4:	9809883a 	mov	r4,r19
1000aaa8:	a80b883a 	mov	r5,r21
1000aaac:	100d883a 	mov	r6,r2
1000aab0:	180f883a 	mov	r7,r3
1000aab4:	0006df80 	call	10006df8 <__subdf3>
1000aab8:	82000c04 	addi	r8,r16,48
1000aabc:	92000005 	stb	r8,0(r18)
1000aac0:	1009883a 	mov	r4,r2
1000aac4:	180b883a 	mov	r5,r3
1000aac8:	000d883a 	mov	r6,zero
1000aacc:	01d00934 	movhi	r7,16420
1000aad0:	1011883a 	mov	r8,r2
1000aad4:	bdc00044 	addi	r23,r23,1
1000aad8:	95bfd81e 	bne	r18,r22,1000aa3c <__alt_data_end+0xf800aa3c>
1000aadc:	802d883a 	mov	r22,r16
1000aae0:	dc000317 	ldw	r16,12(sp)
1000aae4:	4009883a 	mov	r4,r8
1000aae8:	180b883a 	mov	r5,r3
1000aaec:	400d883a 	mov	r6,r8
1000aaf0:	180f883a 	mov	r7,r3
1000aaf4:	0011b700 	call	10011b70 <__adddf3>
1000aaf8:	8809883a 	mov	r4,r17
1000aafc:	a00b883a 	mov	r5,r20
1000ab00:	100d883a 	mov	r6,r2
1000ab04:	180f883a 	mov	r7,r3
1000ab08:	1027883a 	mov	r19,r2
1000ab0c:	1825883a 	mov	r18,r3
1000ab10:	0012ef00 	call	10012ef0 <__ledf2>
1000ab14:	10000816 	blt	r2,zero,1000ab38 <_dtoa_r+0x96c>
1000ab18:	8809883a 	mov	r4,r17
1000ab1c:	a00b883a 	mov	r5,r20
1000ab20:	980d883a 	mov	r6,r19
1000ab24:	900f883a 	mov	r7,r18
1000ab28:	0012d8c0 	call	10012d8c <__eqdf2>
1000ab2c:	103f551e 	bne	r2,zero,1000a884 <__alt_data_end+0xf800a884>
1000ab30:	b580004c 	andi	r22,r22,1
1000ab34:	b03f5326 	beq	r22,zero,1000a884 <__alt_data_end+0xf800a884>
1000ab38:	bd7fffc3 	ldbu	r21,-1(r23)
1000ab3c:	b8bfffc4 	addi	r2,r23,-1
1000ab40:	1007883a 	mov	r3,r2
1000ab44:	01400e44 	movi	r5,57
1000ab48:	d9800717 	ldw	r6,28(sp)
1000ab4c:	00000506 	br	1000ab64 <_dtoa_r+0x998>
1000ab50:	18ffffc4 	addi	r3,r3,-1
1000ab54:	30825e26 	beq	r6,r2,1000b4d0 <_dtoa_r+0x1304>
1000ab58:	1d400003 	ldbu	r21,0(r3)
1000ab5c:	102f883a 	mov	r23,r2
1000ab60:	10bfffc4 	addi	r2,r2,-1
1000ab64:	a9003fcc 	andi	r4,r21,255
1000ab68:	2100201c 	xori	r4,r4,128
1000ab6c:	213fe004 	addi	r4,r4,-128
1000ab70:	217ff726 	beq	r4,r5,1000ab50 <__alt_data_end+0xf800ab50>
1000ab74:	aa000044 	addi	r8,r21,1
1000ab78:	12000005 	stb	r8,0(r2)
1000ab7c:	003f4106 	br	1000a884 <__alt_data_end+0xf800a884>
1000ab80:	d8c00b17 	ldw	r3,44(sp)
1000ab84:	18006726 	beq	r3,zero,1000ad24 <_dtoa_r+0xb58>
1000ab88:	d9000317 	ldw	r4,12(sp)
1000ab8c:	00c00044 	movi	r3,1
1000ab90:	19016a0e 	bge	r3,r4,1000b13c <_dtoa_r+0xf70>
1000ab94:	d8800617 	ldw	r2,24(sp)
1000ab98:	d8c00917 	ldw	r3,36(sp)
1000ab9c:	157fffc4 	addi	r21,r2,-1
1000aba0:	1d420716 	blt	r3,r21,1000b3c0 <_dtoa_r+0x11f4>
1000aba4:	1d6bc83a 	sub	r21,r3,r21
1000aba8:	d8800617 	ldw	r2,24(sp)
1000abac:	1002c716 	blt	r2,zero,1000b6cc <_dtoa_r+0x1500>
1000abb0:	dd000817 	ldw	r20,32(sp)
1000abb4:	d8800617 	ldw	r2,24(sp)
1000abb8:	d9800817 	ldw	r6,32(sp)
1000abbc:	8009883a 	mov	r4,r16
1000abc0:	01400044 	movi	r5,1
1000abc4:	308d883a 	add	r6,r6,r2
1000abc8:	d9800815 	stw	r6,32(sp)
1000abcc:	b0ad883a 	add	r22,r22,r2
1000abd0:	000daf80 	call	1000daf8 <__i2b>
1000abd4:	1023883a 	mov	r17,r2
1000abd8:	a0000826 	beq	r20,zero,1000abfc <_dtoa_r+0xa30>
1000abdc:	0580070e 	bge	zero,r22,1000abfc <_dtoa_r+0xa30>
1000abe0:	b005883a 	mov	r2,r22
1000abe4:	a5812016 	blt	r20,r22,1000b068 <_dtoa_r+0xe9c>
1000abe8:	d8c00817 	ldw	r3,32(sp)
1000abec:	a0a9c83a 	sub	r20,r20,r2
1000abf0:	b0adc83a 	sub	r22,r22,r2
1000abf4:	1887c83a 	sub	r3,r3,r2
1000abf8:	d8c00815 	stw	r3,32(sp)
1000abfc:	d9000917 	ldw	r4,36(sp)
1000ac00:	0100140e 	bge	zero,r4,1000ac54 <_dtoa_r+0xa88>
1000ac04:	d9800b17 	ldw	r6,44(sp)
1000ac08:	3001e526 	beq	r6,zero,1000b3a0 <_dtoa_r+0x11d4>
1000ac0c:	05400e0e 	bge	zero,r21,1000ac48 <_dtoa_r+0xa7c>
1000ac10:	880b883a 	mov	r5,r17
1000ac14:	8009883a 	mov	r4,r16
1000ac18:	a80d883a 	mov	r6,r21
1000ac1c:	000ddc40 	call	1000ddc4 <__pow5mult>
1000ac20:	e00d883a 	mov	r6,fp
1000ac24:	8009883a 	mov	r4,r16
1000ac28:	100b883a 	mov	r5,r2
1000ac2c:	1023883a 	mov	r17,r2
1000ac30:	000db340 	call	1000db34 <__multiply>
1000ac34:	102f883a 	mov	r23,r2
1000ac38:	e00b883a 	mov	r5,fp
1000ac3c:	8009883a 	mov	r4,r16
1000ac40:	000d7780 	call	1000d778 <_Bfree>
1000ac44:	b839883a 	mov	fp,r23
1000ac48:	d8800917 	ldw	r2,36(sp)
1000ac4c:	154dc83a 	sub	r6,r2,r21
1000ac50:	3001281e 	bne	r6,zero,1000b0f4 <_dtoa_r+0xf28>
1000ac54:	05c00044 	movi	r23,1
1000ac58:	8009883a 	mov	r4,r16
1000ac5c:	b80b883a 	mov	r5,r23
1000ac60:	000daf80 	call	1000daf8 <__i2b>
1000ac64:	d8c00a17 	ldw	r3,40(sp)
1000ac68:	102b883a 	mov	r21,r2
1000ac6c:	00c0310e 	bge	zero,r3,1000ad34 <_dtoa_r+0xb68>
1000ac70:	8009883a 	mov	r4,r16
1000ac74:	100b883a 	mov	r5,r2
1000ac78:	180d883a 	mov	r6,r3
1000ac7c:	000ddc40 	call	1000ddc4 <__pow5mult>
1000ac80:	d9000317 	ldw	r4,12(sp)
1000ac84:	102b883a 	mov	r21,r2
1000ac88:	b9011f0e 	bge	r23,r4,1000b108 <_dtoa_r+0xf3c>
1000ac8c:	0027883a 	mov	r19,zero
1000ac90:	a8800417 	ldw	r2,16(r21)
1000ac94:	10800104 	addi	r2,r2,4
1000ac98:	1085883a 	add	r2,r2,r2
1000ac9c:	1085883a 	add	r2,r2,r2
1000aca0:	a885883a 	add	r2,r21,r2
1000aca4:	11000017 	ldw	r4,0(r2)
1000aca8:	000d9e00 	call	1000d9e0 <__hi0bits>
1000acac:	00c00804 	movi	r3,32
1000acb0:	1885c83a 	sub	r2,r3,r2
1000acb4:	00002506 	br	1000ad4c <_dtoa_r+0xb80>
1000acb8:	01800044 	movi	r6,1
1000acbc:	d9800c15 	stw	r6,48(sp)
1000acc0:	003dec06 	br	1000a474 <__alt_data_end+0xf800a474>
1000acc4:	d8c00817 	ldw	r3,32(sp)
1000acc8:	d9000517 	ldw	r4,20(sp)
1000accc:	d8000a15 	stw	zero,40(sp)
1000acd0:	1907c83a 	sub	r3,r3,r4
1000acd4:	010dc83a 	sub	r6,zero,r4
1000acd8:	d8c00815 	stw	r3,32(sp)
1000acdc:	d9800915 	stw	r6,36(sp)
1000ace0:	003ded06 	br	1000a498 <__alt_data_end+0xf800a498>
1000ace4:	05adc83a 	sub	r22,zero,r22
1000ace8:	dd800815 	stw	r22,32(sp)
1000acec:	002d883a 	mov	r22,zero
1000acf0:	003de406 	br	1000a484 <__alt_data_end+0xf800a484>
1000acf4:	d9000517 	ldw	r4,20(sp)
1000acf8:	00130580 	call	10013058 <__floatsidf>
1000acfc:	1009883a 	mov	r4,r2
1000ad00:	180b883a 	mov	r5,r3
1000ad04:	b00d883a 	mov	r6,r22
1000ad08:	a80f883a 	mov	r7,r21
1000ad0c:	0012d8c0 	call	10012d8c <__eqdf2>
1000ad10:	103dc726 	beq	r2,zero,1000a430 <__alt_data_end+0xf800a430>
1000ad14:	d8800517 	ldw	r2,20(sp)
1000ad18:	10bfffc4 	addi	r2,r2,-1
1000ad1c:	d8800515 	stw	r2,20(sp)
1000ad20:	003dc306 	br	1000a430 <__alt_data_end+0xf800a430>
1000ad24:	dd400917 	ldw	r21,36(sp)
1000ad28:	dd000817 	ldw	r20,32(sp)
1000ad2c:	0023883a 	mov	r17,zero
1000ad30:	003fa906 	br	1000abd8 <__alt_data_end+0xf800abd8>
1000ad34:	d9800317 	ldw	r6,12(sp)
1000ad38:	b981670e 	bge	r23,r6,1000b2d8 <_dtoa_r+0x110c>
1000ad3c:	0027883a 	mov	r19,zero
1000ad40:	d8c00a17 	ldw	r3,40(sp)
1000ad44:	183fd21e 	bne	r3,zero,1000ac90 <__alt_data_end+0xf800ac90>
1000ad48:	00800044 	movi	r2,1
1000ad4c:	1585883a 	add	r2,r2,r22
1000ad50:	108007cc 	andi	r2,r2,31
1000ad54:	10005f26 	beq	r2,zero,1000aed4 <_dtoa_r+0xd08>
1000ad58:	00c00804 	movi	r3,32
1000ad5c:	1887c83a 	sub	r3,r3,r2
1000ad60:	01000104 	movi	r4,4
1000ad64:	20c2dd0e 	bge	r4,r3,1000b8dc <_dtoa_r+0x1710>
1000ad68:	d9000817 	ldw	r4,32(sp)
1000ad6c:	00c00704 	movi	r3,28
1000ad70:	1885c83a 	sub	r2,r3,r2
1000ad74:	2089883a 	add	r4,r4,r2
1000ad78:	d9000815 	stw	r4,32(sp)
1000ad7c:	a0a9883a 	add	r20,r20,r2
1000ad80:	b0ad883a 	add	r22,r22,r2
1000ad84:	d8800817 	ldw	r2,32(sp)
1000ad88:	0080050e 	bge	zero,r2,1000ada0 <_dtoa_r+0xbd4>
1000ad8c:	e00b883a 	mov	r5,fp
1000ad90:	8009883a 	mov	r4,r16
1000ad94:	100d883a 	mov	r6,r2
1000ad98:	000df040 	call	1000df04 <__lshift>
1000ad9c:	1039883a 	mov	fp,r2
1000ada0:	0580050e 	bge	zero,r22,1000adb8 <_dtoa_r+0xbec>
1000ada4:	a80b883a 	mov	r5,r21
1000ada8:	8009883a 	mov	r4,r16
1000adac:	b00d883a 	mov	r6,r22
1000adb0:	000df040 	call	1000df04 <__lshift>
1000adb4:	102b883a 	mov	r21,r2
1000adb8:	d8c00c17 	ldw	r3,48(sp)
1000adbc:	1801161e 	bne	r3,zero,1000b218 <_dtoa_r+0x104c>
1000adc0:	d8c00617 	ldw	r3,24(sp)
1000adc4:	00c12d0e 	bge	zero,r3,1000b27c <_dtoa_r+0x10b0>
1000adc8:	d8c00b17 	ldw	r3,44(sp)
1000adcc:	1800571e 	bne	r3,zero,1000af2c <_dtoa_r+0xd60>
1000add0:	dc800717 	ldw	r18,28(sp)
1000add4:	dcc00617 	ldw	r19,24(sp)
1000add8:	9029883a 	mov	r20,r18
1000addc:	00000206 	br	1000ade8 <_dtoa_r+0xc1c>
1000ade0:	000d7a00 	call	1000d7a0 <__multadd>
1000ade4:	1039883a 	mov	fp,r2
1000ade8:	e009883a 	mov	r4,fp
1000adec:	a80b883a 	mov	r5,r21
1000adf0:	0009fa40 	call	10009fa4 <quorem>
1000adf4:	10800c04 	addi	r2,r2,48
1000adf8:	90800005 	stb	r2,0(r18)
1000adfc:	94800044 	addi	r18,r18,1
1000ae00:	9507c83a 	sub	r3,r18,r20
1000ae04:	8009883a 	mov	r4,r16
1000ae08:	e00b883a 	mov	r5,fp
1000ae0c:	01800284 	movi	r6,10
1000ae10:	000f883a 	mov	r7,zero
1000ae14:	1cfff216 	blt	r3,r19,1000ade0 <__alt_data_end+0xf800ade0>
1000ae18:	1011883a 	mov	r8,r2
1000ae1c:	d8800617 	ldw	r2,24(sp)
1000ae20:	00822e0e 	bge	zero,r2,1000b6dc <_dtoa_r+0x1510>
1000ae24:	d9000717 	ldw	r4,28(sp)
1000ae28:	0025883a 	mov	r18,zero
1000ae2c:	20af883a 	add	r23,r4,r2
1000ae30:	e00b883a 	mov	r5,fp
1000ae34:	01800044 	movi	r6,1
1000ae38:	8009883a 	mov	r4,r16
1000ae3c:	da001715 	stw	r8,92(sp)
1000ae40:	000df040 	call	1000df04 <__lshift>
1000ae44:	1009883a 	mov	r4,r2
1000ae48:	a80b883a 	mov	r5,r21
1000ae4c:	1039883a 	mov	fp,r2
1000ae50:	000e04c0 	call	1000e04c <__mcmp>
1000ae54:	da001717 	ldw	r8,92(sp)
1000ae58:	00816e0e 	bge	zero,r2,1000b414 <_dtoa_r+0x1248>
1000ae5c:	b93fffc3 	ldbu	r4,-1(r23)
1000ae60:	b8bfffc4 	addi	r2,r23,-1
1000ae64:	1007883a 	mov	r3,r2
1000ae68:	01800e44 	movi	r6,57
1000ae6c:	d9c00717 	ldw	r7,28(sp)
1000ae70:	00000506 	br	1000ae88 <_dtoa_r+0xcbc>
1000ae74:	18ffffc4 	addi	r3,r3,-1
1000ae78:	38811926 	beq	r7,r2,1000b2e0 <_dtoa_r+0x1114>
1000ae7c:	19000003 	ldbu	r4,0(r3)
1000ae80:	102f883a 	mov	r23,r2
1000ae84:	10bfffc4 	addi	r2,r2,-1
1000ae88:	21403fcc 	andi	r5,r4,255
1000ae8c:	2940201c 	xori	r5,r5,128
1000ae90:	297fe004 	addi	r5,r5,-128
1000ae94:	29bff726 	beq	r5,r6,1000ae74 <__alt_data_end+0xf800ae74>
1000ae98:	21000044 	addi	r4,r4,1
1000ae9c:	11000005 	stb	r4,0(r2)
1000aea0:	8009883a 	mov	r4,r16
1000aea4:	a80b883a 	mov	r5,r21
1000aea8:	000d7780 	call	1000d778 <_Bfree>
1000aeac:	883e7526 	beq	r17,zero,1000a884 <__alt_data_end+0xf800a884>
1000aeb0:	90000426 	beq	r18,zero,1000aec4 <_dtoa_r+0xcf8>
1000aeb4:	94400326 	beq	r18,r17,1000aec4 <_dtoa_r+0xcf8>
1000aeb8:	8009883a 	mov	r4,r16
1000aebc:	900b883a 	mov	r5,r18
1000aec0:	000d7780 	call	1000d778 <_Bfree>
1000aec4:	8009883a 	mov	r4,r16
1000aec8:	880b883a 	mov	r5,r17
1000aecc:	000d7780 	call	1000d778 <_Bfree>
1000aed0:	003e6c06 	br	1000a884 <__alt_data_end+0xf800a884>
1000aed4:	00800704 	movi	r2,28
1000aed8:	d9800817 	ldw	r6,32(sp)
1000aedc:	a0a9883a 	add	r20,r20,r2
1000aee0:	b0ad883a 	add	r22,r22,r2
1000aee4:	308d883a 	add	r6,r6,r2
1000aee8:	d9800815 	stw	r6,32(sp)
1000aeec:	003fa506 	br	1000ad84 <__alt_data_end+0xf800ad84>
1000aef0:	013efb84 	movi	r4,-1042
1000aef4:	246bc83a 	sub	r21,r4,r17
1000aef8:	9548983a 	sll	r4,r18,r21
1000aefc:	003d1806 	br	1000a360 <__alt_data_end+0xf800a360>
1000af00:	d8000c15 	stw	zero,48(sp)
1000af04:	003d5b06 	br	1000a474 <__alt_data_end+0xf800a474>
1000af08:	880b883a 	mov	r5,r17
1000af0c:	8009883a 	mov	r4,r16
1000af10:	01800284 	movi	r6,10
1000af14:	000f883a 	mov	r7,zero
1000af18:	000d7a00 	call	1000d7a0 <__multadd>
1000af1c:	1023883a 	mov	r17,r2
1000af20:	d8800d17 	ldw	r2,52(sp)
1000af24:	0082550e 	bge	zero,r2,1000b87c <_dtoa_r+0x16b0>
1000af28:	d8800615 	stw	r2,24(sp)
1000af2c:	0500050e 	bge	zero,r20,1000af44 <_dtoa_r+0xd78>
1000af30:	880b883a 	mov	r5,r17
1000af34:	8009883a 	mov	r4,r16
1000af38:	a00d883a 	mov	r6,r20
1000af3c:	000df040 	call	1000df04 <__lshift>
1000af40:	1023883a 	mov	r17,r2
1000af44:	98016a1e 	bne	r19,zero,1000b4f0 <_dtoa_r+0x1324>
1000af48:	8829883a 	mov	r20,r17
1000af4c:	d9000617 	ldw	r4,24(sp)
1000af50:	dcc00717 	ldw	r19,28(sp)
1000af54:	9480004c 	andi	r18,r18,1
1000af58:	20bfffc4 	addi	r2,r4,-1
1000af5c:	9885883a 	add	r2,r19,r2
1000af60:	d8800415 	stw	r2,16(sp)
1000af64:	dc800615 	stw	r18,24(sp)
1000af68:	e009883a 	mov	r4,fp
1000af6c:	a80b883a 	mov	r5,r21
1000af70:	0009fa40 	call	10009fa4 <quorem>
1000af74:	e009883a 	mov	r4,fp
1000af78:	880b883a 	mov	r5,r17
1000af7c:	102f883a 	mov	r23,r2
1000af80:	000e04c0 	call	1000e04c <__mcmp>
1000af84:	8009883a 	mov	r4,r16
1000af88:	a80b883a 	mov	r5,r21
1000af8c:	a00d883a 	mov	r6,r20
1000af90:	102d883a 	mov	r22,r2
1000af94:	000e0ac0 	call	1000e0ac <__mdiff>
1000af98:	1007883a 	mov	r3,r2
1000af9c:	10800317 	ldw	r2,12(r2)
1000afa0:	bc800c04 	addi	r18,r23,48
1000afa4:	1000971e 	bne	r2,zero,1000b204 <_dtoa_r+0x1038>
1000afa8:	180b883a 	mov	r5,r3
1000afac:	e009883a 	mov	r4,fp
1000afb0:	d8c01515 	stw	r3,84(sp)
1000afb4:	000e04c0 	call	1000e04c <__mcmp>
1000afb8:	d8c01517 	ldw	r3,84(sp)
1000afbc:	8009883a 	mov	r4,r16
1000afc0:	d8801515 	stw	r2,84(sp)
1000afc4:	180b883a 	mov	r5,r3
1000afc8:	000d7780 	call	1000d778 <_Bfree>
1000afcc:	d8801517 	ldw	r2,84(sp)
1000afd0:	1000041e 	bne	r2,zero,1000afe4 <_dtoa_r+0xe18>
1000afd4:	d9800317 	ldw	r6,12(sp)
1000afd8:	3000021e 	bne	r6,zero,1000afe4 <_dtoa_r+0xe18>
1000afdc:	d8c00617 	ldw	r3,24(sp)
1000afe0:	18007626 	beq	r3,zero,1000b1bc <_dtoa_r+0xff0>
1000afe4:	b0005b16 	blt	r22,zero,1000b154 <_dtoa_r+0xf88>
1000afe8:	b000041e 	bne	r22,zero,1000affc <_dtoa_r+0xe30>
1000afec:	d9000317 	ldw	r4,12(sp)
1000aff0:	2000021e 	bne	r4,zero,1000affc <_dtoa_r+0xe30>
1000aff4:	d8c00617 	ldw	r3,24(sp)
1000aff8:	18005626 	beq	r3,zero,1000b154 <_dtoa_r+0xf88>
1000affc:	00814d16 	blt	zero,r2,1000b534 <_dtoa_r+0x1368>
1000b000:	d8c00417 	ldw	r3,16(sp)
1000b004:	9d800044 	addi	r22,r19,1
1000b008:	9c800005 	stb	r18,0(r19)
1000b00c:	b02f883a 	mov	r23,r22
1000b010:	98c14c26 	beq	r19,r3,1000b544 <_dtoa_r+0x1378>
1000b014:	e00b883a 	mov	r5,fp
1000b018:	8009883a 	mov	r4,r16
1000b01c:	01800284 	movi	r6,10
1000b020:	000f883a 	mov	r7,zero
1000b024:	000d7a00 	call	1000d7a0 <__multadd>
1000b028:	1039883a 	mov	fp,r2
1000b02c:	8d006d26 	beq	r17,r20,1000b1e4 <_dtoa_r+0x1018>
1000b030:	880b883a 	mov	r5,r17
1000b034:	01800284 	movi	r6,10
1000b038:	000f883a 	mov	r7,zero
1000b03c:	8009883a 	mov	r4,r16
1000b040:	000d7a00 	call	1000d7a0 <__multadd>
1000b044:	a00b883a 	mov	r5,r20
1000b048:	8009883a 	mov	r4,r16
1000b04c:	01800284 	movi	r6,10
1000b050:	000f883a 	mov	r7,zero
1000b054:	1023883a 	mov	r17,r2
1000b058:	000d7a00 	call	1000d7a0 <__multadd>
1000b05c:	1029883a 	mov	r20,r2
1000b060:	b027883a 	mov	r19,r22
1000b064:	003fc006 	br	1000af68 <__alt_data_end+0xf800af68>
1000b068:	a005883a 	mov	r2,r20
1000b06c:	003ede06 	br	1000abe8 <__alt_data_end+0xf800abe8>
1000b070:	01000044 	movi	r4,1
1000b074:	d9000b15 	stw	r4,44(sp)
1000b078:	d9802217 	ldw	r6,136(sp)
1000b07c:	0180dc0e 	bge	zero,r6,1000b3f0 <_dtoa_r+0x1224>
1000b080:	3023883a 	mov	r17,r6
1000b084:	d9800d15 	stw	r6,52(sp)
1000b088:	d9800615 	stw	r6,24(sp)
1000b08c:	003d1e06 	br	1000a508 <__alt_data_end+0xf800a508>
1000b090:	d8800617 	ldw	r2,24(sp)
1000b094:	00be3716 	blt	zero,r2,1000a974 <__alt_data_end+0xf800a974>
1000b098:	1000be1e 	bne	r2,zero,1000b394 <_dtoa_r+0x11c8>
1000b09c:	8809883a 	mov	r4,r17
1000b0a0:	a00b883a 	mov	r5,r20
1000b0a4:	000d883a 	mov	r6,zero
1000b0a8:	01d00534 	movhi	r7,16404
1000b0ac:	000658c0 	call	1000658c <__muldf3>
1000b0b0:	1009883a 	mov	r4,r2
1000b0b4:	180b883a 	mov	r5,r3
1000b0b8:	900d883a 	mov	r6,r18
1000b0bc:	980f883a 	mov	r7,r19
1000b0c0:	0012e100 	call	10012e10 <__gedf2>
1000b0c4:	002b883a 	mov	r21,zero
1000b0c8:	0023883a 	mov	r17,zero
1000b0cc:	10007a16 	blt	r2,zero,1000b2b8 <_dtoa_r+0x10ec>
1000b0d0:	d9002217 	ldw	r4,136(sp)
1000b0d4:	ddc00717 	ldw	r23,28(sp)
1000b0d8:	0108303a 	nor	r4,zero,r4
1000b0dc:	d9000515 	stw	r4,20(sp)
1000b0e0:	8009883a 	mov	r4,r16
1000b0e4:	a80b883a 	mov	r5,r21
1000b0e8:	000d7780 	call	1000d778 <_Bfree>
1000b0ec:	883f751e 	bne	r17,zero,1000aec4 <__alt_data_end+0xf800aec4>
1000b0f0:	003de406 	br	1000a884 <__alt_data_end+0xf800a884>
1000b0f4:	e00b883a 	mov	r5,fp
1000b0f8:	8009883a 	mov	r4,r16
1000b0fc:	000ddc40 	call	1000ddc4 <__pow5mult>
1000b100:	1039883a 	mov	fp,r2
1000b104:	003ed306 	br	1000ac54 <__alt_data_end+0xf800ac54>
1000b108:	903ee01e 	bne	r18,zero,1000ac8c <__alt_data_end+0xf800ac8c>
1000b10c:	00800434 	movhi	r2,16
1000b110:	10bfffc4 	addi	r2,r2,-1
1000b114:	9884703a 	and	r2,r19,r2
1000b118:	103f081e 	bne	r2,zero,1000ad3c <__alt_data_end+0xf800ad3c>
1000b11c:	9cdffc2c 	andhi	r19,r19,32752
1000b120:	983f0626 	beq	r19,zero,1000ad3c <__alt_data_end+0xf800ad3c>
1000b124:	d8800817 	ldw	r2,32(sp)
1000b128:	b5800044 	addi	r22,r22,1
1000b12c:	04c00044 	movi	r19,1
1000b130:	10800044 	addi	r2,r2,1
1000b134:	d8800815 	stw	r2,32(sp)
1000b138:	003f0106 	br	1000ad40 <__alt_data_end+0xf800ad40>
1000b13c:	d9800f17 	ldw	r6,60(sp)
1000b140:	30016826 	beq	r6,zero,1000b6e4 <_dtoa_r+0x1518>
1000b144:	10810cc4 	addi	r2,r2,1075
1000b148:	dd400917 	ldw	r21,36(sp)
1000b14c:	dd000817 	ldw	r20,32(sp)
1000b150:	003e9906 	br	1000abb8 <__alt_data_end+0xf800abb8>
1000b154:	9011883a 	mov	r8,r18
1000b158:	4007883a 	mov	r3,r8
1000b15c:	e02d883a 	mov	r22,fp
1000b160:	0080100e 	bge	zero,r2,1000b1a4 <_dtoa_r+0xfd8>
1000b164:	01800044 	movi	r6,1
1000b168:	8009883a 	mov	r4,r16
1000b16c:	e00b883a 	mov	r5,fp
1000b170:	da001515 	stw	r8,84(sp)
1000b174:	da001715 	stw	r8,92(sp)
1000b178:	000df040 	call	1000df04 <__lshift>
1000b17c:	1009883a 	mov	r4,r2
1000b180:	a80b883a 	mov	r5,r21
1000b184:	102d883a 	mov	r22,r2
1000b188:	000e04c0 	call	1000e04c <__mcmp>
1000b18c:	d8c01517 	ldw	r3,84(sp)
1000b190:	da001717 	ldw	r8,92(sp)
1000b194:	0081a50e 	bge	zero,r2,1000b82c <_dtoa_r+0x1660>
1000b198:	00800e44 	movi	r2,57
1000b19c:	40817b26 	beq	r8,r2,1000b78c <_dtoa_r+0x15c0>
1000b1a0:	40c00044 	addi	r3,r8,1
1000b1a4:	8825883a 	mov	r18,r17
1000b1a8:	9dc00044 	addi	r23,r19,1
1000b1ac:	98c00005 	stb	r3,0(r19)
1000b1b0:	a023883a 	mov	r17,r20
1000b1b4:	b039883a 	mov	fp,r22
1000b1b8:	003f3906 	br	1000aea0 <__alt_data_end+0xf800aea0>
1000b1bc:	00800e44 	movi	r2,57
1000b1c0:	9011883a 	mov	r8,r18
1000b1c4:	90817226 	beq	r18,r2,1000b790 <_dtoa_r+0x15c4>
1000b1c8:	0580010e 	bge	zero,r22,1000b1d0 <_dtoa_r+0x1004>
1000b1cc:	ba000c44 	addi	r8,r23,49
1000b1d0:	8825883a 	mov	r18,r17
1000b1d4:	9dc00044 	addi	r23,r19,1
1000b1d8:	9a000005 	stb	r8,0(r19)
1000b1dc:	a023883a 	mov	r17,r20
1000b1e0:	003f2f06 	br	1000aea0 <__alt_data_end+0xf800aea0>
1000b1e4:	880b883a 	mov	r5,r17
1000b1e8:	8009883a 	mov	r4,r16
1000b1ec:	01800284 	movi	r6,10
1000b1f0:	000f883a 	mov	r7,zero
1000b1f4:	000d7a00 	call	1000d7a0 <__multadd>
1000b1f8:	1023883a 	mov	r17,r2
1000b1fc:	1029883a 	mov	r20,r2
1000b200:	003f9706 	br	1000b060 <__alt_data_end+0xf800b060>
1000b204:	8009883a 	mov	r4,r16
1000b208:	180b883a 	mov	r5,r3
1000b20c:	000d7780 	call	1000d778 <_Bfree>
1000b210:	00800044 	movi	r2,1
1000b214:	003f7306 	br	1000afe4 <__alt_data_end+0xf800afe4>
1000b218:	e009883a 	mov	r4,fp
1000b21c:	a80b883a 	mov	r5,r21
1000b220:	000e04c0 	call	1000e04c <__mcmp>
1000b224:	103ee60e 	bge	r2,zero,1000adc0 <__alt_data_end+0xf800adc0>
1000b228:	8009883a 	mov	r4,r16
1000b22c:	e00b883a 	mov	r5,fp
1000b230:	01800284 	movi	r6,10
1000b234:	000f883a 	mov	r7,zero
1000b238:	000d7a00 	call	1000d7a0 <__multadd>
1000b23c:	d9000517 	ldw	r4,20(sp)
1000b240:	d9800b17 	ldw	r6,44(sp)
1000b244:	1039883a 	mov	fp,r2
1000b248:	213fffc4 	addi	r4,r4,-1
1000b24c:	d9000515 	stw	r4,20(sp)
1000b250:	303f2d1e 	bne	r6,zero,1000af08 <__alt_data_end+0xf800af08>
1000b254:	d9000d17 	ldw	r4,52(sp)
1000b258:	0101780e 	bge	zero,r4,1000b83c <_dtoa_r+0x1670>
1000b25c:	d9000615 	stw	r4,24(sp)
1000b260:	003edb06 	br	1000add0 <__alt_data_end+0xf800add0>
1000b264:	00800084 	movi	r2,2
1000b268:	30818e1e 	bne	r6,r2,1000b8a4 <_dtoa_r+0x16d8>
1000b26c:	d8000b15 	stw	zero,44(sp)
1000b270:	003f8106 	br	1000b078 <__alt_data_end+0xf800b078>
1000b274:	d8800717 	ldw	r2,28(sp)
1000b278:	003c0306 	br	1000a288 <__alt_data_end+0xf800a288>
1000b27c:	d9000317 	ldw	r4,12(sp)
1000b280:	00800084 	movi	r2,2
1000b284:	113ed00e 	bge	r2,r4,1000adc8 <__alt_data_end+0xf800adc8>
1000b288:	d8c00617 	ldw	r3,24(sp)
1000b28c:	183f901e 	bne	r3,zero,1000b0d0 <__alt_data_end+0xf800b0d0>
1000b290:	a80b883a 	mov	r5,r21
1000b294:	8009883a 	mov	r4,r16
1000b298:	01800144 	movi	r6,5
1000b29c:	000f883a 	mov	r7,zero
1000b2a0:	000d7a00 	call	1000d7a0 <__multadd>
1000b2a4:	e009883a 	mov	r4,fp
1000b2a8:	100b883a 	mov	r5,r2
1000b2ac:	102b883a 	mov	r21,r2
1000b2b0:	000e04c0 	call	1000e04c <__mcmp>
1000b2b4:	00bf860e 	bge	zero,r2,1000b0d0 <__alt_data_end+0xf800b0d0>
1000b2b8:	d9800717 	ldw	r6,28(sp)
1000b2bc:	00800c44 	movi	r2,49
1000b2c0:	30800005 	stb	r2,0(r6)
1000b2c4:	d8800517 	ldw	r2,20(sp)
1000b2c8:	35c00044 	addi	r23,r6,1
1000b2cc:	10800044 	addi	r2,r2,1
1000b2d0:	d8800515 	stw	r2,20(sp)
1000b2d4:	003f8206 	br	1000b0e0 <__alt_data_end+0xf800b0e0>
1000b2d8:	903e981e 	bne	r18,zero,1000ad3c <__alt_data_end+0xf800ad3c>
1000b2dc:	003f8b06 	br	1000b10c <__alt_data_end+0xf800b10c>
1000b2e0:	d9800517 	ldw	r6,20(sp)
1000b2e4:	d8c00717 	ldw	r3,28(sp)
1000b2e8:	00800c44 	movi	r2,49
1000b2ec:	31800044 	addi	r6,r6,1
1000b2f0:	d9800515 	stw	r6,20(sp)
1000b2f4:	18800005 	stb	r2,0(r3)
1000b2f8:	003ee906 	br	1000aea0 <__alt_data_end+0xf800aea0>
1000b2fc:	dc000317 	ldw	r16,12(sp)
1000b300:	003d6006 	br	1000a884 <__alt_data_end+0xf800a884>
1000b304:	8809883a 	mov	r4,r17
1000b308:	00130580 	call	10013058 <__floatsidf>
1000b30c:	a009883a 	mov	r4,r20
1000b310:	a80b883a 	mov	r5,r21
1000b314:	100d883a 	mov	r6,r2
1000b318:	180f883a 	mov	r7,r3
1000b31c:	000658c0 	call	1000658c <__muldf3>
1000b320:	1009883a 	mov	r4,r2
1000b324:	180b883a 	mov	r5,r3
1000b328:	000d883a 	mov	r6,zero
1000b32c:	01d00734 	movhi	r7,16412
1000b330:	0011b700 	call	10011b70 <__adddf3>
1000b334:	1023883a 	mov	r17,r2
1000b338:	00bf3034 	movhi	r2,64704
1000b33c:	1885883a 	add	r2,r3,r2
1000b340:	d8800e15 	stw	r2,56(sp)
1000b344:	a009883a 	mov	r4,r20
1000b348:	a80b883a 	mov	r5,r21
1000b34c:	000d883a 	mov	r6,zero
1000b350:	01d00534 	movhi	r7,16404
1000b354:	0006df80 	call	10006df8 <__subdf3>
1000b358:	d9c00e17 	ldw	r7,56(sp)
1000b35c:	1009883a 	mov	r4,r2
1000b360:	180b883a 	mov	r5,r3
1000b364:	880d883a 	mov	r6,r17
1000b368:	102b883a 	mov	r21,r2
1000b36c:	1829883a 	mov	r20,r3
1000b370:	0012e100 	call	10012e10 <__gedf2>
1000b374:	00807716 	blt	zero,r2,1000b554 <_dtoa_r+0x1388>
1000b378:	d8800e17 	ldw	r2,56(sp)
1000b37c:	a809883a 	mov	r4,r21
1000b380:	a00b883a 	mov	r5,r20
1000b384:	11e0003c 	xorhi	r7,r2,32768
1000b388:	880d883a 	mov	r6,r17
1000b38c:	0012ef00 	call	10012ef0 <__ledf2>
1000b390:	103d6b0e 	bge	r2,zero,1000a940 <__alt_data_end+0xf800a940>
1000b394:	002b883a 	mov	r21,zero
1000b398:	0023883a 	mov	r17,zero
1000b39c:	003f4c06 	br	1000b0d0 <__alt_data_end+0xf800b0d0>
1000b3a0:	d9800917 	ldw	r6,36(sp)
1000b3a4:	e00b883a 	mov	r5,fp
1000b3a8:	8009883a 	mov	r4,r16
1000b3ac:	000ddc40 	call	1000ddc4 <__pow5mult>
1000b3b0:	1039883a 	mov	fp,r2
1000b3b4:	003e2706 	br	1000ac54 <__alt_data_end+0xf800ac54>
1000b3b8:	d8000b15 	stw	zero,44(sp)
1000b3bc:	003c4906 	br	1000a4e4 <__alt_data_end+0xf800a4e4>
1000b3c0:	d9000917 	ldw	r4,36(sp)
1000b3c4:	d9800a17 	ldw	r6,40(sp)
1000b3c8:	dd400915 	stw	r21,36(sp)
1000b3cc:	a905c83a 	sub	r2,r21,r4
1000b3d0:	308d883a 	add	r6,r6,r2
1000b3d4:	d9800a15 	stw	r6,40(sp)
1000b3d8:	002b883a 	mov	r21,zero
1000b3dc:	003df206 	br	1000aba8 <__alt_data_end+0xf800aba8>
1000b3e0:	dc800e15 	stw	r18,56(sp)
1000b3e4:	982b883a 	mov	r21,r19
1000b3e8:	04400084 	movi	r17,2
1000b3ec:	003c7406 	br	1000a5c0 <__alt_data_end+0xf800a5c0>
1000b3f0:	04400044 	movi	r17,1
1000b3f4:	dc400d15 	stw	r17,52(sp)
1000b3f8:	dc400615 	stw	r17,24(sp)
1000b3fc:	dc402215 	stw	r17,136(sp)
1000b400:	80001115 	stw	zero,68(r16)
1000b404:	000b883a 	mov	r5,zero
1000b408:	003c4a06 	br	1000a534 <__alt_data_end+0xf800a534>
1000b40c:	3023883a 	mov	r17,r6
1000b410:	003ffb06 	br	1000b400 <__alt_data_end+0xf800b400>
1000b414:	1000021e 	bne	r2,zero,1000b420 <_dtoa_r+0x1254>
1000b418:	4200004c 	andi	r8,r8,1
1000b41c:	403e8f1e 	bne	r8,zero,1000ae5c <__alt_data_end+0xf800ae5c>
1000b420:	01000c04 	movi	r4,48
1000b424:	00000106 	br	1000b42c <_dtoa_r+0x1260>
1000b428:	102f883a 	mov	r23,r2
1000b42c:	b8bfffc4 	addi	r2,r23,-1
1000b430:	10c00007 	ldb	r3,0(r2)
1000b434:	193ffc26 	beq	r3,r4,1000b428 <__alt_data_end+0xf800b428>
1000b438:	003e9906 	br	1000aea0 <__alt_data_end+0xf800aea0>
1000b43c:	d9000517 	ldw	r4,20(sp)
1000b440:	012fc83a 	sub	r23,zero,r4
1000b444:	b800ad26 	beq	r23,zero,1000b6fc <_dtoa_r+0x1530>
1000b448:	b88003cc 	andi	r2,r23,15
1000b44c:	100490fa 	slli	r2,r2,3
1000b450:	00c40074 	movhi	r3,4097
1000b454:	18df7004 	addi	r3,r3,32192
1000b458:	1885883a 	add	r2,r3,r2
1000b45c:	11800017 	ldw	r6,0(r2)
1000b460:	11c00117 	ldw	r7,4(r2)
1000b464:	b82fd13a 	srai	r23,r23,4
1000b468:	9009883a 	mov	r4,r18
1000b46c:	980b883a 	mov	r5,r19
1000b470:	000658c0 	call	1000658c <__muldf3>
1000b474:	1029883a 	mov	r20,r2
1000b478:	182b883a 	mov	r21,r3
1000b47c:	b800f426 	beq	r23,zero,1000b850 <_dtoa_r+0x1684>
1000b480:	02040074 	movhi	r8,4097
1000b484:	421f6604 	addi	r8,r8,32152
1000b488:	8029883a 	mov	r20,r16
1000b48c:	04400084 	movi	r17,2
1000b490:	4021883a 	mov	r16,r8
1000b494:	b980004c 	andi	r6,r23,1
1000b498:	1009883a 	mov	r4,r2
1000b49c:	b82fd07a 	srai	r23,r23,1
1000b4a0:	180b883a 	mov	r5,r3
1000b4a4:	30000426 	beq	r6,zero,1000b4b8 <_dtoa_r+0x12ec>
1000b4a8:	81800017 	ldw	r6,0(r16)
1000b4ac:	81c00117 	ldw	r7,4(r16)
1000b4b0:	8c400044 	addi	r17,r17,1
1000b4b4:	000658c0 	call	1000658c <__muldf3>
1000b4b8:	84000204 	addi	r16,r16,8
1000b4bc:	b83ff51e 	bne	r23,zero,1000b494 <__alt_data_end+0xf800b494>
1000b4c0:	a021883a 	mov	r16,r20
1000b4c4:	182b883a 	mov	r21,r3
1000b4c8:	1029883a 	mov	r20,r2
1000b4cc:	003c5506 	br	1000a624 <__alt_data_end+0xf800a624>
1000b4d0:	d9800517 	ldw	r6,20(sp)
1000b4d4:	d9000717 	ldw	r4,28(sp)
1000b4d8:	00c00c04 	movi	r3,48
1000b4dc:	31800044 	addi	r6,r6,1
1000b4e0:	d9800515 	stw	r6,20(sp)
1000b4e4:	20c00005 	stb	r3,0(r4)
1000b4e8:	02000c44 	movi	r8,49
1000b4ec:	003da206 	br	1000ab78 <__alt_data_end+0xf800ab78>
1000b4f0:	89400117 	ldw	r5,4(r17)
1000b4f4:	8009883a 	mov	r4,r16
1000b4f8:	000d6d00 	call	1000d6d0 <_Balloc>
1000b4fc:	89800417 	ldw	r6,16(r17)
1000b500:	11000304 	addi	r4,r2,12
1000b504:	89400304 	addi	r5,r17,12
1000b508:	31800084 	addi	r6,r6,2
1000b50c:	318d883a 	add	r6,r6,r6
1000b510:	318d883a 	add	r6,r6,r6
1000b514:	1027883a 	mov	r19,r2
1000b518:	00079d40 	call	100079d4 <memcpy>
1000b51c:	8009883a 	mov	r4,r16
1000b520:	980b883a 	mov	r5,r19
1000b524:	01800044 	movi	r6,1
1000b528:	000df040 	call	1000df04 <__lshift>
1000b52c:	1029883a 	mov	r20,r2
1000b530:	003e8606 	br	1000af4c <__alt_data_end+0xf800af4c>
1000b534:	00800e44 	movi	r2,57
1000b538:	90809526 	beq	r18,r2,1000b790 <_dtoa_r+0x15c4>
1000b53c:	92000044 	addi	r8,r18,1
1000b540:	003f2306 	br	1000b1d0 <__alt_data_end+0xf800b1d0>
1000b544:	9011883a 	mov	r8,r18
1000b548:	8825883a 	mov	r18,r17
1000b54c:	a023883a 	mov	r17,r20
1000b550:	003e3706 	br	1000ae30 <__alt_data_end+0xf800ae30>
1000b554:	002b883a 	mov	r21,zero
1000b558:	0023883a 	mov	r17,zero
1000b55c:	003f5606 	br	1000b2b8 <__alt_data_end+0xf800b2b8>
1000b560:	51bfffc4 	addi	r6,r10,-1
1000b564:	300490fa 	slli	r2,r6,3
1000b568:	00c40074 	movhi	r3,4097
1000b56c:	18df7004 	addi	r3,r3,32192
1000b570:	1885883a 	add	r2,r3,r2
1000b574:	d9c00e17 	ldw	r7,56(sp)
1000b578:	11000017 	ldw	r4,0(r2)
1000b57c:	11400117 	ldw	r5,4(r2)
1000b580:	d8800717 	ldw	r2,28(sp)
1000b584:	d9801015 	stw	r6,64(sp)
1000b588:	880d883a 	mov	r6,r17
1000b58c:	da801615 	stw	r10,88(sp)
1000b590:	15c00044 	addi	r23,r2,1
1000b594:	000658c0 	call	1000658c <__muldf3>
1000b598:	a80b883a 	mov	r5,r21
1000b59c:	a009883a 	mov	r4,r20
1000b5a0:	d8c01115 	stw	r3,68(sp)
1000b5a4:	d8800e15 	stw	r2,56(sp)
1000b5a8:	0012fd00 	call	10012fd0 <__fixdfsi>
1000b5ac:	1009883a 	mov	r4,r2
1000b5b0:	1023883a 	mov	r17,r2
1000b5b4:	00130580 	call	10013058 <__floatsidf>
1000b5b8:	a009883a 	mov	r4,r20
1000b5bc:	a80b883a 	mov	r5,r21
1000b5c0:	100d883a 	mov	r6,r2
1000b5c4:	180f883a 	mov	r7,r3
1000b5c8:	0006df80 	call	10006df8 <__subdf3>
1000b5cc:	1813883a 	mov	r9,r3
1000b5d0:	d8c00717 	ldw	r3,28(sp)
1000b5d4:	8c400c04 	addi	r17,r17,48
1000b5d8:	1011883a 	mov	r8,r2
1000b5dc:	1c400005 	stb	r17,0(r3)
1000b5e0:	da801617 	ldw	r10,88(sp)
1000b5e4:	00800044 	movi	r2,1
1000b5e8:	50802326 	beq	r10,r2,1000b678 <_dtoa_r+0x14ac>
1000b5ec:	d8800717 	ldw	r2,28(sp)
1000b5f0:	b82b883a 	mov	r21,r23
1000b5f4:	dc001315 	stw	r16,76(sp)
1000b5f8:	12a9883a 	add	r20,r2,r10
1000b5fc:	4807883a 	mov	r3,r9
1000b600:	4005883a 	mov	r2,r8
1000b604:	dc801415 	stw	r18,80(sp)
1000b608:	000d883a 	mov	r6,zero
1000b60c:	01d00934 	movhi	r7,16420
1000b610:	1009883a 	mov	r4,r2
1000b614:	180b883a 	mov	r5,r3
1000b618:	000658c0 	call	1000658c <__muldf3>
1000b61c:	180b883a 	mov	r5,r3
1000b620:	1009883a 	mov	r4,r2
1000b624:	1821883a 	mov	r16,r3
1000b628:	1025883a 	mov	r18,r2
1000b62c:	0012fd00 	call	10012fd0 <__fixdfsi>
1000b630:	1009883a 	mov	r4,r2
1000b634:	1023883a 	mov	r17,r2
1000b638:	00130580 	call	10013058 <__floatsidf>
1000b63c:	9009883a 	mov	r4,r18
1000b640:	800b883a 	mov	r5,r16
1000b644:	100d883a 	mov	r6,r2
1000b648:	180f883a 	mov	r7,r3
1000b64c:	8c400c04 	addi	r17,r17,48
1000b650:	0006df80 	call	10006df8 <__subdf3>
1000b654:	ad400044 	addi	r21,r21,1
1000b658:	ac7fffc5 	stb	r17,-1(r21)
1000b65c:	ad3fea1e 	bne	r21,r20,1000b608 <__alt_data_end+0xf800b608>
1000b660:	1813883a 	mov	r9,r3
1000b664:	d8c01017 	ldw	r3,64(sp)
1000b668:	dc001317 	ldw	r16,76(sp)
1000b66c:	dc801417 	ldw	r18,80(sp)
1000b670:	1011883a 	mov	r8,r2
1000b674:	b8ef883a 	add	r23,r23,r3
1000b678:	d9000e17 	ldw	r4,56(sp)
1000b67c:	d9401117 	ldw	r5,68(sp)
1000b680:	000d883a 	mov	r6,zero
1000b684:	01cff834 	movhi	r7,16352
1000b688:	da001715 	stw	r8,92(sp)
1000b68c:	da401515 	stw	r9,84(sp)
1000b690:	0011b700 	call	10011b70 <__adddf3>
1000b694:	da001717 	ldw	r8,92(sp)
1000b698:	da401517 	ldw	r9,84(sp)
1000b69c:	1009883a 	mov	r4,r2
1000b6a0:	400d883a 	mov	r6,r8
1000b6a4:	480f883a 	mov	r7,r9
1000b6a8:	180b883a 	mov	r5,r3
1000b6ac:	0012ef00 	call	10012ef0 <__ledf2>
1000b6b0:	da001717 	ldw	r8,92(sp)
1000b6b4:	da401517 	ldw	r9,84(sp)
1000b6b8:	10003b0e 	bge	r2,zero,1000b7a8 <_dtoa_r+0x15dc>
1000b6bc:	d9001217 	ldw	r4,72(sp)
1000b6c0:	bd7fffc3 	ldbu	r21,-1(r23)
1000b6c4:	d9000515 	stw	r4,20(sp)
1000b6c8:	003d1c06 	br	1000ab3c <__alt_data_end+0xf800ab3c>
1000b6cc:	d8c00817 	ldw	r3,32(sp)
1000b6d0:	18a9c83a 	sub	r20,r3,r2
1000b6d4:	0005883a 	mov	r2,zero
1000b6d8:	003d3706 	br	1000abb8 <__alt_data_end+0xf800abb8>
1000b6dc:	00800044 	movi	r2,1
1000b6e0:	003dd006 	br	1000ae24 <__alt_data_end+0xf800ae24>
1000b6e4:	d8c00217 	ldw	r3,8(sp)
1000b6e8:	00800d84 	movi	r2,54
1000b6ec:	dd400917 	ldw	r21,36(sp)
1000b6f0:	10c5c83a 	sub	r2,r2,r3
1000b6f4:	dd000817 	ldw	r20,32(sp)
1000b6f8:	003d2f06 	br	1000abb8 <__alt_data_end+0xf800abb8>
1000b6fc:	9029883a 	mov	r20,r18
1000b700:	982b883a 	mov	r21,r19
1000b704:	04400084 	movi	r17,2
1000b708:	003bc606 	br	1000a624 <__alt_data_end+0xf800a624>
1000b70c:	d8800617 	ldw	r2,24(sp)
1000b710:	103efc26 	beq	r2,zero,1000b304 <__alt_data_end+0xf800b304>
1000b714:	d8c00d17 	ldw	r3,52(sp)
1000b718:	00fc890e 	bge	zero,r3,1000a940 <__alt_data_end+0xf800a940>
1000b71c:	a80b883a 	mov	r5,r21
1000b720:	a009883a 	mov	r4,r20
1000b724:	000d883a 	mov	r6,zero
1000b728:	01d00934 	movhi	r7,16420
1000b72c:	000658c0 	call	1000658c <__muldf3>
1000b730:	89000044 	addi	r4,r17,1
1000b734:	1029883a 	mov	r20,r2
1000b738:	182b883a 	mov	r21,r3
1000b73c:	00130580 	call	10013058 <__floatsidf>
1000b740:	a009883a 	mov	r4,r20
1000b744:	a80b883a 	mov	r5,r21
1000b748:	100d883a 	mov	r6,r2
1000b74c:	180f883a 	mov	r7,r3
1000b750:	000658c0 	call	1000658c <__muldf3>
1000b754:	1009883a 	mov	r4,r2
1000b758:	180b883a 	mov	r5,r3
1000b75c:	000d883a 	mov	r6,zero
1000b760:	01d00734 	movhi	r7,16412
1000b764:	0011b700 	call	10011b70 <__adddf3>
1000b768:	d9000517 	ldw	r4,20(sp)
1000b76c:	1023883a 	mov	r17,r2
1000b770:	00bf3034 	movhi	r2,64704
1000b774:	213fffc4 	addi	r4,r4,-1
1000b778:	1885883a 	add	r2,r3,r2
1000b77c:	d9001215 	stw	r4,72(sp)
1000b780:	d8800e15 	stw	r2,56(sp)
1000b784:	da800d17 	ldw	r10,52(sp)
1000b788:	003bc306 	br	1000a698 <__alt_data_end+0xf800a698>
1000b78c:	b039883a 	mov	fp,r22
1000b790:	01000e44 	movi	r4,57
1000b794:	8825883a 	mov	r18,r17
1000b798:	9dc00044 	addi	r23,r19,1
1000b79c:	99000005 	stb	r4,0(r19)
1000b7a0:	a023883a 	mov	r17,r20
1000b7a4:	003dae06 	br	1000ae60 <__alt_data_end+0xf800ae60>
1000b7a8:	d9800e17 	ldw	r6,56(sp)
1000b7ac:	d9c01117 	ldw	r7,68(sp)
1000b7b0:	0009883a 	mov	r4,zero
1000b7b4:	014ff834 	movhi	r5,16352
1000b7b8:	da001715 	stw	r8,92(sp)
1000b7bc:	da401515 	stw	r9,84(sp)
1000b7c0:	0006df80 	call	10006df8 <__subdf3>
1000b7c4:	da001717 	ldw	r8,92(sp)
1000b7c8:	da401517 	ldw	r9,84(sp)
1000b7cc:	1009883a 	mov	r4,r2
1000b7d0:	180b883a 	mov	r5,r3
1000b7d4:	400d883a 	mov	r6,r8
1000b7d8:	480f883a 	mov	r7,r9
1000b7dc:	0012e100 	call	10012e10 <__gedf2>
1000b7e0:	00bc570e 	bge	zero,r2,1000a940 <__alt_data_end+0xf800a940>
1000b7e4:	01000c04 	movi	r4,48
1000b7e8:	00000106 	br	1000b7f0 <_dtoa_r+0x1624>
1000b7ec:	102f883a 	mov	r23,r2
1000b7f0:	b8bfffc4 	addi	r2,r23,-1
1000b7f4:	10c00007 	ldb	r3,0(r2)
1000b7f8:	193ffc26 	beq	r3,r4,1000b7ec <__alt_data_end+0xf800b7ec>
1000b7fc:	d9801217 	ldw	r6,72(sp)
1000b800:	d9800515 	stw	r6,20(sp)
1000b804:	003c1f06 	br	1000a884 <__alt_data_end+0xf800a884>
1000b808:	d8801217 	ldw	r2,72(sp)
1000b80c:	dc001117 	ldw	r16,68(sp)
1000b810:	d8800515 	stw	r2,20(sp)
1000b814:	003cc906 	br	1000ab3c <__alt_data_end+0xf800ab3c>
1000b818:	dd801317 	ldw	r22,76(sp)
1000b81c:	dc001117 	ldw	r16,68(sp)
1000b820:	dcc01417 	ldw	r19,80(sp)
1000b824:	dc801017 	ldw	r18,64(sp)
1000b828:	003c4506 	br	1000a940 <__alt_data_end+0xf800a940>
1000b82c:	103e5d1e 	bne	r2,zero,1000b1a4 <__alt_data_end+0xf800b1a4>
1000b830:	4080004c 	andi	r2,r8,1
1000b834:	103e5b26 	beq	r2,zero,1000b1a4 <__alt_data_end+0xf800b1a4>
1000b838:	003e5706 	br	1000b198 <__alt_data_end+0xf800b198>
1000b83c:	d8c00317 	ldw	r3,12(sp)
1000b840:	00800084 	movi	r2,2
1000b844:	10c00a16 	blt	r2,r3,1000b870 <_dtoa_r+0x16a4>
1000b848:	d9000d17 	ldw	r4,52(sp)
1000b84c:	003e8306 	br	1000b25c <__alt_data_end+0xf800b25c>
1000b850:	04400084 	movi	r17,2
1000b854:	003b7306 	br	1000a624 <__alt_data_end+0xf800a624>
1000b858:	d9801217 	ldw	r6,72(sp)
1000b85c:	d9800515 	stw	r6,20(sp)
1000b860:	003cb606 	br	1000ab3c <__alt_data_end+0xf800ab3c>
1000b864:	d9001217 	ldw	r4,72(sp)
1000b868:	d9000515 	stw	r4,20(sp)
1000b86c:	003c0506 	br	1000a884 <__alt_data_end+0xf800a884>
1000b870:	d9800d17 	ldw	r6,52(sp)
1000b874:	d9800615 	stw	r6,24(sp)
1000b878:	003e8306 	br	1000b288 <__alt_data_end+0xf800b288>
1000b87c:	d9800317 	ldw	r6,12(sp)
1000b880:	00800084 	movi	r2,2
1000b884:	11800216 	blt	r2,r6,1000b890 <_dtoa_r+0x16c4>
1000b888:	d8800d17 	ldw	r2,52(sp)
1000b88c:	003da606 	br	1000af28 <__alt_data_end+0xf800af28>
1000b890:	d8800d17 	ldw	r2,52(sp)
1000b894:	d8800615 	stw	r2,24(sp)
1000b898:	003e7b06 	br	1000b288 <__alt_data_end+0xf800b288>
1000b89c:	05000044 	movi	r20,1
1000b8a0:	003b0506 	br	1000a4b8 <__alt_data_end+0xf800a4b8>
1000b8a4:	8009883a 	mov	r4,r16
1000b8a8:	80001115 	stw	zero,68(r16)
1000b8ac:	000b883a 	mov	r5,zero
1000b8b0:	000d6d00 	call	1000d6d0 <_Balloc>
1000b8b4:	d8800715 	stw	r2,28(sp)
1000b8b8:	d8c00717 	ldw	r3,28(sp)
1000b8bc:	00bfffc4 	movi	r2,-1
1000b8c0:	01000044 	movi	r4,1
1000b8c4:	d8800615 	stw	r2,24(sp)
1000b8c8:	80c01015 	stw	r3,64(r16)
1000b8cc:	d9000b15 	stw	r4,44(sp)
1000b8d0:	d8002215 	stw	zero,136(sp)
1000b8d4:	d8800d15 	stw	r2,52(sp)
1000b8d8:	003c1906 	br	1000a940 <__alt_data_end+0xf800a940>
1000b8dc:	193d2926 	beq	r3,r4,1000ad84 <__alt_data_end+0xf800ad84>
1000b8e0:	00c00f04 	movi	r3,60
1000b8e4:	1885c83a 	sub	r2,r3,r2
1000b8e8:	003d7b06 	br	1000aed8 <__alt_data_end+0xf800aed8>
1000b8ec:	000b883a 	mov	r5,zero
1000b8f0:	003b1006 	br	1000a534 <__alt_data_end+0xf800a534>

1000b8f4 <_fflush_r>:
1000b8f4:	defffb04 	addi	sp,sp,-20
1000b8f8:	dcc00315 	stw	r19,12(sp)
1000b8fc:	dc000015 	stw	r16,0(sp)
1000b900:	dfc00415 	stw	ra,16(sp)
1000b904:	dc800215 	stw	r18,8(sp)
1000b908:	dc400115 	stw	r17,4(sp)
1000b90c:	2027883a 	mov	r19,r4
1000b910:	2821883a 	mov	r16,r5
1000b914:	20000226 	beq	r4,zero,1000b920 <_fflush_r+0x2c>
1000b918:	20800e17 	ldw	r2,56(r4)
1000b91c:	10005326 	beq	r2,zero,1000ba6c <_fflush_r+0x178>
1000b920:	8080030b 	ldhu	r2,12(r16)
1000b924:	10ffffcc 	andi	r3,r2,65535
1000b928:	18e0001c 	xori	r3,r3,32768
1000b92c:	18e00004 	addi	r3,r3,-32768
1000b930:	18002c26 	beq	r3,zero,1000b9e4 <_fflush_r+0xf0>
1000b934:	10c0020c 	andi	r3,r2,8
1000b938:	1800321e 	bne	r3,zero,1000ba04 <_fflush_r+0x110>
1000b93c:	80c00117 	ldw	r3,4(r16)
1000b940:	10820014 	ori	r2,r2,2048
1000b944:	8080030d 	sth	r2,12(r16)
1000b948:	00c0570e 	bge	zero,r3,1000baa8 <_fflush_r+0x1b4>
1000b94c:	82000a17 	ldw	r8,40(r16)
1000b950:	40002426 	beq	r8,zero,1000b9e4 <_fflush_r+0xf0>
1000b954:	9c400017 	ldw	r17,0(r19)
1000b958:	10c4000c 	andi	r3,r2,4096
1000b95c:	98000015 	stw	zero,0(r19)
1000b960:	18004626 	beq	r3,zero,1000ba7c <_fflush_r+0x188>
1000b964:	81801417 	ldw	r6,80(r16)
1000b968:	10c0010c 	andi	r3,r2,4
1000b96c:	18000626 	beq	r3,zero,1000b988 <_fflush_r+0x94>
1000b970:	80c00117 	ldw	r3,4(r16)
1000b974:	80800c17 	ldw	r2,48(r16)
1000b978:	30cdc83a 	sub	r6,r6,r3
1000b97c:	10000226 	beq	r2,zero,1000b988 <_fflush_r+0x94>
1000b980:	80800f17 	ldw	r2,60(r16)
1000b984:	308dc83a 	sub	r6,r6,r2
1000b988:	81400717 	ldw	r5,28(r16)
1000b98c:	9809883a 	mov	r4,r19
1000b990:	000f883a 	mov	r7,zero
1000b994:	403ee83a 	callr	r8
1000b998:	00ffffc4 	movi	r3,-1
1000b99c:	10c04526 	beq	r2,r3,1000bab4 <_fflush_r+0x1c0>
1000b9a0:	80c0030b 	ldhu	r3,12(r16)
1000b9a4:	81000417 	ldw	r4,16(r16)
1000b9a8:	80000115 	stw	zero,4(r16)
1000b9ac:	197dffcc 	andi	r5,r3,63487
1000b9b0:	8140030d 	sth	r5,12(r16)
1000b9b4:	81000015 	stw	r4,0(r16)
1000b9b8:	18c4000c 	andi	r3,r3,4096
1000b9bc:	18000126 	beq	r3,zero,1000b9c4 <_fflush_r+0xd0>
1000b9c0:	80801415 	stw	r2,80(r16)
1000b9c4:	81400c17 	ldw	r5,48(r16)
1000b9c8:	9c400015 	stw	r17,0(r19)
1000b9cc:	28000526 	beq	r5,zero,1000b9e4 <_fflush_r+0xf0>
1000b9d0:	80801004 	addi	r2,r16,64
1000b9d4:	28800226 	beq	r5,r2,1000b9e0 <_fflush_r+0xec>
1000b9d8:	9809883a 	mov	r4,r19
1000b9dc:	000c0240 	call	1000c024 <_free_r>
1000b9e0:	80000c15 	stw	zero,48(r16)
1000b9e4:	0005883a 	mov	r2,zero
1000b9e8:	dfc00417 	ldw	ra,16(sp)
1000b9ec:	dcc00317 	ldw	r19,12(sp)
1000b9f0:	dc800217 	ldw	r18,8(sp)
1000b9f4:	dc400117 	ldw	r17,4(sp)
1000b9f8:	dc000017 	ldw	r16,0(sp)
1000b9fc:	dec00504 	addi	sp,sp,20
1000ba00:	f800283a 	ret
1000ba04:	84800417 	ldw	r18,16(r16)
1000ba08:	903ff626 	beq	r18,zero,1000b9e4 <__alt_data_end+0xf800b9e4>
1000ba0c:	84400017 	ldw	r17,0(r16)
1000ba10:	108000cc 	andi	r2,r2,3
1000ba14:	84800015 	stw	r18,0(r16)
1000ba18:	8ca3c83a 	sub	r17,r17,r18
1000ba1c:	10001526 	beq	r2,zero,1000ba74 <_fflush_r+0x180>
1000ba20:	0005883a 	mov	r2,zero
1000ba24:	80800215 	stw	r2,8(r16)
1000ba28:	04400316 	blt	zero,r17,1000ba38 <_fflush_r+0x144>
1000ba2c:	003fed06 	br	1000b9e4 <__alt_data_end+0xf800b9e4>
1000ba30:	90a5883a 	add	r18,r18,r2
1000ba34:	047feb0e 	bge	zero,r17,1000b9e4 <__alt_data_end+0xf800b9e4>
1000ba38:	80800917 	ldw	r2,36(r16)
1000ba3c:	81400717 	ldw	r5,28(r16)
1000ba40:	880f883a 	mov	r7,r17
1000ba44:	900d883a 	mov	r6,r18
1000ba48:	9809883a 	mov	r4,r19
1000ba4c:	103ee83a 	callr	r2
1000ba50:	88a3c83a 	sub	r17,r17,r2
1000ba54:	00bff616 	blt	zero,r2,1000ba30 <__alt_data_end+0xf800ba30>
1000ba58:	80c0030b 	ldhu	r3,12(r16)
1000ba5c:	00bfffc4 	movi	r2,-1
1000ba60:	18c01014 	ori	r3,r3,64
1000ba64:	80c0030d 	sth	r3,12(r16)
1000ba68:	003fdf06 	br	1000b9e8 <__alt_data_end+0xf800b9e8>
1000ba6c:	000beb00 	call	1000beb0 <__sinit>
1000ba70:	003fab06 	br	1000b920 <__alt_data_end+0xf800b920>
1000ba74:	80800517 	ldw	r2,20(r16)
1000ba78:	003fea06 	br	1000ba24 <__alt_data_end+0xf800ba24>
1000ba7c:	81400717 	ldw	r5,28(r16)
1000ba80:	000d883a 	mov	r6,zero
1000ba84:	9809883a 	mov	r4,r19
1000ba88:	01c00044 	movi	r7,1
1000ba8c:	403ee83a 	callr	r8
1000ba90:	100d883a 	mov	r6,r2
1000ba94:	00bfffc4 	movi	r2,-1
1000ba98:	30801326 	beq	r6,r2,1000bae8 <_fflush_r+0x1f4>
1000ba9c:	8080030b 	ldhu	r2,12(r16)
1000baa0:	82000a17 	ldw	r8,40(r16)
1000baa4:	003fb006 	br	1000b968 <__alt_data_end+0xf800b968>
1000baa8:	80c00f17 	ldw	r3,60(r16)
1000baac:	00ffa716 	blt	zero,r3,1000b94c <__alt_data_end+0xf800b94c>
1000bab0:	003fcc06 	br	1000b9e4 <__alt_data_end+0xf800b9e4>
1000bab4:	98c00017 	ldw	r3,0(r19)
1000bab8:	183fb926 	beq	r3,zero,1000b9a0 <__alt_data_end+0xf800b9a0>
1000babc:	01000744 	movi	r4,29
1000bac0:	19000226 	beq	r3,r4,1000bacc <_fflush_r+0x1d8>
1000bac4:	01000584 	movi	r4,22
1000bac8:	1900101e 	bne	r3,r4,1000bb0c <_fflush_r+0x218>
1000bacc:	8080030b 	ldhu	r2,12(r16)
1000bad0:	80c00417 	ldw	r3,16(r16)
1000bad4:	80000115 	stw	zero,4(r16)
1000bad8:	10bdffcc 	andi	r2,r2,63487
1000badc:	8080030d 	sth	r2,12(r16)
1000bae0:	80c00015 	stw	r3,0(r16)
1000bae4:	003fb706 	br	1000b9c4 <__alt_data_end+0xf800b9c4>
1000bae8:	98800017 	ldw	r2,0(r19)
1000baec:	103feb26 	beq	r2,zero,1000ba9c <__alt_data_end+0xf800ba9c>
1000baf0:	00c00744 	movi	r3,29
1000baf4:	10c00226 	beq	r2,r3,1000bb00 <_fflush_r+0x20c>
1000baf8:	00c00584 	movi	r3,22
1000bafc:	10ffd61e 	bne	r2,r3,1000ba58 <__alt_data_end+0xf800ba58>
1000bb00:	9c400015 	stw	r17,0(r19)
1000bb04:	0005883a 	mov	r2,zero
1000bb08:	003fb706 	br	1000b9e8 <__alt_data_end+0xf800b9e8>
1000bb0c:	80c0030b 	ldhu	r3,12(r16)
1000bb10:	18c01014 	ori	r3,r3,64
1000bb14:	80c0030d 	sth	r3,12(r16)
1000bb18:	003fb306 	br	1000b9e8 <__alt_data_end+0xf800b9e8>

1000bb1c <fflush>:
1000bb1c:	20000526 	beq	r4,zero,1000bb34 <fflush+0x18>
1000bb20:	008400b4 	movhi	r2,4098
1000bb24:	10a66304 	addi	r2,r2,-26228
1000bb28:	200b883a 	mov	r5,r4
1000bb2c:	11000017 	ldw	r4,0(r2)
1000bb30:	000b8f41 	jmpi	1000b8f4 <_fflush_r>
1000bb34:	008400b4 	movhi	r2,4098
1000bb38:	10a66204 	addi	r2,r2,-26232
1000bb3c:	11000017 	ldw	r4,0(r2)
1000bb40:	01440074 	movhi	r5,4097
1000bb44:	296e3d04 	addi	r5,r5,-18188
1000bb48:	000c8701 	jmpi	1000c870 <_fwalk_reent>

1000bb4c <__fp_lock>:
1000bb4c:	0005883a 	mov	r2,zero
1000bb50:	f800283a 	ret

1000bb54 <__fp_unlock>:
1000bb54:	0005883a 	mov	r2,zero
1000bb58:	f800283a 	ret

1000bb5c <_cleanup_r>:
1000bb5c:	01440074 	movhi	r5,4097
1000bb60:	2941d104 	addi	r5,r5,1860
1000bb64:	000c7b81 	jmpi	1000c7b8 <_fwalk>

1000bb68 <__sinit.part.1>:
1000bb68:	defff604 	addi	sp,sp,-40
1000bb6c:	00c40074 	movhi	r3,4097
1000bb70:	dfc00915 	stw	ra,36(sp)
1000bb74:	df000815 	stw	fp,32(sp)
1000bb78:	ddc00715 	stw	r23,28(sp)
1000bb7c:	dd800615 	stw	r22,24(sp)
1000bb80:	dd400515 	stw	r21,20(sp)
1000bb84:	dd000415 	stw	r20,16(sp)
1000bb88:	dcc00315 	stw	r19,12(sp)
1000bb8c:	dc800215 	stw	r18,8(sp)
1000bb90:	dc400115 	stw	r17,4(sp)
1000bb94:	dc000015 	stw	r16,0(sp)
1000bb98:	18eed704 	addi	r3,r3,-17572
1000bb9c:	24000117 	ldw	r16,4(r4)
1000bba0:	20c00f15 	stw	r3,60(r4)
1000bba4:	07000044 	movi	fp,1
1000bba8:	00c000c4 	movi	r3,3
1000bbac:	2080bb04 	addi	r2,r4,748
1000bbb0:	20c0b915 	stw	r3,740(r4)
1000bbb4:	27000e15 	stw	fp,56(r4)
1000bbb8:	2080ba15 	stw	r2,744(r4)
1000bbbc:	2000b815 	stw	zero,736(r4)
1000bbc0:	05c00204 	movi	r23,8
1000bbc4:	00800104 	movi	r2,4
1000bbc8:	2025883a 	mov	r18,r4
1000bbcc:	b80d883a 	mov	r6,r23
1000bbd0:	81001704 	addi	r4,r16,92
1000bbd4:	000b883a 	mov	r5,zero
1000bbd8:	80000015 	stw	zero,0(r16)
1000bbdc:	80000115 	stw	zero,4(r16)
1000bbe0:	80000215 	stw	zero,8(r16)
1000bbe4:	8080030d 	sth	r2,12(r16)
1000bbe8:	80001915 	stw	zero,100(r16)
1000bbec:	8000038d 	sth	zero,14(r16)
1000bbf0:	80000415 	stw	zero,16(r16)
1000bbf4:	80000515 	stw	zero,20(r16)
1000bbf8:	80000615 	stw	zero,24(r16)
1000bbfc:	000d5ac0 	call	1000d5ac <memset>
1000bc00:	05840074 	movhi	r22,4097
1000bc04:	94400217 	ldw	r17,8(r18)
1000bc08:	05440074 	movhi	r21,4097
1000bc0c:	05040074 	movhi	r20,4097
1000bc10:	04c40074 	movhi	r19,4097
1000bc14:	b5bb6004 	addi	r22,r22,-4736
1000bc18:	ad7b7704 	addi	r21,r21,-4644
1000bc1c:	a53b9604 	addi	r20,r20,-4520
1000bc20:	9cfbad04 	addi	r19,r19,-4428
1000bc24:	85800815 	stw	r22,32(r16)
1000bc28:	85400915 	stw	r21,36(r16)
1000bc2c:	85000a15 	stw	r20,40(r16)
1000bc30:	84c00b15 	stw	r19,44(r16)
1000bc34:	84000715 	stw	r16,28(r16)
1000bc38:	00800284 	movi	r2,10
1000bc3c:	89001704 	addi	r4,r17,92
1000bc40:	b80d883a 	mov	r6,r23
1000bc44:	000b883a 	mov	r5,zero
1000bc48:	88000015 	stw	zero,0(r17)
1000bc4c:	88000115 	stw	zero,4(r17)
1000bc50:	88000215 	stw	zero,8(r17)
1000bc54:	8880030d 	sth	r2,12(r17)
1000bc58:	88001915 	stw	zero,100(r17)
1000bc5c:	8f00038d 	sth	fp,14(r17)
1000bc60:	88000415 	stw	zero,16(r17)
1000bc64:	88000515 	stw	zero,20(r17)
1000bc68:	88000615 	stw	zero,24(r17)
1000bc6c:	000d5ac0 	call	1000d5ac <memset>
1000bc70:	94000317 	ldw	r16,12(r18)
1000bc74:	00800484 	movi	r2,18
1000bc78:	8c400715 	stw	r17,28(r17)
1000bc7c:	8d800815 	stw	r22,32(r17)
1000bc80:	8d400915 	stw	r21,36(r17)
1000bc84:	8d000a15 	stw	r20,40(r17)
1000bc88:	8cc00b15 	stw	r19,44(r17)
1000bc8c:	8080030d 	sth	r2,12(r16)
1000bc90:	00800084 	movi	r2,2
1000bc94:	80000015 	stw	zero,0(r16)
1000bc98:	80000115 	stw	zero,4(r16)
1000bc9c:	80000215 	stw	zero,8(r16)
1000bca0:	80001915 	stw	zero,100(r16)
1000bca4:	8080038d 	sth	r2,14(r16)
1000bca8:	80000415 	stw	zero,16(r16)
1000bcac:	80000515 	stw	zero,20(r16)
1000bcb0:	80000615 	stw	zero,24(r16)
1000bcb4:	81001704 	addi	r4,r16,92
1000bcb8:	000b883a 	mov	r5,zero
1000bcbc:	b80d883a 	mov	r6,r23
1000bcc0:	000d5ac0 	call	1000d5ac <memset>
1000bcc4:	84000715 	stw	r16,28(r16)
1000bcc8:	85800815 	stw	r22,32(r16)
1000bccc:	85400915 	stw	r21,36(r16)
1000bcd0:	85000a15 	stw	r20,40(r16)
1000bcd4:	84c00b15 	stw	r19,44(r16)
1000bcd8:	dfc00917 	ldw	ra,36(sp)
1000bcdc:	df000817 	ldw	fp,32(sp)
1000bce0:	ddc00717 	ldw	r23,28(sp)
1000bce4:	dd800617 	ldw	r22,24(sp)
1000bce8:	dd400517 	ldw	r21,20(sp)
1000bcec:	dd000417 	ldw	r20,16(sp)
1000bcf0:	dcc00317 	ldw	r19,12(sp)
1000bcf4:	dc800217 	ldw	r18,8(sp)
1000bcf8:	dc400117 	ldw	r17,4(sp)
1000bcfc:	dc000017 	ldw	r16,0(sp)
1000bd00:	dec00a04 	addi	sp,sp,40
1000bd04:	f800283a 	ret

1000bd08 <__sfmoreglue>:
1000bd08:	defffc04 	addi	sp,sp,-16
1000bd0c:	dc800215 	stw	r18,8(sp)
1000bd10:	2825883a 	mov	r18,r5
1000bd14:	dc000015 	stw	r16,0(sp)
1000bd18:	01401a04 	movi	r5,104
1000bd1c:	2021883a 	mov	r16,r4
1000bd20:	9009883a 	mov	r4,r18
1000bd24:	dfc00315 	stw	ra,12(sp)
1000bd28:	dc400115 	stw	r17,4(sp)
1000bd2c:	000586c0 	call	1000586c <__mulsi3>
1000bd30:	8009883a 	mov	r4,r16
1000bd34:	11400304 	addi	r5,r2,12
1000bd38:	1023883a 	mov	r17,r2
1000bd3c:	000cbc00 	call	1000cbc0 <_malloc_r>
1000bd40:	1021883a 	mov	r16,r2
1000bd44:	10000726 	beq	r2,zero,1000bd64 <__sfmoreglue+0x5c>
1000bd48:	11000304 	addi	r4,r2,12
1000bd4c:	10000015 	stw	zero,0(r2)
1000bd50:	14800115 	stw	r18,4(r2)
1000bd54:	11000215 	stw	r4,8(r2)
1000bd58:	000b883a 	mov	r5,zero
1000bd5c:	880d883a 	mov	r6,r17
1000bd60:	000d5ac0 	call	1000d5ac <memset>
1000bd64:	8005883a 	mov	r2,r16
1000bd68:	dfc00317 	ldw	ra,12(sp)
1000bd6c:	dc800217 	ldw	r18,8(sp)
1000bd70:	dc400117 	ldw	r17,4(sp)
1000bd74:	dc000017 	ldw	r16,0(sp)
1000bd78:	dec00404 	addi	sp,sp,16
1000bd7c:	f800283a 	ret

1000bd80 <__sfp>:
1000bd80:	008400b4 	movhi	r2,4098
1000bd84:	defffb04 	addi	sp,sp,-20
1000bd88:	10a66204 	addi	r2,r2,-26232
1000bd8c:	dc800215 	stw	r18,8(sp)
1000bd90:	14800017 	ldw	r18,0(r2)
1000bd94:	dcc00315 	stw	r19,12(sp)
1000bd98:	dfc00415 	stw	ra,16(sp)
1000bd9c:	90800e17 	ldw	r2,56(r18)
1000bda0:	dc400115 	stw	r17,4(sp)
1000bda4:	dc000015 	stw	r16,0(sp)
1000bda8:	2027883a 	mov	r19,r4
1000bdac:	1000021e 	bne	r2,zero,1000bdb8 <__sfp+0x38>
1000bdb0:	9009883a 	mov	r4,r18
1000bdb4:	000bb680 	call	1000bb68 <__sinit.part.1>
1000bdb8:	9480b804 	addi	r18,r18,736
1000bdbc:	047fffc4 	movi	r17,-1
1000bdc0:	91400117 	ldw	r5,4(r18)
1000bdc4:	94000217 	ldw	r16,8(r18)
1000bdc8:	297fffc4 	addi	r5,r5,-1
1000bdcc:	28000a16 	blt	r5,zero,1000bdf8 <__sfp+0x78>
1000bdd0:	8080030f 	ldh	r2,12(r16)
1000bdd4:	10000c26 	beq	r2,zero,1000be08 <__sfp+0x88>
1000bdd8:	80c01d04 	addi	r3,r16,116
1000bddc:	00000206 	br	1000bde8 <__sfp+0x68>
1000bde0:	18bfe60f 	ldh	r2,-104(r3)
1000bde4:	10000826 	beq	r2,zero,1000be08 <__sfp+0x88>
1000bde8:	297fffc4 	addi	r5,r5,-1
1000bdec:	1c3ffd04 	addi	r16,r3,-12
1000bdf0:	18c01a04 	addi	r3,r3,104
1000bdf4:	2c7ffa1e 	bne	r5,r17,1000bde0 <__alt_data_end+0xf800bde0>
1000bdf8:	90800017 	ldw	r2,0(r18)
1000bdfc:	10001d26 	beq	r2,zero,1000be74 <__sfp+0xf4>
1000be00:	1025883a 	mov	r18,r2
1000be04:	003fee06 	br	1000bdc0 <__alt_data_end+0xf800bdc0>
1000be08:	00bfffc4 	movi	r2,-1
1000be0c:	8080038d 	sth	r2,14(r16)
1000be10:	00800044 	movi	r2,1
1000be14:	8080030d 	sth	r2,12(r16)
1000be18:	80001915 	stw	zero,100(r16)
1000be1c:	80000015 	stw	zero,0(r16)
1000be20:	80000215 	stw	zero,8(r16)
1000be24:	80000115 	stw	zero,4(r16)
1000be28:	80000415 	stw	zero,16(r16)
1000be2c:	80000515 	stw	zero,20(r16)
1000be30:	80000615 	stw	zero,24(r16)
1000be34:	81001704 	addi	r4,r16,92
1000be38:	000b883a 	mov	r5,zero
1000be3c:	01800204 	movi	r6,8
1000be40:	000d5ac0 	call	1000d5ac <memset>
1000be44:	8005883a 	mov	r2,r16
1000be48:	80000c15 	stw	zero,48(r16)
1000be4c:	80000d15 	stw	zero,52(r16)
1000be50:	80001115 	stw	zero,68(r16)
1000be54:	80001215 	stw	zero,72(r16)
1000be58:	dfc00417 	ldw	ra,16(sp)
1000be5c:	dcc00317 	ldw	r19,12(sp)
1000be60:	dc800217 	ldw	r18,8(sp)
1000be64:	dc400117 	ldw	r17,4(sp)
1000be68:	dc000017 	ldw	r16,0(sp)
1000be6c:	dec00504 	addi	sp,sp,20
1000be70:	f800283a 	ret
1000be74:	9809883a 	mov	r4,r19
1000be78:	01400104 	movi	r5,4
1000be7c:	000bd080 	call	1000bd08 <__sfmoreglue>
1000be80:	90800015 	stw	r2,0(r18)
1000be84:	103fde1e 	bne	r2,zero,1000be00 <__alt_data_end+0xf800be00>
1000be88:	00800304 	movi	r2,12
1000be8c:	98800015 	stw	r2,0(r19)
1000be90:	0005883a 	mov	r2,zero
1000be94:	003ff006 	br	1000be58 <__alt_data_end+0xf800be58>

1000be98 <_cleanup>:
1000be98:	008400b4 	movhi	r2,4098
1000be9c:	10a66204 	addi	r2,r2,-26232
1000bea0:	11000017 	ldw	r4,0(r2)
1000bea4:	01440074 	movhi	r5,4097
1000bea8:	2941d104 	addi	r5,r5,1860
1000beac:	000c7b81 	jmpi	1000c7b8 <_fwalk>

1000beb0 <__sinit>:
1000beb0:	20800e17 	ldw	r2,56(r4)
1000beb4:	10000126 	beq	r2,zero,1000bebc <__sinit+0xc>
1000beb8:	f800283a 	ret
1000bebc:	000bb681 	jmpi	1000bb68 <__sinit.part.1>

1000bec0 <__sfp_lock_acquire>:
1000bec0:	f800283a 	ret

1000bec4 <__sfp_lock_release>:
1000bec4:	f800283a 	ret

1000bec8 <__sinit_lock_acquire>:
1000bec8:	f800283a 	ret

1000becc <__sinit_lock_release>:
1000becc:	f800283a 	ret

1000bed0 <__fp_lock_all>:
1000bed0:	008400b4 	movhi	r2,4098
1000bed4:	10a66304 	addi	r2,r2,-26228
1000bed8:	11000017 	ldw	r4,0(r2)
1000bedc:	01440074 	movhi	r5,4097
1000bee0:	296ed304 	addi	r5,r5,-17588
1000bee4:	000c7b81 	jmpi	1000c7b8 <_fwalk>

1000bee8 <__fp_unlock_all>:
1000bee8:	008400b4 	movhi	r2,4098
1000beec:	10a66304 	addi	r2,r2,-26228
1000bef0:	11000017 	ldw	r4,0(r2)
1000bef4:	01440074 	movhi	r5,4097
1000bef8:	296ed504 	addi	r5,r5,-17580
1000befc:	000c7b81 	jmpi	1000c7b8 <_fwalk>

1000bf00 <_malloc_trim_r>:
1000bf00:	defffb04 	addi	sp,sp,-20
1000bf04:	dcc00315 	stw	r19,12(sp)
1000bf08:	04c400b4 	movhi	r19,4098
1000bf0c:	dc800215 	stw	r18,8(sp)
1000bf10:	dc400115 	stw	r17,4(sp)
1000bf14:	dc000015 	stw	r16,0(sp)
1000bf18:	dfc00415 	stw	ra,16(sp)
1000bf1c:	2821883a 	mov	r16,r5
1000bf20:	9ce0de04 	addi	r19,r19,-31880
1000bf24:	2025883a 	mov	r18,r4
1000bf28:	00137b40 	call	100137b4 <__malloc_lock>
1000bf2c:	98800217 	ldw	r2,8(r19)
1000bf30:	14400117 	ldw	r17,4(r2)
1000bf34:	00bfff04 	movi	r2,-4
1000bf38:	88a2703a 	and	r17,r17,r2
1000bf3c:	8c21c83a 	sub	r16,r17,r16
1000bf40:	8403fbc4 	addi	r16,r16,4079
1000bf44:	8020d33a 	srli	r16,r16,12
1000bf48:	0083ffc4 	movi	r2,4095
1000bf4c:	843fffc4 	addi	r16,r16,-1
1000bf50:	8020933a 	slli	r16,r16,12
1000bf54:	1400060e 	bge	r2,r16,1000bf70 <_malloc_trim_r+0x70>
1000bf58:	9009883a 	mov	r4,r18
1000bf5c:	000b883a 	mov	r5,zero
1000bf60:	000ed2c0 	call	1000ed2c <_sbrk_r>
1000bf64:	98c00217 	ldw	r3,8(r19)
1000bf68:	1c47883a 	add	r3,r3,r17
1000bf6c:	10c00a26 	beq	r2,r3,1000bf98 <_malloc_trim_r+0x98>
1000bf70:	9009883a 	mov	r4,r18
1000bf74:	00137d80 	call	100137d8 <__malloc_unlock>
1000bf78:	0005883a 	mov	r2,zero
1000bf7c:	dfc00417 	ldw	ra,16(sp)
1000bf80:	dcc00317 	ldw	r19,12(sp)
1000bf84:	dc800217 	ldw	r18,8(sp)
1000bf88:	dc400117 	ldw	r17,4(sp)
1000bf8c:	dc000017 	ldw	r16,0(sp)
1000bf90:	dec00504 	addi	sp,sp,20
1000bf94:	f800283a 	ret
1000bf98:	9009883a 	mov	r4,r18
1000bf9c:	040bc83a 	sub	r5,zero,r16
1000bfa0:	000ed2c0 	call	1000ed2c <_sbrk_r>
1000bfa4:	00ffffc4 	movi	r3,-1
1000bfa8:	10c00d26 	beq	r2,r3,1000bfe0 <_malloc_trim_r+0xe0>
1000bfac:	00c400b4 	movhi	r3,4098
1000bfb0:	18ed3b04 	addi	r3,r3,-19220
1000bfb4:	18800017 	ldw	r2,0(r3)
1000bfb8:	99000217 	ldw	r4,8(r19)
1000bfbc:	8c23c83a 	sub	r17,r17,r16
1000bfc0:	8c400054 	ori	r17,r17,1
1000bfc4:	1421c83a 	sub	r16,r2,r16
1000bfc8:	24400115 	stw	r17,4(r4)
1000bfcc:	9009883a 	mov	r4,r18
1000bfd0:	1c000015 	stw	r16,0(r3)
1000bfd4:	00137d80 	call	100137d8 <__malloc_unlock>
1000bfd8:	00800044 	movi	r2,1
1000bfdc:	003fe706 	br	1000bf7c <__alt_data_end+0xf800bf7c>
1000bfe0:	9009883a 	mov	r4,r18
1000bfe4:	000b883a 	mov	r5,zero
1000bfe8:	000ed2c0 	call	1000ed2c <_sbrk_r>
1000bfec:	99000217 	ldw	r4,8(r19)
1000bff0:	014003c4 	movi	r5,15
1000bff4:	1107c83a 	sub	r3,r2,r4
1000bff8:	28ffdd0e 	bge	r5,r3,1000bf70 <__alt_data_end+0xf800bf70>
1000bffc:	014400b4 	movhi	r5,4098
1000c000:	29666504 	addi	r5,r5,-26220
1000c004:	29400017 	ldw	r5,0(r5)
1000c008:	18c00054 	ori	r3,r3,1
1000c00c:	20c00115 	stw	r3,4(r4)
1000c010:	00c400b4 	movhi	r3,4098
1000c014:	1145c83a 	sub	r2,r2,r5
1000c018:	18ed3b04 	addi	r3,r3,-19220
1000c01c:	18800015 	stw	r2,0(r3)
1000c020:	003fd306 	br	1000bf70 <__alt_data_end+0xf800bf70>

1000c024 <_free_r>:
1000c024:	28004c26 	beq	r5,zero,1000c158 <_free_r+0x134>
1000c028:	defffd04 	addi	sp,sp,-12
1000c02c:	dc400115 	stw	r17,4(sp)
1000c030:	dc000015 	stw	r16,0(sp)
1000c034:	2023883a 	mov	r17,r4
1000c038:	2821883a 	mov	r16,r5
1000c03c:	dfc00215 	stw	ra,8(sp)
1000c040:	00137b40 	call	100137b4 <__malloc_lock>
1000c044:	813fff17 	ldw	r4,-4(r16)
1000c048:	00bfff84 	movi	r2,-2
1000c04c:	024400b4 	movhi	r9,4098
1000c050:	81bffe04 	addi	r6,r16,-8
1000c054:	2084703a 	and	r2,r4,r2
1000c058:	4a60de04 	addi	r9,r9,-31880
1000c05c:	308b883a 	add	r5,r6,r2
1000c060:	2a000117 	ldw	r8,4(r5)
1000c064:	49c00217 	ldw	r7,8(r9)
1000c068:	00ffff04 	movi	r3,-4
1000c06c:	40c6703a 	and	r3,r8,r3
1000c070:	39405326 	beq	r7,r5,1000c1c0 <_free_r+0x19c>
1000c074:	28c00115 	stw	r3,4(r5)
1000c078:	2100004c 	andi	r4,r4,1
1000c07c:	2000091e 	bne	r4,zero,1000c0a4 <_free_r+0x80>
1000c080:	81fffe17 	ldw	r7,-8(r16)
1000c084:	4a000204 	addi	r8,r9,8
1000c088:	31cdc83a 	sub	r6,r6,r7
1000c08c:	31000217 	ldw	r4,8(r6)
1000c090:	11c5883a 	add	r2,r2,r7
1000c094:	22006126 	beq	r4,r8,1000c21c <_free_r+0x1f8>
1000c098:	31c00317 	ldw	r7,12(r6)
1000c09c:	21c00315 	stw	r7,12(r4)
1000c0a0:	39000215 	stw	r4,8(r7)
1000c0a4:	28c9883a 	add	r4,r5,r3
1000c0a8:	21c00117 	ldw	r7,4(r4)
1000c0ac:	39c0004c 	andi	r7,r7,1
1000c0b0:	38000d1e 	bne	r7,zero,1000c0e8 <_free_r+0xc4>
1000c0b4:	29000217 	ldw	r4,8(r5)
1000c0b8:	10c5883a 	add	r2,r2,r3
1000c0bc:	00c400b4 	movhi	r3,4098
1000c0c0:	18e0e004 	addi	r3,r3,-31872
1000c0c4:	20c07526 	beq	r4,r3,1000c29c <_free_r+0x278>
1000c0c8:	29c00317 	ldw	r7,12(r5)
1000c0cc:	11400054 	ori	r5,r2,1
1000c0d0:	3087883a 	add	r3,r6,r2
1000c0d4:	21c00315 	stw	r7,12(r4)
1000c0d8:	39000215 	stw	r4,8(r7)
1000c0dc:	31400115 	stw	r5,4(r6)
1000c0e0:	18800015 	stw	r2,0(r3)
1000c0e4:	00000406 	br	1000c0f8 <_free_r+0xd4>
1000c0e8:	10c00054 	ori	r3,r2,1
1000c0ec:	30c00115 	stw	r3,4(r6)
1000c0f0:	3087883a 	add	r3,r6,r2
1000c0f4:	18800015 	stw	r2,0(r3)
1000c0f8:	00c07fc4 	movi	r3,511
1000c0fc:	18801736 	bltu	r3,r2,1000c15c <_free_r+0x138>
1000c100:	1004d0fa 	srli	r2,r2,3
1000c104:	01400044 	movi	r5,1
1000c108:	49000117 	ldw	r4,4(r9)
1000c10c:	1087883a 	add	r3,r2,r2
1000c110:	18c7883a 	add	r3,r3,r3
1000c114:	1005d0ba 	srai	r2,r2,2
1000c118:	18c7883a 	add	r3,r3,r3
1000c11c:	1a47883a 	add	r3,r3,r9
1000c120:	19c00217 	ldw	r7,8(r3)
1000c124:	2884983a 	sll	r2,r5,r2
1000c128:	30c00315 	stw	r3,12(r6)
1000c12c:	31c00215 	stw	r7,8(r6)
1000c130:	1104b03a 	or	r2,r2,r4
1000c134:	19800215 	stw	r6,8(r3)
1000c138:	48800115 	stw	r2,4(r9)
1000c13c:	39800315 	stw	r6,12(r7)
1000c140:	8809883a 	mov	r4,r17
1000c144:	dfc00217 	ldw	ra,8(sp)
1000c148:	dc400117 	ldw	r17,4(sp)
1000c14c:	dc000017 	ldw	r16,0(sp)
1000c150:	dec00304 	addi	sp,sp,12
1000c154:	00137d81 	jmpi	100137d8 <__malloc_unlock>
1000c158:	f800283a 	ret
1000c15c:	1006d27a 	srli	r3,r2,9
1000c160:	01000104 	movi	r4,4
1000c164:	20c04036 	bltu	r4,r3,1000c268 <_free_r+0x244>
1000c168:	1006d1ba 	srli	r3,r2,6
1000c16c:	19400e04 	addi	r5,r3,56
1000c170:	2947883a 	add	r3,r5,r5
1000c174:	18c7883a 	add	r3,r3,r3
1000c178:	18c7883a 	add	r3,r3,r3
1000c17c:	1a49883a 	add	r4,r3,r9
1000c180:	20c00217 	ldw	r3,8(r4)
1000c184:	01c400b4 	movhi	r7,4098
1000c188:	39e0de04 	addi	r7,r7,-31880
1000c18c:	19003b26 	beq	r3,r4,1000c27c <_free_r+0x258>
1000c190:	01ffff04 	movi	r7,-4
1000c194:	19400117 	ldw	r5,4(r3)
1000c198:	29ca703a 	and	r5,r5,r7
1000c19c:	1140022e 	bgeu	r2,r5,1000c1a8 <_free_r+0x184>
1000c1a0:	18c00217 	ldw	r3,8(r3)
1000c1a4:	20fffb1e 	bne	r4,r3,1000c194 <__alt_data_end+0xf800c194>
1000c1a8:	18800317 	ldw	r2,12(r3)
1000c1ac:	30800315 	stw	r2,12(r6)
1000c1b0:	30c00215 	stw	r3,8(r6)
1000c1b4:	11800215 	stw	r6,8(r2)
1000c1b8:	19800315 	stw	r6,12(r3)
1000c1bc:	003fe006 	br	1000c140 <__alt_data_end+0xf800c140>
1000c1c0:	2100004c 	andi	r4,r4,1
1000c1c4:	1885883a 	add	r2,r3,r2
1000c1c8:	2000071e 	bne	r4,zero,1000c1e8 <_free_r+0x1c4>
1000c1cc:	817ffe17 	ldw	r5,-8(r16)
1000c1d0:	314dc83a 	sub	r6,r6,r5
1000c1d4:	30c00317 	ldw	r3,12(r6)
1000c1d8:	31000217 	ldw	r4,8(r6)
1000c1dc:	1145883a 	add	r2,r2,r5
1000c1e0:	20c00315 	stw	r3,12(r4)
1000c1e4:	19000215 	stw	r4,8(r3)
1000c1e8:	10c00054 	ori	r3,r2,1
1000c1ec:	30c00115 	stw	r3,4(r6)
1000c1f0:	00c400b4 	movhi	r3,4098
1000c1f4:	18e66604 	addi	r3,r3,-26216
1000c1f8:	18c00017 	ldw	r3,0(r3)
1000c1fc:	49800215 	stw	r6,8(r9)
1000c200:	10ffcf36 	bltu	r2,r3,1000c140 <__alt_data_end+0xf800c140>
1000c204:	008400b4 	movhi	r2,4098
1000c208:	10ad3304 	addi	r2,r2,-19252
1000c20c:	11400017 	ldw	r5,0(r2)
1000c210:	8809883a 	mov	r4,r17
1000c214:	000bf000 	call	1000bf00 <_malloc_trim_r>
1000c218:	003fc906 	br	1000c140 <__alt_data_end+0xf800c140>
1000c21c:	28c9883a 	add	r4,r5,r3
1000c220:	21000117 	ldw	r4,4(r4)
1000c224:	2100004c 	andi	r4,r4,1
1000c228:	20000a1e 	bne	r4,zero,1000c254 <_free_r+0x230>
1000c22c:	29000317 	ldw	r4,12(r5)
1000c230:	29400217 	ldw	r5,8(r5)
1000c234:	10c5883a 	add	r2,r2,r3
1000c238:	10c00054 	ori	r3,r2,1
1000c23c:	29000315 	stw	r4,12(r5)
1000c240:	21400215 	stw	r5,8(r4)
1000c244:	30c00115 	stw	r3,4(r6)
1000c248:	308d883a 	add	r6,r6,r2
1000c24c:	30800015 	stw	r2,0(r6)
1000c250:	003fbb06 	br	1000c140 <__alt_data_end+0xf800c140>
1000c254:	10c00054 	ori	r3,r2,1
1000c258:	30c00115 	stw	r3,4(r6)
1000c25c:	308d883a 	add	r6,r6,r2
1000c260:	30800015 	stw	r2,0(r6)
1000c264:	003fb606 	br	1000c140 <__alt_data_end+0xf800c140>
1000c268:	01000504 	movi	r4,20
1000c26c:	20c01436 	bltu	r4,r3,1000c2c0 <_free_r+0x29c>
1000c270:	194016c4 	addi	r5,r3,91
1000c274:	2947883a 	add	r3,r5,r5
1000c278:	003fbe06 	br	1000c174 <__alt_data_end+0xf800c174>
1000c27c:	280bd0ba 	srai	r5,r5,2
1000c280:	00800044 	movi	r2,1
1000c284:	39000117 	ldw	r4,4(r7)
1000c288:	114a983a 	sll	r5,r2,r5
1000c28c:	1805883a 	mov	r2,r3
1000c290:	2908b03a 	or	r4,r5,r4
1000c294:	39000115 	stw	r4,4(r7)
1000c298:	003fc406 	br	1000c1ac <__alt_data_end+0xf800c1ac>
1000c29c:	49800515 	stw	r6,20(r9)
1000c2a0:	49800415 	stw	r6,16(r9)
1000c2a4:	10c00054 	ori	r3,r2,1
1000c2a8:	31000315 	stw	r4,12(r6)
1000c2ac:	31000215 	stw	r4,8(r6)
1000c2b0:	30c00115 	stw	r3,4(r6)
1000c2b4:	308d883a 	add	r6,r6,r2
1000c2b8:	30800015 	stw	r2,0(r6)
1000c2bc:	003fa006 	br	1000c140 <__alt_data_end+0xf800c140>
1000c2c0:	01001504 	movi	r4,84
1000c2c4:	20c00436 	bltu	r4,r3,1000c2d8 <_free_r+0x2b4>
1000c2c8:	1006d33a 	srli	r3,r2,12
1000c2cc:	19401b84 	addi	r5,r3,110
1000c2d0:	2947883a 	add	r3,r5,r5
1000c2d4:	003fa706 	br	1000c174 <__alt_data_end+0xf800c174>
1000c2d8:	01005504 	movi	r4,340
1000c2dc:	20c00436 	bltu	r4,r3,1000c2f0 <_free_r+0x2cc>
1000c2e0:	1006d3fa 	srli	r3,r2,15
1000c2e4:	19401dc4 	addi	r5,r3,119
1000c2e8:	2947883a 	add	r3,r5,r5
1000c2ec:	003fa106 	br	1000c174 <__alt_data_end+0xf800c174>
1000c2f0:	01015504 	movi	r4,1364
1000c2f4:	20c00436 	bltu	r4,r3,1000c308 <_free_r+0x2e4>
1000c2f8:	1006d4ba 	srli	r3,r2,18
1000c2fc:	19401f04 	addi	r5,r3,124
1000c300:	2947883a 	add	r3,r5,r5
1000c304:	003f9b06 	br	1000c174 <__alt_data_end+0xf800c174>
1000c308:	00c03f04 	movi	r3,252
1000c30c:	01401f84 	movi	r5,126
1000c310:	003f9806 	br	1000c174 <__alt_data_end+0xf800c174>

1000c314 <__sfvwrite_r>:
1000c314:	30800217 	ldw	r2,8(r6)
1000c318:	10004526 	beq	r2,zero,1000c430 <__sfvwrite_r+0x11c>
1000c31c:	28c0030b 	ldhu	r3,12(r5)
1000c320:	defff404 	addi	sp,sp,-48
1000c324:	dd400715 	stw	r21,28(sp)
1000c328:	dcc00515 	stw	r19,20(sp)
1000c32c:	dc000215 	stw	r16,8(sp)
1000c330:	dfc00b15 	stw	ra,44(sp)
1000c334:	df000a15 	stw	fp,40(sp)
1000c338:	ddc00915 	stw	r23,36(sp)
1000c33c:	dd800815 	stw	r22,32(sp)
1000c340:	dd000615 	stw	r20,24(sp)
1000c344:	dc800415 	stw	r18,16(sp)
1000c348:	dc400315 	stw	r17,12(sp)
1000c34c:	1880020c 	andi	r2,r3,8
1000c350:	2821883a 	mov	r16,r5
1000c354:	202b883a 	mov	r21,r4
1000c358:	3027883a 	mov	r19,r6
1000c35c:	10002526 	beq	r2,zero,1000c3f4 <__sfvwrite_r+0xe0>
1000c360:	28800417 	ldw	r2,16(r5)
1000c364:	10002326 	beq	r2,zero,1000c3f4 <__sfvwrite_r+0xe0>
1000c368:	1880008c 	andi	r2,r3,2
1000c36c:	9c400017 	ldw	r17,0(r19)
1000c370:	10003126 	beq	r2,zero,1000c438 <__sfvwrite_r+0x124>
1000c374:	0029883a 	mov	r20,zero
1000c378:	0025883a 	mov	r18,zero
1000c37c:	05810004 	movi	r22,1024
1000c380:	a00d883a 	mov	r6,r20
1000c384:	a809883a 	mov	r4,r21
1000c388:	90002526 	beq	r18,zero,1000c420 <__sfvwrite_r+0x10c>
1000c38c:	900f883a 	mov	r7,r18
1000c390:	81400717 	ldw	r5,28(r16)
1000c394:	b480012e 	bgeu	r22,r18,1000c39c <__sfvwrite_r+0x88>
1000c398:	01c10004 	movi	r7,1024
1000c39c:	80800917 	ldw	r2,36(r16)
1000c3a0:	103ee83a 	callr	r2
1000c3a4:	0080510e 	bge	zero,r2,1000c4ec <__sfvwrite_r+0x1d8>
1000c3a8:	98c00217 	ldw	r3,8(r19)
1000c3ac:	a0a9883a 	add	r20,r20,r2
1000c3b0:	90a5c83a 	sub	r18,r18,r2
1000c3b4:	1885c83a 	sub	r2,r3,r2
1000c3b8:	98800215 	stw	r2,8(r19)
1000c3bc:	103ff01e 	bne	r2,zero,1000c380 <__alt_data_end+0xf800c380>
1000c3c0:	0005883a 	mov	r2,zero
1000c3c4:	dfc00b17 	ldw	ra,44(sp)
1000c3c8:	df000a17 	ldw	fp,40(sp)
1000c3cc:	ddc00917 	ldw	r23,36(sp)
1000c3d0:	dd800817 	ldw	r22,32(sp)
1000c3d4:	dd400717 	ldw	r21,28(sp)
1000c3d8:	dd000617 	ldw	r20,24(sp)
1000c3dc:	dcc00517 	ldw	r19,20(sp)
1000c3e0:	dc800417 	ldw	r18,16(sp)
1000c3e4:	dc400317 	ldw	r17,12(sp)
1000c3e8:	dc000217 	ldw	r16,8(sp)
1000c3ec:	dec00c04 	addi	sp,sp,48
1000c3f0:	f800283a 	ret
1000c3f4:	a809883a 	mov	r4,r21
1000c3f8:	800b883a 	mov	r5,r16
1000c3fc:	0009e740 	call	10009e74 <__swsetup_r>
1000c400:	80c0030b 	ldhu	r3,12(r16)
1000c404:	103fd826 	beq	r2,zero,1000c368 <__alt_data_end+0xf800c368>
1000c408:	18c01014 	ori	r3,r3,64
1000c40c:	80c0030d 	sth	r3,12(r16)
1000c410:	00c00244 	movi	r3,9
1000c414:	00bfffc4 	movi	r2,-1
1000c418:	a8c00015 	stw	r3,0(r21)
1000c41c:	003fe906 	br	1000c3c4 <__alt_data_end+0xf800c3c4>
1000c420:	8d000017 	ldw	r20,0(r17)
1000c424:	8c800117 	ldw	r18,4(r17)
1000c428:	8c400204 	addi	r17,r17,8
1000c42c:	003fd406 	br	1000c380 <__alt_data_end+0xf800c380>
1000c430:	0005883a 	mov	r2,zero
1000c434:	f800283a 	ret
1000c438:	1880004c 	andi	r2,r3,1
1000c43c:	1000301e 	bne	r2,zero,1000c500 <__sfvwrite_r+0x1ec>
1000c440:	002f883a 	mov	r23,zero
1000c444:	0025883a 	mov	r18,zero
1000c448:	90001c26 	beq	r18,zero,1000c4bc <__sfvwrite_r+0x1a8>
1000c44c:	1880800c 	andi	r2,r3,512
1000c450:	85000217 	ldw	r20,8(r16)
1000c454:	10006c26 	beq	r2,zero,1000c608 <__sfvwrite_r+0x2f4>
1000c458:	a02d883a 	mov	r22,r20
1000c45c:	95008536 	bltu	r18,r20,1000c674 <__sfvwrite_r+0x360>
1000c460:	1881200c 	andi	r2,r3,1152
1000c464:	10009d1e 	bne	r2,zero,1000c6dc <__sfvwrite_r+0x3c8>
1000c468:	81000017 	ldw	r4,0(r16)
1000c46c:	a039883a 	mov	fp,r20
1000c470:	9029883a 	mov	r20,r18
1000c474:	b80b883a 	mov	r5,r23
1000c478:	b00d883a 	mov	r6,r22
1000c47c:	000d4500 	call	1000d450 <memmove>
1000c480:	80c00217 	ldw	r3,8(r16)
1000c484:	81000017 	ldw	r4,0(r16)
1000c488:	9005883a 	mov	r2,r18
1000c48c:	1f39c83a 	sub	fp,r3,fp
1000c490:	258f883a 	add	r7,r4,r22
1000c494:	87000215 	stw	fp,8(r16)
1000c498:	81c00015 	stw	r7,0(r16)
1000c49c:	98c00217 	ldw	r3,8(r19)
1000c4a0:	b8af883a 	add	r23,r23,r2
1000c4a4:	90a5c83a 	sub	r18,r18,r2
1000c4a8:	1d05c83a 	sub	r2,r3,r20
1000c4ac:	98800215 	stw	r2,8(r19)
1000c4b0:	103fc326 	beq	r2,zero,1000c3c0 <__alt_data_end+0xf800c3c0>
1000c4b4:	80c0030b 	ldhu	r3,12(r16)
1000c4b8:	903fe41e 	bne	r18,zero,1000c44c <__alt_data_end+0xf800c44c>
1000c4bc:	8dc00017 	ldw	r23,0(r17)
1000c4c0:	8c800117 	ldw	r18,4(r17)
1000c4c4:	8c400204 	addi	r17,r17,8
1000c4c8:	003fdf06 	br	1000c448 <__alt_data_end+0xf800c448>
1000c4cc:	000e7180 	call	1000e718 <_realloc_r>
1000c4d0:	102d883a 	mov	r22,r2
1000c4d4:	1000a01e 	bne	r2,zero,1000c758 <__sfvwrite_r+0x444>
1000c4d8:	81400417 	ldw	r5,16(r16)
1000c4dc:	a809883a 	mov	r4,r21
1000c4e0:	000c0240 	call	1000c024 <_free_r>
1000c4e4:	00800304 	movi	r2,12
1000c4e8:	a8800015 	stw	r2,0(r21)
1000c4ec:	80c0030b 	ldhu	r3,12(r16)
1000c4f0:	00bfffc4 	movi	r2,-1
1000c4f4:	18c01014 	ori	r3,r3,64
1000c4f8:	80c0030d 	sth	r3,12(r16)
1000c4fc:	003fb106 	br	1000c3c4 <__alt_data_end+0xf800c3c4>
1000c500:	0029883a 	mov	r20,zero
1000c504:	0011883a 	mov	r8,zero
1000c508:	0039883a 	mov	fp,zero
1000c50c:	0025883a 	mov	r18,zero
1000c510:	90001f26 	beq	r18,zero,1000c590 <__sfvwrite_r+0x27c>
1000c514:	40006826 	beq	r8,zero,1000c6b8 <__sfvwrite_r+0x3a4>
1000c518:	a02f883a 	mov	r23,r20
1000c51c:	9500012e 	bgeu	r18,r20,1000c524 <__sfvwrite_r+0x210>
1000c520:	902f883a 	mov	r23,r18
1000c524:	81000017 	ldw	r4,0(r16)
1000c528:	80800417 	ldw	r2,16(r16)
1000c52c:	b82d883a 	mov	r22,r23
1000c530:	81800217 	ldw	r6,8(r16)
1000c534:	81c00517 	ldw	r7,20(r16)
1000c538:	1100022e 	bgeu	r2,r4,1000c544 <__sfvwrite_r+0x230>
1000c53c:	31c7883a 	add	r3,r6,r7
1000c540:	1dc01816 	blt	r3,r23,1000c5a4 <__sfvwrite_r+0x290>
1000c544:	b9c03f16 	blt	r23,r7,1000c644 <__sfvwrite_r+0x330>
1000c548:	80800917 	ldw	r2,36(r16)
1000c54c:	81400717 	ldw	r5,28(r16)
1000c550:	a809883a 	mov	r4,r21
1000c554:	da000115 	stw	r8,4(sp)
1000c558:	e00d883a 	mov	r6,fp
1000c55c:	103ee83a 	callr	r2
1000c560:	102d883a 	mov	r22,r2
1000c564:	da000117 	ldw	r8,4(sp)
1000c568:	00bfe00e 	bge	zero,r2,1000c4ec <__alt_data_end+0xf800c4ec>
1000c56c:	a5a9c83a 	sub	r20,r20,r22
1000c570:	a0001f26 	beq	r20,zero,1000c5f0 <__sfvwrite_r+0x2dc>
1000c574:	98800217 	ldw	r2,8(r19)
1000c578:	e5b9883a 	add	fp,fp,r22
1000c57c:	95a5c83a 	sub	r18,r18,r22
1000c580:	15adc83a 	sub	r22,r2,r22
1000c584:	9d800215 	stw	r22,8(r19)
1000c588:	b03f8d26 	beq	r22,zero,1000c3c0 <__alt_data_end+0xf800c3c0>
1000c58c:	903fe11e 	bne	r18,zero,1000c514 <__alt_data_end+0xf800c514>
1000c590:	8f000017 	ldw	fp,0(r17)
1000c594:	8c800117 	ldw	r18,4(r17)
1000c598:	0011883a 	mov	r8,zero
1000c59c:	8c400204 	addi	r17,r17,8
1000c5a0:	003fdb06 	br	1000c510 <__alt_data_end+0xf800c510>
1000c5a4:	180d883a 	mov	r6,r3
1000c5a8:	e00b883a 	mov	r5,fp
1000c5ac:	da000115 	stw	r8,4(sp)
1000c5b0:	d8c00015 	stw	r3,0(sp)
1000c5b4:	000d4500 	call	1000d450 <memmove>
1000c5b8:	d8c00017 	ldw	r3,0(sp)
1000c5bc:	80800017 	ldw	r2,0(r16)
1000c5c0:	a809883a 	mov	r4,r21
1000c5c4:	800b883a 	mov	r5,r16
1000c5c8:	10c5883a 	add	r2,r2,r3
1000c5cc:	80800015 	stw	r2,0(r16)
1000c5d0:	d8c00015 	stw	r3,0(sp)
1000c5d4:	000b8f40 	call	1000b8f4 <_fflush_r>
1000c5d8:	d8c00017 	ldw	r3,0(sp)
1000c5dc:	da000117 	ldw	r8,4(sp)
1000c5e0:	103fc21e 	bne	r2,zero,1000c4ec <__alt_data_end+0xf800c4ec>
1000c5e4:	182d883a 	mov	r22,r3
1000c5e8:	a5a9c83a 	sub	r20,r20,r22
1000c5ec:	a03fe11e 	bne	r20,zero,1000c574 <__alt_data_end+0xf800c574>
1000c5f0:	a809883a 	mov	r4,r21
1000c5f4:	800b883a 	mov	r5,r16
1000c5f8:	000b8f40 	call	1000b8f4 <_fflush_r>
1000c5fc:	103fbb1e 	bne	r2,zero,1000c4ec <__alt_data_end+0xf800c4ec>
1000c600:	0011883a 	mov	r8,zero
1000c604:	003fdb06 	br	1000c574 <__alt_data_end+0xf800c574>
1000c608:	81000017 	ldw	r4,0(r16)
1000c60c:	80800417 	ldw	r2,16(r16)
1000c610:	1100012e 	bgeu	r2,r4,1000c618 <__sfvwrite_r+0x304>
1000c614:	a4805a36 	bltu	r20,r18,1000c780 <__sfvwrite_r+0x46c>
1000c618:	81c00517 	ldw	r7,20(r16)
1000c61c:	91c01a36 	bltu	r18,r7,1000c688 <__sfvwrite_r+0x374>
1000c620:	80800917 	ldw	r2,36(r16)
1000c624:	81400717 	ldw	r5,28(r16)
1000c628:	a809883a 	mov	r4,r21
1000c62c:	b80d883a 	mov	r6,r23
1000c630:	103ee83a 	callr	r2
1000c634:	1029883a 	mov	r20,r2
1000c638:	00bfac0e 	bge	zero,r2,1000c4ec <__alt_data_end+0xf800c4ec>
1000c63c:	a005883a 	mov	r2,r20
1000c640:	003f9606 	br	1000c49c <__alt_data_end+0xf800c49c>
1000c644:	b80d883a 	mov	r6,r23
1000c648:	e00b883a 	mov	r5,fp
1000c64c:	da000115 	stw	r8,4(sp)
1000c650:	000d4500 	call	1000d450 <memmove>
1000c654:	80800217 	ldw	r2,8(r16)
1000c658:	80c00017 	ldw	r3,0(r16)
1000c65c:	da000117 	ldw	r8,4(sp)
1000c660:	15c5c83a 	sub	r2,r2,r23
1000c664:	1def883a 	add	r23,r3,r23
1000c668:	80800215 	stw	r2,8(r16)
1000c66c:	85c00015 	stw	r23,0(r16)
1000c670:	003fbe06 	br	1000c56c <__alt_data_end+0xf800c56c>
1000c674:	81000017 	ldw	r4,0(r16)
1000c678:	9039883a 	mov	fp,r18
1000c67c:	9029883a 	mov	r20,r18
1000c680:	902d883a 	mov	r22,r18
1000c684:	003f7b06 	br	1000c474 <__alt_data_end+0xf800c474>
1000c688:	b80b883a 	mov	r5,r23
1000c68c:	900d883a 	mov	r6,r18
1000c690:	000d4500 	call	1000d450 <memmove>
1000c694:	80c00217 	ldw	r3,8(r16)
1000c698:	80800017 	ldw	r2,0(r16)
1000c69c:	9029883a 	mov	r20,r18
1000c6a0:	1c87c83a 	sub	r3,r3,r18
1000c6a4:	1485883a 	add	r2,r2,r18
1000c6a8:	80800015 	stw	r2,0(r16)
1000c6ac:	80c00215 	stw	r3,8(r16)
1000c6b0:	9005883a 	mov	r2,r18
1000c6b4:	003f7906 	br	1000c49c <__alt_data_end+0xf800c49c>
1000c6b8:	e009883a 	mov	r4,fp
1000c6bc:	01400284 	movi	r5,10
1000c6c0:	900d883a 	mov	r6,r18
1000c6c4:	000d3680 	call	1000d368 <memchr>
1000c6c8:	10003826 	beq	r2,zero,1000c7ac <__sfvwrite_r+0x498>
1000c6cc:	10800044 	addi	r2,r2,1
1000c6d0:	1729c83a 	sub	r20,r2,fp
1000c6d4:	02000044 	movi	r8,1
1000c6d8:	003f8f06 	br	1000c518 <__alt_data_end+0xf800c518>
1000c6dc:	80800517 	ldw	r2,20(r16)
1000c6e0:	81400417 	ldw	r5,16(r16)
1000c6e4:	87000017 	ldw	fp,0(r16)
1000c6e8:	10a9883a 	add	r20,r2,r2
1000c6ec:	a085883a 	add	r2,r20,r2
1000c6f0:	1028d7fa 	srli	r20,r2,31
1000c6f4:	e179c83a 	sub	fp,fp,r5
1000c6f8:	e1000044 	addi	r4,fp,1
1000c6fc:	a085883a 	add	r2,r20,r2
1000c700:	1029d07a 	srai	r20,r2,1
1000c704:	2485883a 	add	r2,r4,r18
1000c708:	a00d883a 	mov	r6,r20
1000c70c:	a080022e 	bgeu	r20,r2,1000c718 <__sfvwrite_r+0x404>
1000c710:	1029883a 	mov	r20,r2
1000c714:	100d883a 	mov	r6,r2
1000c718:	18c1000c 	andi	r3,r3,1024
1000c71c:	a809883a 	mov	r4,r21
1000c720:	183f6a26 	beq	r3,zero,1000c4cc <__alt_data_end+0xf800c4cc>
1000c724:	300b883a 	mov	r5,r6
1000c728:	000cbc00 	call	1000cbc0 <_malloc_r>
1000c72c:	102d883a 	mov	r22,r2
1000c730:	103f6c26 	beq	r2,zero,1000c4e4 <__alt_data_end+0xf800c4e4>
1000c734:	81400417 	ldw	r5,16(r16)
1000c738:	1009883a 	mov	r4,r2
1000c73c:	e00d883a 	mov	r6,fp
1000c740:	00079d40 	call	100079d4 <memcpy>
1000c744:	8080030b 	ldhu	r2,12(r16)
1000c748:	00fedfc4 	movi	r3,-1153
1000c74c:	10c4703a 	and	r2,r2,r3
1000c750:	10802014 	ori	r2,r2,128
1000c754:	8080030d 	sth	r2,12(r16)
1000c758:	b709883a 	add	r4,r22,fp
1000c75c:	a707c83a 	sub	r3,r20,fp
1000c760:	85800415 	stw	r22,16(r16)
1000c764:	85000515 	stw	r20,20(r16)
1000c768:	81000015 	stw	r4,0(r16)
1000c76c:	9039883a 	mov	fp,r18
1000c770:	80c00215 	stw	r3,8(r16)
1000c774:	9029883a 	mov	r20,r18
1000c778:	902d883a 	mov	r22,r18
1000c77c:	003f3d06 	br	1000c474 <__alt_data_end+0xf800c474>
1000c780:	b80b883a 	mov	r5,r23
1000c784:	a00d883a 	mov	r6,r20
1000c788:	000d4500 	call	1000d450 <memmove>
1000c78c:	80800017 	ldw	r2,0(r16)
1000c790:	a809883a 	mov	r4,r21
1000c794:	800b883a 	mov	r5,r16
1000c798:	1505883a 	add	r2,r2,r20
1000c79c:	80800015 	stw	r2,0(r16)
1000c7a0:	000b8f40 	call	1000b8f4 <_fflush_r>
1000c7a4:	103fa526 	beq	r2,zero,1000c63c <__alt_data_end+0xf800c63c>
1000c7a8:	003f5006 	br	1000c4ec <__alt_data_end+0xf800c4ec>
1000c7ac:	95000044 	addi	r20,r18,1
1000c7b0:	02000044 	movi	r8,1
1000c7b4:	003f5806 	br	1000c518 <__alt_data_end+0xf800c518>

1000c7b8 <_fwalk>:
1000c7b8:	defff804 	addi	sp,sp,-32
1000c7bc:	dd400515 	stw	r21,20(sp)
1000c7c0:	2540b804 	addi	r21,r4,736
1000c7c4:	dd800615 	stw	r22,24(sp)
1000c7c8:	dd000415 	stw	r20,16(sp)
1000c7cc:	dfc00715 	stw	ra,28(sp)
1000c7d0:	dcc00315 	stw	r19,12(sp)
1000c7d4:	dc800215 	stw	r18,8(sp)
1000c7d8:	dc400115 	stw	r17,4(sp)
1000c7dc:	dc000015 	stw	r16,0(sp)
1000c7e0:	2829883a 	mov	r20,r5
1000c7e4:	002d883a 	mov	r22,zero
1000c7e8:	000bec00 	call	1000bec0 <__sfp_lock_acquire>
1000c7ec:	a8001426 	beq	r21,zero,1000c840 <_fwalk+0x88>
1000c7f0:	04ffffc4 	movi	r19,-1
1000c7f4:	ac400117 	ldw	r17,4(r21)
1000c7f8:	ac800217 	ldw	r18,8(r21)
1000c7fc:	8c7fffc4 	addi	r17,r17,-1
1000c800:	88000d16 	blt	r17,zero,1000c838 <_fwalk+0x80>
1000c804:	94000304 	addi	r16,r18,12
1000c808:	94800384 	addi	r18,r18,14
1000c80c:	80c0000f 	ldh	r3,0(r16)
1000c810:	8c7fffc4 	addi	r17,r17,-1
1000c814:	813ffd04 	addi	r4,r16,-12
1000c818:	18000426 	beq	r3,zero,1000c82c <_fwalk+0x74>
1000c81c:	90c0000f 	ldh	r3,0(r18)
1000c820:	1cc00226 	beq	r3,r19,1000c82c <_fwalk+0x74>
1000c824:	a03ee83a 	callr	r20
1000c828:	b0acb03a 	or	r22,r22,r2
1000c82c:	84001a04 	addi	r16,r16,104
1000c830:	94801a04 	addi	r18,r18,104
1000c834:	8cfff51e 	bne	r17,r19,1000c80c <__alt_data_end+0xf800c80c>
1000c838:	ad400017 	ldw	r21,0(r21)
1000c83c:	a83fed1e 	bne	r21,zero,1000c7f4 <__alt_data_end+0xf800c7f4>
1000c840:	000bec40 	call	1000bec4 <__sfp_lock_release>
1000c844:	b005883a 	mov	r2,r22
1000c848:	dfc00717 	ldw	ra,28(sp)
1000c84c:	dd800617 	ldw	r22,24(sp)
1000c850:	dd400517 	ldw	r21,20(sp)
1000c854:	dd000417 	ldw	r20,16(sp)
1000c858:	dcc00317 	ldw	r19,12(sp)
1000c85c:	dc800217 	ldw	r18,8(sp)
1000c860:	dc400117 	ldw	r17,4(sp)
1000c864:	dc000017 	ldw	r16,0(sp)
1000c868:	dec00804 	addi	sp,sp,32
1000c86c:	f800283a 	ret

1000c870 <_fwalk_reent>:
1000c870:	defff804 	addi	sp,sp,-32
1000c874:	dd400515 	stw	r21,20(sp)
1000c878:	2540b804 	addi	r21,r4,736
1000c87c:	dd800615 	stw	r22,24(sp)
1000c880:	dd000415 	stw	r20,16(sp)
1000c884:	dcc00315 	stw	r19,12(sp)
1000c888:	dfc00715 	stw	ra,28(sp)
1000c88c:	dc800215 	stw	r18,8(sp)
1000c890:	dc400115 	stw	r17,4(sp)
1000c894:	dc000015 	stw	r16,0(sp)
1000c898:	2027883a 	mov	r19,r4
1000c89c:	2829883a 	mov	r20,r5
1000c8a0:	002d883a 	mov	r22,zero
1000c8a4:	000bec00 	call	1000bec0 <__sfp_lock_acquire>
1000c8a8:	a8001326 	beq	r21,zero,1000c8f8 <_fwalk_reent+0x88>
1000c8ac:	04bfffc4 	movi	r18,-1
1000c8b0:	ac400117 	ldw	r17,4(r21)
1000c8b4:	ac000217 	ldw	r16,8(r21)
1000c8b8:	8c7fffc4 	addi	r17,r17,-1
1000c8bc:	88000c16 	blt	r17,zero,1000c8f0 <_fwalk_reent+0x80>
1000c8c0:	84000304 	addi	r16,r16,12
1000c8c4:	80c0000f 	ldh	r3,0(r16)
1000c8c8:	8c7fffc4 	addi	r17,r17,-1
1000c8cc:	817ffd04 	addi	r5,r16,-12
1000c8d0:	18000526 	beq	r3,zero,1000c8e8 <_fwalk_reent+0x78>
1000c8d4:	80c0008f 	ldh	r3,2(r16)
1000c8d8:	9809883a 	mov	r4,r19
1000c8dc:	1c800226 	beq	r3,r18,1000c8e8 <_fwalk_reent+0x78>
1000c8e0:	a03ee83a 	callr	r20
1000c8e4:	b0acb03a 	or	r22,r22,r2
1000c8e8:	84001a04 	addi	r16,r16,104
1000c8ec:	8cbff51e 	bne	r17,r18,1000c8c4 <__alt_data_end+0xf800c8c4>
1000c8f0:	ad400017 	ldw	r21,0(r21)
1000c8f4:	a83fee1e 	bne	r21,zero,1000c8b0 <__alt_data_end+0xf800c8b0>
1000c8f8:	000bec40 	call	1000bec4 <__sfp_lock_release>
1000c8fc:	b005883a 	mov	r2,r22
1000c900:	dfc00717 	ldw	ra,28(sp)
1000c904:	dd800617 	ldw	r22,24(sp)
1000c908:	dd400517 	ldw	r21,20(sp)
1000c90c:	dd000417 	ldw	r20,16(sp)
1000c910:	dcc00317 	ldw	r19,12(sp)
1000c914:	dc800217 	ldw	r18,8(sp)
1000c918:	dc400117 	ldw	r17,4(sp)
1000c91c:	dc000017 	ldw	r16,0(sp)
1000c920:	dec00804 	addi	sp,sp,32
1000c924:	f800283a 	ret

1000c928 <_setlocale_r>:
1000c928:	30001b26 	beq	r6,zero,1000c998 <_setlocale_r+0x70>
1000c92c:	01440074 	movhi	r5,4097
1000c930:	defffe04 	addi	sp,sp,-8
1000c934:	295f5604 	addi	r5,r5,32088
1000c938:	3009883a 	mov	r4,r6
1000c93c:	dc000015 	stw	r16,0(sp)
1000c940:	dfc00115 	stw	ra,4(sp)
1000c944:	3021883a 	mov	r16,r6
1000c948:	000eebc0 	call	1000eebc <strcmp>
1000c94c:	1000061e 	bne	r2,zero,1000c968 <_setlocale_r+0x40>
1000c950:	00840074 	movhi	r2,4097
1000c954:	109f5504 	addi	r2,r2,32084
1000c958:	dfc00117 	ldw	ra,4(sp)
1000c95c:	dc000017 	ldw	r16,0(sp)
1000c960:	dec00204 	addi	sp,sp,8
1000c964:	f800283a 	ret
1000c968:	01440074 	movhi	r5,4097
1000c96c:	295f5504 	addi	r5,r5,32084
1000c970:	8009883a 	mov	r4,r16
1000c974:	000eebc0 	call	1000eebc <strcmp>
1000c978:	103ff526 	beq	r2,zero,1000c950 <__alt_data_end+0xf800c950>
1000c97c:	01440074 	movhi	r5,4097
1000c980:	295f4004 	addi	r5,r5,32000
1000c984:	8009883a 	mov	r4,r16
1000c988:	000eebc0 	call	1000eebc <strcmp>
1000c98c:	103ff026 	beq	r2,zero,1000c950 <__alt_data_end+0xf800c950>
1000c990:	0005883a 	mov	r2,zero
1000c994:	003ff006 	br	1000c958 <__alt_data_end+0xf800c958>
1000c998:	00840074 	movhi	r2,4097
1000c99c:	109f5504 	addi	r2,r2,32084
1000c9a0:	f800283a 	ret

1000c9a4 <__locale_charset>:
1000c9a4:	008400b4 	movhi	r2,4098
1000c9a8:	10a0c804 	addi	r2,r2,-31968
1000c9ac:	f800283a 	ret

1000c9b0 <__locale_mb_cur_max>:
1000c9b0:	008400b4 	movhi	r2,4098
1000c9b4:	10a66404 	addi	r2,r2,-26224
1000c9b8:	10800017 	ldw	r2,0(r2)
1000c9bc:	f800283a 	ret

1000c9c0 <__locale_msgcharset>:
1000c9c0:	008400b4 	movhi	r2,4098
1000c9c4:	10a0c004 	addi	r2,r2,-32000
1000c9c8:	f800283a 	ret

1000c9cc <__locale_cjk_lang>:
1000c9cc:	0005883a 	mov	r2,zero
1000c9d0:	f800283a 	ret

1000c9d4 <_localeconv_r>:
1000c9d4:	008400b4 	movhi	r2,4098
1000c9d8:	10a0d004 	addi	r2,r2,-31936
1000c9dc:	f800283a 	ret

1000c9e0 <setlocale>:
1000c9e0:	00c400b4 	movhi	r3,4098
1000c9e4:	18e66304 	addi	r3,r3,-26228
1000c9e8:	2005883a 	mov	r2,r4
1000c9ec:	19000017 	ldw	r4,0(r3)
1000c9f0:	280d883a 	mov	r6,r5
1000c9f4:	100b883a 	mov	r5,r2
1000c9f8:	000c9281 	jmpi	1000c928 <_setlocale_r>

1000c9fc <localeconv>:
1000c9fc:	008400b4 	movhi	r2,4098
1000ca00:	10a0d004 	addi	r2,r2,-31936
1000ca04:	f800283a 	ret

1000ca08 <__smakebuf_r>:
1000ca08:	2880030b 	ldhu	r2,12(r5)
1000ca0c:	10c0008c 	andi	r3,r2,2
1000ca10:	1800401e 	bne	r3,zero,1000cb14 <__smakebuf_r+0x10c>
1000ca14:	deffec04 	addi	sp,sp,-80
1000ca18:	dc000f15 	stw	r16,60(sp)
1000ca1c:	2821883a 	mov	r16,r5
1000ca20:	2940038f 	ldh	r5,14(r5)
1000ca24:	dc401015 	stw	r17,64(sp)
1000ca28:	dfc01315 	stw	ra,76(sp)
1000ca2c:	dcc01215 	stw	r19,72(sp)
1000ca30:	dc801115 	stw	r18,68(sp)
1000ca34:	2023883a 	mov	r17,r4
1000ca38:	28001b16 	blt	r5,zero,1000caa8 <__smakebuf_r+0xa0>
1000ca3c:	d80d883a 	mov	r6,sp
1000ca40:	00109340 	call	10010934 <_fstat_r>
1000ca44:	10001716 	blt	r2,zero,1000caa4 <__smakebuf_r+0x9c>
1000ca48:	d8800117 	ldw	r2,4(sp)
1000ca4c:	00e00014 	movui	r3,32768
1000ca50:	10bc000c 	andi	r2,r2,61440
1000ca54:	10c03726 	beq	r2,r3,1000cb34 <__smakebuf_r+0x12c>
1000ca58:	80c0030b 	ldhu	r3,12(r16)
1000ca5c:	18c20014 	ori	r3,r3,2048
1000ca60:	80c0030d 	sth	r3,12(r16)
1000ca64:	00c80004 	movi	r3,8192
1000ca68:	10c03c1e 	bne	r2,r3,1000cb5c <__smakebuf_r+0x154>
1000ca6c:	8140038f 	ldh	r5,14(r16)
1000ca70:	8809883a 	mov	r4,r17
1000ca74:	001098c0 	call	1001098c <_isatty_r>
1000ca78:	10004e26 	beq	r2,zero,1000cbb4 <__smakebuf_r+0x1ac>
1000ca7c:	8080030b 	ldhu	r2,12(r16)
1000ca80:	04c00044 	movi	r19,1
1000ca84:	80c010c4 	addi	r3,r16,67
1000ca88:	14c4b03a 	or	r2,r2,r19
1000ca8c:	8080030d 	sth	r2,12(r16)
1000ca90:	80c00015 	stw	r3,0(r16)
1000ca94:	80c00415 	stw	r3,16(r16)
1000ca98:	84c00515 	stw	r19,20(r16)
1000ca9c:	04810004 	movi	r18,1024
1000caa0:	00000706 	br	1000cac0 <__smakebuf_r+0xb8>
1000caa4:	8080030b 	ldhu	r2,12(r16)
1000caa8:	10c0200c 	andi	r3,r2,128
1000caac:	18001f1e 	bne	r3,zero,1000cb2c <__smakebuf_r+0x124>
1000cab0:	04810004 	movi	r18,1024
1000cab4:	10820014 	ori	r2,r2,2048
1000cab8:	8080030d 	sth	r2,12(r16)
1000cabc:	0027883a 	mov	r19,zero
1000cac0:	8809883a 	mov	r4,r17
1000cac4:	900b883a 	mov	r5,r18
1000cac8:	000cbc00 	call	1000cbc0 <_malloc_r>
1000cacc:	10002e26 	beq	r2,zero,1000cb88 <__smakebuf_r+0x180>
1000cad0:	80c0030b 	ldhu	r3,12(r16)
1000cad4:	01040074 	movhi	r4,4097
1000cad8:	212ed704 	addi	r4,r4,-17572
1000cadc:	89000f15 	stw	r4,60(r17)
1000cae0:	18c02014 	ori	r3,r3,128
1000cae4:	80c0030d 	sth	r3,12(r16)
1000cae8:	80800015 	stw	r2,0(r16)
1000caec:	80800415 	stw	r2,16(r16)
1000caf0:	84800515 	stw	r18,20(r16)
1000caf4:	98001c1e 	bne	r19,zero,1000cb68 <__smakebuf_r+0x160>
1000caf8:	dfc01317 	ldw	ra,76(sp)
1000cafc:	dcc01217 	ldw	r19,72(sp)
1000cb00:	dc801117 	ldw	r18,68(sp)
1000cb04:	dc401017 	ldw	r17,64(sp)
1000cb08:	dc000f17 	ldw	r16,60(sp)
1000cb0c:	dec01404 	addi	sp,sp,80
1000cb10:	f800283a 	ret
1000cb14:	288010c4 	addi	r2,r5,67
1000cb18:	28800015 	stw	r2,0(r5)
1000cb1c:	28800415 	stw	r2,16(r5)
1000cb20:	00800044 	movi	r2,1
1000cb24:	28800515 	stw	r2,20(r5)
1000cb28:	f800283a 	ret
1000cb2c:	04801004 	movi	r18,64
1000cb30:	003fe006 	br	1000cab4 <__alt_data_end+0xf800cab4>
1000cb34:	81000a17 	ldw	r4,40(r16)
1000cb38:	00c40074 	movhi	r3,4097
1000cb3c:	18fb9604 	addi	r3,r3,-4520
1000cb40:	20ffc51e 	bne	r4,r3,1000ca58 <__alt_data_end+0xf800ca58>
1000cb44:	80c0030b 	ldhu	r3,12(r16)
1000cb48:	01010004 	movi	r4,1024
1000cb4c:	81001315 	stw	r4,76(r16)
1000cb50:	1906b03a 	or	r3,r3,r4
1000cb54:	80c0030d 	sth	r3,12(r16)
1000cb58:	003fc206 	br	1000ca64 <__alt_data_end+0xf800ca64>
1000cb5c:	0027883a 	mov	r19,zero
1000cb60:	04810004 	movi	r18,1024
1000cb64:	003fd606 	br	1000cac0 <__alt_data_end+0xf800cac0>
1000cb68:	8140038f 	ldh	r5,14(r16)
1000cb6c:	8809883a 	mov	r4,r17
1000cb70:	001098c0 	call	1001098c <_isatty_r>
1000cb74:	103fe026 	beq	r2,zero,1000caf8 <__alt_data_end+0xf800caf8>
1000cb78:	8080030b 	ldhu	r2,12(r16)
1000cb7c:	10800054 	ori	r2,r2,1
1000cb80:	8080030d 	sth	r2,12(r16)
1000cb84:	003fdc06 	br	1000caf8 <__alt_data_end+0xf800caf8>
1000cb88:	8080030b 	ldhu	r2,12(r16)
1000cb8c:	10c0800c 	andi	r3,r2,512
1000cb90:	183fd91e 	bne	r3,zero,1000caf8 <__alt_data_end+0xf800caf8>
1000cb94:	10800094 	ori	r2,r2,2
1000cb98:	80c010c4 	addi	r3,r16,67
1000cb9c:	8080030d 	sth	r2,12(r16)
1000cba0:	00800044 	movi	r2,1
1000cba4:	80c00015 	stw	r3,0(r16)
1000cba8:	80c00415 	stw	r3,16(r16)
1000cbac:	80800515 	stw	r2,20(r16)
1000cbb0:	003fd106 	br	1000caf8 <__alt_data_end+0xf800caf8>
1000cbb4:	04c00044 	movi	r19,1
1000cbb8:	04810004 	movi	r18,1024
1000cbbc:	003fc006 	br	1000cac0 <__alt_data_end+0xf800cac0>

1000cbc0 <_malloc_r>:
1000cbc0:	defff504 	addi	sp,sp,-44
1000cbc4:	dc800315 	stw	r18,12(sp)
1000cbc8:	dfc00a15 	stw	ra,40(sp)
1000cbcc:	df000915 	stw	fp,36(sp)
1000cbd0:	ddc00815 	stw	r23,32(sp)
1000cbd4:	dd800715 	stw	r22,28(sp)
1000cbd8:	dd400615 	stw	r21,24(sp)
1000cbdc:	dd000515 	stw	r20,20(sp)
1000cbe0:	dcc00415 	stw	r19,16(sp)
1000cbe4:	dc400215 	stw	r17,8(sp)
1000cbe8:	dc000115 	stw	r16,4(sp)
1000cbec:	288002c4 	addi	r2,r5,11
1000cbf0:	00c00584 	movi	r3,22
1000cbf4:	2025883a 	mov	r18,r4
1000cbf8:	18802a2e 	bgeu	r3,r2,1000cca4 <_malloc_r+0xe4>
1000cbfc:	047ffe04 	movi	r17,-8
1000cc00:	1462703a 	and	r17,r2,r17
1000cc04:	88009e16 	blt	r17,zero,1000ce80 <_malloc_r+0x2c0>
1000cc08:	89409d36 	bltu	r17,r5,1000ce80 <_malloc_r+0x2c0>
1000cc0c:	00137b40 	call	100137b4 <__malloc_lock>
1000cc10:	00807dc4 	movi	r2,503
1000cc14:	14402736 	bltu	r2,r17,1000ccb4 <_malloc_r+0xf4>
1000cc18:	8806d0fa 	srli	r3,r17,3
1000cc1c:	04c400b4 	movhi	r19,4098
1000cc20:	9ce0de04 	addi	r19,r19,-31880
1000cc24:	18c5883a 	add	r2,r3,r3
1000cc28:	1085883a 	add	r2,r2,r2
1000cc2c:	1085883a 	add	r2,r2,r2
1000cc30:	9885883a 	add	r2,r19,r2
1000cc34:	14000317 	ldw	r16,12(r2)
1000cc38:	80814a26 	beq	r16,r2,1000d164 <_malloc_r+0x5a4>
1000cc3c:	80c00117 	ldw	r3,4(r16)
1000cc40:	81000317 	ldw	r4,12(r16)
1000cc44:	00bfff04 	movi	r2,-4
1000cc48:	1884703a 	and	r2,r3,r2
1000cc4c:	81400217 	ldw	r5,8(r16)
1000cc50:	8085883a 	add	r2,r16,r2
1000cc54:	10c00117 	ldw	r3,4(r2)
1000cc58:	29000315 	stw	r4,12(r5)
1000cc5c:	21400215 	stw	r5,8(r4)
1000cc60:	18c00054 	ori	r3,r3,1
1000cc64:	10c00115 	stw	r3,4(r2)
1000cc68:	9009883a 	mov	r4,r18
1000cc6c:	00137d80 	call	100137d8 <__malloc_unlock>
1000cc70:	80800204 	addi	r2,r16,8
1000cc74:	dfc00a17 	ldw	ra,40(sp)
1000cc78:	df000917 	ldw	fp,36(sp)
1000cc7c:	ddc00817 	ldw	r23,32(sp)
1000cc80:	dd800717 	ldw	r22,28(sp)
1000cc84:	dd400617 	ldw	r21,24(sp)
1000cc88:	dd000517 	ldw	r20,20(sp)
1000cc8c:	dcc00417 	ldw	r19,16(sp)
1000cc90:	dc800317 	ldw	r18,12(sp)
1000cc94:	dc400217 	ldw	r17,8(sp)
1000cc98:	dc000117 	ldw	r16,4(sp)
1000cc9c:	dec00b04 	addi	sp,sp,44
1000cca0:	f800283a 	ret
1000cca4:	04400404 	movi	r17,16
1000cca8:	89407536 	bltu	r17,r5,1000ce80 <_malloc_r+0x2c0>
1000ccac:	00137b40 	call	100137b4 <__malloc_lock>
1000ccb0:	003fd906 	br	1000cc18 <__alt_data_end+0xf800cc18>
1000ccb4:	8806d27a 	srli	r3,r17,9
1000ccb8:	18007526 	beq	r3,zero,1000ce90 <_malloc_r+0x2d0>
1000ccbc:	00800104 	movi	r2,4
1000ccc0:	10c0ef36 	bltu	r2,r3,1000d080 <_malloc_r+0x4c0>
1000ccc4:	8806d1ba 	srli	r3,r17,6
1000ccc8:	19c00e04 	addi	r7,r3,56
1000cccc:	39cb883a 	add	r5,r7,r7
1000ccd0:	04c400b4 	movhi	r19,4098
1000ccd4:	294b883a 	add	r5,r5,r5
1000ccd8:	9ce0de04 	addi	r19,r19,-31880
1000ccdc:	294b883a 	add	r5,r5,r5
1000cce0:	994b883a 	add	r5,r19,r5
1000cce4:	2c000317 	ldw	r16,12(r5)
1000cce8:	2c000e26 	beq	r5,r16,1000cd24 <_malloc_r+0x164>
1000ccec:	80800117 	ldw	r2,4(r16)
1000ccf0:	01bfff04 	movi	r6,-4
1000ccf4:	010003c4 	movi	r4,15
1000ccf8:	1184703a 	and	r2,r2,r6
1000ccfc:	1447c83a 	sub	r3,r2,r17
1000cd00:	20c00716 	blt	r4,r3,1000cd20 <_malloc_r+0x160>
1000cd04:	1800650e 	bge	r3,zero,1000ce9c <_malloc_r+0x2dc>
1000cd08:	84000317 	ldw	r16,12(r16)
1000cd0c:	2c000526 	beq	r5,r16,1000cd24 <_malloc_r+0x164>
1000cd10:	80800117 	ldw	r2,4(r16)
1000cd14:	1184703a 	and	r2,r2,r6
1000cd18:	1447c83a 	sub	r3,r2,r17
1000cd1c:	20fff90e 	bge	r4,r3,1000cd04 <__alt_data_end+0xf800cd04>
1000cd20:	39ffffc4 	addi	r7,r7,-1
1000cd24:	38c00044 	addi	r3,r7,1
1000cd28:	018400b4 	movhi	r6,4098
1000cd2c:	9c000417 	ldw	r16,16(r19)
1000cd30:	31a0de04 	addi	r6,r6,-31880
1000cd34:	32400204 	addi	r9,r6,8
1000cd38:	82410326 	beq	r16,r9,1000d148 <_malloc_r+0x588>
1000cd3c:	81000117 	ldw	r4,4(r16)
1000cd40:	00bfff04 	movi	r2,-4
1000cd44:	208e703a 	and	r7,r4,r2
1000cd48:	3c45c83a 	sub	r2,r7,r17
1000cd4c:	010003c4 	movi	r4,15
1000cd50:	2080ee16 	blt	r4,r2,1000d10c <_malloc_r+0x54c>
1000cd54:	32400515 	stw	r9,20(r6)
1000cd58:	32400415 	stw	r9,16(r6)
1000cd5c:	1000510e 	bge	r2,zero,1000cea4 <_malloc_r+0x2e4>
1000cd60:	00807fc4 	movi	r2,511
1000cd64:	11c0ce36 	bltu	r2,r7,1000d0a0 <_malloc_r+0x4e0>
1000cd68:	3808d0fa 	srli	r4,r7,3
1000cd6c:	01c00044 	movi	r7,1
1000cd70:	30800117 	ldw	r2,4(r6)
1000cd74:	210b883a 	add	r5,r4,r4
1000cd78:	294b883a 	add	r5,r5,r5
1000cd7c:	2009d0ba 	srai	r4,r4,2
1000cd80:	294b883a 	add	r5,r5,r5
1000cd84:	298b883a 	add	r5,r5,r6
1000cd88:	2a000217 	ldw	r8,8(r5)
1000cd8c:	3908983a 	sll	r4,r7,r4
1000cd90:	81400315 	stw	r5,12(r16)
1000cd94:	82000215 	stw	r8,8(r16)
1000cd98:	2088b03a 	or	r4,r4,r2
1000cd9c:	2c000215 	stw	r16,8(r5)
1000cda0:	31000115 	stw	r4,4(r6)
1000cda4:	44000315 	stw	r16,12(r8)
1000cda8:	1805d0ba 	srai	r2,r3,2
1000cdac:	01400044 	movi	r5,1
1000cdb0:	288a983a 	sll	r5,r5,r2
1000cdb4:	21404336 	bltu	r4,r5,1000cec4 <_malloc_r+0x304>
1000cdb8:	2144703a 	and	r2,r4,r5
1000cdbc:	10000a1e 	bne	r2,zero,1000cde8 <_malloc_r+0x228>
1000cdc0:	00bfff04 	movi	r2,-4
1000cdc4:	294b883a 	add	r5,r5,r5
1000cdc8:	1886703a 	and	r3,r3,r2
1000cdcc:	2144703a 	and	r2,r4,r5
1000cdd0:	18c00104 	addi	r3,r3,4
1000cdd4:	1000041e 	bne	r2,zero,1000cde8 <_malloc_r+0x228>
1000cdd8:	294b883a 	add	r5,r5,r5
1000cddc:	2144703a 	and	r2,r4,r5
1000cde0:	18c00104 	addi	r3,r3,4
1000cde4:	103ffc26 	beq	r2,zero,1000cdd8 <__alt_data_end+0xf800cdd8>
1000cde8:	023fff04 	movi	r8,-4
1000cdec:	01c003c4 	movi	r7,15
1000cdf0:	18c5883a 	add	r2,r3,r3
1000cdf4:	1085883a 	add	r2,r2,r2
1000cdf8:	1085883a 	add	r2,r2,r2
1000cdfc:	9895883a 	add	r10,r19,r2
1000ce00:	52c00304 	addi	r11,r10,12
1000ce04:	1819883a 	mov	r12,r3
1000ce08:	5c000017 	ldw	r16,0(r11)
1000ce0c:	59bffd04 	addi	r6,r11,-12
1000ce10:	8180041e 	bne	r16,r6,1000ce24 <_malloc_r+0x264>
1000ce14:	0000ce06 	br	1000d150 <_malloc_r+0x590>
1000ce18:	2000d70e 	bge	r4,zero,1000d178 <_malloc_r+0x5b8>
1000ce1c:	84000317 	ldw	r16,12(r16)
1000ce20:	8180cb26 	beq	r16,r6,1000d150 <_malloc_r+0x590>
1000ce24:	80800117 	ldw	r2,4(r16)
1000ce28:	1204703a 	and	r2,r2,r8
1000ce2c:	1449c83a 	sub	r4,r2,r17
1000ce30:	393ff90e 	bge	r7,r4,1000ce18 <__alt_data_end+0xf800ce18>
1000ce34:	80800317 	ldw	r2,12(r16)
1000ce38:	80c00217 	ldw	r3,8(r16)
1000ce3c:	89400054 	ori	r5,r17,1
1000ce40:	81400115 	stw	r5,4(r16)
1000ce44:	18800315 	stw	r2,12(r3)
1000ce48:	10c00215 	stw	r3,8(r2)
1000ce4c:	8463883a 	add	r17,r16,r17
1000ce50:	9c400515 	stw	r17,20(r19)
1000ce54:	9c400415 	stw	r17,16(r19)
1000ce58:	20800054 	ori	r2,r4,1
1000ce5c:	88800115 	stw	r2,4(r17)
1000ce60:	8a400315 	stw	r9,12(r17)
1000ce64:	8a400215 	stw	r9,8(r17)
1000ce68:	8923883a 	add	r17,r17,r4
1000ce6c:	89000015 	stw	r4,0(r17)
1000ce70:	9009883a 	mov	r4,r18
1000ce74:	00137d80 	call	100137d8 <__malloc_unlock>
1000ce78:	80800204 	addi	r2,r16,8
1000ce7c:	003f7d06 	br	1000cc74 <__alt_data_end+0xf800cc74>
1000ce80:	00800304 	movi	r2,12
1000ce84:	90800015 	stw	r2,0(r18)
1000ce88:	0005883a 	mov	r2,zero
1000ce8c:	003f7906 	br	1000cc74 <__alt_data_end+0xf800cc74>
1000ce90:	01401f84 	movi	r5,126
1000ce94:	01c00fc4 	movi	r7,63
1000ce98:	003f8d06 	br	1000ccd0 <__alt_data_end+0xf800ccd0>
1000ce9c:	81000317 	ldw	r4,12(r16)
1000cea0:	003f6a06 	br	1000cc4c <__alt_data_end+0xf800cc4c>
1000cea4:	81c5883a 	add	r2,r16,r7
1000cea8:	10c00117 	ldw	r3,4(r2)
1000ceac:	9009883a 	mov	r4,r18
1000ceb0:	18c00054 	ori	r3,r3,1
1000ceb4:	10c00115 	stw	r3,4(r2)
1000ceb8:	00137d80 	call	100137d8 <__malloc_unlock>
1000cebc:	80800204 	addi	r2,r16,8
1000cec0:	003f6c06 	br	1000cc74 <__alt_data_end+0xf800cc74>
1000cec4:	9c000217 	ldw	r16,8(r19)
1000cec8:	00bfff04 	movi	r2,-4
1000cecc:	85800117 	ldw	r22,4(r16)
1000ced0:	b0ac703a 	and	r22,r22,r2
1000ced4:	b4400336 	bltu	r22,r17,1000cee4 <_malloc_r+0x324>
1000ced8:	b445c83a 	sub	r2,r22,r17
1000cedc:	00c003c4 	movi	r3,15
1000cee0:	18805d16 	blt	r3,r2,1000d058 <_malloc_r+0x498>
1000cee4:	05c400b4 	movhi	r23,4098
1000cee8:	008400b4 	movhi	r2,4098
1000ceec:	bde66504 	addi	r23,r23,-26220
1000cef0:	10ad3304 	addi	r2,r2,-19252
1000cef4:	15400017 	ldw	r21,0(r2)
1000cef8:	b9000017 	ldw	r4,0(r23)
1000cefc:	00ffffc4 	movi	r3,-1
1000cf00:	858d883a 	add	r6,r16,r22
1000cf04:	8d6b883a 	add	r21,r17,r21
1000cf08:	20c0e426 	beq	r4,r3,1000d29c <_malloc_r+0x6dc>
1000cf0c:	ad4403c4 	addi	r21,r21,4111
1000cf10:	00fc0004 	movi	r3,-4096
1000cf14:	a8ea703a 	and	r21,r21,r3
1000cf18:	9009883a 	mov	r4,r18
1000cf1c:	a80b883a 	mov	r5,r21
1000cf20:	d9800015 	stw	r6,0(sp)
1000cf24:	000ed2c0 	call	1000ed2c <_sbrk_r>
1000cf28:	00ffffc4 	movi	r3,-1
1000cf2c:	1029883a 	mov	r20,r2
1000cf30:	d9800017 	ldw	r6,0(sp)
1000cf34:	10c0a426 	beq	r2,r3,1000d1c8 <_malloc_r+0x608>
1000cf38:	1180a236 	bltu	r2,r6,1000d1c4 <_malloc_r+0x604>
1000cf3c:	070400b4 	movhi	fp,4098
1000cf40:	e72d3b04 	addi	fp,fp,-19220
1000cf44:	e0c00017 	ldw	r3,0(fp)
1000cf48:	a8c7883a 	add	r3,r21,r3
1000cf4c:	e0c00015 	stw	r3,0(fp)
1000cf50:	3500da26 	beq	r6,r20,1000d2bc <_malloc_r+0x6fc>
1000cf54:	b9000017 	ldw	r4,0(r23)
1000cf58:	00bfffc4 	movi	r2,-1
1000cf5c:	2080e426 	beq	r4,r2,1000d2f0 <_malloc_r+0x730>
1000cf60:	a185c83a 	sub	r2,r20,r6
1000cf64:	1885883a 	add	r2,r3,r2
1000cf68:	e0800015 	stw	r2,0(fp)
1000cf6c:	a0c001cc 	andi	r3,r20,7
1000cf70:	1800b526 	beq	r3,zero,1000d248 <_malloc_r+0x688>
1000cf74:	a0e9c83a 	sub	r20,r20,r3
1000cf78:	00840204 	movi	r2,4104
1000cf7c:	a5000204 	addi	r20,r20,8
1000cf80:	10c7c83a 	sub	r3,r2,r3
1000cf84:	a545883a 	add	r2,r20,r21
1000cf88:	1083ffcc 	andi	r2,r2,4095
1000cf8c:	18abc83a 	sub	r21,r3,r2
1000cf90:	9009883a 	mov	r4,r18
1000cf94:	a80b883a 	mov	r5,r21
1000cf98:	000ed2c0 	call	1000ed2c <_sbrk_r>
1000cf9c:	00ffffc4 	movi	r3,-1
1000cfa0:	10c0d026 	beq	r2,r3,1000d2e4 <_malloc_r+0x724>
1000cfa4:	1507c83a 	sub	r3,r2,r20
1000cfa8:	a8c7883a 	add	r3,r21,r3
1000cfac:	18c00054 	ori	r3,r3,1
1000cfb0:	e0800017 	ldw	r2,0(fp)
1000cfb4:	9d000215 	stw	r20,8(r19)
1000cfb8:	a0c00115 	stw	r3,4(r20)
1000cfbc:	a887883a 	add	r3,r21,r2
1000cfc0:	e0c00015 	stw	r3,0(fp)
1000cfc4:	84c00e26 	beq	r16,r19,1000d000 <_malloc_r+0x440>
1000cfc8:	018003c4 	movi	r6,15
1000cfcc:	3580a02e 	bgeu	r6,r22,1000d250 <_malloc_r+0x690>
1000cfd0:	81400117 	ldw	r5,4(r16)
1000cfd4:	013ffe04 	movi	r4,-8
1000cfd8:	b0bffd04 	addi	r2,r22,-12
1000cfdc:	1104703a 	and	r2,r2,r4
1000cfe0:	2900004c 	andi	r4,r5,1
1000cfe4:	1108b03a 	or	r4,r2,r4
1000cfe8:	81000115 	stw	r4,4(r16)
1000cfec:	01400144 	movi	r5,5
1000cff0:	8089883a 	add	r4,r16,r2
1000cff4:	21400115 	stw	r5,4(r4)
1000cff8:	21400215 	stw	r5,8(r4)
1000cffc:	3080c036 	bltu	r6,r2,1000d300 <_malloc_r+0x740>
1000d000:	008400b4 	movhi	r2,4098
1000d004:	10ad3204 	addi	r2,r2,-19256
1000d008:	11000017 	ldw	r4,0(r2)
1000d00c:	20c0012e 	bgeu	r4,r3,1000d014 <_malloc_r+0x454>
1000d010:	10c00015 	stw	r3,0(r2)
1000d014:	008400b4 	movhi	r2,4098
1000d018:	10ad3104 	addi	r2,r2,-19260
1000d01c:	11000017 	ldw	r4,0(r2)
1000d020:	9c000217 	ldw	r16,8(r19)
1000d024:	20c0012e 	bgeu	r4,r3,1000d02c <_malloc_r+0x46c>
1000d028:	10c00015 	stw	r3,0(r2)
1000d02c:	80c00117 	ldw	r3,4(r16)
1000d030:	00bfff04 	movi	r2,-4
1000d034:	1886703a 	and	r3,r3,r2
1000d038:	1c45c83a 	sub	r2,r3,r17
1000d03c:	1c400236 	bltu	r3,r17,1000d048 <_malloc_r+0x488>
1000d040:	00c003c4 	movi	r3,15
1000d044:	18800416 	blt	r3,r2,1000d058 <_malloc_r+0x498>
1000d048:	9009883a 	mov	r4,r18
1000d04c:	00137d80 	call	100137d8 <__malloc_unlock>
1000d050:	0005883a 	mov	r2,zero
1000d054:	003f0706 	br	1000cc74 <__alt_data_end+0xf800cc74>
1000d058:	88c00054 	ori	r3,r17,1
1000d05c:	80c00115 	stw	r3,4(r16)
1000d060:	8463883a 	add	r17,r16,r17
1000d064:	10800054 	ori	r2,r2,1
1000d068:	9c400215 	stw	r17,8(r19)
1000d06c:	88800115 	stw	r2,4(r17)
1000d070:	9009883a 	mov	r4,r18
1000d074:	00137d80 	call	100137d8 <__malloc_unlock>
1000d078:	80800204 	addi	r2,r16,8
1000d07c:	003efd06 	br	1000cc74 <__alt_data_end+0xf800cc74>
1000d080:	00800504 	movi	r2,20
1000d084:	10c0482e 	bgeu	r2,r3,1000d1a8 <_malloc_r+0x5e8>
1000d088:	00801504 	movi	r2,84
1000d08c:	10c06836 	bltu	r2,r3,1000d230 <_malloc_r+0x670>
1000d090:	8806d33a 	srli	r3,r17,12
1000d094:	19c01b84 	addi	r7,r3,110
1000d098:	39cb883a 	add	r5,r7,r7
1000d09c:	003f0c06 	br	1000ccd0 <__alt_data_end+0xf800ccd0>
1000d0a0:	3804d27a 	srli	r2,r7,9
1000d0a4:	01000104 	movi	r4,4
1000d0a8:	2080422e 	bgeu	r4,r2,1000d1b4 <_malloc_r+0x5f4>
1000d0ac:	01000504 	movi	r4,20
1000d0b0:	20807c36 	bltu	r4,r2,1000d2a4 <_malloc_r+0x6e4>
1000d0b4:	110016c4 	addi	r4,r2,91
1000d0b8:	210b883a 	add	r5,r4,r4
1000d0bc:	294b883a 	add	r5,r5,r5
1000d0c0:	294b883a 	add	r5,r5,r5
1000d0c4:	994b883a 	add	r5,r19,r5
1000d0c8:	28800217 	ldw	r2,8(r5)
1000d0cc:	020400b4 	movhi	r8,4098
1000d0d0:	4220de04 	addi	r8,r8,-31880
1000d0d4:	11406326 	beq	r2,r5,1000d264 <_malloc_r+0x6a4>
1000d0d8:	01bfff04 	movi	r6,-4
1000d0dc:	11000117 	ldw	r4,4(r2)
1000d0e0:	2188703a 	and	r4,r4,r6
1000d0e4:	3900022e 	bgeu	r7,r4,1000d0f0 <_malloc_r+0x530>
1000d0e8:	10800217 	ldw	r2,8(r2)
1000d0ec:	28bffb1e 	bne	r5,r2,1000d0dc <__alt_data_end+0xf800d0dc>
1000d0f0:	11800317 	ldw	r6,12(r2)
1000d0f4:	99000117 	ldw	r4,4(r19)
1000d0f8:	81800315 	stw	r6,12(r16)
1000d0fc:	80800215 	stw	r2,8(r16)
1000d100:	34000215 	stw	r16,8(r6)
1000d104:	14000315 	stw	r16,12(r2)
1000d108:	003f2706 	br	1000cda8 <__alt_data_end+0xf800cda8>
1000d10c:	88c00054 	ori	r3,r17,1
1000d110:	80c00115 	stw	r3,4(r16)
1000d114:	8463883a 	add	r17,r16,r17
1000d118:	34400515 	stw	r17,20(r6)
1000d11c:	34400415 	stw	r17,16(r6)
1000d120:	10c00054 	ori	r3,r2,1
1000d124:	8a400315 	stw	r9,12(r17)
1000d128:	8a400215 	stw	r9,8(r17)
1000d12c:	88c00115 	stw	r3,4(r17)
1000d130:	88a3883a 	add	r17,r17,r2
1000d134:	88800015 	stw	r2,0(r17)
1000d138:	9009883a 	mov	r4,r18
1000d13c:	00137d80 	call	100137d8 <__malloc_unlock>
1000d140:	80800204 	addi	r2,r16,8
1000d144:	003ecb06 	br	1000cc74 <__alt_data_end+0xf800cc74>
1000d148:	31000117 	ldw	r4,4(r6)
1000d14c:	003f1606 	br	1000cda8 <__alt_data_end+0xf800cda8>
1000d150:	63000044 	addi	r12,r12,1
1000d154:	608000cc 	andi	r2,r12,3
1000d158:	5ac00204 	addi	r11,r11,8
1000d15c:	103f2a1e 	bne	r2,zero,1000ce08 <__alt_data_end+0xf800ce08>
1000d160:	00002106 	br	1000d1e8 <_malloc_r+0x628>
1000d164:	80800204 	addi	r2,r16,8
1000d168:	84000517 	ldw	r16,20(r16)
1000d16c:	143eb31e 	bne	r2,r16,1000cc3c <__alt_data_end+0xf800cc3c>
1000d170:	18c00084 	addi	r3,r3,2
1000d174:	003eec06 	br	1000cd28 <__alt_data_end+0xf800cd28>
1000d178:	8085883a 	add	r2,r16,r2
1000d17c:	10c00117 	ldw	r3,4(r2)
1000d180:	81000317 	ldw	r4,12(r16)
1000d184:	81400217 	ldw	r5,8(r16)
1000d188:	18c00054 	ori	r3,r3,1
1000d18c:	10c00115 	stw	r3,4(r2)
1000d190:	29000315 	stw	r4,12(r5)
1000d194:	21400215 	stw	r5,8(r4)
1000d198:	9009883a 	mov	r4,r18
1000d19c:	00137d80 	call	100137d8 <__malloc_unlock>
1000d1a0:	80800204 	addi	r2,r16,8
1000d1a4:	003eb306 	br	1000cc74 <__alt_data_end+0xf800cc74>
1000d1a8:	19c016c4 	addi	r7,r3,91
1000d1ac:	39cb883a 	add	r5,r7,r7
1000d1b0:	003ec706 	br	1000ccd0 <__alt_data_end+0xf800ccd0>
1000d1b4:	3804d1ba 	srli	r2,r7,6
1000d1b8:	11000e04 	addi	r4,r2,56
1000d1bc:	210b883a 	add	r5,r4,r4
1000d1c0:	003fbe06 	br	1000d0bc <__alt_data_end+0xf800d0bc>
1000d1c4:	84ff5d26 	beq	r16,r19,1000cf3c <__alt_data_end+0xf800cf3c>
1000d1c8:	9c000217 	ldw	r16,8(r19)
1000d1cc:	00bfff04 	movi	r2,-4
1000d1d0:	80c00117 	ldw	r3,4(r16)
1000d1d4:	1886703a 	and	r3,r3,r2
1000d1d8:	003f9706 	br	1000d038 <__alt_data_end+0xf800d038>
1000d1dc:	52800017 	ldw	r10,0(r10)
1000d1e0:	18ffffc4 	addi	r3,r3,-1
1000d1e4:	50805c1e 	bne	r10,r2,1000d358 <_malloc_r+0x798>
1000d1e8:	190000cc 	andi	r4,r3,3
1000d1ec:	50bffe04 	addi	r2,r10,-8
1000d1f0:	203ffa1e 	bne	r4,zero,1000d1dc <__alt_data_end+0xf800d1dc>
1000d1f4:	98800117 	ldw	r2,4(r19)
1000d1f8:	0146303a 	nor	r3,zero,r5
1000d1fc:	1884703a 	and	r2,r3,r2
1000d200:	98800115 	stw	r2,4(r19)
1000d204:	294b883a 	add	r5,r5,r5
1000d208:	117f2e36 	bltu	r2,r5,1000cec4 <__alt_data_end+0xf800cec4>
1000d20c:	283f2d26 	beq	r5,zero,1000cec4 <__alt_data_end+0xf800cec4>
1000d210:	1146703a 	and	r3,r2,r5
1000d214:	1800521e 	bne	r3,zero,1000d360 <_malloc_r+0x7a0>
1000d218:	6007883a 	mov	r3,r12
1000d21c:	294b883a 	add	r5,r5,r5
1000d220:	1148703a 	and	r4,r2,r5
1000d224:	18c00104 	addi	r3,r3,4
1000d228:	203ffc26 	beq	r4,zero,1000d21c <__alt_data_end+0xf800d21c>
1000d22c:	003ef006 	br	1000cdf0 <__alt_data_end+0xf800cdf0>
1000d230:	00805504 	movi	r2,340
1000d234:	10c01336 	bltu	r2,r3,1000d284 <_malloc_r+0x6c4>
1000d238:	8806d3fa 	srli	r3,r17,15
1000d23c:	19c01dc4 	addi	r7,r3,119
1000d240:	39cb883a 	add	r5,r7,r7
1000d244:	003ea206 	br	1000ccd0 <__alt_data_end+0xf800ccd0>
1000d248:	00c40004 	movi	r3,4096
1000d24c:	003f4d06 	br	1000cf84 <__alt_data_end+0xf800cf84>
1000d250:	00800044 	movi	r2,1
1000d254:	a0800115 	stw	r2,4(r20)
1000d258:	a021883a 	mov	r16,r20
1000d25c:	0007883a 	mov	r3,zero
1000d260:	003f7506 	br	1000d038 <__alt_data_end+0xf800d038>
1000d264:	200bd0ba 	srai	r5,r4,2
1000d268:	01800044 	movi	r6,1
1000d26c:	41000117 	ldw	r4,4(r8)
1000d270:	314a983a 	sll	r5,r6,r5
1000d274:	100d883a 	mov	r6,r2
1000d278:	2908b03a 	or	r4,r5,r4
1000d27c:	41000115 	stw	r4,4(r8)
1000d280:	003f9d06 	br	1000d0f8 <__alt_data_end+0xf800d0f8>
1000d284:	00815504 	movi	r2,1364
1000d288:	10c01336 	bltu	r2,r3,1000d2d8 <_malloc_r+0x718>
1000d28c:	8806d4ba 	srli	r3,r17,18
1000d290:	19c01f04 	addi	r7,r3,124
1000d294:	39cb883a 	add	r5,r7,r7
1000d298:	003e8d06 	br	1000ccd0 <__alt_data_end+0xf800ccd0>
1000d29c:	ad400404 	addi	r21,r21,16
1000d2a0:	003f1d06 	br	1000cf18 <__alt_data_end+0xf800cf18>
1000d2a4:	01001504 	movi	r4,84
1000d2a8:	20801c36 	bltu	r4,r2,1000d31c <_malloc_r+0x75c>
1000d2ac:	3804d33a 	srli	r2,r7,12
1000d2b0:	11001b84 	addi	r4,r2,110
1000d2b4:	210b883a 	add	r5,r4,r4
1000d2b8:	003f8006 	br	1000d0bc <__alt_data_end+0xf800d0bc>
1000d2bc:	3083ffcc 	andi	r2,r6,4095
1000d2c0:	103f241e 	bne	r2,zero,1000cf54 <__alt_data_end+0xf800cf54>
1000d2c4:	99000217 	ldw	r4,8(r19)
1000d2c8:	ad85883a 	add	r2,r21,r22
1000d2cc:	10800054 	ori	r2,r2,1
1000d2d0:	20800115 	stw	r2,4(r4)
1000d2d4:	003f4a06 	br	1000d000 <__alt_data_end+0xf800d000>
1000d2d8:	01403f04 	movi	r5,252
1000d2dc:	01c01f84 	movi	r7,126
1000d2e0:	003e7b06 	br	1000ccd0 <__alt_data_end+0xf800ccd0>
1000d2e4:	00c00044 	movi	r3,1
1000d2e8:	002b883a 	mov	r21,zero
1000d2ec:	003f3006 	br	1000cfb0 <__alt_data_end+0xf800cfb0>
1000d2f0:	008400b4 	movhi	r2,4098
1000d2f4:	10a66504 	addi	r2,r2,-26220
1000d2f8:	15000015 	stw	r20,0(r2)
1000d2fc:	003f1b06 	br	1000cf6c <__alt_data_end+0xf800cf6c>
1000d300:	9009883a 	mov	r4,r18
1000d304:	81400204 	addi	r5,r16,8
1000d308:	000c0240 	call	1000c024 <_free_r>
1000d30c:	008400b4 	movhi	r2,4098
1000d310:	10ad3b04 	addi	r2,r2,-19220
1000d314:	10c00017 	ldw	r3,0(r2)
1000d318:	003f3906 	br	1000d000 <__alt_data_end+0xf800d000>
1000d31c:	01005504 	movi	r4,340
1000d320:	20800436 	bltu	r4,r2,1000d334 <_malloc_r+0x774>
1000d324:	3804d3fa 	srli	r2,r7,15
1000d328:	11001dc4 	addi	r4,r2,119
1000d32c:	210b883a 	add	r5,r4,r4
1000d330:	003f6206 	br	1000d0bc <__alt_data_end+0xf800d0bc>
1000d334:	01015504 	movi	r4,1364
1000d338:	20800436 	bltu	r4,r2,1000d34c <_malloc_r+0x78c>
1000d33c:	3804d4ba 	srli	r2,r7,18
1000d340:	11001f04 	addi	r4,r2,124
1000d344:	210b883a 	add	r5,r4,r4
1000d348:	003f5c06 	br	1000d0bc <__alt_data_end+0xf800d0bc>
1000d34c:	01403f04 	movi	r5,252
1000d350:	01001f84 	movi	r4,126
1000d354:	003f5906 	br	1000d0bc <__alt_data_end+0xf800d0bc>
1000d358:	98800117 	ldw	r2,4(r19)
1000d35c:	003fa906 	br	1000d204 <__alt_data_end+0xf800d204>
1000d360:	6007883a 	mov	r3,r12
1000d364:	003ea206 	br	1000cdf0 <__alt_data_end+0xf800cdf0>

1000d368 <memchr>:
1000d368:	208000cc 	andi	r2,r4,3
1000d36c:	280f883a 	mov	r7,r5
1000d370:	10003526 	beq	r2,zero,1000d448 <memchr+0xe0>
1000d374:	30bfffc4 	addi	r2,r6,-1
1000d378:	30001b26 	beq	r6,zero,1000d3e8 <memchr+0x80>
1000d37c:	21800003 	ldbu	r6,0(r4)
1000d380:	28c03fcc 	andi	r3,r5,255
1000d384:	30c01a26 	beq	r6,r3,1000d3f0 <memchr+0x88>
1000d388:	180d883a 	mov	r6,r3
1000d38c:	00000406 	br	1000d3a0 <memchr+0x38>
1000d390:	10001526 	beq	r2,zero,1000d3e8 <memchr+0x80>
1000d394:	20c00003 	ldbu	r3,0(r4)
1000d398:	10bfffc4 	addi	r2,r2,-1
1000d39c:	19801426 	beq	r3,r6,1000d3f0 <memchr+0x88>
1000d3a0:	21000044 	addi	r4,r4,1
1000d3a4:	20c000cc 	andi	r3,r4,3
1000d3a8:	183ff91e 	bne	r3,zero,1000d390 <__alt_data_end+0xf800d390>
1000d3ac:	024000c4 	movi	r9,3
1000d3b0:	48801136 	bltu	r9,r2,1000d3f8 <memchr+0x90>
1000d3b4:	10000c26 	beq	r2,zero,1000d3e8 <memchr+0x80>
1000d3b8:	20c00003 	ldbu	r3,0(r4)
1000d3bc:	29403fcc 	andi	r5,r5,255
1000d3c0:	19400b26 	beq	r3,r5,1000d3f0 <memchr+0x88>
1000d3c4:	20c00044 	addi	r3,r4,1
1000d3c8:	2085883a 	add	r2,r4,r2
1000d3cc:	39803fcc 	andi	r6,r7,255
1000d3d0:	00000306 	br	1000d3e0 <memchr+0x78>
1000d3d4:	18c00044 	addi	r3,r3,1
1000d3d8:	197fffc3 	ldbu	r5,-1(r3)
1000d3dc:	29800426 	beq	r5,r6,1000d3f0 <memchr+0x88>
1000d3e0:	1809883a 	mov	r4,r3
1000d3e4:	18bffb1e 	bne	r3,r2,1000d3d4 <__alt_data_end+0xf800d3d4>
1000d3e8:	0005883a 	mov	r2,zero
1000d3ec:	f800283a 	ret
1000d3f0:	2005883a 	mov	r2,r4
1000d3f4:	f800283a 	ret
1000d3f8:	28c03fcc 	andi	r3,r5,255
1000d3fc:	1810923a 	slli	r8,r3,8
1000d400:	02ffbff4 	movhi	r11,65279
1000d404:	02a02074 	movhi	r10,32897
1000d408:	40c6b03a 	or	r3,r8,r3
1000d40c:	1810943a 	slli	r8,r3,16
1000d410:	5affbfc4 	addi	r11,r11,-257
1000d414:	52a02004 	addi	r10,r10,-32640
1000d418:	40d0b03a 	or	r8,r8,r3
1000d41c:	20c00017 	ldw	r3,0(r4)
1000d420:	40c6f03a 	xor	r3,r8,r3
1000d424:	1acd883a 	add	r6,r3,r11
1000d428:	00c6303a 	nor	r3,zero,r3
1000d42c:	30c6703a 	and	r3,r6,r3
1000d430:	1a86703a 	and	r3,r3,r10
1000d434:	183fdf1e 	bne	r3,zero,1000d3b4 <__alt_data_end+0xf800d3b4>
1000d438:	10bfff04 	addi	r2,r2,-4
1000d43c:	21000104 	addi	r4,r4,4
1000d440:	48bff636 	bltu	r9,r2,1000d41c <__alt_data_end+0xf800d41c>
1000d444:	003fdb06 	br	1000d3b4 <__alt_data_end+0xf800d3b4>
1000d448:	3005883a 	mov	r2,r6
1000d44c:	003fd706 	br	1000d3ac <__alt_data_end+0xf800d3ac>

1000d450 <memmove>:
1000d450:	2005883a 	mov	r2,r4
1000d454:	29000b2e 	bgeu	r5,r4,1000d484 <memmove+0x34>
1000d458:	298f883a 	add	r7,r5,r6
1000d45c:	21c0092e 	bgeu	r4,r7,1000d484 <memmove+0x34>
1000d460:	2187883a 	add	r3,r4,r6
1000d464:	198bc83a 	sub	r5,r3,r6
1000d468:	30004b26 	beq	r6,zero,1000d598 <memmove+0x148>
1000d46c:	39ffffc4 	addi	r7,r7,-1
1000d470:	39000003 	ldbu	r4,0(r7)
1000d474:	18ffffc4 	addi	r3,r3,-1
1000d478:	19000005 	stb	r4,0(r3)
1000d47c:	197ffb1e 	bne	r3,r5,1000d46c <__alt_data_end+0xf800d46c>
1000d480:	f800283a 	ret
1000d484:	00c003c4 	movi	r3,15
1000d488:	1980412e 	bgeu	r3,r6,1000d590 <memmove+0x140>
1000d48c:	1146b03a 	or	r3,r2,r5
1000d490:	18c000cc 	andi	r3,r3,3
1000d494:	1800411e 	bne	r3,zero,1000d59c <memmove+0x14c>
1000d498:	33fffc04 	addi	r15,r6,-16
1000d49c:	781ed13a 	srli	r15,r15,4
1000d4a0:	28c00104 	addi	r3,r5,4
1000d4a4:	13400104 	addi	r13,r2,4
1000d4a8:	781c913a 	slli	r14,r15,4
1000d4ac:	2b000204 	addi	r12,r5,8
1000d4b0:	12c00204 	addi	r11,r2,8
1000d4b4:	73800504 	addi	r14,r14,20
1000d4b8:	2a800304 	addi	r10,r5,12
1000d4bc:	12400304 	addi	r9,r2,12
1000d4c0:	2b9d883a 	add	r14,r5,r14
1000d4c4:	2811883a 	mov	r8,r5
1000d4c8:	100f883a 	mov	r7,r2
1000d4cc:	41000017 	ldw	r4,0(r8)
1000d4d0:	39c00404 	addi	r7,r7,16
1000d4d4:	18c00404 	addi	r3,r3,16
1000d4d8:	393ffc15 	stw	r4,-16(r7)
1000d4dc:	193ffc17 	ldw	r4,-16(r3)
1000d4e0:	6b400404 	addi	r13,r13,16
1000d4e4:	5ac00404 	addi	r11,r11,16
1000d4e8:	693ffc15 	stw	r4,-16(r13)
1000d4ec:	61000017 	ldw	r4,0(r12)
1000d4f0:	4a400404 	addi	r9,r9,16
1000d4f4:	42000404 	addi	r8,r8,16
1000d4f8:	593ffc15 	stw	r4,-16(r11)
1000d4fc:	51000017 	ldw	r4,0(r10)
1000d500:	63000404 	addi	r12,r12,16
1000d504:	52800404 	addi	r10,r10,16
1000d508:	493ffc15 	stw	r4,-16(r9)
1000d50c:	1bbfef1e 	bne	r3,r14,1000d4cc <__alt_data_end+0xf800d4cc>
1000d510:	79000044 	addi	r4,r15,1
1000d514:	2008913a 	slli	r4,r4,4
1000d518:	328003cc 	andi	r10,r6,15
1000d51c:	02c000c4 	movi	r11,3
1000d520:	1107883a 	add	r3,r2,r4
1000d524:	290b883a 	add	r5,r5,r4
1000d528:	5a801e2e 	bgeu	r11,r10,1000d5a4 <memmove+0x154>
1000d52c:	1813883a 	mov	r9,r3
1000d530:	2811883a 	mov	r8,r5
1000d534:	500f883a 	mov	r7,r10
1000d538:	41000017 	ldw	r4,0(r8)
1000d53c:	4a400104 	addi	r9,r9,4
1000d540:	39ffff04 	addi	r7,r7,-4
1000d544:	493fff15 	stw	r4,-4(r9)
1000d548:	42000104 	addi	r8,r8,4
1000d54c:	59fffa36 	bltu	r11,r7,1000d538 <__alt_data_end+0xf800d538>
1000d550:	513fff04 	addi	r4,r10,-4
1000d554:	2008d0ba 	srli	r4,r4,2
1000d558:	318000cc 	andi	r6,r6,3
1000d55c:	21000044 	addi	r4,r4,1
1000d560:	2109883a 	add	r4,r4,r4
1000d564:	2109883a 	add	r4,r4,r4
1000d568:	1907883a 	add	r3,r3,r4
1000d56c:	290b883a 	add	r5,r5,r4
1000d570:	30000926 	beq	r6,zero,1000d598 <memmove+0x148>
1000d574:	198d883a 	add	r6,r3,r6
1000d578:	29c00003 	ldbu	r7,0(r5)
1000d57c:	18c00044 	addi	r3,r3,1
1000d580:	29400044 	addi	r5,r5,1
1000d584:	19ffffc5 	stb	r7,-1(r3)
1000d588:	19bffb1e 	bne	r3,r6,1000d578 <__alt_data_end+0xf800d578>
1000d58c:	f800283a 	ret
1000d590:	1007883a 	mov	r3,r2
1000d594:	003ff606 	br	1000d570 <__alt_data_end+0xf800d570>
1000d598:	f800283a 	ret
1000d59c:	1007883a 	mov	r3,r2
1000d5a0:	003ff406 	br	1000d574 <__alt_data_end+0xf800d574>
1000d5a4:	500d883a 	mov	r6,r10
1000d5a8:	003ff106 	br	1000d570 <__alt_data_end+0xf800d570>

1000d5ac <memset>:
1000d5ac:	20c000cc 	andi	r3,r4,3
1000d5b0:	2005883a 	mov	r2,r4
1000d5b4:	18004326 	beq	r3,zero,1000d6c4 <memset+0x118>
1000d5b8:	31ffffc4 	addi	r7,r6,-1
1000d5bc:	30004026 	beq	r6,zero,1000d6c0 <memset+0x114>
1000d5c0:	2813883a 	mov	r9,r5
1000d5c4:	200d883a 	mov	r6,r4
1000d5c8:	2007883a 	mov	r3,r4
1000d5cc:	00000406 	br	1000d5e0 <memset+0x34>
1000d5d0:	3a3fffc4 	addi	r8,r7,-1
1000d5d4:	31800044 	addi	r6,r6,1
1000d5d8:	38003926 	beq	r7,zero,1000d6c0 <memset+0x114>
1000d5dc:	400f883a 	mov	r7,r8
1000d5e0:	18c00044 	addi	r3,r3,1
1000d5e4:	32400005 	stb	r9,0(r6)
1000d5e8:	1a0000cc 	andi	r8,r3,3
1000d5ec:	403ff81e 	bne	r8,zero,1000d5d0 <__alt_data_end+0xf800d5d0>
1000d5f0:	010000c4 	movi	r4,3
1000d5f4:	21c02d2e 	bgeu	r4,r7,1000d6ac <memset+0x100>
1000d5f8:	29803fcc 	andi	r6,r5,255
1000d5fc:	3008923a 	slli	r4,r6,8
1000d600:	218cb03a 	or	r6,r4,r6
1000d604:	3008943a 	slli	r4,r6,16
1000d608:	218cb03a 	or	r6,r4,r6
1000d60c:	010003c4 	movi	r4,15
1000d610:	21c0182e 	bgeu	r4,r7,1000d674 <memset+0xc8>
1000d614:	3b3ffc04 	addi	r12,r7,-16
1000d618:	6018d13a 	srli	r12,r12,4
1000d61c:	1a000104 	addi	r8,r3,4
1000d620:	1ac00204 	addi	r11,r3,8
1000d624:	6008913a 	slli	r4,r12,4
1000d628:	1a800304 	addi	r10,r3,12
1000d62c:	1813883a 	mov	r9,r3
1000d630:	21000504 	addi	r4,r4,20
1000d634:	1909883a 	add	r4,r3,r4
1000d638:	49800015 	stw	r6,0(r9)
1000d63c:	41800015 	stw	r6,0(r8)
1000d640:	59800015 	stw	r6,0(r11)
1000d644:	51800015 	stw	r6,0(r10)
1000d648:	42000404 	addi	r8,r8,16
1000d64c:	4a400404 	addi	r9,r9,16
1000d650:	5ac00404 	addi	r11,r11,16
1000d654:	52800404 	addi	r10,r10,16
1000d658:	413ff71e 	bne	r8,r4,1000d638 <__alt_data_end+0xf800d638>
1000d65c:	63000044 	addi	r12,r12,1
1000d660:	6018913a 	slli	r12,r12,4
1000d664:	39c003cc 	andi	r7,r7,15
1000d668:	010000c4 	movi	r4,3
1000d66c:	1b07883a 	add	r3,r3,r12
1000d670:	21c00e2e 	bgeu	r4,r7,1000d6ac <memset+0x100>
1000d674:	1813883a 	mov	r9,r3
1000d678:	3811883a 	mov	r8,r7
1000d67c:	010000c4 	movi	r4,3
1000d680:	49800015 	stw	r6,0(r9)
1000d684:	423fff04 	addi	r8,r8,-4
1000d688:	4a400104 	addi	r9,r9,4
1000d68c:	223ffc36 	bltu	r4,r8,1000d680 <__alt_data_end+0xf800d680>
1000d690:	393fff04 	addi	r4,r7,-4
1000d694:	2008d0ba 	srli	r4,r4,2
1000d698:	39c000cc 	andi	r7,r7,3
1000d69c:	21000044 	addi	r4,r4,1
1000d6a0:	2109883a 	add	r4,r4,r4
1000d6a4:	2109883a 	add	r4,r4,r4
1000d6a8:	1907883a 	add	r3,r3,r4
1000d6ac:	38000426 	beq	r7,zero,1000d6c0 <memset+0x114>
1000d6b0:	19cf883a 	add	r7,r3,r7
1000d6b4:	19400005 	stb	r5,0(r3)
1000d6b8:	18c00044 	addi	r3,r3,1
1000d6bc:	19fffd1e 	bne	r3,r7,1000d6b4 <__alt_data_end+0xf800d6b4>
1000d6c0:	f800283a 	ret
1000d6c4:	2007883a 	mov	r3,r4
1000d6c8:	300f883a 	mov	r7,r6
1000d6cc:	003fc806 	br	1000d5f0 <__alt_data_end+0xf800d5f0>

1000d6d0 <_Balloc>:
1000d6d0:	20801317 	ldw	r2,76(r4)
1000d6d4:	defffc04 	addi	sp,sp,-16
1000d6d8:	dc400115 	stw	r17,4(sp)
1000d6dc:	dc000015 	stw	r16,0(sp)
1000d6e0:	dfc00315 	stw	ra,12(sp)
1000d6e4:	dc800215 	stw	r18,8(sp)
1000d6e8:	2023883a 	mov	r17,r4
1000d6ec:	2821883a 	mov	r16,r5
1000d6f0:	10000f26 	beq	r2,zero,1000d730 <_Balloc+0x60>
1000d6f4:	8407883a 	add	r3,r16,r16
1000d6f8:	18c7883a 	add	r3,r3,r3
1000d6fc:	10c7883a 	add	r3,r2,r3
1000d700:	18800017 	ldw	r2,0(r3)
1000d704:	10001126 	beq	r2,zero,1000d74c <_Balloc+0x7c>
1000d708:	11000017 	ldw	r4,0(r2)
1000d70c:	19000015 	stw	r4,0(r3)
1000d710:	10000415 	stw	zero,16(r2)
1000d714:	10000315 	stw	zero,12(r2)
1000d718:	dfc00317 	ldw	ra,12(sp)
1000d71c:	dc800217 	ldw	r18,8(sp)
1000d720:	dc400117 	ldw	r17,4(sp)
1000d724:	dc000017 	ldw	r16,0(sp)
1000d728:	dec00404 	addi	sp,sp,16
1000d72c:	f800283a 	ret
1000d730:	01400104 	movi	r5,4
1000d734:	01800844 	movi	r6,33
1000d738:	001056c0 	call	1001056c <_calloc_r>
1000d73c:	88801315 	stw	r2,76(r17)
1000d740:	103fec1e 	bne	r2,zero,1000d6f4 <__alt_data_end+0xf800d6f4>
1000d744:	0005883a 	mov	r2,zero
1000d748:	003ff306 	br	1000d718 <__alt_data_end+0xf800d718>
1000d74c:	01400044 	movi	r5,1
1000d750:	2c24983a 	sll	r18,r5,r16
1000d754:	8809883a 	mov	r4,r17
1000d758:	91800144 	addi	r6,r18,5
1000d75c:	318d883a 	add	r6,r6,r6
1000d760:	318d883a 	add	r6,r6,r6
1000d764:	001056c0 	call	1001056c <_calloc_r>
1000d768:	103ff626 	beq	r2,zero,1000d744 <__alt_data_end+0xf800d744>
1000d76c:	14000115 	stw	r16,4(r2)
1000d770:	14800215 	stw	r18,8(r2)
1000d774:	003fe606 	br	1000d710 <__alt_data_end+0xf800d710>

1000d778 <_Bfree>:
1000d778:	28000826 	beq	r5,zero,1000d79c <_Bfree+0x24>
1000d77c:	28c00117 	ldw	r3,4(r5)
1000d780:	20801317 	ldw	r2,76(r4)
1000d784:	18c7883a 	add	r3,r3,r3
1000d788:	18c7883a 	add	r3,r3,r3
1000d78c:	10c5883a 	add	r2,r2,r3
1000d790:	10c00017 	ldw	r3,0(r2)
1000d794:	28c00015 	stw	r3,0(r5)
1000d798:	11400015 	stw	r5,0(r2)
1000d79c:	f800283a 	ret

1000d7a0 <__multadd>:
1000d7a0:	defff704 	addi	sp,sp,-36
1000d7a4:	dc800215 	stw	r18,8(sp)
1000d7a8:	2c800417 	ldw	r18,16(r5)
1000d7ac:	ddc00715 	stw	r23,28(sp)
1000d7b0:	dd800615 	stw	r22,24(sp)
1000d7b4:	dd000415 	stw	r20,16(sp)
1000d7b8:	dcc00315 	stw	r19,12(sp)
1000d7bc:	dc400115 	stw	r17,4(sp)
1000d7c0:	dc000015 	stw	r16,0(sp)
1000d7c4:	dfc00815 	stw	ra,32(sp)
1000d7c8:	dd400515 	stw	r21,20(sp)
1000d7cc:	2827883a 	mov	r19,r5
1000d7d0:	2029883a 	mov	r20,r4
1000d7d4:	3023883a 	mov	r17,r6
1000d7d8:	3821883a 	mov	r16,r7
1000d7dc:	2d800504 	addi	r22,r5,20
1000d7e0:	002f883a 	mov	r23,zero
1000d7e4:	b5400017 	ldw	r21,0(r22)
1000d7e8:	880b883a 	mov	r5,r17
1000d7ec:	bdc00044 	addi	r23,r23,1
1000d7f0:	a93fffcc 	andi	r4,r21,65535
1000d7f4:	000586c0 	call	1000586c <__mulsi3>
1000d7f8:	1421883a 	add	r16,r2,r16
1000d7fc:	a808d43a 	srli	r4,r21,16
1000d800:	802ad43a 	srli	r21,r16,16
1000d804:	880b883a 	mov	r5,r17
1000d808:	000586c0 	call	1000586c <__mulsi3>
1000d80c:	a88f883a 	add	r7,r21,r2
1000d810:	3804943a 	slli	r2,r7,16
1000d814:	80ffffcc 	andi	r3,r16,65535
1000d818:	b5800104 	addi	r22,r22,4
1000d81c:	10c7883a 	add	r3,r2,r3
1000d820:	b0ffff15 	stw	r3,-4(r22)
1000d824:	3820d43a 	srli	r16,r7,16
1000d828:	bcbfee16 	blt	r23,r18,1000d7e4 <__alt_data_end+0xf800d7e4>
1000d82c:	80000926 	beq	r16,zero,1000d854 <__multadd+0xb4>
1000d830:	98800217 	ldw	r2,8(r19)
1000d834:	9080130e 	bge	r18,r2,1000d884 <__multadd+0xe4>
1000d838:	90800144 	addi	r2,r18,5
1000d83c:	1085883a 	add	r2,r2,r2
1000d840:	1085883a 	add	r2,r2,r2
1000d844:	9885883a 	add	r2,r19,r2
1000d848:	14000015 	stw	r16,0(r2)
1000d84c:	94800044 	addi	r18,r18,1
1000d850:	9c800415 	stw	r18,16(r19)
1000d854:	9805883a 	mov	r2,r19
1000d858:	dfc00817 	ldw	ra,32(sp)
1000d85c:	ddc00717 	ldw	r23,28(sp)
1000d860:	dd800617 	ldw	r22,24(sp)
1000d864:	dd400517 	ldw	r21,20(sp)
1000d868:	dd000417 	ldw	r20,16(sp)
1000d86c:	dcc00317 	ldw	r19,12(sp)
1000d870:	dc800217 	ldw	r18,8(sp)
1000d874:	dc400117 	ldw	r17,4(sp)
1000d878:	dc000017 	ldw	r16,0(sp)
1000d87c:	dec00904 	addi	sp,sp,36
1000d880:	f800283a 	ret
1000d884:	99400117 	ldw	r5,4(r19)
1000d888:	a009883a 	mov	r4,r20
1000d88c:	29400044 	addi	r5,r5,1
1000d890:	000d6d00 	call	1000d6d0 <_Balloc>
1000d894:	99800417 	ldw	r6,16(r19)
1000d898:	99400304 	addi	r5,r19,12
1000d89c:	11000304 	addi	r4,r2,12
1000d8a0:	31800084 	addi	r6,r6,2
1000d8a4:	318d883a 	add	r6,r6,r6
1000d8a8:	318d883a 	add	r6,r6,r6
1000d8ac:	1023883a 	mov	r17,r2
1000d8b0:	00079d40 	call	100079d4 <memcpy>
1000d8b4:	99000117 	ldw	r4,4(r19)
1000d8b8:	a0c01317 	ldw	r3,76(r20)
1000d8bc:	2109883a 	add	r4,r4,r4
1000d8c0:	2109883a 	add	r4,r4,r4
1000d8c4:	1907883a 	add	r3,r3,r4
1000d8c8:	18800017 	ldw	r2,0(r3)
1000d8cc:	98800015 	stw	r2,0(r19)
1000d8d0:	1cc00015 	stw	r19,0(r3)
1000d8d4:	8827883a 	mov	r19,r17
1000d8d8:	003fd706 	br	1000d838 <__alt_data_end+0xf800d838>

1000d8dc <__s2b>:
1000d8dc:	defff904 	addi	sp,sp,-28
1000d8e0:	dc400115 	stw	r17,4(sp)
1000d8e4:	dc000015 	stw	r16,0(sp)
1000d8e8:	2023883a 	mov	r17,r4
1000d8ec:	2821883a 	mov	r16,r5
1000d8f0:	39000204 	addi	r4,r7,8
1000d8f4:	01400244 	movi	r5,9
1000d8f8:	dcc00315 	stw	r19,12(sp)
1000d8fc:	dc800215 	stw	r18,8(sp)
1000d900:	dfc00615 	stw	ra,24(sp)
1000d904:	dd400515 	stw	r21,20(sp)
1000d908:	dd000415 	stw	r20,16(sp)
1000d90c:	3825883a 	mov	r18,r7
1000d910:	3027883a 	mov	r19,r6
1000d914:	00057ac0 	call	100057ac <__divsi3>
1000d918:	00c00044 	movi	r3,1
1000d91c:	000b883a 	mov	r5,zero
1000d920:	1880030e 	bge	r3,r2,1000d930 <__s2b+0x54>
1000d924:	18c7883a 	add	r3,r3,r3
1000d928:	29400044 	addi	r5,r5,1
1000d92c:	18bffd16 	blt	r3,r2,1000d924 <__alt_data_end+0xf800d924>
1000d930:	8809883a 	mov	r4,r17
1000d934:	000d6d00 	call	1000d6d0 <_Balloc>
1000d938:	d8c00717 	ldw	r3,28(sp)
1000d93c:	10c00515 	stw	r3,20(r2)
1000d940:	00c00044 	movi	r3,1
1000d944:	10c00415 	stw	r3,16(r2)
1000d948:	00c00244 	movi	r3,9
1000d94c:	1cc0210e 	bge	r3,r19,1000d9d4 <__s2b+0xf8>
1000d950:	80eb883a 	add	r21,r16,r3
1000d954:	a829883a 	mov	r20,r21
1000d958:	84e1883a 	add	r16,r16,r19
1000d95c:	a1c00007 	ldb	r7,0(r20)
1000d960:	8809883a 	mov	r4,r17
1000d964:	a5000044 	addi	r20,r20,1
1000d968:	100b883a 	mov	r5,r2
1000d96c:	01800284 	movi	r6,10
1000d970:	39fff404 	addi	r7,r7,-48
1000d974:	000d7a00 	call	1000d7a0 <__multadd>
1000d978:	a43ff81e 	bne	r20,r16,1000d95c <__alt_data_end+0xf800d95c>
1000d97c:	ace1883a 	add	r16,r21,r19
1000d980:	843ffe04 	addi	r16,r16,-8
1000d984:	9c800a0e 	bge	r19,r18,1000d9b0 <__s2b+0xd4>
1000d988:	94e5c83a 	sub	r18,r18,r19
1000d98c:	84a5883a 	add	r18,r16,r18
1000d990:	81c00007 	ldb	r7,0(r16)
1000d994:	8809883a 	mov	r4,r17
1000d998:	84000044 	addi	r16,r16,1
1000d99c:	100b883a 	mov	r5,r2
1000d9a0:	01800284 	movi	r6,10
1000d9a4:	39fff404 	addi	r7,r7,-48
1000d9a8:	000d7a00 	call	1000d7a0 <__multadd>
1000d9ac:	84bff81e 	bne	r16,r18,1000d990 <__alt_data_end+0xf800d990>
1000d9b0:	dfc00617 	ldw	ra,24(sp)
1000d9b4:	dd400517 	ldw	r21,20(sp)
1000d9b8:	dd000417 	ldw	r20,16(sp)
1000d9bc:	dcc00317 	ldw	r19,12(sp)
1000d9c0:	dc800217 	ldw	r18,8(sp)
1000d9c4:	dc400117 	ldw	r17,4(sp)
1000d9c8:	dc000017 	ldw	r16,0(sp)
1000d9cc:	dec00704 	addi	sp,sp,28
1000d9d0:	f800283a 	ret
1000d9d4:	84000284 	addi	r16,r16,10
1000d9d8:	1827883a 	mov	r19,r3
1000d9dc:	003fe906 	br	1000d984 <__alt_data_end+0xf800d984>

1000d9e0 <__hi0bits>:
1000d9e0:	20bfffec 	andhi	r2,r4,65535
1000d9e4:	1000141e 	bne	r2,zero,1000da38 <__hi0bits+0x58>
1000d9e8:	2008943a 	slli	r4,r4,16
1000d9ec:	00800404 	movi	r2,16
1000d9f0:	20ffc02c 	andhi	r3,r4,65280
1000d9f4:	1800021e 	bne	r3,zero,1000da00 <__hi0bits+0x20>
1000d9f8:	2008923a 	slli	r4,r4,8
1000d9fc:	10800204 	addi	r2,r2,8
1000da00:	20fc002c 	andhi	r3,r4,61440
1000da04:	1800021e 	bne	r3,zero,1000da10 <__hi0bits+0x30>
1000da08:	2008913a 	slli	r4,r4,4
1000da0c:	10800104 	addi	r2,r2,4
1000da10:	20f0002c 	andhi	r3,r4,49152
1000da14:	1800031e 	bne	r3,zero,1000da24 <__hi0bits+0x44>
1000da18:	2109883a 	add	r4,r4,r4
1000da1c:	10800084 	addi	r2,r2,2
1000da20:	2109883a 	add	r4,r4,r4
1000da24:	20000316 	blt	r4,zero,1000da34 <__hi0bits+0x54>
1000da28:	2110002c 	andhi	r4,r4,16384
1000da2c:	2000041e 	bne	r4,zero,1000da40 <__hi0bits+0x60>
1000da30:	00800804 	movi	r2,32
1000da34:	f800283a 	ret
1000da38:	0005883a 	mov	r2,zero
1000da3c:	003fec06 	br	1000d9f0 <__alt_data_end+0xf800d9f0>
1000da40:	10800044 	addi	r2,r2,1
1000da44:	f800283a 	ret

1000da48 <__lo0bits>:
1000da48:	20c00017 	ldw	r3,0(r4)
1000da4c:	188001cc 	andi	r2,r3,7
1000da50:	10000826 	beq	r2,zero,1000da74 <__lo0bits+0x2c>
1000da54:	1880004c 	andi	r2,r3,1
1000da58:	1000211e 	bne	r2,zero,1000dae0 <__lo0bits+0x98>
1000da5c:	1880008c 	andi	r2,r3,2
1000da60:	1000211e 	bne	r2,zero,1000dae8 <__lo0bits+0xa0>
1000da64:	1806d0ba 	srli	r3,r3,2
1000da68:	00800084 	movi	r2,2
1000da6c:	20c00015 	stw	r3,0(r4)
1000da70:	f800283a 	ret
1000da74:	18bfffcc 	andi	r2,r3,65535
1000da78:	10001326 	beq	r2,zero,1000dac8 <__lo0bits+0x80>
1000da7c:	0005883a 	mov	r2,zero
1000da80:	19403fcc 	andi	r5,r3,255
1000da84:	2800021e 	bne	r5,zero,1000da90 <__lo0bits+0x48>
1000da88:	1806d23a 	srli	r3,r3,8
1000da8c:	10800204 	addi	r2,r2,8
1000da90:	194003cc 	andi	r5,r3,15
1000da94:	2800021e 	bne	r5,zero,1000daa0 <__lo0bits+0x58>
1000da98:	1806d13a 	srli	r3,r3,4
1000da9c:	10800104 	addi	r2,r2,4
1000daa0:	194000cc 	andi	r5,r3,3
1000daa4:	2800021e 	bne	r5,zero,1000dab0 <__lo0bits+0x68>
1000daa8:	1806d0ba 	srli	r3,r3,2
1000daac:	10800084 	addi	r2,r2,2
1000dab0:	1940004c 	andi	r5,r3,1
1000dab4:	2800081e 	bne	r5,zero,1000dad8 <__lo0bits+0x90>
1000dab8:	1806d07a 	srli	r3,r3,1
1000dabc:	1800051e 	bne	r3,zero,1000dad4 <__lo0bits+0x8c>
1000dac0:	00800804 	movi	r2,32
1000dac4:	f800283a 	ret
1000dac8:	1806d43a 	srli	r3,r3,16
1000dacc:	00800404 	movi	r2,16
1000dad0:	003feb06 	br	1000da80 <__alt_data_end+0xf800da80>
1000dad4:	10800044 	addi	r2,r2,1
1000dad8:	20c00015 	stw	r3,0(r4)
1000dadc:	f800283a 	ret
1000dae0:	0005883a 	mov	r2,zero
1000dae4:	f800283a 	ret
1000dae8:	1806d07a 	srli	r3,r3,1
1000daec:	00800044 	movi	r2,1
1000daf0:	20c00015 	stw	r3,0(r4)
1000daf4:	f800283a 	ret

1000daf8 <__i2b>:
1000daf8:	defffd04 	addi	sp,sp,-12
1000dafc:	dc000015 	stw	r16,0(sp)
1000db00:	04000044 	movi	r16,1
1000db04:	dc400115 	stw	r17,4(sp)
1000db08:	2823883a 	mov	r17,r5
1000db0c:	800b883a 	mov	r5,r16
1000db10:	dfc00215 	stw	ra,8(sp)
1000db14:	000d6d00 	call	1000d6d0 <_Balloc>
1000db18:	14400515 	stw	r17,20(r2)
1000db1c:	14000415 	stw	r16,16(r2)
1000db20:	dfc00217 	ldw	ra,8(sp)
1000db24:	dc400117 	ldw	r17,4(sp)
1000db28:	dc000017 	ldw	r16,0(sp)
1000db2c:	dec00304 	addi	sp,sp,12
1000db30:	f800283a 	ret

1000db34 <__multiply>:
1000db34:	deffef04 	addi	sp,sp,-68
1000db38:	dc400815 	stw	r17,32(sp)
1000db3c:	dc000715 	stw	r16,28(sp)
1000db40:	2c400417 	ldw	r17,16(r5)
1000db44:	34000417 	ldw	r16,16(r6)
1000db48:	dd800d15 	stw	r22,52(sp)
1000db4c:	dc800915 	stw	r18,36(sp)
1000db50:	dfc01015 	stw	ra,64(sp)
1000db54:	df000f15 	stw	fp,60(sp)
1000db58:	ddc00e15 	stw	r23,56(sp)
1000db5c:	dd400c15 	stw	r21,48(sp)
1000db60:	dd000b15 	stw	r20,44(sp)
1000db64:	dcc00a15 	stw	r19,40(sp)
1000db68:	2825883a 	mov	r18,r5
1000db6c:	302d883a 	mov	r22,r6
1000db70:	8c009116 	blt	r17,r16,1000ddb8 <__multiply+0x284>
1000db74:	8005883a 	mov	r2,r16
1000db78:	8821883a 	mov	r16,r17
1000db7c:	1023883a 	mov	r17,r2
1000db80:	90800217 	ldw	r2,8(r18)
1000db84:	8447883a 	add	r3,r16,r17
1000db88:	d8c00215 	stw	r3,8(sp)
1000db8c:	91400117 	ldw	r5,4(r18)
1000db90:	10c0010e 	bge	r2,r3,1000db98 <__multiply+0x64>
1000db94:	29400044 	addi	r5,r5,1
1000db98:	000d6d00 	call	1000d6d0 <_Balloc>
1000db9c:	d8c00217 	ldw	r3,8(sp)
1000dba0:	d8800615 	stw	r2,24(sp)
1000dba4:	18eb883a 	add	r21,r3,r3
1000dba8:	ad6b883a 	add	r21,r21,r21
1000dbac:	10c00504 	addi	r3,r2,20
1000dbb0:	1d6b883a 	add	r21,r3,r21
1000dbb4:	d8c00115 	stw	r3,4(sp)
1000dbb8:	dd400315 	stw	r21,12(sp)
1000dbbc:	1805883a 	mov	r2,r3
1000dbc0:	1d40042e 	bgeu	r3,r21,1000dbd4 <__multiply+0xa0>
1000dbc4:	d8c00317 	ldw	r3,12(sp)
1000dbc8:	10000015 	stw	zero,0(r2)
1000dbcc:	10800104 	addi	r2,r2,4
1000dbd0:	10fffc36 	bltu	r2,r3,1000dbc4 <__alt_data_end+0xf800dbc4>
1000dbd4:	8c63883a 	add	r17,r17,r17
1000dbd8:	b5800504 	addi	r22,r22,20
1000dbdc:	8c63883a 	add	r17,r17,r17
1000dbe0:	94800504 	addi	r18,r18,20
1000dbe4:	8421883a 	add	r16,r16,r16
1000dbe8:	b463883a 	add	r17,r22,r17
1000dbec:	8421883a 	add	r16,r16,r16
1000dbf0:	dd800015 	stw	r22,0(sp)
1000dbf4:	dc800415 	stw	r18,16(sp)
1000dbf8:	dc400515 	stw	r17,20(sp)
1000dbfc:	9429883a 	add	r20,r18,r16
1000dc00:	b4404f2e 	bgeu	r22,r17,1000dd40 <__multiply+0x20c>
1000dc04:	d8c00017 	ldw	r3,0(sp)
1000dc08:	1c800017 	ldw	r18,0(r3)
1000dc0c:	943fffcc 	andi	r16,r18,65535
1000dc10:	80001e26 	beq	r16,zero,1000dc8c <__multiply+0x158>
1000dc14:	dd800117 	ldw	r22,4(sp)
1000dc18:	dd400417 	ldw	r21,16(sp)
1000dc1c:	0025883a 	mov	r18,zero
1000dc20:	adc00017 	ldw	r23,0(r21)
1000dc24:	b4c00017 	ldw	r19,0(r22)
1000dc28:	800b883a 	mov	r5,r16
1000dc2c:	b93fffcc 	andi	r4,r23,65535
1000dc30:	000586c0 	call	1000586c <__mulsi3>
1000dc34:	9c7fffcc 	andi	r17,r19,65535
1000dc38:	8885883a 	add	r2,r17,r2
1000dc3c:	b808d43a 	srli	r4,r23,16
1000dc40:	14a3883a 	add	r17,r2,r18
1000dc44:	9826d43a 	srli	r19,r19,16
1000dc48:	8824d43a 	srli	r18,r17,16
1000dc4c:	800b883a 	mov	r5,r16
1000dc50:	000586c0 	call	1000586c <__mulsi3>
1000dc54:	9885883a 	add	r2,r19,r2
1000dc58:	14a7883a 	add	r19,r2,r18
1000dc5c:	88ffffcc 	andi	r3,r17,65535
1000dc60:	9822943a 	slli	r17,r19,16
1000dc64:	ad400104 	addi	r21,r21,4
1000dc68:	b005883a 	mov	r2,r22
1000dc6c:	88c6b03a 	or	r3,r17,r3
1000dc70:	b0c00015 	stw	r3,0(r22)
1000dc74:	9824d43a 	srli	r18,r19,16
1000dc78:	b5800104 	addi	r22,r22,4
1000dc7c:	ad3fe836 	bltu	r21,r20,1000dc20 <__alt_data_end+0xf800dc20>
1000dc80:	d8c00017 	ldw	r3,0(sp)
1000dc84:	14800115 	stw	r18,4(r2)
1000dc88:	1c800017 	ldw	r18,0(r3)
1000dc8c:	9024d43a 	srli	r18,r18,16
1000dc90:	90002226 	beq	r18,zero,1000dd1c <__multiply+0x1e8>
1000dc94:	d8c00117 	ldw	r3,4(sp)
1000dc98:	dd800417 	ldw	r22,16(sp)
1000dc9c:	002f883a 	mov	r23,zero
1000dca0:	1f000017 	ldw	fp,0(r3)
1000dca4:	1823883a 	mov	r17,r3
1000dca8:	182b883a 	mov	r21,r3
1000dcac:	e021883a 	mov	r16,fp
1000dcb0:	00000106 	br	1000dcb8 <__multiply+0x184>
1000dcb4:	982b883a 	mov	r21,r19
1000dcb8:	b100000b 	ldhu	r4,0(r22)
1000dcbc:	8020d43a 	srli	r16,r16,16
1000dcc0:	900b883a 	mov	r5,r18
1000dcc4:	000586c0 	call	1000586c <__mulsi3>
1000dcc8:	1405883a 	add	r2,r2,r16
1000dccc:	15ef883a 	add	r23,r2,r23
1000dcd0:	b804943a 	slli	r2,r23,16
1000dcd4:	e0ffffcc 	andi	r3,fp,65535
1000dcd8:	8c400104 	addi	r17,r17,4
1000dcdc:	10c6b03a 	or	r3,r2,r3
1000dce0:	88ffff15 	stw	r3,-4(r17)
1000dce4:	b5800104 	addi	r22,r22,4
1000dce8:	b13fff17 	ldw	r4,-4(r22)
1000dcec:	acc00104 	addi	r19,r21,4
1000dcf0:	900b883a 	mov	r5,r18
1000dcf4:	2008d43a 	srli	r4,r4,16
1000dcf8:	9c000017 	ldw	r16,0(r19)
1000dcfc:	000586c0 	call	1000586c <__mulsi3>
1000dd00:	b806d43a 	srli	r3,r23,16
1000dd04:	813fffcc 	andi	r4,r16,65535
1000dd08:	1105883a 	add	r2,r2,r4
1000dd0c:	10f9883a 	add	fp,r2,r3
1000dd10:	e02ed43a 	srli	r23,fp,16
1000dd14:	b53fe736 	bltu	r22,r20,1000dcb4 <__alt_data_end+0xf800dcb4>
1000dd18:	af000115 	stw	fp,4(r21)
1000dd1c:	d8c00017 	ldw	r3,0(sp)
1000dd20:	d9000517 	ldw	r4,20(sp)
1000dd24:	18c00104 	addi	r3,r3,4
1000dd28:	d8c00015 	stw	r3,0(sp)
1000dd2c:	d8c00117 	ldw	r3,4(sp)
1000dd30:	18c00104 	addi	r3,r3,4
1000dd34:	d8c00115 	stw	r3,4(sp)
1000dd38:	d8c00017 	ldw	r3,0(sp)
1000dd3c:	193fb136 	bltu	r3,r4,1000dc04 <__alt_data_end+0xf800dc04>
1000dd40:	d8c00217 	ldw	r3,8(sp)
1000dd44:	00c00c0e 	bge	zero,r3,1000dd78 <__multiply+0x244>
1000dd48:	d8c00317 	ldw	r3,12(sp)
1000dd4c:	18bfff17 	ldw	r2,-4(r3)
1000dd50:	1d7fff04 	addi	r21,r3,-4
1000dd54:	10000326 	beq	r2,zero,1000dd64 <__multiply+0x230>
1000dd58:	00000706 	br	1000dd78 <__multiply+0x244>
1000dd5c:	a8800017 	ldw	r2,0(r21)
1000dd60:	1000051e 	bne	r2,zero,1000dd78 <__multiply+0x244>
1000dd64:	d8c00217 	ldw	r3,8(sp)
1000dd68:	ad7fff04 	addi	r21,r21,-4
1000dd6c:	18ffffc4 	addi	r3,r3,-1
1000dd70:	d8c00215 	stw	r3,8(sp)
1000dd74:	183ff91e 	bne	r3,zero,1000dd5c <__alt_data_end+0xf800dd5c>
1000dd78:	d8c00617 	ldw	r3,24(sp)
1000dd7c:	d9000217 	ldw	r4,8(sp)
1000dd80:	1805883a 	mov	r2,r3
1000dd84:	19000415 	stw	r4,16(r3)
1000dd88:	dfc01017 	ldw	ra,64(sp)
1000dd8c:	df000f17 	ldw	fp,60(sp)
1000dd90:	ddc00e17 	ldw	r23,56(sp)
1000dd94:	dd800d17 	ldw	r22,52(sp)
1000dd98:	dd400c17 	ldw	r21,48(sp)
1000dd9c:	dd000b17 	ldw	r20,44(sp)
1000dda0:	dcc00a17 	ldw	r19,40(sp)
1000dda4:	dc800917 	ldw	r18,36(sp)
1000dda8:	dc400817 	ldw	r17,32(sp)
1000ddac:	dc000717 	ldw	r16,28(sp)
1000ddb0:	dec01104 	addi	sp,sp,68
1000ddb4:	f800283a 	ret
1000ddb8:	3025883a 	mov	r18,r6
1000ddbc:	282d883a 	mov	r22,r5
1000ddc0:	003f6f06 	br	1000db80 <__alt_data_end+0xf800db80>

1000ddc4 <__pow5mult>:
1000ddc4:	defffa04 	addi	sp,sp,-24
1000ddc8:	dcc00315 	stw	r19,12(sp)
1000ddcc:	dc800215 	stw	r18,8(sp)
1000ddd0:	dc000015 	stw	r16,0(sp)
1000ddd4:	dfc00515 	stw	ra,20(sp)
1000ddd8:	dd000415 	stw	r20,16(sp)
1000dddc:	dc400115 	stw	r17,4(sp)
1000dde0:	308000cc 	andi	r2,r6,3
1000dde4:	3021883a 	mov	r16,r6
1000dde8:	2027883a 	mov	r19,r4
1000ddec:	2825883a 	mov	r18,r5
1000ddf0:	10002e1e 	bne	r2,zero,1000deac <__pow5mult+0xe8>
1000ddf4:	8021d0ba 	srai	r16,r16,2
1000ddf8:	80001a26 	beq	r16,zero,1000de64 <__pow5mult+0xa0>
1000ddfc:	9c401217 	ldw	r17,72(r19)
1000de00:	8800061e 	bne	r17,zero,1000de1c <__pow5mult+0x58>
1000de04:	00003406 	br	1000ded8 <__pow5mult+0x114>
1000de08:	8021d07a 	srai	r16,r16,1
1000de0c:	80001526 	beq	r16,zero,1000de64 <__pow5mult+0xa0>
1000de10:	88800017 	ldw	r2,0(r17)
1000de14:	10001c26 	beq	r2,zero,1000de88 <__pow5mult+0xc4>
1000de18:	1023883a 	mov	r17,r2
1000de1c:	80c0004c 	andi	r3,r16,1
1000de20:	183ff926 	beq	r3,zero,1000de08 <__alt_data_end+0xf800de08>
1000de24:	900b883a 	mov	r5,r18
1000de28:	880d883a 	mov	r6,r17
1000de2c:	9809883a 	mov	r4,r19
1000de30:	000db340 	call	1000db34 <__multiply>
1000de34:	90001b26 	beq	r18,zero,1000dea4 <__pow5mult+0xe0>
1000de38:	91c00117 	ldw	r7,4(r18)
1000de3c:	98c01317 	ldw	r3,76(r19)
1000de40:	8021d07a 	srai	r16,r16,1
1000de44:	39cf883a 	add	r7,r7,r7
1000de48:	39cf883a 	add	r7,r7,r7
1000de4c:	19c7883a 	add	r3,r3,r7
1000de50:	19000017 	ldw	r4,0(r3)
1000de54:	91000015 	stw	r4,0(r18)
1000de58:	1c800015 	stw	r18,0(r3)
1000de5c:	1025883a 	mov	r18,r2
1000de60:	803feb1e 	bne	r16,zero,1000de10 <__alt_data_end+0xf800de10>
1000de64:	9005883a 	mov	r2,r18
1000de68:	dfc00517 	ldw	ra,20(sp)
1000de6c:	dd000417 	ldw	r20,16(sp)
1000de70:	dcc00317 	ldw	r19,12(sp)
1000de74:	dc800217 	ldw	r18,8(sp)
1000de78:	dc400117 	ldw	r17,4(sp)
1000de7c:	dc000017 	ldw	r16,0(sp)
1000de80:	dec00604 	addi	sp,sp,24
1000de84:	f800283a 	ret
1000de88:	9809883a 	mov	r4,r19
1000de8c:	880b883a 	mov	r5,r17
1000de90:	880d883a 	mov	r6,r17
1000de94:	000db340 	call	1000db34 <__multiply>
1000de98:	88800015 	stw	r2,0(r17)
1000de9c:	10000015 	stw	zero,0(r2)
1000dea0:	003fdd06 	br	1000de18 <__alt_data_end+0xf800de18>
1000dea4:	1025883a 	mov	r18,r2
1000dea8:	003fd706 	br	1000de08 <__alt_data_end+0xf800de08>
1000deac:	10bfffc4 	addi	r2,r2,-1
1000deb0:	1085883a 	add	r2,r2,r2
1000deb4:	00c40074 	movhi	r3,4097
1000deb8:	18df5904 	addi	r3,r3,32100
1000debc:	1085883a 	add	r2,r2,r2
1000dec0:	1885883a 	add	r2,r3,r2
1000dec4:	11800017 	ldw	r6,0(r2)
1000dec8:	000f883a 	mov	r7,zero
1000decc:	000d7a00 	call	1000d7a0 <__multadd>
1000ded0:	1025883a 	mov	r18,r2
1000ded4:	003fc706 	br	1000ddf4 <__alt_data_end+0xf800ddf4>
1000ded8:	05000044 	movi	r20,1
1000dedc:	9809883a 	mov	r4,r19
1000dee0:	a00b883a 	mov	r5,r20
1000dee4:	000d6d00 	call	1000d6d0 <_Balloc>
1000dee8:	1023883a 	mov	r17,r2
1000deec:	00809c44 	movi	r2,625
1000def0:	88800515 	stw	r2,20(r17)
1000def4:	8d000415 	stw	r20,16(r17)
1000def8:	9c401215 	stw	r17,72(r19)
1000defc:	88000015 	stw	zero,0(r17)
1000df00:	003fc606 	br	1000de1c <__alt_data_end+0xf800de1c>

1000df04 <__lshift>:
1000df04:	defff904 	addi	sp,sp,-28
1000df08:	dd000415 	stw	r20,16(sp)
1000df0c:	dcc00315 	stw	r19,12(sp)
1000df10:	3029d17a 	srai	r20,r6,5
1000df14:	2cc00417 	ldw	r19,16(r5)
1000df18:	28800217 	ldw	r2,8(r5)
1000df1c:	dd400515 	stw	r21,20(sp)
1000df20:	a4e7883a 	add	r19,r20,r19
1000df24:	dc800215 	stw	r18,8(sp)
1000df28:	dc400115 	stw	r17,4(sp)
1000df2c:	dc000015 	stw	r16,0(sp)
1000df30:	dfc00615 	stw	ra,24(sp)
1000df34:	9c000044 	addi	r16,r19,1
1000df38:	2823883a 	mov	r17,r5
1000df3c:	302b883a 	mov	r21,r6
1000df40:	2025883a 	mov	r18,r4
1000df44:	29400117 	ldw	r5,4(r5)
1000df48:	1400030e 	bge	r2,r16,1000df58 <__lshift+0x54>
1000df4c:	1085883a 	add	r2,r2,r2
1000df50:	29400044 	addi	r5,r5,1
1000df54:	143ffd16 	blt	r2,r16,1000df4c <__alt_data_end+0xf800df4c>
1000df58:	9009883a 	mov	r4,r18
1000df5c:	000d6d00 	call	1000d6d0 <_Balloc>
1000df60:	11c00504 	addi	r7,r2,20
1000df64:	0500090e 	bge	zero,r20,1000df8c <__lshift+0x88>
1000df68:	3811883a 	mov	r8,r7
1000df6c:	0007883a 	mov	r3,zero
1000df70:	40000015 	stw	zero,0(r8)
1000df74:	18c00044 	addi	r3,r3,1
1000df78:	42000104 	addi	r8,r8,4
1000df7c:	1d3ffc1e 	bne	r3,r20,1000df70 <__alt_data_end+0xf800df70>
1000df80:	18c7883a 	add	r3,r3,r3
1000df84:	18c7883a 	add	r3,r3,r3
1000df88:	38cf883a 	add	r7,r7,r3
1000df8c:	89000417 	ldw	r4,16(r17)
1000df90:	88c00504 	addi	r3,r17,20
1000df94:	a98007cc 	andi	r6,r21,31
1000df98:	2109883a 	add	r4,r4,r4
1000df9c:	2109883a 	add	r4,r4,r4
1000dfa0:	1909883a 	add	r4,r3,r4
1000dfa4:	30002326 	beq	r6,zero,1000e034 <__lshift+0x130>
1000dfa8:	01400804 	movi	r5,32
1000dfac:	298bc83a 	sub	r5,r5,r6
1000dfb0:	0013883a 	mov	r9,zero
1000dfb4:	1a000017 	ldw	r8,0(r3)
1000dfb8:	3815883a 	mov	r10,r7
1000dfbc:	39c00104 	addi	r7,r7,4
1000dfc0:	4190983a 	sll	r8,r8,r6
1000dfc4:	18c00104 	addi	r3,r3,4
1000dfc8:	4a10b03a 	or	r8,r9,r8
1000dfcc:	3a3fff15 	stw	r8,-4(r7)
1000dfd0:	1a3fff17 	ldw	r8,-4(r3)
1000dfd4:	4152d83a 	srl	r9,r8,r5
1000dfd8:	193ff636 	bltu	r3,r4,1000dfb4 <__alt_data_end+0xf800dfb4>
1000dfdc:	52400115 	stw	r9,4(r10)
1000dfe0:	48000126 	beq	r9,zero,1000dfe8 <__lshift+0xe4>
1000dfe4:	9c000084 	addi	r16,r19,2
1000dfe8:	89000117 	ldw	r4,4(r17)
1000dfec:	90c01317 	ldw	r3,76(r18)
1000dff0:	843fffc4 	addi	r16,r16,-1
1000dff4:	2109883a 	add	r4,r4,r4
1000dff8:	2109883a 	add	r4,r4,r4
1000dffc:	1907883a 	add	r3,r3,r4
1000e000:	19000017 	ldw	r4,0(r3)
1000e004:	14000415 	stw	r16,16(r2)
1000e008:	89000015 	stw	r4,0(r17)
1000e00c:	1c400015 	stw	r17,0(r3)
1000e010:	dfc00617 	ldw	ra,24(sp)
1000e014:	dd400517 	ldw	r21,20(sp)
1000e018:	dd000417 	ldw	r20,16(sp)
1000e01c:	dcc00317 	ldw	r19,12(sp)
1000e020:	dc800217 	ldw	r18,8(sp)
1000e024:	dc400117 	ldw	r17,4(sp)
1000e028:	dc000017 	ldw	r16,0(sp)
1000e02c:	dec00704 	addi	sp,sp,28
1000e030:	f800283a 	ret
1000e034:	19400017 	ldw	r5,0(r3)
1000e038:	39c00104 	addi	r7,r7,4
1000e03c:	18c00104 	addi	r3,r3,4
1000e040:	397fff15 	stw	r5,-4(r7)
1000e044:	193ffb36 	bltu	r3,r4,1000e034 <__alt_data_end+0xf800e034>
1000e048:	003fe706 	br	1000dfe8 <__alt_data_end+0xf800dfe8>

1000e04c <__mcmp>:
1000e04c:	20800417 	ldw	r2,16(r4)
1000e050:	28c00417 	ldw	r3,16(r5)
1000e054:	10c5c83a 	sub	r2,r2,r3
1000e058:	1000111e 	bne	r2,zero,1000e0a0 <__mcmp+0x54>
1000e05c:	18c7883a 	add	r3,r3,r3
1000e060:	18c7883a 	add	r3,r3,r3
1000e064:	21000504 	addi	r4,r4,20
1000e068:	29400504 	addi	r5,r5,20
1000e06c:	20c5883a 	add	r2,r4,r3
1000e070:	28cb883a 	add	r5,r5,r3
1000e074:	00000106 	br	1000e07c <__mcmp+0x30>
1000e078:	20800a2e 	bgeu	r4,r2,1000e0a4 <__mcmp+0x58>
1000e07c:	10bfff04 	addi	r2,r2,-4
1000e080:	297fff04 	addi	r5,r5,-4
1000e084:	11800017 	ldw	r6,0(r2)
1000e088:	28c00017 	ldw	r3,0(r5)
1000e08c:	30fffa26 	beq	r6,r3,1000e078 <__alt_data_end+0xf800e078>
1000e090:	30c00236 	bltu	r6,r3,1000e09c <__mcmp+0x50>
1000e094:	00800044 	movi	r2,1
1000e098:	f800283a 	ret
1000e09c:	00bfffc4 	movi	r2,-1
1000e0a0:	f800283a 	ret
1000e0a4:	0005883a 	mov	r2,zero
1000e0a8:	f800283a 	ret

1000e0ac <__mdiff>:
1000e0ac:	defffb04 	addi	sp,sp,-20
1000e0b0:	dc000015 	stw	r16,0(sp)
1000e0b4:	2821883a 	mov	r16,r5
1000e0b8:	dcc00315 	stw	r19,12(sp)
1000e0bc:	300b883a 	mov	r5,r6
1000e0c0:	2027883a 	mov	r19,r4
1000e0c4:	8009883a 	mov	r4,r16
1000e0c8:	dc800215 	stw	r18,8(sp)
1000e0cc:	dfc00415 	stw	ra,16(sp)
1000e0d0:	dc400115 	stw	r17,4(sp)
1000e0d4:	3025883a 	mov	r18,r6
1000e0d8:	000e04c0 	call	1000e04c <__mcmp>
1000e0dc:	10005226 	beq	r2,zero,1000e228 <__mdiff+0x17c>
1000e0e0:	10004c16 	blt	r2,zero,1000e214 <__mdiff+0x168>
1000e0e4:	0023883a 	mov	r17,zero
1000e0e8:	81400117 	ldw	r5,4(r16)
1000e0ec:	9809883a 	mov	r4,r19
1000e0f0:	000d6d00 	call	1000d6d0 <_Balloc>
1000e0f4:	83400417 	ldw	r13,16(r16)
1000e0f8:	93800417 	ldw	r14,16(r18)
1000e0fc:	81000504 	addi	r4,r16,20
1000e100:	6b59883a 	add	r12,r13,r13
1000e104:	739d883a 	add	r14,r14,r14
1000e108:	6319883a 	add	r12,r12,r12
1000e10c:	91800504 	addi	r6,r18,20
1000e110:	739d883a 	add	r14,r14,r14
1000e114:	14400315 	stw	r17,12(r2)
1000e118:	2319883a 	add	r12,r4,r12
1000e11c:	339d883a 	add	r14,r6,r14
1000e120:	12400504 	addi	r9,r2,20
1000e124:	0007883a 	mov	r3,zero
1000e128:	22000017 	ldw	r8,0(r4)
1000e12c:	32800017 	ldw	r10,0(r6)
1000e130:	4ac00104 	addi	r11,r9,4
1000e134:	41ffffcc 	andi	r7,r8,65535
1000e138:	38c7883a 	add	r3,r7,r3
1000e13c:	51ffffcc 	andi	r7,r10,65535
1000e140:	19cfc83a 	sub	r7,r3,r7
1000e144:	4010d43a 	srli	r8,r8,16
1000e148:	5014d43a 	srli	r10,r10,16
1000e14c:	3807d43a 	srai	r3,r7,16
1000e150:	39ffffcc 	andi	r7,r7,65535
1000e154:	4291c83a 	sub	r8,r8,r10
1000e158:	40c7883a 	add	r3,r8,r3
1000e15c:	1810943a 	slli	r8,r3,16
1000e160:	31800104 	addi	r6,r6,4
1000e164:	21000104 	addi	r4,r4,4
1000e168:	41ceb03a 	or	r7,r8,r7
1000e16c:	49c00015 	stw	r7,0(r9)
1000e170:	1807d43a 	srai	r3,r3,16
1000e174:	580b883a 	mov	r5,r11
1000e178:	5813883a 	mov	r9,r11
1000e17c:	33bfea36 	bltu	r6,r14,1000e128 <__alt_data_end+0xf800e128>
1000e180:	2011883a 	mov	r8,r4
1000e184:	2300152e 	bgeu	r4,r12,1000e1dc <__mdiff+0x130>
1000e188:	21400017 	ldw	r5,0(r4)
1000e18c:	4a400104 	addi	r9,r9,4
1000e190:	21000104 	addi	r4,r4,4
1000e194:	29ffffcc 	andi	r7,r5,65535
1000e198:	38c7883a 	add	r3,r7,r3
1000e19c:	280ad43a 	srli	r5,r5,16
1000e1a0:	180dd43a 	srai	r6,r3,16
1000e1a4:	19ffffcc 	andi	r7,r3,65535
1000e1a8:	3147883a 	add	r3,r6,r5
1000e1ac:	180a943a 	slli	r5,r3,16
1000e1b0:	1807d43a 	srai	r3,r3,16
1000e1b4:	29ceb03a 	or	r7,r5,r7
1000e1b8:	49ffff15 	stw	r7,-4(r9)
1000e1bc:	233ff236 	bltu	r4,r12,1000e188 <__alt_data_end+0xf800e188>
1000e1c0:	0206303a 	nor	r3,zero,r8
1000e1c4:	1b07883a 	add	r3,r3,r12
1000e1c8:	1806d0ba 	srli	r3,r3,2
1000e1cc:	18c00044 	addi	r3,r3,1
1000e1d0:	18c7883a 	add	r3,r3,r3
1000e1d4:	18c7883a 	add	r3,r3,r3
1000e1d8:	58cb883a 	add	r5,r11,r3
1000e1dc:	28ffff04 	addi	r3,r5,-4
1000e1e0:	3800041e 	bne	r7,zero,1000e1f4 <__mdiff+0x148>
1000e1e4:	18ffff04 	addi	r3,r3,-4
1000e1e8:	19000017 	ldw	r4,0(r3)
1000e1ec:	6b7fffc4 	addi	r13,r13,-1
1000e1f0:	203ffc26 	beq	r4,zero,1000e1e4 <__alt_data_end+0xf800e1e4>
1000e1f4:	13400415 	stw	r13,16(r2)
1000e1f8:	dfc00417 	ldw	ra,16(sp)
1000e1fc:	dcc00317 	ldw	r19,12(sp)
1000e200:	dc800217 	ldw	r18,8(sp)
1000e204:	dc400117 	ldw	r17,4(sp)
1000e208:	dc000017 	ldw	r16,0(sp)
1000e20c:	dec00504 	addi	sp,sp,20
1000e210:	f800283a 	ret
1000e214:	8005883a 	mov	r2,r16
1000e218:	04400044 	movi	r17,1
1000e21c:	9021883a 	mov	r16,r18
1000e220:	1025883a 	mov	r18,r2
1000e224:	003fb006 	br	1000e0e8 <__alt_data_end+0xf800e0e8>
1000e228:	9809883a 	mov	r4,r19
1000e22c:	000b883a 	mov	r5,zero
1000e230:	000d6d00 	call	1000d6d0 <_Balloc>
1000e234:	00c00044 	movi	r3,1
1000e238:	10c00415 	stw	r3,16(r2)
1000e23c:	10000515 	stw	zero,20(r2)
1000e240:	003fed06 	br	1000e1f8 <__alt_data_end+0xf800e1f8>

1000e244 <__ulp>:
1000e244:	295ffc2c 	andhi	r5,r5,32752
1000e248:	00bf3034 	movhi	r2,64704
1000e24c:	2887883a 	add	r3,r5,r2
1000e250:	00c0020e 	bge	zero,r3,1000e25c <__ulp+0x18>
1000e254:	0005883a 	mov	r2,zero
1000e258:	f800283a 	ret
1000e25c:	00c7c83a 	sub	r3,zero,r3
1000e260:	180bd53a 	srai	r5,r3,20
1000e264:	008004c4 	movi	r2,19
1000e268:	11400a0e 	bge	r2,r5,1000e294 <__ulp+0x50>
1000e26c:	00800c84 	movi	r2,50
1000e270:	0007883a 	mov	r3,zero
1000e274:	11400516 	blt	r2,r5,1000e28c <__ulp+0x48>
1000e278:	00800cc4 	movi	r2,51
1000e27c:	114bc83a 	sub	r5,r2,r5
1000e280:	00800044 	movi	r2,1
1000e284:	1144983a 	sll	r2,r2,r5
1000e288:	f800283a 	ret
1000e28c:	00800044 	movi	r2,1
1000e290:	f800283a 	ret
1000e294:	00800234 	movhi	r2,8
1000e298:	1147d83a 	sra	r3,r2,r5
1000e29c:	0005883a 	mov	r2,zero
1000e2a0:	f800283a 	ret

1000e2a4 <__b2d>:
1000e2a4:	defffa04 	addi	sp,sp,-24
1000e2a8:	dc000015 	stw	r16,0(sp)
1000e2ac:	24000417 	ldw	r16,16(r4)
1000e2b0:	dc400115 	stw	r17,4(sp)
1000e2b4:	24400504 	addi	r17,r4,20
1000e2b8:	8421883a 	add	r16,r16,r16
1000e2bc:	8421883a 	add	r16,r16,r16
1000e2c0:	8c21883a 	add	r16,r17,r16
1000e2c4:	dc800215 	stw	r18,8(sp)
1000e2c8:	84bfff17 	ldw	r18,-4(r16)
1000e2cc:	dd000415 	stw	r20,16(sp)
1000e2d0:	dcc00315 	stw	r19,12(sp)
1000e2d4:	9009883a 	mov	r4,r18
1000e2d8:	2829883a 	mov	r20,r5
1000e2dc:	dfc00515 	stw	ra,20(sp)
1000e2e0:	000d9e00 	call	1000d9e0 <__hi0bits>
1000e2e4:	00c00804 	movi	r3,32
1000e2e8:	1887c83a 	sub	r3,r3,r2
1000e2ec:	a0c00015 	stw	r3,0(r20)
1000e2f0:	00c00284 	movi	r3,10
1000e2f4:	84ffff04 	addi	r19,r16,-4
1000e2f8:	18801216 	blt	r3,r2,1000e344 <__b2d+0xa0>
1000e2fc:	014002c4 	movi	r5,11
1000e300:	2889c83a 	sub	r4,r5,r2
1000e304:	9106d83a 	srl	r3,r18,r4
1000e308:	18cffc34 	orhi	r3,r3,16368
1000e30c:	8cc0282e 	bgeu	r17,r19,1000e3b0 <__b2d+0x10c>
1000e310:	817ffe17 	ldw	r5,-8(r16)
1000e314:	290ad83a 	srl	r5,r5,r4
1000e318:	10800544 	addi	r2,r2,21
1000e31c:	9084983a 	sll	r2,r18,r2
1000e320:	2884b03a 	or	r2,r5,r2
1000e324:	dfc00517 	ldw	ra,20(sp)
1000e328:	dd000417 	ldw	r20,16(sp)
1000e32c:	dcc00317 	ldw	r19,12(sp)
1000e330:	dc800217 	ldw	r18,8(sp)
1000e334:	dc400117 	ldw	r17,4(sp)
1000e338:	dc000017 	ldw	r16,0(sp)
1000e33c:	dec00604 	addi	sp,sp,24
1000e340:	f800283a 	ret
1000e344:	113ffd44 	addi	r4,r2,-11
1000e348:	8cc00f2e 	bgeu	r17,r19,1000e388 <__b2d+0xe4>
1000e34c:	81bffe04 	addi	r6,r16,-8
1000e350:	817ffe17 	ldw	r5,-8(r16)
1000e354:	20001326 	beq	r4,zero,1000e3a4 <__b2d+0x100>
1000e358:	00c00ac4 	movi	r3,43
1000e35c:	1885c83a 	sub	r2,r3,r2
1000e360:	2886d83a 	srl	r3,r5,r2
1000e364:	9124983a 	sll	r18,r18,r4
1000e368:	90e4b03a 	or	r18,r18,r3
1000e36c:	90cffc34 	orhi	r3,r18,16368
1000e370:	8980112e 	bgeu	r17,r6,1000e3b8 <__b2d+0x114>
1000e374:	81bffd17 	ldw	r6,-12(r16)
1000e378:	308cd83a 	srl	r6,r6,r2
1000e37c:	2904983a 	sll	r2,r5,r4
1000e380:	1184b03a 	or	r2,r2,r6
1000e384:	003fe706 	br	1000e324 <__alt_data_end+0xf800e324>
1000e388:	20000526 	beq	r4,zero,1000e3a0 <__b2d+0xfc>
1000e38c:	9124983a 	sll	r18,r18,r4
1000e390:	000d883a 	mov	r6,zero
1000e394:	000b883a 	mov	r5,zero
1000e398:	90cffc34 	orhi	r3,r18,16368
1000e39c:	003ff706 	br	1000e37c <__alt_data_end+0xf800e37c>
1000e3a0:	000b883a 	mov	r5,zero
1000e3a4:	90cffc34 	orhi	r3,r18,16368
1000e3a8:	2805883a 	mov	r2,r5
1000e3ac:	003fdd06 	br	1000e324 <__alt_data_end+0xf800e324>
1000e3b0:	000b883a 	mov	r5,zero
1000e3b4:	003fd806 	br	1000e318 <__alt_data_end+0xf800e318>
1000e3b8:	000d883a 	mov	r6,zero
1000e3bc:	003fef06 	br	1000e37c <__alt_data_end+0xf800e37c>

1000e3c0 <__d2b>:
1000e3c0:	defff704 	addi	sp,sp,-36
1000e3c4:	dc000215 	stw	r16,8(sp)
1000e3c8:	3021883a 	mov	r16,r6
1000e3cc:	dc400315 	stw	r17,12(sp)
1000e3d0:	8022907a 	slli	r17,r16,1
1000e3d4:	dd400715 	stw	r21,28(sp)
1000e3d8:	282b883a 	mov	r21,r5
1000e3dc:	01400044 	movi	r5,1
1000e3e0:	dd000615 	stw	r20,24(sp)
1000e3e4:	dcc00515 	stw	r19,20(sp)
1000e3e8:	dc800415 	stw	r18,16(sp)
1000e3ec:	dfc00815 	stw	ra,32(sp)
1000e3f0:	3829883a 	mov	r20,r7
1000e3f4:	dc800917 	ldw	r18,36(sp)
1000e3f8:	8822d57a 	srli	r17,r17,21
1000e3fc:	000d6d00 	call	1000d6d0 <_Balloc>
1000e400:	1027883a 	mov	r19,r2
1000e404:	00800434 	movhi	r2,16
1000e408:	10bfffc4 	addi	r2,r2,-1
1000e40c:	808c703a 	and	r6,r16,r2
1000e410:	88000126 	beq	r17,zero,1000e418 <__d2b+0x58>
1000e414:	31800434 	orhi	r6,r6,16
1000e418:	d9800015 	stw	r6,0(sp)
1000e41c:	a8001f26 	beq	r21,zero,1000e49c <__d2b+0xdc>
1000e420:	d9000104 	addi	r4,sp,4
1000e424:	dd400115 	stw	r21,4(sp)
1000e428:	000da480 	call	1000da48 <__lo0bits>
1000e42c:	d8c00017 	ldw	r3,0(sp)
1000e430:	1000291e 	bne	r2,zero,1000e4d8 <__d2b+0x118>
1000e434:	d9000117 	ldw	r4,4(sp)
1000e438:	99000515 	stw	r4,20(r19)
1000e43c:	1820c03a 	cmpne	r16,r3,zero
1000e440:	84000044 	addi	r16,r16,1
1000e444:	98c00615 	stw	r3,24(r19)
1000e448:	9c000415 	stw	r16,16(r19)
1000e44c:	88001b1e 	bne	r17,zero,1000e4bc <__d2b+0xfc>
1000e450:	800690ba 	slli	r3,r16,2
1000e454:	10bef384 	addi	r2,r2,-1074
1000e458:	a0800015 	stw	r2,0(r20)
1000e45c:	98c5883a 	add	r2,r19,r3
1000e460:	11000417 	ldw	r4,16(r2)
1000e464:	8020917a 	slli	r16,r16,5
1000e468:	000d9e00 	call	1000d9e0 <__hi0bits>
1000e46c:	8085c83a 	sub	r2,r16,r2
1000e470:	90800015 	stw	r2,0(r18)
1000e474:	9805883a 	mov	r2,r19
1000e478:	dfc00817 	ldw	ra,32(sp)
1000e47c:	dd400717 	ldw	r21,28(sp)
1000e480:	dd000617 	ldw	r20,24(sp)
1000e484:	dcc00517 	ldw	r19,20(sp)
1000e488:	dc800417 	ldw	r18,16(sp)
1000e48c:	dc400317 	ldw	r17,12(sp)
1000e490:	dc000217 	ldw	r16,8(sp)
1000e494:	dec00904 	addi	sp,sp,36
1000e498:	f800283a 	ret
1000e49c:	d809883a 	mov	r4,sp
1000e4a0:	000da480 	call	1000da48 <__lo0bits>
1000e4a4:	d8c00017 	ldw	r3,0(sp)
1000e4a8:	04000044 	movi	r16,1
1000e4ac:	9c000415 	stw	r16,16(r19)
1000e4b0:	98c00515 	stw	r3,20(r19)
1000e4b4:	10800804 	addi	r2,r2,32
1000e4b8:	883fe526 	beq	r17,zero,1000e450 <__alt_data_end+0xf800e450>
1000e4bc:	8c7ef344 	addi	r17,r17,-1075
1000e4c0:	88a3883a 	add	r17,r17,r2
1000e4c4:	00c00d44 	movi	r3,53
1000e4c8:	a4400015 	stw	r17,0(r20)
1000e4cc:	1885c83a 	sub	r2,r3,r2
1000e4d0:	90800015 	stw	r2,0(r18)
1000e4d4:	003fe706 	br	1000e474 <__alt_data_end+0xf800e474>
1000e4d8:	01000804 	movi	r4,32
1000e4dc:	2089c83a 	sub	r4,r4,r2
1000e4e0:	1908983a 	sll	r4,r3,r4
1000e4e4:	d9400117 	ldw	r5,4(sp)
1000e4e8:	1886d83a 	srl	r3,r3,r2
1000e4ec:	2148b03a 	or	r4,r4,r5
1000e4f0:	99000515 	stw	r4,20(r19)
1000e4f4:	d8c00015 	stw	r3,0(sp)
1000e4f8:	003fd006 	br	1000e43c <__alt_data_end+0xf800e43c>

1000e4fc <__ratio>:
1000e4fc:	defff904 	addi	sp,sp,-28
1000e500:	dc400315 	stw	r17,12(sp)
1000e504:	2823883a 	mov	r17,r5
1000e508:	d9400104 	addi	r5,sp,4
1000e50c:	dfc00615 	stw	ra,24(sp)
1000e510:	dcc00515 	stw	r19,20(sp)
1000e514:	dc800415 	stw	r18,16(sp)
1000e518:	2027883a 	mov	r19,r4
1000e51c:	dc000215 	stw	r16,8(sp)
1000e520:	000e2a40 	call	1000e2a4 <__b2d>
1000e524:	8809883a 	mov	r4,r17
1000e528:	d80b883a 	mov	r5,sp
1000e52c:	1025883a 	mov	r18,r2
1000e530:	1821883a 	mov	r16,r3
1000e534:	000e2a40 	call	1000e2a4 <__b2d>
1000e538:	8a400417 	ldw	r9,16(r17)
1000e53c:	9a000417 	ldw	r8,16(r19)
1000e540:	100d883a 	mov	r6,r2
1000e544:	d8800017 	ldw	r2,0(sp)
1000e548:	4251c83a 	sub	r8,r8,r9
1000e54c:	4012917a 	slli	r9,r8,5
1000e550:	da000117 	ldw	r8,4(sp)
1000e554:	4091c83a 	sub	r8,r8,r2
1000e558:	4251883a 	add	r8,r8,r9
1000e55c:	02000d0e 	bge	zero,r8,1000e594 <__ratio+0x98>
1000e560:	4010953a 	slli	r8,r8,20
1000e564:	4421883a 	add	r16,r8,r16
1000e568:	9009883a 	mov	r4,r18
1000e56c:	800b883a 	mov	r5,r16
1000e570:	180f883a 	mov	r7,r3
1000e574:	001240c0 	call	1001240c <__divdf3>
1000e578:	dfc00617 	ldw	ra,24(sp)
1000e57c:	dcc00517 	ldw	r19,20(sp)
1000e580:	dc800417 	ldw	r18,16(sp)
1000e584:	dc400317 	ldw	r17,12(sp)
1000e588:	dc000217 	ldw	r16,8(sp)
1000e58c:	dec00704 	addi	sp,sp,28
1000e590:	f800283a 	ret
1000e594:	4010953a 	slli	r8,r8,20
1000e598:	1a07c83a 	sub	r3,r3,r8
1000e59c:	003ff206 	br	1000e568 <__alt_data_end+0xf800e568>

1000e5a0 <_mprec_log10>:
1000e5a0:	defffe04 	addi	sp,sp,-8
1000e5a4:	dc000015 	stw	r16,0(sp)
1000e5a8:	dfc00115 	stw	ra,4(sp)
1000e5ac:	008005c4 	movi	r2,23
1000e5b0:	2021883a 	mov	r16,r4
1000e5b4:	11000d0e 	bge	r2,r4,1000e5ec <_mprec_log10+0x4c>
1000e5b8:	0005883a 	mov	r2,zero
1000e5bc:	00cffc34 	movhi	r3,16368
1000e5c0:	843fffc4 	addi	r16,r16,-1
1000e5c4:	1009883a 	mov	r4,r2
1000e5c8:	180b883a 	mov	r5,r3
1000e5cc:	000d883a 	mov	r6,zero
1000e5d0:	01d00934 	movhi	r7,16420
1000e5d4:	000658c0 	call	1000658c <__muldf3>
1000e5d8:	803ff91e 	bne	r16,zero,1000e5c0 <__alt_data_end+0xf800e5c0>
1000e5dc:	dfc00117 	ldw	ra,4(sp)
1000e5e0:	dc000017 	ldw	r16,0(sp)
1000e5e4:	dec00204 	addi	sp,sp,8
1000e5e8:	f800283a 	ret
1000e5ec:	202090fa 	slli	r16,r4,3
1000e5f0:	00840074 	movhi	r2,4097
1000e5f4:	109f7004 	addi	r2,r2,32192
1000e5f8:	1421883a 	add	r16,r2,r16
1000e5fc:	80800017 	ldw	r2,0(r16)
1000e600:	80c00117 	ldw	r3,4(r16)
1000e604:	dfc00117 	ldw	ra,4(sp)
1000e608:	dc000017 	ldw	r16,0(sp)
1000e60c:	dec00204 	addi	sp,sp,8
1000e610:	f800283a 	ret

1000e614 <__copybits>:
1000e614:	297fffc4 	addi	r5,r5,-1
1000e618:	280fd17a 	srai	r7,r5,5
1000e61c:	30c00417 	ldw	r3,16(r6)
1000e620:	30800504 	addi	r2,r6,20
1000e624:	39c00044 	addi	r7,r7,1
1000e628:	18c7883a 	add	r3,r3,r3
1000e62c:	39cf883a 	add	r7,r7,r7
1000e630:	18c7883a 	add	r3,r3,r3
1000e634:	39cf883a 	add	r7,r7,r7
1000e638:	10c7883a 	add	r3,r2,r3
1000e63c:	21cf883a 	add	r7,r4,r7
1000e640:	10c00d2e 	bgeu	r2,r3,1000e678 <__copybits+0x64>
1000e644:	200b883a 	mov	r5,r4
1000e648:	12000017 	ldw	r8,0(r2)
1000e64c:	29400104 	addi	r5,r5,4
1000e650:	10800104 	addi	r2,r2,4
1000e654:	2a3fff15 	stw	r8,-4(r5)
1000e658:	10fffb36 	bltu	r2,r3,1000e648 <__alt_data_end+0xf800e648>
1000e65c:	1985c83a 	sub	r2,r3,r6
1000e660:	10bffac4 	addi	r2,r2,-21
1000e664:	1004d0ba 	srli	r2,r2,2
1000e668:	10800044 	addi	r2,r2,1
1000e66c:	1085883a 	add	r2,r2,r2
1000e670:	1085883a 	add	r2,r2,r2
1000e674:	2089883a 	add	r4,r4,r2
1000e678:	21c0032e 	bgeu	r4,r7,1000e688 <__copybits+0x74>
1000e67c:	20000015 	stw	zero,0(r4)
1000e680:	21000104 	addi	r4,r4,4
1000e684:	21fffd36 	bltu	r4,r7,1000e67c <__alt_data_end+0xf800e67c>
1000e688:	f800283a 	ret

1000e68c <__any_on>:
1000e68c:	20c00417 	ldw	r3,16(r4)
1000e690:	2805d17a 	srai	r2,r5,5
1000e694:	21000504 	addi	r4,r4,20
1000e698:	18800d0e 	bge	r3,r2,1000e6d0 <__any_on+0x44>
1000e69c:	18c7883a 	add	r3,r3,r3
1000e6a0:	18c7883a 	add	r3,r3,r3
1000e6a4:	20c7883a 	add	r3,r4,r3
1000e6a8:	20c0192e 	bgeu	r4,r3,1000e710 <__any_on+0x84>
1000e6ac:	18bfff17 	ldw	r2,-4(r3)
1000e6b0:	18ffff04 	addi	r3,r3,-4
1000e6b4:	1000041e 	bne	r2,zero,1000e6c8 <__any_on+0x3c>
1000e6b8:	20c0142e 	bgeu	r4,r3,1000e70c <__any_on+0x80>
1000e6bc:	18ffff04 	addi	r3,r3,-4
1000e6c0:	19400017 	ldw	r5,0(r3)
1000e6c4:	283ffc26 	beq	r5,zero,1000e6b8 <__alt_data_end+0xf800e6b8>
1000e6c8:	00800044 	movi	r2,1
1000e6cc:	f800283a 	ret
1000e6d0:	10c00a0e 	bge	r2,r3,1000e6fc <__any_on+0x70>
1000e6d4:	1085883a 	add	r2,r2,r2
1000e6d8:	1085883a 	add	r2,r2,r2
1000e6dc:	294007cc 	andi	r5,r5,31
1000e6e0:	2087883a 	add	r3,r4,r2
1000e6e4:	283ff026 	beq	r5,zero,1000e6a8 <__alt_data_end+0xf800e6a8>
1000e6e8:	19800017 	ldw	r6,0(r3)
1000e6ec:	3144d83a 	srl	r2,r6,r5
1000e6f0:	114a983a 	sll	r5,r2,r5
1000e6f4:	29bff41e 	bne	r5,r6,1000e6c8 <__alt_data_end+0xf800e6c8>
1000e6f8:	003feb06 	br	1000e6a8 <__alt_data_end+0xf800e6a8>
1000e6fc:	1085883a 	add	r2,r2,r2
1000e700:	1085883a 	add	r2,r2,r2
1000e704:	2087883a 	add	r3,r4,r2
1000e708:	003fe706 	br	1000e6a8 <__alt_data_end+0xf800e6a8>
1000e70c:	f800283a 	ret
1000e710:	0005883a 	mov	r2,zero
1000e714:	f800283a 	ret

1000e718 <_realloc_r>:
1000e718:	defff604 	addi	sp,sp,-40
1000e71c:	dcc00315 	stw	r19,12(sp)
1000e720:	dc400115 	stw	r17,4(sp)
1000e724:	dfc00915 	stw	ra,36(sp)
1000e728:	df000815 	stw	fp,32(sp)
1000e72c:	ddc00715 	stw	r23,28(sp)
1000e730:	dd800615 	stw	r22,24(sp)
1000e734:	dd400515 	stw	r21,20(sp)
1000e738:	dd000415 	stw	r20,16(sp)
1000e73c:	dc800215 	stw	r18,8(sp)
1000e740:	dc000015 	stw	r16,0(sp)
1000e744:	2827883a 	mov	r19,r5
1000e748:	3023883a 	mov	r17,r6
1000e74c:	2800bf26 	beq	r5,zero,1000ea4c <_realloc_r+0x334>
1000e750:	2025883a 	mov	r18,r4
1000e754:	00137b40 	call	100137b4 <__malloc_lock>
1000e758:	98ffff17 	ldw	r3,-4(r19)
1000e75c:	01bfff04 	movi	r6,-4
1000e760:	890002c4 	addi	r4,r17,11
1000e764:	01c00584 	movi	r7,22
1000e768:	9d7ffe04 	addi	r21,r19,-8
1000e76c:	19a0703a 	and	r16,r3,r6
1000e770:	39003f2e 	bgeu	r7,r4,1000e870 <_realloc_r+0x158>
1000e774:	053ffe04 	movi	r20,-8
1000e778:	2528703a 	and	r20,r4,r20
1000e77c:	a00f883a 	mov	r7,r20
1000e780:	a0008216 	blt	r20,zero,1000e98c <_realloc_r+0x274>
1000e784:	a4408136 	bltu	r20,r17,1000e98c <_realloc_r+0x274>
1000e788:	81c03c0e 	bge	r16,r7,1000e87c <_realloc_r+0x164>
1000e78c:	070400b4 	movhi	fp,4098
1000e790:	e720de04 	addi	fp,fp,-31880
1000e794:	e1000217 	ldw	r4,8(fp)
1000e798:	ac05883a 	add	r2,r21,r16
1000e79c:	2080bf26 	beq	r4,r2,1000ea9c <_realloc_r+0x384>
1000e7a0:	11000117 	ldw	r4,4(r2)
1000e7a4:	023fff84 	movi	r8,-2
1000e7a8:	2210703a 	and	r8,r4,r8
1000e7ac:	1211883a 	add	r8,r2,r8
1000e7b0:	41400117 	ldw	r5,4(r8)
1000e7b4:	2940004c 	andi	r5,r5,1
1000e7b8:	28004a1e 	bne	r5,zero,1000e8e4 <_realloc_r+0x1cc>
1000e7bc:	017fff04 	movi	r5,-4
1000e7c0:	2148703a 	and	r4,r4,r5
1000e7c4:	2409883a 	add	r4,r4,r16
1000e7c8:	21c0ad0e 	bge	r4,r7,1000ea80 <_realloc_r+0x368>
1000e7cc:	18c0004c 	andi	r3,r3,1
1000e7d0:	18007f1e 	bne	r3,zero,1000e9d0 <_realloc_r+0x2b8>
1000e7d4:	9dfffe17 	ldw	r23,-8(r19)
1000e7d8:	adefc83a 	sub	r23,r21,r23
1000e7dc:	bd800117 	ldw	r22,4(r23)
1000e7e0:	b14a703a 	and	r5,r22,r5
1000e7e4:	216d883a 	add	r22,r4,r5
1000e7e8:	b1c04516 	blt	r22,r7,1000e900 <_realloc_r+0x1e8>
1000e7ec:	10c00317 	ldw	r3,12(r2)
1000e7f0:	10800217 	ldw	r2,8(r2)
1000e7f4:	81bfff04 	addi	r6,r16,-4
1000e7f8:	bc400204 	addi	r17,r23,8
1000e7fc:	10c00315 	stw	r3,12(r2)
1000e800:	18800215 	stw	r2,8(r3)
1000e804:	b9400217 	ldw	r5,8(r23)
1000e808:	b8c00317 	ldw	r3,12(r23)
1000e80c:	00800904 	movi	r2,36
1000e810:	28c00315 	stw	r3,12(r5)
1000e814:	19400215 	stw	r5,8(r3)
1000e818:	1180ef36 	bltu	r2,r6,1000ebd8 <_realloc_r+0x4c0>
1000e81c:	008004c4 	movi	r2,19
1000e820:	1180da2e 	bgeu	r2,r6,1000eb8c <_realloc_r+0x474>
1000e824:	98800017 	ldw	r2,0(r19)
1000e828:	b8800215 	stw	r2,8(r23)
1000e82c:	98800117 	ldw	r2,4(r19)
1000e830:	b8800315 	stw	r2,12(r23)
1000e834:	008006c4 	movi	r2,27
1000e838:	1180fc2e 	bgeu	r2,r6,1000ec2c <_realloc_r+0x514>
1000e83c:	98800217 	ldw	r2,8(r19)
1000e840:	b8800415 	stw	r2,16(r23)
1000e844:	98800317 	ldw	r2,12(r19)
1000e848:	b8800515 	stw	r2,20(r23)
1000e84c:	00800904 	movi	r2,36
1000e850:	3080421e 	bne	r6,r2,1000e95c <_realloc_r+0x244>
1000e854:	98800417 	ldw	r2,16(r19)
1000e858:	9cc00604 	addi	r19,r19,24
1000e85c:	b8c00804 	addi	r3,r23,32
1000e860:	b8800615 	stw	r2,24(r23)
1000e864:	98bfff17 	ldw	r2,-4(r19)
1000e868:	b8800715 	stw	r2,28(r23)
1000e86c:	00003d06 	br	1000e964 <_realloc_r+0x24c>
1000e870:	01c00404 	movi	r7,16
1000e874:	3829883a 	mov	r20,r7
1000e878:	003fc206 	br	1000e784 <__alt_data_end+0xf800e784>
1000e87c:	9823883a 	mov	r17,r19
1000e880:	850fc83a 	sub	r7,r16,r20
1000e884:	008003c4 	movi	r2,15
1000e888:	18c0004c 	andi	r3,r3,1
1000e88c:	11c04336 	bltu	r2,r7,1000e99c <_realloc_r+0x284>
1000e890:	1c06b03a 	or	r3,r3,r16
1000e894:	a8c00115 	stw	r3,4(r21)
1000e898:	ac21883a 	add	r16,r21,r16
1000e89c:	80c00117 	ldw	r3,4(r16)
1000e8a0:	18c00054 	ori	r3,r3,1
1000e8a4:	80c00115 	stw	r3,4(r16)
1000e8a8:	9009883a 	mov	r4,r18
1000e8ac:	00137d80 	call	100137d8 <__malloc_unlock>
1000e8b0:	8805883a 	mov	r2,r17
1000e8b4:	dfc00917 	ldw	ra,36(sp)
1000e8b8:	df000817 	ldw	fp,32(sp)
1000e8bc:	ddc00717 	ldw	r23,28(sp)
1000e8c0:	dd800617 	ldw	r22,24(sp)
1000e8c4:	dd400517 	ldw	r21,20(sp)
1000e8c8:	dd000417 	ldw	r20,16(sp)
1000e8cc:	dcc00317 	ldw	r19,12(sp)
1000e8d0:	dc800217 	ldw	r18,8(sp)
1000e8d4:	dc400117 	ldw	r17,4(sp)
1000e8d8:	dc000017 	ldw	r16,0(sp)
1000e8dc:	dec00a04 	addi	sp,sp,40
1000e8e0:	f800283a 	ret
1000e8e4:	18c0004c 	andi	r3,r3,1
1000e8e8:	1800391e 	bne	r3,zero,1000e9d0 <_realloc_r+0x2b8>
1000e8ec:	9dfffe17 	ldw	r23,-8(r19)
1000e8f0:	00bfff04 	movi	r2,-4
1000e8f4:	adefc83a 	sub	r23,r21,r23
1000e8f8:	b9400117 	ldw	r5,4(r23)
1000e8fc:	288a703a 	and	r5,r5,r2
1000e900:	2c2d883a 	add	r22,r5,r16
1000e904:	b1c03216 	blt	r22,r7,1000e9d0 <_realloc_r+0x2b8>
1000e908:	b8800317 	ldw	r2,12(r23)
1000e90c:	b8c00217 	ldw	r3,8(r23)
1000e910:	81bfff04 	addi	r6,r16,-4
1000e914:	01000904 	movi	r4,36
1000e918:	18800315 	stw	r2,12(r3)
1000e91c:	10c00215 	stw	r3,8(r2)
1000e920:	bc400204 	addi	r17,r23,8
1000e924:	2180ac36 	bltu	r4,r6,1000ebd8 <_realloc_r+0x4c0>
1000e928:	008004c4 	movi	r2,19
1000e92c:	1180972e 	bgeu	r2,r6,1000eb8c <_realloc_r+0x474>
1000e930:	98800017 	ldw	r2,0(r19)
1000e934:	b8800215 	stw	r2,8(r23)
1000e938:	98800117 	ldw	r2,4(r19)
1000e93c:	b8800315 	stw	r2,12(r23)
1000e940:	008006c4 	movi	r2,27
1000e944:	1180b92e 	bgeu	r2,r6,1000ec2c <_realloc_r+0x514>
1000e948:	98800217 	ldw	r2,8(r19)
1000e94c:	b8800415 	stw	r2,16(r23)
1000e950:	98800317 	ldw	r2,12(r19)
1000e954:	b8800515 	stw	r2,20(r23)
1000e958:	313fbe26 	beq	r6,r4,1000e854 <__alt_data_end+0xf800e854>
1000e95c:	b8c00604 	addi	r3,r23,24
1000e960:	9cc00404 	addi	r19,r19,16
1000e964:	98800017 	ldw	r2,0(r19)
1000e968:	b021883a 	mov	r16,r22
1000e96c:	b82b883a 	mov	r21,r23
1000e970:	18800015 	stw	r2,0(r3)
1000e974:	98800117 	ldw	r2,4(r19)
1000e978:	18800115 	stw	r2,4(r3)
1000e97c:	98800217 	ldw	r2,8(r19)
1000e980:	18800215 	stw	r2,8(r3)
1000e984:	b8c00117 	ldw	r3,4(r23)
1000e988:	003fbd06 	br	1000e880 <__alt_data_end+0xf800e880>
1000e98c:	00800304 	movi	r2,12
1000e990:	90800015 	stw	r2,0(r18)
1000e994:	0005883a 	mov	r2,zero
1000e998:	003fc606 	br	1000e8b4 <__alt_data_end+0xf800e8b4>
1000e99c:	1d06b03a 	or	r3,r3,r20
1000e9a0:	ad0b883a 	add	r5,r21,r20
1000e9a4:	a8c00115 	stw	r3,4(r21)
1000e9a8:	38800054 	ori	r2,r7,1
1000e9ac:	28800115 	stw	r2,4(r5)
1000e9b0:	29cf883a 	add	r7,r5,r7
1000e9b4:	38800117 	ldw	r2,4(r7)
1000e9b8:	9009883a 	mov	r4,r18
1000e9bc:	29400204 	addi	r5,r5,8
1000e9c0:	10800054 	ori	r2,r2,1
1000e9c4:	38800115 	stw	r2,4(r7)
1000e9c8:	000c0240 	call	1000c024 <_free_r>
1000e9cc:	003fb606 	br	1000e8a8 <__alt_data_end+0xf800e8a8>
1000e9d0:	880b883a 	mov	r5,r17
1000e9d4:	9009883a 	mov	r4,r18
1000e9d8:	000cbc00 	call	1000cbc0 <_malloc_r>
1000e9dc:	1023883a 	mov	r17,r2
1000e9e0:	1000aa26 	beq	r2,zero,1000ec8c <_realloc_r+0x574>
1000e9e4:	98ffff17 	ldw	r3,-4(r19)
1000e9e8:	113ffe04 	addi	r4,r2,-8
1000e9ec:	00bfff84 	movi	r2,-2
1000e9f0:	1884703a 	and	r2,r3,r2
1000e9f4:	a885883a 	add	r2,r21,r2
1000e9f8:	20808626 	beq	r4,r2,1000ec14 <_realloc_r+0x4fc>
1000e9fc:	81bfff04 	addi	r6,r16,-4
1000ea00:	00800904 	movi	r2,36
1000ea04:	11807036 	bltu	r2,r6,1000ebc8 <_realloc_r+0x4b0>
1000ea08:	00c004c4 	movi	r3,19
1000ea0c:	19805636 	bltu	r3,r6,1000eb68 <_realloc_r+0x450>
1000ea10:	8805883a 	mov	r2,r17
1000ea14:	9807883a 	mov	r3,r19
1000ea18:	19000017 	ldw	r4,0(r3)
1000ea1c:	11000015 	stw	r4,0(r2)
1000ea20:	19000117 	ldw	r4,4(r3)
1000ea24:	11000115 	stw	r4,4(r2)
1000ea28:	18c00217 	ldw	r3,8(r3)
1000ea2c:	10c00215 	stw	r3,8(r2)
1000ea30:	980b883a 	mov	r5,r19
1000ea34:	9009883a 	mov	r4,r18
1000ea38:	000c0240 	call	1000c024 <_free_r>
1000ea3c:	9009883a 	mov	r4,r18
1000ea40:	00137d80 	call	100137d8 <__malloc_unlock>
1000ea44:	8805883a 	mov	r2,r17
1000ea48:	003f9a06 	br	1000e8b4 <__alt_data_end+0xf800e8b4>
1000ea4c:	300b883a 	mov	r5,r6
1000ea50:	dfc00917 	ldw	ra,36(sp)
1000ea54:	df000817 	ldw	fp,32(sp)
1000ea58:	ddc00717 	ldw	r23,28(sp)
1000ea5c:	dd800617 	ldw	r22,24(sp)
1000ea60:	dd400517 	ldw	r21,20(sp)
1000ea64:	dd000417 	ldw	r20,16(sp)
1000ea68:	dcc00317 	ldw	r19,12(sp)
1000ea6c:	dc800217 	ldw	r18,8(sp)
1000ea70:	dc400117 	ldw	r17,4(sp)
1000ea74:	dc000017 	ldw	r16,0(sp)
1000ea78:	dec00a04 	addi	sp,sp,40
1000ea7c:	000cbc01 	jmpi	1000cbc0 <_malloc_r>
1000ea80:	11400317 	ldw	r5,12(r2)
1000ea84:	10800217 	ldw	r2,8(r2)
1000ea88:	9823883a 	mov	r17,r19
1000ea8c:	2021883a 	mov	r16,r4
1000ea90:	11400315 	stw	r5,12(r2)
1000ea94:	28800215 	stw	r2,8(r5)
1000ea98:	003f7906 	br	1000e880 <__alt_data_end+0xf800e880>
1000ea9c:	21000117 	ldw	r4,4(r4)
1000eaa0:	00bfff04 	movi	r2,-4
1000eaa4:	a1800404 	addi	r6,r20,16
1000eaa8:	2088703a 	and	r4,r4,r2
1000eaac:	2409883a 	add	r4,r4,r16
1000eab0:	2180380e 	bge	r4,r6,1000eb94 <_realloc_r+0x47c>
1000eab4:	18c0004c 	andi	r3,r3,1
1000eab8:	183fc51e 	bne	r3,zero,1000e9d0 <__alt_data_end+0xf800e9d0>
1000eabc:	9dfffe17 	ldw	r23,-8(r19)
1000eac0:	adefc83a 	sub	r23,r21,r23
1000eac4:	b9400117 	ldw	r5,4(r23)
1000eac8:	288a703a 	and	r5,r5,r2
1000eacc:	216d883a 	add	r22,r4,r5
1000ead0:	b1bf8b16 	blt	r22,r6,1000e900 <__alt_data_end+0xf800e900>
1000ead4:	b8800317 	ldw	r2,12(r23)
1000ead8:	b8c00217 	ldw	r3,8(r23)
1000eadc:	81bfff04 	addi	r6,r16,-4
1000eae0:	01000904 	movi	r4,36
1000eae4:	18800315 	stw	r2,12(r3)
1000eae8:	10c00215 	stw	r3,8(r2)
1000eaec:	bc400204 	addi	r17,r23,8
1000eaf0:	21805a36 	bltu	r4,r6,1000ec5c <_realloc_r+0x544>
1000eaf4:	008004c4 	movi	r2,19
1000eaf8:	1180562e 	bgeu	r2,r6,1000ec54 <_realloc_r+0x53c>
1000eafc:	98800017 	ldw	r2,0(r19)
1000eb00:	b8800215 	stw	r2,8(r23)
1000eb04:	98800117 	ldw	r2,4(r19)
1000eb08:	b8800315 	stw	r2,12(r23)
1000eb0c:	008006c4 	movi	r2,27
1000eb10:	11805636 	bltu	r2,r6,1000ec6c <_realloc_r+0x554>
1000eb14:	b8800404 	addi	r2,r23,16
1000eb18:	9cc00204 	addi	r19,r19,8
1000eb1c:	98c00017 	ldw	r3,0(r19)
1000eb20:	10c00015 	stw	r3,0(r2)
1000eb24:	98c00117 	ldw	r3,4(r19)
1000eb28:	10c00115 	stw	r3,4(r2)
1000eb2c:	98c00217 	ldw	r3,8(r19)
1000eb30:	10c00215 	stw	r3,8(r2)
1000eb34:	bd07883a 	add	r3,r23,r20
1000eb38:	b505c83a 	sub	r2,r22,r20
1000eb3c:	e0c00215 	stw	r3,8(fp)
1000eb40:	10800054 	ori	r2,r2,1
1000eb44:	18800115 	stw	r2,4(r3)
1000eb48:	b8800117 	ldw	r2,4(r23)
1000eb4c:	9009883a 	mov	r4,r18
1000eb50:	1080004c 	andi	r2,r2,1
1000eb54:	a0a8b03a 	or	r20,r20,r2
1000eb58:	bd000115 	stw	r20,4(r23)
1000eb5c:	00137d80 	call	100137d8 <__malloc_unlock>
1000eb60:	8805883a 	mov	r2,r17
1000eb64:	003f5306 	br	1000e8b4 <__alt_data_end+0xf800e8b4>
1000eb68:	98c00017 	ldw	r3,0(r19)
1000eb6c:	88c00015 	stw	r3,0(r17)
1000eb70:	98c00117 	ldw	r3,4(r19)
1000eb74:	88c00115 	stw	r3,4(r17)
1000eb78:	00c006c4 	movi	r3,27
1000eb7c:	19801d36 	bltu	r3,r6,1000ebf4 <_realloc_r+0x4dc>
1000eb80:	88800204 	addi	r2,r17,8
1000eb84:	98c00204 	addi	r3,r19,8
1000eb88:	003fa306 	br	1000ea18 <__alt_data_end+0xf800ea18>
1000eb8c:	8807883a 	mov	r3,r17
1000eb90:	003f7406 	br	1000e964 <__alt_data_end+0xf800e964>
1000eb94:	ad2b883a 	add	r21,r21,r20
1000eb98:	2505c83a 	sub	r2,r4,r20
1000eb9c:	e5400215 	stw	r21,8(fp)
1000eba0:	10800054 	ori	r2,r2,1
1000eba4:	a8800115 	stw	r2,4(r21)
1000eba8:	98bfff17 	ldw	r2,-4(r19)
1000ebac:	9009883a 	mov	r4,r18
1000ebb0:	1080004c 	andi	r2,r2,1
1000ebb4:	a0a8b03a 	or	r20,r20,r2
1000ebb8:	9d3fff15 	stw	r20,-4(r19)
1000ebbc:	00137d80 	call	100137d8 <__malloc_unlock>
1000ebc0:	9805883a 	mov	r2,r19
1000ebc4:	003f3b06 	br	1000e8b4 <__alt_data_end+0xf800e8b4>
1000ebc8:	8809883a 	mov	r4,r17
1000ebcc:	980b883a 	mov	r5,r19
1000ebd0:	000d4500 	call	1000d450 <memmove>
1000ebd4:	003f9606 	br	1000ea30 <__alt_data_end+0xf800ea30>
1000ebd8:	8809883a 	mov	r4,r17
1000ebdc:	980b883a 	mov	r5,r19
1000ebe0:	000d4500 	call	1000d450 <memmove>
1000ebe4:	b8c00117 	ldw	r3,4(r23)
1000ebe8:	b021883a 	mov	r16,r22
1000ebec:	b82b883a 	mov	r21,r23
1000ebf0:	003f2306 	br	1000e880 <__alt_data_end+0xf800e880>
1000ebf4:	98c00217 	ldw	r3,8(r19)
1000ebf8:	88c00215 	stw	r3,8(r17)
1000ebfc:	98c00317 	ldw	r3,12(r19)
1000ec00:	88c00315 	stw	r3,12(r17)
1000ec04:	30800c26 	beq	r6,r2,1000ec38 <_realloc_r+0x520>
1000ec08:	88800404 	addi	r2,r17,16
1000ec0c:	98c00404 	addi	r3,r19,16
1000ec10:	003f8106 	br	1000ea18 <__alt_data_end+0xf800ea18>
1000ec14:	893fff17 	ldw	r4,-4(r17)
1000ec18:	00bfff04 	movi	r2,-4
1000ec1c:	9823883a 	mov	r17,r19
1000ec20:	2084703a 	and	r2,r4,r2
1000ec24:	80a1883a 	add	r16,r16,r2
1000ec28:	003f1506 	br	1000e880 <__alt_data_end+0xf800e880>
1000ec2c:	b8c00404 	addi	r3,r23,16
1000ec30:	9cc00204 	addi	r19,r19,8
1000ec34:	003f4b06 	br	1000e964 <__alt_data_end+0xf800e964>
1000ec38:	99000417 	ldw	r4,16(r19)
1000ec3c:	88800604 	addi	r2,r17,24
1000ec40:	98c00604 	addi	r3,r19,24
1000ec44:	89000415 	stw	r4,16(r17)
1000ec48:	99000517 	ldw	r4,20(r19)
1000ec4c:	89000515 	stw	r4,20(r17)
1000ec50:	003f7106 	br	1000ea18 <__alt_data_end+0xf800ea18>
1000ec54:	8805883a 	mov	r2,r17
1000ec58:	003fb006 	br	1000eb1c <__alt_data_end+0xf800eb1c>
1000ec5c:	8809883a 	mov	r4,r17
1000ec60:	980b883a 	mov	r5,r19
1000ec64:	000d4500 	call	1000d450 <memmove>
1000ec68:	003fb206 	br	1000eb34 <__alt_data_end+0xf800eb34>
1000ec6c:	98800217 	ldw	r2,8(r19)
1000ec70:	b8800415 	stw	r2,16(r23)
1000ec74:	98800317 	ldw	r2,12(r19)
1000ec78:	b8800515 	stw	r2,20(r23)
1000ec7c:	31000726 	beq	r6,r4,1000ec9c <_realloc_r+0x584>
1000ec80:	b8800604 	addi	r2,r23,24
1000ec84:	9cc00404 	addi	r19,r19,16
1000ec88:	003fa406 	br	1000eb1c <__alt_data_end+0xf800eb1c>
1000ec8c:	9009883a 	mov	r4,r18
1000ec90:	00137d80 	call	100137d8 <__malloc_unlock>
1000ec94:	0005883a 	mov	r2,zero
1000ec98:	003f0606 	br	1000e8b4 <__alt_data_end+0xf800e8b4>
1000ec9c:	98c00417 	ldw	r3,16(r19)
1000eca0:	9cc00604 	addi	r19,r19,24
1000eca4:	b8800804 	addi	r2,r23,32
1000eca8:	b8c00615 	stw	r3,24(r23)
1000ecac:	98ffff17 	ldw	r3,-4(r19)
1000ecb0:	b8c00715 	stw	r3,28(r23)
1000ecb4:	003f9906 	br	1000eb1c <__alt_data_end+0xf800eb1c>

1000ecb8 <__fpclassifyd>:
1000ecb8:	00a00034 	movhi	r2,32768
1000ecbc:	10bfffc4 	addi	r2,r2,-1
1000ecc0:	2884703a 	and	r2,r5,r2
1000ecc4:	10000726 	beq	r2,zero,1000ece4 <__fpclassifyd+0x2c>
1000ecc8:	00fffc34 	movhi	r3,65520
1000eccc:	019ff834 	movhi	r6,32736
1000ecd0:	28c7883a 	add	r3,r5,r3
1000ecd4:	31bfffc4 	addi	r6,r6,-1
1000ecd8:	30c00536 	bltu	r6,r3,1000ecf0 <__fpclassifyd+0x38>
1000ecdc:	00800104 	movi	r2,4
1000ece0:	f800283a 	ret
1000ece4:	2000021e 	bne	r4,zero,1000ecf0 <__fpclassifyd+0x38>
1000ece8:	00800084 	movi	r2,2
1000ecec:	f800283a 	ret
1000ecf0:	00dffc34 	movhi	r3,32752
1000ecf4:	019ff834 	movhi	r6,32736
1000ecf8:	28cb883a 	add	r5,r5,r3
1000ecfc:	31bfffc4 	addi	r6,r6,-1
1000ed00:	317ff62e 	bgeu	r6,r5,1000ecdc <__alt_data_end+0xf800ecdc>
1000ed04:	01400434 	movhi	r5,16
1000ed08:	297fffc4 	addi	r5,r5,-1
1000ed0c:	28800236 	bltu	r5,r2,1000ed18 <__fpclassifyd+0x60>
1000ed10:	008000c4 	movi	r2,3
1000ed14:	f800283a 	ret
1000ed18:	10c00226 	beq	r2,r3,1000ed24 <__fpclassifyd+0x6c>
1000ed1c:	0005883a 	mov	r2,zero
1000ed20:	f800283a 	ret
1000ed24:	2005003a 	cmpeq	r2,r4,zero
1000ed28:	f800283a 	ret

1000ed2c <_sbrk_r>:
1000ed2c:	defffd04 	addi	sp,sp,-12
1000ed30:	dc000015 	stw	r16,0(sp)
1000ed34:	040400b4 	movhi	r16,4098
1000ed38:	dc400115 	stw	r17,4(sp)
1000ed3c:	842d3404 	addi	r16,r16,-19248
1000ed40:	2023883a 	mov	r17,r4
1000ed44:	2809883a 	mov	r4,r5
1000ed48:	dfc00215 	stw	ra,8(sp)
1000ed4c:	80000015 	stw	zero,0(r16)
1000ed50:	00139d00 	call	100139d0 <sbrk>
1000ed54:	00ffffc4 	movi	r3,-1
1000ed58:	10c00526 	beq	r2,r3,1000ed70 <_sbrk_r+0x44>
1000ed5c:	dfc00217 	ldw	ra,8(sp)
1000ed60:	dc400117 	ldw	r17,4(sp)
1000ed64:	dc000017 	ldw	r16,0(sp)
1000ed68:	dec00304 	addi	sp,sp,12
1000ed6c:	f800283a 	ret
1000ed70:	80c00017 	ldw	r3,0(r16)
1000ed74:	183ff926 	beq	r3,zero,1000ed5c <__alt_data_end+0xf800ed5c>
1000ed78:	88c00015 	stw	r3,0(r17)
1000ed7c:	003ff706 	br	1000ed5c <__alt_data_end+0xf800ed5c>

1000ed80 <__sread>:
1000ed80:	defffe04 	addi	sp,sp,-8
1000ed84:	dc000015 	stw	r16,0(sp)
1000ed88:	2821883a 	mov	r16,r5
1000ed8c:	2940038f 	ldh	r5,14(r5)
1000ed90:	dfc00115 	stw	ra,4(sp)
1000ed94:	0010a3c0 	call	10010a3c <_read_r>
1000ed98:	10000716 	blt	r2,zero,1000edb8 <__sread+0x38>
1000ed9c:	80c01417 	ldw	r3,80(r16)
1000eda0:	1887883a 	add	r3,r3,r2
1000eda4:	80c01415 	stw	r3,80(r16)
1000eda8:	dfc00117 	ldw	ra,4(sp)
1000edac:	dc000017 	ldw	r16,0(sp)
1000edb0:	dec00204 	addi	sp,sp,8
1000edb4:	f800283a 	ret
1000edb8:	80c0030b 	ldhu	r3,12(r16)
1000edbc:	18fbffcc 	andi	r3,r3,61439
1000edc0:	80c0030d 	sth	r3,12(r16)
1000edc4:	dfc00117 	ldw	ra,4(sp)
1000edc8:	dc000017 	ldw	r16,0(sp)
1000edcc:	dec00204 	addi	sp,sp,8
1000edd0:	f800283a 	ret

1000edd4 <__seofread>:
1000edd4:	0005883a 	mov	r2,zero
1000edd8:	f800283a 	ret

1000eddc <__swrite>:
1000eddc:	2880030b 	ldhu	r2,12(r5)
1000ede0:	defffb04 	addi	sp,sp,-20
1000ede4:	dcc00315 	stw	r19,12(sp)
1000ede8:	dc800215 	stw	r18,8(sp)
1000edec:	dc400115 	stw	r17,4(sp)
1000edf0:	dc000015 	stw	r16,0(sp)
1000edf4:	dfc00415 	stw	ra,16(sp)
1000edf8:	10c0400c 	andi	r3,r2,256
1000edfc:	2821883a 	mov	r16,r5
1000ee00:	2027883a 	mov	r19,r4
1000ee04:	3025883a 	mov	r18,r6
1000ee08:	3823883a 	mov	r17,r7
1000ee0c:	18000526 	beq	r3,zero,1000ee24 <__swrite+0x48>
1000ee10:	2940038f 	ldh	r5,14(r5)
1000ee14:	000d883a 	mov	r6,zero
1000ee18:	01c00084 	movi	r7,2
1000ee1c:	00109e00 	call	100109e0 <_lseek_r>
1000ee20:	8080030b 	ldhu	r2,12(r16)
1000ee24:	8140038f 	ldh	r5,14(r16)
1000ee28:	10bbffcc 	andi	r2,r2,61439
1000ee2c:	9809883a 	mov	r4,r19
1000ee30:	900d883a 	mov	r6,r18
1000ee34:	880f883a 	mov	r7,r17
1000ee38:	8080030d 	sth	r2,12(r16)
1000ee3c:	dfc00417 	ldw	ra,16(sp)
1000ee40:	dcc00317 	ldw	r19,12(sp)
1000ee44:	dc800217 	ldw	r18,8(sp)
1000ee48:	dc400117 	ldw	r17,4(sp)
1000ee4c:	dc000017 	ldw	r16,0(sp)
1000ee50:	dec00504 	addi	sp,sp,20
1000ee54:	00104bc1 	jmpi	100104bc <_write_r>

1000ee58 <__sseek>:
1000ee58:	defffe04 	addi	sp,sp,-8
1000ee5c:	dc000015 	stw	r16,0(sp)
1000ee60:	2821883a 	mov	r16,r5
1000ee64:	2940038f 	ldh	r5,14(r5)
1000ee68:	dfc00115 	stw	ra,4(sp)
1000ee6c:	00109e00 	call	100109e0 <_lseek_r>
1000ee70:	00ffffc4 	movi	r3,-1
1000ee74:	10c00826 	beq	r2,r3,1000ee98 <__sseek+0x40>
1000ee78:	80c0030b 	ldhu	r3,12(r16)
1000ee7c:	80801415 	stw	r2,80(r16)
1000ee80:	18c40014 	ori	r3,r3,4096
1000ee84:	80c0030d 	sth	r3,12(r16)
1000ee88:	dfc00117 	ldw	ra,4(sp)
1000ee8c:	dc000017 	ldw	r16,0(sp)
1000ee90:	dec00204 	addi	sp,sp,8
1000ee94:	f800283a 	ret
1000ee98:	80c0030b 	ldhu	r3,12(r16)
1000ee9c:	18fbffcc 	andi	r3,r3,61439
1000eea0:	80c0030d 	sth	r3,12(r16)
1000eea4:	dfc00117 	ldw	ra,4(sp)
1000eea8:	dc000017 	ldw	r16,0(sp)
1000eeac:	dec00204 	addi	sp,sp,8
1000eeb0:	f800283a 	ret

1000eeb4 <__sclose>:
1000eeb4:	2940038f 	ldh	r5,14(r5)
1000eeb8:	00105181 	jmpi	10010518 <_close_r>

1000eebc <strcmp>:
1000eebc:	2144b03a 	or	r2,r4,r5
1000eec0:	108000cc 	andi	r2,r2,3
1000eec4:	1000171e 	bne	r2,zero,1000ef24 <strcmp+0x68>
1000eec8:	20800017 	ldw	r2,0(r4)
1000eecc:	28c00017 	ldw	r3,0(r5)
1000eed0:	10c0141e 	bne	r2,r3,1000ef24 <strcmp+0x68>
1000eed4:	027fbff4 	movhi	r9,65279
1000eed8:	4a7fbfc4 	addi	r9,r9,-257
1000eedc:	0086303a 	nor	r3,zero,r2
1000eee0:	02202074 	movhi	r8,32897
1000eee4:	1245883a 	add	r2,r2,r9
1000eee8:	42202004 	addi	r8,r8,-32640
1000eeec:	10c4703a 	and	r2,r2,r3
1000eef0:	1204703a 	and	r2,r2,r8
1000eef4:	10000226 	beq	r2,zero,1000ef00 <strcmp+0x44>
1000eef8:	00001706 	br	1000ef58 <strcmp+0x9c>
1000eefc:	1000161e 	bne	r2,zero,1000ef58 <strcmp+0x9c>
1000ef00:	21000104 	addi	r4,r4,4
1000ef04:	20c00017 	ldw	r3,0(r4)
1000ef08:	29400104 	addi	r5,r5,4
1000ef0c:	29800017 	ldw	r6,0(r5)
1000ef10:	1a4f883a 	add	r7,r3,r9
1000ef14:	00c4303a 	nor	r2,zero,r3
1000ef18:	3884703a 	and	r2,r7,r2
1000ef1c:	1204703a 	and	r2,r2,r8
1000ef20:	19bff626 	beq	r3,r6,1000eefc <__alt_data_end+0xf800eefc>
1000ef24:	20800007 	ldb	r2,0(r4)
1000ef28:	1000051e 	bne	r2,zero,1000ef40 <strcmp+0x84>
1000ef2c:	00000606 	br	1000ef48 <strcmp+0x8c>
1000ef30:	21000044 	addi	r4,r4,1
1000ef34:	20800007 	ldb	r2,0(r4)
1000ef38:	29400044 	addi	r5,r5,1
1000ef3c:	10000226 	beq	r2,zero,1000ef48 <strcmp+0x8c>
1000ef40:	28c00007 	ldb	r3,0(r5)
1000ef44:	10fffa26 	beq	r2,r3,1000ef30 <__alt_data_end+0xf800ef30>
1000ef48:	20800003 	ldbu	r2,0(r4)
1000ef4c:	28c00003 	ldbu	r3,0(r5)
1000ef50:	10c5c83a 	sub	r2,r2,r3
1000ef54:	f800283a 	ret
1000ef58:	0005883a 	mov	r2,zero
1000ef5c:	f800283a 	ret

1000ef60 <__sprint_r.part.0>:
1000ef60:	28801917 	ldw	r2,100(r5)
1000ef64:	defff604 	addi	sp,sp,-40
1000ef68:	dd400515 	stw	r21,20(sp)
1000ef6c:	dcc00315 	stw	r19,12(sp)
1000ef70:	dfc00915 	stw	ra,36(sp)
1000ef74:	df000815 	stw	fp,32(sp)
1000ef78:	ddc00715 	stw	r23,28(sp)
1000ef7c:	dd800615 	stw	r22,24(sp)
1000ef80:	dd000415 	stw	r20,16(sp)
1000ef84:	dc800215 	stw	r18,8(sp)
1000ef88:	dc400115 	stw	r17,4(sp)
1000ef8c:	dc000015 	stw	r16,0(sp)
1000ef90:	1088000c 	andi	r2,r2,8192
1000ef94:	2827883a 	mov	r19,r5
1000ef98:	302b883a 	mov	r21,r6
1000ef9c:	10002d26 	beq	r2,zero,1000f054 <__sprint_r.part.0+0xf4>
1000efa0:	30800217 	ldw	r2,8(r6)
1000efa4:	35800017 	ldw	r22,0(r6)
1000efa8:	10002826 	beq	r2,zero,1000f04c <__sprint_r.part.0+0xec>
1000efac:	2029883a 	mov	r20,r4
1000efb0:	b5c00104 	addi	r23,r22,4
1000efb4:	04bfffc4 	movi	r18,-1
1000efb8:	bc400017 	ldw	r17,0(r23)
1000efbc:	b4000017 	ldw	r16,0(r22)
1000efc0:	0039883a 	mov	fp,zero
1000efc4:	8822d0ba 	srli	r17,r17,2
1000efc8:	04400316 	blt	zero,r17,1000efd8 <__sprint_r.part.0+0x78>
1000efcc:	00001706 	br	1000f02c <__sprint_r.part.0+0xcc>
1000efd0:	84000104 	addi	r16,r16,4
1000efd4:	8f001526 	beq	r17,fp,1000f02c <__sprint_r.part.0+0xcc>
1000efd8:	81400017 	ldw	r5,0(r16)
1000efdc:	a009883a 	mov	r4,r20
1000efe0:	980d883a 	mov	r6,r19
1000efe4:	00107580 	call	10010758 <_fputwc_r>
1000efe8:	e7000044 	addi	fp,fp,1
1000efec:	14bff81e 	bne	r2,r18,1000efd0 <__alt_data_end+0xf800efd0>
1000eff0:	9005883a 	mov	r2,r18
1000eff4:	a8000215 	stw	zero,8(r21)
1000eff8:	a8000115 	stw	zero,4(r21)
1000effc:	dfc00917 	ldw	ra,36(sp)
1000f000:	df000817 	ldw	fp,32(sp)
1000f004:	ddc00717 	ldw	r23,28(sp)
1000f008:	dd800617 	ldw	r22,24(sp)
1000f00c:	dd400517 	ldw	r21,20(sp)
1000f010:	dd000417 	ldw	r20,16(sp)
1000f014:	dcc00317 	ldw	r19,12(sp)
1000f018:	dc800217 	ldw	r18,8(sp)
1000f01c:	dc400117 	ldw	r17,4(sp)
1000f020:	dc000017 	ldw	r16,0(sp)
1000f024:	dec00a04 	addi	sp,sp,40
1000f028:	f800283a 	ret
1000f02c:	a8c00217 	ldw	r3,8(r21)
1000f030:	8c63883a 	add	r17,r17,r17
1000f034:	8c63883a 	add	r17,r17,r17
1000f038:	1c45c83a 	sub	r2,r3,r17
1000f03c:	a8800215 	stw	r2,8(r21)
1000f040:	b5800204 	addi	r22,r22,8
1000f044:	bdc00204 	addi	r23,r23,8
1000f048:	103fdb1e 	bne	r2,zero,1000efb8 <__alt_data_end+0xf800efb8>
1000f04c:	0005883a 	mov	r2,zero
1000f050:	003fe806 	br	1000eff4 <__alt_data_end+0xf800eff4>
1000f054:	000c3140 	call	1000c314 <__sfvwrite_r>
1000f058:	003fe606 	br	1000eff4 <__alt_data_end+0xf800eff4>

1000f05c <__sprint_r>:
1000f05c:	30c00217 	ldw	r3,8(r6)
1000f060:	18000126 	beq	r3,zero,1000f068 <__sprint_r+0xc>
1000f064:	000ef601 	jmpi	1000ef60 <__sprint_r.part.0>
1000f068:	30000115 	stw	zero,4(r6)
1000f06c:	0005883a 	mov	r2,zero
1000f070:	f800283a 	ret

1000f074 <___vfiprintf_internal_r>:
1000f074:	defeca04 	addi	sp,sp,-1240
1000f078:	dcc12f15 	stw	r19,1212(sp)
1000f07c:	dfc13515 	stw	ra,1236(sp)
1000f080:	df013415 	stw	fp,1232(sp)
1000f084:	ddc13315 	stw	r23,1228(sp)
1000f088:	dd813215 	stw	r22,1224(sp)
1000f08c:	dd413115 	stw	r21,1220(sp)
1000f090:	dd013015 	stw	r20,1216(sp)
1000f094:	dc812e15 	stw	r18,1208(sp)
1000f098:	dc412d15 	stw	r17,1204(sp)
1000f09c:	dc012c15 	stw	r16,1200(sp)
1000f0a0:	d9012115 	stw	r4,1156(sp)
1000f0a4:	d9412015 	stw	r5,1152(sp)
1000f0a8:	d9c12315 	stw	r7,1164(sp)
1000f0ac:	3027883a 	mov	r19,r6
1000f0b0:	20000226 	beq	r4,zero,1000f0bc <___vfiprintf_internal_r+0x48>
1000f0b4:	20800e17 	ldw	r2,56(r4)
1000f0b8:	1000f726 	beq	r2,zero,1000f498 <___vfiprintf_internal_r+0x424>
1000f0bc:	d8812017 	ldw	r2,1152(sp)
1000f0c0:	10c0030b 	ldhu	r3,12(r2)
1000f0c4:	1908000c 	andi	r4,r3,8192
1000f0c8:	1805883a 	mov	r2,r3
1000f0cc:	2000081e 	bne	r4,zero,1000f0f0 <___vfiprintf_internal_r+0x7c>
1000f0d0:	d9412017 	ldw	r5,1152(sp)
1000f0d4:	18880014 	ori	r2,r3,8192
1000f0d8:	00f7ffc4 	movi	r3,-8193
1000f0dc:	29001917 	ldw	r4,100(r5)
1000f0e0:	2880030d 	sth	r2,12(r5)
1000f0e4:	20c8703a 	and	r4,r4,r3
1000f0e8:	29001915 	stw	r4,100(r5)
1000f0ec:	1007883a 	mov	r3,r2
1000f0f0:	1100020c 	andi	r4,r2,8
1000f0f4:	2000a726 	beq	r4,zero,1000f394 <___vfiprintf_internal_r+0x320>
1000f0f8:	d9412017 	ldw	r5,1152(sp)
1000f0fc:	29000417 	ldw	r4,16(r5)
1000f100:	2000a426 	beq	r4,zero,1000f394 <___vfiprintf_internal_r+0x320>
1000f104:	1080068c 	andi	r2,r2,26
1000f108:	01000284 	movi	r4,10
1000f10c:	1100ab26 	beq	r2,r4,1000f3bc <___vfiprintf_internal_r+0x348>
1000f110:	d9010a04 	addi	r4,sp,1064
1000f114:	d94109c4 	addi	r5,sp,1063
1000f118:	07040074 	movhi	fp,4097
1000f11c:	04440074 	movhi	r17,4097
1000f120:	2145c83a 	sub	r2,r4,r5
1000f124:	e71fa604 	addi	fp,fp,32408
1000f128:	8c5fa204 	addi	r17,r17,32392
1000f12c:	d9011e15 	stw	r4,1144(sp)
1000f130:	d9411f15 	stw	r5,1148(sp)
1000f134:	dec11a15 	stw	sp,1128(sp)
1000f138:	d8011c15 	stw	zero,1136(sp)
1000f13c:	d8011b15 	stw	zero,1132(sp)
1000f140:	d8012715 	stw	zero,1180(sp)
1000f144:	d8012515 	stw	zero,1172(sp)
1000f148:	d811883a 	mov	r8,sp
1000f14c:	d8812815 	stw	r2,1184(sp)
1000f150:	982f883a 	mov	r23,r19
1000f154:	b8800007 	ldb	r2,0(r23)
1000f158:	1003b026 	beq	r2,zero,1001001c <___vfiprintf_internal_r+0xfa8>
1000f15c:	01000944 	movi	r4,37
1000f160:	1103ae26 	beq	r2,r4,1001001c <___vfiprintf_internal_r+0xfa8>
1000f164:	b805883a 	mov	r2,r23
1000f168:	00000106 	br	1000f170 <___vfiprintf_internal_r+0xfc>
1000f16c:	19000326 	beq	r3,r4,1000f17c <___vfiprintf_internal_r+0x108>
1000f170:	10800044 	addi	r2,r2,1
1000f174:	10c00007 	ldb	r3,0(r2)
1000f178:	183ffc1e 	bne	r3,zero,1000f16c <__alt_data_end+0xf800f16c>
1000f17c:	15e1c83a 	sub	r16,r2,r23
1000f180:	1029883a 	mov	r20,r2
1000f184:	80001026 	beq	r16,zero,1000f1c8 <___vfiprintf_internal_r+0x154>
1000f188:	d8c11c17 	ldw	r3,1136(sp)
1000f18c:	d8811b17 	ldw	r2,1132(sp)
1000f190:	45c00015 	stw	r23,0(r8)
1000f194:	80c7883a 	add	r3,r16,r3
1000f198:	10800044 	addi	r2,r2,1
1000f19c:	44000115 	stw	r16,4(r8)
1000f1a0:	d8c11c15 	stw	r3,1136(sp)
1000f1a4:	d8811b15 	stw	r2,1132(sp)
1000f1a8:	010001c4 	movi	r4,7
1000f1ac:	2080740e 	bge	r4,r2,1000f380 <___vfiprintf_internal_r+0x30c>
1000f1b0:	1803a71e 	bne	r3,zero,10010050 <___vfiprintf_internal_r+0xfdc>
1000f1b4:	d8c12517 	ldw	r3,1172(sp)
1000f1b8:	d8011b15 	stw	zero,1132(sp)
1000f1bc:	d811883a 	mov	r8,sp
1000f1c0:	1c07883a 	add	r3,r3,r16
1000f1c4:	d8c12515 	stw	r3,1172(sp)
1000f1c8:	a0800007 	ldb	r2,0(r20)
1000f1cc:	1002bf26 	beq	r2,zero,1000fccc <___vfiprintf_internal_r+0xc58>
1000f1d0:	a5c00044 	addi	r23,r20,1
1000f1d4:	a1800047 	ldb	r6,1(r20)
1000f1d8:	d8011d85 	stb	zero,1142(sp)
1000f1dc:	d8012205 	stb	zero,1160(sp)
1000f1e0:	043fffc4 	movi	r16,-1
1000f1e4:	d8012415 	stw	zero,1168(sp)
1000f1e8:	0025883a 	mov	r18,zero
1000f1ec:	05001604 	movi	r20,88
1000f1f0:	05400244 	movi	r21,9
1000f1f4:	4027883a 	mov	r19,r8
1000f1f8:	bdc00044 	addi	r23,r23,1
1000f1fc:	30bff804 	addi	r2,r6,-32
1000f200:	a0825636 	bltu	r20,r2,1000fb5c <___vfiprintf_internal_r+0xae8>
1000f204:	100490ba 	slli	r2,r2,2
1000f208:	01040074 	movhi	r4,4097
1000f20c:	213c8704 	addi	r4,r4,-3556
1000f210:	1105883a 	add	r2,r2,r4
1000f214:	10800017 	ldw	r2,0(r2)
1000f218:	1000683a 	jmp	r2
1000f21c:	1000faec 	andhi	zero,r2,1003
1000f220:	1000fb5c 	xori	zero,r2,1005
1000f224:	1000fb5c 	xori	zero,r2,1005
1000f228:	1000fb50 	cmplti	zero,r2,1005
1000f22c:	1000fb5c 	xori	zero,r2,1005
1000f230:	1000fb5c 	xori	zero,r2,1005
1000f234:	1000fb5c 	xori	zero,r2,1005
1000f238:	1000fb5c 	xori	zero,r2,1005
1000f23c:	1000fb5c 	xori	zero,r2,1005
1000f240:	1000fb5c 	xori	zero,r2,1005
1000f244:	1000f8dc 	xori	zero,r2,995
1000f248:	1000fb04 	addi	zero,r2,1004
1000f24c:	1000fb5c 	xori	zero,r2,1005
1000f250:	1000f4b0 	cmpltui	zero,r2,978
1000f254:	1000f900 	call	11000f90 <_gp+0xfdf608>
1000f258:	1000fb5c 	xori	zero,r2,1005
1000f25c:	1000f4bc 	xorhi	zero,r2,978
1000f260:	1000f4c8 	cmpgei	zero,r2,979
1000f264:	1000f4c8 	cmpgei	zero,r2,979
1000f268:	1000f4c8 	cmpgei	zero,r2,979
1000f26c:	1000f4c8 	cmpgei	zero,r2,979
1000f270:	1000f4c8 	cmpgei	zero,r2,979
1000f274:	1000f4c8 	cmpgei	zero,r2,979
1000f278:	1000f4c8 	cmpgei	zero,r2,979
1000f27c:	1000f4c8 	cmpgei	zero,r2,979
1000f280:	1000f4c8 	cmpgei	zero,r2,979
1000f284:	1000fb5c 	xori	zero,r2,1005
1000f288:	1000fb5c 	xori	zero,r2,1005
1000f28c:	1000fb5c 	xori	zero,r2,1005
1000f290:	1000fb5c 	xori	zero,r2,1005
1000f294:	1000fb5c 	xori	zero,r2,1005
1000f298:	1000fb5c 	xori	zero,r2,1005
1000f29c:	1000fb5c 	xori	zero,r2,1005
1000f2a0:	1000fb5c 	xori	zero,r2,1005
1000f2a4:	1000fb5c 	xori	zero,r2,1005
1000f2a8:	1000fb5c 	xori	zero,r2,1005
1000f2ac:	1000f508 	cmpgei	zero,r2,980
1000f2b0:	1000fb5c 	xori	zero,r2,1005
1000f2b4:	1000fb5c 	xori	zero,r2,1005
1000f2b8:	1000fb5c 	xori	zero,r2,1005
1000f2bc:	1000fb5c 	xori	zero,r2,1005
1000f2c0:	1000fb5c 	xori	zero,r2,1005
1000f2c4:	1000fb5c 	xori	zero,r2,1005
1000f2c8:	1000fb5c 	xori	zero,r2,1005
1000f2cc:	1000fb5c 	xori	zero,r2,1005
1000f2d0:	1000fb5c 	xori	zero,r2,1005
1000f2d4:	1000fb5c 	xori	zero,r2,1005
1000f2d8:	1000f7f8 	rdprs	zero,r2,991
1000f2dc:	1000fb5c 	xori	zero,r2,1005
1000f2e0:	1000fb5c 	xori	zero,r2,1005
1000f2e4:	1000fb5c 	xori	zero,r2,1005
1000f2e8:	1000fb5c 	xori	zero,r2,1005
1000f2ec:	1000fb5c 	xori	zero,r2,1005
1000f2f0:	1000f838 	rdprs	zero,r2,992
1000f2f4:	1000fb5c 	xori	zero,r2,1005
1000f2f8:	1000fb5c 	xori	zero,r2,1005
1000f2fc:	1000f87c 	xorhi	zero,r2,993
1000f300:	1000fb5c 	xori	zero,r2,1005
1000f304:	1000fb5c 	xori	zero,r2,1005
1000f308:	1000fb5c 	xori	zero,r2,1005
1000f30c:	1000fb5c 	xori	zero,r2,1005
1000f310:	1000fb5c 	xori	zero,r2,1005
1000f314:	1000fb5c 	xori	zero,r2,1005
1000f318:	1000fb5c 	xori	zero,r2,1005
1000f31c:	1000fb5c 	xori	zero,r2,1005
1000f320:	1000fb5c 	xori	zero,r2,1005
1000f324:	1000fb5c 	xori	zero,r2,1005
1000f328:	1000f7c4 	addi	zero,r2,991
1000f32c:	1000fb14 	ori	zero,r2,1004
1000f330:	1000fb5c 	xori	zero,r2,1005
1000f334:	1000fb5c 	xori	zero,r2,1005
1000f338:	1000fb5c 	xori	zero,r2,1005
1000f33c:	1000f950 	cmplti	zero,r2,997
1000f340:	1000fb14 	ori	zero,r2,1004
1000f344:	1000fb5c 	xori	zero,r2,1005
1000f348:	1000fb5c 	xori	zero,r2,1005
1000f34c:	1000f868 	cmpgeui	zero,r2,993
1000f350:	1000fb5c 	xori	zero,r2,1005
1000f354:	1000fab4 	orhi	zero,r2,1002
1000f358:	1000fa3c 	xorhi	zero,r2,1000
1000f35c:	1000fa70 	cmpltui	zero,r2,1001
1000f360:	1000f95c 	xori	zero,r2,997
1000f364:	1000fb5c 	xori	zero,r2,1005
1000f368:	1000f968 	cmpgeui	zero,r2,997
1000f36c:	1000fb5c 	xori	zero,r2,1005
1000f370:	1000f9c4 	addi	zero,r2,999
1000f374:	1000fb5c 	xori	zero,r2,1005
1000f378:	1000fb5c 	xori	zero,r2,1005
1000f37c:	1000f9f8 	rdprs	zero,r2,999
1000f380:	42000204 	addi	r8,r8,8
1000f384:	d8c12517 	ldw	r3,1172(sp)
1000f388:	1c07883a 	add	r3,r3,r16
1000f38c:	d8c12515 	stw	r3,1172(sp)
1000f390:	003f8d06 	br	1000f1c8 <__alt_data_end+0xf800f1c8>
1000f394:	d9012117 	ldw	r4,1156(sp)
1000f398:	d9412017 	ldw	r5,1152(sp)
1000f39c:	0009e740 	call	10009e74 <__swsetup_r>
1000f3a0:	1000301e 	bne	r2,zero,1000f464 <___vfiprintf_internal_r+0x3f0>
1000f3a4:	d8812017 	ldw	r2,1152(sp)
1000f3a8:	01000284 	movi	r4,10
1000f3ac:	10c0030b 	ldhu	r3,12(r2)
1000f3b0:	1805883a 	mov	r2,r3
1000f3b4:	1080068c 	andi	r2,r2,26
1000f3b8:	113f551e 	bne	r2,r4,1000f110 <__alt_data_end+0xf800f110>
1000f3bc:	d9012017 	ldw	r4,1152(sp)
1000f3c0:	2080038b 	ldhu	r2,14(r4)
1000f3c4:	113fffcc 	andi	r4,r2,65535
1000f3c8:	2120001c 	xori	r4,r4,32768
1000f3cc:	21200004 	addi	r4,r4,-32768
1000f3d0:	203f4f16 	blt	r4,zero,1000f110 <__alt_data_end+0xf800f110>
1000f3d4:	d9412017 	ldw	r5,1152(sp)
1000f3d8:	d9012117 	ldw	r4,1156(sp)
1000f3dc:	d9c12317 	ldw	r7,1164(sp)
1000f3e0:	2b001917 	ldw	r12,100(r5)
1000f3e4:	2ac00717 	ldw	r11,28(r5)
1000f3e8:	2a800917 	ldw	r10,36(r5)
1000f3ec:	02010004 	movi	r8,1024
1000f3f0:	18ffff4c 	andi	r3,r3,65533
1000f3f4:	da0b883a 	add	r5,sp,r8
1000f3f8:	980d883a 	mov	r6,r19
1000f3fc:	d8c1030d 	sth	r3,1036(sp)
1000f400:	db011915 	stw	r12,1124(sp)
1000f404:	d881038d 	sth	r2,1038(sp)
1000f408:	dac10715 	stw	r11,1052(sp)
1000f40c:	da810915 	stw	r10,1060(sp)
1000f410:	dec10015 	stw	sp,1024(sp)
1000f414:	dec10415 	stw	sp,1040(sp)
1000f418:	da010215 	stw	r8,1032(sp)
1000f41c:	da010515 	stw	r8,1044(sp)
1000f420:	d8010615 	stw	zero,1048(sp)
1000f424:	000f0740 	call	1000f074 <___vfiprintf_internal_r>
1000f428:	1021883a 	mov	r16,r2
1000f42c:	10000416 	blt	r2,zero,1000f440 <___vfiprintf_internal_r+0x3cc>
1000f430:	d9012117 	ldw	r4,1156(sp)
1000f434:	d9410004 	addi	r5,sp,1024
1000f438:	000b8f40 	call	1000b8f4 <_fflush_r>
1000f43c:	10040f1e 	bne	r2,zero,1001047c <___vfiprintf_internal_r+0x1408>
1000f440:	d881030b 	ldhu	r2,1036(sp)
1000f444:	1080100c 	andi	r2,r2,64
1000f448:	10000426 	beq	r2,zero,1000f45c <___vfiprintf_internal_r+0x3e8>
1000f44c:	d8c12017 	ldw	r3,1152(sp)
1000f450:	1880030b 	ldhu	r2,12(r3)
1000f454:	10801014 	ori	r2,r2,64
1000f458:	1880030d 	sth	r2,12(r3)
1000f45c:	8005883a 	mov	r2,r16
1000f460:	00000106 	br	1000f468 <___vfiprintf_internal_r+0x3f4>
1000f464:	00bfffc4 	movi	r2,-1
1000f468:	dfc13517 	ldw	ra,1236(sp)
1000f46c:	df013417 	ldw	fp,1232(sp)
1000f470:	ddc13317 	ldw	r23,1228(sp)
1000f474:	dd813217 	ldw	r22,1224(sp)
1000f478:	dd413117 	ldw	r21,1220(sp)
1000f47c:	dd013017 	ldw	r20,1216(sp)
1000f480:	dcc12f17 	ldw	r19,1212(sp)
1000f484:	dc812e17 	ldw	r18,1208(sp)
1000f488:	dc412d17 	ldw	r17,1204(sp)
1000f48c:	dc012c17 	ldw	r16,1200(sp)
1000f490:	dec13604 	addi	sp,sp,1240
1000f494:	f800283a 	ret
1000f498:	000beb00 	call	1000beb0 <__sinit>
1000f49c:	003f0706 	br	1000f0bc <__alt_data_end+0xf800f0bc>
1000f4a0:	d8c12417 	ldw	r3,1168(sp)
1000f4a4:	d8812315 	stw	r2,1164(sp)
1000f4a8:	00c7c83a 	sub	r3,zero,r3
1000f4ac:	d8c12415 	stw	r3,1168(sp)
1000f4b0:	94800114 	ori	r18,r18,4
1000f4b4:	b9800007 	ldb	r6,0(r23)
1000f4b8:	003f4f06 	br	1000f1f8 <__alt_data_end+0xf800f1f8>
1000f4bc:	94802014 	ori	r18,r18,128
1000f4c0:	b9800007 	ldb	r6,0(r23)
1000f4c4:	003f4c06 	br	1000f1f8 <__alt_data_end+0xf800f1f8>
1000f4c8:	dc012615 	stw	r16,1176(sp)
1000f4cc:	d8012415 	stw	zero,1168(sp)
1000f4d0:	35bff404 	addi	r22,r6,-48
1000f4d4:	0009883a 	mov	r4,zero
1000f4d8:	b821883a 	mov	r16,r23
1000f4dc:	01400284 	movi	r5,10
1000f4e0:	000586c0 	call	1000586c <__mulsi3>
1000f4e4:	81800007 	ldb	r6,0(r16)
1000f4e8:	1589883a 	add	r4,r2,r22
1000f4ec:	bdc00044 	addi	r23,r23,1
1000f4f0:	35bff404 	addi	r22,r6,-48
1000f4f4:	b821883a 	mov	r16,r23
1000f4f8:	adbff82e 	bgeu	r21,r22,1000f4dc <__alt_data_end+0xf800f4dc>
1000f4fc:	d9012415 	stw	r4,1168(sp)
1000f500:	dc012617 	ldw	r16,1176(sp)
1000f504:	003f3d06 	br	1000f1fc <__alt_data_end+0xf800f1fc>
1000f508:	d8c12203 	ldbu	r3,1160(sp)
1000f50c:	94800414 	ori	r18,r18,16
1000f510:	9080080c 	andi	r2,r18,32
1000f514:	d8c11d85 	stb	r3,1142(sp)
1000f518:	9811883a 	mov	r8,r19
1000f51c:	d8c12317 	ldw	r3,1164(sp)
1000f520:	10018226 	beq	r2,zero,1000fb2c <___vfiprintf_internal_r+0xab8>
1000f524:	d9012317 	ldw	r4,1164(sp)
1000f528:	18800117 	ldw	r2,4(r3)
1000f52c:	1cc00017 	ldw	r19,0(r3)
1000f530:	21000204 	addi	r4,r4,8
1000f534:	d9012315 	stw	r4,1164(sp)
1000f538:	102b883a 	mov	r21,r2
1000f53c:	10030016 	blt	r2,zero,10010140 <___vfiprintf_internal_r+0x10cc>
1000f540:	dd811d83 	ldbu	r22,1142(sp)
1000f544:	8029883a 	mov	r20,r16
1000f548:	00800044 	movi	r2,1
1000f54c:	9d46b03a 	or	r3,r19,r21
1000f550:	80000216 	blt	r16,zero,1000f55c <___vfiprintf_internal_r+0x4e8>
1000f554:	013fdfc4 	movi	r4,-129
1000f558:	9124703a 	and	r18,r18,r4
1000f55c:	1801b41e 	bne	r3,zero,1000fc30 <___vfiprintf_internal_r+0xbbc>
1000f560:	80028126 	beq	r16,zero,1000ff68 <___vfiprintf_internal_r+0xef4>
1000f564:	10803fcc 	andi	r2,r2,255
1000f568:	00c00044 	movi	r3,1
1000f56c:	10c1d126 	beq	r2,r3,1000fcb4 <___vfiprintf_internal_r+0xc40>
1000f570:	00c00084 	movi	r3,2
1000f574:	10c28626 	beq	r2,r3,1000ff90 <___vfiprintf_internal_r+0xf1c>
1000f578:	d8c10a04 	addi	r3,sp,1064
1000f57c:	9808d0fa 	srli	r4,r19,3
1000f580:	a80a977a 	slli	r5,r21,29
1000f584:	a82ad0fa 	srli	r21,r21,3
1000f588:	9cc001cc 	andi	r19,r19,7
1000f58c:	98800c04 	addi	r2,r19,48
1000f590:	18ffffc4 	addi	r3,r3,-1
1000f594:	2926b03a 	or	r19,r5,r4
1000f598:	18800005 	stb	r2,0(r3)
1000f59c:	9d48b03a 	or	r4,r19,r21
1000f5a0:	203ff61e 	bne	r4,zero,1000f57c <__alt_data_end+0xf800f57c>
1000f5a4:	9100004c 	andi	r4,r18,1
1000f5a8:	d8c12215 	stw	r3,1160(sp)
1000f5ac:	2002b31e 	bne	r4,zero,1001007c <___vfiprintf_internal_r+0x1008>
1000f5b0:	d9411e17 	ldw	r5,1144(sp)
1000f5b4:	28e9c83a 	sub	r20,r5,r3
1000f5b8:	a02b883a 	mov	r21,r20
1000f5bc:	a400010e 	bge	r20,r16,1000f5c4 <___vfiprintf_internal_r+0x550>
1000f5c0:	802b883a 	mov	r21,r16
1000f5c4:	b5803fcc 	andi	r22,r22,255
1000f5c8:	b580201c 	xori	r22,r22,128
1000f5cc:	b5bfe004 	addi	r22,r22,-128
1000f5d0:	b0000126 	beq	r22,zero,1000f5d8 <___vfiprintf_internal_r+0x564>
1000f5d4:	ad400044 	addi	r21,r21,1
1000f5d8:	9280008c 	andi	r10,r18,2
1000f5dc:	50000126 	beq	r10,zero,1000f5e4 <___vfiprintf_internal_r+0x570>
1000f5e0:	ad400084 	addi	r21,r21,2
1000f5e4:	9580210c 	andi	r22,r18,132
1000f5e8:	b001751e 	bne	r22,zero,1000fbc0 <___vfiprintf_internal_r+0xb4c>
1000f5ec:	d9012417 	ldw	r4,1168(sp)
1000f5f0:	2567c83a 	sub	r19,r4,r21
1000f5f4:	04c1720e 	bge	zero,r19,1000fbc0 <___vfiprintf_internal_r+0xb4c>
1000f5f8:	01c00404 	movi	r7,16
1000f5fc:	d8c11c17 	ldw	r3,1136(sp)
1000f600:	3cc36b0e 	bge	r7,r19,100103b0 <___vfiprintf_internal_r+0x133c>
1000f604:	00840074 	movhi	r2,4097
1000f608:	109fa604 	addi	r2,r2,32408
1000f60c:	dc012915 	stw	r16,1188(sp)
1000f610:	d9011b17 	ldw	r4,1132(sp)
1000f614:	9821883a 	mov	r16,r19
1000f618:	d8812615 	stw	r2,1176(sp)
1000f61c:	030001c4 	movi	r12,7
1000f620:	5027883a 	mov	r19,r10
1000f624:	00000506 	br	1000f63c <___vfiprintf_internal_r+0x5c8>
1000f628:	21400084 	addi	r5,r4,2
1000f62c:	42000204 	addi	r8,r8,8
1000f630:	1009883a 	mov	r4,r2
1000f634:	843ffc04 	addi	r16,r16,-16
1000f638:	3c000d0e 	bge	r7,r16,1000f670 <___vfiprintf_internal_r+0x5fc>
1000f63c:	18c00404 	addi	r3,r3,16
1000f640:	20800044 	addi	r2,r4,1
1000f644:	47000015 	stw	fp,0(r8)
1000f648:	41c00115 	stw	r7,4(r8)
1000f64c:	d8c11c15 	stw	r3,1136(sp)
1000f650:	d8811b15 	stw	r2,1132(sp)
1000f654:	60bff40e 	bge	r12,r2,1000f628 <__alt_data_end+0xf800f628>
1000f658:	18014b1e 	bne	r3,zero,1000fb88 <___vfiprintf_internal_r+0xb14>
1000f65c:	843ffc04 	addi	r16,r16,-16
1000f660:	0009883a 	mov	r4,zero
1000f664:	01400044 	movi	r5,1
1000f668:	d811883a 	mov	r8,sp
1000f66c:	3c3ff316 	blt	r7,r16,1000f63c <__alt_data_end+0xf800f63c>
1000f670:	9815883a 	mov	r10,r19
1000f674:	8027883a 	mov	r19,r16
1000f678:	dc012917 	ldw	r16,1188(sp)
1000f67c:	d9012617 	ldw	r4,1176(sp)
1000f680:	98c7883a 	add	r3,r19,r3
1000f684:	44c00115 	stw	r19,4(r8)
1000f688:	41000015 	stw	r4,0(r8)
1000f68c:	d8c11c15 	stw	r3,1136(sp)
1000f690:	d9411b15 	stw	r5,1132(sp)
1000f694:	008001c4 	movi	r2,7
1000f698:	11425116 	blt	r2,r5,1000ffe0 <___vfiprintf_internal_r+0xf6c>
1000f69c:	d9011d87 	ldb	r4,1142(sp)
1000f6a0:	42000204 	addi	r8,r8,8
1000f6a4:	28800044 	addi	r2,r5,1
1000f6a8:	20014a1e 	bne	r4,zero,1000fbd4 <___vfiprintf_internal_r+0xb60>
1000f6ac:	50000c26 	beq	r10,zero,1000f6e0 <___vfiprintf_internal_r+0x66c>
1000f6b0:	d9011d04 	addi	r4,sp,1140
1000f6b4:	18c00084 	addi	r3,r3,2
1000f6b8:	41000015 	stw	r4,0(r8)
1000f6bc:	01000084 	movi	r4,2
1000f6c0:	41000115 	stw	r4,4(r8)
1000f6c4:	d8c11c15 	stw	r3,1136(sp)
1000f6c8:	d8811b15 	stw	r2,1132(sp)
1000f6cc:	010001c4 	movi	r4,7
1000f6d0:	20822016 	blt	r4,r2,1000ff54 <___vfiprintf_internal_r+0xee0>
1000f6d4:	100b883a 	mov	r5,r2
1000f6d8:	42000204 	addi	r8,r8,8
1000f6dc:	10800044 	addi	r2,r2,1
1000f6e0:	01002004 	movi	r4,128
1000f6e4:	b101de26 	beq	r22,r4,1000fe60 <___vfiprintf_internal_r+0xdec>
1000f6e8:	8521c83a 	sub	r16,r16,r20
1000f6ec:	0400230e 	bge	zero,r16,1000f77c <___vfiprintf_internal_r+0x708>
1000f6f0:	04c00404 	movi	r19,16
1000f6f4:	9c030d0e 	bge	r19,r16,1001032c <___vfiprintf_internal_r+0x12b8>
1000f6f8:	00840074 	movhi	r2,4097
1000f6fc:	109fa204 	addi	r2,r2,32392
1000f700:	d8812615 	stw	r2,1176(sp)
1000f704:	058001c4 	movi	r22,7
1000f708:	00000506 	br	1000f720 <___vfiprintf_internal_r+0x6ac>
1000f70c:	28800084 	addi	r2,r5,2
1000f710:	42000204 	addi	r8,r8,8
1000f714:	200b883a 	mov	r5,r4
1000f718:	843ffc04 	addi	r16,r16,-16
1000f71c:	9c000d0e 	bge	r19,r16,1000f754 <___vfiprintf_internal_r+0x6e0>
1000f720:	18c00404 	addi	r3,r3,16
1000f724:	29000044 	addi	r4,r5,1
1000f728:	44400015 	stw	r17,0(r8)
1000f72c:	44c00115 	stw	r19,4(r8)
1000f730:	d8c11c15 	stw	r3,1136(sp)
1000f734:	d9011b15 	stw	r4,1132(sp)
1000f738:	b13ff40e 	bge	r22,r4,1000f70c <__alt_data_end+0xf800f70c>
1000f73c:	1801321e 	bne	r3,zero,1000fc08 <___vfiprintf_internal_r+0xb94>
1000f740:	843ffc04 	addi	r16,r16,-16
1000f744:	000b883a 	mov	r5,zero
1000f748:	00800044 	movi	r2,1
1000f74c:	d811883a 	mov	r8,sp
1000f750:	9c3ff316 	blt	r19,r16,1000f720 <__alt_data_end+0xf800f720>
1000f754:	d9012617 	ldw	r4,1176(sp)
1000f758:	1c07883a 	add	r3,r3,r16
1000f75c:	44000115 	stw	r16,4(r8)
1000f760:	41000015 	stw	r4,0(r8)
1000f764:	d8c11c15 	stw	r3,1136(sp)
1000f768:	d8811b15 	stw	r2,1132(sp)
1000f76c:	010001c4 	movi	r4,7
1000f770:	20816216 	blt	r4,r2,1000fcfc <___vfiprintf_internal_r+0xc88>
1000f774:	42000204 	addi	r8,r8,8
1000f778:	10800044 	addi	r2,r2,1
1000f77c:	d9012217 	ldw	r4,1160(sp)
1000f780:	1d07883a 	add	r3,r3,r20
1000f784:	45000115 	stw	r20,4(r8)
1000f788:	41000015 	stw	r4,0(r8)
1000f78c:	d8c11c15 	stw	r3,1136(sp)
1000f790:	d8811b15 	stw	r2,1132(sp)
1000f794:	010001c4 	movi	r4,7
1000f798:	2081610e 	bge	r4,r2,1000fd20 <___vfiprintf_internal_r+0xcac>
1000f79c:	1802211e 	bne	r3,zero,10010024 <___vfiprintf_internal_r+0xfb0>
1000f7a0:	d8011b15 	stw	zero,1132(sp)
1000f7a4:	9480010c 	andi	r18,r18,4
1000f7a8:	9002171e 	bne	r18,zero,10010008 <___vfiprintf_internal_r+0xf94>
1000f7ac:	d9412417 	ldw	r5,1168(sp)
1000f7b0:	a9433716 	blt	r21,r5,10010490 <___vfiprintf_internal_r+0x141c>
1000f7b4:	d8812517 	ldw	r2,1172(sp)
1000f7b8:	1545883a 	add	r2,r2,r21
1000f7bc:	d8812515 	stw	r2,1172(sp)
1000f7c0:	00019a06 	br	1000fe2c <___vfiprintf_internal_r+0xdb8>
1000f7c4:	d8c12317 	ldw	r3,1164(sp)
1000f7c8:	05400044 	movi	r21,1
1000f7cc:	9811883a 	mov	r8,r19
1000f7d0:	18800017 	ldw	r2,0(r3)
1000f7d4:	18c00104 	addi	r3,r3,4
1000f7d8:	d8c12315 	stw	r3,1164(sp)
1000f7dc:	d8c10004 	addi	r3,sp,1024
1000f7e0:	d8011d85 	stb	zero,1142(sp)
1000f7e4:	d8810005 	stb	r2,1024(sp)
1000f7e8:	a829883a 	mov	r20,r21
1000f7ec:	d8c12215 	stw	r3,1160(sp)
1000f7f0:	0021883a 	mov	r16,zero
1000f7f4:	003f7806 	br	1000f5d8 <__alt_data_end+0xf800f5d8>
1000f7f8:	94800414 	ori	r18,r18,16
1000f7fc:	9080080c 	andi	r2,r18,32
1000f800:	9811883a 	mov	r8,r19
1000f804:	10009026 	beq	r2,zero,1000fa48 <___vfiprintf_internal_r+0x9d4>
1000f808:	d8812317 	ldw	r2,1164(sp)
1000f80c:	d8c12317 	ldw	r3,1164(sp)
1000f810:	14c00017 	ldw	r19,0(r2)
1000f814:	15400117 	ldw	r21,4(r2)
1000f818:	18c00204 	addi	r3,r3,8
1000f81c:	d8c12315 	stw	r3,1164(sp)
1000f820:	0005883a 	mov	r2,zero
1000f824:	9d46b03a 	or	r3,r19,r21
1000f828:	d8011d85 	stb	zero,1142(sp)
1000f82c:	8029883a 	mov	r20,r16
1000f830:	002d883a 	mov	r22,zero
1000f834:	003f4606 	br	1000f550 <__alt_data_end+0xf800f550>
1000f838:	94800414 	ori	r18,r18,16
1000f83c:	9080080c 	andi	r2,r18,32
1000f840:	9811883a 	mov	r8,r19
1000f844:	10006226 	beq	r2,zero,1000f9d0 <___vfiprintf_internal_r+0x95c>
1000f848:	d9012317 	ldw	r4,1164(sp)
1000f84c:	00800044 	movi	r2,1
1000f850:	24c00017 	ldw	r19,0(r4)
1000f854:	25400117 	ldw	r21,4(r4)
1000f858:	21000204 	addi	r4,r4,8
1000f85c:	d9012315 	stw	r4,1164(sp)
1000f860:	9d46b03a 	or	r3,r19,r21
1000f864:	003ff006 	br	1000f828 <__alt_data_end+0xf800f828>
1000f868:	b9800007 	ldb	r6,0(r23)
1000f86c:	00801b04 	movi	r2,108
1000f870:	3082b226 	beq	r6,r2,1001033c <___vfiprintf_internal_r+0x12c8>
1000f874:	94800414 	ori	r18,r18,16
1000f878:	003e5f06 	br	1000f1f8 <__alt_data_end+0xf800f1f8>
1000f87c:	d8c12203 	ldbu	r3,1160(sp)
1000f880:	01040074 	movhi	r4,4097
1000f884:	211f3c04 	addi	r4,r4,31984
1000f888:	d8c11d85 	stb	r3,1142(sp)
1000f88c:	d9012715 	stw	r4,1180(sp)
1000f890:	90c0080c 	andi	r3,r18,32
1000f894:	9811883a 	mov	r8,r19
1000f898:	d8812317 	ldw	r2,1164(sp)
1000f89c:	18005f26 	beq	r3,zero,1000fa1c <___vfiprintf_internal_r+0x9a8>
1000f8a0:	d9012317 	ldw	r4,1164(sp)
1000f8a4:	14c00017 	ldw	r19,0(r2)
1000f8a8:	15400117 	ldw	r21,4(r2)
1000f8ac:	21000204 	addi	r4,r4,8
1000f8b0:	d9012315 	stw	r4,1164(sp)
1000f8b4:	9080004c 	andi	r2,r18,1
1000f8b8:	1001e226 	beq	r2,zero,10010044 <___vfiprintf_internal_r+0xfd0>
1000f8bc:	9d46b03a 	or	r3,r19,r21
1000f8c0:	18024e26 	beq	r3,zero,100101fc <___vfiprintf_internal_r+0x1188>
1000f8c4:	00800c04 	movi	r2,48
1000f8c8:	d8811d05 	stb	r2,1140(sp)
1000f8cc:	d9811d45 	stb	r6,1141(sp)
1000f8d0:	94800094 	ori	r18,r18,2
1000f8d4:	00800084 	movi	r2,2
1000f8d8:	003fd306 	br	1000f828 <__alt_data_end+0xf800f828>
1000f8dc:	d9012317 	ldw	r4,1164(sp)
1000f8e0:	d9412317 	ldw	r5,1164(sp)
1000f8e4:	21000017 	ldw	r4,0(r4)
1000f8e8:	28800104 	addi	r2,r5,4
1000f8ec:	d9012415 	stw	r4,1168(sp)
1000f8f0:	203eeb16 	blt	r4,zero,1000f4a0 <__alt_data_end+0xf800f4a0>
1000f8f4:	d8812315 	stw	r2,1164(sp)
1000f8f8:	b9800007 	ldb	r6,0(r23)
1000f8fc:	003e3e06 	br	1000f1f8 <__alt_data_end+0xf800f1f8>
1000f900:	b9800007 	ldb	r6,0(r23)
1000f904:	01000a84 	movi	r4,42
1000f908:	b8800044 	addi	r2,r23,1
1000f90c:	3102d226 	beq	r6,r4,10010458 <___vfiprintf_internal_r+0x13e4>
1000f910:	35bff404 	addi	r22,r6,-48
1000f914:	102f883a 	mov	r23,r2
1000f918:	0021883a 	mov	r16,zero
1000f91c:	adbe3736 	bltu	r21,r22,1000f1fc <__alt_data_end+0xf800f1fc>
1000f920:	0009883a 	mov	r4,zero
1000f924:	01400284 	movi	r5,10
1000f928:	000586c0 	call	1000586c <__mulsi3>
1000f92c:	b9800007 	ldb	r6,0(r23)
1000f930:	b089883a 	add	r4,r22,r2
1000f934:	bdc00044 	addi	r23,r23,1
1000f938:	35bff404 	addi	r22,r6,-48
1000f93c:	adbff92e 	bgeu	r21,r22,1000f924 <__alt_data_end+0xf800f924>
1000f940:	2021883a 	mov	r16,r4
1000f944:	203e2d0e 	bge	r4,zero,1000f1fc <__alt_data_end+0xf800f1fc>
1000f948:	043fffc4 	movi	r16,-1
1000f94c:	003e2b06 	br	1000f1fc <__alt_data_end+0xf800f1fc>
1000f950:	94801014 	ori	r18,r18,64
1000f954:	b9800007 	ldb	r6,0(r23)
1000f958:	003e2706 	br	1000f1f8 <__alt_data_end+0xf800f1f8>
1000f95c:	94800814 	ori	r18,r18,32
1000f960:	b9800007 	ldb	r6,0(r23)
1000f964:	003e2406 	br	1000f1f8 <__alt_data_end+0xf800f1f8>
1000f968:	d9412317 	ldw	r5,1164(sp)
1000f96c:	d8812317 	ldw	r2,1164(sp)
1000f970:	d8011d85 	stb	zero,1142(sp)
1000f974:	29400017 	ldw	r5,0(r5)
1000f978:	9811883a 	mov	r8,r19
1000f97c:	14c00104 	addi	r19,r2,4
1000f980:	d9412215 	stw	r5,1160(sp)
1000f984:	28029026 	beq	r5,zero,100103c8 <___vfiprintf_internal_r+0x1354>
1000f988:	d9012217 	ldw	r4,1160(sp)
1000f98c:	80027616 	blt	r16,zero,10010368 <___vfiprintf_internal_r+0x12f4>
1000f990:	000b883a 	mov	r5,zero
1000f994:	800d883a 	mov	r6,r16
1000f998:	da012a15 	stw	r8,1192(sp)
1000f99c:	000d3680 	call	1000d368 <memchr>
1000f9a0:	da012a17 	ldw	r8,1192(sp)
1000f9a4:	1002a026 	beq	r2,zero,10010428 <___vfiprintf_internal_r+0x13b4>
1000f9a8:	d8c12217 	ldw	r3,1160(sp)
1000f9ac:	10e9c83a 	sub	r20,r2,r3
1000f9b0:	85023816 	blt	r16,r20,10010294 <___vfiprintf_internal_r+0x1220>
1000f9b4:	dd811d83 	ldbu	r22,1142(sp)
1000f9b8:	dcc12315 	stw	r19,1164(sp)
1000f9bc:	0021883a 	mov	r16,zero
1000f9c0:	003efd06 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
1000f9c4:	9080080c 	andi	r2,r18,32
1000f9c8:	9811883a 	mov	r8,r19
1000f9cc:	103f9e1e 	bne	r2,zero,1000f848 <__alt_data_end+0xf800f848>
1000f9d0:	9080040c 	andi	r2,r18,16
1000f9d4:	10021726 	beq	r2,zero,10010234 <___vfiprintf_internal_r+0x11c0>
1000f9d8:	d9412317 	ldw	r5,1164(sp)
1000f9dc:	002b883a 	mov	r21,zero
1000f9e0:	00800044 	movi	r2,1
1000f9e4:	2cc00017 	ldw	r19,0(r5)
1000f9e8:	29400104 	addi	r5,r5,4
1000f9ec:	d9412315 	stw	r5,1164(sp)
1000f9f0:	9807883a 	mov	r3,r19
1000f9f4:	003f8c06 	br	1000f828 <__alt_data_end+0xf800f828>
1000f9f8:	d8c12203 	ldbu	r3,1160(sp)
1000f9fc:	01040074 	movhi	r4,4097
1000fa00:	211f4104 	addi	r4,r4,32004
1000fa04:	d8c11d85 	stb	r3,1142(sp)
1000fa08:	d9012715 	stw	r4,1180(sp)
1000fa0c:	90c0080c 	andi	r3,r18,32
1000fa10:	9811883a 	mov	r8,r19
1000fa14:	d8812317 	ldw	r2,1164(sp)
1000fa18:	183fa11e 	bne	r3,zero,1000f8a0 <__alt_data_end+0xf800f8a0>
1000fa1c:	90c0040c 	andi	r3,r18,16
1000fa20:	1801e526 	beq	r3,zero,100101b8 <___vfiprintf_internal_r+0x1144>
1000fa24:	d9412317 	ldw	r5,1164(sp)
1000fa28:	14c00017 	ldw	r19,0(r2)
1000fa2c:	002b883a 	mov	r21,zero
1000fa30:	29400104 	addi	r5,r5,4
1000fa34:	d9412315 	stw	r5,1164(sp)
1000fa38:	003f9e06 	br	1000f8b4 <__alt_data_end+0xf800f8b4>
1000fa3c:	9080080c 	andi	r2,r18,32
1000fa40:	9811883a 	mov	r8,r19
1000fa44:	103f701e 	bne	r2,zero,1000f808 <__alt_data_end+0xf800f808>
1000fa48:	9080040c 	andi	r2,r18,16
1000fa4c:	1001ef26 	beq	r2,zero,1001020c <___vfiprintf_internal_r+0x1198>
1000fa50:	d9012317 	ldw	r4,1164(sp)
1000fa54:	002b883a 	mov	r21,zero
1000fa58:	0005883a 	mov	r2,zero
1000fa5c:	24c00017 	ldw	r19,0(r4)
1000fa60:	21000104 	addi	r4,r4,4
1000fa64:	d9012315 	stw	r4,1164(sp)
1000fa68:	9807883a 	mov	r3,r19
1000fa6c:	003f6e06 	br	1000f828 <__alt_data_end+0xf800f828>
1000fa70:	d8c12317 	ldw	r3,1164(sp)
1000fa74:	9811883a 	mov	r8,r19
1000fa78:	00800c04 	movi	r2,48
1000fa7c:	1cc00017 	ldw	r19,0(r3)
1000fa80:	01040074 	movhi	r4,4097
1000fa84:	18c00104 	addi	r3,r3,4
1000fa88:	d8811d05 	stb	r2,1140(sp)
1000fa8c:	211f4104 	addi	r4,r4,32004
1000fa90:	00801e04 	movi	r2,120
1000fa94:	d8811d45 	stb	r2,1141(sp)
1000fa98:	d8c12315 	stw	r3,1164(sp)
1000fa9c:	002b883a 	mov	r21,zero
1000faa0:	94800094 	ori	r18,r18,2
1000faa4:	d9012715 	stw	r4,1180(sp)
1000faa8:	00800084 	movi	r2,2
1000faac:	9807883a 	mov	r3,r19
1000fab0:	003f5d06 	br	1000f828 <__alt_data_end+0xf800f828>
1000fab4:	d8c12203 	ldbu	r3,1160(sp)
1000fab8:	9080080c 	andi	r2,r18,32
1000fabc:	9811883a 	mov	r8,r19
1000fac0:	d8c11d85 	stb	r3,1142(sp)
1000fac4:	1001b126 	beq	r2,zero,1001018c <___vfiprintf_internal_r+0x1118>
1000fac8:	d9012317 	ldw	r4,1164(sp)
1000facc:	d9412517 	ldw	r5,1172(sp)
1000fad0:	20800017 	ldw	r2,0(r4)
1000fad4:	2807d7fa 	srai	r3,r5,31
1000fad8:	21000104 	addi	r4,r4,4
1000fadc:	d9012315 	stw	r4,1164(sp)
1000fae0:	11400015 	stw	r5,0(r2)
1000fae4:	10c00115 	stw	r3,4(r2)
1000fae8:	003d9a06 	br	1000f154 <__alt_data_end+0xf800f154>
1000faec:	d8812207 	ldb	r2,1160(sp)
1000faf0:	1001c41e 	bne	r2,zero,10010204 <___vfiprintf_internal_r+0x1190>
1000faf4:	00c00804 	movi	r3,32
1000faf8:	d8c12205 	stb	r3,1160(sp)
1000fafc:	b9800007 	ldb	r6,0(r23)
1000fb00:	003dbd06 	br	1000f1f8 <__alt_data_end+0xf800f1f8>
1000fb04:	00c00ac4 	movi	r3,43
1000fb08:	d8c12205 	stb	r3,1160(sp)
1000fb0c:	b9800007 	ldb	r6,0(r23)
1000fb10:	003db906 	br	1000f1f8 <__alt_data_end+0xf800f1f8>
1000fb14:	d8c12203 	ldbu	r3,1160(sp)
1000fb18:	9080080c 	andi	r2,r18,32
1000fb1c:	9811883a 	mov	r8,r19
1000fb20:	d8c11d85 	stb	r3,1142(sp)
1000fb24:	d8c12317 	ldw	r3,1164(sp)
1000fb28:	103e7e1e 	bne	r2,zero,1000f524 <__alt_data_end+0xf800f524>
1000fb2c:	9080040c 	andi	r2,r18,16
1000fb30:	1001a926 	beq	r2,zero,100101d8 <___vfiprintf_internal_r+0x1164>
1000fb34:	1cc00017 	ldw	r19,0(r3)
1000fb38:	d9412317 	ldw	r5,1164(sp)
1000fb3c:	982bd7fa 	srai	r21,r19,31
1000fb40:	29400104 	addi	r5,r5,4
1000fb44:	d9412315 	stw	r5,1164(sp)
1000fb48:	a805883a 	mov	r2,r21
1000fb4c:	003e7b06 	br	1000f53c <__alt_data_end+0xf800f53c>
1000fb50:	94800054 	ori	r18,r18,1
1000fb54:	b9800007 	ldb	r6,0(r23)
1000fb58:	003da706 	br	1000f1f8 <__alt_data_end+0xf800f1f8>
1000fb5c:	d8c12203 	ldbu	r3,1160(sp)
1000fb60:	9811883a 	mov	r8,r19
1000fb64:	d8c11d85 	stb	r3,1142(sp)
1000fb68:	30005826 	beq	r6,zero,1000fccc <___vfiprintf_internal_r+0xc58>
1000fb6c:	05400044 	movi	r21,1
1000fb70:	d8c10004 	addi	r3,sp,1024
1000fb74:	d9810005 	stb	r6,1024(sp)
1000fb78:	d8011d85 	stb	zero,1142(sp)
1000fb7c:	a829883a 	mov	r20,r21
1000fb80:	d8c12215 	stw	r3,1160(sp)
1000fb84:	003f1a06 	br	1000f7f0 <__alt_data_end+0xf800f7f0>
1000fb88:	d9012117 	ldw	r4,1156(sp)
1000fb8c:	d9412017 	ldw	r5,1152(sp)
1000fb90:	d9811a04 	addi	r6,sp,1128
1000fb94:	d9c12a15 	stw	r7,1192(sp)
1000fb98:	db012b15 	stw	r12,1196(sp)
1000fb9c:	000ef600 	call	1000ef60 <__sprint_r.part.0>
1000fba0:	d9c12a17 	ldw	r7,1192(sp)
1000fba4:	db012b17 	ldw	r12,1196(sp)
1000fba8:	10004e1e 	bne	r2,zero,1000fce4 <___vfiprintf_internal_r+0xc70>
1000fbac:	d9011b17 	ldw	r4,1132(sp)
1000fbb0:	d8c11c17 	ldw	r3,1136(sp)
1000fbb4:	d811883a 	mov	r8,sp
1000fbb8:	21400044 	addi	r5,r4,1
1000fbbc:	003e9d06 	br	1000f634 <__alt_data_end+0xf800f634>
1000fbc0:	d9411b17 	ldw	r5,1132(sp)
1000fbc4:	d8c11c17 	ldw	r3,1136(sp)
1000fbc8:	28800044 	addi	r2,r5,1
1000fbcc:	d9011d87 	ldb	r4,1142(sp)
1000fbd0:	203eb626 	beq	r4,zero,1000f6ac <__alt_data_end+0xf800f6ac>
1000fbd4:	01000044 	movi	r4,1
1000fbd8:	d9411d84 	addi	r5,sp,1142
1000fbdc:	1907883a 	add	r3,r3,r4
1000fbe0:	41400015 	stw	r5,0(r8)
1000fbe4:	41000115 	stw	r4,4(r8)
1000fbe8:	d8c11c15 	stw	r3,1136(sp)
1000fbec:	d8811b15 	stw	r2,1132(sp)
1000fbf0:	014001c4 	movi	r5,7
1000fbf4:	2880ce16 	blt	r5,r2,1000ff30 <___vfiprintf_internal_r+0xebc>
1000fbf8:	100b883a 	mov	r5,r2
1000fbfc:	42000204 	addi	r8,r8,8
1000fc00:	10800044 	addi	r2,r2,1
1000fc04:	003ea906 	br	1000f6ac <__alt_data_end+0xf800f6ac>
1000fc08:	d9012117 	ldw	r4,1156(sp)
1000fc0c:	d9412017 	ldw	r5,1152(sp)
1000fc10:	d9811a04 	addi	r6,sp,1128
1000fc14:	000ef600 	call	1000ef60 <__sprint_r.part.0>
1000fc18:	1000321e 	bne	r2,zero,1000fce4 <___vfiprintf_internal_r+0xc70>
1000fc1c:	d9411b17 	ldw	r5,1132(sp)
1000fc20:	d8c11c17 	ldw	r3,1136(sp)
1000fc24:	d811883a 	mov	r8,sp
1000fc28:	28800044 	addi	r2,r5,1
1000fc2c:	003eba06 	br	1000f718 <__alt_data_end+0xf800f718>
1000fc30:	10803fcc 	andi	r2,r2,255
1000fc34:	00c00044 	movi	r3,1
1000fc38:	10fe4d1e 	bne	r2,r3,1000f570 <__alt_data_end+0xf800f570>
1000fc3c:	a800021e 	bne	r21,zero,1000fc48 <___vfiprintf_internal_r+0xbd4>
1000fc40:	00800244 	movi	r2,9
1000fc44:	14c01b2e 	bgeu	r2,r19,1000fcb4 <___vfiprintf_internal_r+0xc40>
1000fc48:	dc012215 	stw	r16,1160(sp)
1000fc4c:	dd010a04 	addi	r20,sp,1064
1000fc50:	a821883a 	mov	r16,r21
1000fc54:	402b883a 	mov	r21,r8
1000fc58:	9809883a 	mov	r4,r19
1000fc5c:	800b883a 	mov	r5,r16
1000fc60:	01800284 	movi	r6,10
1000fc64:	000f883a 	mov	r7,zero
1000fc68:	00115540 	call	10011554 <__umoddi3>
1000fc6c:	10800c04 	addi	r2,r2,48
1000fc70:	a53fffc4 	addi	r20,r20,-1
1000fc74:	9809883a 	mov	r4,r19
1000fc78:	800b883a 	mov	r5,r16
1000fc7c:	01800284 	movi	r6,10
1000fc80:	000f883a 	mov	r7,zero
1000fc84:	a0800005 	stb	r2,0(r20)
1000fc88:	0010f140 	call	10010f14 <__udivdi3>
1000fc8c:	1027883a 	mov	r19,r2
1000fc90:	10c4b03a 	or	r2,r2,r3
1000fc94:	1821883a 	mov	r16,r3
1000fc98:	103fef1e 	bne	r2,zero,1000fc58 <__alt_data_end+0xf800fc58>
1000fc9c:	d9011e17 	ldw	r4,1144(sp)
1000fca0:	dc012217 	ldw	r16,1160(sp)
1000fca4:	a811883a 	mov	r8,r21
1000fca8:	dd012215 	stw	r20,1160(sp)
1000fcac:	2529c83a 	sub	r20,r4,r20
1000fcb0:	003e4106 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
1000fcb4:	9cc00c04 	addi	r19,r19,48
1000fcb8:	d8c109c4 	addi	r3,sp,1063
1000fcbc:	dcc109c5 	stb	r19,1063(sp)
1000fcc0:	dd012817 	ldw	r20,1184(sp)
1000fcc4:	d8c12215 	stw	r3,1160(sp)
1000fcc8:	003e3b06 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
1000fccc:	d8811c17 	ldw	r2,1136(sp)
1000fcd0:	10000426 	beq	r2,zero,1000fce4 <___vfiprintf_internal_r+0xc70>
1000fcd4:	d9012117 	ldw	r4,1156(sp)
1000fcd8:	d9412017 	ldw	r5,1152(sp)
1000fcdc:	d9811a04 	addi	r6,sp,1128
1000fce0:	000ef600 	call	1000ef60 <__sprint_r.part.0>
1000fce4:	d9412017 	ldw	r5,1152(sp)
1000fce8:	2880030b 	ldhu	r2,12(r5)
1000fcec:	1080100c 	andi	r2,r2,64
1000fcf0:	103ddc1e 	bne	r2,zero,1000f464 <__alt_data_end+0xf800f464>
1000fcf4:	d8812517 	ldw	r2,1172(sp)
1000fcf8:	003ddb06 	br	1000f468 <__alt_data_end+0xf800f468>
1000fcfc:	1801061e 	bne	r3,zero,10010118 <___vfiprintf_internal_r+0x10a4>
1000fd00:	d8c12217 	ldw	r3,1160(sp)
1000fd04:	00800044 	movi	r2,1
1000fd08:	dd000115 	stw	r20,4(sp)
1000fd0c:	d8c00015 	stw	r3,0(sp)
1000fd10:	dd011c15 	stw	r20,1136(sp)
1000fd14:	d8811b15 	stw	r2,1132(sp)
1000fd18:	a007883a 	mov	r3,r20
1000fd1c:	d811883a 	mov	r8,sp
1000fd20:	42000204 	addi	r8,r8,8
1000fd24:	9480010c 	andi	r18,r18,4
1000fd28:	90003426 	beq	r18,zero,1000fdfc <___vfiprintf_internal_r+0xd88>
1000fd2c:	d9412417 	ldw	r5,1168(sp)
1000fd30:	2d65c83a 	sub	r18,r5,r21
1000fd34:	0480310e 	bge	zero,r18,1000fdfc <___vfiprintf_internal_r+0xd88>
1000fd38:	04000404 	movi	r16,16
1000fd3c:	8481ad0e 	bge	r16,r18,100103f4 <___vfiprintf_internal_r+0x1380>
1000fd40:	01440074 	movhi	r5,4097
1000fd44:	295fa604 	addi	r5,r5,32408
1000fd48:	d9011b17 	ldw	r4,1132(sp)
1000fd4c:	d9412615 	stw	r5,1176(sp)
1000fd50:	04c001c4 	movi	r19,7
1000fd54:	dd012117 	ldw	r20,1156(sp)
1000fd58:	dd812017 	ldw	r22,1152(sp)
1000fd5c:	00000506 	br	1000fd74 <___vfiprintf_internal_r+0xd00>
1000fd60:	21400084 	addi	r5,r4,2
1000fd64:	42000204 	addi	r8,r8,8
1000fd68:	1009883a 	mov	r4,r2
1000fd6c:	94bffc04 	addi	r18,r18,-16
1000fd70:	84800d0e 	bge	r16,r18,1000fda8 <___vfiprintf_internal_r+0xd34>
1000fd74:	18c00404 	addi	r3,r3,16
1000fd78:	20800044 	addi	r2,r4,1
1000fd7c:	47000015 	stw	fp,0(r8)
1000fd80:	44000115 	stw	r16,4(r8)
1000fd84:	d8c11c15 	stw	r3,1136(sp)
1000fd88:	d8811b15 	stw	r2,1132(sp)
1000fd8c:	98bff40e 	bge	r19,r2,1000fd60 <__alt_data_end+0xf800fd60>
1000fd90:	1800291e 	bne	r3,zero,1000fe38 <___vfiprintf_internal_r+0xdc4>
1000fd94:	94bffc04 	addi	r18,r18,-16
1000fd98:	0009883a 	mov	r4,zero
1000fd9c:	01400044 	movi	r5,1
1000fda0:	d811883a 	mov	r8,sp
1000fda4:	84bff316 	blt	r16,r18,1000fd74 <__alt_data_end+0xf800fd74>
1000fda8:	d8812617 	ldw	r2,1176(sp)
1000fdac:	1c87883a 	add	r3,r3,r18
1000fdb0:	44800115 	stw	r18,4(r8)
1000fdb4:	40800015 	stw	r2,0(r8)
1000fdb8:	d8c11c15 	stw	r3,1136(sp)
1000fdbc:	d9411b15 	stw	r5,1132(sp)
1000fdc0:	008001c4 	movi	r2,7
1000fdc4:	11400d0e 	bge	r2,r5,1000fdfc <___vfiprintf_internal_r+0xd88>
1000fdc8:	1800061e 	bne	r3,zero,1000fde4 <___vfiprintf_internal_r+0xd70>
1000fdcc:	d8c12417 	ldw	r3,1168(sp)
1000fdd0:	a8c12e16 	blt	r21,r3,1001028c <___vfiprintf_internal_r+0x1218>
1000fdd4:	d9012517 	ldw	r4,1172(sp)
1000fdd8:	2549883a 	add	r4,r4,r21
1000fddc:	d9012515 	stw	r4,1172(sp)
1000fde0:	00001206 	br	1000fe2c <___vfiprintf_internal_r+0xdb8>
1000fde4:	d9012117 	ldw	r4,1156(sp)
1000fde8:	d9412017 	ldw	r5,1152(sp)
1000fdec:	d9811a04 	addi	r6,sp,1128
1000fdf0:	000ef600 	call	1000ef60 <__sprint_r.part.0>
1000fdf4:	103fbb1e 	bne	r2,zero,1000fce4 <__alt_data_end+0xf800fce4>
1000fdf8:	d8c11c17 	ldw	r3,1136(sp)
1000fdfc:	d8812417 	ldw	r2,1168(sp)
1000fe00:	a880010e 	bge	r21,r2,1000fe08 <___vfiprintf_internal_r+0xd94>
1000fe04:	102b883a 	mov	r21,r2
1000fe08:	d9012517 	ldw	r4,1172(sp)
1000fe0c:	2549883a 	add	r4,r4,r21
1000fe10:	d9012515 	stw	r4,1172(sp)
1000fe14:	18000526 	beq	r3,zero,1000fe2c <___vfiprintf_internal_r+0xdb8>
1000fe18:	d9012117 	ldw	r4,1156(sp)
1000fe1c:	d9412017 	ldw	r5,1152(sp)
1000fe20:	d9811a04 	addi	r6,sp,1128
1000fe24:	000ef600 	call	1000ef60 <__sprint_r.part.0>
1000fe28:	103fae1e 	bne	r2,zero,1000fce4 <__alt_data_end+0xf800fce4>
1000fe2c:	d8011b15 	stw	zero,1132(sp)
1000fe30:	d811883a 	mov	r8,sp
1000fe34:	003cc706 	br	1000f154 <__alt_data_end+0xf800f154>
1000fe38:	a009883a 	mov	r4,r20
1000fe3c:	b00b883a 	mov	r5,r22
1000fe40:	d9811a04 	addi	r6,sp,1128
1000fe44:	000ef600 	call	1000ef60 <__sprint_r.part.0>
1000fe48:	103fa61e 	bne	r2,zero,1000fce4 <__alt_data_end+0xf800fce4>
1000fe4c:	d9011b17 	ldw	r4,1132(sp)
1000fe50:	d8c11c17 	ldw	r3,1136(sp)
1000fe54:	d811883a 	mov	r8,sp
1000fe58:	21400044 	addi	r5,r4,1
1000fe5c:	003fc306 	br	1000fd6c <__alt_data_end+0xf800fd6c>
1000fe60:	d9012417 	ldw	r4,1168(sp)
1000fe64:	256dc83a 	sub	r22,r4,r21
1000fe68:	05be1f0e 	bge	zero,r22,1000f6e8 <__alt_data_end+0xf800f6e8>
1000fe6c:	04c00404 	movi	r19,16
1000fe70:	9d81720e 	bge	r19,r22,1001043c <___vfiprintf_internal_r+0x13c8>
1000fe74:	00840074 	movhi	r2,4097
1000fe78:	109fa204 	addi	r2,r2,32392
1000fe7c:	d8812615 	stw	r2,1176(sp)
1000fe80:	028001c4 	movi	r10,7
1000fe84:	00000506 	br	1000fe9c <___vfiprintf_internal_r+0xe28>
1000fe88:	29000084 	addi	r4,r5,2
1000fe8c:	42000204 	addi	r8,r8,8
1000fe90:	100b883a 	mov	r5,r2
1000fe94:	b5bffc04 	addi	r22,r22,-16
1000fe98:	9d800d0e 	bge	r19,r22,1000fed0 <___vfiprintf_internal_r+0xe5c>
1000fe9c:	18c00404 	addi	r3,r3,16
1000fea0:	28800044 	addi	r2,r5,1
1000fea4:	44400015 	stw	r17,0(r8)
1000fea8:	44c00115 	stw	r19,4(r8)
1000feac:	d8c11c15 	stw	r3,1136(sp)
1000feb0:	d8811b15 	stw	r2,1132(sp)
1000feb4:	50bff40e 	bge	r10,r2,1000fe88 <__alt_data_end+0xf800fe88>
1000feb8:	1800111e 	bne	r3,zero,1000ff00 <___vfiprintf_internal_r+0xe8c>
1000febc:	b5bffc04 	addi	r22,r22,-16
1000fec0:	000b883a 	mov	r5,zero
1000fec4:	01000044 	movi	r4,1
1000fec8:	d811883a 	mov	r8,sp
1000fecc:	9dbff316 	blt	r19,r22,1000fe9c <__alt_data_end+0xf800fe9c>
1000fed0:	d9412617 	ldw	r5,1176(sp)
1000fed4:	1d87883a 	add	r3,r3,r22
1000fed8:	45800115 	stw	r22,4(r8)
1000fedc:	41400015 	stw	r5,0(r8)
1000fee0:	d8c11c15 	stw	r3,1136(sp)
1000fee4:	d9011b15 	stw	r4,1132(sp)
1000fee8:	008001c4 	movi	r2,7
1000feec:	11008516 	blt	r2,r4,10010104 <___vfiprintf_internal_r+0x1090>
1000fef0:	42000204 	addi	r8,r8,8
1000fef4:	20800044 	addi	r2,r4,1
1000fef8:	200b883a 	mov	r5,r4
1000fefc:	003dfa06 	br	1000f6e8 <__alt_data_end+0xf800f6e8>
1000ff00:	d9012117 	ldw	r4,1156(sp)
1000ff04:	d9412017 	ldw	r5,1152(sp)
1000ff08:	d9811a04 	addi	r6,sp,1128
1000ff0c:	da812a15 	stw	r10,1192(sp)
1000ff10:	000ef600 	call	1000ef60 <__sprint_r.part.0>
1000ff14:	da812a17 	ldw	r10,1192(sp)
1000ff18:	103f721e 	bne	r2,zero,1000fce4 <__alt_data_end+0xf800fce4>
1000ff1c:	d9411b17 	ldw	r5,1132(sp)
1000ff20:	d8c11c17 	ldw	r3,1136(sp)
1000ff24:	d811883a 	mov	r8,sp
1000ff28:	29000044 	addi	r4,r5,1
1000ff2c:	003fd906 	br	1000fe94 <__alt_data_end+0xf800fe94>
1000ff30:	1800681e 	bne	r3,zero,100100d4 <___vfiprintf_internal_r+0x1060>
1000ff34:	50004d26 	beq	r10,zero,1001006c <___vfiprintf_internal_r+0xff8>
1000ff38:	d8811d04 	addi	r2,sp,1140
1000ff3c:	00c00084 	movi	r3,2
1000ff40:	d8800015 	stw	r2,0(sp)
1000ff44:	d8c00115 	stw	r3,4(sp)
1000ff48:	2005883a 	mov	r2,r4
1000ff4c:	d811883a 	mov	r8,sp
1000ff50:	003de006 	br	1000f6d4 <__alt_data_end+0xf800f6d4>
1000ff54:	1800551e 	bne	r3,zero,100100ac <___vfiprintf_internal_r+0x1038>
1000ff58:	000b883a 	mov	r5,zero
1000ff5c:	00800044 	movi	r2,1
1000ff60:	d811883a 	mov	r8,sp
1000ff64:	003dde06 	br	1000f6e0 <__alt_data_end+0xf800f6e0>
1000ff68:	10803fcc 	andi	r2,r2,255
1000ff6c:	1000191e 	bne	r2,zero,1000ffd4 <___vfiprintf_internal_r+0xf60>
1000ff70:	9080004c 	andi	r2,r18,1
1000ff74:	10001726 	beq	r2,zero,1000ffd4 <___vfiprintf_internal_r+0xf60>
1000ff78:	00800c04 	movi	r2,48
1000ff7c:	d8c109c4 	addi	r3,sp,1063
1000ff80:	d88109c5 	stb	r2,1063(sp)
1000ff84:	dd012817 	ldw	r20,1184(sp)
1000ff88:	d8c12215 	stw	r3,1160(sp)
1000ff8c:	003d8a06 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
1000ff90:	d9012717 	ldw	r4,1180(sp)
1000ff94:	dd010a04 	addi	r20,sp,1064
1000ff98:	988003cc 	andi	r2,r19,15
1000ff9c:	a806973a 	slli	r3,r21,28
1000ffa0:	2085883a 	add	r2,r4,r2
1000ffa4:	9826d13a 	srli	r19,r19,4
1000ffa8:	10800003 	ldbu	r2,0(r2)
1000ffac:	a82ad13a 	srli	r21,r21,4
1000ffb0:	a53fffc4 	addi	r20,r20,-1
1000ffb4:	1ce6b03a 	or	r19,r3,r19
1000ffb8:	a0800005 	stb	r2,0(r20)
1000ffbc:	9d44b03a 	or	r2,r19,r21
1000ffc0:	103ff51e 	bne	r2,zero,1000ff98 <__alt_data_end+0xf800ff98>
1000ffc4:	d9411e17 	ldw	r5,1144(sp)
1000ffc8:	dd012215 	stw	r20,1160(sp)
1000ffcc:	2d29c83a 	sub	r20,r5,r20
1000ffd0:	003d7906 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
1000ffd4:	d8c10a04 	addi	r3,sp,1064
1000ffd8:	d8c12215 	stw	r3,1160(sp)
1000ffdc:	003d7606 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
1000ffe0:	18009e1e 	bne	r3,zero,1001025c <___vfiprintf_internal_r+0x11e8>
1000ffe4:	d8811d87 	ldb	r2,1142(sp)
1000ffe8:	10005f26 	beq	r2,zero,10010168 <___vfiprintf_internal_r+0x10f4>
1000ffec:	00c00044 	movi	r3,1
1000fff0:	d9011d84 	addi	r4,sp,1142
1000fff4:	1805883a 	mov	r2,r3
1000fff8:	d9000015 	stw	r4,0(sp)
1000fffc:	d8c00115 	stw	r3,4(sp)
10010000:	d811883a 	mov	r8,sp
10010004:	003efc06 	br	1000fbf8 <__alt_data_end+0xf800fbf8>
10010008:	d9412417 	ldw	r5,1168(sp)
1001000c:	d811883a 	mov	r8,sp
10010010:	2d65c83a 	sub	r18,r5,r21
10010014:	04bf4816 	blt	zero,r18,1000fd38 <__alt_data_end+0xf800fd38>
10010018:	003f6c06 	br	1000fdcc <__alt_data_end+0xf800fdcc>
1001001c:	b829883a 	mov	r20,r23
10010020:	003c6906 	br	1000f1c8 <__alt_data_end+0xf800f1c8>
10010024:	d9012117 	ldw	r4,1156(sp)
10010028:	d9412017 	ldw	r5,1152(sp)
1001002c:	d9811a04 	addi	r6,sp,1128
10010030:	000ef600 	call	1000ef60 <__sprint_r.part.0>
10010034:	103f2b1e 	bne	r2,zero,1000fce4 <__alt_data_end+0xf800fce4>
10010038:	d8c11c17 	ldw	r3,1136(sp)
1001003c:	d811883a 	mov	r8,sp
10010040:	003f3806 	br	1000fd24 <__alt_data_end+0xf800fd24>
10010044:	00800084 	movi	r2,2
10010048:	9d46b03a 	or	r3,r19,r21
1001004c:	003df606 	br	1000f828 <__alt_data_end+0xf800f828>
10010050:	d9012117 	ldw	r4,1156(sp)
10010054:	d9412017 	ldw	r5,1152(sp)
10010058:	d9811a04 	addi	r6,sp,1128
1001005c:	000ef600 	call	1000ef60 <__sprint_r.part.0>
10010060:	103f201e 	bne	r2,zero,1000fce4 <__alt_data_end+0xf800fce4>
10010064:	d811883a 	mov	r8,sp
10010068:	003cc606 	br	1000f384 <__alt_data_end+0xf800f384>
1001006c:	000b883a 	mov	r5,zero
10010070:	2005883a 	mov	r2,r4
10010074:	d811883a 	mov	r8,sp
10010078:	003d9906 	br	1000f6e0 <__alt_data_end+0xf800f6e0>
1001007c:	10803fcc 	andi	r2,r2,255
10010080:	1080201c 	xori	r2,r2,128
10010084:	10bfe004 	addi	r2,r2,-128
10010088:	01000c04 	movi	r4,48
1001008c:	1100b226 	beq	r2,r4,10010358 <___vfiprintf_internal_r+0x12e4>
10010090:	d9412217 	ldw	r5,1160(sp)
10010094:	d8811e17 	ldw	r2,1144(sp)
10010098:	193fffc5 	stb	r4,-1(r3)
1001009c:	297fffc4 	addi	r5,r5,-1
100100a0:	d9412215 	stw	r5,1160(sp)
100100a4:	1169c83a 	sub	r20,r2,r5
100100a8:	003d4306 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
100100ac:	d9012117 	ldw	r4,1156(sp)
100100b0:	d9412017 	ldw	r5,1152(sp)
100100b4:	d9811a04 	addi	r6,sp,1128
100100b8:	000ef600 	call	1000ef60 <__sprint_r.part.0>
100100bc:	103f091e 	bne	r2,zero,1000fce4 <__alt_data_end+0xf800fce4>
100100c0:	d9411b17 	ldw	r5,1132(sp)
100100c4:	d8c11c17 	ldw	r3,1136(sp)
100100c8:	d811883a 	mov	r8,sp
100100cc:	28800044 	addi	r2,r5,1
100100d0:	003d8306 	br	1000f6e0 <__alt_data_end+0xf800f6e0>
100100d4:	d9012117 	ldw	r4,1156(sp)
100100d8:	d9412017 	ldw	r5,1152(sp)
100100dc:	d9811a04 	addi	r6,sp,1128
100100e0:	da812a15 	stw	r10,1192(sp)
100100e4:	000ef600 	call	1000ef60 <__sprint_r.part.0>
100100e8:	da812a17 	ldw	r10,1192(sp)
100100ec:	103efd1e 	bne	r2,zero,1000fce4 <__alt_data_end+0xf800fce4>
100100f0:	d9411b17 	ldw	r5,1132(sp)
100100f4:	d8c11c17 	ldw	r3,1136(sp)
100100f8:	d811883a 	mov	r8,sp
100100fc:	28800044 	addi	r2,r5,1
10010100:	003d6a06 	br	1000f6ac <__alt_data_end+0xf800f6ac>
10010104:	1800a01e 	bne	r3,zero,10010388 <___vfiprintf_internal_r+0x1314>
10010108:	000b883a 	mov	r5,zero
1001010c:	00800044 	movi	r2,1
10010110:	d811883a 	mov	r8,sp
10010114:	003d7406 	br	1000f6e8 <__alt_data_end+0xf800f6e8>
10010118:	d9012117 	ldw	r4,1156(sp)
1001011c:	d9412017 	ldw	r5,1152(sp)
10010120:	d9811a04 	addi	r6,sp,1128
10010124:	000ef600 	call	1000ef60 <__sprint_r.part.0>
10010128:	103eee1e 	bne	r2,zero,1000fce4 <__alt_data_end+0xf800fce4>
1001012c:	d8811b17 	ldw	r2,1132(sp)
10010130:	d8c11c17 	ldw	r3,1136(sp)
10010134:	d811883a 	mov	r8,sp
10010138:	10800044 	addi	r2,r2,1
1001013c:	003d8f06 	br	1000f77c <__alt_data_end+0xf800f77c>
10010140:	04e7c83a 	sub	r19,zero,r19
10010144:	9804c03a 	cmpne	r2,r19,zero
10010148:	056bc83a 	sub	r21,zero,r21
1001014c:	a8abc83a 	sub	r21,r21,r2
10010150:	05800b44 	movi	r22,45
10010154:	dd811d85 	stb	r22,1142(sp)
10010158:	8029883a 	mov	r20,r16
1001015c:	00800044 	movi	r2,1
10010160:	9d46b03a 	or	r3,r19,r21
10010164:	003cfa06 	br	1000f550 <__alt_data_end+0xf800f550>
10010168:	000b883a 	mov	r5,zero
1001016c:	00800044 	movi	r2,1
10010170:	d811883a 	mov	r8,sp
10010174:	503d5a26 	beq	r10,zero,1000f6e0 <__alt_data_end+0xf800f6e0>
10010178:	00c00084 	movi	r3,2
1001017c:	d9011d04 	addi	r4,sp,1140
10010180:	d9000015 	stw	r4,0(sp)
10010184:	d8c00115 	stw	r3,4(sp)
10010188:	003d5206 	br	1000f6d4 <__alt_data_end+0xf800f6d4>
1001018c:	9080040c 	andi	r2,r18,16
10010190:	1000421e 	bne	r2,zero,1001029c <___vfiprintf_internal_r+0x1228>
10010194:	9480100c 	andi	r18,r18,64
10010198:	90009c26 	beq	r18,zero,1001040c <___vfiprintf_internal_r+0x1398>
1001019c:	d9412317 	ldw	r5,1164(sp)
100101a0:	d8c12517 	ldw	r3,1172(sp)
100101a4:	28800017 	ldw	r2,0(r5)
100101a8:	29400104 	addi	r5,r5,4
100101ac:	d9412315 	stw	r5,1164(sp)
100101b0:	10c0000d 	sth	r3,0(r2)
100101b4:	003be706 	br	1000f154 <__alt_data_end+0xf800f154>
100101b8:	90c0100c 	andi	r3,r18,64
100101bc:	18003e26 	beq	r3,zero,100102b8 <___vfiprintf_internal_r+0x1244>
100101c0:	d8c12317 	ldw	r3,1164(sp)
100101c4:	14c0000b 	ldhu	r19,0(r2)
100101c8:	002b883a 	mov	r21,zero
100101cc:	18c00104 	addi	r3,r3,4
100101d0:	d8c12315 	stw	r3,1164(sp)
100101d4:	003db706 	br	1000f8b4 <__alt_data_end+0xf800f8b4>
100101d8:	9080100c 	andi	r2,r18,64
100101dc:	10004c26 	beq	r2,zero,10010310 <___vfiprintf_internal_r+0x129c>
100101e0:	1cc0000f 	ldh	r19,0(r3)
100101e4:	d8812317 	ldw	r2,1164(sp)
100101e8:	982bd7fa 	srai	r21,r19,31
100101ec:	10800104 	addi	r2,r2,4
100101f0:	d8812315 	stw	r2,1164(sp)
100101f4:	a805883a 	mov	r2,r21
100101f8:	003cd006 	br	1000f53c <__alt_data_end+0xf800f53c>
100101fc:	00800084 	movi	r2,2
10010200:	003d8906 	br	1000f828 <__alt_data_end+0xf800f828>
10010204:	b9800007 	ldb	r6,0(r23)
10010208:	003bfb06 	br	1000f1f8 <__alt_data_end+0xf800f1f8>
1001020c:	9080100c 	andi	r2,r18,64
10010210:	10003726 	beq	r2,zero,100102f0 <___vfiprintf_internal_r+0x127c>
10010214:	d9412317 	ldw	r5,1164(sp)
10010218:	002b883a 	mov	r21,zero
1001021c:	0005883a 	mov	r2,zero
10010220:	2cc0000b 	ldhu	r19,0(r5)
10010224:	29400104 	addi	r5,r5,4
10010228:	d9412315 	stw	r5,1164(sp)
1001022c:	9807883a 	mov	r3,r19
10010230:	003d7d06 	br	1000f828 <__alt_data_end+0xf800f828>
10010234:	9080100c 	andi	r2,r18,64
10010238:	10002526 	beq	r2,zero,100102d0 <___vfiprintf_internal_r+0x125c>
1001023c:	d8812317 	ldw	r2,1164(sp)
10010240:	002b883a 	mov	r21,zero
10010244:	14c0000b 	ldhu	r19,0(r2)
10010248:	10800104 	addi	r2,r2,4
1001024c:	d8812315 	stw	r2,1164(sp)
10010250:	9807883a 	mov	r3,r19
10010254:	00800044 	movi	r2,1
10010258:	003d7306 	br	1000f828 <__alt_data_end+0xf800f828>
1001025c:	d9012117 	ldw	r4,1156(sp)
10010260:	d9412017 	ldw	r5,1152(sp)
10010264:	d9811a04 	addi	r6,sp,1128
10010268:	da812a15 	stw	r10,1192(sp)
1001026c:	000ef600 	call	1000ef60 <__sprint_r.part.0>
10010270:	da812a17 	ldw	r10,1192(sp)
10010274:	103e9b1e 	bne	r2,zero,1000fce4 <__alt_data_end+0xf800fce4>
10010278:	d9411b17 	ldw	r5,1132(sp)
1001027c:	d8c11c17 	ldw	r3,1136(sp)
10010280:	d811883a 	mov	r8,sp
10010284:	28800044 	addi	r2,r5,1
10010288:	003e5006 	br	1000fbcc <__alt_data_end+0xf800fbcc>
1001028c:	182b883a 	mov	r21,r3
10010290:	003ed006 	br	1000fdd4 <__alt_data_end+0xf800fdd4>
10010294:	8029883a 	mov	r20,r16
10010298:	003dc606 	br	1000f9b4 <__alt_data_end+0xf800f9b4>
1001029c:	d8c12317 	ldw	r3,1164(sp)
100102a0:	d9012517 	ldw	r4,1172(sp)
100102a4:	18800017 	ldw	r2,0(r3)
100102a8:	18c00104 	addi	r3,r3,4
100102ac:	d8c12315 	stw	r3,1164(sp)
100102b0:	11000015 	stw	r4,0(r2)
100102b4:	003ba706 	br	1000f154 <__alt_data_end+0xf800f154>
100102b8:	d9012317 	ldw	r4,1164(sp)
100102bc:	14c00017 	ldw	r19,0(r2)
100102c0:	002b883a 	mov	r21,zero
100102c4:	21000104 	addi	r4,r4,4
100102c8:	d9012315 	stw	r4,1164(sp)
100102cc:	003d7906 	br	1000f8b4 <__alt_data_end+0xf800f8b4>
100102d0:	d8c12317 	ldw	r3,1164(sp)
100102d4:	002b883a 	mov	r21,zero
100102d8:	00800044 	movi	r2,1
100102dc:	1cc00017 	ldw	r19,0(r3)
100102e0:	18c00104 	addi	r3,r3,4
100102e4:	d8c12315 	stw	r3,1164(sp)
100102e8:	9807883a 	mov	r3,r19
100102ec:	003d4e06 	br	1000f828 <__alt_data_end+0xf800f828>
100102f0:	d8812317 	ldw	r2,1164(sp)
100102f4:	002b883a 	mov	r21,zero
100102f8:	14c00017 	ldw	r19,0(r2)
100102fc:	10800104 	addi	r2,r2,4
10010300:	d8812315 	stw	r2,1164(sp)
10010304:	9807883a 	mov	r3,r19
10010308:	0005883a 	mov	r2,zero
1001030c:	003d4606 	br	1000f828 <__alt_data_end+0xf800f828>
10010310:	1cc00017 	ldw	r19,0(r3)
10010314:	d8c12317 	ldw	r3,1164(sp)
10010318:	982bd7fa 	srai	r21,r19,31
1001031c:	18c00104 	addi	r3,r3,4
10010320:	d8c12315 	stw	r3,1164(sp)
10010324:	a805883a 	mov	r2,r21
10010328:	003c8406 	br	1000f53c <__alt_data_end+0xf800f53c>
1001032c:	01040074 	movhi	r4,4097
10010330:	211fa204 	addi	r4,r4,32392
10010334:	d9012615 	stw	r4,1176(sp)
10010338:	003d0606 	br	1000f754 <__alt_data_end+0xf800f754>
1001033c:	b9800043 	ldbu	r6,1(r23)
10010340:	94800814 	ori	r18,r18,32
10010344:	bdc00044 	addi	r23,r23,1
10010348:	31803fcc 	andi	r6,r6,255
1001034c:	3180201c 	xori	r6,r6,128
10010350:	31bfe004 	addi	r6,r6,-128
10010354:	003ba806 	br	1000f1f8 <__alt_data_end+0xf800f1f8>
10010358:	d8811e17 	ldw	r2,1144(sp)
1001035c:	d8c12217 	ldw	r3,1160(sp)
10010360:	10e9c83a 	sub	r20,r2,r3
10010364:	003c9406 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
10010368:	da012a15 	stw	r8,1192(sp)
1001036c:	0007cbc0 	call	10007cbc <strlen>
10010370:	1029883a 	mov	r20,r2
10010374:	dd811d83 	ldbu	r22,1142(sp)
10010378:	dcc12315 	stw	r19,1164(sp)
1001037c:	0021883a 	mov	r16,zero
10010380:	da012a17 	ldw	r8,1192(sp)
10010384:	003c8c06 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
10010388:	d9012117 	ldw	r4,1156(sp)
1001038c:	d9412017 	ldw	r5,1152(sp)
10010390:	d9811a04 	addi	r6,sp,1128
10010394:	000ef600 	call	1000ef60 <__sprint_r.part.0>
10010398:	103e521e 	bne	r2,zero,1000fce4 <__alt_data_end+0xf800fce4>
1001039c:	d9411b17 	ldw	r5,1132(sp)
100103a0:	d8c11c17 	ldw	r3,1136(sp)
100103a4:	d811883a 	mov	r8,sp
100103a8:	28800044 	addi	r2,r5,1
100103ac:	003cce06 	br	1000f6e8 <__alt_data_end+0xf800f6e8>
100103b0:	01440074 	movhi	r5,4097
100103b4:	295fa604 	addi	r5,r5,32408
100103b8:	d9412615 	stw	r5,1176(sp)
100103bc:	d9411b17 	ldw	r5,1132(sp)
100103c0:	29400044 	addi	r5,r5,1
100103c4:	003cad06 	br	1000f67c <__alt_data_end+0xf800f67c>
100103c8:	00800184 	movi	r2,6
100103cc:	1400012e 	bgeu	r2,r16,100103d4 <___vfiprintf_internal_r+0x1360>
100103d0:	1021883a 	mov	r16,r2
100103d4:	8029883a 	mov	r20,r16
100103d8:	802b883a 	mov	r21,r16
100103dc:	80001c16 	blt	r16,zero,10010450 <___vfiprintf_internal_r+0x13dc>
100103e0:	00c40074 	movhi	r3,4097
100103e4:	18df4604 	addi	r3,r3,32024
100103e8:	dcc12315 	stw	r19,1164(sp)
100103ec:	d8c12215 	stw	r3,1160(sp)
100103f0:	003cff06 	br	1000f7f0 <__alt_data_end+0xf800f7f0>
100103f4:	d9411b17 	ldw	r5,1132(sp)
100103f8:	00840074 	movhi	r2,4097
100103fc:	109fa604 	addi	r2,r2,32408
10010400:	d8812615 	stw	r2,1176(sp)
10010404:	29400044 	addi	r5,r5,1
10010408:	003e6706 	br	1000fda8 <__alt_data_end+0xf800fda8>
1001040c:	d9012317 	ldw	r4,1164(sp)
10010410:	d9412517 	ldw	r5,1172(sp)
10010414:	20800017 	ldw	r2,0(r4)
10010418:	21000104 	addi	r4,r4,4
1001041c:	d9012315 	stw	r4,1164(sp)
10010420:	11400015 	stw	r5,0(r2)
10010424:	003b4b06 	br	1000f154 <__alt_data_end+0xf800f154>
10010428:	8029883a 	mov	r20,r16
1001042c:	dd811d83 	ldbu	r22,1142(sp)
10010430:	dcc12315 	stw	r19,1164(sp)
10010434:	0021883a 	mov	r16,zero
10010438:	003c5f06 	br	1000f5b8 <__alt_data_end+0xf800f5b8>
1001043c:	01040074 	movhi	r4,4097
10010440:	211fa204 	addi	r4,r4,32392
10010444:	d9012615 	stw	r4,1176(sp)
10010448:	1009883a 	mov	r4,r2
1001044c:	003ea006 	br	1000fed0 <__alt_data_end+0xf800fed0>
10010450:	002b883a 	mov	r21,zero
10010454:	003fe206 	br	100103e0 <__alt_data_end+0xf80103e0>
10010458:	d9412317 	ldw	r5,1164(sp)
1001045c:	b807883a 	mov	r3,r23
10010460:	102f883a 	mov	r23,r2
10010464:	2c000017 	ldw	r16,0(r5)
10010468:	29000104 	addi	r4,r5,4
1001046c:	d9012315 	stw	r4,1164(sp)
10010470:	80000416 	blt	r16,zero,10010484 <___vfiprintf_internal_r+0x1410>
10010474:	19800047 	ldb	r6,1(r3)
10010478:	003b5f06 	br	1000f1f8 <__alt_data_end+0xf800f1f8>
1001047c:	043fffc4 	movi	r16,-1
10010480:	003bef06 	br	1000f440 <__alt_data_end+0xf800f440>
10010484:	043fffc4 	movi	r16,-1
10010488:	19800047 	ldb	r6,1(r3)
1001048c:	003b5a06 	br	1000f1f8 <__alt_data_end+0xf800f1f8>
10010490:	282b883a 	mov	r21,r5
10010494:	003cc706 	br	1000f7b4 <__alt_data_end+0xf800f7b4>

10010498 <__vfiprintf_internal>:
10010498:	2007883a 	mov	r3,r4
1001049c:	010400b4 	movhi	r4,4098
100104a0:	21266304 	addi	r4,r4,-26228
100104a4:	21000017 	ldw	r4,0(r4)
100104a8:	2805883a 	mov	r2,r5
100104ac:	300f883a 	mov	r7,r6
100104b0:	180b883a 	mov	r5,r3
100104b4:	100d883a 	mov	r6,r2
100104b8:	000f0741 	jmpi	1000f074 <___vfiprintf_internal_r>

100104bc <_write_r>:
100104bc:	defffd04 	addi	sp,sp,-12
100104c0:	dc000015 	stw	r16,0(sp)
100104c4:	040400b4 	movhi	r16,4098
100104c8:	dc400115 	stw	r17,4(sp)
100104cc:	842d3404 	addi	r16,r16,-19248
100104d0:	2023883a 	mov	r17,r4
100104d4:	2809883a 	mov	r4,r5
100104d8:	300b883a 	mov	r5,r6
100104dc:	380d883a 	mov	r6,r7
100104e0:	dfc00215 	stw	ra,8(sp)
100104e4:	80000015 	stw	zero,0(r16)
100104e8:	0013b000 	call	10013b00 <write>
100104ec:	00ffffc4 	movi	r3,-1
100104f0:	10c00526 	beq	r2,r3,10010508 <_write_r+0x4c>
100104f4:	dfc00217 	ldw	ra,8(sp)
100104f8:	dc400117 	ldw	r17,4(sp)
100104fc:	dc000017 	ldw	r16,0(sp)
10010500:	dec00304 	addi	sp,sp,12
10010504:	f800283a 	ret
10010508:	80c00017 	ldw	r3,0(r16)
1001050c:	183ff926 	beq	r3,zero,100104f4 <__alt_data_end+0xf80104f4>
10010510:	88c00015 	stw	r3,0(r17)
10010514:	003ff706 	br	100104f4 <__alt_data_end+0xf80104f4>

10010518 <_close_r>:
10010518:	defffd04 	addi	sp,sp,-12
1001051c:	dc000015 	stw	r16,0(sp)
10010520:	040400b4 	movhi	r16,4098
10010524:	dc400115 	stw	r17,4(sp)
10010528:	842d3404 	addi	r16,r16,-19248
1001052c:	2023883a 	mov	r17,r4
10010530:	2809883a 	mov	r4,r5
10010534:	dfc00215 	stw	ra,8(sp)
10010538:	80000015 	stw	zero,0(r16)
1001053c:	001321c0 	call	1001321c <close>
10010540:	00ffffc4 	movi	r3,-1
10010544:	10c00526 	beq	r2,r3,1001055c <_close_r+0x44>
10010548:	dfc00217 	ldw	ra,8(sp)
1001054c:	dc400117 	ldw	r17,4(sp)
10010550:	dc000017 	ldw	r16,0(sp)
10010554:	dec00304 	addi	sp,sp,12
10010558:	f800283a 	ret
1001055c:	80c00017 	ldw	r3,0(r16)
10010560:	183ff926 	beq	r3,zero,10010548 <__alt_data_end+0xf8010548>
10010564:	88c00015 	stw	r3,0(r17)
10010568:	003ff706 	br	10010548 <__alt_data_end+0xf8010548>

1001056c <_calloc_r>:
1001056c:	defffe04 	addi	sp,sp,-8
10010570:	dc000015 	stw	r16,0(sp)
10010574:	2021883a 	mov	r16,r4
10010578:	2809883a 	mov	r4,r5
1001057c:	300b883a 	mov	r5,r6
10010580:	dfc00115 	stw	ra,4(sp)
10010584:	000586c0 	call	1000586c <__mulsi3>
10010588:	8009883a 	mov	r4,r16
1001058c:	100b883a 	mov	r5,r2
10010590:	000cbc00 	call	1000cbc0 <_malloc_r>
10010594:	1021883a 	mov	r16,r2
10010598:	10002826 	beq	r2,zero,1001063c <_calloc_r+0xd0>
1001059c:	11bfff17 	ldw	r6,-4(r2)
100105a0:	00bfff04 	movi	r2,-4
100105a4:	00c00904 	movi	r3,36
100105a8:	308c703a 	and	r6,r6,r2
100105ac:	308d883a 	add	r6,r6,r2
100105b0:	19801436 	bltu	r3,r6,10010604 <_calloc_r+0x98>
100105b4:	008004c4 	movi	r2,19
100105b8:	11800936 	bltu	r2,r6,100105e0 <_calloc_r+0x74>
100105bc:	8005883a 	mov	r2,r16
100105c0:	10000015 	stw	zero,0(r2)
100105c4:	10000115 	stw	zero,4(r2)
100105c8:	10000215 	stw	zero,8(r2)
100105cc:	8005883a 	mov	r2,r16
100105d0:	dfc00117 	ldw	ra,4(sp)
100105d4:	dc000017 	ldw	r16,0(sp)
100105d8:	dec00204 	addi	sp,sp,8
100105dc:	f800283a 	ret
100105e0:	80000015 	stw	zero,0(r16)
100105e4:	80000115 	stw	zero,4(r16)
100105e8:	008006c4 	movi	r2,27
100105ec:	11800d2e 	bgeu	r2,r6,10010624 <_calloc_r+0xb8>
100105f0:	80000215 	stw	zero,8(r16)
100105f4:	80000315 	stw	zero,12(r16)
100105f8:	30c00c26 	beq	r6,r3,1001062c <_calloc_r+0xc0>
100105fc:	80800404 	addi	r2,r16,16
10010600:	003fef06 	br	100105c0 <__alt_data_end+0xf80105c0>
10010604:	8009883a 	mov	r4,r16
10010608:	000b883a 	mov	r5,zero
1001060c:	000d5ac0 	call	1000d5ac <memset>
10010610:	8005883a 	mov	r2,r16
10010614:	dfc00117 	ldw	ra,4(sp)
10010618:	dc000017 	ldw	r16,0(sp)
1001061c:	dec00204 	addi	sp,sp,8
10010620:	f800283a 	ret
10010624:	80800204 	addi	r2,r16,8
10010628:	003fe506 	br	100105c0 <__alt_data_end+0xf80105c0>
1001062c:	80000415 	stw	zero,16(r16)
10010630:	80800604 	addi	r2,r16,24
10010634:	80000515 	stw	zero,20(r16)
10010638:	003fe106 	br	100105c0 <__alt_data_end+0xf80105c0>
1001063c:	0005883a 	mov	r2,zero
10010640:	003fe306 	br	100105d0 <__alt_data_end+0xf80105d0>

10010644 <_fclose_r>:
10010644:	28003226 	beq	r5,zero,10010710 <_fclose_r+0xcc>
10010648:	defffc04 	addi	sp,sp,-16
1001064c:	dc400115 	stw	r17,4(sp)
10010650:	2023883a 	mov	r17,r4
10010654:	dc000015 	stw	r16,0(sp)
10010658:	dfc00315 	stw	ra,12(sp)
1001065c:	dc800215 	stw	r18,8(sp)
10010660:	2821883a 	mov	r16,r5
10010664:	000bec00 	call	1000bec0 <__sfp_lock_acquire>
10010668:	88000226 	beq	r17,zero,10010674 <_fclose_r+0x30>
1001066c:	88800e17 	ldw	r2,56(r17)
10010670:	10002926 	beq	r2,zero,10010718 <_fclose_r+0xd4>
10010674:	8080030f 	ldh	r2,12(r16)
10010678:	10002226 	beq	r2,zero,10010704 <_fclose_r+0xc0>
1001067c:	8809883a 	mov	r4,r17
10010680:	800b883a 	mov	r5,r16
10010684:	000b8f40 	call	1000b8f4 <_fflush_r>
10010688:	1025883a 	mov	r18,r2
1001068c:	80800b17 	ldw	r2,44(r16)
10010690:	10000426 	beq	r2,zero,100106a4 <_fclose_r+0x60>
10010694:	81400717 	ldw	r5,28(r16)
10010698:	8809883a 	mov	r4,r17
1001069c:	103ee83a 	callr	r2
100106a0:	10002616 	blt	r2,zero,1001073c <_fclose_r+0xf8>
100106a4:	8080030b 	ldhu	r2,12(r16)
100106a8:	1080200c 	andi	r2,r2,128
100106ac:	10001f1e 	bne	r2,zero,1001072c <_fclose_r+0xe8>
100106b0:	81400c17 	ldw	r5,48(r16)
100106b4:	28000526 	beq	r5,zero,100106cc <_fclose_r+0x88>
100106b8:	80801004 	addi	r2,r16,64
100106bc:	28800226 	beq	r5,r2,100106c8 <_fclose_r+0x84>
100106c0:	8809883a 	mov	r4,r17
100106c4:	000c0240 	call	1000c024 <_free_r>
100106c8:	80000c15 	stw	zero,48(r16)
100106cc:	81401117 	ldw	r5,68(r16)
100106d0:	28000326 	beq	r5,zero,100106e0 <_fclose_r+0x9c>
100106d4:	8809883a 	mov	r4,r17
100106d8:	000c0240 	call	1000c024 <_free_r>
100106dc:	80001115 	stw	zero,68(r16)
100106e0:	8000030d 	sth	zero,12(r16)
100106e4:	000bec40 	call	1000bec4 <__sfp_lock_release>
100106e8:	9005883a 	mov	r2,r18
100106ec:	dfc00317 	ldw	ra,12(sp)
100106f0:	dc800217 	ldw	r18,8(sp)
100106f4:	dc400117 	ldw	r17,4(sp)
100106f8:	dc000017 	ldw	r16,0(sp)
100106fc:	dec00404 	addi	sp,sp,16
10010700:	f800283a 	ret
10010704:	000bec40 	call	1000bec4 <__sfp_lock_release>
10010708:	0005883a 	mov	r2,zero
1001070c:	003ff706 	br	100106ec <__alt_data_end+0xf80106ec>
10010710:	0005883a 	mov	r2,zero
10010714:	f800283a 	ret
10010718:	8809883a 	mov	r4,r17
1001071c:	000beb00 	call	1000beb0 <__sinit>
10010720:	8080030f 	ldh	r2,12(r16)
10010724:	103fd51e 	bne	r2,zero,1001067c <__alt_data_end+0xf801067c>
10010728:	003ff606 	br	10010704 <__alt_data_end+0xf8010704>
1001072c:	81400417 	ldw	r5,16(r16)
10010730:	8809883a 	mov	r4,r17
10010734:	000c0240 	call	1000c024 <_free_r>
10010738:	003fdd06 	br	100106b0 <__alt_data_end+0xf80106b0>
1001073c:	04bfffc4 	movi	r18,-1
10010740:	003fd806 	br	100106a4 <__alt_data_end+0xf80106a4>

10010744 <fclose>:
10010744:	008400b4 	movhi	r2,4098
10010748:	10a66304 	addi	r2,r2,-26228
1001074c:	200b883a 	mov	r5,r4
10010750:	11000017 	ldw	r4,0(r2)
10010754:	00106441 	jmpi	10010644 <_fclose_r>

10010758 <_fputwc_r>:
10010758:	3080030b 	ldhu	r2,12(r6)
1001075c:	defff804 	addi	sp,sp,-32
10010760:	dcc00415 	stw	r19,16(sp)
10010764:	dc800315 	stw	r18,12(sp)
10010768:	dc000115 	stw	r16,4(sp)
1001076c:	dfc00715 	stw	ra,28(sp)
10010770:	dd400615 	stw	r21,24(sp)
10010774:	dd000515 	stw	r20,20(sp)
10010778:	dc400215 	stw	r17,8(sp)
1001077c:	10c8000c 	andi	r3,r2,8192
10010780:	3021883a 	mov	r16,r6
10010784:	2027883a 	mov	r19,r4
10010788:	2825883a 	mov	r18,r5
1001078c:	1800051e 	bne	r3,zero,100107a4 <_fputwc_r+0x4c>
10010790:	30c01917 	ldw	r3,100(r6)
10010794:	10880014 	ori	r2,r2,8192
10010798:	3080030d 	sth	r2,12(r6)
1001079c:	18880014 	ori	r2,r3,8192
100107a0:	30801915 	stw	r2,100(r6)
100107a4:	000c9b00 	call	1000c9b0 <__locale_mb_cur_max>
100107a8:	00c00044 	movi	r3,1
100107ac:	10c03e26 	beq	r2,r3,100108a8 <_fputwc_r+0x150>
100107b0:	9809883a 	mov	r4,r19
100107b4:	d80b883a 	mov	r5,sp
100107b8:	900d883a 	mov	r6,r18
100107bc:	81c01704 	addi	r7,r16,92
100107c0:	0010c080 	call	10010c08 <_wcrtomb_r>
100107c4:	1029883a 	mov	r20,r2
100107c8:	00bfffc4 	movi	r2,-1
100107cc:	a0802026 	beq	r20,r2,10010850 <_fputwc_r+0xf8>
100107d0:	d9400003 	ldbu	r5,0(sp)
100107d4:	a0001c26 	beq	r20,zero,10010848 <_fputwc_r+0xf0>
100107d8:	0023883a 	mov	r17,zero
100107dc:	05400284 	movi	r21,10
100107e0:	00000906 	br	10010808 <_fputwc_r+0xb0>
100107e4:	80800017 	ldw	r2,0(r16)
100107e8:	11400005 	stb	r5,0(r2)
100107ec:	80c00017 	ldw	r3,0(r16)
100107f0:	18c00044 	addi	r3,r3,1
100107f4:	80c00015 	stw	r3,0(r16)
100107f8:	8c400044 	addi	r17,r17,1
100107fc:	dc45883a 	add	r2,sp,r17
10010800:	8d00112e 	bgeu	r17,r20,10010848 <_fputwc_r+0xf0>
10010804:	11400003 	ldbu	r5,0(r2)
10010808:	80c00217 	ldw	r3,8(r16)
1001080c:	18ffffc4 	addi	r3,r3,-1
10010810:	80c00215 	stw	r3,8(r16)
10010814:	183ff30e 	bge	r3,zero,100107e4 <__alt_data_end+0xf80107e4>
10010818:	80800617 	ldw	r2,24(r16)
1001081c:	18801916 	blt	r3,r2,10010884 <_fputwc_r+0x12c>
10010820:	80800017 	ldw	r2,0(r16)
10010824:	11400005 	stb	r5,0(r2)
10010828:	80800017 	ldw	r2,0(r16)
1001082c:	10c00003 	ldbu	r3,0(r2)
10010830:	10800044 	addi	r2,r2,1
10010834:	1d402326 	beq	r3,r21,100108c4 <_fputwc_r+0x16c>
10010838:	80800015 	stw	r2,0(r16)
1001083c:	8c400044 	addi	r17,r17,1
10010840:	dc45883a 	add	r2,sp,r17
10010844:	8d3fef36 	bltu	r17,r20,10010804 <__alt_data_end+0xf8010804>
10010848:	9005883a 	mov	r2,r18
1001084c:	00000406 	br	10010860 <_fputwc_r+0x108>
10010850:	80c0030b 	ldhu	r3,12(r16)
10010854:	a005883a 	mov	r2,r20
10010858:	18c01014 	ori	r3,r3,64
1001085c:	80c0030d 	sth	r3,12(r16)
10010860:	dfc00717 	ldw	ra,28(sp)
10010864:	dd400617 	ldw	r21,24(sp)
10010868:	dd000517 	ldw	r20,20(sp)
1001086c:	dcc00417 	ldw	r19,16(sp)
10010870:	dc800317 	ldw	r18,12(sp)
10010874:	dc400217 	ldw	r17,8(sp)
10010878:	dc000117 	ldw	r16,4(sp)
1001087c:	dec00804 	addi	sp,sp,32
10010880:	f800283a 	ret
10010884:	9809883a 	mov	r4,r19
10010888:	29403fcc 	andi	r5,r5,255
1001088c:	800d883a 	mov	r6,r16
10010890:	0010a980 	call	10010a98 <__swbuf_r>
10010894:	10bfffe0 	cmpeqi	r2,r2,-1
10010898:	10803fcc 	andi	r2,r2,255
1001089c:	103fd626 	beq	r2,zero,100107f8 <__alt_data_end+0xf80107f8>
100108a0:	00bfffc4 	movi	r2,-1
100108a4:	003fee06 	br	10010860 <__alt_data_end+0xf8010860>
100108a8:	90ffffc4 	addi	r3,r18,-1
100108ac:	01003f84 	movi	r4,254
100108b0:	20ffbf36 	bltu	r4,r3,100107b0 <__alt_data_end+0xf80107b0>
100108b4:	900b883a 	mov	r5,r18
100108b8:	dc800005 	stb	r18,0(sp)
100108bc:	1029883a 	mov	r20,r2
100108c0:	003fc506 	br	100107d8 <__alt_data_end+0xf80107d8>
100108c4:	9809883a 	mov	r4,r19
100108c8:	a80b883a 	mov	r5,r21
100108cc:	800d883a 	mov	r6,r16
100108d0:	0010a980 	call	10010a98 <__swbuf_r>
100108d4:	10bfffe0 	cmpeqi	r2,r2,-1
100108d8:	003fef06 	br	10010898 <__alt_data_end+0xf8010898>

100108dc <fputwc>:
100108dc:	defffc04 	addi	sp,sp,-16
100108e0:	dc000115 	stw	r16,4(sp)
100108e4:	040400b4 	movhi	r16,4098
100108e8:	84266304 	addi	r16,r16,-26228
100108ec:	dc400215 	stw	r17,8(sp)
100108f0:	2023883a 	mov	r17,r4
100108f4:	81000017 	ldw	r4,0(r16)
100108f8:	dfc00315 	stw	ra,12(sp)
100108fc:	280d883a 	mov	r6,r5
10010900:	20000626 	beq	r4,zero,1001091c <fputwc+0x40>
10010904:	20800e17 	ldw	r2,56(r4)
10010908:	1000041e 	bne	r2,zero,1001091c <fputwc+0x40>
1001090c:	d9400015 	stw	r5,0(sp)
10010910:	000beb00 	call	1000beb0 <__sinit>
10010914:	81000017 	ldw	r4,0(r16)
10010918:	d9800017 	ldw	r6,0(sp)
1001091c:	880b883a 	mov	r5,r17
10010920:	dfc00317 	ldw	ra,12(sp)
10010924:	dc400217 	ldw	r17,8(sp)
10010928:	dc000117 	ldw	r16,4(sp)
1001092c:	dec00404 	addi	sp,sp,16
10010930:	00107581 	jmpi	10010758 <_fputwc_r>

10010934 <_fstat_r>:
10010934:	defffd04 	addi	sp,sp,-12
10010938:	dc000015 	stw	r16,0(sp)
1001093c:	040400b4 	movhi	r16,4098
10010940:	dc400115 	stw	r17,4(sp)
10010944:	842d3404 	addi	r16,r16,-19248
10010948:	2023883a 	mov	r17,r4
1001094c:	2809883a 	mov	r4,r5
10010950:	300b883a 	mov	r5,r6
10010954:	dfc00215 	stw	ra,8(sp)
10010958:	80000015 	stw	zero,0(r16)
1001095c:	00133700 	call	10013370 <fstat>
10010960:	00ffffc4 	movi	r3,-1
10010964:	10c00526 	beq	r2,r3,1001097c <_fstat_r+0x48>
10010968:	dfc00217 	ldw	ra,8(sp)
1001096c:	dc400117 	ldw	r17,4(sp)
10010970:	dc000017 	ldw	r16,0(sp)
10010974:	dec00304 	addi	sp,sp,12
10010978:	f800283a 	ret
1001097c:	80c00017 	ldw	r3,0(r16)
10010980:	183ff926 	beq	r3,zero,10010968 <__alt_data_end+0xf8010968>
10010984:	88c00015 	stw	r3,0(r17)
10010988:	003ff706 	br	10010968 <__alt_data_end+0xf8010968>

1001098c <_isatty_r>:
1001098c:	defffd04 	addi	sp,sp,-12
10010990:	dc000015 	stw	r16,0(sp)
10010994:	040400b4 	movhi	r16,4098
10010998:	dc400115 	stw	r17,4(sp)
1001099c:	842d3404 	addi	r16,r16,-19248
100109a0:	2023883a 	mov	r17,r4
100109a4:	2809883a 	mov	r4,r5
100109a8:	dfc00215 	stw	ra,8(sp)
100109ac:	80000015 	stw	zero,0(r16)
100109b0:	00134780 	call	10013478 <isatty>
100109b4:	00ffffc4 	movi	r3,-1
100109b8:	10c00526 	beq	r2,r3,100109d0 <_isatty_r+0x44>
100109bc:	dfc00217 	ldw	ra,8(sp)
100109c0:	dc400117 	ldw	r17,4(sp)
100109c4:	dc000017 	ldw	r16,0(sp)
100109c8:	dec00304 	addi	sp,sp,12
100109cc:	f800283a 	ret
100109d0:	80c00017 	ldw	r3,0(r16)
100109d4:	183ff926 	beq	r3,zero,100109bc <__alt_data_end+0xf80109bc>
100109d8:	88c00015 	stw	r3,0(r17)
100109dc:	003ff706 	br	100109bc <__alt_data_end+0xf80109bc>

100109e0 <_lseek_r>:
100109e0:	defffd04 	addi	sp,sp,-12
100109e4:	dc000015 	stw	r16,0(sp)
100109e8:	040400b4 	movhi	r16,4098
100109ec:	dc400115 	stw	r17,4(sp)
100109f0:	842d3404 	addi	r16,r16,-19248
100109f4:	2023883a 	mov	r17,r4
100109f8:	2809883a 	mov	r4,r5
100109fc:	300b883a 	mov	r5,r6
10010a00:	380d883a 	mov	r6,r7
10010a04:	dfc00215 	stw	ra,8(sp)
10010a08:	80000015 	stw	zero,0(r16)
10010a0c:	00136600 	call	10013660 <lseek>
10010a10:	00ffffc4 	movi	r3,-1
10010a14:	10c00526 	beq	r2,r3,10010a2c <_lseek_r+0x4c>
10010a18:	dfc00217 	ldw	ra,8(sp)
10010a1c:	dc400117 	ldw	r17,4(sp)
10010a20:	dc000017 	ldw	r16,0(sp)
10010a24:	dec00304 	addi	sp,sp,12
10010a28:	f800283a 	ret
10010a2c:	80c00017 	ldw	r3,0(r16)
10010a30:	183ff926 	beq	r3,zero,10010a18 <__alt_data_end+0xf8010a18>
10010a34:	88c00015 	stw	r3,0(r17)
10010a38:	003ff706 	br	10010a18 <__alt_data_end+0xf8010a18>

10010a3c <_read_r>:
10010a3c:	defffd04 	addi	sp,sp,-12
10010a40:	dc000015 	stw	r16,0(sp)
10010a44:	040400b4 	movhi	r16,4098
10010a48:	dc400115 	stw	r17,4(sp)
10010a4c:	842d3404 	addi	r16,r16,-19248
10010a50:	2023883a 	mov	r17,r4
10010a54:	2809883a 	mov	r4,r5
10010a58:	300b883a 	mov	r5,r6
10010a5c:	380d883a 	mov	r6,r7
10010a60:	dfc00215 	stw	ra,8(sp)
10010a64:	80000015 	stw	zero,0(r16)
10010a68:	001384c0 	call	1001384c <read>
10010a6c:	00ffffc4 	movi	r3,-1
10010a70:	10c00526 	beq	r2,r3,10010a88 <_read_r+0x4c>
10010a74:	dfc00217 	ldw	ra,8(sp)
10010a78:	dc400117 	ldw	r17,4(sp)
10010a7c:	dc000017 	ldw	r16,0(sp)
10010a80:	dec00304 	addi	sp,sp,12
10010a84:	f800283a 	ret
10010a88:	80c00017 	ldw	r3,0(r16)
10010a8c:	183ff926 	beq	r3,zero,10010a74 <__alt_data_end+0xf8010a74>
10010a90:	88c00015 	stw	r3,0(r17)
10010a94:	003ff706 	br	10010a74 <__alt_data_end+0xf8010a74>

10010a98 <__swbuf_r>:
10010a98:	defffc04 	addi	sp,sp,-16
10010a9c:	dc800215 	stw	r18,8(sp)
10010aa0:	dc400115 	stw	r17,4(sp)
10010aa4:	dc000015 	stw	r16,0(sp)
10010aa8:	dfc00315 	stw	ra,12(sp)
10010aac:	2025883a 	mov	r18,r4
10010ab0:	2823883a 	mov	r17,r5
10010ab4:	3021883a 	mov	r16,r6
10010ab8:	20000226 	beq	r4,zero,10010ac4 <__swbuf_r+0x2c>
10010abc:	20800e17 	ldw	r2,56(r4)
10010ac0:	10004126 	beq	r2,zero,10010bc8 <__swbuf_r+0x130>
10010ac4:	80c00617 	ldw	r3,24(r16)
10010ac8:	8180030b 	ldhu	r6,12(r16)
10010acc:	80c00215 	stw	r3,8(r16)
10010ad0:	30c0020c 	andi	r3,r6,8
10010ad4:	18003526 	beq	r3,zero,10010bac <__swbuf_r+0x114>
10010ad8:	80c00417 	ldw	r3,16(r16)
10010adc:	18003326 	beq	r3,zero,10010bac <__swbuf_r+0x114>
10010ae0:	3088000c 	andi	r2,r6,8192
10010ae4:	8c403fcc 	andi	r17,r17,255
10010ae8:	10001726 	beq	r2,zero,10010b48 <__swbuf_r+0xb0>
10010aec:	80800017 	ldw	r2,0(r16)
10010af0:	81000517 	ldw	r4,20(r16)
10010af4:	10c7c83a 	sub	r3,r2,r3
10010af8:	19001d0e 	bge	r3,r4,10010b70 <__swbuf_r+0xd8>
10010afc:	18c00044 	addi	r3,r3,1
10010b00:	81400217 	ldw	r5,8(r16)
10010b04:	11000044 	addi	r4,r2,1
10010b08:	81000015 	stw	r4,0(r16)
10010b0c:	297fffc4 	addi	r5,r5,-1
10010b10:	81400215 	stw	r5,8(r16)
10010b14:	14400005 	stb	r17,0(r2)
10010b18:	80800517 	ldw	r2,20(r16)
10010b1c:	10c01d26 	beq	r2,r3,10010b94 <__swbuf_r+0xfc>
10010b20:	8080030b 	ldhu	r2,12(r16)
10010b24:	1080004c 	andi	r2,r2,1
10010b28:	1000181e 	bne	r2,zero,10010b8c <__swbuf_r+0xf4>
10010b2c:	8805883a 	mov	r2,r17
10010b30:	dfc00317 	ldw	ra,12(sp)
10010b34:	dc800217 	ldw	r18,8(sp)
10010b38:	dc400117 	ldw	r17,4(sp)
10010b3c:	dc000017 	ldw	r16,0(sp)
10010b40:	dec00404 	addi	sp,sp,16
10010b44:	f800283a 	ret
10010b48:	81001917 	ldw	r4,100(r16)
10010b4c:	00b7ffc4 	movi	r2,-8193
10010b50:	31880014 	ori	r6,r6,8192
10010b54:	2084703a 	and	r2,r4,r2
10010b58:	80801915 	stw	r2,100(r16)
10010b5c:	80800017 	ldw	r2,0(r16)
10010b60:	81000517 	ldw	r4,20(r16)
10010b64:	8180030d 	sth	r6,12(r16)
10010b68:	10c7c83a 	sub	r3,r2,r3
10010b6c:	193fe316 	blt	r3,r4,10010afc <__alt_data_end+0xf8010afc>
10010b70:	9009883a 	mov	r4,r18
10010b74:	800b883a 	mov	r5,r16
10010b78:	000b8f40 	call	1000b8f4 <_fflush_r>
10010b7c:	1000091e 	bne	r2,zero,10010ba4 <__swbuf_r+0x10c>
10010b80:	80800017 	ldw	r2,0(r16)
10010b84:	00c00044 	movi	r3,1
10010b88:	003fdd06 	br	10010b00 <__alt_data_end+0xf8010b00>
10010b8c:	00800284 	movi	r2,10
10010b90:	88bfe61e 	bne	r17,r2,10010b2c <__alt_data_end+0xf8010b2c>
10010b94:	9009883a 	mov	r4,r18
10010b98:	800b883a 	mov	r5,r16
10010b9c:	000b8f40 	call	1000b8f4 <_fflush_r>
10010ba0:	103fe226 	beq	r2,zero,10010b2c <__alt_data_end+0xf8010b2c>
10010ba4:	00bfffc4 	movi	r2,-1
10010ba8:	003fe106 	br	10010b30 <__alt_data_end+0xf8010b30>
10010bac:	9009883a 	mov	r4,r18
10010bb0:	800b883a 	mov	r5,r16
10010bb4:	0009e740 	call	10009e74 <__swsetup_r>
10010bb8:	1000051e 	bne	r2,zero,10010bd0 <__swbuf_r+0x138>
10010bbc:	8180030b 	ldhu	r6,12(r16)
10010bc0:	80c00417 	ldw	r3,16(r16)
10010bc4:	003fc606 	br	10010ae0 <__alt_data_end+0xf8010ae0>
10010bc8:	000beb00 	call	1000beb0 <__sinit>
10010bcc:	003fbd06 	br	10010ac4 <__alt_data_end+0xf8010ac4>
10010bd0:	80c0030b 	ldhu	r3,12(r16)
10010bd4:	00bfffc4 	movi	r2,-1
10010bd8:	18c01014 	ori	r3,r3,64
10010bdc:	80c0030d 	sth	r3,12(r16)
10010be0:	00c00244 	movi	r3,9
10010be4:	90c00015 	stw	r3,0(r18)
10010be8:	003fd106 	br	10010b30 <__alt_data_end+0xf8010b30>

10010bec <__swbuf>:
10010bec:	00c400b4 	movhi	r3,4098
10010bf0:	18e66304 	addi	r3,r3,-26228
10010bf4:	2005883a 	mov	r2,r4
10010bf8:	19000017 	ldw	r4,0(r3)
10010bfc:	280d883a 	mov	r6,r5
10010c00:	100b883a 	mov	r5,r2
10010c04:	0010a981 	jmpi	10010a98 <__swbuf_r>

10010c08 <_wcrtomb_r>:
10010c08:	defff604 	addi	sp,sp,-40
10010c0c:	008400b4 	movhi	r2,4098
10010c10:	dc800815 	stw	r18,32(sp)
10010c14:	dc400715 	stw	r17,28(sp)
10010c18:	dc000615 	stw	r16,24(sp)
10010c1c:	10a66704 	addi	r2,r2,-26212
10010c20:	dfc00915 	stw	ra,36(sp)
10010c24:	2021883a 	mov	r16,r4
10010c28:	3823883a 	mov	r17,r7
10010c2c:	14800017 	ldw	r18,0(r2)
10010c30:	28001426 	beq	r5,zero,10010c84 <_wcrtomb_r+0x7c>
10010c34:	d9400415 	stw	r5,16(sp)
10010c38:	d9800515 	stw	r6,20(sp)
10010c3c:	000c9a40 	call	1000c9a4 <__locale_charset>
10010c40:	d9400417 	ldw	r5,16(sp)
10010c44:	d9800517 	ldw	r6,20(sp)
10010c48:	8009883a 	mov	r4,r16
10010c4c:	dc400015 	stw	r17,0(sp)
10010c50:	100f883a 	mov	r7,r2
10010c54:	903ee83a 	callr	r18
10010c58:	00ffffc4 	movi	r3,-1
10010c5c:	10c0031e 	bne	r2,r3,10010c6c <_wcrtomb_r+0x64>
10010c60:	88000015 	stw	zero,0(r17)
10010c64:	00c02284 	movi	r3,138
10010c68:	80c00015 	stw	r3,0(r16)
10010c6c:	dfc00917 	ldw	ra,36(sp)
10010c70:	dc800817 	ldw	r18,32(sp)
10010c74:	dc400717 	ldw	r17,28(sp)
10010c78:	dc000617 	ldw	r16,24(sp)
10010c7c:	dec00a04 	addi	sp,sp,40
10010c80:	f800283a 	ret
10010c84:	000c9a40 	call	1000c9a4 <__locale_charset>
10010c88:	8009883a 	mov	r4,r16
10010c8c:	dc400015 	stw	r17,0(sp)
10010c90:	d9400104 	addi	r5,sp,4
10010c94:	000d883a 	mov	r6,zero
10010c98:	100f883a 	mov	r7,r2
10010c9c:	903ee83a 	callr	r18
10010ca0:	003fed06 	br	10010c58 <__alt_data_end+0xf8010c58>

10010ca4 <wcrtomb>:
10010ca4:	defff504 	addi	sp,sp,-44
10010ca8:	dc400515 	stw	r17,20(sp)
10010cac:	dc000415 	stw	r16,16(sp)
10010cb0:	dfc00a15 	stw	ra,40(sp)
10010cb4:	dd400915 	stw	r21,36(sp)
10010cb8:	dd000815 	stw	r20,32(sp)
10010cbc:	dcc00715 	stw	r19,28(sp)
10010cc0:	dc800615 	stw	r18,24(sp)
10010cc4:	2021883a 	mov	r16,r4
10010cc8:	3023883a 	mov	r17,r6
10010ccc:	20001d26 	beq	r4,zero,10010d44 <wcrtomb+0xa0>
10010cd0:	048400b4 	movhi	r18,4098
10010cd4:	94a66304 	addi	r18,r18,-26228
10010cd8:	008400b4 	movhi	r2,4098
10010cdc:	95400017 	ldw	r21,0(r18)
10010ce0:	10a66704 	addi	r2,r2,-26212
10010ce4:	15000017 	ldw	r20,0(r2)
10010ce8:	2827883a 	mov	r19,r5
10010cec:	000c9a40 	call	1000c9a4 <__locale_charset>
10010cf0:	a809883a 	mov	r4,r21
10010cf4:	dc400015 	stw	r17,0(sp)
10010cf8:	800b883a 	mov	r5,r16
10010cfc:	980d883a 	mov	r6,r19
10010d00:	100f883a 	mov	r7,r2
10010d04:	a03ee83a 	callr	r20
10010d08:	00ffffc4 	movi	r3,-1
10010d0c:	10c0041e 	bne	r2,r3,10010d20 <wcrtomb+0x7c>
10010d10:	90c00017 	ldw	r3,0(r18)
10010d14:	01002284 	movi	r4,138
10010d18:	88000015 	stw	zero,0(r17)
10010d1c:	19000015 	stw	r4,0(r3)
10010d20:	dfc00a17 	ldw	ra,40(sp)
10010d24:	dd400917 	ldw	r21,36(sp)
10010d28:	dd000817 	ldw	r20,32(sp)
10010d2c:	dcc00717 	ldw	r19,28(sp)
10010d30:	dc800617 	ldw	r18,24(sp)
10010d34:	dc400517 	ldw	r17,20(sp)
10010d38:	dc000417 	ldw	r16,16(sp)
10010d3c:	dec00b04 	addi	sp,sp,44
10010d40:	f800283a 	ret
10010d44:	048400b4 	movhi	r18,4098
10010d48:	94a66304 	addi	r18,r18,-26228
10010d4c:	008400b4 	movhi	r2,4098
10010d50:	94c00017 	ldw	r19,0(r18)
10010d54:	10a66704 	addi	r2,r2,-26212
10010d58:	14000017 	ldw	r16,0(r2)
10010d5c:	000c9a40 	call	1000c9a4 <__locale_charset>
10010d60:	9809883a 	mov	r4,r19
10010d64:	dc400015 	stw	r17,0(sp)
10010d68:	d9400104 	addi	r5,sp,4
10010d6c:	000d883a 	mov	r6,zero
10010d70:	100f883a 	mov	r7,r2
10010d74:	803ee83a 	callr	r16
10010d78:	003fe306 	br	10010d08 <__alt_data_end+0xf8010d08>

10010d7c <__ascii_wctomb>:
10010d7c:	28000526 	beq	r5,zero,10010d94 <__ascii_wctomb+0x18>
10010d80:	00803fc4 	movi	r2,255
10010d84:	11800536 	bltu	r2,r6,10010d9c <__ascii_wctomb+0x20>
10010d88:	29800005 	stb	r6,0(r5)
10010d8c:	00800044 	movi	r2,1
10010d90:	f800283a 	ret
10010d94:	0005883a 	mov	r2,zero
10010d98:	f800283a 	ret
10010d9c:	00802284 	movi	r2,138
10010da0:	20800015 	stw	r2,0(r4)
10010da4:	00bfffc4 	movi	r2,-1
10010da8:	f800283a 	ret

10010dac <_wctomb_r>:
10010dac:	008400b4 	movhi	r2,4098
10010db0:	defff904 	addi	sp,sp,-28
10010db4:	10a66704 	addi	r2,r2,-26212
10010db8:	dfc00615 	stw	ra,24(sp)
10010dbc:	dc400515 	stw	r17,20(sp)
10010dc0:	dc000415 	stw	r16,16(sp)
10010dc4:	3823883a 	mov	r17,r7
10010dc8:	14000017 	ldw	r16,0(r2)
10010dcc:	d9000115 	stw	r4,4(sp)
10010dd0:	d9400215 	stw	r5,8(sp)
10010dd4:	d9800315 	stw	r6,12(sp)
10010dd8:	000c9a40 	call	1000c9a4 <__locale_charset>
10010ddc:	d9000117 	ldw	r4,4(sp)
10010de0:	d9400217 	ldw	r5,8(sp)
10010de4:	d9800317 	ldw	r6,12(sp)
10010de8:	dc400015 	stw	r17,0(sp)
10010dec:	100f883a 	mov	r7,r2
10010df0:	803ee83a 	callr	r16
10010df4:	dfc00617 	ldw	ra,24(sp)
10010df8:	dc400517 	ldw	r17,20(sp)
10010dfc:	dc000417 	ldw	r16,16(sp)
10010e00:	dec00704 	addi	sp,sp,28
10010e04:	f800283a 	ret

10010e08 <__muldi3>:
10010e08:	defff604 	addi	sp,sp,-40
10010e0c:	dd800615 	stw	r22,24(sp)
10010e10:	dd400515 	stw	r21,20(sp)
10010e14:	25bfffcc 	andi	r22,r4,65535
10010e18:	357fffcc 	andi	r21,r6,65535
10010e1c:	dc400115 	stw	r17,4(sp)
10010e20:	2022d43a 	srli	r17,r4,16
10010e24:	dcc00315 	stw	r19,12(sp)
10010e28:	dc800215 	stw	r18,8(sp)
10010e2c:	2027883a 	mov	r19,r4
10010e30:	2825883a 	mov	r18,r5
10010e34:	a809883a 	mov	r4,r21
10010e38:	b00b883a 	mov	r5,r22
10010e3c:	dfc00915 	stw	ra,36(sp)
10010e40:	df000815 	stw	fp,32(sp)
10010e44:	ddc00715 	stw	r23,28(sp)
10010e48:	3839883a 	mov	fp,r7
10010e4c:	302ed43a 	srli	r23,r6,16
10010e50:	dd000415 	stw	r20,16(sp)
10010e54:	dc000015 	stw	r16,0(sp)
10010e58:	3029883a 	mov	r20,r6
10010e5c:	000586c0 	call	1000586c <__mulsi3>
10010e60:	a809883a 	mov	r4,r21
10010e64:	880b883a 	mov	r5,r17
10010e68:	1021883a 	mov	r16,r2
10010e6c:	000586c0 	call	1000586c <__mulsi3>
10010e70:	880b883a 	mov	r5,r17
10010e74:	b809883a 	mov	r4,r23
10010e78:	102b883a 	mov	r21,r2
10010e7c:	000586c0 	call	1000586c <__mulsi3>
10010e80:	b809883a 	mov	r4,r23
10010e84:	b00b883a 	mov	r5,r22
10010e88:	1023883a 	mov	r17,r2
10010e8c:	000586c0 	call	1000586c <__mulsi3>
10010e90:	8012d43a 	srli	r9,r16,16
10010e94:	a885883a 	add	r2,r21,r2
10010e98:	1251883a 	add	r8,r2,r9
10010e9c:	4540022e 	bgeu	r8,r21,10010ea8 <__muldi3+0xa0>
10010ea0:	00800074 	movhi	r2,1
10010ea4:	88a3883a 	add	r17,r17,r2
10010ea8:	4006d43a 	srli	r3,r8,16
10010eac:	4010943a 	slli	r8,r8,16
10010eb0:	9809883a 	mov	r4,r19
10010eb4:	e00b883a 	mov	r5,fp
10010eb8:	843fffcc 	andi	r16,r16,65535
10010ebc:	88e3883a 	add	r17,r17,r3
10010ec0:	4421883a 	add	r16,r8,r16
10010ec4:	000586c0 	call	1000586c <__mulsi3>
10010ec8:	a009883a 	mov	r4,r20
10010ecc:	900b883a 	mov	r5,r18
10010ed0:	1027883a 	mov	r19,r2
10010ed4:	000586c0 	call	1000586c <__mulsi3>
10010ed8:	9885883a 	add	r2,r19,r2
10010edc:	1447883a 	add	r3,r2,r17
10010ee0:	8005883a 	mov	r2,r16
10010ee4:	dfc00917 	ldw	ra,36(sp)
10010ee8:	df000817 	ldw	fp,32(sp)
10010eec:	ddc00717 	ldw	r23,28(sp)
10010ef0:	dd800617 	ldw	r22,24(sp)
10010ef4:	dd400517 	ldw	r21,20(sp)
10010ef8:	dd000417 	ldw	r20,16(sp)
10010efc:	dcc00317 	ldw	r19,12(sp)
10010f00:	dc800217 	ldw	r18,8(sp)
10010f04:	dc400117 	ldw	r17,4(sp)
10010f08:	dc000017 	ldw	r16,0(sp)
10010f0c:	dec00a04 	addi	sp,sp,40
10010f10:	f800283a 	ret

10010f14 <__udivdi3>:
10010f14:	defff504 	addi	sp,sp,-44
10010f18:	dcc00415 	stw	r19,16(sp)
10010f1c:	dc000115 	stw	r16,4(sp)
10010f20:	dfc00a15 	stw	ra,40(sp)
10010f24:	df000915 	stw	fp,36(sp)
10010f28:	ddc00815 	stw	r23,32(sp)
10010f2c:	dd800715 	stw	r22,28(sp)
10010f30:	dd400615 	stw	r21,24(sp)
10010f34:	dd000515 	stw	r20,20(sp)
10010f38:	dc800315 	stw	r18,12(sp)
10010f3c:	dc400215 	stw	r17,8(sp)
10010f40:	2027883a 	mov	r19,r4
10010f44:	2821883a 	mov	r16,r5
10010f48:	3800471e 	bne	r7,zero,10011068 <__udivdi3+0x154>
10010f4c:	3025883a 	mov	r18,r6
10010f50:	2023883a 	mov	r17,r4
10010f54:	2980592e 	bgeu	r5,r6,100110bc <__udivdi3+0x1a8>
10010f58:	00bfffd4 	movui	r2,65535
10010f5c:	2829883a 	mov	r20,r5
10010f60:	1180b236 	bltu	r2,r6,1001122c <__udivdi3+0x318>
10010f64:	00803fc4 	movi	r2,255
10010f68:	1181622e 	bgeu	r2,r6,100114f4 <__udivdi3+0x5e0>
10010f6c:	00800204 	movi	r2,8
10010f70:	1007883a 	mov	r3,r2
10010f74:	3084d83a 	srl	r2,r6,r2
10010f78:	01040074 	movhi	r4,4097
10010f7c:	211ef704 	addi	r4,r4,31708
10010f80:	2085883a 	add	r2,r4,r2
10010f84:	11000003 	ldbu	r4,0(r2)
10010f88:	20c9883a 	add	r4,r4,r3
10010f8c:	00c00804 	movi	r3,32
10010f90:	1907c83a 	sub	r3,r3,r4
10010f94:	18000526 	beq	r3,zero,10010fac <__udivdi3+0x98>
10010f98:	80e0983a 	sll	r16,r16,r3
10010f9c:	9908d83a 	srl	r4,r19,r4
10010fa0:	30e4983a 	sll	r18,r6,r3
10010fa4:	98e2983a 	sll	r17,r19,r3
10010fa8:	8128b03a 	or	r20,r16,r4
10010fac:	902ad43a 	srli	r21,r18,16
10010fb0:	a009883a 	mov	r4,r20
10010fb4:	95bfffcc 	andi	r22,r18,65535
10010fb8:	a80b883a 	mov	r5,r21
10010fbc:	00058640 	call	10005864 <__umodsi3>
10010fc0:	a009883a 	mov	r4,r20
10010fc4:	a80b883a 	mov	r5,r21
10010fc8:	102f883a 	mov	r23,r2
10010fcc:	000585c0 	call	1000585c <__udivsi3>
10010fd0:	1009883a 	mov	r4,r2
10010fd4:	b00b883a 	mov	r5,r22
10010fd8:	1021883a 	mov	r16,r2
10010fdc:	000586c0 	call	1000586c <__mulsi3>
10010fe0:	b82e943a 	slli	r23,r23,16
10010fe4:	8808d43a 	srli	r4,r17,16
10010fe8:	b906b03a 	or	r3,r23,r4
10010fec:	1880052e 	bgeu	r3,r2,10011004 <__udivdi3+0xf0>
10010ff0:	1c87883a 	add	r3,r3,r18
10010ff4:	813fffc4 	addi	r4,r16,-1
10010ff8:	1c800136 	bltu	r3,r18,10011000 <__udivdi3+0xec>
10010ffc:	18815236 	bltu	r3,r2,10011548 <__udivdi3+0x634>
10011000:	2021883a 	mov	r16,r4
10011004:	18a7c83a 	sub	r19,r3,r2
10011008:	9809883a 	mov	r4,r19
1001100c:	a80b883a 	mov	r5,r21
10011010:	00058640 	call	10005864 <__umodsi3>
10011014:	1029883a 	mov	r20,r2
10011018:	9809883a 	mov	r4,r19
1001101c:	a80b883a 	mov	r5,r21
10011020:	a028943a 	slli	r20,r20,16
10011024:	000585c0 	call	1000585c <__udivsi3>
10011028:	1009883a 	mov	r4,r2
1001102c:	b00b883a 	mov	r5,r22
10011030:	8c7fffcc 	andi	r17,r17,65535
10011034:	1027883a 	mov	r19,r2
10011038:	a462b03a 	or	r17,r20,r17
1001103c:	000586c0 	call	1000586c <__mulsi3>
10011040:	8880052e 	bgeu	r17,r2,10011058 <__udivdi3+0x144>
10011044:	8ca3883a 	add	r17,r17,r18
10011048:	98ffffc4 	addi	r3,r19,-1
1001104c:	8c811036 	bltu	r17,r18,10011490 <__udivdi3+0x57c>
10011050:	88810f2e 	bgeu	r17,r2,10011490 <__udivdi3+0x57c>
10011054:	9cffff84 	addi	r19,r19,-2
10011058:	8020943a 	slli	r16,r16,16
1001105c:	0007883a 	mov	r3,zero
10011060:	9c04b03a 	or	r2,r19,r16
10011064:	00006006 	br	100111e8 <__udivdi3+0x2d4>
10011068:	29c05d36 	bltu	r5,r7,100111e0 <__udivdi3+0x2cc>
1001106c:	00bfffd4 	movui	r2,65535
10011070:	11c0692e 	bgeu	r2,r7,10011218 <__udivdi3+0x304>
10011074:	00804034 	movhi	r2,256
10011078:	10bfffc4 	addi	r2,r2,-1
1001107c:	11c10e2e 	bgeu	r2,r7,100114b8 <__udivdi3+0x5a4>
10011080:	01400604 	movi	r5,24
10011084:	2811883a 	mov	r8,r5
10011088:	394ad83a 	srl	r5,r7,r5
1001108c:	00840074 	movhi	r2,4097
10011090:	109ef704 	addi	r2,r2,31708
10011094:	114b883a 	add	r5,r2,r5
10011098:	29400003 	ldbu	r5,0(r5)
1001109c:	00c00804 	movi	r3,32
100110a0:	2a0b883a 	add	r5,r5,r8
100110a4:	196fc83a 	sub	r23,r3,r5
100110a8:	b8006b1e 	bne	r23,zero,10011258 <__udivdi3+0x344>
100110ac:	3c011436 	bltu	r7,r16,10011500 <__udivdi3+0x5ec>
100110b0:	9985403a 	cmpgeu	r2,r19,r6
100110b4:	0007883a 	mov	r3,zero
100110b8:	00004b06 	br	100111e8 <__udivdi3+0x2d4>
100110bc:	3000041e 	bne	r6,zero,100110d0 <__udivdi3+0x1bc>
100110c0:	01000044 	movi	r4,1
100110c4:	000b883a 	mov	r5,zero
100110c8:	000585c0 	call	1000585c <__udivsi3>
100110cc:	1025883a 	mov	r18,r2
100110d0:	00bfffd4 	movui	r2,65535
100110d4:	14805b2e 	bgeu	r2,r18,10011244 <__udivdi3+0x330>
100110d8:	00804034 	movhi	r2,256
100110dc:	10bfffc4 	addi	r2,r2,-1
100110e0:	1480fe2e 	bgeu	r2,r18,100114dc <__udivdi3+0x5c8>
100110e4:	00800604 	movi	r2,24
100110e8:	1007883a 	mov	r3,r2
100110ec:	9084d83a 	srl	r2,r18,r2
100110f0:	01040074 	movhi	r4,4097
100110f4:	211ef704 	addi	r4,r4,31708
100110f8:	2085883a 	add	r2,r4,r2
100110fc:	11800003 	ldbu	r6,0(r2)
10011100:	01c00804 	movi	r7,32
10011104:	30c7883a 	add	r3,r6,r3
10011108:	38cfc83a 	sub	r7,r7,r3
1001110c:	3800a71e 	bne	r7,zero,100113ac <__udivdi3+0x498>
10011110:	9028d43a 	srli	r20,r18,16
10011114:	84a1c83a 	sub	r16,r16,r18
10011118:	957fffcc 	andi	r21,r18,65535
1001111c:	00c00044 	movi	r3,1
10011120:	8009883a 	mov	r4,r16
10011124:	a00b883a 	mov	r5,r20
10011128:	d8c00015 	stw	r3,0(sp)
1001112c:	00058640 	call	10005864 <__umodsi3>
10011130:	8009883a 	mov	r4,r16
10011134:	a00b883a 	mov	r5,r20
10011138:	102d883a 	mov	r22,r2
1001113c:	000585c0 	call	1000585c <__udivsi3>
10011140:	1009883a 	mov	r4,r2
10011144:	a80b883a 	mov	r5,r21
10011148:	1021883a 	mov	r16,r2
1001114c:	000586c0 	call	1000586c <__mulsi3>
10011150:	b02c943a 	slli	r22,r22,16
10011154:	880ed43a 	srli	r7,r17,16
10011158:	d8c00017 	ldw	r3,0(sp)
1001115c:	b1ccb03a 	or	r6,r22,r7
10011160:	3080052e 	bgeu	r6,r2,10011178 <__udivdi3+0x264>
10011164:	348d883a 	add	r6,r6,r18
10011168:	813fffc4 	addi	r4,r16,-1
1001116c:	34800136 	bltu	r6,r18,10011174 <__udivdi3+0x260>
10011170:	3080f236 	bltu	r6,r2,1001153c <__udivdi3+0x628>
10011174:	2021883a 	mov	r16,r4
10011178:	30a7c83a 	sub	r19,r6,r2
1001117c:	9809883a 	mov	r4,r19
10011180:	a00b883a 	mov	r5,r20
10011184:	d8c00015 	stw	r3,0(sp)
10011188:	00058640 	call	10005864 <__umodsi3>
1001118c:	102d883a 	mov	r22,r2
10011190:	9809883a 	mov	r4,r19
10011194:	a00b883a 	mov	r5,r20
10011198:	b02c943a 	slli	r22,r22,16
1001119c:	000585c0 	call	1000585c <__udivsi3>
100111a0:	1009883a 	mov	r4,r2
100111a4:	a80b883a 	mov	r5,r21
100111a8:	8c7fffcc 	andi	r17,r17,65535
100111ac:	1027883a 	mov	r19,r2
100111b0:	b462b03a 	or	r17,r22,r17
100111b4:	000586c0 	call	1000586c <__mulsi3>
100111b8:	d8c00017 	ldw	r3,0(sp)
100111bc:	8880052e 	bgeu	r17,r2,100111d4 <__udivdi3+0x2c0>
100111c0:	8ca3883a 	add	r17,r17,r18
100111c4:	993fffc4 	addi	r4,r19,-1
100111c8:	8c80af36 	bltu	r17,r18,10011488 <__udivdi3+0x574>
100111cc:	8880ae2e 	bgeu	r17,r2,10011488 <__udivdi3+0x574>
100111d0:	9cffff84 	addi	r19,r19,-2
100111d4:	8020943a 	slli	r16,r16,16
100111d8:	9c04b03a 	or	r2,r19,r16
100111dc:	00000206 	br	100111e8 <__udivdi3+0x2d4>
100111e0:	0007883a 	mov	r3,zero
100111e4:	0005883a 	mov	r2,zero
100111e8:	dfc00a17 	ldw	ra,40(sp)
100111ec:	df000917 	ldw	fp,36(sp)
100111f0:	ddc00817 	ldw	r23,32(sp)
100111f4:	dd800717 	ldw	r22,28(sp)
100111f8:	dd400617 	ldw	r21,24(sp)
100111fc:	dd000517 	ldw	r20,20(sp)
10011200:	dcc00417 	ldw	r19,16(sp)
10011204:	dc800317 	ldw	r18,12(sp)
10011208:	dc400217 	ldw	r17,8(sp)
1001120c:	dc000117 	ldw	r16,4(sp)
10011210:	dec00b04 	addi	sp,sp,44
10011214:	f800283a 	ret
10011218:	00803fc4 	movi	r2,255
1001121c:	11c0a92e 	bgeu	r2,r7,100114c4 <__udivdi3+0x5b0>
10011220:	01400204 	movi	r5,8
10011224:	2811883a 	mov	r8,r5
10011228:	003f9706 	br	10011088 <__alt_data_end+0xf8011088>
1001122c:	00804034 	movhi	r2,256
10011230:	10bfffc4 	addi	r2,r2,-1
10011234:	1180a62e 	bgeu	r2,r6,100114d0 <__udivdi3+0x5bc>
10011238:	00800604 	movi	r2,24
1001123c:	1007883a 	mov	r3,r2
10011240:	003f4c06 	br	10010f74 <__alt_data_end+0xf8010f74>
10011244:	00803fc4 	movi	r2,255
10011248:	1480a72e 	bgeu	r2,r18,100114e8 <__udivdi3+0x5d4>
1001124c:	00800204 	movi	r2,8
10011250:	1007883a 	mov	r3,r2
10011254:	003fa506 	br	100110ec <__alt_data_end+0xf80110ec>
10011258:	3178d83a 	srl	fp,r6,r5
1001125c:	3dce983a 	sll	r7,r7,r23
10011260:	8168d83a 	srl	r20,r16,r5
10011264:	9950d83a 	srl	r8,r19,r5
10011268:	3f38b03a 	or	fp,r7,fp
1001126c:	e024d43a 	srli	r18,fp,16
10011270:	85e0983a 	sll	r16,r16,r23
10011274:	a009883a 	mov	r4,r20
10011278:	900b883a 	mov	r5,r18
1001127c:	8220b03a 	or	r16,r16,r8
10011280:	35ea983a 	sll	r21,r6,r23
10011284:	00058640 	call	10005864 <__umodsi3>
10011288:	a009883a 	mov	r4,r20
1001128c:	900b883a 	mov	r5,r18
10011290:	1023883a 	mov	r17,r2
10011294:	e5bfffcc 	andi	r22,fp,65535
10011298:	000585c0 	call	1000585c <__udivsi3>
1001129c:	1009883a 	mov	r4,r2
100112a0:	b00b883a 	mov	r5,r22
100112a4:	1029883a 	mov	r20,r2
100112a8:	000586c0 	call	1000586c <__mulsi3>
100112ac:	8806943a 	slli	r3,r17,16
100112b0:	8014d43a 	srli	r10,r16,16
100112b4:	1a92b03a 	or	r9,r3,r10
100112b8:	4880042e 	bgeu	r9,r2,100112cc <__udivdi3+0x3b8>
100112bc:	4f13883a 	add	r9,r9,fp
100112c0:	a0ffffc4 	addi	r3,r20,-1
100112c4:	4f00952e 	bgeu	r9,fp,1001151c <__udivdi3+0x608>
100112c8:	1829883a 	mov	r20,r3
100112cc:	48a3c83a 	sub	r17,r9,r2
100112d0:	8809883a 	mov	r4,r17
100112d4:	900b883a 	mov	r5,r18
100112d8:	00058640 	call	10005864 <__umodsi3>
100112dc:	8809883a 	mov	r4,r17
100112e0:	900b883a 	mov	r5,r18
100112e4:	d8800015 	stw	r2,0(sp)
100112e8:	000585c0 	call	1000585c <__udivsi3>
100112ec:	1009883a 	mov	r4,r2
100112f0:	b00b883a 	mov	r5,r22
100112f4:	1023883a 	mov	r17,r2
100112f8:	000586c0 	call	1000586c <__mulsi3>
100112fc:	d8c00017 	ldw	r3,0(sp)
10011300:	823fffcc 	andi	r8,r16,65535
10011304:	1806943a 	slli	r3,r3,16
10011308:	1a20b03a 	or	r16,r3,r8
1001130c:	8080042e 	bgeu	r16,r2,10011320 <__udivdi3+0x40c>
10011310:	8721883a 	add	r16,r16,fp
10011314:	88ffffc4 	addi	r3,r17,-1
10011318:	87007c2e 	bgeu	r16,fp,1001150c <__udivdi3+0x5f8>
1001131c:	1823883a 	mov	r17,r3
10011320:	a028943a 	slli	r20,r20,16
10011324:	acbfffcc 	andi	r18,r21,65535
10011328:	900b883a 	mov	r5,r18
1001132c:	8d28b03a 	or	r20,r17,r20
10011330:	a022d43a 	srli	r17,r20,16
10011334:	a5bfffcc 	andi	r22,r20,65535
10011338:	b009883a 	mov	r4,r22
1001133c:	a82ad43a 	srli	r21,r21,16
10011340:	80a1c83a 	sub	r16,r16,r2
10011344:	000586c0 	call	1000586c <__mulsi3>
10011348:	8809883a 	mov	r4,r17
1001134c:	900b883a 	mov	r5,r18
10011350:	1039883a 	mov	fp,r2
10011354:	000586c0 	call	1000586c <__mulsi3>
10011358:	8809883a 	mov	r4,r17
1001135c:	a80b883a 	mov	r5,r21
10011360:	1025883a 	mov	r18,r2
10011364:	000586c0 	call	1000586c <__mulsi3>
10011368:	b009883a 	mov	r4,r22
1001136c:	a80b883a 	mov	r5,r21
10011370:	1023883a 	mov	r17,r2
10011374:	000586c0 	call	1000586c <__mulsi3>
10011378:	e006d43a 	srli	r3,fp,16
1001137c:	9085883a 	add	r2,r18,r2
10011380:	10c7883a 	add	r3,r2,r3
10011384:	1c80022e 	bgeu	r3,r18,10011390 <__udivdi3+0x47c>
10011388:	00800074 	movhi	r2,1
1001138c:	88a3883a 	add	r17,r17,r2
10011390:	1808d43a 	srli	r4,r3,16
10011394:	8909883a 	add	r4,r17,r4
10011398:	81004436 	bltu	r16,r4,100114ac <__udivdi3+0x598>
1001139c:	81003e26 	beq	r16,r4,10011498 <__udivdi3+0x584>
100113a0:	a005883a 	mov	r2,r20
100113a4:	0007883a 	mov	r3,zero
100113a8:	003f8f06 	br	100111e8 <__alt_data_end+0xf80111e8>
100113ac:	91e4983a 	sll	r18,r18,r7
100113b0:	80eed83a 	srl	r23,r16,r3
100113b4:	81cc983a 	sll	r6,r16,r7
100113b8:	9028d43a 	srli	r20,r18,16
100113bc:	98c6d83a 	srl	r3,r19,r3
100113c0:	b809883a 	mov	r4,r23
100113c4:	a00b883a 	mov	r5,r20
100113c8:	30ecb03a 	or	r22,r6,r3
100113cc:	99e2983a 	sll	r17,r19,r7
100113d0:	00058640 	call	10005864 <__umodsi3>
100113d4:	b809883a 	mov	r4,r23
100113d8:	a00b883a 	mov	r5,r20
100113dc:	1021883a 	mov	r16,r2
100113e0:	957fffcc 	andi	r21,r18,65535
100113e4:	000585c0 	call	1000585c <__udivsi3>
100113e8:	a80b883a 	mov	r5,r21
100113ec:	1009883a 	mov	r4,r2
100113f0:	102f883a 	mov	r23,r2
100113f4:	000586c0 	call	1000586c <__mulsi3>
100113f8:	8020943a 	slli	r16,r16,16
100113fc:	b00ad43a 	srli	r5,r22,16
10011400:	814cb03a 	or	r6,r16,r5
10011404:	3080062e 	bgeu	r6,r2,10011420 <__udivdi3+0x50c>
10011408:	348d883a 	add	r6,r6,r18
1001140c:	b8ffffc4 	addi	r3,r23,-1
10011410:	34804836 	bltu	r6,r18,10011534 <__udivdi3+0x620>
10011414:	3080472e 	bgeu	r6,r2,10011534 <__udivdi3+0x620>
10011418:	bdffff84 	addi	r23,r23,-2
1001141c:	348d883a 	add	r6,r6,r18
10011420:	30a7c83a 	sub	r19,r6,r2
10011424:	9809883a 	mov	r4,r19
10011428:	a00b883a 	mov	r5,r20
1001142c:	00058640 	call	10005864 <__umodsi3>
10011430:	9809883a 	mov	r4,r19
10011434:	a00b883a 	mov	r5,r20
10011438:	1039883a 	mov	fp,r2
1001143c:	000585c0 	call	1000585c <__udivsi3>
10011440:	1009883a 	mov	r4,r2
10011444:	a80b883a 	mov	r5,r21
10011448:	e038943a 	slli	fp,fp,16
1001144c:	1027883a 	mov	r19,r2
10011450:	000586c0 	call	1000586c <__mulsi3>
10011454:	b1bfffcc 	andi	r6,r22,65535
10011458:	e18cb03a 	or	r6,fp,r6
1001145c:	3080062e 	bgeu	r6,r2,10011478 <__udivdi3+0x564>
10011460:	348d883a 	add	r6,r6,r18
10011464:	98ffffc4 	addi	r3,r19,-1
10011468:	34803036 	bltu	r6,r18,1001152c <__udivdi3+0x618>
1001146c:	30802f2e 	bgeu	r6,r2,1001152c <__udivdi3+0x618>
10011470:	9cffff84 	addi	r19,r19,-2
10011474:	348d883a 	add	r6,r6,r18
10011478:	b82e943a 	slli	r23,r23,16
1001147c:	30a1c83a 	sub	r16,r6,r2
10011480:	9dc6b03a 	or	r3,r19,r23
10011484:	003f2606 	br	10011120 <__alt_data_end+0xf8011120>
10011488:	2027883a 	mov	r19,r4
1001148c:	003f5106 	br	100111d4 <__alt_data_end+0xf80111d4>
10011490:	1827883a 	mov	r19,r3
10011494:	003ef006 	br	10011058 <__alt_data_end+0xf8011058>
10011498:	1808943a 	slli	r4,r3,16
1001149c:	9dc6983a 	sll	r3,r19,r23
100114a0:	e73fffcc 	andi	fp,fp,65535
100114a4:	2709883a 	add	r4,r4,fp
100114a8:	193fbd2e 	bgeu	r3,r4,100113a0 <__alt_data_end+0xf80113a0>
100114ac:	a0bfffc4 	addi	r2,r20,-1
100114b0:	0007883a 	mov	r3,zero
100114b4:	003f4c06 	br	100111e8 <__alt_data_end+0xf80111e8>
100114b8:	01400404 	movi	r5,16
100114bc:	2811883a 	mov	r8,r5
100114c0:	003ef106 	br	10011088 <__alt_data_end+0xf8011088>
100114c4:	000b883a 	mov	r5,zero
100114c8:	0011883a 	mov	r8,zero
100114cc:	003eee06 	br	10011088 <__alt_data_end+0xf8011088>
100114d0:	00800404 	movi	r2,16
100114d4:	1007883a 	mov	r3,r2
100114d8:	003ea606 	br	10010f74 <__alt_data_end+0xf8010f74>
100114dc:	00800404 	movi	r2,16
100114e0:	1007883a 	mov	r3,r2
100114e4:	003f0106 	br	100110ec <__alt_data_end+0xf80110ec>
100114e8:	0005883a 	mov	r2,zero
100114ec:	0007883a 	mov	r3,zero
100114f0:	003efe06 	br	100110ec <__alt_data_end+0xf80110ec>
100114f4:	0005883a 	mov	r2,zero
100114f8:	0007883a 	mov	r3,zero
100114fc:	003e9d06 	br	10010f74 <__alt_data_end+0xf8010f74>
10011500:	0007883a 	mov	r3,zero
10011504:	00800044 	movi	r2,1
10011508:	003f3706 	br	100111e8 <__alt_data_end+0xf80111e8>
1001150c:	80bf832e 	bgeu	r16,r2,1001131c <__alt_data_end+0xf801131c>
10011510:	8c7fff84 	addi	r17,r17,-2
10011514:	8721883a 	add	r16,r16,fp
10011518:	003f8106 	br	10011320 <__alt_data_end+0xf8011320>
1001151c:	48bf6a2e 	bgeu	r9,r2,100112c8 <__alt_data_end+0xf80112c8>
10011520:	a53fff84 	addi	r20,r20,-2
10011524:	4f13883a 	add	r9,r9,fp
10011528:	003f6806 	br	100112cc <__alt_data_end+0xf80112cc>
1001152c:	1827883a 	mov	r19,r3
10011530:	003fd106 	br	10011478 <__alt_data_end+0xf8011478>
10011534:	182f883a 	mov	r23,r3
10011538:	003fb906 	br	10011420 <__alt_data_end+0xf8011420>
1001153c:	843fff84 	addi	r16,r16,-2
10011540:	348d883a 	add	r6,r6,r18
10011544:	003f0c06 	br	10011178 <__alt_data_end+0xf8011178>
10011548:	843fff84 	addi	r16,r16,-2
1001154c:	1c87883a 	add	r3,r3,r18
10011550:	003eac06 	br	10011004 <__alt_data_end+0xf8011004>

10011554 <__umoddi3>:
10011554:	defff404 	addi	sp,sp,-48
10011558:	dd800815 	stw	r22,32(sp)
1001155c:	dc400315 	stw	r17,12(sp)
10011560:	dc000215 	stw	r16,8(sp)
10011564:	dfc00b15 	stw	ra,44(sp)
10011568:	df000a15 	stw	fp,40(sp)
1001156c:	ddc00915 	stw	r23,36(sp)
10011570:	dd400715 	stw	r21,28(sp)
10011574:	dd000615 	stw	r20,24(sp)
10011578:	dcc00515 	stw	r19,20(sp)
1001157c:	dc800415 	stw	r18,16(sp)
10011580:	2021883a 	mov	r16,r4
10011584:	2823883a 	mov	r17,r5
10011588:	282d883a 	mov	r22,r5
1001158c:	38003c1e 	bne	r7,zero,10011680 <__umoddi3+0x12c>
10011590:	3027883a 	mov	r19,r6
10011594:	2029883a 	mov	r20,r4
10011598:	2980522e 	bgeu	r5,r6,100116e4 <__umoddi3+0x190>
1001159c:	00bfffd4 	movui	r2,65535
100115a0:	1180a436 	bltu	r2,r6,10011834 <__umoddi3+0x2e0>
100115a4:	00803fc4 	movi	r2,255
100115a8:	11815e2e 	bgeu	r2,r6,10011b24 <__umoddi3+0x5d0>
100115ac:	01400204 	movi	r5,8
100115b0:	2805883a 	mov	r2,r5
100115b4:	314ad83a 	srl	r5,r6,r5
100115b8:	00c40074 	movhi	r3,4097
100115bc:	18def704 	addi	r3,r3,31708
100115c0:	194b883a 	add	r5,r3,r5
100115c4:	29000003 	ldbu	r4,0(r5)
100115c8:	2089883a 	add	r4,r4,r2
100115cc:	00800804 	movi	r2,32
100115d0:	1105c83a 	sub	r2,r2,r4
100115d4:	10010c26 	beq	r2,zero,10011a08 <__umoddi3+0x4b4>
100115d8:	88a2983a 	sll	r17,r17,r2
100115dc:	8108d83a 	srl	r4,r16,r4
100115e0:	30a6983a 	sll	r19,r6,r2
100115e4:	80a8983a 	sll	r20,r16,r2
100115e8:	1025883a 	mov	r18,r2
100115ec:	892cb03a 	or	r22,r17,r4
100115f0:	9822d43a 	srli	r17,r19,16
100115f4:	b009883a 	mov	r4,r22
100115f8:	9d7fffcc 	andi	r21,r19,65535
100115fc:	880b883a 	mov	r5,r17
10011600:	00058640 	call	10005864 <__umodsi3>
10011604:	b009883a 	mov	r4,r22
10011608:	880b883a 	mov	r5,r17
1001160c:	102f883a 	mov	r23,r2
10011610:	000585c0 	call	1000585c <__udivsi3>
10011614:	1009883a 	mov	r4,r2
10011618:	a80b883a 	mov	r5,r21
1001161c:	000586c0 	call	1000586c <__mulsi3>
10011620:	b82e943a 	slli	r23,r23,16
10011624:	a008d43a 	srli	r4,r20,16
10011628:	b906b03a 	or	r3,r23,r4
1001162c:	1880042e 	bgeu	r3,r2,10011640 <__umoddi3+0xec>
10011630:	1cc7883a 	add	r3,r3,r19
10011634:	1cc00236 	bltu	r3,r19,10011640 <__umoddi3+0xec>
10011638:	1880012e 	bgeu	r3,r2,10011640 <__umoddi3+0xec>
1001163c:	1cc7883a 	add	r3,r3,r19
10011640:	18a1c83a 	sub	r16,r3,r2
10011644:	8009883a 	mov	r4,r16
10011648:	880b883a 	mov	r5,r17
1001164c:	00058640 	call	10005864 <__umodsi3>
10011650:	8009883a 	mov	r4,r16
10011654:	880b883a 	mov	r5,r17
10011658:	102d883a 	mov	r22,r2
1001165c:	000585c0 	call	1000585c <__udivsi3>
10011660:	1009883a 	mov	r4,r2
10011664:	a80b883a 	mov	r5,r21
10011668:	b02c943a 	slli	r22,r22,16
1001166c:	000586c0 	call	1000586c <__mulsi3>
10011670:	a13fffcc 	andi	r4,r20,65535
10011674:	b106b03a 	or	r3,r22,r4
10011678:	1880572e 	bgeu	r3,r2,100117d8 <__umoddi3+0x284>
1001167c:	00005206 	br	100117c8 <__umoddi3+0x274>
10011680:	29c05936 	bltu	r5,r7,100117e8 <__umoddi3+0x294>
10011684:	00bfffd4 	movui	r2,65535
10011688:	11c0652e 	bgeu	r2,r7,10011820 <__umoddi3+0x2cc>
1001168c:	00804034 	movhi	r2,256
10011690:	10bfffc4 	addi	r2,r2,-1
10011694:	11c1172e 	bgeu	r2,r7,10011af4 <__umoddi3+0x5a0>
10011698:	01400604 	movi	r5,24
1001169c:	282b883a 	mov	r21,r5
100116a0:	394ad83a 	srl	r5,r7,r5
100116a4:	00c40074 	movhi	r3,4097
100116a8:	18def704 	addi	r3,r3,31708
100116ac:	194b883a 	add	r5,r3,r5
100116b0:	28800003 	ldbu	r2,0(r5)
100116b4:	00c00804 	movi	r3,32
100116b8:	156b883a 	add	r21,r2,r21
100116bc:	1d69c83a 	sub	r20,r3,r21
100116c0:	a000671e 	bne	r20,zero,10011860 <__umoddi3+0x30c>
100116c4:	3c400136 	bltu	r7,r17,100116cc <__umoddi3+0x178>
100116c8:	81812336 	bltu	r16,r6,10011b58 <__umoddi3+0x604>
100116cc:	8185c83a 	sub	r2,r16,r6
100116d0:	89e3c83a 	sub	r17,r17,r7
100116d4:	8087803a 	cmpltu	r3,r16,r2
100116d8:	88edc83a 	sub	r22,r17,r3
100116dc:	b007883a 	mov	r3,r22
100116e0:	00004306 	br	100117f0 <__umoddi3+0x29c>
100116e4:	3000041e 	bne	r6,zero,100116f8 <__umoddi3+0x1a4>
100116e8:	01000044 	movi	r4,1
100116ec:	000b883a 	mov	r5,zero
100116f0:	000585c0 	call	1000585c <__udivsi3>
100116f4:	1027883a 	mov	r19,r2
100116f8:	00bfffd4 	movui	r2,65535
100116fc:	14c0532e 	bgeu	r2,r19,1001184c <__umoddi3+0x2f8>
10011700:	00804034 	movhi	r2,256
10011704:	10bfffc4 	addi	r2,r2,-1
10011708:	14c1032e 	bgeu	r2,r19,10011b18 <__umoddi3+0x5c4>
1001170c:	00800604 	movi	r2,24
10011710:	1007883a 	mov	r3,r2
10011714:	9884d83a 	srl	r2,r19,r2
10011718:	01040074 	movhi	r4,4097
1001171c:	211ef704 	addi	r4,r4,31708
10011720:	2085883a 	add	r2,r4,r2
10011724:	11000003 	ldbu	r4,0(r2)
10011728:	00800804 	movi	r2,32
1001172c:	20c7883a 	add	r3,r4,r3
10011730:	10c5c83a 	sub	r2,r2,r3
10011734:	1000b61e 	bne	r2,zero,10011a10 <__umoddi3+0x4bc>
10011738:	982ad43a 	srli	r21,r19,16
1001173c:	8ce3c83a 	sub	r17,r17,r19
10011740:	9dbfffcc 	andi	r22,r19,65535
10011744:	0025883a 	mov	r18,zero
10011748:	8809883a 	mov	r4,r17
1001174c:	a80b883a 	mov	r5,r21
10011750:	00058640 	call	10005864 <__umodsi3>
10011754:	8809883a 	mov	r4,r17
10011758:	a80b883a 	mov	r5,r21
1001175c:	102f883a 	mov	r23,r2
10011760:	000585c0 	call	1000585c <__udivsi3>
10011764:	1009883a 	mov	r4,r2
10011768:	b00b883a 	mov	r5,r22
1001176c:	000586c0 	call	1000586c <__mulsi3>
10011770:	b82e943a 	slli	r23,r23,16
10011774:	a008d43a 	srli	r4,r20,16
10011778:	b906b03a 	or	r3,r23,r4
1001177c:	1880032e 	bgeu	r3,r2,1001178c <__umoddi3+0x238>
10011780:	1cc7883a 	add	r3,r3,r19
10011784:	1cc00136 	bltu	r3,r19,1001178c <__umoddi3+0x238>
10011788:	1880f136 	bltu	r3,r2,10011b50 <__umoddi3+0x5fc>
1001178c:	18a1c83a 	sub	r16,r3,r2
10011790:	8009883a 	mov	r4,r16
10011794:	a80b883a 	mov	r5,r21
10011798:	00058640 	call	10005864 <__umodsi3>
1001179c:	8009883a 	mov	r4,r16
100117a0:	a80b883a 	mov	r5,r21
100117a4:	1023883a 	mov	r17,r2
100117a8:	000585c0 	call	1000585c <__udivsi3>
100117ac:	1009883a 	mov	r4,r2
100117b0:	b00b883a 	mov	r5,r22
100117b4:	8822943a 	slli	r17,r17,16
100117b8:	000586c0 	call	1000586c <__mulsi3>
100117bc:	a13fffcc 	andi	r4,r20,65535
100117c0:	8906b03a 	or	r3,r17,r4
100117c4:	1880042e 	bgeu	r3,r2,100117d8 <__umoddi3+0x284>
100117c8:	1cc7883a 	add	r3,r3,r19
100117cc:	1cc00236 	bltu	r3,r19,100117d8 <__umoddi3+0x284>
100117d0:	1880012e 	bgeu	r3,r2,100117d8 <__umoddi3+0x284>
100117d4:	1cc7883a 	add	r3,r3,r19
100117d8:	1887c83a 	sub	r3,r3,r2
100117dc:	1c84d83a 	srl	r2,r3,r18
100117e0:	0007883a 	mov	r3,zero
100117e4:	00000206 	br	100117f0 <__umoddi3+0x29c>
100117e8:	2005883a 	mov	r2,r4
100117ec:	2807883a 	mov	r3,r5
100117f0:	dfc00b17 	ldw	ra,44(sp)
100117f4:	df000a17 	ldw	fp,40(sp)
100117f8:	ddc00917 	ldw	r23,36(sp)
100117fc:	dd800817 	ldw	r22,32(sp)
10011800:	dd400717 	ldw	r21,28(sp)
10011804:	dd000617 	ldw	r20,24(sp)
10011808:	dcc00517 	ldw	r19,20(sp)
1001180c:	dc800417 	ldw	r18,16(sp)
10011810:	dc400317 	ldw	r17,12(sp)
10011814:	dc000217 	ldw	r16,8(sp)
10011818:	dec00c04 	addi	sp,sp,48
1001181c:	f800283a 	ret
10011820:	00803fc4 	movi	r2,255
10011824:	11c0b02e 	bgeu	r2,r7,10011ae8 <__umoddi3+0x594>
10011828:	01400204 	movi	r5,8
1001182c:	282b883a 	mov	r21,r5
10011830:	003f9b06 	br	100116a0 <__alt_data_end+0xf80116a0>
10011834:	00804034 	movhi	r2,256
10011838:	10bfffc4 	addi	r2,r2,-1
1001183c:	1180b02e 	bgeu	r2,r6,10011b00 <__umoddi3+0x5ac>
10011840:	01400604 	movi	r5,24
10011844:	2805883a 	mov	r2,r5
10011848:	003f5a06 	br	100115b4 <__alt_data_end+0xf80115b4>
1001184c:	00803fc4 	movi	r2,255
10011850:	14c0ae2e 	bgeu	r2,r19,10011b0c <__umoddi3+0x5b8>
10011854:	00800204 	movi	r2,8
10011858:	1007883a 	mov	r3,r2
1001185c:	003fad06 	br	10011714 <__alt_data_end+0xf8011714>
10011860:	3d0a983a 	sll	r5,r7,r20
10011864:	356cd83a 	srl	r22,r6,r21
10011868:	8d78d83a 	srl	fp,r17,r21
1001186c:	8d10983a 	sll	r8,r17,r20
10011870:	2dacb03a 	or	r22,r5,r22
10011874:	b02ed43a 	srli	r23,r22,16
10011878:	8564d83a 	srl	r18,r16,r21
1001187c:	e009883a 	mov	r4,fp
10011880:	b80b883a 	mov	r5,r23
10011884:	44a4b03a 	or	r18,r8,r18
10011888:	3526983a 	sll	r19,r6,r20
1001188c:	00058640 	call	10005864 <__umodsi3>
10011890:	e009883a 	mov	r4,fp
10011894:	b80b883a 	mov	r5,r23
10011898:	b47fffcc 	andi	r17,r22,65535
1001189c:	d8800015 	stw	r2,0(sp)
100118a0:	000585c0 	call	1000585c <__udivsi3>
100118a4:	1009883a 	mov	r4,r2
100118a8:	880b883a 	mov	r5,r17
100118ac:	1039883a 	mov	fp,r2
100118b0:	000586c0 	call	1000586c <__mulsi3>
100118b4:	d9800017 	ldw	r6,0(sp)
100118b8:	9008d43a 	srli	r4,r18,16
100118bc:	8520983a 	sll	r16,r16,r20
100118c0:	300c943a 	slli	r6,r6,16
100118c4:	3106b03a 	or	r3,r6,r4
100118c8:	1880042e 	bgeu	r3,r2,100118dc <__umoddi3+0x388>
100118cc:	1d87883a 	add	r3,r3,r22
100118d0:	e13fffc4 	addi	r4,fp,-1
100118d4:	1d809a2e 	bgeu	r3,r22,10011b40 <__umoddi3+0x5ec>
100118d8:	2039883a 	mov	fp,r4
100118dc:	1887c83a 	sub	r3,r3,r2
100118e0:	1809883a 	mov	r4,r3
100118e4:	b80b883a 	mov	r5,r23
100118e8:	d8c00115 	stw	r3,4(sp)
100118ec:	00058640 	call	10005864 <__umodsi3>
100118f0:	d8c00117 	ldw	r3,4(sp)
100118f4:	b80b883a 	mov	r5,r23
100118f8:	d8800015 	stw	r2,0(sp)
100118fc:	1809883a 	mov	r4,r3
10011900:	000585c0 	call	1000585c <__udivsi3>
10011904:	880b883a 	mov	r5,r17
10011908:	1009883a 	mov	r4,r2
1001190c:	102f883a 	mov	r23,r2
10011910:	000586c0 	call	1000586c <__mulsi3>
10011914:	d9800017 	ldw	r6,0(sp)
10011918:	947fffcc 	andi	r17,r18,65535
1001191c:	300c943a 	slli	r6,r6,16
10011920:	3464b03a 	or	r18,r6,r17
10011924:	9080042e 	bgeu	r18,r2,10011938 <__umoddi3+0x3e4>
10011928:	95a5883a 	add	r18,r18,r22
1001192c:	b8ffffc4 	addi	r3,r23,-1
10011930:	95807f2e 	bgeu	r18,r22,10011b30 <__umoddi3+0x5dc>
10011934:	182f883a 	mov	r23,r3
10011938:	e038943a 	slli	fp,fp,16
1001193c:	980cd43a 	srli	r6,r19,16
10011940:	98ffffcc 	andi	r3,r19,65535
10011944:	bf38b03a 	or	fp,r23,fp
10011948:	e02ed43a 	srli	r23,fp,16
1001194c:	e73fffcc 	andi	fp,fp,65535
10011950:	180b883a 	mov	r5,r3
10011954:	e009883a 	mov	r4,fp
10011958:	d9800015 	stw	r6,0(sp)
1001195c:	d8c00115 	stw	r3,4(sp)
10011960:	90a5c83a 	sub	r18,r18,r2
10011964:	000586c0 	call	1000586c <__mulsi3>
10011968:	d8c00117 	ldw	r3,4(sp)
1001196c:	b809883a 	mov	r4,r23
10011970:	1023883a 	mov	r17,r2
10011974:	180b883a 	mov	r5,r3
10011978:	000586c0 	call	1000586c <__mulsi3>
1001197c:	d9800017 	ldw	r6,0(sp)
10011980:	b809883a 	mov	r4,r23
10011984:	d8800115 	stw	r2,4(sp)
10011988:	300b883a 	mov	r5,r6
1001198c:	302f883a 	mov	r23,r6
10011990:	000586c0 	call	1000586c <__mulsi3>
10011994:	e009883a 	mov	r4,fp
10011998:	b80b883a 	mov	r5,r23
1001199c:	d8800015 	stw	r2,0(sp)
100119a0:	000586c0 	call	1000586c <__mulsi3>
100119a4:	d8c00117 	ldw	r3,4(sp)
100119a8:	880cd43a 	srli	r6,r17,16
100119ac:	d9c00017 	ldw	r7,0(sp)
100119b0:	1885883a 	add	r2,r3,r2
100119b4:	118d883a 	add	r6,r2,r6
100119b8:	30c0022e 	bgeu	r6,r3,100119c4 <__umoddi3+0x470>
100119bc:	00800074 	movhi	r2,1
100119c0:	388f883a 	add	r7,r7,r2
100119c4:	3006d43a 	srli	r3,r6,16
100119c8:	300c943a 	slli	r6,r6,16
100119cc:	8c7fffcc 	andi	r17,r17,65535
100119d0:	38c7883a 	add	r3,r7,r3
100119d4:	3463883a 	add	r17,r6,r17
100119d8:	90c03d36 	bltu	r18,r3,10011ad0 <__umoddi3+0x57c>
100119dc:	90c06026 	beq	r18,r3,10011b60 <__umoddi3+0x60c>
100119e0:	90c9c83a 	sub	r4,r18,r3
100119e4:	880f883a 	mov	r7,r17
100119e8:	81cfc83a 	sub	r7,r16,r7
100119ec:	81c7803a 	cmpltu	r3,r16,r7
100119f0:	20c7c83a 	sub	r3,r4,r3
100119f4:	1d44983a 	sll	r2,r3,r21
100119f8:	3d0ed83a 	srl	r7,r7,r20
100119fc:	1d06d83a 	srl	r3,r3,r20
10011a00:	11c4b03a 	or	r2,r2,r7
10011a04:	003f7a06 	br	100117f0 <__alt_data_end+0xf80117f0>
10011a08:	0025883a 	mov	r18,zero
10011a0c:	003ef806 	br	100115f0 <__alt_data_end+0xf80115f0>
10011a10:	98a6983a 	sll	r19,r19,r2
10011a14:	88e8d83a 	srl	r20,r17,r3
10011a18:	80c6d83a 	srl	r3,r16,r3
10011a1c:	982ad43a 	srli	r21,r19,16
10011a20:	88a2983a 	sll	r17,r17,r2
10011a24:	a009883a 	mov	r4,r20
10011a28:	a80b883a 	mov	r5,r21
10011a2c:	88eeb03a 	or	r23,r17,r3
10011a30:	1025883a 	mov	r18,r2
10011a34:	00058640 	call	10005864 <__umodsi3>
10011a38:	a009883a 	mov	r4,r20
10011a3c:	a80b883a 	mov	r5,r21
10011a40:	1023883a 	mov	r17,r2
10011a44:	9dbfffcc 	andi	r22,r19,65535
10011a48:	000585c0 	call	1000585c <__udivsi3>
10011a4c:	1009883a 	mov	r4,r2
10011a50:	b00b883a 	mov	r5,r22
10011a54:	000586c0 	call	1000586c <__mulsi3>
10011a58:	8822943a 	slli	r17,r17,16
10011a5c:	b808d43a 	srli	r4,r23,16
10011a60:	84a8983a 	sll	r20,r16,r18
10011a64:	8906b03a 	or	r3,r17,r4
10011a68:	1880042e 	bgeu	r3,r2,10011a7c <__umoddi3+0x528>
10011a6c:	1cc7883a 	add	r3,r3,r19
10011a70:	1cc00236 	bltu	r3,r19,10011a7c <__umoddi3+0x528>
10011a74:	1880012e 	bgeu	r3,r2,10011a7c <__umoddi3+0x528>
10011a78:	1cc7883a 	add	r3,r3,r19
10011a7c:	18a1c83a 	sub	r16,r3,r2
10011a80:	8009883a 	mov	r4,r16
10011a84:	a80b883a 	mov	r5,r21
10011a88:	00058640 	call	10005864 <__umodsi3>
10011a8c:	8009883a 	mov	r4,r16
10011a90:	a80b883a 	mov	r5,r21
10011a94:	1039883a 	mov	fp,r2
10011a98:	000585c0 	call	1000585c <__udivsi3>
10011a9c:	1009883a 	mov	r4,r2
10011aa0:	b00b883a 	mov	r5,r22
10011aa4:	000586c0 	call	1000586c <__mulsi3>
10011aa8:	e006943a 	slli	r3,fp,16
10011aac:	b93fffcc 	andi	r4,r23,65535
10011ab0:	1906b03a 	or	r3,r3,r4
10011ab4:	1880042e 	bgeu	r3,r2,10011ac8 <__umoddi3+0x574>
10011ab8:	1cc7883a 	add	r3,r3,r19
10011abc:	1cc00236 	bltu	r3,r19,10011ac8 <__umoddi3+0x574>
10011ac0:	1880012e 	bgeu	r3,r2,10011ac8 <__umoddi3+0x574>
10011ac4:	1cc7883a 	add	r3,r3,r19
10011ac8:	18a3c83a 	sub	r17,r3,r2
10011acc:	003f1e06 	br	10011748 <__alt_data_end+0xf8011748>
10011ad0:	8ccfc83a 	sub	r7,r17,r19
10011ad4:	1d89c83a 	sub	r4,r3,r22
10011ad8:	89e3803a 	cmpltu	r17,r17,r7
10011adc:	2463c83a 	sub	r17,r4,r17
10011ae0:	9449c83a 	sub	r4,r18,r17
10011ae4:	003fc006 	br	100119e8 <__alt_data_end+0xf80119e8>
10011ae8:	000b883a 	mov	r5,zero
10011aec:	002b883a 	mov	r21,zero
10011af0:	003eeb06 	br	100116a0 <__alt_data_end+0xf80116a0>
10011af4:	01400404 	movi	r5,16
10011af8:	282b883a 	mov	r21,r5
10011afc:	003ee806 	br	100116a0 <__alt_data_end+0xf80116a0>
10011b00:	01400404 	movi	r5,16
10011b04:	2805883a 	mov	r2,r5
10011b08:	003eaa06 	br	100115b4 <__alt_data_end+0xf80115b4>
10011b0c:	0005883a 	mov	r2,zero
10011b10:	0007883a 	mov	r3,zero
10011b14:	003eff06 	br	10011714 <__alt_data_end+0xf8011714>
10011b18:	00800404 	movi	r2,16
10011b1c:	1007883a 	mov	r3,r2
10011b20:	003efc06 	br	10011714 <__alt_data_end+0xf8011714>
10011b24:	000b883a 	mov	r5,zero
10011b28:	0005883a 	mov	r2,zero
10011b2c:	003ea106 	br	100115b4 <__alt_data_end+0xf80115b4>
10011b30:	90bf802e 	bgeu	r18,r2,10011934 <__alt_data_end+0xf8011934>
10011b34:	bdffff84 	addi	r23,r23,-2
10011b38:	95a5883a 	add	r18,r18,r22
10011b3c:	003f7e06 	br	10011938 <__alt_data_end+0xf8011938>
10011b40:	18bf652e 	bgeu	r3,r2,100118d8 <__alt_data_end+0xf80118d8>
10011b44:	e73fff84 	addi	fp,fp,-2
10011b48:	1d87883a 	add	r3,r3,r22
10011b4c:	003f6306 	br	100118dc <__alt_data_end+0xf80118dc>
10011b50:	1cc7883a 	add	r3,r3,r19
10011b54:	003f0d06 	br	1001178c <__alt_data_end+0xf801178c>
10011b58:	8005883a 	mov	r2,r16
10011b5c:	003edf06 	br	100116dc <__alt_data_end+0xf80116dc>
10011b60:	847fdb36 	bltu	r16,r17,10011ad0 <__alt_data_end+0xf8011ad0>
10011b64:	880f883a 	mov	r7,r17
10011b68:	0009883a 	mov	r4,zero
10011b6c:	003f9e06 	br	100119e8 <__alt_data_end+0xf80119e8>

10011b70 <__adddf3>:
10011b70:	02000434 	movhi	r8,16
10011b74:	423fffc4 	addi	r8,r8,-1
10011b78:	defffb04 	addi	sp,sp,-20
10011b7c:	2a12703a 	and	r9,r5,r8
10011b80:	2806d7fa 	srli	r3,r5,31
10011b84:	3a10703a 	and	r8,r7,r8
10011b88:	3804d53a 	srli	r2,r7,20
10011b8c:	3014d77a 	srli	r10,r6,29
10011b90:	dc000015 	stw	r16,0(sp)
10011b94:	481290fa 	slli	r9,r9,3
10011b98:	2820d53a 	srli	r16,r5,20
10011b9c:	401090fa 	slli	r8,r8,3
10011ba0:	200ad77a 	srli	r5,r4,29
10011ba4:	380ed7fa 	srli	r7,r7,31
10011ba8:	dc800215 	stw	r18,8(sp)
10011bac:	dc400115 	stw	r17,4(sp)
10011bb0:	dfc00415 	stw	ra,16(sp)
10011bb4:	dcc00315 	stw	r19,12(sp)
10011bb8:	1c803fcc 	andi	r18,r3,255
10011bbc:	8401ffcc 	andi	r16,r16,2047
10011bc0:	494ab03a 	or	r5,r9,r5
10011bc4:	202290fa 	slli	r17,r4,3
10011bc8:	1081ffcc 	andi	r2,r2,2047
10011bcc:	4290b03a 	or	r8,r8,r10
10011bd0:	300c90fa 	slli	r6,r6,3
10011bd4:	91c07026 	beq	r18,r7,10011d98 <__adddf3+0x228>
10011bd8:	8087c83a 	sub	r3,r16,r2
10011bdc:	00c0b30e 	bge	zero,r3,10011eac <__adddf3+0x33c>
10011be0:	10002a1e 	bne	r2,zero,10011c8c <__adddf3+0x11c>
10011be4:	4184b03a 	or	r2,r8,r6
10011be8:	1000991e 	bne	r2,zero,10011e50 <__adddf3+0x2e0>
10011bec:	888001cc 	andi	r2,r17,7
10011bf0:	10005b26 	beq	r2,zero,10011d60 <__adddf3+0x1f0>
10011bf4:	88c003cc 	andi	r3,r17,15
10011bf8:	00800104 	movi	r2,4
10011bfc:	18805826 	beq	r3,r2,10011d60 <__adddf3+0x1f0>
10011c00:	89800104 	addi	r6,r17,4
10011c04:	3463803a 	cmpltu	r17,r6,r17
10011c08:	2c4b883a 	add	r5,r5,r17
10011c0c:	2880202c 	andhi	r2,r5,128
10011c10:	9007883a 	mov	r3,r18
10011c14:	3023883a 	mov	r17,r6
10011c18:	10005426 	beq	r2,zero,10011d6c <__adddf3+0x1fc>
10011c1c:	84000044 	addi	r16,r16,1
10011c20:	0081ffc4 	movi	r2,2047
10011c24:	8080c126 	beq	r16,r2,10011f2c <__adddf3+0x3bc>
10011c28:	013fe034 	movhi	r4,65408
10011c2c:	213fffc4 	addi	r4,r4,-1
10011c30:	290a703a 	and	r5,r5,r4
10011c34:	2804977a 	slli	r2,r5,29
10011c38:	280a927a 	slli	r5,r5,9
10011c3c:	8822d0fa 	srli	r17,r17,3
10011c40:	8401ffcc 	andi	r16,r16,2047
10011c44:	2808d33a 	srli	r4,r5,12
10011c48:	1444b03a 	or	r2,r2,r17
10011c4c:	8401ffcc 	andi	r16,r16,2047
10011c50:	800a953a 	slli	r5,r16,20
10011c54:	18c03fcc 	andi	r3,r3,255
10011c58:	04000434 	movhi	r16,16
10011c5c:	180697fa 	slli	r3,r3,31
10011c60:	843fffc4 	addi	r16,r16,-1
10011c64:	2420703a 	and	r16,r4,r16
10011c68:	8160b03a 	or	r16,r16,r5
10011c6c:	80c6b03a 	or	r3,r16,r3
10011c70:	dfc00417 	ldw	ra,16(sp)
10011c74:	dcc00317 	ldw	r19,12(sp)
10011c78:	dc800217 	ldw	r18,8(sp)
10011c7c:	dc400117 	ldw	r17,4(sp)
10011c80:	dc000017 	ldw	r16,0(sp)
10011c84:	dec00504 	addi	sp,sp,20
10011c88:	f800283a 	ret
10011c8c:	0081ffc4 	movi	r2,2047
10011c90:	80bfd626 	beq	r16,r2,10011bec <__alt_data_end+0xf8011bec>
10011c94:	42002034 	orhi	r8,r8,128
10011c98:	00800e04 	movi	r2,56
10011c9c:	10c0a616 	blt	r2,r3,10011f38 <__adddf3+0x3c8>
10011ca0:	008007c4 	movi	r2,31
10011ca4:	10c0c916 	blt	r2,r3,10011fcc <__adddf3+0x45c>
10011ca8:	00800804 	movi	r2,32
10011cac:	10c5c83a 	sub	r2,r2,r3
10011cb0:	408e983a 	sll	r7,r8,r2
10011cb4:	30c8d83a 	srl	r4,r6,r3
10011cb8:	3084983a 	sll	r2,r6,r2
10011cbc:	40c6d83a 	srl	r3,r8,r3
10011cc0:	390cb03a 	or	r6,r7,r4
10011cc4:	1004c03a 	cmpne	r2,r2,zero
10011cc8:	308cb03a 	or	r6,r6,r2
10011ccc:	898dc83a 	sub	r6,r17,r6
10011cd0:	89a3803a 	cmpltu	r17,r17,r6
10011cd4:	28cbc83a 	sub	r5,r5,r3
10011cd8:	2c4bc83a 	sub	r5,r5,r17
10011cdc:	3023883a 	mov	r17,r6
10011ce0:	2880202c 	andhi	r2,r5,128
10011ce4:	10006d26 	beq	r2,zero,10011e9c <__adddf3+0x32c>
10011ce8:	04c02034 	movhi	r19,128
10011cec:	9cffffc4 	addi	r19,r19,-1
10011cf0:	2ce6703a 	and	r19,r5,r19
10011cf4:	98007e26 	beq	r19,zero,10011ef0 <__adddf3+0x380>
10011cf8:	9809883a 	mov	r4,r19
10011cfc:	00079700 	call	10007970 <__clzsi2>
10011d00:	10fffe04 	addi	r3,r2,-8
10011d04:	010007c4 	movi	r4,31
10011d08:	20c07f16 	blt	r4,r3,10011f08 <__adddf3+0x398>
10011d0c:	01400a04 	movi	r5,40
10011d10:	2885c83a 	sub	r2,r5,r2
10011d14:	888ad83a 	srl	r5,r17,r2
10011d18:	98e6983a 	sll	r19,r19,r3
10011d1c:	88e2983a 	sll	r17,r17,r3
10011d20:	2ce6b03a 	or	r19,r5,r19
10011d24:	1c007c16 	blt	r3,r16,10011f18 <__adddf3+0x3a8>
10011d28:	1c21c83a 	sub	r16,r3,r16
10011d2c:	81400044 	addi	r5,r16,1
10011d30:	00c007c4 	movi	r3,31
10011d34:	19409816 	blt	r3,r5,10011f98 <__adddf3+0x428>
10011d38:	1c21c83a 	sub	r16,r3,r16
10011d3c:	8c08983a 	sll	r4,r17,r16
10011d40:	8946d83a 	srl	r3,r17,r5
10011d44:	9c20983a 	sll	r16,r19,r16
10011d48:	2008c03a 	cmpne	r4,r4,zero
10011d4c:	994ad83a 	srl	r5,r19,r5
10011d50:	1c06b03a 	or	r3,r3,r16
10011d54:	1922b03a 	or	r17,r3,r4
10011d58:	0021883a 	mov	r16,zero
10011d5c:	003fa306 	br	10011bec <__alt_data_end+0xf8011bec>
10011d60:	2880202c 	andhi	r2,r5,128
10011d64:	9007883a 	mov	r3,r18
10011d68:	103fac1e 	bne	r2,zero,10011c1c <__alt_data_end+0xf8011c1c>
10011d6c:	2804977a 	slli	r2,r5,29
10011d70:	8822d0fa 	srli	r17,r17,3
10011d74:	0101ffc4 	movi	r4,2047
10011d78:	280ad0fa 	srli	r5,r5,3
10011d7c:	1444b03a 	or	r2,r2,r17
10011d80:	81002c26 	beq	r16,r4,10011e34 <__adddf3+0x2c4>
10011d84:	8120703a 	and	r16,r16,r4
10011d88:	01000434 	movhi	r4,16
10011d8c:	213fffc4 	addi	r4,r4,-1
10011d90:	2908703a 	and	r4,r5,r4
10011d94:	003fad06 	br	10011c4c <__alt_data_end+0xf8011c4c>
10011d98:	8089c83a 	sub	r4,r16,r2
10011d9c:	01006a0e 	bge	zero,r4,10011f48 <__adddf3+0x3d8>
10011da0:	10003326 	beq	r2,zero,10011e70 <__adddf3+0x300>
10011da4:	0081ffc4 	movi	r2,2047
10011da8:	80bf9026 	beq	r16,r2,10011bec <__alt_data_end+0xf8011bec>
10011dac:	42002034 	orhi	r8,r8,128
10011db0:	00800e04 	movi	r2,56
10011db4:	1100b116 	blt	r2,r4,1001207c <__adddf3+0x50c>
10011db8:	008007c4 	movi	r2,31
10011dbc:	1100e216 	blt	r2,r4,10012148 <__adddf3+0x5d8>
10011dc0:	00800804 	movi	r2,32
10011dc4:	1105c83a 	sub	r2,r2,r4
10011dc8:	4092983a 	sll	r9,r8,r2
10011dcc:	310ed83a 	srl	r7,r6,r4
10011dd0:	3084983a 	sll	r2,r6,r2
10011dd4:	4110d83a 	srl	r8,r8,r4
10011dd8:	49ccb03a 	or	r6,r9,r7
10011ddc:	1004c03a 	cmpne	r2,r2,zero
10011de0:	308cb03a 	or	r6,r6,r2
10011de4:	344d883a 	add	r6,r6,r17
10011de8:	3463803a 	cmpltu	r17,r6,r17
10011dec:	414b883a 	add	r5,r8,r5
10011df0:	2c4b883a 	add	r5,r5,r17
10011df4:	3023883a 	mov	r17,r6
10011df8:	2880202c 	andhi	r2,r5,128
10011dfc:	10002726 	beq	r2,zero,10011e9c <__adddf3+0x32c>
10011e00:	84000044 	addi	r16,r16,1
10011e04:	0081ffc4 	movi	r2,2047
10011e08:	8080ae26 	beq	r16,r2,100120c4 <__adddf3+0x554>
10011e0c:	00bfe034 	movhi	r2,65408
10011e10:	10bfffc4 	addi	r2,r2,-1
10011e14:	288a703a 	and	r5,r5,r2
10011e18:	880cd07a 	srli	r6,r17,1
10011e1c:	280897fa 	slli	r4,r5,31
10011e20:	88c0004c 	andi	r3,r17,1
10011e24:	30e2b03a 	or	r17,r6,r3
10011e28:	280ad07a 	srli	r5,r5,1
10011e2c:	8922b03a 	or	r17,r17,r4
10011e30:	003f6e06 	br	10011bec <__alt_data_end+0xf8011bec>
10011e34:	1148b03a 	or	r4,r2,r5
10011e38:	20003c26 	beq	r4,zero,10011f2c <__adddf3+0x3bc>
10011e3c:	29000234 	orhi	r4,r5,8
10011e40:	01400434 	movhi	r5,16
10011e44:	297fffc4 	addi	r5,r5,-1
10011e48:	2148703a 	and	r4,r4,r5
10011e4c:	003f7f06 	br	10011c4c <__alt_data_end+0xf8011c4c>
10011e50:	18ffffc4 	addi	r3,r3,-1
10011e54:	18004d1e 	bne	r3,zero,10011f8c <__adddf3+0x41c>
10011e58:	898dc83a 	sub	r6,r17,r6
10011e5c:	89a3803a 	cmpltu	r17,r17,r6
10011e60:	2a0bc83a 	sub	r5,r5,r8
10011e64:	2c4bc83a 	sub	r5,r5,r17
10011e68:	3023883a 	mov	r17,r6
10011e6c:	003f9c06 	br	10011ce0 <__alt_data_end+0xf8011ce0>
10011e70:	4184b03a 	or	r2,r8,r6
10011e74:	103f5d26 	beq	r2,zero,10011bec <__alt_data_end+0xf8011bec>
10011e78:	213fffc4 	addi	r4,r4,-1
10011e7c:	203fd926 	beq	r4,zero,10011de4 <__alt_data_end+0xf8011de4>
10011e80:	0081ffc4 	movi	r2,2047
10011e84:	80bfca1e 	bne	r16,r2,10011db0 <__alt_data_end+0xf8011db0>
10011e88:	003f5806 	br	10011bec <__alt_data_end+0xf8011bec>
10011e8c:	10c8b03a 	or	r4,r2,r3
10011e90:	20008b26 	beq	r4,zero,100120c0 <__adddf3+0x550>
10011e94:	100b883a 	mov	r5,r2
10011e98:	1823883a 	mov	r17,r3
10011e9c:	888001cc 	andi	r2,r17,7
10011ea0:	103f541e 	bne	r2,zero,10011bf4 <__alt_data_end+0xf8011bf4>
10011ea4:	9007883a 	mov	r3,r18
10011ea8:	003fb006 	br	10011d6c <__alt_data_end+0xf8011d6c>
10011eac:	1800531e 	bne	r3,zero,10011ffc <__adddf3+0x48c>
10011eb0:	80800044 	addi	r2,r16,1
10011eb4:	1081ffcc 	andi	r2,r2,2047
10011eb8:	00c00044 	movi	r3,1
10011ebc:	1880990e 	bge	r3,r2,10012124 <__adddf3+0x5b4>
10011ec0:	8985c83a 	sub	r2,r17,r6
10011ec4:	8887803a 	cmpltu	r3,r17,r2
10011ec8:	2a27c83a 	sub	r19,r5,r8
10011ecc:	98e7c83a 	sub	r19,r19,r3
10011ed0:	98c0202c 	andhi	r3,r19,128
10011ed4:	18006226 	beq	r3,zero,10012060 <__adddf3+0x4f0>
10011ed8:	3463c83a 	sub	r17,r6,r17
10011edc:	4151c83a 	sub	r8,r8,r5
10011ee0:	344d803a 	cmpltu	r6,r6,r17
10011ee4:	41a7c83a 	sub	r19,r8,r6
10011ee8:	3825883a 	mov	r18,r7
10011eec:	983f821e 	bne	r19,zero,10011cf8 <__alt_data_end+0xf8011cf8>
10011ef0:	8809883a 	mov	r4,r17
10011ef4:	00079700 	call	10007970 <__clzsi2>
10011ef8:	10800804 	addi	r2,r2,32
10011efc:	10fffe04 	addi	r3,r2,-8
10011f00:	010007c4 	movi	r4,31
10011f04:	20ff810e 	bge	r4,r3,10011d0c <__alt_data_end+0xf8011d0c>
10011f08:	14fff604 	addi	r19,r2,-40
10011f0c:	8ce6983a 	sll	r19,r17,r19
10011f10:	0023883a 	mov	r17,zero
10011f14:	1c3f840e 	bge	r3,r16,10011d28 <__alt_data_end+0xf8011d28>
10011f18:	017fe034 	movhi	r5,65408
10011f1c:	297fffc4 	addi	r5,r5,-1
10011f20:	80e1c83a 	sub	r16,r16,r3
10011f24:	994a703a 	and	r5,r19,r5
10011f28:	003f3006 	br	10011bec <__alt_data_end+0xf8011bec>
10011f2c:	0009883a 	mov	r4,zero
10011f30:	0005883a 	mov	r2,zero
10011f34:	003f4506 	br	10011c4c <__alt_data_end+0xf8011c4c>
10011f38:	418cb03a 	or	r6,r8,r6
10011f3c:	300cc03a 	cmpne	r6,r6,zero
10011f40:	0007883a 	mov	r3,zero
10011f44:	003f6106 	br	10011ccc <__alt_data_end+0xf8011ccc>
10011f48:	2000921e 	bne	r4,zero,10012194 <__adddf3+0x624>
10011f4c:	80800044 	addi	r2,r16,1
10011f50:	11c1ffcc 	andi	r7,r2,2047
10011f54:	01000044 	movi	r4,1
10011f58:	21c0610e 	bge	r4,r7,100120e0 <__adddf3+0x570>
10011f5c:	0101ffc4 	movi	r4,2047
10011f60:	1100a326 	beq	r2,r4,100121f0 <__adddf3+0x680>
10011f64:	344d883a 	add	r6,r6,r17
10011f68:	3463803a 	cmpltu	r17,r6,r17
10011f6c:	414b883a 	add	r5,r8,r5
10011f70:	2c4b883a 	add	r5,r5,r17
10011f74:	282297fa 	slli	r17,r5,31
10011f78:	300cd07a 	srli	r6,r6,1
10011f7c:	280ad07a 	srli	r5,r5,1
10011f80:	1021883a 	mov	r16,r2
10011f84:	89a2b03a 	or	r17,r17,r6
10011f88:	003f1806 	br	10011bec <__alt_data_end+0xf8011bec>
10011f8c:	0081ffc4 	movi	r2,2047
10011f90:	80bf411e 	bne	r16,r2,10011c98 <__alt_data_end+0xf8011c98>
10011f94:	003f1506 	br	10011bec <__alt_data_end+0xf8011bec>
10011f98:	80bff844 	addi	r2,r16,-31
10011f9c:	00c00804 	movi	r3,32
10011fa0:	9884d83a 	srl	r2,r19,r2
10011fa4:	28c04a26 	beq	r5,r3,100120d0 <__adddf3+0x560>
10011fa8:	00c00fc4 	movi	r3,63
10011fac:	1c21c83a 	sub	r16,r3,r16
10011fb0:	9c26983a 	sll	r19,r19,r16
10011fb4:	9c62b03a 	or	r17,r19,r17
10011fb8:	8822c03a 	cmpne	r17,r17,zero
10011fbc:	88a2b03a 	or	r17,r17,r2
10011fc0:	000b883a 	mov	r5,zero
10011fc4:	0021883a 	mov	r16,zero
10011fc8:	003fb406 	br	10011e9c <__alt_data_end+0xf8011e9c>
10011fcc:	18bff804 	addi	r2,r3,-32
10011fd0:	01000804 	movi	r4,32
10011fd4:	4084d83a 	srl	r2,r8,r2
10011fd8:	19003f26 	beq	r3,r4,100120d8 <__adddf3+0x568>
10011fdc:	01001004 	movi	r4,64
10011fe0:	20c7c83a 	sub	r3,r4,r3
10011fe4:	40d0983a 	sll	r8,r8,r3
10011fe8:	418cb03a 	or	r6,r8,r6
10011fec:	300cc03a 	cmpne	r6,r6,zero
10011ff0:	308cb03a 	or	r6,r6,r2
10011ff4:	0007883a 	mov	r3,zero
10011ff8:	003f3406 	br	10011ccc <__alt_data_end+0xf8011ccc>
10011ffc:	80002326 	beq	r16,zero,1001208c <__adddf3+0x51c>
10012000:	0101ffc4 	movi	r4,2047
10012004:	11005e26 	beq	r2,r4,10012180 <__adddf3+0x610>
10012008:	00c7c83a 	sub	r3,zero,r3
1001200c:	29402034 	orhi	r5,r5,128
10012010:	01000e04 	movi	r4,56
10012014:	20c07216 	blt	r4,r3,100121e0 <__adddf3+0x670>
10012018:	010007c4 	movi	r4,31
1001201c:	20c0ce16 	blt	r4,r3,10012358 <__adddf3+0x7e8>
10012020:	01000804 	movi	r4,32
10012024:	20c9c83a 	sub	r4,r4,r3
10012028:	2914983a 	sll	r10,r5,r4
1001202c:	88d2d83a 	srl	r9,r17,r3
10012030:	8908983a 	sll	r4,r17,r4
10012034:	28c6d83a 	srl	r3,r5,r3
10012038:	5262b03a 	or	r17,r10,r9
1001203c:	2008c03a 	cmpne	r4,r4,zero
10012040:	8922b03a 	or	r17,r17,r4
10012044:	3463c83a 	sub	r17,r6,r17
10012048:	40c7c83a 	sub	r3,r8,r3
1001204c:	344d803a 	cmpltu	r6,r6,r17
10012050:	198bc83a 	sub	r5,r3,r6
10012054:	1021883a 	mov	r16,r2
10012058:	3825883a 	mov	r18,r7
1001205c:	003f2006 	br	10011ce0 <__alt_data_end+0xf8011ce0>
10012060:	9886b03a 	or	r3,r19,r2
10012064:	1800141e 	bne	r3,zero,100120b8 <__adddf3+0x548>
10012068:	0007883a 	mov	r3,zero
1001206c:	000b883a 	mov	r5,zero
10012070:	0023883a 	mov	r17,zero
10012074:	0021883a 	mov	r16,zero
10012078:	003f3c06 	br	10011d6c <__alt_data_end+0xf8011d6c>
1001207c:	418cb03a 	or	r6,r8,r6
10012080:	300cc03a 	cmpne	r6,r6,zero
10012084:	0011883a 	mov	r8,zero
10012088:	003f5606 	br	10011de4 <__alt_data_end+0xf8011de4>
1001208c:	2c48b03a 	or	r4,r5,r17
10012090:	20003b26 	beq	r4,zero,10012180 <__adddf3+0x610>
10012094:	00c6303a 	nor	r3,zero,r3
10012098:	1800371e 	bne	r3,zero,10012178 <__adddf3+0x608>
1001209c:	3463c83a 	sub	r17,r6,r17
100120a0:	414bc83a 	sub	r5,r8,r5
100120a4:	344d803a 	cmpltu	r6,r6,r17
100120a8:	298bc83a 	sub	r5,r5,r6
100120ac:	1021883a 	mov	r16,r2
100120b0:	3825883a 	mov	r18,r7
100120b4:	003f0a06 	br	10011ce0 <__alt_data_end+0xf8011ce0>
100120b8:	1023883a 	mov	r17,r2
100120bc:	003f0d06 	br	10011cf4 <__alt_data_end+0xf8011cf4>
100120c0:	0007883a 	mov	r3,zero
100120c4:	000b883a 	mov	r5,zero
100120c8:	0023883a 	mov	r17,zero
100120cc:	003f2706 	br	10011d6c <__alt_data_end+0xf8011d6c>
100120d0:	0027883a 	mov	r19,zero
100120d4:	003fb706 	br	10011fb4 <__alt_data_end+0xf8011fb4>
100120d8:	0011883a 	mov	r8,zero
100120dc:	003fc206 	br	10011fe8 <__alt_data_end+0xf8011fe8>
100120e0:	2c44b03a 	or	r2,r5,r17
100120e4:	8000871e 	bne	r16,zero,10012304 <__adddf3+0x794>
100120e8:	1000b126 	beq	r2,zero,100123b0 <__adddf3+0x840>
100120ec:	4184b03a 	or	r2,r8,r6
100120f0:	103ebe26 	beq	r2,zero,10011bec <__alt_data_end+0xf8011bec>
100120f4:	3445883a 	add	r2,r6,r17
100120f8:	1463803a 	cmpltu	r17,r2,r17
100120fc:	414b883a 	add	r5,r8,r5
10012100:	2c4b883a 	add	r5,r5,r17
10012104:	28c0202c 	andhi	r3,r5,128
10012108:	1023883a 	mov	r17,r2
1001210c:	183f6326 	beq	r3,zero,10011e9c <__alt_data_end+0xf8011e9c>
10012110:	00bfe034 	movhi	r2,65408
10012114:	10bfffc4 	addi	r2,r2,-1
10012118:	2021883a 	mov	r16,r4
1001211c:	288a703a 	and	r5,r5,r2
10012120:	003eb206 	br	10011bec <__alt_data_end+0xf8011bec>
10012124:	2c44b03a 	or	r2,r5,r17
10012128:	8000251e 	bne	r16,zero,100121c0 <__adddf3+0x650>
1001212c:	10004b1e 	bne	r2,zero,1001225c <__adddf3+0x6ec>
10012130:	4184b03a 	or	r2,r8,r6
10012134:	103fe226 	beq	r2,zero,100120c0 <__alt_data_end+0xf80120c0>
10012138:	400b883a 	mov	r5,r8
1001213c:	3023883a 	mov	r17,r6
10012140:	3825883a 	mov	r18,r7
10012144:	003ea906 	br	10011bec <__alt_data_end+0xf8011bec>
10012148:	20bff804 	addi	r2,r4,-32
1001214c:	01c00804 	movi	r7,32
10012150:	4084d83a 	srl	r2,r8,r2
10012154:	21c07e26 	beq	r4,r7,10012350 <__adddf3+0x7e0>
10012158:	01c01004 	movi	r7,64
1001215c:	3909c83a 	sub	r4,r7,r4
10012160:	4110983a 	sll	r8,r8,r4
10012164:	418cb03a 	or	r6,r8,r6
10012168:	300cc03a 	cmpne	r6,r6,zero
1001216c:	308cb03a 	or	r6,r6,r2
10012170:	0011883a 	mov	r8,zero
10012174:	003f1b06 	br	10011de4 <__alt_data_end+0xf8011de4>
10012178:	0101ffc4 	movi	r4,2047
1001217c:	113fa41e 	bne	r2,r4,10012010 <__alt_data_end+0xf8012010>
10012180:	400b883a 	mov	r5,r8
10012184:	3023883a 	mov	r17,r6
10012188:	1021883a 	mov	r16,r2
1001218c:	3825883a 	mov	r18,r7
10012190:	003e9606 	br	10011bec <__alt_data_end+0xf8011bec>
10012194:	80001a1e 	bne	r16,zero,10012200 <__adddf3+0x690>
10012198:	2c4eb03a 	or	r7,r5,r17
1001219c:	38005526 	beq	r7,zero,100122f4 <__adddf3+0x784>
100121a0:	0108303a 	nor	r4,zero,r4
100121a4:	2000511e 	bne	r4,zero,100122ec <__adddf3+0x77c>
100121a8:	89a3883a 	add	r17,r17,r6
100121ac:	414b883a 	add	r5,r8,r5
100121b0:	898d803a 	cmpltu	r6,r17,r6
100121b4:	298b883a 	add	r5,r5,r6
100121b8:	1021883a 	mov	r16,r2
100121bc:	003f0e06 	br	10011df8 <__alt_data_end+0xf8011df8>
100121c0:	1000341e 	bne	r2,zero,10012294 <__adddf3+0x724>
100121c4:	4184b03a 	or	r2,r8,r6
100121c8:	10006f26 	beq	r2,zero,10012388 <__adddf3+0x818>
100121cc:	400b883a 	mov	r5,r8
100121d0:	3023883a 	mov	r17,r6
100121d4:	3825883a 	mov	r18,r7
100121d8:	0401ffc4 	movi	r16,2047
100121dc:	003e8306 	br	10011bec <__alt_data_end+0xf8011bec>
100121e0:	2c62b03a 	or	r17,r5,r17
100121e4:	8822c03a 	cmpne	r17,r17,zero
100121e8:	0007883a 	mov	r3,zero
100121ec:	003f9506 	br	10012044 <__alt_data_end+0xf8012044>
100121f0:	1021883a 	mov	r16,r2
100121f4:	000b883a 	mov	r5,zero
100121f8:	0023883a 	mov	r17,zero
100121fc:	003edb06 	br	10011d6c <__alt_data_end+0xf8011d6c>
10012200:	01c1ffc4 	movi	r7,2047
10012204:	11c03b26 	beq	r2,r7,100122f4 <__adddf3+0x784>
10012208:	0109c83a 	sub	r4,zero,r4
1001220c:	29402034 	orhi	r5,r5,128
10012210:	01c00e04 	movi	r7,56
10012214:	39006216 	blt	r7,r4,100123a0 <__adddf3+0x830>
10012218:	01c007c4 	movi	r7,31
1001221c:	39006b16 	blt	r7,r4,100123cc <__adddf3+0x85c>
10012220:	01c00804 	movi	r7,32
10012224:	390fc83a 	sub	r7,r7,r4
10012228:	29d4983a 	sll	r10,r5,r7
1001222c:	8912d83a 	srl	r9,r17,r4
10012230:	89ce983a 	sll	r7,r17,r7
10012234:	2908d83a 	srl	r4,r5,r4
10012238:	5262b03a 	or	r17,r10,r9
1001223c:	380ac03a 	cmpne	r5,r7,zero
10012240:	8962b03a 	or	r17,r17,r5
10012244:	89a3883a 	add	r17,r17,r6
10012248:	2211883a 	add	r8,r4,r8
1001224c:	898d803a 	cmpltu	r6,r17,r6
10012250:	418b883a 	add	r5,r8,r6
10012254:	1021883a 	mov	r16,r2
10012258:	003ee706 	br	10011df8 <__alt_data_end+0xf8011df8>
1001225c:	4184b03a 	or	r2,r8,r6
10012260:	103e6226 	beq	r2,zero,10011bec <__alt_data_end+0xf8011bec>
10012264:	8987c83a 	sub	r3,r17,r6
10012268:	88c9803a 	cmpltu	r4,r17,r3
1001226c:	2a05c83a 	sub	r2,r5,r8
10012270:	1105c83a 	sub	r2,r2,r4
10012274:	1100202c 	andhi	r4,r2,128
10012278:	203f0426 	beq	r4,zero,10011e8c <__alt_data_end+0xf8011e8c>
1001227c:	3463c83a 	sub	r17,r6,r17
10012280:	414bc83a 	sub	r5,r8,r5
10012284:	344d803a 	cmpltu	r6,r6,r17
10012288:	298bc83a 	sub	r5,r5,r6
1001228c:	3825883a 	mov	r18,r7
10012290:	003e5606 	br	10011bec <__alt_data_end+0xf8011bec>
10012294:	4184b03a 	or	r2,r8,r6
10012298:	10002b26 	beq	r2,zero,10012348 <__adddf3+0x7d8>
1001229c:	2804d0fa 	srli	r2,r5,3
100122a0:	8822d0fa 	srli	r17,r17,3
100122a4:	280a977a 	slli	r5,r5,29
100122a8:	10c0022c 	andhi	r3,r2,8
100122ac:	2c62b03a 	or	r17,r5,r17
100122b0:	18000826 	beq	r3,zero,100122d4 <__adddf3+0x764>
100122b4:	4008d0fa 	srli	r4,r8,3
100122b8:	20c0022c 	andhi	r3,r4,8
100122bc:	1800051e 	bne	r3,zero,100122d4 <__adddf3+0x764>
100122c0:	300cd0fa 	srli	r6,r6,3
100122c4:	4010977a 	slli	r8,r8,29
100122c8:	2005883a 	mov	r2,r4
100122cc:	3825883a 	mov	r18,r7
100122d0:	41a2b03a 	or	r17,r8,r6
100122d4:	880ad77a 	srli	r5,r17,29
100122d8:	100490fa 	slli	r2,r2,3
100122dc:	882290fa 	slli	r17,r17,3
100122e0:	0401ffc4 	movi	r16,2047
100122e4:	288ab03a 	or	r5,r5,r2
100122e8:	003e4006 	br	10011bec <__alt_data_end+0xf8011bec>
100122ec:	01c1ffc4 	movi	r7,2047
100122f0:	11ffc71e 	bne	r2,r7,10012210 <__alt_data_end+0xf8012210>
100122f4:	400b883a 	mov	r5,r8
100122f8:	3023883a 	mov	r17,r6
100122fc:	1021883a 	mov	r16,r2
10012300:	003e3a06 	br	10011bec <__alt_data_end+0xf8011bec>
10012304:	10002d26 	beq	r2,zero,100123bc <__adddf3+0x84c>
10012308:	4184b03a 	or	r2,r8,r6
1001230c:	10000e26 	beq	r2,zero,10012348 <__adddf3+0x7d8>
10012310:	2804d0fa 	srli	r2,r5,3
10012314:	8822d0fa 	srli	r17,r17,3
10012318:	280a977a 	slli	r5,r5,29
1001231c:	10c0022c 	andhi	r3,r2,8
10012320:	2c62b03a 	or	r17,r5,r17
10012324:	183feb26 	beq	r3,zero,100122d4 <__alt_data_end+0xf80122d4>
10012328:	4008d0fa 	srli	r4,r8,3
1001232c:	20c0022c 	andhi	r3,r4,8
10012330:	183fe81e 	bne	r3,zero,100122d4 <__alt_data_end+0xf80122d4>
10012334:	300cd0fa 	srli	r6,r6,3
10012338:	4010977a 	slli	r8,r8,29
1001233c:	2005883a 	mov	r2,r4
10012340:	41a2b03a 	or	r17,r8,r6
10012344:	003fe306 	br	100122d4 <__alt_data_end+0xf80122d4>
10012348:	0401ffc4 	movi	r16,2047
1001234c:	003e2706 	br	10011bec <__alt_data_end+0xf8011bec>
10012350:	0011883a 	mov	r8,zero
10012354:	003f8306 	br	10012164 <__alt_data_end+0xf8012164>
10012358:	193ff804 	addi	r4,r3,-32
1001235c:	02400804 	movi	r9,32
10012360:	2908d83a 	srl	r4,r5,r4
10012364:	1a402526 	beq	r3,r9,100123fc <__adddf3+0x88c>
10012368:	02401004 	movi	r9,64
1001236c:	48c7c83a 	sub	r3,r9,r3
10012370:	28ca983a 	sll	r5,r5,r3
10012374:	2c62b03a 	or	r17,r5,r17
10012378:	8822c03a 	cmpne	r17,r17,zero
1001237c:	8922b03a 	or	r17,r17,r4
10012380:	0007883a 	mov	r3,zero
10012384:	003f2f06 	br	10012044 <__alt_data_end+0xf8012044>
10012388:	01402034 	movhi	r5,128
1001238c:	0007883a 	mov	r3,zero
10012390:	297fffc4 	addi	r5,r5,-1
10012394:	047ffe04 	movi	r17,-8
10012398:	0401ffc4 	movi	r16,2047
1001239c:	003e7306 	br	10011d6c <__alt_data_end+0xf8011d6c>
100123a0:	2c62b03a 	or	r17,r5,r17
100123a4:	8822c03a 	cmpne	r17,r17,zero
100123a8:	0009883a 	mov	r4,zero
100123ac:	003fa506 	br	10012244 <__alt_data_end+0xf8012244>
100123b0:	400b883a 	mov	r5,r8
100123b4:	3023883a 	mov	r17,r6
100123b8:	003e0c06 	br	10011bec <__alt_data_end+0xf8011bec>
100123bc:	400b883a 	mov	r5,r8
100123c0:	3023883a 	mov	r17,r6
100123c4:	0401ffc4 	movi	r16,2047
100123c8:	003e0806 	br	10011bec <__alt_data_end+0xf8011bec>
100123cc:	21fff804 	addi	r7,r4,-32
100123d0:	02400804 	movi	r9,32
100123d4:	29ced83a 	srl	r7,r5,r7
100123d8:	22400a26 	beq	r4,r9,10012404 <__adddf3+0x894>
100123dc:	02401004 	movi	r9,64
100123e0:	4909c83a 	sub	r4,r9,r4
100123e4:	290a983a 	sll	r5,r5,r4
100123e8:	2c62b03a 	or	r17,r5,r17
100123ec:	8822c03a 	cmpne	r17,r17,zero
100123f0:	89e2b03a 	or	r17,r17,r7
100123f4:	0009883a 	mov	r4,zero
100123f8:	003f9206 	br	10012244 <__alt_data_end+0xf8012244>
100123fc:	000b883a 	mov	r5,zero
10012400:	003fdc06 	br	10012374 <__alt_data_end+0xf8012374>
10012404:	000b883a 	mov	r5,zero
10012408:	003ff706 	br	100123e8 <__alt_data_end+0xf80123e8>

1001240c <__divdf3>:
1001240c:	defff004 	addi	sp,sp,-64
10012410:	dc800815 	stw	r18,32(sp)
10012414:	2824d53a 	srli	r18,r5,20
10012418:	dd800c15 	stw	r22,48(sp)
1001241c:	282cd7fa 	srli	r22,r5,31
10012420:	dc000615 	stw	r16,24(sp)
10012424:	04000434 	movhi	r16,16
10012428:	df000e15 	stw	fp,56(sp)
1001242c:	dd000a15 	stw	r20,40(sp)
10012430:	dcc00915 	stw	r19,36(sp)
10012434:	dc400715 	stw	r17,28(sp)
10012438:	843fffc4 	addi	r16,r16,-1
1001243c:	dfc00f15 	stw	ra,60(sp)
10012440:	ddc00d15 	stw	r23,52(sp)
10012444:	dd400b15 	stw	r21,44(sp)
10012448:	9481ffcc 	andi	r18,r18,2047
1001244c:	2029883a 	mov	r20,r4
10012450:	2027883a 	mov	r19,r4
10012454:	2c22703a 	and	r17,r5,r16
10012458:	b7003fcc 	andi	fp,r22,255
1001245c:	90005e26 	beq	r18,zero,100125d8 <__divdf3+0x1cc>
10012460:	0081ffc4 	movi	r2,2047
10012464:	90803526 	beq	r18,r2,1001253c <__divdf3+0x130>
10012468:	8c000434 	orhi	r16,r17,16
1001246c:	2004d77a 	srli	r2,r4,29
10012470:	802090fa 	slli	r16,r16,3
10012474:	202690fa 	slli	r19,r4,3
10012478:	94bf0044 	addi	r18,r18,-1023
1001247c:	80a2b03a 	or	r17,r16,r2
10012480:	0029883a 	mov	r20,zero
10012484:	0011883a 	mov	r8,zero
10012488:	380ad53a 	srli	r5,r7,20
1001248c:	382ed7fa 	srli	r23,r7,31
10012490:	04000434 	movhi	r16,16
10012494:	843fffc4 	addi	r16,r16,-1
10012498:	2941ffcc 	andi	r5,r5,2047
1001249c:	302b883a 	mov	r21,r6
100124a0:	3c20703a 	and	r16,r7,r16
100124a4:	ba403fcc 	andi	r9,r23,255
100124a8:	28006726 	beq	r5,zero,10012648 <__divdf3+0x23c>
100124ac:	0081ffc4 	movi	r2,2047
100124b0:	28805f26 	beq	r5,r2,10012630 <__divdf3+0x224>
100124b4:	84000434 	orhi	r16,r16,16
100124b8:	3004d77a 	srli	r2,r6,29
100124bc:	802090fa 	slli	r16,r16,3
100124c0:	302a90fa 	slli	r21,r6,3
100124c4:	297f0044 	addi	r5,r5,-1023
100124c8:	80a0b03a 	or	r16,r16,r2
100124cc:	000f883a 	mov	r7,zero
100124d0:	3d06b03a 	or	r3,r7,r20
100124d4:	180690ba 	slli	r3,r3,2
100124d8:	00840074 	movhi	r2,4097
100124dc:	10893f04 	addi	r2,r2,9468
100124e0:	1885883a 	add	r2,r3,r2
100124e4:	10800017 	ldw	r2,0(r2)
100124e8:	b5c8f03a 	xor	r4,r22,r23
100124ec:	200d883a 	mov	r6,r4
100124f0:	25003fcc 	andi	r20,r4,255
100124f4:	9165c83a 	sub	r18,r18,r5
100124f8:	1000683a 	jmp	r2
100124fc:	10012744 	addi	zero,r2,1181
10012500:	10012574 	orhi	zero,r2,1173
10012504:	10012708 	cmpgei	zero,r2,1180
10012508:	10012558 	cmpnei	zero,r2,1173
1001250c:	10012708 	cmpgei	zero,r2,1180
10012510:	100126dc 	xori	zero,r2,1179
10012514:	10012708 	cmpgei	zero,r2,1180
10012518:	10012558 	cmpnei	zero,r2,1173
1001251c:	10012574 	orhi	zero,r2,1173
10012520:	10012574 	orhi	zero,r2,1173
10012524:	100126dc 	xori	zero,r2,1179
10012528:	10012558 	cmpnei	zero,r2,1173
1001252c:	10012568 	cmpgeui	zero,r2,1173
10012530:	10012568 	cmpgeui	zero,r2,1173
10012534:	10012568 	cmpgeui	zero,r2,1173
10012538:	10012718 	cmpnei	zero,r2,1180
1001253c:	8904b03a 	or	r2,r17,r4
10012540:	1000631e 	bne	r2,zero,100126d0 <__divdf3+0x2c4>
10012544:	05000204 	movi	r20,8
10012548:	0023883a 	mov	r17,zero
1001254c:	0027883a 	mov	r19,zero
10012550:	02000084 	movi	r8,2
10012554:	003fcc06 	br	10012488 <__alt_data_end+0xf8012488>
10012558:	8023883a 	mov	r17,r16
1001255c:	a827883a 	mov	r19,r21
10012560:	4839883a 	mov	fp,r9
10012564:	3811883a 	mov	r8,r7
10012568:	00800084 	movi	r2,2
1001256c:	4081531e 	bne	r8,r2,10012abc <__divdf3+0x6b0>
10012570:	e029883a 	mov	r20,fp
10012574:	a180004c 	andi	r6,r20,1
10012578:	0201ffc4 	movi	r8,2047
1001257c:	000b883a 	mov	r5,zero
10012580:	0027883a 	mov	r19,zero
10012584:	4010953a 	slli	r8,r8,20
10012588:	30c03fcc 	andi	r3,r6,255
1001258c:	04000434 	movhi	r16,16
10012590:	180697fa 	slli	r3,r3,31
10012594:	843fffc4 	addi	r16,r16,-1
10012598:	2c20703a 	and	r16,r5,r16
1001259c:	8220b03a 	or	r16,r16,r8
100125a0:	80c6b03a 	or	r3,r16,r3
100125a4:	9805883a 	mov	r2,r19
100125a8:	dfc00f17 	ldw	ra,60(sp)
100125ac:	df000e17 	ldw	fp,56(sp)
100125b0:	ddc00d17 	ldw	r23,52(sp)
100125b4:	dd800c17 	ldw	r22,48(sp)
100125b8:	dd400b17 	ldw	r21,44(sp)
100125bc:	dd000a17 	ldw	r20,40(sp)
100125c0:	dcc00917 	ldw	r19,36(sp)
100125c4:	dc800817 	ldw	r18,32(sp)
100125c8:	dc400717 	ldw	r17,28(sp)
100125cc:	dc000617 	ldw	r16,24(sp)
100125d0:	dec01004 	addi	sp,sp,64
100125d4:	f800283a 	ret
100125d8:	8904b03a 	or	r2,r17,r4
100125dc:	10003726 	beq	r2,zero,100126bc <__divdf3+0x2b0>
100125e0:	88014d26 	beq	r17,zero,10012b18 <__divdf3+0x70c>
100125e4:	8809883a 	mov	r4,r17
100125e8:	d9800215 	stw	r6,8(sp)
100125ec:	d9c00515 	stw	r7,20(sp)
100125f0:	00079700 	call	10007970 <__clzsi2>
100125f4:	d9800217 	ldw	r6,8(sp)
100125f8:	d9c00517 	ldw	r7,20(sp)
100125fc:	1007883a 	mov	r3,r2
10012600:	01000a04 	movi	r4,40
10012604:	1cfffe04 	addi	r19,r3,-8
10012608:	20c9c83a 	sub	r4,r4,r3
1001260c:	8cca983a 	sll	r5,r17,r19
10012610:	a108d83a 	srl	r4,r20,r4
10012614:	a4e6983a 	sll	r19,r20,r19
10012618:	2162b03a 	or	r17,r4,r5
1001261c:	04bf0344 	movi	r18,-1011
10012620:	90e5c83a 	sub	r18,r18,r3
10012624:	0029883a 	mov	r20,zero
10012628:	0011883a 	mov	r8,zero
1001262c:	003f9606 	br	10012488 <__alt_data_end+0xf8012488>
10012630:	8184b03a 	or	r2,r16,r6
10012634:	10001f1e 	bne	r2,zero,100126b4 <__divdf3+0x2a8>
10012638:	0021883a 	mov	r16,zero
1001263c:	002b883a 	mov	r21,zero
10012640:	01c00084 	movi	r7,2
10012644:	003fa206 	br	100124d0 <__alt_data_end+0xf80124d0>
10012648:	8184b03a 	or	r2,r16,r6
1001264c:	10001526 	beq	r2,zero,100126a4 <__divdf3+0x298>
10012650:	80013d26 	beq	r16,zero,10012b48 <__divdf3+0x73c>
10012654:	8009883a 	mov	r4,r16
10012658:	d9800215 	stw	r6,8(sp)
1001265c:	da000315 	stw	r8,12(sp)
10012660:	da400415 	stw	r9,16(sp)
10012664:	00079700 	call	10007970 <__clzsi2>
10012668:	d9800217 	ldw	r6,8(sp)
1001266c:	da000317 	ldw	r8,12(sp)
10012670:	da400417 	ldw	r9,16(sp)
10012674:	1007883a 	mov	r3,r2
10012678:	01000a04 	movi	r4,40
1001267c:	1d7ffe04 	addi	r21,r3,-8
10012680:	20c9c83a 	sub	r4,r4,r3
10012684:	8560983a 	sll	r16,r16,r21
10012688:	3108d83a 	srl	r4,r6,r4
1001268c:	356a983a 	sll	r21,r6,r21
10012690:	2420b03a 	or	r16,r4,r16
10012694:	017f0344 	movi	r5,-1011
10012698:	28cbc83a 	sub	r5,r5,r3
1001269c:	000f883a 	mov	r7,zero
100126a0:	003f8b06 	br	100124d0 <__alt_data_end+0xf80124d0>
100126a4:	0021883a 	mov	r16,zero
100126a8:	002b883a 	mov	r21,zero
100126ac:	01c00044 	movi	r7,1
100126b0:	003f8706 	br	100124d0 <__alt_data_end+0xf80124d0>
100126b4:	01c000c4 	movi	r7,3
100126b8:	003f8506 	br	100124d0 <__alt_data_end+0xf80124d0>
100126bc:	05000104 	movi	r20,4
100126c0:	0023883a 	mov	r17,zero
100126c4:	0027883a 	mov	r19,zero
100126c8:	02000044 	movi	r8,1
100126cc:	003f6e06 	br	10012488 <__alt_data_end+0xf8012488>
100126d0:	05000304 	movi	r20,12
100126d4:	020000c4 	movi	r8,3
100126d8:	003f6b06 	br	10012488 <__alt_data_end+0xf8012488>
100126dc:	01400434 	movhi	r5,16
100126e0:	000d883a 	mov	r6,zero
100126e4:	297fffc4 	addi	r5,r5,-1
100126e8:	04ffffc4 	movi	r19,-1
100126ec:	0201ffc4 	movi	r8,2047
100126f0:	003fa406 	br	10012584 <__alt_data_end+0xf8012584>
100126f4:	043f0084 	movi	r16,-1022
100126f8:	84a1c83a 	sub	r16,r16,r18
100126fc:	00800e04 	movi	r2,56
10012700:	14014d0e 	bge	r2,r16,10012c38 <__divdf3+0x82c>
10012704:	a180004c 	andi	r6,r20,1
10012708:	0011883a 	mov	r8,zero
1001270c:	000b883a 	mov	r5,zero
10012710:	0027883a 	mov	r19,zero
10012714:	003f9b06 	br	10012584 <__alt_data_end+0xf8012584>
10012718:	8880022c 	andhi	r2,r17,8
1001271c:	1000f026 	beq	r2,zero,10012ae0 <__divdf3+0x6d4>
10012720:	8080022c 	andhi	r2,r16,8
10012724:	1000ee1e 	bne	r2,zero,10012ae0 <__divdf3+0x6d4>
10012728:	00800434 	movhi	r2,16
1001272c:	81400234 	orhi	r5,r16,8
10012730:	10bfffc4 	addi	r2,r2,-1
10012734:	b80d883a 	mov	r6,r23
10012738:	288a703a 	and	r5,r5,r2
1001273c:	a827883a 	mov	r19,r21
10012740:	003fea06 	br	100126ec <__alt_data_end+0xf80126ec>
10012744:	84411c36 	bltu	r16,r17,10012bb8 <__divdf3+0x7ac>
10012748:	8c011a26 	beq	r17,r16,10012bb4 <__divdf3+0x7a8>
1001274c:	94bfffc4 	addi	r18,r18,-1
10012750:	dcc00015 	stw	r19,0(sp)
10012754:	8811883a 	mov	r8,r17
10012758:	002d883a 	mov	r22,zero
1001275c:	a80cd63a 	srli	r6,r21,24
10012760:	8020923a 	slli	r16,r16,8
10012764:	a82a923a 	slli	r21,r21,8
10012768:	4009883a 	mov	r4,r8
1001276c:	342eb03a 	or	r23,r6,r16
10012770:	dd400115 	stw	r21,4(sp)
10012774:	b82ad43a 	srli	r21,r23,16
10012778:	da000315 	stw	r8,12(sp)
1001277c:	bcffffcc 	andi	r19,r23,65535
10012780:	a80b883a 	mov	r5,r21
10012784:	000585c0 	call	1000585c <__udivsi3>
10012788:	1009883a 	mov	r4,r2
1001278c:	980b883a 	mov	r5,r19
10012790:	1023883a 	mov	r17,r2
10012794:	000586c0 	call	1000586c <__mulsi3>
10012798:	da000317 	ldw	r8,12(sp)
1001279c:	a80b883a 	mov	r5,r21
100127a0:	1039883a 	mov	fp,r2
100127a4:	4009883a 	mov	r4,r8
100127a8:	00058640 	call	10005864 <__umodsi3>
100127ac:	d8c00017 	ldw	r3,0(sp)
100127b0:	1004943a 	slli	r2,r2,16
100127b4:	1810d43a 	srli	r8,r3,16
100127b8:	120eb03a 	or	r7,r2,r8
100127bc:	3f00062e 	bgeu	r7,fp,100127d8 <__divdf3+0x3cc>
100127c0:	3dcf883a 	add	r7,r7,r23
100127c4:	88bfffc4 	addi	r2,r17,-1
100127c8:	3dc10a36 	bltu	r7,r23,10012bf4 <__divdf3+0x7e8>
100127cc:	3f01092e 	bgeu	r7,fp,10012bf4 <__divdf3+0x7e8>
100127d0:	8c7fff84 	addi	r17,r17,-2
100127d4:	3dcf883a 	add	r7,r7,r23
100127d8:	3f39c83a 	sub	fp,r7,fp
100127dc:	e009883a 	mov	r4,fp
100127e0:	a80b883a 	mov	r5,r21
100127e4:	000585c0 	call	1000585c <__udivsi3>
100127e8:	1009883a 	mov	r4,r2
100127ec:	980b883a 	mov	r5,r19
100127f0:	1021883a 	mov	r16,r2
100127f4:	000586c0 	call	1000586c <__mulsi3>
100127f8:	e009883a 	mov	r4,fp
100127fc:	a80b883a 	mov	r5,r21
10012800:	d8800315 	stw	r2,12(sp)
10012804:	00058640 	call	10005864 <__umodsi3>
10012808:	d9000017 	ldw	r4,0(sp)
1001280c:	1004943a 	slli	r2,r2,16
10012810:	da000317 	ldw	r8,12(sp)
10012814:	20ffffcc 	andi	r3,r4,65535
10012818:	10ceb03a 	or	r7,r2,r3
1001281c:	3a00062e 	bgeu	r7,r8,10012838 <__divdf3+0x42c>
10012820:	3dcf883a 	add	r7,r7,r23
10012824:	80bfffc4 	addi	r2,r16,-1
10012828:	3dc0f036 	bltu	r7,r23,10012bec <__divdf3+0x7e0>
1001282c:	3a00ef2e 	bgeu	r7,r8,10012bec <__divdf3+0x7e0>
10012830:	843fff84 	addi	r16,r16,-2
10012834:	3dcf883a 	add	r7,r7,r23
10012838:	d8c00117 	ldw	r3,4(sp)
1001283c:	8822943a 	slli	r17,r17,16
10012840:	3a0fc83a 	sub	r7,r7,r8
10012844:	1806d43a 	srli	r3,r3,16
10012848:	8462b03a 	or	r17,r16,r17
1001284c:	8affffcc 	andi	r11,r17,65535
10012850:	d8c00015 	stw	r3,0(sp)
10012854:	d8c00117 	ldw	r3,4(sp)
10012858:	8820d43a 	srli	r16,r17,16
1001285c:	5809883a 	mov	r4,r11
10012860:	1f3fffcc 	andi	fp,r3,65535
10012864:	e00b883a 	mov	r5,fp
10012868:	d9c00515 	stw	r7,20(sp)
1001286c:	dac00215 	stw	r11,8(sp)
10012870:	000586c0 	call	1000586c <__mulsi3>
10012874:	8009883a 	mov	r4,r16
10012878:	e00b883a 	mov	r5,fp
1001287c:	d8800415 	stw	r2,16(sp)
10012880:	000586c0 	call	1000586c <__mulsi3>
10012884:	d9400017 	ldw	r5,0(sp)
10012888:	8009883a 	mov	r4,r16
1001288c:	d8800315 	stw	r2,12(sp)
10012890:	000586c0 	call	1000586c <__mulsi3>
10012894:	dac00217 	ldw	r11,8(sp)
10012898:	d9400017 	ldw	r5,0(sp)
1001289c:	d8800215 	stw	r2,8(sp)
100128a0:	5809883a 	mov	r4,r11
100128a4:	000586c0 	call	1000586c <__mulsi3>
100128a8:	da400417 	ldw	r9,16(sp)
100128ac:	da800317 	ldw	r10,12(sp)
100128b0:	d9c00517 	ldw	r7,20(sp)
100128b4:	480ad43a 	srli	r5,r9,16
100128b8:	5085883a 	add	r2,r10,r2
100128bc:	db000217 	ldw	r12,8(sp)
100128c0:	1151883a 	add	r8,r2,r5
100128c4:	4280022e 	bgeu	r8,r10,100128d0 <__divdf3+0x4c4>
100128c8:	00800074 	movhi	r2,1
100128cc:	6099883a 	add	r12,r12,r2
100128d0:	400ad43a 	srli	r5,r8,16
100128d4:	4010943a 	slli	r8,r8,16
100128d8:	4c3fffcc 	andi	r16,r9,65535
100128dc:	6149883a 	add	r4,r12,r5
100128e0:	4411883a 	add	r8,r8,r16
100128e4:	3900a736 	bltu	r7,r4,10012b84 <__divdf3+0x778>
100128e8:	3900c426 	beq	r7,r4,10012bfc <__divdf3+0x7f0>
100128ec:	3909c83a 	sub	r4,r7,r4
100128f0:	b221c83a 	sub	r16,r22,r8
100128f4:	b42d803a 	cmpltu	r22,r22,r16
100128f8:	25adc83a 	sub	r22,r4,r22
100128fc:	b5c0c626 	beq	r22,r23,10012c18 <__divdf3+0x80c>
10012900:	b009883a 	mov	r4,r22
10012904:	a80b883a 	mov	r5,r21
10012908:	000585c0 	call	1000585c <__udivsi3>
1001290c:	1009883a 	mov	r4,r2
10012910:	980b883a 	mov	r5,r19
10012914:	d8800315 	stw	r2,12(sp)
10012918:	000586c0 	call	1000586c <__mulsi3>
1001291c:	a80b883a 	mov	r5,r21
10012920:	b009883a 	mov	r4,r22
10012924:	d8800415 	stw	r2,16(sp)
10012928:	00058640 	call	10005864 <__umodsi3>
1001292c:	1004943a 	slli	r2,r2,16
10012930:	800ed43a 	srli	r7,r16,16
10012934:	da400417 	ldw	r9,16(sp)
10012938:	da000317 	ldw	r8,12(sp)
1001293c:	11cab03a 	or	r5,r2,r7
10012940:	2a40062e 	bgeu	r5,r9,1001295c <__divdf3+0x550>
10012944:	2dcb883a 	add	r5,r5,r23
10012948:	40bfffc4 	addi	r2,r8,-1
1001294c:	2dc0b436 	bltu	r5,r23,10012c20 <__divdf3+0x814>
10012950:	2a40b32e 	bgeu	r5,r9,10012c20 <__divdf3+0x814>
10012954:	423fff84 	addi	r8,r8,-2
10012958:	2dcb883a 	add	r5,r5,r23
1001295c:	2a6dc83a 	sub	r22,r5,r9
10012960:	b009883a 	mov	r4,r22
10012964:	a80b883a 	mov	r5,r21
10012968:	da000315 	stw	r8,12(sp)
1001296c:	000585c0 	call	1000585c <__udivsi3>
10012970:	980b883a 	mov	r5,r19
10012974:	1009883a 	mov	r4,r2
10012978:	d8800415 	stw	r2,16(sp)
1001297c:	000586c0 	call	1000586c <__mulsi3>
10012980:	b009883a 	mov	r4,r22
10012984:	a80b883a 	mov	r5,r21
10012988:	1027883a 	mov	r19,r2
1001298c:	00058640 	call	10005864 <__umodsi3>
10012990:	1004943a 	slli	r2,r2,16
10012994:	843fffcc 	andi	r16,r16,65535
10012998:	da000317 	ldw	r8,12(sp)
1001299c:	140eb03a 	or	r7,r2,r16
100129a0:	da400417 	ldw	r9,16(sp)
100129a4:	3cc0062e 	bgeu	r7,r19,100129c0 <__divdf3+0x5b4>
100129a8:	3dcf883a 	add	r7,r7,r23
100129ac:	48bfffc4 	addi	r2,r9,-1
100129b0:	3dc09d36 	bltu	r7,r23,10012c28 <__divdf3+0x81c>
100129b4:	3cc09c2e 	bgeu	r7,r19,10012c28 <__divdf3+0x81c>
100129b8:	4a7fff84 	addi	r9,r9,-2
100129bc:	3dcf883a 	add	r7,r7,r23
100129c0:	4010943a 	slli	r8,r8,16
100129c4:	3cebc83a 	sub	r21,r7,r19
100129c8:	e00b883a 	mov	r5,fp
100129cc:	4a26b03a 	or	r19,r9,r8
100129d0:	99ffffcc 	andi	r7,r19,65535
100129d4:	9820d43a 	srli	r16,r19,16
100129d8:	3809883a 	mov	r4,r7
100129dc:	d9c00515 	stw	r7,20(sp)
100129e0:	000586c0 	call	1000586c <__mulsi3>
100129e4:	8009883a 	mov	r4,r16
100129e8:	e00b883a 	mov	r5,fp
100129ec:	102d883a 	mov	r22,r2
100129f0:	000586c0 	call	1000586c <__mulsi3>
100129f4:	d9400017 	ldw	r5,0(sp)
100129f8:	8009883a 	mov	r4,r16
100129fc:	1039883a 	mov	fp,r2
10012a00:	000586c0 	call	1000586c <__mulsi3>
10012a04:	d9c00517 	ldw	r7,20(sp)
10012a08:	d9400017 	ldw	r5,0(sp)
10012a0c:	1021883a 	mov	r16,r2
10012a10:	3809883a 	mov	r4,r7
10012a14:	000586c0 	call	1000586c <__mulsi3>
10012a18:	b008d43a 	srli	r4,r22,16
10012a1c:	e085883a 	add	r2,fp,r2
10012a20:	1109883a 	add	r4,r2,r4
10012a24:	2700022e 	bgeu	r4,fp,10012a30 <__divdf3+0x624>
10012a28:	00800074 	movhi	r2,1
10012a2c:	80a1883a 	add	r16,r16,r2
10012a30:	200ad43a 	srli	r5,r4,16
10012a34:	2008943a 	slli	r4,r4,16
10012a38:	b5bfffcc 	andi	r22,r22,65535
10012a3c:	8145883a 	add	r2,r16,r5
10012a40:	2589883a 	add	r4,r4,r22
10012a44:	a8802c36 	bltu	r21,r2,10012af8 <__divdf3+0x6ec>
10012a48:	a880a426 	beq	r21,r2,10012cdc <__divdf3+0x8d0>
10012a4c:	9cc00054 	ori	r19,r19,1
10012a50:	9200ffc4 	addi	r8,r18,1023
10012a54:	023f270e 	bge	zero,r8,100126f4 <__alt_data_end+0xf80126f4>
10012a58:	988001cc 	andi	r2,r19,7
10012a5c:	10000726 	beq	r2,zero,10012a7c <__divdf3+0x670>
10012a60:	990003cc 	andi	r4,r19,15
10012a64:	00800104 	movi	r2,4
10012a68:	20800426 	beq	r4,r2,10012a7c <__divdf3+0x670>
10012a6c:	9885883a 	add	r2,r19,r2
10012a70:	14e7803a 	cmpltu	r19,r2,r19
10012a74:	8ce3883a 	add	r17,r17,r19
10012a78:	1027883a 	mov	r19,r2
10012a7c:	8880402c 	andhi	r2,r17,256
10012a80:	10000426 	beq	r2,zero,10012a94 <__divdf3+0x688>
10012a84:	00bfc034 	movhi	r2,65280
10012a88:	10bfffc4 	addi	r2,r2,-1
10012a8c:	92010004 	addi	r8,r18,1024
10012a90:	88a2703a 	and	r17,r17,r2
10012a94:	0081ff84 	movi	r2,2046
10012a98:	123eb616 	blt	r2,r8,10012574 <__alt_data_end+0xf8012574>
10012a9c:	9826d0fa 	srli	r19,r19,3
10012aa0:	8804977a 	slli	r2,r17,29
10012aa4:	8820927a 	slli	r16,r17,9
10012aa8:	4201ffcc 	andi	r8,r8,2047
10012aac:	14e6b03a 	or	r19,r2,r19
10012ab0:	800ad33a 	srli	r5,r16,12
10012ab4:	a180004c 	andi	r6,r20,1
10012ab8:	003eb206 	br	10012584 <__alt_data_end+0xf8012584>
10012abc:	008000c4 	movi	r2,3
10012ac0:	4080ac26 	beq	r8,r2,10012d74 <__divdf3+0x968>
10012ac4:	00800044 	movi	r2,1
10012ac8:	4080591e 	bne	r8,r2,10012c30 <__divdf3+0x824>
10012acc:	e00d883a 	mov	r6,fp
10012ad0:	0011883a 	mov	r8,zero
10012ad4:	000b883a 	mov	r5,zero
10012ad8:	0027883a 	mov	r19,zero
10012adc:	003ea906 	br	10012584 <__alt_data_end+0xf8012584>
10012ae0:	00800434 	movhi	r2,16
10012ae4:	89400234 	orhi	r5,r17,8
10012ae8:	10bfffc4 	addi	r2,r2,-1
10012aec:	b00d883a 	mov	r6,r22
10012af0:	288a703a 	and	r5,r5,r2
10012af4:	003efd06 	br	100126ec <__alt_data_end+0xf80126ec>
10012af8:	adcf883a 	add	r7,r21,r23
10012afc:	997fffc4 	addi	r5,r19,-1
10012b00:	3dc0412e 	bgeu	r7,r23,10012c08 <__divdf3+0x7fc>
10012b04:	2827883a 	mov	r19,r5
10012b08:	38bfd01e 	bne	r7,r2,10012a4c <__alt_data_end+0xf8012a4c>
10012b0c:	d8c00117 	ldw	r3,4(sp)
10012b10:	193fce1e 	bne	r3,r4,10012a4c <__alt_data_end+0xf8012a4c>
10012b14:	003fce06 	br	10012a50 <__alt_data_end+0xf8012a50>
10012b18:	d9800215 	stw	r6,8(sp)
10012b1c:	d9c00515 	stw	r7,20(sp)
10012b20:	00079700 	call	10007970 <__clzsi2>
10012b24:	10c00804 	addi	r3,r2,32
10012b28:	010009c4 	movi	r4,39
10012b2c:	d9800217 	ldw	r6,8(sp)
10012b30:	d9c00517 	ldw	r7,20(sp)
10012b34:	20feb20e 	bge	r4,r3,10012600 <__alt_data_end+0xf8012600>
10012b38:	117ffe04 	addi	r5,r2,-8
10012b3c:	a162983a 	sll	r17,r20,r5
10012b40:	0027883a 	mov	r19,zero
10012b44:	003eb506 	br	1001261c <__alt_data_end+0xf801261c>
10012b48:	3009883a 	mov	r4,r6
10012b4c:	d9800215 	stw	r6,8(sp)
10012b50:	da000315 	stw	r8,12(sp)
10012b54:	da400415 	stw	r9,16(sp)
10012b58:	00079700 	call	10007970 <__clzsi2>
10012b5c:	10c00804 	addi	r3,r2,32
10012b60:	010009c4 	movi	r4,39
10012b64:	d9800217 	ldw	r6,8(sp)
10012b68:	da000317 	ldw	r8,12(sp)
10012b6c:	da400417 	ldw	r9,16(sp)
10012b70:	20fec10e 	bge	r4,r3,10012678 <__alt_data_end+0xf8012678>
10012b74:	10bffe04 	addi	r2,r2,-8
10012b78:	a8a0983a 	sll	r16,r21,r2
10012b7c:	002b883a 	mov	r21,zero
10012b80:	003ec406 	br	10012694 <__alt_data_end+0xf8012694>
10012b84:	d8c00117 	ldw	r3,4(sp)
10012b88:	b0ed883a 	add	r22,r22,r3
10012b8c:	b0c5803a 	cmpltu	r2,r22,r3
10012b90:	15c5883a 	add	r2,r2,r23
10012b94:	11cf883a 	add	r7,r2,r7
10012b98:	88bfffc4 	addi	r2,r17,-1
10012b9c:	b9c00d2e 	bgeu	r23,r7,10012bd4 <__divdf3+0x7c8>
10012ba0:	39003f36 	bltu	r7,r4,10012ca0 <__divdf3+0x894>
10012ba4:	21c06a26 	beq	r4,r7,10012d50 <__divdf3+0x944>
10012ba8:	3909c83a 	sub	r4,r7,r4
10012bac:	1023883a 	mov	r17,r2
10012bb0:	003f4f06 	br	100128f0 <__alt_data_end+0xf80128f0>
10012bb4:	9d7ee536 	bltu	r19,r21,1001274c <__alt_data_end+0xf801274c>
10012bb8:	982ed07a 	srli	r23,r19,1
10012bbc:	880497fa 	slli	r2,r17,31
10012bc0:	8810d07a 	srli	r8,r17,1
10012bc4:	982c97fa 	slli	r22,r19,31
10012bc8:	b884b03a 	or	r2,r23,r2
10012bcc:	d8800015 	stw	r2,0(sp)
10012bd0:	003ee206 	br	1001275c <__alt_data_end+0xf801275c>
10012bd4:	3dfff41e 	bne	r7,r23,10012ba8 <__alt_data_end+0xf8012ba8>
10012bd8:	d8c00117 	ldw	r3,4(sp)
10012bdc:	b0fff02e 	bgeu	r22,r3,10012ba0 <__alt_data_end+0xf8012ba0>
10012be0:	b909c83a 	sub	r4,r23,r4
10012be4:	1023883a 	mov	r17,r2
10012be8:	003f4106 	br	100128f0 <__alt_data_end+0xf80128f0>
10012bec:	1021883a 	mov	r16,r2
10012bf0:	003f1106 	br	10012838 <__alt_data_end+0xf8012838>
10012bf4:	1023883a 	mov	r17,r2
10012bf8:	003ef706 	br	100127d8 <__alt_data_end+0xf80127d8>
10012bfc:	b23fe136 	bltu	r22,r8,10012b84 <__alt_data_end+0xf8012b84>
10012c00:	0009883a 	mov	r4,zero
10012c04:	003f3a06 	br	100128f0 <__alt_data_end+0xf80128f0>
10012c08:	38802c36 	bltu	r7,r2,10012cbc <__divdf3+0x8b0>
10012c0c:	11c05326 	beq	r2,r7,10012d5c <__divdf3+0x950>
10012c10:	2827883a 	mov	r19,r5
10012c14:	003f8d06 	br	10012a4c <__alt_data_end+0xf8012a4c>
10012c18:	04ffffc4 	movi	r19,-1
10012c1c:	003f8c06 	br	10012a50 <__alt_data_end+0xf8012a50>
10012c20:	1011883a 	mov	r8,r2
10012c24:	003f4d06 	br	1001295c <__alt_data_end+0xf801295c>
10012c28:	1013883a 	mov	r9,r2
10012c2c:	003f6406 	br	100129c0 <__alt_data_end+0xf80129c0>
10012c30:	e029883a 	mov	r20,fp
10012c34:	003f8606 	br	10012a50 <__alt_data_end+0xf8012a50>
10012c38:	008007c4 	movi	r2,31
10012c3c:	14002a16 	blt	r2,r16,10012ce8 <__divdf3+0x8dc>
10012c40:	91410784 	addi	r5,r18,1054
10012c44:	9c0cd83a 	srl	r6,r19,r16
10012c48:	8948983a 	sll	r4,r17,r5
10012c4c:	9944983a 	sll	r2,r19,r5
10012c50:	8c20d83a 	srl	r16,r17,r16
10012c54:	3108b03a 	or	r4,r6,r4
10012c58:	1004c03a 	cmpne	r2,r2,zero
10012c5c:	2084b03a 	or	r2,r4,r2
10012c60:	110001cc 	andi	r4,r2,7
10012c64:	20000726 	beq	r4,zero,10012c84 <__divdf3+0x878>
10012c68:	114003cc 	andi	r5,r2,15
10012c6c:	01000104 	movi	r4,4
10012c70:	29000426 	beq	r5,r4,10012c84 <__divdf3+0x878>
10012c74:	11000104 	addi	r4,r2,4
10012c78:	2085803a 	cmpltu	r2,r4,r2
10012c7c:	80a1883a 	add	r16,r16,r2
10012c80:	2005883a 	mov	r2,r4
10012c84:	8100202c 	andhi	r4,r16,128
10012c88:	20002d26 	beq	r4,zero,10012d40 <__divdf3+0x934>
10012c8c:	a180004c 	andi	r6,r20,1
10012c90:	02000044 	movi	r8,1
10012c94:	000b883a 	mov	r5,zero
10012c98:	0027883a 	mov	r19,zero
10012c9c:	003e3906 	br	10012584 <__alt_data_end+0xf8012584>
10012ca0:	d8c00117 	ldw	r3,4(sp)
10012ca4:	8c7fff84 	addi	r17,r17,-2
10012ca8:	b0ed883a 	add	r22,r22,r3
10012cac:	b0c5803a 	cmpltu	r2,r22,r3
10012cb0:	15c5883a 	add	r2,r2,r23
10012cb4:	11cf883a 	add	r7,r2,r7
10012cb8:	003f0c06 	br	100128ec <__alt_data_end+0xf80128ec>
10012cbc:	d8c00117 	ldw	r3,4(sp)
10012cc0:	997fff84 	addi	r5,r19,-2
10012cc4:	18d1883a 	add	r8,r3,r3
10012cc8:	40c7803a 	cmpltu	r3,r8,r3
10012ccc:	1dcd883a 	add	r6,r3,r23
10012cd0:	398f883a 	add	r7,r7,r6
10012cd4:	da000115 	stw	r8,4(sp)
10012cd8:	003f8a06 	br	10012b04 <__alt_data_end+0xf8012b04>
10012cdc:	203f861e 	bne	r4,zero,10012af8 <__alt_data_end+0xf8012af8>
10012ce0:	d8000115 	stw	zero,4(sp)
10012ce4:	003f8906 	br	10012b0c <__alt_data_end+0xf8012b0c>
10012ce8:	00bef884 	movi	r2,-1054
10012cec:	1485c83a 	sub	r2,r2,r18
10012cf0:	01000804 	movi	r4,32
10012cf4:	8884d83a 	srl	r2,r17,r2
10012cf8:	81001c26 	beq	r16,r4,10012d6c <__divdf3+0x960>
10012cfc:	91010f84 	addi	r4,r18,1086
10012d00:	8908983a 	sll	r4,r17,r4
10012d04:	24c8b03a 	or	r4,r4,r19
10012d08:	2008c03a 	cmpne	r4,r4,zero
10012d0c:	2084b03a 	or	r2,r4,r2
10012d10:	140001cc 	andi	r16,r2,7
10012d14:	8000061e 	bne	r16,zero,10012d30 <__divdf3+0x924>
10012d18:	000b883a 	mov	r5,zero
10012d1c:	1004d0fa 	srli	r2,r2,3
10012d20:	a180004c 	andi	r6,r20,1
10012d24:	0011883a 	mov	r8,zero
10012d28:	1426b03a 	or	r19,r2,r16
10012d2c:	003e1506 	br	10012584 <__alt_data_end+0xf8012584>
10012d30:	114003cc 	andi	r5,r2,15
10012d34:	01000104 	movi	r4,4
10012d38:	0021883a 	mov	r16,zero
10012d3c:	293fcd1e 	bne	r5,r4,10012c74 <__alt_data_end+0xf8012c74>
10012d40:	800a927a 	slli	r5,r16,9
10012d44:	8020977a 	slli	r16,r16,29
10012d48:	280ad33a 	srli	r5,r5,12
10012d4c:	003ff306 	br	10012d1c <__alt_data_end+0xf8012d1c>
10012d50:	b23fd336 	bltu	r22,r8,10012ca0 <__alt_data_end+0xf8012ca0>
10012d54:	1023883a 	mov	r17,r2
10012d58:	003fa906 	br	10012c00 <__alt_data_end+0xf8012c00>
10012d5c:	d8c00117 	ldw	r3,4(sp)
10012d60:	193fd636 	bltu	r3,r4,10012cbc <__alt_data_end+0xf8012cbc>
10012d64:	2827883a 	mov	r19,r5
10012d68:	003f6806 	br	10012b0c <__alt_data_end+0xf8012b0c>
10012d6c:	0009883a 	mov	r4,zero
10012d70:	003fe406 	br	10012d04 <__alt_data_end+0xf8012d04>
10012d74:	00800434 	movhi	r2,16
10012d78:	89400234 	orhi	r5,r17,8
10012d7c:	10bfffc4 	addi	r2,r2,-1
10012d80:	e00d883a 	mov	r6,fp
10012d84:	288a703a 	and	r5,r5,r2
10012d88:	003e5806 	br	100126ec <__alt_data_end+0xf80126ec>

10012d8c <__eqdf2>:
10012d8c:	2804d53a 	srli	r2,r5,20
10012d90:	3806d53a 	srli	r3,r7,20
10012d94:	02000434 	movhi	r8,16
10012d98:	423fffc4 	addi	r8,r8,-1
10012d9c:	1081ffcc 	andi	r2,r2,2047
10012da0:	0241ffc4 	movi	r9,2047
10012da4:	2a14703a 	and	r10,r5,r8
10012da8:	18c1ffcc 	andi	r3,r3,2047
10012dac:	3a10703a 	and	r8,r7,r8
10012db0:	280ad7fa 	srli	r5,r5,31
10012db4:	380ed7fa 	srli	r7,r7,31
10012db8:	12400f26 	beq	r2,r9,10012df8 <__eqdf2+0x6c>
10012dbc:	0241ffc4 	movi	r9,2047
10012dc0:	1a400326 	beq	r3,r9,10012dd0 <__eqdf2+0x44>
10012dc4:	10c00526 	beq	r2,r3,10012ddc <__eqdf2+0x50>
10012dc8:	00800044 	movi	r2,1
10012dcc:	f800283a 	ret
10012dd0:	4192b03a 	or	r9,r8,r6
10012dd4:	483ffc1e 	bne	r9,zero,10012dc8 <__alt_data_end+0xf8012dc8>
10012dd8:	10fffb1e 	bne	r2,r3,10012dc8 <__alt_data_end+0xf8012dc8>
10012ddc:	523ffa1e 	bne	r10,r8,10012dc8 <__alt_data_end+0xf8012dc8>
10012de0:	21bff91e 	bne	r4,r6,10012dc8 <__alt_data_end+0xf8012dc8>
10012de4:	29c00826 	beq	r5,r7,10012e08 <__eqdf2+0x7c>
10012de8:	103ff71e 	bne	r2,zero,10012dc8 <__alt_data_end+0xf8012dc8>
10012dec:	5104b03a 	or	r2,r10,r4
10012df0:	1004c03a 	cmpne	r2,r2,zero
10012df4:	f800283a 	ret
10012df8:	5112b03a 	or	r9,r10,r4
10012dfc:	483fef26 	beq	r9,zero,10012dbc <__alt_data_end+0xf8012dbc>
10012e00:	00800044 	movi	r2,1
10012e04:	f800283a 	ret
10012e08:	0005883a 	mov	r2,zero
10012e0c:	f800283a 	ret

10012e10 <__gedf2>:
10012e10:	2804d53a 	srli	r2,r5,20
10012e14:	3806d53a 	srli	r3,r7,20
10012e18:	02000434 	movhi	r8,16
10012e1c:	423fffc4 	addi	r8,r8,-1
10012e20:	0241ffc4 	movi	r9,2047
10012e24:	1081ffcc 	andi	r2,r2,2047
10012e28:	2a14703a 	and	r10,r5,r8
10012e2c:	1a46703a 	and	r3,r3,r9
10012e30:	3a10703a 	and	r8,r7,r8
10012e34:	280ad7fa 	srli	r5,r5,31
10012e38:	380ed7fa 	srli	r7,r7,31
10012e3c:	12400b26 	beq	r2,r9,10012e6c <__gedf2+0x5c>
10012e40:	1a401626 	beq	r3,r9,10012e9c <__gedf2+0x8c>
10012e44:	10000c1e 	bne	r2,zero,10012e78 <__gedf2+0x68>
10012e48:	5112b03a 	or	r9,r10,r4
10012e4c:	4813003a 	cmpeq	r9,r9,zero
10012e50:	4817883a 	mov	r11,r9
10012e54:	18000c1e 	bne	r3,zero,10012e88 <__gedf2+0x78>
10012e58:	4198b03a 	or	r12,r8,r6
10012e5c:	60000a1e 	bne	r12,zero,10012e88 <__gedf2+0x78>
10012e60:	48001326 	beq	r9,zero,10012eb0 <__gedf2+0xa0>
10012e64:	0005883a 	mov	r2,zero
10012e68:	f800283a 	ret
10012e6c:	5112b03a 	or	r9,r10,r4
10012e70:	4800191e 	bne	r9,zero,10012ed8 <__gedf2+0xc8>
10012e74:	18800926 	beq	r3,r2,10012e9c <__gedf2+0x8c>
10012e78:	18000b1e 	bne	r3,zero,10012ea8 <__gedf2+0x98>
10012e7c:	4192b03a 	or	r9,r8,r6
10012e80:	0017883a 	mov	r11,zero
10012e84:	48000a26 	beq	r9,zero,10012eb0 <__gedf2+0xa0>
10012e88:	39c03fcc 	andi	r7,r7,255
10012e8c:	58000726 	beq	r11,zero,10012eac <__gedf2+0x9c>
10012e90:	3800081e 	bne	r7,zero,10012eb4 <__gedf2+0xa4>
10012e94:	00bfffc4 	movi	r2,-1
10012e98:	f800283a 	ret
10012e9c:	4192b03a 	or	r9,r8,r6
10012ea0:	48000d1e 	bne	r9,zero,10012ed8 <__gedf2+0xc8>
10012ea4:	103fe826 	beq	r2,zero,10012e48 <__alt_data_end+0xf8012e48>
10012ea8:	39c03fcc 	andi	r7,r7,255
10012eac:	29c00326 	beq	r5,r7,10012ebc <__gedf2+0xac>
10012eb0:	283ff81e 	bne	r5,zero,10012e94 <__alt_data_end+0xf8012e94>
10012eb4:	00800044 	movi	r2,1
10012eb8:	f800283a 	ret
10012ebc:	18bffc16 	blt	r3,r2,10012eb0 <__alt_data_end+0xf8012eb0>
10012ec0:	10c00316 	blt	r2,r3,10012ed0 <__gedf2+0xc0>
10012ec4:	42bffa36 	bltu	r8,r10,10012eb0 <__alt_data_end+0xf8012eb0>
10012ec8:	52000526 	beq	r10,r8,10012ee0 <__gedf2+0xd0>
10012ecc:	523fe52e 	bgeu	r10,r8,10012e64 <__alt_data_end+0xf8012e64>
10012ed0:	283ff026 	beq	r5,zero,10012e94 <__alt_data_end+0xf8012e94>
10012ed4:	003ff706 	br	10012eb4 <__alt_data_end+0xf8012eb4>
10012ed8:	00bfff84 	movi	r2,-2
10012edc:	f800283a 	ret
10012ee0:	313ff336 	bltu	r6,r4,10012eb0 <__alt_data_end+0xf8012eb0>
10012ee4:	21bfdf2e 	bgeu	r4,r6,10012e64 <__alt_data_end+0xf8012e64>
10012ee8:	283fea26 	beq	r5,zero,10012e94 <__alt_data_end+0xf8012e94>
10012eec:	003ff106 	br	10012eb4 <__alt_data_end+0xf8012eb4>

10012ef0 <__ledf2>:
10012ef0:	2804d53a 	srli	r2,r5,20
10012ef4:	3810d53a 	srli	r8,r7,20
10012ef8:	00c00434 	movhi	r3,16
10012efc:	18ffffc4 	addi	r3,r3,-1
10012f00:	0241ffc4 	movi	r9,2047
10012f04:	1081ffcc 	andi	r2,r2,2047
10012f08:	28d4703a 	and	r10,r5,r3
10012f0c:	4250703a 	and	r8,r8,r9
10012f10:	38c6703a 	and	r3,r7,r3
10012f14:	280ad7fa 	srli	r5,r5,31
10012f18:	380ed7fa 	srli	r7,r7,31
10012f1c:	12400b26 	beq	r2,r9,10012f4c <__ledf2+0x5c>
10012f20:	42401926 	beq	r8,r9,10012f88 <__ledf2+0x98>
10012f24:	10000c1e 	bne	r2,zero,10012f58 <__ledf2+0x68>
10012f28:	5112b03a 	or	r9,r10,r4
10012f2c:	4813003a 	cmpeq	r9,r9,zero
10012f30:	4817883a 	mov	r11,r9
10012f34:	40000f26 	beq	r8,zero,10012f74 <__ledf2+0x84>
10012f38:	39c03fcc 	andi	r7,r7,255
10012f3c:	58001826 	beq	r11,zero,10012fa0 <__ledf2+0xb0>
10012f40:	38000a1e 	bne	r7,zero,10012f6c <__ledf2+0x7c>
10012f44:	00bfffc4 	movi	r2,-1
10012f48:	f800283a 	ret
10012f4c:	5112b03a 	or	r9,r10,r4
10012f50:	48000f1e 	bne	r9,zero,10012f90 <__ledf2+0xa0>
10012f54:	40800c26 	beq	r8,r2,10012f88 <__ledf2+0x98>
10012f58:	4000101e 	bne	r8,zero,10012f9c <__ledf2+0xac>
10012f5c:	1992b03a 	or	r9,r3,r6
10012f60:	0017883a 	mov	r11,zero
10012f64:	483ff41e 	bne	r9,zero,10012f38 <__alt_data_end+0xf8012f38>
10012f68:	283ff61e 	bne	r5,zero,10012f44 <__alt_data_end+0xf8012f44>
10012f6c:	00800044 	movi	r2,1
10012f70:	f800283a 	ret
10012f74:	1998b03a 	or	r12,r3,r6
10012f78:	603fef1e 	bne	r12,zero,10012f38 <__alt_data_end+0xf8012f38>
10012f7c:	483ffa26 	beq	r9,zero,10012f68 <__alt_data_end+0xf8012f68>
10012f80:	0005883a 	mov	r2,zero
10012f84:	f800283a 	ret
10012f88:	1992b03a 	or	r9,r3,r6
10012f8c:	48000226 	beq	r9,zero,10012f98 <__ledf2+0xa8>
10012f90:	00800084 	movi	r2,2
10012f94:	f800283a 	ret
10012f98:	103fe326 	beq	r2,zero,10012f28 <__alt_data_end+0xf8012f28>
10012f9c:	39c03fcc 	andi	r7,r7,255
10012fa0:	29fff11e 	bne	r5,r7,10012f68 <__alt_data_end+0xf8012f68>
10012fa4:	40bff016 	blt	r8,r2,10012f68 <__alt_data_end+0xf8012f68>
10012fa8:	12000316 	blt	r2,r8,10012fb8 <__ledf2+0xc8>
10012fac:	1abfee36 	bltu	r3,r10,10012f68 <__alt_data_end+0xf8012f68>
10012fb0:	50c00326 	beq	r10,r3,10012fc0 <__ledf2+0xd0>
10012fb4:	50fff22e 	bgeu	r10,r3,10012f80 <__alt_data_end+0xf8012f80>
10012fb8:	283fe226 	beq	r5,zero,10012f44 <__alt_data_end+0xf8012f44>
10012fbc:	003feb06 	br	10012f6c <__alt_data_end+0xf8012f6c>
10012fc0:	313fe936 	bltu	r6,r4,10012f68 <__alt_data_end+0xf8012f68>
10012fc4:	21bfee2e 	bgeu	r4,r6,10012f80 <__alt_data_end+0xf8012f80>
10012fc8:	283fde26 	beq	r5,zero,10012f44 <__alt_data_end+0xf8012f44>
10012fcc:	003fe706 	br	10012f6c <__alt_data_end+0xf8012f6c>

10012fd0 <__fixdfsi>:
10012fd0:	2806d53a 	srli	r3,r5,20
10012fd4:	00800434 	movhi	r2,16
10012fd8:	10bfffc4 	addi	r2,r2,-1
10012fdc:	18c1ffcc 	andi	r3,r3,2047
10012fe0:	0180ff84 	movi	r6,1022
10012fe4:	2884703a 	and	r2,r5,r2
10012fe8:	280ad7fa 	srli	r5,r5,31
10012fec:	30c0130e 	bge	r6,r3,1001303c <__fixdfsi+0x6c>
10012ff0:	01810744 	movi	r6,1053
10012ff4:	30c00d16 	blt	r6,r3,1001302c <__fixdfsi+0x5c>
10012ff8:	01810cc4 	movi	r6,1075
10012ffc:	30cdc83a 	sub	r6,r6,r3
10013000:	01c007c4 	movi	r7,31
10013004:	10800434 	orhi	r2,r2,16
10013008:	39800e0e 	bge	r7,r6,10013044 <__fixdfsi+0x74>
1001300c:	010104c4 	movi	r4,1043
10013010:	20c7c83a 	sub	r3,r4,r3
10013014:	10c6d83a 	srl	r3,r2,r3
10013018:	29403fcc 	andi	r5,r5,255
1001301c:	0145c83a 	sub	r2,zero,r5
10013020:	1884f03a 	xor	r2,r3,r2
10013024:	1145883a 	add	r2,r2,r5
10013028:	f800283a 	ret
1001302c:	00a00034 	movhi	r2,32768
10013030:	10bfffc4 	addi	r2,r2,-1
10013034:	2885883a 	add	r2,r5,r2
10013038:	f800283a 	ret
1001303c:	0005883a 	mov	r2,zero
10013040:	f800283a 	ret
10013044:	18fefb44 	addi	r3,r3,-1043
10013048:	2188d83a 	srl	r4,r4,r6
1001304c:	10c6983a 	sll	r3,r2,r3
10013050:	20c6b03a 	or	r3,r4,r3
10013054:	003ff006 	br	10013018 <__alt_data_end+0xf8013018>

10013058 <__floatsidf>:
10013058:	defffd04 	addi	sp,sp,-12
1001305c:	dc400115 	stw	r17,4(sp)
10013060:	dfc00215 	stw	ra,8(sp)
10013064:	dc000015 	stw	r16,0(sp)
10013068:	2023883a 	mov	r17,r4
1001306c:	20001426 	beq	r4,zero,100130c0 <__floatsidf+0x68>
10013070:	2020d7fa 	srli	r16,r4,31
10013074:	80000126 	beq	r16,zero,1001307c <__floatsidf+0x24>
10013078:	0123c83a 	sub	r17,zero,r4
1001307c:	8809883a 	mov	r4,r17
10013080:	00079700 	call	10007970 <__clzsi2>
10013084:	01410784 	movi	r5,1054
10013088:	00c00284 	movi	r3,10
1001308c:	288bc83a 	sub	r5,r5,r2
10013090:	18801c16 	blt	r3,r2,10013104 <__floatsidf+0xac>
10013094:	00c002c4 	movi	r3,11
10013098:	1887c83a 	sub	r3,r3,r2
1001309c:	88c8d83a 	srl	r4,r17,r3
100130a0:	00c00434 	movhi	r3,16
100130a4:	18ffffc4 	addi	r3,r3,-1
100130a8:	10800544 	addi	r2,r2,21
100130ac:	20c8703a 	and	r4,r4,r3
100130b0:	8884983a 	sll	r2,r17,r2
100130b4:	28c1ffcc 	andi	r3,r5,2047
100130b8:	800d883a 	mov	r6,r16
100130bc:	00000406 	br	100130d0 <__floatsidf+0x78>
100130c0:	000d883a 	mov	r6,zero
100130c4:	0007883a 	mov	r3,zero
100130c8:	0009883a 	mov	r4,zero
100130cc:	0005883a 	mov	r2,zero
100130d0:	180a953a 	slli	r5,r3,20
100130d4:	31803fcc 	andi	r6,r6,255
100130d8:	00c00434 	movhi	r3,16
100130dc:	300c97fa 	slli	r6,r6,31
100130e0:	18ffffc4 	addi	r3,r3,-1
100130e4:	20c6703a 	and	r3,r4,r3
100130e8:	1946b03a 	or	r3,r3,r5
100130ec:	1986b03a 	or	r3,r3,r6
100130f0:	dfc00217 	ldw	ra,8(sp)
100130f4:	dc400117 	ldw	r17,4(sp)
100130f8:	dc000017 	ldw	r16,0(sp)
100130fc:	dec00304 	addi	sp,sp,12
10013100:	f800283a 	ret
10013104:	10fffd44 	addi	r3,r2,-11
10013108:	88c8983a 	sll	r4,r17,r3
1001310c:	00800434 	movhi	r2,16
10013110:	10bfffc4 	addi	r2,r2,-1
10013114:	2088703a 	and	r4,r4,r2
10013118:	28c1ffcc 	andi	r3,r5,2047
1001311c:	800d883a 	mov	r6,r16
10013120:	0005883a 	mov	r2,zero
10013124:	003fea06 	br	100130d0 <__alt_data_end+0xf80130d0>

10013128 <__floatunsidf>:
10013128:	defffe04 	addi	sp,sp,-8
1001312c:	dc000015 	stw	r16,0(sp)
10013130:	dfc00115 	stw	ra,4(sp)
10013134:	2021883a 	mov	r16,r4
10013138:	20001026 	beq	r4,zero,1001317c <__floatunsidf+0x54>
1001313c:	00079700 	call	10007970 <__clzsi2>
10013140:	01410784 	movi	r5,1054
10013144:	100d883a 	mov	r6,r2
10013148:	288bc83a 	sub	r5,r5,r2
1001314c:	00800284 	movi	r2,10
10013150:	11801616 	blt	r2,r6,100131ac <__floatunsidf+0x84>
10013154:	008002c4 	movi	r2,11
10013158:	1185c83a 	sub	r2,r2,r6
1001315c:	8084d83a 	srl	r2,r16,r2
10013160:	00c00434 	movhi	r3,16
10013164:	31c00544 	addi	r7,r6,21
10013168:	18ffffc4 	addi	r3,r3,-1
1001316c:	81e0983a 	sll	r16,r16,r7
10013170:	10cc703a 	and	r6,r2,r3
10013174:	2941ffcc 	andi	r5,r5,2047
10013178:	00000206 	br	10013184 <__floatunsidf+0x5c>
1001317c:	000b883a 	mov	r5,zero
10013180:	000d883a 	mov	r6,zero
10013184:	280a953a 	slli	r5,r5,20
10013188:	00c00434 	movhi	r3,16
1001318c:	18ffffc4 	addi	r3,r3,-1
10013190:	30c6703a 	and	r3,r6,r3
10013194:	8005883a 	mov	r2,r16
10013198:	1946b03a 	or	r3,r3,r5
1001319c:	dfc00117 	ldw	ra,4(sp)
100131a0:	dc000017 	ldw	r16,0(sp)
100131a4:	dec00204 	addi	sp,sp,8
100131a8:	f800283a 	ret
100131ac:	31bffd44 	addi	r6,r6,-11
100131b0:	818c983a 	sll	r6,r16,r6
100131b4:	00800434 	movhi	r2,16
100131b8:	10bfffc4 	addi	r2,r2,-1
100131bc:	2941ffcc 	andi	r5,r5,2047
100131c0:	0021883a 	mov	r16,zero
100131c4:	308c703a 	and	r6,r6,r2
100131c8:	003fee06 	br	10013184 <__alt_data_end+0xf8013184>

100131cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100131cc:	defffe04 	addi	sp,sp,-8
100131d0:	dfc00115 	stw	ra,4(sp)
100131d4:	df000015 	stw	fp,0(sp)
100131d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100131dc:	008400b4 	movhi	r2,4098
100131e0:	10a66d04 	addi	r2,r2,-26188
100131e4:	10800017 	ldw	r2,0(r2)
100131e8:	10000526 	beq	r2,zero,10013200 <alt_get_errno+0x34>
100131ec:	008400b4 	movhi	r2,4098
100131f0:	10a66d04 	addi	r2,r2,-26188
100131f4:	10800017 	ldw	r2,0(r2)
100131f8:	103ee83a 	callr	r2
100131fc:	00000206 	br	10013208 <alt_get_errno+0x3c>
10013200:	008400b4 	movhi	r2,4098
10013204:	10ad3404 	addi	r2,r2,-19248
}
10013208:	e037883a 	mov	sp,fp
1001320c:	dfc00117 	ldw	ra,4(sp)
10013210:	df000017 	ldw	fp,0(sp)
10013214:	dec00204 	addi	sp,sp,8
10013218:	f800283a 	ret

1001321c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1001321c:	defffb04 	addi	sp,sp,-20
10013220:	dfc00415 	stw	ra,16(sp)
10013224:	df000315 	stw	fp,12(sp)
10013228:	df000304 	addi	fp,sp,12
1001322c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10013230:	e0bfff17 	ldw	r2,-4(fp)
10013234:	10000816 	blt	r2,zero,10013258 <close+0x3c>
10013238:	e13fff17 	ldw	r4,-4(fp)
1001323c:	01400304 	movi	r5,12
10013240:	000586c0 	call	1000586c <__mulsi3>
10013244:	1007883a 	mov	r3,r2
10013248:	008400b4 	movhi	r2,4098
1001324c:	10a1ea04 	addi	r2,r2,-30808
10013250:	1885883a 	add	r2,r3,r2
10013254:	00000106 	br	1001325c <close+0x40>
10013258:	0005883a 	mov	r2,zero
1001325c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10013260:	e0bffd17 	ldw	r2,-12(fp)
10013264:	10001926 	beq	r2,zero,100132cc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10013268:	e0bffd17 	ldw	r2,-12(fp)
1001326c:	10800017 	ldw	r2,0(r2)
10013270:	10800417 	ldw	r2,16(r2)
10013274:	10000626 	beq	r2,zero,10013290 <close+0x74>
10013278:	e0bffd17 	ldw	r2,-12(fp)
1001327c:	10800017 	ldw	r2,0(r2)
10013280:	10800417 	ldw	r2,16(r2)
10013284:	e13ffd17 	ldw	r4,-12(fp)
10013288:	103ee83a 	callr	r2
1001328c:	00000106 	br	10013294 <close+0x78>
10013290:	0005883a 	mov	r2,zero
10013294:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10013298:	e13fff17 	ldw	r4,-4(fp)
1001329c:	00139500 	call	10013950 <alt_release_fd>
    if (rval < 0)
100132a0:	e0bffe17 	ldw	r2,-8(fp)
100132a4:	1000070e 	bge	r2,zero,100132c4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
100132a8:	00131cc0 	call	100131cc <alt_get_errno>
100132ac:	1007883a 	mov	r3,r2
100132b0:	e0bffe17 	ldw	r2,-8(fp)
100132b4:	0085c83a 	sub	r2,zero,r2
100132b8:	18800015 	stw	r2,0(r3)
      return -1;
100132bc:	00bfffc4 	movi	r2,-1
100132c0:	00000706 	br	100132e0 <close+0xc4>
    }
    return 0;
100132c4:	0005883a 	mov	r2,zero
100132c8:	00000506 	br	100132e0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
100132cc:	00131cc0 	call	100131cc <alt_get_errno>
100132d0:	1007883a 	mov	r3,r2
100132d4:	00801444 	movi	r2,81
100132d8:	18800015 	stw	r2,0(r3)
    return -1;
100132dc:	00bfffc4 	movi	r2,-1
  }
}
100132e0:	e037883a 	mov	sp,fp
100132e4:	dfc00117 	ldw	ra,4(sp)
100132e8:	df000017 	ldw	fp,0(sp)
100132ec:	dec00204 	addi	sp,sp,8
100132f0:	f800283a 	ret

100132f4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
100132f4:	defffc04 	addi	sp,sp,-16
100132f8:	df000315 	stw	fp,12(sp)
100132fc:	df000304 	addi	fp,sp,12
10013300:	e13ffd15 	stw	r4,-12(fp)
10013304:	e17ffe15 	stw	r5,-8(fp)
10013308:	e1bfff15 	stw	r6,-4(fp)
  return len;
1001330c:	e0bfff17 	ldw	r2,-4(fp)
}
10013310:	e037883a 	mov	sp,fp
10013314:	df000017 	ldw	fp,0(sp)
10013318:	dec00104 	addi	sp,sp,4
1001331c:	f800283a 	ret

10013320 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013320:	defffe04 	addi	sp,sp,-8
10013324:	dfc00115 	stw	ra,4(sp)
10013328:	df000015 	stw	fp,0(sp)
1001332c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013330:	008400b4 	movhi	r2,4098
10013334:	10a66d04 	addi	r2,r2,-26188
10013338:	10800017 	ldw	r2,0(r2)
1001333c:	10000526 	beq	r2,zero,10013354 <alt_get_errno+0x34>
10013340:	008400b4 	movhi	r2,4098
10013344:	10a66d04 	addi	r2,r2,-26188
10013348:	10800017 	ldw	r2,0(r2)
1001334c:	103ee83a 	callr	r2
10013350:	00000206 	br	1001335c <alt_get_errno+0x3c>
10013354:	008400b4 	movhi	r2,4098
10013358:	10ad3404 	addi	r2,r2,-19248
}
1001335c:	e037883a 	mov	sp,fp
10013360:	dfc00117 	ldw	ra,4(sp)
10013364:	df000017 	ldw	fp,0(sp)
10013368:	dec00204 	addi	sp,sp,8
1001336c:	f800283a 	ret

10013370 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10013370:	defffb04 	addi	sp,sp,-20
10013374:	dfc00415 	stw	ra,16(sp)
10013378:	df000315 	stw	fp,12(sp)
1001337c:	df000304 	addi	fp,sp,12
10013380:	e13ffe15 	stw	r4,-8(fp)
10013384:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10013388:	e0bffe17 	ldw	r2,-8(fp)
1001338c:	10000816 	blt	r2,zero,100133b0 <fstat+0x40>
10013390:	e13ffe17 	ldw	r4,-8(fp)
10013394:	01400304 	movi	r5,12
10013398:	000586c0 	call	1000586c <__mulsi3>
1001339c:	1007883a 	mov	r3,r2
100133a0:	008400b4 	movhi	r2,4098
100133a4:	10a1ea04 	addi	r2,r2,-30808
100133a8:	1885883a 	add	r2,r3,r2
100133ac:	00000106 	br	100133b4 <fstat+0x44>
100133b0:	0005883a 	mov	r2,zero
100133b4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
100133b8:	e0bffd17 	ldw	r2,-12(fp)
100133bc:	10001026 	beq	r2,zero,10013400 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
100133c0:	e0bffd17 	ldw	r2,-12(fp)
100133c4:	10800017 	ldw	r2,0(r2)
100133c8:	10800817 	ldw	r2,32(r2)
100133cc:	10000726 	beq	r2,zero,100133ec <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
100133d0:	e0bffd17 	ldw	r2,-12(fp)
100133d4:	10800017 	ldw	r2,0(r2)
100133d8:	10800817 	ldw	r2,32(r2)
100133dc:	e13ffd17 	ldw	r4,-12(fp)
100133e0:	e17fff17 	ldw	r5,-4(fp)
100133e4:	103ee83a 	callr	r2
100133e8:	00000a06 	br	10013414 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
100133ec:	e0bfff17 	ldw	r2,-4(fp)
100133f0:	00c80004 	movi	r3,8192
100133f4:	10c00115 	stw	r3,4(r2)
      return 0;
100133f8:	0005883a 	mov	r2,zero
100133fc:	00000506 	br	10013414 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10013400:	00133200 	call	10013320 <alt_get_errno>
10013404:	1007883a 	mov	r3,r2
10013408:	00801444 	movi	r2,81
1001340c:	18800015 	stw	r2,0(r3)
    return -1;
10013410:	00bfffc4 	movi	r2,-1
  }
}
10013414:	e037883a 	mov	sp,fp
10013418:	dfc00117 	ldw	ra,4(sp)
1001341c:	df000017 	ldw	fp,0(sp)
10013420:	dec00204 	addi	sp,sp,8
10013424:	f800283a 	ret

10013428 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013428:	defffe04 	addi	sp,sp,-8
1001342c:	dfc00115 	stw	ra,4(sp)
10013430:	df000015 	stw	fp,0(sp)
10013434:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013438:	008400b4 	movhi	r2,4098
1001343c:	10a66d04 	addi	r2,r2,-26188
10013440:	10800017 	ldw	r2,0(r2)
10013444:	10000526 	beq	r2,zero,1001345c <alt_get_errno+0x34>
10013448:	008400b4 	movhi	r2,4098
1001344c:	10a66d04 	addi	r2,r2,-26188
10013450:	10800017 	ldw	r2,0(r2)
10013454:	103ee83a 	callr	r2
10013458:	00000206 	br	10013464 <alt_get_errno+0x3c>
1001345c:	008400b4 	movhi	r2,4098
10013460:	10ad3404 	addi	r2,r2,-19248
}
10013464:	e037883a 	mov	sp,fp
10013468:	dfc00117 	ldw	ra,4(sp)
1001346c:	df000017 	ldw	fp,0(sp)
10013470:	dec00204 	addi	sp,sp,8
10013474:	f800283a 	ret

10013478 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10013478:	deffed04 	addi	sp,sp,-76
1001347c:	dfc01215 	stw	ra,72(sp)
10013480:	df001115 	stw	fp,68(sp)
10013484:	df001104 	addi	fp,sp,68
10013488:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001348c:	e0bfff17 	ldw	r2,-4(fp)
10013490:	10000816 	blt	r2,zero,100134b4 <isatty+0x3c>
10013494:	e13fff17 	ldw	r4,-4(fp)
10013498:	01400304 	movi	r5,12
1001349c:	000586c0 	call	1000586c <__mulsi3>
100134a0:	1007883a 	mov	r3,r2
100134a4:	008400b4 	movhi	r2,4098
100134a8:	10a1ea04 	addi	r2,r2,-30808
100134ac:	1885883a 	add	r2,r3,r2
100134b0:	00000106 	br	100134b8 <isatty+0x40>
100134b4:	0005883a 	mov	r2,zero
100134b8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
100134bc:	e0bfef17 	ldw	r2,-68(fp)
100134c0:	10000e26 	beq	r2,zero,100134fc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
100134c4:	e0bfef17 	ldw	r2,-68(fp)
100134c8:	10800017 	ldw	r2,0(r2)
100134cc:	10800817 	ldw	r2,32(r2)
100134d0:	1000021e 	bne	r2,zero,100134dc <isatty+0x64>
    {
      return 1;
100134d4:	00800044 	movi	r2,1
100134d8:	00000d06 	br	10013510 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
100134dc:	e0bff004 	addi	r2,fp,-64
100134e0:	e13fff17 	ldw	r4,-4(fp)
100134e4:	100b883a 	mov	r5,r2
100134e8:	00133700 	call	10013370 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
100134ec:	e0bff117 	ldw	r2,-60(fp)
100134f0:	10880020 	cmpeqi	r2,r2,8192
100134f4:	10803fcc 	andi	r2,r2,255
100134f8:	00000506 	br	10013510 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100134fc:	00134280 	call	10013428 <alt_get_errno>
10013500:	1007883a 	mov	r3,r2
10013504:	00801444 	movi	r2,81
10013508:	18800015 	stw	r2,0(r3)
    return 0;
1001350c:	0005883a 	mov	r2,zero
  }
}
10013510:	e037883a 	mov	sp,fp
10013514:	dfc00117 	ldw	ra,4(sp)
10013518:	df000017 	ldw	fp,0(sp)
1001351c:	dec00204 	addi	sp,sp,8
10013520:	f800283a 	ret

10013524 <alt_load_section>:
10013524:	defffc04 	addi	sp,sp,-16
10013528:	df000315 	stw	fp,12(sp)
1001352c:	df000304 	addi	fp,sp,12
10013530:	e13ffd15 	stw	r4,-12(fp)
10013534:	e17ffe15 	stw	r5,-8(fp)
10013538:	e1bfff15 	stw	r6,-4(fp)
1001353c:	e0fffe17 	ldw	r3,-8(fp)
10013540:	e0bffd17 	ldw	r2,-12(fp)
10013544:	18800c26 	beq	r3,r2,10013578 <alt_load_section+0x54>
10013548:	00000806 	br	1001356c <alt_load_section+0x48>
1001354c:	e0bffe17 	ldw	r2,-8(fp)
10013550:	10c00104 	addi	r3,r2,4
10013554:	e0fffe15 	stw	r3,-8(fp)
10013558:	e0fffd17 	ldw	r3,-12(fp)
1001355c:	19000104 	addi	r4,r3,4
10013560:	e13ffd15 	stw	r4,-12(fp)
10013564:	18c00017 	ldw	r3,0(r3)
10013568:	10c00015 	stw	r3,0(r2)
1001356c:	e0fffe17 	ldw	r3,-8(fp)
10013570:	e0bfff17 	ldw	r2,-4(fp)
10013574:	18bff51e 	bne	r3,r2,1001354c <__alt_data_end+0xf801354c>
10013578:	0001883a 	nop
1001357c:	e037883a 	mov	sp,fp
10013580:	df000017 	ldw	fp,0(sp)
10013584:	dec00104 	addi	sp,sp,4
10013588:	f800283a 	ret

1001358c <alt_load>:
1001358c:	defffe04 	addi	sp,sp,-8
10013590:	dfc00115 	stw	ra,4(sp)
10013594:	df000015 	stw	fp,0(sp)
10013598:	d839883a 	mov	fp,sp
1001359c:	018400b4 	movhi	r6,4098
100135a0:	31a67204 	addi	r6,r6,-26168
100135a4:	01440074 	movhi	r5,4097
100135a8:	295fb704 	addi	r5,r5,32476
100135ac:	010400b4 	movhi	r4,4098
100135b0:	21267204 	addi	r4,r4,-26168
100135b4:	00135240 	call	10013524 <alt_load_section>
100135b8:	01840034 	movhi	r6,4096
100135bc:	31806f04 	addi	r6,r6,444
100135c0:	01440034 	movhi	r5,4096
100135c4:	29400804 	addi	r5,r5,32
100135c8:	01040034 	movhi	r4,4096
100135cc:	21000804 	addi	r4,r4,32
100135d0:	00135240 	call	10013524 <alt_load_section>
100135d4:	01840074 	movhi	r6,4097
100135d8:	319fb704 	addi	r6,r6,32476
100135dc:	01440074 	movhi	r5,4097
100135e0:	29568a04 	addi	r5,r5,23080
100135e4:	01040074 	movhi	r4,4097
100135e8:	21168a04 	addi	r4,r4,23080
100135ec:	00135240 	call	10013524 <alt_load_section>
100135f0:	00149980 	call	10014998 <alt_dcache_flush_all>
100135f4:	0014b680 	call	10014b68 <alt_icache_flush_all>
100135f8:	0001883a 	nop
100135fc:	e037883a 	mov	sp,fp
10013600:	dfc00117 	ldw	ra,4(sp)
10013604:	df000017 	ldw	fp,0(sp)
10013608:	dec00204 	addi	sp,sp,8
1001360c:	f800283a 	ret

10013610 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013610:	defffe04 	addi	sp,sp,-8
10013614:	dfc00115 	stw	ra,4(sp)
10013618:	df000015 	stw	fp,0(sp)
1001361c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013620:	008400b4 	movhi	r2,4098
10013624:	10a66d04 	addi	r2,r2,-26188
10013628:	10800017 	ldw	r2,0(r2)
1001362c:	10000526 	beq	r2,zero,10013644 <alt_get_errno+0x34>
10013630:	008400b4 	movhi	r2,4098
10013634:	10a66d04 	addi	r2,r2,-26188
10013638:	10800017 	ldw	r2,0(r2)
1001363c:	103ee83a 	callr	r2
10013640:	00000206 	br	1001364c <alt_get_errno+0x3c>
10013644:	008400b4 	movhi	r2,4098
10013648:	10ad3404 	addi	r2,r2,-19248
}
1001364c:	e037883a 	mov	sp,fp
10013650:	dfc00117 	ldw	ra,4(sp)
10013654:	df000017 	ldw	fp,0(sp)
10013658:	dec00204 	addi	sp,sp,8
1001365c:	f800283a 	ret

10013660 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10013660:	defff904 	addi	sp,sp,-28
10013664:	dfc00615 	stw	ra,24(sp)
10013668:	df000515 	stw	fp,20(sp)
1001366c:	df000504 	addi	fp,sp,20
10013670:	e13ffd15 	stw	r4,-12(fp)
10013674:	e17ffe15 	stw	r5,-8(fp)
10013678:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1001367c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10013680:	e0bffd17 	ldw	r2,-12(fp)
10013684:	10000816 	blt	r2,zero,100136a8 <lseek+0x48>
10013688:	e13ffd17 	ldw	r4,-12(fp)
1001368c:	01400304 	movi	r5,12
10013690:	000586c0 	call	1000586c <__mulsi3>
10013694:	1007883a 	mov	r3,r2
10013698:	008400b4 	movhi	r2,4098
1001369c:	10a1ea04 	addi	r2,r2,-30808
100136a0:	1885883a 	add	r2,r3,r2
100136a4:	00000106 	br	100136ac <lseek+0x4c>
100136a8:	0005883a 	mov	r2,zero
100136ac:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
100136b0:	e0bffc17 	ldw	r2,-16(fp)
100136b4:	10001026 	beq	r2,zero,100136f8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
100136b8:	e0bffc17 	ldw	r2,-16(fp)
100136bc:	10800017 	ldw	r2,0(r2)
100136c0:	10800717 	ldw	r2,28(r2)
100136c4:	10000926 	beq	r2,zero,100136ec <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
100136c8:	e0bffc17 	ldw	r2,-16(fp)
100136cc:	10800017 	ldw	r2,0(r2)
100136d0:	10800717 	ldw	r2,28(r2)
100136d4:	e13ffc17 	ldw	r4,-16(fp)
100136d8:	e17ffe17 	ldw	r5,-8(fp)
100136dc:	e1bfff17 	ldw	r6,-4(fp)
100136e0:	103ee83a 	callr	r2
100136e4:	e0bffb15 	stw	r2,-20(fp)
100136e8:	00000506 	br	10013700 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
100136ec:	00bfde84 	movi	r2,-134
100136f0:	e0bffb15 	stw	r2,-20(fp)
100136f4:	00000206 	br	10013700 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
100136f8:	00bfebc4 	movi	r2,-81
100136fc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10013700:	e0bffb17 	ldw	r2,-20(fp)
10013704:	1000070e 	bge	r2,zero,10013724 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10013708:	00136100 	call	10013610 <alt_get_errno>
1001370c:	1007883a 	mov	r3,r2
10013710:	e0bffb17 	ldw	r2,-20(fp)
10013714:	0085c83a 	sub	r2,zero,r2
10013718:	18800015 	stw	r2,0(r3)
    rc = -1;
1001371c:	00bfffc4 	movi	r2,-1
10013720:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10013724:	e0bffb17 	ldw	r2,-20(fp)
}
10013728:	e037883a 	mov	sp,fp
1001372c:	dfc00117 	ldw	ra,4(sp)
10013730:	df000017 	ldw	fp,0(sp)
10013734:	dec00204 	addi	sp,sp,8
10013738:	f800283a 	ret

1001373c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1001373c:	defffd04 	addi	sp,sp,-12
10013740:	dfc00215 	stw	ra,8(sp)
10013744:	df000115 	stw	fp,4(sp)
10013748:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1001374c:	0009883a 	mov	r4,zero
10013750:	0013c380 	call	10013c38 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10013754:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10013758:	0013c6c0 	call	10013c6c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1001375c:	01040074 	movhi	r4,4097
10013760:	211fad04 	addi	r4,r4,32436
10013764:	01440074 	movhi	r5,4097
10013768:	295fad04 	addi	r5,r5,32436
1001376c:	01840074 	movhi	r6,4097
10013770:	319fad04 	addi	r6,r6,32436
10013774:	0014f340 	call	10014f34 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10013778:	0014aa80 	call	10014aa8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1001377c:	01040074 	movhi	r4,4097
10013780:	2112c204 	addi	r4,r4,19208
10013784:	00156840 	call	10015684 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10013788:	d126d317 	ldw	r4,-25780(gp)
1001378c:	d0e6d417 	ldw	r3,-25776(gp)
10013790:	d0a6d517 	ldw	r2,-25772(gp)
10013794:	180b883a 	mov	r5,r3
10013798:	100d883a 	mov	r6,r2
1001379c:	00003340 	call	10000334 <main>
100137a0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
100137a4:	01000044 	movi	r4,1
100137a8:	001321c0 	call	1001321c <close>
  exit (result);
100137ac:	e13fff17 	ldw	r4,-4(fp)
100137b0:	00156980 	call	10015698 <exit>

100137b4 <__malloc_lock>:
100137b4:	defffe04 	addi	sp,sp,-8
100137b8:	df000115 	stw	fp,4(sp)
100137bc:	df000104 	addi	fp,sp,4
100137c0:	e13fff15 	stw	r4,-4(fp)
100137c4:	0001883a 	nop
100137c8:	e037883a 	mov	sp,fp
100137cc:	df000017 	ldw	fp,0(sp)
100137d0:	dec00104 	addi	sp,sp,4
100137d4:	f800283a 	ret

100137d8 <__malloc_unlock>:
100137d8:	defffe04 	addi	sp,sp,-8
100137dc:	df000115 	stw	fp,4(sp)
100137e0:	df000104 	addi	fp,sp,4
100137e4:	e13fff15 	stw	r4,-4(fp)
100137e8:	0001883a 	nop
100137ec:	e037883a 	mov	sp,fp
100137f0:	df000017 	ldw	fp,0(sp)
100137f4:	dec00104 	addi	sp,sp,4
100137f8:	f800283a 	ret

100137fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100137fc:	defffe04 	addi	sp,sp,-8
10013800:	dfc00115 	stw	ra,4(sp)
10013804:	df000015 	stw	fp,0(sp)
10013808:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001380c:	008400b4 	movhi	r2,4098
10013810:	10a66d04 	addi	r2,r2,-26188
10013814:	10800017 	ldw	r2,0(r2)
10013818:	10000526 	beq	r2,zero,10013830 <alt_get_errno+0x34>
1001381c:	008400b4 	movhi	r2,4098
10013820:	10a66d04 	addi	r2,r2,-26188
10013824:	10800017 	ldw	r2,0(r2)
10013828:	103ee83a 	callr	r2
1001382c:	00000206 	br	10013838 <alt_get_errno+0x3c>
10013830:	008400b4 	movhi	r2,4098
10013834:	10ad3404 	addi	r2,r2,-19248
}
10013838:	e037883a 	mov	sp,fp
1001383c:	dfc00117 	ldw	ra,4(sp)
10013840:	df000017 	ldw	fp,0(sp)
10013844:	dec00204 	addi	sp,sp,8
10013848:	f800283a 	ret

1001384c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1001384c:	defff904 	addi	sp,sp,-28
10013850:	dfc00615 	stw	ra,24(sp)
10013854:	df000515 	stw	fp,20(sp)
10013858:	df000504 	addi	fp,sp,20
1001385c:	e13ffd15 	stw	r4,-12(fp)
10013860:	e17ffe15 	stw	r5,-8(fp)
10013864:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10013868:	e0bffd17 	ldw	r2,-12(fp)
1001386c:	10000816 	blt	r2,zero,10013890 <read+0x44>
10013870:	e13ffd17 	ldw	r4,-12(fp)
10013874:	01400304 	movi	r5,12
10013878:	000586c0 	call	1000586c <__mulsi3>
1001387c:	1007883a 	mov	r3,r2
10013880:	008400b4 	movhi	r2,4098
10013884:	10a1ea04 	addi	r2,r2,-30808
10013888:	1885883a 	add	r2,r3,r2
1001388c:	00000106 	br	10013894 <read+0x48>
10013890:	0005883a 	mov	r2,zero
10013894:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10013898:	e0bffb17 	ldw	r2,-20(fp)
1001389c:	10002226 	beq	r2,zero,10013928 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
100138a0:	e0bffb17 	ldw	r2,-20(fp)
100138a4:	10800217 	ldw	r2,8(r2)
100138a8:	108000cc 	andi	r2,r2,3
100138ac:	10800060 	cmpeqi	r2,r2,1
100138b0:	1000181e 	bne	r2,zero,10013914 <read+0xc8>
        (fd->dev->read))
100138b4:	e0bffb17 	ldw	r2,-20(fp)
100138b8:	10800017 	ldw	r2,0(r2)
100138bc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
100138c0:	10001426 	beq	r2,zero,10013914 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
100138c4:	e0bffb17 	ldw	r2,-20(fp)
100138c8:	10800017 	ldw	r2,0(r2)
100138cc:	10800517 	ldw	r2,20(r2)
100138d0:	e0ffff17 	ldw	r3,-4(fp)
100138d4:	e13ffb17 	ldw	r4,-20(fp)
100138d8:	e17ffe17 	ldw	r5,-8(fp)
100138dc:	180d883a 	mov	r6,r3
100138e0:	103ee83a 	callr	r2
100138e4:	e0bffc15 	stw	r2,-16(fp)
100138e8:	e0bffc17 	ldw	r2,-16(fp)
100138ec:	1000070e 	bge	r2,zero,1001390c <read+0xc0>
        {
          ALT_ERRNO = -rval;
100138f0:	00137fc0 	call	100137fc <alt_get_errno>
100138f4:	1007883a 	mov	r3,r2
100138f8:	e0bffc17 	ldw	r2,-16(fp)
100138fc:	0085c83a 	sub	r2,zero,r2
10013900:	18800015 	stw	r2,0(r3)
          return -1;
10013904:	00bfffc4 	movi	r2,-1
10013908:	00000c06 	br	1001393c <read+0xf0>
        }
        return rval;
1001390c:	e0bffc17 	ldw	r2,-16(fp)
10013910:	00000a06 	br	1001393c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10013914:	00137fc0 	call	100137fc <alt_get_errno>
10013918:	1007883a 	mov	r3,r2
1001391c:	00800344 	movi	r2,13
10013920:	18800015 	stw	r2,0(r3)
10013924:	00000406 	br	10013938 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10013928:	00137fc0 	call	100137fc <alt_get_errno>
1001392c:	1007883a 	mov	r3,r2
10013930:	00801444 	movi	r2,81
10013934:	18800015 	stw	r2,0(r3)
  }
  return -1;
10013938:	00bfffc4 	movi	r2,-1
}
1001393c:	e037883a 	mov	sp,fp
10013940:	dfc00117 	ldw	ra,4(sp)
10013944:	df000017 	ldw	fp,0(sp)
10013948:	dec00204 	addi	sp,sp,8
1001394c:	f800283a 	ret

10013950 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10013950:	defffc04 	addi	sp,sp,-16
10013954:	dfc00315 	stw	ra,12(sp)
10013958:	df000215 	stw	fp,8(sp)
1001395c:	dc000115 	stw	r16,4(sp)
10013960:	df000204 	addi	fp,sp,8
10013964:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10013968:	e0bffe17 	ldw	r2,-8(fp)
1001396c:	108000d0 	cmplti	r2,r2,3
10013970:	1000111e 	bne	r2,zero,100139b8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10013974:	040400b4 	movhi	r16,4098
10013978:	8421ea04 	addi	r16,r16,-30808
1001397c:	e0bffe17 	ldw	r2,-8(fp)
10013980:	1009883a 	mov	r4,r2
10013984:	01400304 	movi	r5,12
10013988:	000586c0 	call	1000586c <__mulsi3>
1001398c:	8085883a 	add	r2,r16,r2
10013990:	10800204 	addi	r2,r2,8
10013994:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10013998:	040400b4 	movhi	r16,4098
1001399c:	8421ea04 	addi	r16,r16,-30808
100139a0:	e0bffe17 	ldw	r2,-8(fp)
100139a4:	1009883a 	mov	r4,r2
100139a8:	01400304 	movi	r5,12
100139ac:	000586c0 	call	1000586c <__mulsi3>
100139b0:	8085883a 	add	r2,r16,r2
100139b4:	10000015 	stw	zero,0(r2)
  }
}
100139b8:	e6ffff04 	addi	sp,fp,-4
100139bc:	dfc00217 	ldw	ra,8(sp)
100139c0:	df000117 	ldw	fp,4(sp)
100139c4:	dc000017 	ldw	r16,0(sp)
100139c8:	dec00304 	addi	sp,sp,12
100139cc:	f800283a 	ret

100139d0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
100139d0:	defff904 	addi	sp,sp,-28
100139d4:	df000615 	stw	fp,24(sp)
100139d8:	df000604 	addi	fp,sp,24
100139dc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100139e0:	0005303a 	rdctl	r2,status
100139e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100139e8:	e0fffc17 	ldw	r3,-16(fp)
100139ec:	00bfff84 	movi	r2,-2
100139f0:	1884703a 	and	r2,r3,r2
100139f4:	1001703a 	wrctl	status,r2
  
  return context;
100139f8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
100139fc:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10013a00:	d0a00c17 	ldw	r2,-32720(gp)
10013a04:	10c000c4 	addi	r3,r2,3
10013a08:	00bfff04 	movi	r2,-4
10013a0c:	1884703a 	and	r2,r3,r2
10013a10:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10013a14:	d0e00c17 	ldw	r3,-32720(gp)
10013a18:	e0bfff17 	ldw	r2,-4(fp)
10013a1c:	1887883a 	add	r3,r3,r2
10013a20:	00860034 	movhi	r2,6144
10013a24:	10800004 	addi	r2,r2,0
10013a28:	10c0062e 	bgeu	r2,r3,10013a44 <sbrk+0x74>
10013a2c:	e0bffa17 	ldw	r2,-24(fp)
10013a30:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10013a34:	e0bffd17 	ldw	r2,-12(fp)
10013a38:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10013a3c:	00bfffc4 	movi	r2,-1
10013a40:	00000b06 	br	10013a70 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10013a44:	d0a00c17 	ldw	r2,-32720(gp)
10013a48:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
10013a4c:	d0e00c17 	ldw	r3,-32720(gp)
10013a50:	e0bfff17 	ldw	r2,-4(fp)
10013a54:	1885883a 	add	r2,r3,r2
10013a58:	d0a00c15 	stw	r2,-32720(gp)
10013a5c:	e0bffa17 	ldw	r2,-24(fp)
10013a60:	e0bffe15 	stw	r2,-8(fp)
10013a64:	e0bffe17 	ldw	r2,-8(fp)
10013a68:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10013a6c:	e0bffb17 	ldw	r2,-20(fp)
} 
10013a70:	e037883a 	mov	sp,fp
10013a74:	df000017 	ldw	fp,0(sp)
10013a78:	dec00104 	addi	sp,sp,4
10013a7c:	f800283a 	ret

10013a80 <usleep>:
10013a80:	defffd04 	addi	sp,sp,-12
10013a84:	dfc00215 	stw	ra,8(sp)
10013a88:	df000115 	stw	fp,4(sp)
10013a8c:	df000104 	addi	fp,sp,4
10013a90:	e13fff15 	stw	r4,-4(fp)
10013a94:	e13fff17 	ldw	r4,-4(fp)
10013a98:	00148400 	call	10014840 <alt_busy_sleep>
10013a9c:	e037883a 	mov	sp,fp
10013aa0:	dfc00117 	ldw	ra,4(sp)
10013aa4:	df000017 	ldw	fp,0(sp)
10013aa8:	dec00204 	addi	sp,sp,8
10013aac:	f800283a 	ret

10013ab0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10013ab0:	defffe04 	addi	sp,sp,-8
10013ab4:	dfc00115 	stw	ra,4(sp)
10013ab8:	df000015 	stw	fp,0(sp)
10013abc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10013ac0:	008400b4 	movhi	r2,4098
10013ac4:	10a66d04 	addi	r2,r2,-26188
10013ac8:	10800017 	ldw	r2,0(r2)
10013acc:	10000526 	beq	r2,zero,10013ae4 <alt_get_errno+0x34>
10013ad0:	008400b4 	movhi	r2,4098
10013ad4:	10a66d04 	addi	r2,r2,-26188
10013ad8:	10800017 	ldw	r2,0(r2)
10013adc:	103ee83a 	callr	r2
10013ae0:	00000206 	br	10013aec <alt_get_errno+0x3c>
10013ae4:	008400b4 	movhi	r2,4098
10013ae8:	10ad3404 	addi	r2,r2,-19248
}
10013aec:	e037883a 	mov	sp,fp
10013af0:	dfc00117 	ldw	ra,4(sp)
10013af4:	df000017 	ldw	fp,0(sp)
10013af8:	dec00204 	addi	sp,sp,8
10013afc:	f800283a 	ret

10013b00 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10013b00:	defff904 	addi	sp,sp,-28
10013b04:	dfc00615 	stw	ra,24(sp)
10013b08:	df000515 	stw	fp,20(sp)
10013b0c:	df000504 	addi	fp,sp,20
10013b10:	e13ffd15 	stw	r4,-12(fp)
10013b14:	e17ffe15 	stw	r5,-8(fp)
10013b18:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10013b1c:	e0bffd17 	ldw	r2,-12(fp)
10013b20:	10000816 	blt	r2,zero,10013b44 <write+0x44>
10013b24:	e13ffd17 	ldw	r4,-12(fp)
10013b28:	01400304 	movi	r5,12
10013b2c:	000586c0 	call	1000586c <__mulsi3>
10013b30:	1007883a 	mov	r3,r2
10013b34:	008400b4 	movhi	r2,4098
10013b38:	10a1ea04 	addi	r2,r2,-30808
10013b3c:	1885883a 	add	r2,r3,r2
10013b40:	00000106 	br	10013b48 <write+0x48>
10013b44:	0005883a 	mov	r2,zero
10013b48:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10013b4c:	e0bffb17 	ldw	r2,-20(fp)
10013b50:	10002126 	beq	r2,zero,10013bd8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10013b54:	e0bffb17 	ldw	r2,-20(fp)
10013b58:	10800217 	ldw	r2,8(r2)
10013b5c:	108000cc 	andi	r2,r2,3
10013b60:	10001826 	beq	r2,zero,10013bc4 <write+0xc4>
10013b64:	e0bffb17 	ldw	r2,-20(fp)
10013b68:	10800017 	ldw	r2,0(r2)
10013b6c:	10800617 	ldw	r2,24(r2)
10013b70:	10001426 	beq	r2,zero,10013bc4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10013b74:	e0bffb17 	ldw	r2,-20(fp)
10013b78:	10800017 	ldw	r2,0(r2)
10013b7c:	10800617 	ldw	r2,24(r2)
10013b80:	e0ffff17 	ldw	r3,-4(fp)
10013b84:	e13ffb17 	ldw	r4,-20(fp)
10013b88:	e17ffe17 	ldw	r5,-8(fp)
10013b8c:	180d883a 	mov	r6,r3
10013b90:	103ee83a 	callr	r2
10013b94:	e0bffc15 	stw	r2,-16(fp)
10013b98:	e0bffc17 	ldw	r2,-16(fp)
10013b9c:	1000070e 	bge	r2,zero,10013bbc <write+0xbc>
      {
        ALT_ERRNO = -rval;
10013ba0:	0013ab00 	call	10013ab0 <alt_get_errno>
10013ba4:	1007883a 	mov	r3,r2
10013ba8:	e0bffc17 	ldw	r2,-16(fp)
10013bac:	0085c83a 	sub	r2,zero,r2
10013bb0:	18800015 	stw	r2,0(r3)
        return -1;
10013bb4:	00bfffc4 	movi	r2,-1
10013bb8:	00000c06 	br	10013bec <write+0xec>
      }
      return rval;
10013bbc:	e0bffc17 	ldw	r2,-16(fp)
10013bc0:	00000a06 	br	10013bec <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10013bc4:	0013ab00 	call	10013ab0 <alt_get_errno>
10013bc8:	1007883a 	mov	r3,r2
10013bcc:	00800344 	movi	r2,13
10013bd0:	18800015 	stw	r2,0(r3)
10013bd4:	00000406 	br	10013be8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10013bd8:	0013ab00 	call	10013ab0 <alt_get_errno>
10013bdc:	1007883a 	mov	r3,r2
10013be0:	00801444 	movi	r2,81
10013be4:	18800015 	stw	r2,0(r3)
  }
  return -1;
10013be8:	00bfffc4 	movi	r2,-1
}
10013bec:	e037883a 	mov	sp,fp
10013bf0:	dfc00117 	ldw	ra,4(sp)
10013bf4:	df000017 	ldw	fp,0(sp)
10013bf8:	dec00204 	addi	sp,sp,8
10013bfc:	f800283a 	ret

10013c00 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10013c00:	defffd04 	addi	sp,sp,-12
10013c04:	dfc00215 	stw	ra,8(sp)
10013c08:	df000115 	stw	fp,4(sp)
10013c0c:	df000104 	addi	fp,sp,4
10013c10:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10013c14:	e13fff17 	ldw	r4,-4(fp)
10013c18:	014400b4 	movhi	r5,4098
10013c1c:	29666a04 	addi	r5,r5,-26200
10013c20:	0014a040 	call	10014a04 <alt_dev_llist_insert>
}
10013c24:	e037883a 	mov	sp,fp
10013c28:	dfc00117 	ldw	ra,4(sp)
10013c2c:	df000017 	ldw	fp,0(sp)
10013c30:	dec00204 	addi	sp,sp,8
10013c34:	f800283a 	ret

10013c38 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10013c38:	defffd04 	addi	sp,sp,-12
10013c3c:	dfc00215 	stw	ra,8(sp)
10013c40:	df000115 	stw	fp,4(sp)
10013c44:	df000104 	addi	fp,sp,4
10013c48:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
10013c4c:	00153ec0 	call	100153ec <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10013c50:	00800044 	movi	r2,1
10013c54:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10013c58:	e037883a 	mov	sp,fp
10013c5c:	dfc00117 	ldw	ra,4(sp)
10013c60:	df000017 	ldw	fp,0(sp)
10013c64:	dec00204 	addi	sp,sp,8
10013c68:	f800283a 	ret

10013c6c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10013c6c:	defffe04 	addi	sp,sp,-8
10013c70:	dfc00115 	stw	ra,4(sp)
10013c74:	df000015 	stw	fp,0(sp)
10013c78:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10013c7c:	010400b4 	movhi	r4,4098
10013c80:	21225404 	addi	r4,r4,-30384
10013c84:	000b883a 	mov	r5,zero
10013c88:	01800144 	movi	r6,5
10013c8c:	0013e180 	call	10013e18 <altera_avalon_jtag_uart_init>
10013c90:	010400b4 	movhi	r4,4098
10013c94:	21224a04 	addi	r4,r4,-30424
10013c98:	0013c000 	call	10013c00 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10013c9c:	0001883a 	nop
}
10013ca0:	e037883a 	mov	sp,fp
10013ca4:	dfc00117 	ldw	ra,4(sp)
10013ca8:	df000017 	ldw	fp,0(sp)
10013cac:	dec00204 	addi	sp,sp,8
10013cb0:	f800283a 	ret

10013cb4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10013cb4:	defffa04 	addi	sp,sp,-24
10013cb8:	dfc00515 	stw	ra,20(sp)
10013cbc:	df000415 	stw	fp,16(sp)
10013cc0:	df000404 	addi	fp,sp,16
10013cc4:	e13ffd15 	stw	r4,-12(fp)
10013cc8:	e17ffe15 	stw	r5,-8(fp)
10013ccc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10013cd0:	e0bffd17 	ldw	r2,-12(fp)
10013cd4:	10800017 	ldw	r2,0(r2)
10013cd8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10013cdc:	e0bffc17 	ldw	r2,-16(fp)
10013ce0:	10c00a04 	addi	r3,r2,40
10013ce4:	e0bffd17 	ldw	r2,-12(fp)
10013ce8:	10800217 	ldw	r2,8(r2)
10013cec:	1809883a 	mov	r4,r3
10013cf0:	e17ffe17 	ldw	r5,-8(fp)
10013cf4:	e1bfff17 	ldw	r6,-4(fp)
10013cf8:	100f883a 	mov	r7,r2
10013cfc:	00142dc0 	call	100142dc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10013d00:	e037883a 	mov	sp,fp
10013d04:	dfc00117 	ldw	ra,4(sp)
10013d08:	df000017 	ldw	fp,0(sp)
10013d0c:	dec00204 	addi	sp,sp,8
10013d10:	f800283a 	ret

10013d14 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10013d14:	defffa04 	addi	sp,sp,-24
10013d18:	dfc00515 	stw	ra,20(sp)
10013d1c:	df000415 	stw	fp,16(sp)
10013d20:	df000404 	addi	fp,sp,16
10013d24:	e13ffd15 	stw	r4,-12(fp)
10013d28:	e17ffe15 	stw	r5,-8(fp)
10013d2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10013d30:	e0bffd17 	ldw	r2,-12(fp)
10013d34:	10800017 	ldw	r2,0(r2)
10013d38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10013d3c:	e0bffc17 	ldw	r2,-16(fp)
10013d40:	10c00a04 	addi	r3,r2,40
10013d44:	e0bffd17 	ldw	r2,-12(fp)
10013d48:	10800217 	ldw	r2,8(r2)
10013d4c:	1809883a 	mov	r4,r3
10013d50:	e17ffe17 	ldw	r5,-8(fp)
10013d54:	e1bfff17 	ldw	r6,-4(fp)
10013d58:	100f883a 	mov	r7,r2
10013d5c:	00144e80 	call	100144e8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10013d60:	e037883a 	mov	sp,fp
10013d64:	dfc00117 	ldw	ra,4(sp)
10013d68:	df000017 	ldw	fp,0(sp)
10013d6c:	dec00204 	addi	sp,sp,8
10013d70:	f800283a 	ret

10013d74 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10013d74:	defffc04 	addi	sp,sp,-16
10013d78:	dfc00315 	stw	ra,12(sp)
10013d7c:	df000215 	stw	fp,8(sp)
10013d80:	df000204 	addi	fp,sp,8
10013d84:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10013d88:	e0bfff17 	ldw	r2,-4(fp)
10013d8c:	10800017 	ldw	r2,0(r2)
10013d90:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10013d94:	e0bffe17 	ldw	r2,-8(fp)
10013d98:	10c00a04 	addi	r3,r2,40
10013d9c:	e0bfff17 	ldw	r2,-4(fp)
10013da0:	10800217 	ldw	r2,8(r2)
10013da4:	1809883a 	mov	r4,r3
10013da8:	100b883a 	mov	r5,r2
10013dac:	00141880 	call	10014188 <altera_avalon_jtag_uart_close>
}
10013db0:	e037883a 	mov	sp,fp
10013db4:	dfc00117 	ldw	ra,4(sp)
10013db8:	df000017 	ldw	fp,0(sp)
10013dbc:	dec00204 	addi	sp,sp,8
10013dc0:	f800283a 	ret

10013dc4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10013dc4:	defffa04 	addi	sp,sp,-24
10013dc8:	dfc00515 	stw	ra,20(sp)
10013dcc:	df000415 	stw	fp,16(sp)
10013dd0:	df000404 	addi	fp,sp,16
10013dd4:	e13ffd15 	stw	r4,-12(fp)
10013dd8:	e17ffe15 	stw	r5,-8(fp)
10013ddc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10013de0:	e0bffd17 	ldw	r2,-12(fp)
10013de4:	10800017 	ldw	r2,0(r2)
10013de8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10013dec:	e0bffc17 	ldw	r2,-16(fp)
10013df0:	10800a04 	addi	r2,r2,40
10013df4:	1009883a 	mov	r4,r2
10013df8:	e17ffe17 	ldw	r5,-8(fp)
10013dfc:	e1bfff17 	ldw	r6,-4(fp)
10013e00:	00141f00 	call	100141f0 <altera_avalon_jtag_uart_ioctl>
}
10013e04:	e037883a 	mov	sp,fp
10013e08:	dfc00117 	ldw	ra,4(sp)
10013e0c:	df000017 	ldw	fp,0(sp)
10013e10:	dec00204 	addi	sp,sp,8
10013e14:	f800283a 	ret

10013e18 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10013e18:	defffa04 	addi	sp,sp,-24
10013e1c:	dfc00515 	stw	ra,20(sp)
10013e20:	df000415 	stw	fp,16(sp)
10013e24:	df000404 	addi	fp,sp,16
10013e28:	e13ffd15 	stw	r4,-12(fp)
10013e2c:	e17ffe15 	stw	r5,-8(fp)
10013e30:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10013e34:	e0bffd17 	ldw	r2,-12(fp)
10013e38:	00c00044 	movi	r3,1
10013e3c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10013e40:	e0bffd17 	ldw	r2,-12(fp)
10013e44:	10800017 	ldw	r2,0(r2)
10013e48:	10800104 	addi	r2,r2,4
10013e4c:	1007883a 	mov	r3,r2
10013e50:	e0bffd17 	ldw	r2,-12(fp)
10013e54:	10800817 	ldw	r2,32(r2)
10013e58:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10013e5c:	e0fffe17 	ldw	r3,-8(fp)
10013e60:	e0bfff17 	ldw	r2,-4(fp)
10013e64:	d8000015 	stw	zero,0(sp)
10013e68:	1809883a 	mov	r4,r3
10013e6c:	100b883a 	mov	r5,r2
10013e70:	01840074 	movhi	r6,4097
10013e74:	318fb704 	addi	r6,r6,16092
10013e78:	e1fffd17 	ldw	r7,-12(fp)
10013e7c:	0014b840 	call	10014b84 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10013e80:	e0bffd17 	ldw	r2,-12(fp)
10013e84:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10013e88:	e0bffd17 	ldw	r2,-12(fp)
10013e8c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10013e90:	008400b4 	movhi	r2,4098
10013e94:	10ad3904 	addi	r2,r2,-19228
10013e98:	10800017 	ldw	r2,0(r2)
10013e9c:	1809883a 	mov	r4,r3
10013ea0:	100b883a 	mov	r5,r2
10013ea4:	01840074 	movhi	r6,4097
10013ea8:	31903804 	addi	r6,r6,16608
10013eac:	e1fffd17 	ldw	r7,-12(fp)
10013eb0:	00147000 	call	10014700 <alt_alarm_start>
10013eb4:	1000040e 	bge	r2,zero,10013ec8 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10013eb8:	e0fffd17 	ldw	r3,-12(fp)
10013ebc:	00a00034 	movhi	r2,32768
10013ec0:	10bfffc4 	addi	r2,r2,-1
10013ec4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10013ec8:	e037883a 	mov	sp,fp
10013ecc:	dfc00117 	ldw	ra,4(sp)
10013ed0:	df000017 	ldw	fp,0(sp)
10013ed4:	dec00204 	addi	sp,sp,8
10013ed8:	f800283a 	ret

10013edc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10013edc:	defff804 	addi	sp,sp,-32
10013ee0:	df000715 	stw	fp,28(sp)
10013ee4:	df000704 	addi	fp,sp,28
10013ee8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10013eec:	e0bfff17 	ldw	r2,-4(fp)
10013ef0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10013ef4:	e0bffb17 	ldw	r2,-20(fp)
10013ef8:	10800017 	ldw	r2,0(r2)
10013efc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10013f00:	e0bffc17 	ldw	r2,-16(fp)
10013f04:	10800104 	addi	r2,r2,4
10013f08:	10800037 	ldwio	r2,0(r2)
10013f0c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10013f10:	e0bffd17 	ldw	r2,-12(fp)
10013f14:	1080c00c 	andi	r2,r2,768
10013f18:	1000011e 	bne	r2,zero,10013f20 <altera_avalon_jtag_uart_irq+0x44>
      break;
10013f1c:	00006c06 	br	100140d0 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10013f20:	e0bffd17 	ldw	r2,-12(fp)
10013f24:	1080400c 	andi	r2,r2,256
10013f28:	10003426 	beq	r2,zero,10013ffc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10013f2c:	00800074 	movhi	r2,1
10013f30:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10013f34:	e0bffb17 	ldw	r2,-20(fp)
10013f38:	10800a17 	ldw	r2,40(r2)
10013f3c:	10800044 	addi	r2,r2,1
10013f40:	1081ffcc 	andi	r2,r2,2047
10013f44:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10013f48:	e0bffb17 	ldw	r2,-20(fp)
10013f4c:	10c00b17 	ldw	r3,44(r2)
10013f50:	e0bffe17 	ldw	r2,-8(fp)
10013f54:	1880011e 	bne	r3,r2,10013f5c <altera_avalon_jtag_uart_irq+0x80>
          break;
10013f58:	00001606 	br	10013fb4 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10013f5c:	e0bffc17 	ldw	r2,-16(fp)
10013f60:	10800037 	ldwio	r2,0(r2)
10013f64:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10013f68:	e0bff917 	ldw	r2,-28(fp)
10013f6c:	10a0000c 	andi	r2,r2,32768
10013f70:	1000011e 	bne	r2,zero,10013f78 <altera_avalon_jtag_uart_irq+0x9c>
          break;
10013f74:	00000f06 	br	10013fb4 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10013f78:	e0bffb17 	ldw	r2,-20(fp)
10013f7c:	10800a17 	ldw	r2,40(r2)
10013f80:	e0fff917 	ldw	r3,-28(fp)
10013f84:	1809883a 	mov	r4,r3
10013f88:	e0fffb17 	ldw	r3,-20(fp)
10013f8c:	1885883a 	add	r2,r3,r2
10013f90:	10800e04 	addi	r2,r2,56
10013f94:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10013f98:	e0bffb17 	ldw	r2,-20(fp)
10013f9c:	10800a17 	ldw	r2,40(r2)
10013fa0:	10800044 	addi	r2,r2,1
10013fa4:	10c1ffcc 	andi	r3,r2,2047
10013fa8:	e0bffb17 	ldw	r2,-20(fp)
10013fac:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10013fb0:	003fe006 	br	10013f34 <__alt_data_end+0xf8013f34>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10013fb4:	e0bff917 	ldw	r2,-28(fp)
10013fb8:	10bfffec 	andhi	r2,r2,65535
10013fbc:	10000f26 	beq	r2,zero,10013ffc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10013fc0:	e0bffb17 	ldw	r2,-20(fp)
10013fc4:	10c00817 	ldw	r3,32(r2)
10013fc8:	00bfff84 	movi	r2,-2
10013fcc:	1886703a 	and	r3,r3,r2
10013fd0:	e0bffb17 	ldw	r2,-20(fp)
10013fd4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10013fd8:	e0bffc17 	ldw	r2,-16(fp)
10013fdc:	10800104 	addi	r2,r2,4
10013fe0:	1007883a 	mov	r3,r2
10013fe4:	e0bffb17 	ldw	r2,-20(fp)
10013fe8:	10800817 	ldw	r2,32(r2)
10013fec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10013ff0:	e0bffc17 	ldw	r2,-16(fp)
10013ff4:	10800104 	addi	r2,r2,4
10013ff8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10013ffc:	e0bffd17 	ldw	r2,-12(fp)
10014000:	1080800c 	andi	r2,r2,512
10014004:	10003126 	beq	r2,zero,100140cc <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10014008:	e0bffd17 	ldw	r2,-12(fp)
1001400c:	1004d43a 	srli	r2,r2,16
10014010:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10014014:	00001406 	br	10014068 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10014018:	e0bffc17 	ldw	r2,-16(fp)
1001401c:	e0fffb17 	ldw	r3,-20(fp)
10014020:	18c00d17 	ldw	r3,52(r3)
10014024:	e13ffb17 	ldw	r4,-20(fp)
10014028:	20c7883a 	add	r3,r4,r3
1001402c:	18c20e04 	addi	r3,r3,2104
10014030:	18c00003 	ldbu	r3,0(r3)
10014034:	18c03fcc 	andi	r3,r3,255
10014038:	18c0201c 	xori	r3,r3,128
1001403c:	18ffe004 	addi	r3,r3,-128
10014040:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10014044:	e0bffb17 	ldw	r2,-20(fp)
10014048:	10800d17 	ldw	r2,52(r2)
1001404c:	10800044 	addi	r2,r2,1
10014050:	10c1ffcc 	andi	r3,r2,2047
10014054:	e0bffb17 	ldw	r2,-20(fp)
10014058:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1001405c:	e0bffa17 	ldw	r2,-24(fp)
10014060:	10bfffc4 	addi	r2,r2,-1
10014064:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10014068:	e0bffa17 	ldw	r2,-24(fp)
1001406c:	10000526 	beq	r2,zero,10014084 <altera_avalon_jtag_uart_irq+0x1a8>
10014070:	e0bffb17 	ldw	r2,-20(fp)
10014074:	10c00d17 	ldw	r3,52(r2)
10014078:	e0bffb17 	ldw	r2,-20(fp)
1001407c:	10800c17 	ldw	r2,48(r2)
10014080:	18bfe51e 	bne	r3,r2,10014018 <__alt_data_end+0xf8014018>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10014084:	e0bffa17 	ldw	r2,-24(fp)
10014088:	10001026 	beq	r2,zero,100140cc <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1001408c:	e0bffb17 	ldw	r2,-20(fp)
10014090:	10c00817 	ldw	r3,32(r2)
10014094:	00bfff44 	movi	r2,-3
10014098:	1886703a 	and	r3,r3,r2
1001409c:	e0bffb17 	ldw	r2,-20(fp)
100140a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100140a4:	e0bffb17 	ldw	r2,-20(fp)
100140a8:	10800017 	ldw	r2,0(r2)
100140ac:	10800104 	addi	r2,r2,4
100140b0:	1007883a 	mov	r3,r2
100140b4:	e0bffb17 	ldw	r2,-20(fp)
100140b8:	10800817 	ldw	r2,32(r2)
100140bc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100140c0:	e0bffc17 	ldw	r2,-16(fp)
100140c4:	10800104 	addi	r2,r2,4
100140c8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
100140cc:	003f8c06 	br	10013f00 <__alt_data_end+0xf8013f00>
}
100140d0:	e037883a 	mov	sp,fp
100140d4:	df000017 	ldw	fp,0(sp)
100140d8:	dec00104 	addi	sp,sp,4
100140dc:	f800283a 	ret

100140e0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
100140e0:	defff804 	addi	sp,sp,-32
100140e4:	df000715 	stw	fp,28(sp)
100140e8:	df000704 	addi	fp,sp,28
100140ec:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
100140f0:	e0bffb17 	ldw	r2,-20(fp)
100140f4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
100140f8:	e0bff917 	ldw	r2,-28(fp)
100140fc:	10800017 	ldw	r2,0(r2)
10014100:	10800104 	addi	r2,r2,4
10014104:	10800037 	ldwio	r2,0(r2)
10014108:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1001410c:	e0bffa17 	ldw	r2,-24(fp)
10014110:	1081000c 	andi	r2,r2,1024
10014114:	10000b26 	beq	r2,zero,10014144 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10014118:	e0bff917 	ldw	r2,-28(fp)
1001411c:	10800017 	ldw	r2,0(r2)
10014120:	10800104 	addi	r2,r2,4
10014124:	1007883a 	mov	r3,r2
10014128:	e0bff917 	ldw	r2,-28(fp)
1001412c:	10800817 	ldw	r2,32(r2)
10014130:	10810014 	ori	r2,r2,1024
10014134:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10014138:	e0bff917 	ldw	r2,-28(fp)
1001413c:	10000915 	stw	zero,36(r2)
10014140:	00000a06 	br	1001416c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10014144:	e0bff917 	ldw	r2,-28(fp)
10014148:	10c00917 	ldw	r3,36(r2)
1001414c:	00a00034 	movhi	r2,32768
10014150:	10bfff04 	addi	r2,r2,-4
10014154:	10c00536 	bltu	r2,r3,1001416c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10014158:	e0bff917 	ldw	r2,-28(fp)
1001415c:	10800917 	ldw	r2,36(r2)
10014160:	10c00044 	addi	r3,r2,1
10014164:	e0bff917 	ldw	r2,-28(fp)
10014168:	10c00915 	stw	r3,36(r2)
1001416c:	008400b4 	movhi	r2,4098
10014170:	10ad3904 	addi	r2,r2,-19228
10014174:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10014178:	e037883a 	mov	sp,fp
1001417c:	df000017 	ldw	fp,0(sp)
10014180:	dec00104 	addi	sp,sp,4
10014184:	f800283a 	ret

10014188 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10014188:	defffd04 	addi	sp,sp,-12
1001418c:	df000215 	stw	fp,8(sp)
10014190:	df000204 	addi	fp,sp,8
10014194:	e13ffe15 	stw	r4,-8(fp)
10014198:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1001419c:	00000506 	br	100141b4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
100141a0:	e0bfff17 	ldw	r2,-4(fp)
100141a4:	1090000c 	andi	r2,r2,16384
100141a8:	10000226 	beq	r2,zero,100141b4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
100141ac:	00bffd44 	movi	r2,-11
100141b0:	00000b06 	br	100141e0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100141b4:	e0bffe17 	ldw	r2,-8(fp)
100141b8:	10c00d17 	ldw	r3,52(r2)
100141bc:	e0bffe17 	ldw	r2,-8(fp)
100141c0:	10800c17 	ldw	r2,48(r2)
100141c4:	18800526 	beq	r3,r2,100141dc <altera_avalon_jtag_uart_close+0x54>
100141c8:	e0bffe17 	ldw	r2,-8(fp)
100141cc:	10c00917 	ldw	r3,36(r2)
100141d0:	e0bffe17 	ldw	r2,-8(fp)
100141d4:	10800117 	ldw	r2,4(r2)
100141d8:	18bff136 	bltu	r3,r2,100141a0 <__alt_data_end+0xf80141a0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
100141dc:	0005883a 	mov	r2,zero
}
100141e0:	e037883a 	mov	sp,fp
100141e4:	df000017 	ldw	fp,0(sp)
100141e8:	dec00104 	addi	sp,sp,4
100141ec:	f800283a 	ret

100141f0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
100141f0:	defffa04 	addi	sp,sp,-24
100141f4:	df000515 	stw	fp,20(sp)
100141f8:	df000504 	addi	fp,sp,20
100141fc:	e13ffd15 	stw	r4,-12(fp)
10014200:	e17ffe15 	stw	r5,-8(fp)
10014204:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10014208:	00bff9c4 	movi	r2,-25
1001420c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10014210:	e0bffe17 	ldw	r2,-8(fp)
10014214:	10da8060 	cmpeqi	r3,r2,27137
10014218:	1800031e 	bne	r3,zero,10014228 <altera_avalon_jtag_uart_ioctl+0x38>
1001421c:	109a80a0 	cmpeqi	r2,r2,27138
10014220:	1000191e 	bne	r2,zero,10014288 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
10014224:	00002806 	br	100142c8 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10014228:	e0bffd17 	ldw	r2,-12(fp)
1001422c:	10c00117 	ldw	r3,4(r2)
10014230:	00a00034 	movhi	r2,32768
10014234:	10bfffc4 	addi	r2,r2,-1
10014238:	18801226 	beq	r3,r2,10014284 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
1001423c:	e0bfff17 	ldw	r2,-4(fp)
10014240:	10800017 	ldw	r2,0(r2)
10014244:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10014248:	e0bffc17 	ldw	r2,-16(fp)
1001424c:	10800090 	cmplti	r2,r2,2
10014250:	1000061e 	bne	r2,zero,1001426c <altera_avalon_jtag_uart_ioctl+0x7c>
10014254:	e0fffc17 	ldw	r3,-16(fp)
10014258:	00a00034 	movhi	r2,32768
1001425c:	10bfffc4 	addi	r2,r2,-1
10014260:	18800226 	beq	r3,r2,1001426c <altera_avalon_jtag_uart_ioctl+0x7c>
10014264:	e0bffc17 	ldw	r2,-16(fp)
10014268:	00000206 	br	10014274 <altera_avalon_jtag_uart_ioctl+0x84>
1001426c:	00a00034 	movhi	r2,32768
10014270:	10bfff84 	addi	r2,r2,-2
10014274:	e0fffd17 	ldw	r3,-12(fp)
10014278:	18800115 	stw	r2,4(r3)
      rc = 0;
1001427c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10014280:	00001106 	br	100142c8 <altera_avalon_jtag_uart_ioctl+0xd8>
10014284:	00001006 	br	100142c8 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10014288:	e0bffd17 	ldw	r2,-12(fp)
1001428c:	10c00117 	ldw	r3,4(r2)
10014290:	00a00034 	movhi	r2,32768
10014294:	10bfffc4 	addi	r2,r2,-1
10014298:	18800a26 	beq	r3,r2,100142c4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1001429c:	e0bffd17 	ldw	r2,-12(fp)
100142a0:	10c00917 	ldw	r3,36(r2)
100142a4:	e0bffd17 	ldw	r2,-12(fp)
100142a8:	10800117 	ldw	r2,4(r2)
100142ac:	1885803a 	cmpltu	r2,r3,r2
100142b0:	10c03fcc 	andi	r3,r2,255
100142b4:	e0bfff17 	ldw	r2,-4(fp)
100142b8:	10c00015 	stw	r3,0(r2)
      rc = 0;
100142bc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100142c0:	00000006 	br	100142c4 <altera_avalon_jtag_uart_ioctl+0xd4>
100142c4:	0001883a 	nop

  default:
    break;
  }

  return rc;
100142c8:	e0bffb17 	ldw	r2,-20(fp)
}
100142cc:	e037883a 	mov	sp,fp
100142d0:	df000017 	ldw	fp,0(sp)
100142d4:	dec00104 	addi	sp,sp,4
100142d8:	f800283a 	ret

100142dc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
100142dc:	defff304 	addi	sp,sp,-52
100142e0:	dfc00c15 	stw	ra,48(sp)
100142e4:	df000b15 	stw	fp,44(sp)
100142e8:	df000b04 	addi	fp,sp,44
100142ec:	e13ffc15 	stw	r4,-16(fp)
100142f0:	e17ffd15 	stw	r5,-12(fp)
100142f4:	e1bffe15 	stw	r6,-8(fp)
100142f8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
100142fc:	e0bffd17 	ldw	r2,-12(fp)
10014300:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10014304:	00004906 	br	1001442c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10014308:	e0bffc17 	ldw	r2,-16(fp)
1001430c:	10800a17 	ldw	r2,40(r2)
10014310:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10014314:	e0bffc17 	ldw	r2,-16(fp)
10014318:	10800b17 	ldw	r2,44(r2)
1001431c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10014320:	e0fff717 	ldw	r3,-36(fp)
10014324:	e0bff817 	ldw	r2,-32(fp)
10014328:	18800536 	bltu	r3,r2,10014340 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1001432c:	e0fff717 	ldw	r3,-36(fp)
10014330:	e0bff817 	ldw	r2,-32(fp)
10014334:	1885c83a 	sub	r2,r3,r2
10014338:	e0bff615 	stw	r2,-40(fp)
1001433c:	00000406 	br	10014350 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10014340:	00c20004 	movi	r3,2048
10014344:	e0bff817 	ldw	r2,-32(fp)
10014348:	1885c83a 	sub	r2,r3,r2
1001434c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10014350:	e0bff617 	ldw	r2,-40(fp)
10014354:	1000011e 	bne	r2,zero,1001435c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
10014358:	00001d06 	br	100143d0 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
1001435c:	e0fffe17 	ldw	r3,-8(fp)
10014360:	e0bff617 	ldw	r2,-40(fp)
10014364:	1880022e 	bgeu	r3,r2,10014370 <altera_avalon_jtag_uart_read+0x94>
        n = space;
10014368:	e0bffe17 	ldw	r2,-8(fp)
1001436c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10014370:	e0bff817 	ldw	r2,-32(fp)
10014374:	10800e04 	addi	r2,r2,56
10014378:	e0fffc17 	ldw	r3,-16(fp)
1001437c:	1885883a 	add	r2,r3,r2
10014380:	e13ff517 	ldw	r4,-44(fp)
10014384:	100b883a 	mov	r5,r2
10014388:	e1bff617 	ldw	r6,-40(fp)
1001438c:	00079d40 	call	100079d4 <memcpy>
      ptr   += n;
10014390:	e0fff517 	ldw	r3,-44(fp)
10014394:	e0bff617 	ldw	r2,-40(fp)
10014398:	1885883a 	add	r2,r3,r2
1001439c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
100143a0:	e0fffe17 	ldw	r3,-8(fp)
100143a4:	e0bff617 	ldw	r2,-40(fp)
100143a8:	1885c83a 	sub	r2,r3,r2
100143ac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100143b0:	e0fff817 	ldw	r3,-32(fp)
100143b4:	e0bff617 	ldw	r2,-40(fp)
100143b8:	1885883a 	add	r2,r3,r2
100143bc:	10c1ffcc 	andi	r3,r2,2047
100143c0:	e0bffc17 	ldw	r2,-16(fp)
100143c4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
100143c8:	e0bffe17 	ldw	r2,-8(fp)
100143cc:	00bfce16 	blt	zero,r2,10014308 <__alt_data_end+0xf8014308>

    /* If we read any data then return it */
    if (ptr != buffer)
100143d0:	e0fff517 	ldw	r3,-44(fp)
100143d4:	e0bffd17 	ldw	r2,-12(fp)
100143d8:	18800126 	beq	r3,r2,100143e0 <altera_avalon_jtag_uart_read+0x104>
      break;
100143dc:	00001506 	br	10014434 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
100143e0:	e0bfff17 	ldw	r2,-4(fp)
100143e4:	1090000c 	andi	r2,r2,16384
100143e8:	10000126 	beq	r2,zero,100143f0 <altera_avalon_jtag_uart_read+0x114>
      break;
100143ec:	00001106 	br	10014434 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
100143f0:	0001883a 	nop
100143f4:	e0bffc17 	ldw	r2,-16(fp)
100143f8:	10c00a17 	ldw	r3,40(r2)
100143fc:	e0bff717 	ldw	r2,-36(fp)
10014400:	1880051e 	bne	r3,r2,10014418 <altera_avalon_jtag_uart_read+0x13c>
10014404:	e0bffc17 	ldw	r2,-16(fp)
10014408:	10c00917 	ldw	r3,36(r2)
1001440c:	e0bffc17 	ldw	r2,-16(fp)
10014410:	10800117 	ldw	r2,4(r2)
10014414:	18bff736 	bltu	r3,r2,100143f4 <__alt_data_end+0xf80143f4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10014418:	e0bffc17 	ldw	r2,-16(fp)
1001441c:	10c00a17 	ldw	r3,40(r2)
10014420:	e0bff717 	ldw	r2,-36(fp)
10014424:	1880011e 	bne	r3,r2,1001442c <altera_avalon_jtag_uart_read+0x150>
      break;
10014428:	00000206 	br	10014434 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1001442c:	e0bffe17 	ldw	r2,-8(fp)
10014430:	00bfb516 	blt	zero,r2,10014308 <__alt_data_end+0xf8014308>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10014434:	e0fff517 	ldw	r3,-44(fp)
10014438:	e0bffd17 	ldw	r2,-12(fp)
1001443c:	18801826 	beq	r3,r2,100144a0 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10014440:	0005303a 	rdctl	r2,status
10014444:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10014448:	e0fffa17 	ldw	r3,-24(fp)
1001444c:	00bfff84 	movi	r2,-2
10014450:	1884703a 	and	r2,r3,r2
10014454:	1001703a 	wrctl	status,r2
  
  return context;
10014458:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1001445c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10014460:	e0bffc17 	ldw	r2,-16(fp)
10014464:	10800817 	ldw	r2,32(r2)
10014468:	10c00054 	ori	r3,r2,1
1001446c:	e0bffc17 	ldw	r2,-16(fp)
10014470:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10014474:	e0bffc17 	ldw	r2,-16(fp)
10014478:	10800017 	ldw	r2,0(r2)
1001447c:	10800104 	addi	r2,r2,4
10014480:	1007883a 	mov	r3,r2
10014484:	e0bffc17 	ldw	r2,-16(fp)
10014488:	10800817 	ldw	r2,32(r2)
1001448c:	18800035 	stwio	r2,0(r3)
10014490:	e0bff917 	ldw	r2,-28(fp)
10014494:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10014498:	e0bffb17 	ldw	r2,-20(fp)
1001449c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
100144a0:	e0fff517 	ldw	r3,-44(fp)
100144a4:	e0bffd17 	ldw	r2,-12(fp)
100144a8:	18800426 	beq	r3,r2,100144bc <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
100144ac:	e0fff517 	ldw	r3,-44(fp)
100144b0:	e0bffd17 	ldw	r2,-12(fp)
100144b4:	1885c83a 	sub	r2,r3,r2
100144b8:	00000606 	br	100144d4 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
100144bc:	e0bfff17 	ldw	r2,-4(fp)
100144c0:	1090000c 	andi	r2,r2,16384
100144c4:	10000226 	beq	r2,zero,100144d0 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
100144c8:	00bffd44 	movi	r2,-11
100144cc:	00000106 	br	100144d4 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
100144d0:	00bffec4 	movi	r2,-5
}
100144d4:	e037883a 	mov	sp,fp
100144d8:	dfc00117 	ldw	ra,4(sp)
100144dc:	df000017 	ldw	fp,0(sp)
100144e0:	dec00204 	addi	sp,sp,8
100144e4:	f800283a 	ret

100144e8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
100144e8:	defff304 	addi	sp,sp,-52
100144ec:	dfc00c15 	stw	ra,48(sp)
100144f0:	df000b15 	stw	fp,44(sp)
100144f4:	df000b04 	addi	fp,sp,44
100144f8:	e13ffc15 	stw	r4,-16(fp)
100144fc:	e17ffd15 	stw	r5,-12(fp)
10014500:	e1bffe15 	stw	r6,-8(fp)
10014504:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10014508:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1001450c:	e0bffd17 	ldw	r2,-12(fp)
10014510:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10014514:	00003806 	br	100145f8 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10014518:	e0bffc17 	ldw	r2,-16(fp)
1001451c:	10800c17 	ldw	r2,48(r2)
10014520:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
10014524:	e0bffc17 	ldw	r2,-16(fp)
10014528:	10800d17 	ldw	r2,52(r2)
1001452c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10014530:	e0fff817 	ldw	r3,-32(fp)
10014534:	e0bff517 	ldw	r2,-44(fp)
10014538:	1880062e 	bgeu	r3,r2,10014554 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1001453c:	e0fff517 	ldw	r3,-44(fp)
10014540:	e0bff817 	ldw	r2,-32(fp)
10014544:	1885c83a 	sub	r2,r3,r2
10014548:	10bfffc4 	addi	r2,r2,-1
1001454c:	e0bff615 	stw	r2,-40(fp)
10014550:	00000b06 	br	10014580 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10014554:	e0bff517 	ldw	r2,-44(fp)
10014558:	10000526 	beq	r2,zero,10014570 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1001455c:	00c20004 	movi	r3,2048
10014560:	e0bff817 	ldw	r2,-32(fp)
10014564:	1885c83a 	sub	r2,r3,r2
10014568:	e0bff615 	stw	r2,-40(fp)
1001456c:	00000406 	br	10014580 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10014570:	00c1ffc4 	movi	r3,2047
10014574:	e0bff817 	ldw	r2,-32(fp)
10014578:	1885c83a 	sub	r2,r3,r2
1001457c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10014580:	e0bff617 	ldw	r2,-40(fp)
10014584:	1000011e 	bne	r2,zero,1001458c <altera_avalon_jtag_uart_write+0xa4>
        break;
10014588:	00001d06 	br	10014600 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
1001458c:	e0fffe17 	ldw	r3,-8(fp)
10014590:	e0bff617 	ldw	r2,-40(fp)
10014594:	1880022e 	bgeu	r3,r2,100145a0 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
10014598:	e0bffe17 	ldw	r2,-8(fp)
1001459c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
100145a0:	e0bff817 	ldw	r2,-32(fp)
100145a4:	10820e04 	addi	r2,r2,2104
100145a8:	e0fffc17 	ldw	r3,-16(fp)
100145ac:	1885883a 	add	r2,r3,r2
100145b0:	1009883a 	mov	r4,r2
100145b4:	e17ffd17 	ldw	r5,-12(fp)
100145b8:	e1bff617 	ldw	r6,-40(fp)
100145bc:	00079d40 	call	100079d4 <memcpy>
      ptr   += n;
100145c0:	e0fffd17 	ldw	r3,-12(fp)
100145c4:	e0bff617 	ldw	r2,-40(fp)
100145c8:	1885883a 	add	r2,r3,r2
100145cc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
100145d0:	e0fffe17 	ldw	r3,-8(fp)
100145d4:	e0bff617 	ldw	r2,-40(fp)
100145d8:	1885c83a 	sub	r2,r3,r2
100145dc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100145e0:	e0fff817 	ldw	r3,-32(fp)
100145e4:	e0bff617 	ldw	r2,-40(fp)
100145e8:	1885883a 	add	r2,r3,r2
100145ec:	10c1ffcc 	andi	r3,r2,2047
100145f0:	e0bffc17 	ldw	r2,-16(fp)
100145f4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100145f8:	e0bffe17 	ldw	r2,-8(fp)
100145fc:	00bfc616 	blt	zero,r2,10014518 <__alt_data_end+0xf8014518>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10014600:	0005303a 	rdctl	r2,status
10014604:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10014608:	e0fffa17 	ldw	r3,-24(fp)
1001460c:	00bfff84 	movi	r2,-2
10014610:	1884703a 	and	r2,r3,r2
10014614:	1001703a 	wrctl	status,r2
  
  return context;
10014618:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1001461c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10014620:	e0bffc17 	ldw	r2,-16(fp)
10014624:	10800817 	ldw	r2,32(r2)
10014628:	10c00094 	ori	r3,r2,2
1001462c:	e0bffc17 	ldw	r2,-16(fp)
10014630:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10014634:	e0bffc17 	ldw	r2,-16(fp)
10014638:	10800017 	ldw	r2,0(r2)
1001463c:	10800104 	addi	r2,r2,4
10014640:	1007883a 	mov	r3,r2
10014644:	e0bffc17 	ldw	r2,-16(fp)
10014648:	10800817 	ldw	r2,32(r2)
1001464c:	18800035 	stwio	r2,0(r3)
10014650:	e0bff917 	ldw	r2,-28(fp)
10014654:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10014658:	e0bffb17 	ldw	r2,-20(fp)
1001465c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10014660:	e0bffe17 	ldw	r2,-8(fp)
10014664:	0080120e 	bge	zero,r2,100146b0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
10014668:	e0bfff17 	ldw	r2,-4(fp)
1001466c:	1090000c 	andi	r2,r2,16384
10014670:	10000126 	beq	r2,zero,10014678 <altera_avalon_jtag_uart_write+0x190>
        break;
10014674:	00001006 	br	100146b8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10014678:	0001883a 	nop
1001467c:	e0bffc17 	ldw	r2,-16(fp)
10014680:	10c00d17 	ldw	r3,52(r2)
10014684:	e0bff517 	ldw	r2,-44(fp)
10014688:	1880051e 	bne	r3,r2,100146a0 <altera_avalon_jtag_uart_write+0x1b8>
1001468c:	e0bffc17 	ldw	r2,-16(fp)
10014690:	10c00917 	ldw	r3,36(r2)
10014694:	e0bffc17 	ldw	r2,-16(fp)
10014698:	10800117 	ldw	r2,4(r2)
1001469c:	18bff736 	bltu	r3,r2,1001467c <__alt_data_end+0xf801467c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
100146a0:	e0bffc17 	ldw	r2,-16(fp)
100146a4:	10800917 	ldw	r2,36(r2)
100146a8:	10000126 	beq	r2,zero,100146b0 <altera_avalon_jtag_uart_write+0x1c8>
         break;
100146ac:	00000206 	br	100146b8 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
100146b0:	e0bffe17 	ldw	r2,-8(fp)
100146b4:	00bf9716 	blt	zero,r2,10014514 <__alt_data_end+0xf8014514>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
100146b8:	e0fffd17 	ldw	r3,-12(fp)
100146bc:	e0bff717 	ldw	r2,-36(fp)
100146c0:	18800426 	beq	r3,r2,100146d4 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
100146c4:	e0fffd17 	ldw	r3,-12(fp)
100146c8:	e0bff717 	ldw	r2,-36(fp)
100146cc:	1885c83a 	sub	r2,r3,r2
100146d0:	00000606 	br	100146ec <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
100146d4:	e0bfff17 	ldw	r2,-4(fp)
100146d8:	1090000c 	andi	r2,r2,16384
100146dc:	10000226 	beq	r2,zero,100146e8 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
100146e0:	00bffd44 	movi	r2,-11
100146e4:	00000106 	br	100146ec <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
100146e8:	00bffec4 	movi	r2,-5
}
100146ec:	e037883a 	mov	sp,fp
100146f0:	dfc00117 	ldw	ra,4(sp)
100146f4:	df000017 	ldw	fp,0(sp)
100146f8:	dec00204 	addi	sp,sp,8
100146fc:	f800283a 	ret

10014700 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10014700:	defff504 	addi	sp,sp,-44
10014704:	df000a15 	stw	fp,40(sp)
10014708:	df000a04 	addi	fp,sp,40
1001470c:	e13ffc15 	stw	r4,-16(fp)
10014710:	e17ffd15 	stw	r5,-12(fp)
10014714:	e1bffe15 	stw	r6,-8(fp)
10014718:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1001471c:	e03ff615 	stw	zero,-40(fp)
10014720:	008400b4 	movhi	r2,4098
10014724:	10ad3904 	addi	r2,r2,-19228
10014728:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1001472c:	10003f26 	beq	r2,zero,1001482c <alt_alarm_start+0x12c>
  {
    if (alarm)
10014730:	e0bffc17 	ldw	r2,-16(fp)
10014734:	10003b26 	beq	r2,zero,10014824 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
10014738:	e0bffc17 	ldw	r2,-16(fp)
1001473c:	e0fffe17 	ldw	r3,-8(fp)
10014740:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10014744:	e0bffc17 	ldw	r2,-16(fp)
10014748:	e0ffff17 	ldw	r3,-4(fp)
1001474c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10014750:	0005303a 	rdctl	r2,status
10014754:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10014758:	e0fff817 	ldw	r3,-32(fp)
1001475c:	00bfff84 	movi	r2,-2
10014760:	1884703a 	and	r2,r3,r2
10014764:	1001703a 	wrctl	status,r2
  
  return context;
10014768:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1001476c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10014770:	008400b4 	movhi	r2,4098
10014774:	10ad3a04 	addi	r2,r2,-19224
10014778:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1001477c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10014780:	e0fffd17 	ldw	r3,-12(fp)
10014784:	e0bff617 	ldw	r2,-40(fp)
10014788:	1885883a 	add	r2,r3,r2
1001478c:	10c00044 	addi	r3,r2,1
10014790:	e0bffc17 	ldw	r2,-16(fp)
10014794:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10014798:	e0bffc17 	ldw	r2,-16(fp)
1001479c:	10c00217 	ldw	r3,8(r2)
100147a0:	e0bff617 	ldw	r2,-40(fp)
100147a4:	1880042e 	bgeu	r3,r2,100147b8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
100147a8:	e0bffc17 	ldw	r2,-16(fp)
100147ac:	00c00044 	movi	r3,1
100147b0:	10c00405 	stb	r3,16(r2)
100147b4:	00000206 	br	100147c0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
100147b8:	e0bffc17 	ldw	r2,-16(fp)
100147bc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
100147c0:	e0fffc17 	ldw	r3,-16(fp)
100147c4:	008400b4 	movhi	r2,4098
100147c8:	10a67004 	addi	r2,r2,-26176
100147cc:	e0bff915 	stw	r2,-28(fp)
100147d0:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100147d4:	e0bffa17 	ldw	r2,-24(fp)
100147d8:	e0fff917 	ldw	r3,-28(fp)
100147dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100147e0:	e0bff917 	ldw	r2,-28(fp)
100147e4:	10c00017 	ldw	r3,0(r2)
100147e8:	e0bffa17 	ldw	r2,-24(fp)
100147ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100147f0:	e0bff917 	ldw	r2,-28(fp)
100147f4:	10800017 	ldw	r2,0(r2)
100147f8:	e0fffa17 	ldw	r3,-24(fp)
100147fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10014800:	e0bff917 	ldw	r2,-28(fp)
10014804:	e0fffa17 	ldw	r3,-24(fp)
10014808:	10c00015 	stw	r3,0(r2)
1001480c:	e0bff717 	ldw	r2,-36(fp)
10014810:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10014814:	e0bffb17 	ldw	r2,-20(fp)
10014818:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1001481c:	0005883a 	mov	r2,zero
10014820:	00000306 	br	10014830 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
10014824:	00bffa84 	movi	r2,-22
10014828:	00000106 	br	10014830 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1001482c:	00bfde84 	movi	r2,-134
  }
}
10014830:	e037883a 	mov	sp,fp
10014834:	df000017 	ldw	fp,0(sp)
10014838:	dec00104 	addi	sp,sp,4
1001483c:	f800283a 	ret

10014840 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10014840:	defffa04 	addi	sp,sp,-24
10014844:	dfc00515 	stw	ra,20(sp)
10014848:	df000415 	stw	fp,16(sp)
1001484c:	df000404 	addi	fp,sp,16
10014850:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
10014854:	00800244 	movi	r2,9
10014858:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
1001485c:	e13ffd17 	ldw	r4,-12(fp)
10014860:	014003f4 	movhi	r5,15
10014864:	29509004 	addi	r5,r5,16960
10014868:	000586c0 	call	1000586c <__mulsi3>
1001486c:	0100bef4 	movhi	r4,763
10014870:	213c2004 	addi	r4,r4,-3968
10014874:	100b883a 	mov	r5,r2
10014878:	000585c0 	call	1000585c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
1001487c:	01200034 	movhi	r4,32768
10014880:	213fffc4 	addi	r4,r4,-1
10014884:	100b883a 	mov	r5,r2
10014888:	000585c0 	call	1000585c <__udivsi3>
1001488c:	e13fff17 	ldw	r4,-4(fp)
10014890:	100b883a 	mov	r5,r2
10014894:	000585c0 	call	1000585c <__udivsi3>
10014898:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
1001489c:	e0bffe17 	ldw	r2,-8(fp)
100148a0:	10002a26 	beq	r2,zero,1001494c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
100148a4:	e03ffc15 	stw	zero,-16(fp)
100148a8:	00001706 	br	10014908 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
100148ac:	00a00034 	movhi	r2,32768
100148b0:	10bfffc4 	addi	r2,r2,-1
100148b4:	10bfffc4 	addi	r2,r2,-1
100148b8:	103ffe1e 	bne	r2,zero,100148b4 <__alt_data_end+0xf80148b4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
100148bc:	e13ffd17 	ldw	r4,-12(fp)
100148c0:	014003f4 	movhi	r5,15
100148c4:	29509004 	addi	r5,r5,16960
100148c8:	000586c0 	call	1000586c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
100148cc:	0100bef4 	movhi	r4,763
100148d0:	213c2004 	addi	r4,r4,-3968
100148d4:	100b883a 	mov	r5,r2
100148d8:	000585c0 	call	1000585c <__udivsi3>
100148dc:	01200034 	movhi	r4,32768
100148e0:	213fffc4 	addi	r4,r4,-1
100148e4:	100b883a 	mov	r5,r2
100148e8:	000585c0 	call	1000585c <__udivsi3>
100148ec:	1007883a 	mov	r3,r2
100148f0:	e0bfff17 	ldw	r2,-4(fp)
100148f4:	10c5c83a 	sub	r2,r2,r3
100148f8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
100148fc:	e0bffc17 	ldw	r2,-16(fp)
10014900:	10800044 	addi	r2,r2,1
10014904:	e0bffc15 	stw	r2,-16(fp)
10014908:	e0fffc17 	ldw	r3,-16(fp)
1001490c:	e0bffe17 	ldw	r2,-8(fp)
10014910:	18bfe616 	blt	r3,r2,100148ac <__alt_data_end+0xf80148ac>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10014914:	e13ffd17 	ldw	r4,-12(fp)
10014918:	014003f4 	movhi	r5,15
1001491c:	29509004 	addi	r5,r5,16960
10014920:	000586c0 	call	1000586c <__mulsi3>
10014924:	0100bef4 	movhi	r4,763
10014928:	213c2004 	addi	r4,r4,-3968
1001492c:	100b883a 	mov	r5,r2
10014930:	000585c0 	call	1000585c <__udivsi3>
10014934:	1009883a 	mov	r4,r2
10014938:	e17fff17 	ldw	r5,-4(fp)
1001493c:	000586c0 	call	1000586c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10014940:	10bfffc4 	addi	r2,r2,-1
10014944:	103ffe1e 	bne	r2,zero,10014940 <__alt_data_end+0xf8014940>
10014948:	00000d06 	br	10014980 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1001494c:	e13ffd17 	ldw	r4,-12(fp)
10014950:	014003f4 	movhi	r5,15
10014954:	29509004 	addi	r5,r5,16960
10014958:	000586c0 	call	1000586c <__mulsi3>
1001495c:	0100bef4 	movhi	r4,763
10014960:	213c2004 	addi	r4,r4,-3968
10014964:	100b883a 	mov	r5,r2
10014968:	000585c0 	call	1000585c <__udivsi3>
1001496c:	1009883a 	mov	r4,r2
10014970:	e17fff17 	ldw	r5,-4(fp)
10014974:	000586c0 	call	1000586c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10014978:	10bfffc4 	addi	r2,r2,-1
1001497c:	00bffe16 	blt	zero,r2,10014978 <__alt_data_end+0xf8014978>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10014980:	0005883a 	mov	r2,zero
}
10014984:	e037883a 	mov	sp,fp
10014988:	dfc00117 	ldw	ra,4(sp)
1001498c:	df000017 	ldw	fp,0(sp)
10014990:	dec00204 	addi	sp,sp,8
10014994:	f800283a 	ret

10014998 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10014998:	deffff04 	addi	sp,sp,-4
1001499c:	df000015 	stw	fp,0(sp)
100149a0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100149a4:	e037883a 	mov	sp,fp
100149a8:	df000017 	ldw	fp,0(sp)
100149ac:	dec00104 	addi	sp,sp,4
100149b0:	f800283a 	ret

100149b4 <alt_get_errno>:
100149b4:	defffe04 	addi	sp,sp,-8
100149b8:	dfc00115 	stw	ra,4(sp)
100149bc:	df000015 	stw	fp,0(sp)
100149c0:	d839883a 	mov	fp,sp
100149c4:	008400b4 	movhi	r2,4098
100149c8:	10a66d04 	addi	r2,r2,-26188
100149cc:	10800017 	ldw	r2,0(r2)
100149d0:	10000526 	beq	r2,zero,100149e8 <alt_get_errno+0x34>
100149d4:	008400b4 	movhi	r2,4098
100149d8:	10a66d04 	addi	r2,r2,-26188
100149dc:	10800017 	ldw	r2,0(r2)
100149e0:	103ee83a 	callr	r2
100149e4:	00000206 	br	100149f0 <alt_get_errno+0x3c>
100149e8:	008400b4 	movhi	r2,4098
100149ec:	10ad3404 	addi	r2,r2,-19248
100149f0:	e037883a 	mov	sp,fp
100149f4:	dfc00117 	ldw	ra,4(sp)
100149f8:	df000017 	ldw	fp,0(sp)
100149fc:	dec00204 	addi	sp,sp,8
10014a00:	f800283a 	ret

10014a04 <alt_dev_llist_insert>:
10014a04:	defffa04 	addi	sp,sp,-24
10014a08:	dfc00515 	stw	ra,20(sp)
10014a0c:	df000415 	stw	fp,16(sp)
10014a10:	df000404 	addi	fp,sp,16
10014a14:	e13ffe15 	stw	r4,-8(fp)
10014a18:	e17fff15 	stw	r5,-4(fp)
10014a1c:	e0bffe17 	ldw	r2,-8(fp)
10014a20:	10000326 	beq	r2,zero,10014a30 <alt_dev_llist_insert+0x2c>
10014a24:	e0bffe17 	ldw	r2,-8(fp)
10014a28:	10800217 	ldw	r2,8(r2)
10014a2c:	1000061e 	bne	r2,zero,10014a48 <alt_dev_llist_insert+0x44>
10014a30:	00149b40 	call	100149b4 <alt_get_errno>
10014a34:	1007883a 	mov	r3,r2
10014a38:	00800584 	movi	r2,22
10014a3c:	18800015 	stw	r2,0(r3)
10014a40:	00bffa84 	movi	r2,-22
10014a44:	00001306 	br	10014a94 <alt_dev_llist_insert+0x90>
10014a48:	e0bffe17 	ldw	r2,-8(fp)
10014a4c:	e0ffff17 	ldw	r3,-4(fp)
10014a50:	e0fffc15 	stw	r3,-16(fp)
10014a54:	e0bffd15 	stw	r2,-12(fp)
10014a58:	e0bffd17 	ldw	r2,-12(fp)
10014a5c:	e0fffc17 	ldw	r3,-16(fp)
10014a60:	10c00115 	stw	r3,4(r2)
10014a64:	e0bffc17 	ldw	r2,-16(fp)
10014a68:	10c00017 	ldw	r3,0(r2)
10014a6c:	e0bffd17 	ldw	r2,-12(fp)
10014a70:	10c00015 	stw	r3,0(r2)
10014a74:	e0bffc17 	ldw	r2,-16(fp)
10014a78:	10800017 	ldw	r2,0(r2)
10014a7c:	e0fffd17 	ldw	r3,-12(fp)
10014a80:	10c00115 	stw	r3,4(r2)
10014a84:	e0bffc17 	ldw	r2,-16(fp)
10014a88:	e0fffd17 	ldw	r3,-12(fp)
10014a8c:	10c00015 	stw	r3,0(r2)
10014a90:	0005883a 	mov	r2,zero
10014a94:	e037883a 	mov	sp,fp
10014a98:	dfc00117 	ldw	ra,4(sp)
10014a9c:	df000017 	ldw	fp,0(sp)
10014aa0:	dec00204 	addi	sp,sp,8
10014aa4:	f800283a 	ret

10014aa8 <_do_ctors>:
10014aa8:	defffd04 	addi	sp,sp,-12
10014aac:	dfc00215 	stw	ra,8(sp)
10014ab0:	df000115 	stw	fp,4(sp)
10014ab4:	df000104 	addi	fp,sp,4
10014ab8:	00840074 	movhi	r2,4097
10014abc:	10968904 	addi	r2,r2,23076
10014ac0:	e0bfff15 	stw	r2,-4(fp)
10014ac4:	00000606 	br	10014ae0 <_do_ctors+0x38>
10014ac8:	e0bfff17 	ldw	r2,-4(fp)
10014acc:	10800017 	ldw	r2,0(r2)
10014ad0:	103ee83a 	callr	r2
10014ad4:	e0bfff17 	ldw	r2,-4(fp)
10014ad8:	10bfff04 	addi	r2,r2,-4
10014adc:	e0bfff15 	stw	r2,-4(fp)
10014ae0:	e0ffff17 	ldw	r3,-4(fp)
10014ae4:	00840074 	movhi	r2,4097
10014ae8:	10968a04 	addi	r2,r2,23080
10014aec:	18bff62e 	bgeu	r3,r2,10014ac8 <__alt_data_end+0xf8014ac8>
10014af0:	0001883a 	nop
10014af4:	e037883a 	mov	sp,fp
10014af8:	dfc00117 	ldw	ra,4(sp)
10014afc:	df000017 	ldw	fp,0(sp)
10014b00:	dec00204 	addi	sp,sp,8
10014b04:	f800283a 	ret

10014b08 <_do_dtors>:
10014b08:	defffd04 	addi	sp,sp,-12
10014b0c:	dfc00215 	stw	ra,8(sp)
10014b10:	df000115 	stw	fp,4(sp)
10014b14:	df000104 	addi	fp,sp,4
10014b18:	00840074 	movhi	r2,4097
10014b1c:	10968904 	addi	r2,r2,23076
10014b20:	e0bfff15 	stw	r2,-4(fp)
10014b24:	00000606 	br	10014b40 <_do_dtors+0x38>
10014b28:	e0bfff17 	ldw	r2,-4(fp)
10014b2c:	10800017 	ldw	r2,0(r2)
10014b30:	103ee83a 	callr	r2
10014b34:	e0bfff17 	ldw	r2,-4(fp)
10014b38:	10bfff04 	addi	r2,r2,-4
10014b3c:	e0bfff15 	stw	r2,-4(fp)
10014b40:	e0ffff17 	ldw	r3,-4(fp)
10014b44:	00840074 	movhi	r2,4097
10014b48:	10968a04 	addi	r2,r2,23080
10014b4c:	18bff62e 	bgeu	r3,r2,10014b28 <__alt_data_end+0xf8014b28>
10014b50:	0001883a 	nop
10014b54:	e037883a 	mov	sp,fp
10014b58:	dfc00117 	ldw	ra,4(sp)
10014b5c:	df000017 	ldw	fp,0(sp)
10014b60:	dec00204 	addi	sp,sp,8
10014b64:	f800283a 	ret

10014b68 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10014b68:	deffff04 	addi	sp,sp,-4
10014b6c:	df000015 	stw	fp,0(sp)
10014b70:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10014b74:	e037883a 	mov	sp,fp
10014b78:	df000017 	ldw	fp,0(sp)
10014b7c:	dec00104 	addi	sp,sp,4
10014b80:	f800283a 	ret

10014b84 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10014b84:	defff904 	addi	sp,sp,-28
10014b88:	dfc00615 	stw	ra,24(sp)
10014b8c:	df000515 	stw	fp,20(sp)
10014b90:	df000504 	addi	fp,sp,20
10014b94:	e13ffc15 	stw	r4,-16(fp)
10014b98:	e17ffd15 	stw	r5,-12(fp)
10014b9c:	e1bffe15 	stw	r6,-8(fp)
10014ba0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10014ba4:	e0800217 	ldw	r2,8(fp)
10014ba8:	d8800015 	stw	r2,0(sp)
10014bac:	e13ffc17 	ldw	r4,-16(fp)
10014bb0:	e17ffd17 	ldw	r5,-12(fp)
10014bb4:	e1bffe17 	ldw	r6,-8(fp)
10014bb8:	e1ffff17 	ldw	r7,-4(fp)
10014bbc:	0014d640 	call	10014d64 <alt_iic_isr_register>
}  
10014bc0:	e037883a 	mov	sp,fp
10014bc4:	dfc00117 	ldw	ra,4(sp)
10014bc8:	df000017 	ldw	fp,0(sp)
10014bcc:	dec00204 	addi	sp,sp,8
10014bd0:	f800283a 	ret

10014bd4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10014bd4:	defff904 	addi	sp,sp,-28
10014bd8:	df000615 	stw	fp,24(sp)
10014bdc:	df000604 	addi	fp,sp,24
10014be0:	e13ffe15 	stw	r4,-8(fp)
10014be4:	e17fff15 	stw	r5,-4(fp)
10014be8:	e0bfff17 	ldw	r2,-4(fp)
10014bec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10014bf0:	0005303a 	rdctl	r2,status
10014bf4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10014bf8:	e0fffb17 	ldw	r3,-20(fp)
10014bfc:	00bfff84 	movi	r2,-2
10014c00:	1884703a 	and	r2,r3,r2
10014c04:	1001703a 	wrctl	status,r2
  
  return context;
10014c08:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10014c0c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10014c10:	e0bffa17 	ldw	r2,-24(fp)
10014c14:	00c00044 	movi	r3,1
10014c18:	1884983a 	sll	r2,r3,r2
10014c1c:	1007883a 	mov	r3,r2
10014c20:	008400b4 	movhi	r2,4098
10014c24:	10ad3804 	addi	r2,r2,-19232
10014c28:	10800017 	ldw	r2,0(r2)
10014c2c:	1886b03a 	or	r3,r3,r2
10014c30:	008400b4 	movhi	r2,4098
10014c34:	10ad3804 	addi	r2,r2,-19232
10014c38:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10014c3c:	008400b4 	movhi	r2,4098
10014c40:	10ad3804 	addi	r2,r2,-19232
10014c44:	10800017 	ldw	r2,0(r2)
10014c48:	100170fa 	wrctl	ienable,r2
10014c4c:	e0bffc17 	ldw	r2,-16(fp)
10014c50:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10014c54:	e0bffd17 	ldw	r2,-12(fp)
10014c58:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10014c5c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10014c60:	0001883a 	nop
}
10014c64:	e037883a 	mov	sp,fp
10014c68:	df000017 	ldw	fp,0(sp)
10014c6c:	dec00104 	addi	sp,sp,4
10014c70:	f800283a 	ret

10014c74 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10014c74:	defff904 	addi	sp,sp,-28
10014c78:	df000615 	stw	fp,24(sp)
10014c7c:	df000604 	addi	fp,sp,24
10014c80:	e13ffe15 	stw	r4,-8(fp)
10014c84:	e17fff15 	stw	r5,-4(fp)
10014c88:	e0bfff17 	ldw	r2,-4(fp)
10014c8c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10014c90:	0005303a 	rdctl	r2,status
10014c94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10014c98:	e0fffb17 	ldw	r3,-20(fp)
10014c9c:	00bfff84 	movi	r2,-2
10014ca0:	1884703a 	and	r2,r3,r2
10014ca4:	1001703a 	wrctl	status,r2
  
  return context;
10014ca8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10014cac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10014cb0:	e0bffa17 	ldw	r2,-24(fp)
10014cb4:	00c00044 	movi	r3,1
10014cb8:	1884983a 	sll	r2,r3,r2
10014cbc:	0084303a 	nor	r2,zero,r2
10014cc0:	1007883a 	mov	r3,r2
10014cc4:	008400b4 	movhi	r2,4098
10014cc8:	10ad3804 	addi	r2,r2,-19232
10014ccc:	10800017 	ldw	r2,0(r2)
10014cd0:	1886703a 	and	r3,r3,r2
10014cd4:	008400b4 	movhi	r2,4098
10014cd8:	10ad3804 	addi	r2,r2,-19232
10014cdc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10014ce0:	008400b4 	movhi	r2,4098
10014ce4:	10ad3804 	addi	r2,r2,-19232
10014ce8:	10800017 	ldw	r2,0(r2)
10014cec:	100170fa 	wrctl	ienable,r2
10014cf0:	e0bffc17 	ldw	r2,-16(fp)
10014cf4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10014cf8:	e0bffd17 	ldw	r2,-12(fp)
10014cfc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10014d00:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10014d04:	0001883a 	nop
}
10014d08:	e037883a 	mov	sp,fp
10014d0c:	df000017 	ldw	fp,0(sp)
10014d10:	dec00104 	addi	sp,sp,4
10014d14:	f800283a 	ret

10014d18 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10014d18:	defffc04 	addi	sp,sp,-16
10014d1c:	df000315 	stw	fp,12(sp)
10014d20:	df000304 	addi	fp,sp,12
10014d24:	e13ffe15 	stw	r4,-8(fp)
10014d28:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10014d2c:	000530fa 	rdctl	r2,ienable
10014d30:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10014d34:	e0bfff17 	ldw	r2,-4(fp)
10014d38:	00c00044 	movi	r3,1
10014d3c:	1884983a 	sll	r2,r3,r2
10014d40:	1007883a 	mov	r3,r2
10014d44:	e0bffd17 	ldw	r2,-12(fp)
10014d48:	1884703a 	and	r2,r3,r2
10014d4c:	1004c03a 	cmpne	r2,r2,zero
10014d50:	10803fcc 	andi	r2,r2,255
}
10014d54:	e037883a 	mov	sp,fp
10014d58:	df000017 	ldw	fp,0(sp)
10014d5c:	dec00104 	addi	sp,sp,4
10014d60:	f800283a 	ret

10014d64 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10014d64:	defff504 	addi	sp,sp,-44
10014d68:	dfc00a15 	stw	ra,40(sp)
10014d6c:	df000915 	stw	fp,36(sp)
10014d70:	df000904 	addi	fp,sp,36
10014d74:	e13ffc15 	stw	r4,-16(fp)
10014d78:	e17ffd15 	stw	r5,-12(fp)
10014d7c:	e1bffe15 	stw	r6,-8(fp)
10014d80:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10014d84:	00bffa84 	movi	r2,-22
10014d88:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10014d8c:	e0bffd17 	ldw	r2,-12(fp)
10014d90:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10014d94:	e0bff817 	ldw	r2,-32(fp)
10014d98:	10800808 	cmpgei	r2,r2,32
10014d9c:	1000271e 	bne	r2,zero,10014e3c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10014da0:	0005303a 	rdctl	r2,status
10014da4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10014da8:	e0fffa17 	ldw	r3,-24(fp)
10014dac:	00bfff84 	movi	r2,-2
10014db0:	1884703a 	and	r2,r3,r2
10014db4:	1001703a 	wrctl	status,r2
  
  return context;
10014db8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10014dbc:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
10014dc0:	008400b4 	movhi	r2,4098
10014dc4:	10ad4504 	addi	r2,r2,-19180
10014dc8:	e0fff817 	ldw	r3,-32(fp)
10014dcc:	180690fa 	slli	r3,r3,3
10014dd0:	10c5883a 	add	r2,r2,r3
10014dd4:	e0fffe17 	ldw	r3,-8(fp)
10014dd8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10014ddc:	008400b4 	movhi	r2,4098
10014de0:	10ad4504 	addi	r2,r2,-19180
10014de4:	e0fff817 	ldw	r3,-32(fp)
10014de8:	180690fa 	slli	r3,r3,3
10014dec:	10c5883a 	add	r2,r2,r3
10014df0:	10800104 	addi	r2,r2,4
10014df4:	e0ffff17 	ldw	r3,-4(fp)
10014df8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10014dfc:	e0bffe17 	ldw	r2,-8(fp)
10014e00:	10000526 	beq	r2,zero,10014e18 <alt_iic_isr_register+0xb4>
10014e04:	e0bff817 	ldw	r2,-32(fp)
10014e08:	e13ffc17 	ldw	r4,-16(fp)
10014e0c:	100b883a 	mov	r5,r2
10014e10:	0014bd40 	call	10014bd4 <alt_ic_irq_enable>
10014e14:	00000406 	br	10014e28 <alt_iic_isr_register+0xc4>
10014e18:	e0bff817 	ldw	r2,-32(fp)
10014e1c:	e13ffc17 	ldw	r4,-16(fp)
10014e20:	100b883a 	mov	r5,r2
10014e24:	0014c740 	call	10014c74 <alt_ic_irq_disable>
10014e28:	e0bff715 	stw	r2,-36(fp)
10014e2c:	e0bff917 	ldw	r2,-28(fp)
10014e30:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10014e34:	e0bffb17 	ldw	r2,-20(fp)
10014e38:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10014e3c:	e0bff717 	ldw	r2,-36(fp)
}
10014e40:	e037883a 	mov	sp,fp
10014e44:	dfc00117 	ldw	ra,4(sp)
10014e48:	df000017 	ldw	fp,0(sp)
10014e4c:	dec00204 	addi	sp,sp,8
10014e50:	f800283a 	ret

10014e54 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10014e54:	defff804 	addi	sp,sp,-32
10014e58:	dfc00715 	stw	ra,28(sp)
10014e5c:	df000615 	stw	fp,24(sp)
10014e60:	dc000515 	stw	r16,20(sp)
10014e64:	df000604 	addi	fp,sp,24
10014e68:	e13ffb15 	stw	r4,-20(fp)
10014e6c:	e17ffc15 	stw	r5,-16(fp)
10014e70:	e1bffd15 	stw	r6,-12(fp)
10014e74:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10014e78:	e13ffc17 	ldw	r4,-16(fp)
10014e7c:	e17ffd17 	ldw	r5,-12(fp)
10014e80:	e1bffe17 	ldw	r6,-8(fp)
10014e84:	00150f00 	call	100150f0 <open>
10014e88:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10014e8c:	e0bffa17 	ldw	r2,-24(fp)
10014e90:	10002216 	blt	r2,zero,10014f1c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10014e94:	040400b4 	movhi	r16,4098
10014e98:	8421ea04 	addi	r16,r16,-30808
10014e9c:	e0bffa17 	ldw	r2,-24(fp)
10014ea0:	1009883a 	mov	r4,r2
10014ea4:	01400304 	movi	r5,12
10014ea8:	000586c0 	call	1000586c <__mulsi3>
10014eac:	8085883a 	add	r2,r16,r2
10014eb0:	10c00017 	ldw	r3,0(r2)
10014eb4:	e0bffb17 	ldw	r2,-20(fp)
10014eb8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10014ebc:	040400b4 	movhi	r16,4098
10014ec0:	8421ea04 	addi	r16,r16,-30808
10014ec4:	e0bffa17 	ldw	r2,-24(fp)
10014ec8:	1009883a 	mov	r4,r2
10014ecc:	01400304 	movi	r5,12
10014ed0:	000586c0 	call	1000586c <__mulsi3>
10014ed4:	8085883a 	add	r2,r16,r2
10014ed8:	10800104 	addi	r2,r2,4
10014edc:	10c00017 	ldw	r3,0(r2)
10014ee0:	e0bffb17 	ldw	r2,-20(fp)
10014ee4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10014ee8:	040400b4 	movhi	r16,4098
10014eec:	8421ea04 	addi	r16,r16,-30808
10014ef0:	e0bffa17 	ldw	r2,-24(fp)
10014ef4:	1009883a 	mov	r4,r2
10014ef8:	01400304 	movi	r5,12
10014efc:	000586c0 	call	1000586c <__mulsi3>
10014f00:	8085883a 	add	r2,r16,r2
10014f04:	10800204 	addi	r2,r2,8
10014f08:	10c00017 	ldw	r3,0(r2)
10014f0c:	e0bffb17 	ldw	r2,-20(fp)
10014f10:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10014f14:	e13ffa17 	ldw	r4,-24(fp)
10014f18:	00139500 	call	10013950 <alt_release_fd>
  }
} 
10014f1c:	e6ffff04 	addi	sp,fp,-4
10014f20:	dfc00217 	ldw	ra,8(sp)
10014f24:	df000117 	ldw	fp,4(sp)
10014f28:	dc000017 	ldw	r16,0(sp)
10014f2c:	dec00304 	addi	sp,sp,12
10014f30:	f800283a 	ret

10014f34 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10014f34:	defffb04 	addi	sp,sp,-20
10014f38:	dfc00415 	stw	ra,16(sp)
10014f3c:	df000315 	stw	fp,12(sp)
10014f40:	df000304 	addi	fp,sp,12
10014f44:	e13ffd15 	stw	r4,-12(fp)
10014f48:	e17ffe15 	stw	r5,-8(fp)
10014f4c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10014f50:	010400b4 	movhi	r4,4098
10014f54:	2121ed04 	addi	r4,r4,-30796
10014f58:	e17ffd17 	ldw	r5,-12(fp)
10014f5c:	01800044 	movi	r6,1
10014f60:	01c07fc4 	movi	r7,511
10014f64:	0014e540 	call	10014e54 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10014f68:	010400b4 	movhi	r4,4098
10014f6c:	2121ea04 	addi	r4,r4,-30808
10014f70:	e17ffe17 	ldw	r5,-8(fp)
10014f74:	000d883a 	mov	r6,zero
10014f78:	01c07fc4 	movi	r7,511
10014f7c:	0014e540 	call	10014e54 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10014f80:	010400b4 	movhi	r4,4098
10014f84:	2121f004 	addi	r4,r4,-30784
10014f88:	e17fff17 	ldw	r5,-4(fp)
10014f8c:	01800044 	movi	r6,1
10014f90:	01c07fc4 	movi	r7,511
10014f94:	0014e540 	call	10014e54 <alt_open_fd>
}  
10014f98:	e037883a 	mov	sp,fp
10014f9c:	dfc00117 	ldw	ra,4(sp)
10014fa0:	df000017 	ldw	fp,0(sp)
10014fa4:	dec00204 	addi	sp,sp,8
10014fa8:	f800283a 	ret

10014fac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10014fac:	defffe04 	addi	sp,sp,-8
10014fb0:	dfc00115 	stw	ra,4(sp)
10014fb4:	df000015 	stw	fp,0(sp)
10014fb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10014fbc:	008400b4 	movhi	r2,4098
10014fc0:	10a66d04 	addi	r2,r2,-26188
10014fc4:	10800017 	ldw	r2,0(r2)
10014fc8:	10000526 	beq	r2,zero,10014fe0 <alt_get_errno+0x34>
10014fcc:	008400b4 	movhi	r2,4098
10014fd0:	10a66d04 	addi	r2,r2,-26188
10014fd4:	10800017 	ldw	r2,0(r2)
10014fd8:	103ee83a 	callr	r2
10014fdc:	00000206 	br	10014fe8 <alt_get_errno+0x3c>
10014fe0:	008400b4 	movhi	r2,4098
10014fe4:	10ad3404 	addi	r2,r2,-19248
}
10014fe8:	e037883a 	mov	sp,fp
10014fec:	dfc00117 	ldw	ra,4(sp)
10014ff0:	df000017 	ldw	fp,0(sp)
10014ff4:	dec00204 	addi	sp,sp,8
10014ff8:	f800283a 	ret

10014ffc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10014ffc:	defffb04 	addi	sp,sp,-20
10015000:	dfc00415 	stw	ra,16(sp)
10015004:	df000315 	stw	fp,12(sp)
10015008:	dc000215 	stw	r16,8(sp)
1001500c:	df000304 	addi	fp,sp,12
10015010:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10015014:	e0bffe17 	ldw	r2,-8(fp)
10015018:	10800217 	ldw	r2,8(r2)
1001501c:	10d00034 	orhi	r3,r2,16384
10015020:	e0bffe17 	ldw	r2,-8(fp)
10015024:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10015028:	e03ffd15 	stw	zero,-12(fp)
1001502c:	00002306 	br	100150bc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10015030:	040400b4 	movhi	r16,4098
10015034:	8421ea04 	addi	r16,r16,-30808
10015038:	e0bffd17 	ldw	r2,-12(fp)
1001503c:	1009883a 	mov	r4,r2
10015040:	01400304 	movi	r5,12
10015044:	000586c0 	call	1000586c <__mulsi3>
10015048:	8085883a 	add	r2,r16,r2
1001504c:	10c00017 	ldw	r3,0(r2)
10015050:	e0bffe17 	ldw	r2,-8(fp)
10015054:	10800017 	ldw	r2,0(r2)
10015058:	1880151e 	bne	r3,r2,100150b0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1001505c:	040400b4 	movhi	r16,4098
10015060:	8421ea04 	addi	r16,r16,-30808
10015064:	e0bffd17 	ldw	r2,-12(fp)
10015068:	1009883a 	mov	r4,r2
1001506c:	01400304 	movi	r5,12
10015070:	000586c0 	call	1000586c <__mulsi3>
10015074:	8085883a 	add	r2,r16,r2
10015078:	10800204 	addi	r2,r2,8
1001507c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10015080:	10000b0e 	bge	r2,zero,100150b0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10015084:	e13ffd17 	ldw	r4,-12(fp)
10015088:	01400304 	movi	r5,12
1001508c:	000586c0 	call	1000586c <__mulsi3>
10015090:	1007883a 	mov	r3,r2
10015094:	008400b4 	movhi	r2,4098
10015098:	10a1ea04 	addi	r2,r2,-30808
1001509c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100150a0:	e0bffe17 	ldw	r2,-8(fp)
100150a4:	18800226 	beq	r3,r2,100150b0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
100150a8:	00bffcc4 	movi	r2,-13
100150ac:	00000a06 	br	100150d8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100150b0:	e0bffd17 	ldw	r2,-12(fp)
100150b4:	10800044 	addi	r2,r2,1
100150b8:	e0bffd15 	stw	r2,-12(fp)
100150bc:	008400b4 	movhi	r2,4098
100150c0:	10a66c04 	addi	r2,r2,-26192
100150c4:	10800017 	ldw	r2,0(r2)
100150c8:	1007883a 	mov	r3,r2
100150cc:	e0bffd17 	ldw	r2,-12(fp)
100150d0:	18bfd72e 	bgeu	r3,r2,10015030 <__alt_data_end+0xf8015030>
    }
  }
  
  /* The device is not locked */
 
  return 0;
100150d4:	0005883a 	mov	r2,zero
}
100150d8:	e6ffff04 	addi	sp,fp,-4
100150dc:	dfc00217 	ldw	ra,8(sp)
100150e0:	df000117 	ldw	fp,4(sp)
100150e4:	dc000017 	ldw	r16,0(sp)
100150e8:	dec00304 	addi	sp,sp,12
100150ec:	f800283a 	ret

100150f0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
100150f0:	defff604 	addi	sp,sp,-40
100150f4:	dfc00915 	stw	ra,36(sp)
100150f8:	df000815 	stw	fp,32(sp)
100150fc:	df000804 	addi	fp,sp,32
10015100:	e13ffd15 	stw	r4,-12(fp)
10015104:	e17ffe15 	stw	r5,-8(fp)
10015108:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1001510c:	00bfffc4 	movi	r2,-1
10015110:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10015114:	00bffb44 	movi	r2,-19
10015118:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1001511c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10015120:	e13ffd17 	ldw	r4,-12(fp)
10015124:	014400b4 	movhi	r5,4098
10015128:	29666a04 	addi	r5,r5,-26200
1001512c:	001540c0 	call	1001540c <alt_find_dev>
10015130:	e0bff815 	stw	r2,-32(fp)
10015134:	e0bff817 	ldw	r2,-32(fp)
10015138:	1000051e 	bne	r2,zero,10015150 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1001513c:	e13ffd17 	ldw	r4,-12(fp)
10015140:	001549c0 	call	1001549c <alt_find_file>
10015144:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10015148:	00800044 	movi	r2,1
1001514c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10015150:	e0bff817 	ldw	r2,-32(fp)
10015154:	10002b26 	beq	r2,zero,10015204 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10015158:	e13ff817 	ldw	r4,-32(fp)
1001515c:	00155b00 	call	100155b0 <alt_get_fd>
10015160:	e0bff915 	stw	r2,-28(fp)
10015164:	e0bff917 	ldw	r2,-28(fp)
10015168:	1000030e 	bge	r2,zero,10015178 <open+0x88>
    {
      status = index;
1001516c:	e0bff917 	ldw	r2,-28(fp)
10015170:	e0bffa15 	stw	r2,-24(fp)
10015174:	00002506 	br	1001520c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10015178:	e13ff917 	ldw	r4,-28(fp)
1001517c:	01400304 	movi	r5,12
10015180:	000586c0 	call	1000586c <__mulsi3>
10015184:	1007883a 	mov	r3,r2
10015188:	008400b4 	movhi	r2,4098
1001518c:	10a1ea04 	addi	r2,r2,-30808
10015190:	1885883a 	add	r2,r3,r2
10015194:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10015198:	e0fffe17 	ldw	r3,-8(fp)
1001519c:	00900034 	movhi	r2,16384
100151a0:	10bfffc4 	addi	r2,r2,-1
100151a4:	1886703a 	and	r3,r3,r2
100151a8:	e0bffc17 	ldw	r2,-16(fp)
100151ac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
100151b0:	e0bffb17 	ldw	r2,-20(fp)
100151b4:	1000051e 	bne	r2,zero,100151cc <open+0xdc>
100151b8:	e13ffc17 	ldw	r4,-16(fp)
100151bc:	0014ffc0 	call	10014ffc <alt_file_locked>
100151c0:	e0bffa15 	stw	r2,-24(fp)
100151c4:	e0bffa17 	ldw	r2,-24(fp)
100151c8:	10001016 	blt	r2,zero,1001520c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
100151cc:	e0bff817 	ldw	r2,-32(fp)
100151d0:	10800317 	ldw	r2,12(r2)
100151d4:	10000826 	beq	r2,zero,100151f8 <open+0x108>
100151d8:	e0bff817 	ldw	r2,-32(fp)
100151dc:	10800317 	ldw	r2,12(r2)
100151e0:	e13ffc17 	ldw	r4,-16(fp)
100151e4:	e17ffd17 	ldw	r5,-12(fp)
100151e8:	e1bffe17 	ldw	r6,-8(fp)
100151ec:	e1ffff17 	ldw	r7,-4(fp)
100151f0:	103ee83a 	callr	r2
100151f4:	00000106 	br	100151fc <open+0x10c>
100151f8:	0005883a 	mov	r2,zero
100151fc:	e0bffa15 	stw	r2,-24(fp)
10015200:	00000206 	br	1001520c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10015204:	00bffb44 	movi	r2,-19
10015208:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1001520c:	e0bffa17 	ldw	r2,-24(fp)
10015210:	1000090e 	bge	r2,zero,10015238 <open+0x148>
  {
    alt_release_fd (index);  
10015214:	e13ff917 	ldw	r4,-28(fp)
10015218:	00139500 	call	10013950 <alt_release_fd>
    ALT_ERRNO = -status;
1001521c:	0014fac0 	call	10014fac <alt_get_errno>
10015220:	1007883a 	mov	r3,r2
10015224:	e0bffa17 	ldw	r2,-24(fp)
10015228:	0085c83a 	sub	r2,zero,r2
1001522c:	18800015 	stw	r2,0(r3)
    return -1;
10015230:	00bfffc4 	movi	r2,-1
10015234:	00000106 	br	1001523c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10015238:	e0bff917 	ldw	r2,-28(fp)
}
1001523c:	e037883a 	mov	sp,fp
10015240:	dfc00117 	ldw	ra,4(sp)
10015244:	df000017 	ldw	fp,0(sp)
10015248:	dec00204 	addi	sp,sp,8
1001524c:	f800283a 	ret

10015250 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10015250:	defffa04 	addi	sp,sp,-24
10015254:	df000515 	stw	fp,20(sp)
10015258:	df000504 	addi	fp,sp,20
1001525c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10015260:	0005303a 	rdctl	r2,status
10015264:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10015268:	e0fffc17 	ldw	r3,-16(fp)
1001526c:	00bfff84 	movi	r2,-2
10015270:	1884703a 	and	r2,r3,r2
10015274:	1001703a 	wrctl	status,r2
  
  return context;
10015278:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1001527c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10015280:	e0bfff17 	ldw	r2,-4(fp)
10015284:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10015288:	e0bffd17 	ldw	r2,-12(fp)
1001528c:	10800017 	ldw	r2,0(r2)
10015290:	e0fffd17 	ldw	r3,-12(fp)
10015294:	18c00117 	ldw	r3,4(r3)
10015298:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1001529c:	e0bffd17 	ldw	r2,-12(fp)
100152a0:	10800117 	ldw	r2,4(r2)
100152a4:	e0fffd17 	ldw	r3,-12(fp)
100152a8:	18c00017 	ldw	r3,0(r3)
100152ac:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
100152b0:	e0bffd17 	ldw	r2,-12(fp)
100152b4:	e0fffd17 	ldw	r3,-12(fp)
100152b8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
100152bc:	e0bffd17 	ldw	r2,-12(fp)
100152c0:	e0fffd17 	ldw	r3,-12(fp)
100152c4:	10c00015 	stw	r3,0(r2)
100152c8:	e0bffb17 	ldw	r2,-20(fp)
100152cc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100152d0:	e0bffe17 	ldw	r2,-8(fp)
100152d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
100152d8:	e037883a 	mov	sp,fp
100152dc:	df000017 	ldw	fp,0(sp)
100152e0:	dec00104 	addi	sp,sp,4
100152e4:	f800283a 	ret

100152e8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100152e8:	defffb04 	addi	sp,sp,-20
100152ec:	dfc00415 	stw	ra,16(sp)
100152f0:	df000315 	stw	fp,12(sp)
100152f4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
100152f8:	d0a00e17 	ldw	r2,-32712(gp)
100152fc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10015300:	d0a6d817 	ldw	r2,-25760(gp)
10015304:	10800044 	addi	r2,r2,1
10015308:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1001530c:	00002e06 	br	100153c8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10015310:	e0bffd17 	ldw	r2,-12(fp)
10015314:	10800017 	ldw	r2,0(r2)
10015318:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1001531c:	e0bffd17 	ldw	r2,-12(fp)
10015320:	10800403 	ldbu	r2,16(r2)
10015324:	10803fcc 	andi	r2,r2,255
10015328:	10000426 	beq	r2,zero,1001533c <alt_tick+0x54>
1001532c:	d0a6d817 	ldw	r2,-25760(gp)
10015330:	1000021e 	bne	r2,zero,1001533c <alt_tick+0x54>
    {
      alarm->rollover = 0;
10015334:	e0bffd17 	ldw	r2,-12(fp)
10015338:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1001533c:	e0bffd17 	ldw	r2,-12(fp)
10015340:	10800217 	ldw	r2,8(r2)
10015344:	d0e6d817 	ldw	r3,-25760(gp)
10015348:	18801d36 	bltu	r3,r2,100153c0 <alt_tick+0xd8>
1001534c:	e0bffd17 	ldw	r2,-12(fp)
10015350:	10800403 	ldbu	r2,16(r2)
10015354:	10803fcc 	andi	r2,r2,255
10015358:	1000191e 	bne	r2,zero,100153c0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1001535c:	e0bffd17 	ldw	r2,-12(fp)
10015360:	10800317 	ldw	r2,12(r2)
10015364:	e0fffd17 	ldw	r3,-12(fp)
10015368:	18c00517 	ldw	r3,20(r3)
1001536c:	1809883a 	mov	r4,r3
10015370:	103ee83a 	callr	r2
10015374:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10015378:	e0bfff17 	ldw	r2,-4(fp)
1001537c:	1000031e 	bne	r2,zero,1001538c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10015380:	e13ffd17 	ldw	r4,-12(fp)
10015384:	00152500 	call	10015250 <alt_alarm_stop>
10015388:	00000d06 	br	100153c0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1001538c:	e0bffd17 	ldw	r2,-12(fp)
10015390:	10c00217 	ldw	r3,8(r2)
10015394:	e0bfff17 	ldw	r2,-4(fp)
10015398:	1887883a 	add	r3,r3,r2
1001539c:	e0bffd17 	ldw	r2,-12(fp)
100153a0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
100153a4:	e0bffd17 	ldw	r2,-12(fp)
100153a8:	10c00217 	ldw	r3,8(r2)
100153ac:	d0a6d817 	ldw	r2,-25760(gp)
100153b0:	1880032e 	bgeu	r3,r2,100153c0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100153b4:	e0bffd17 	ldw	r2,-12(fp)
100153b8:	00c00044 	movi	r3,1
100153bc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
100153c0:	e0bffe17 	ldw	r2,-8(fp)
100153c4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100153c8:	e0fffd17 	ldw	r3,-12(fp)
100153cc:	d0a00e04 	addi	r2,gp,-32712
100153d0:	18bfcf1e 	bne	r3,r2,10015310 <__alt_data_end+0xf8015310>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100153d4:	0001883a 	nop
}
100153d8:	e037883a 	mov	sp,fp
100153dc:	dfc00117 	ldw	ra,4(sp)
100153e0:	df000017 	ldw	fp,0(sp)
100153e4:	dec00204 	addi	sp,sp,8
100153e8:	f800283a 	ret

100153ec <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
100153ec:	deffff04 	addi	sp,sp,-4
100153f0:	df000015 	stw	fp,0(sp)
100153f4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100153f8:	000170fa 	wrctl	ienable,zero
}
100153fc:	e037883a 	mov	sp,fp
10015400:	df000017 	ldw	fp,0(sp)
10015404:	dec00104 	addi	sp,sp,4
10015408:	f800283a 	ret

1001540c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1001540c:	defffa04 	addi	sp,sp,-24
10015410:	dfc00515 	stw	ra,20(sp)
10015414:	df000415 	stw	fp,16(sp)
10015418:	df000404 	addi	fp,sp,16
1001541c:	e13ffe15 	stw	r4,-8(fp)
10015420:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10015424:	e0bfff17 	ldw	r2,-4(fp)
10015428:	10800017 	ldw	r2,0(r2)
1001542c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10015430:	e13ffe17 	ldw	r4,-8(fp)
10015434:	0007cbc0 	call	10007cbc <strlen>
10015438:	10800044 	addi	r2,r2,1
1001543c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10015440:	00000d06 	br	10015478 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10015444:	e0bffc17 	ldw	r2,-16(fp)
10015448:	10c00217 	ldw	r3,8(r2)
1001544c:	e0bffd17 	ldw	r2,-12(fp)
10015450:	1809883a 	mov	r4,r3
10015454:	e17ffe17 	ldw	r5,-8(fp)
10015458:	100d883a 	mov	r6,r2
1001545c:	00156d00 	call	100156d0 <memcmp>
10015460:	1000021e 	bne	r2,zero,1001546c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10015464:	e0bffc17 	ldw	r2,-16(fp)
10015468:	00000706 	br	10015488 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1001546c:	e0bffc17 	ldw	r2,-16(fp)
10015470:	10800017 	ldw	r2,0(r2)
10015474:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10015478:	e0fffc17 	ldw	r3,-16(fp)
1001547c:	e0bfff17 	ldw	r2,-4(fp)
10015480:	18bff01e 	bne	r3,r2,10015444 <__alt_data_end+0xf8015444>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10015484:	0005883a 	mov	r2,zero
}
10015488:	e037883a 	mov	sp,fp
1001548c:	dfc00117 	ldw	ra,4(sp)
10015490:	df000017 	ldw	fp,0(sp)
10015494:	dec00204 	addi	sp,sp,8
10015498:	f800283a 	ret

1001549c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1001549c:	defffb04 	addi	sp,sp,-20
100154a0:	dfc00415 	stw	ra,16(sp)
100154a4:	df000315 	stw	fp,12(sp)
100154a8:	df000304 	addi	fp,sp,12
100154ac:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100154b0:	008400b4 	movhi	r2,4098
100154b4:	10a66804 	addi	r2,r2,-26208
100154b8:	10800017 	ldw	r2,0(r2)
100154bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100154c0:	00003106 	br	10015588 <alt_find_file+0xec>
  {
    len = strlen(next->name);
100154c4:	e0bffd17 	ldw	r2,-12(fp)
100154c8:	10800217 	ldw	r2,8(r2)
100154cc:	1009883a 	mov	r4,r2
100154d0:	0007cbc0 	call	10007cbc <strlen>
100154d4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
100154d8:	e0bffd17 	ldw	r2,-12(fp)
100154dc:	10c00217 	ldw	r3,8(r2)
100154e0:	e0bffe17 	ldw	r2,-8(fp)
100154e4:	10bfffc4 	addi	r2,r2,-1
100154e8:	1885883a 	add	r2,r3,r2
100154ec:	10800003 	ldbu	r2,0(r2)
100154f0:	10803fcc 	andi	r2,r2,255
100154f4:	1080201c 	xori	r2,r2,128
100154f8:	10bfe004 	addi	r2,r2,-128
100154fc:	10800bd8 	cmpnei	r2,r2,47
10015500:	1000031e 	bne	r2,zero,10015510 <alt_find_file+0x74>
    {
      len -= 1;
10015504:	e0bffe17 	ldw	r2,-8(fp)
10015508:	10bfffc4 	addi	r2,r2,-1
1001550c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10015510:	e0bffe17 	ldw	r2,-8(fp)
10015514:	e0ffff17 	ldw	r3,-4(fp)
10015518:	1885883a 	add	r2,r3,r2
1001551c:	10800003 	ldbu	r2,0(r2)
10015520:	10803fcc 	andi	r2,r2,255
10015524:	1080201c 	xori	r2,r2,128
10015528:	10bfe004 	addi	r2,r2,-128
1001552c:	10800be0 	cmpeqi	r2,r2,47
10015530:	1000081e 	bne	r2,zero,10015554 <alt_find_file+0xb8>
10015534:	e0bffe17 	ldw	r2,-8(fp)
10015538:	e0ffff17 	ldw	r3,-4(fp)
1001553c:	1885883a 	add	r2,r3,r2
10015540:	10800003 	ldbu	r2,0(r2)
10015544:	10803fcc 	andi	r2,r2,255
10015548:	1080201c 	xori	r2,r2,128
1001554c:	10bfe004 	addi	r2,r2,-128
10015550:	10000a1e 	bne	r2,zero,1001557c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10015554:	e0bffd17 	ldw	r2,-12(fp)
10015558:	10c00217 	ldw	r3,8(r2)
1001555c:	e0bffe17 	ldw	r2,-8(fp)
10015560:	1809883a 	mov	r4,r3
10015564:	e17fff17 	ldw	r5,-4(fp)
10015568:	100d883a 	mov	r6,r2
1001556c:	00156d00 	call	100156d0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10015570:	1000021e 	bne	r2,zero,1001557c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10015574:	e0bffd17 	ldw	r2,-12(fp)
10015578:	00000806 	br	1001559c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
1001557c:	e0bffd17 	ldw	r2,-12(fp)
10015580:	10800017 	ldw	r2,0(r2)
10015584:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10015588:	e0fffd17 	ldw	r3,-12(fp)
1001558c:	008400b4 	movhi	r2,4098
10015590:	10a66804 	addi	r2,r2,-26208
10015594:	18bfcb1e 	bne	r3,r2,100154c4 <__alt_data_end+0xf80154c4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10015598:	0005883a 	mov	r2,zero
}
1001559c:	e037883a 	mov	sp,fp
100155a0:	dfc00117 	ldw	ra,4(sp)
100155a4:	df000017 	ldw	fp,0(sp)
100155a8:	dec00204 	addi	sp,sp,8
100155ac:	f800283a 	ret

100155b0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
100155b0:	defffa04 	addi	sp,sp,-24
100155b4:	dfc00515 	stw	ra,20(sp)
100155b8:	df000415 	stw	fp,16(sp)
100155bc:	dc000315 	stw	r16,12(sp)
100155c0:	df000404 	addi	fp,sp,16
100155c4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
100155c8:	00bffa04 	movi	r2,-24
100155cc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100155d0:	e03ffc15 	stw	zero,-16(fp)
100155d4:	00002106 	br	1001565c <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
100155d8:	040400b4 	movhi	r16,4098
100155dc:	8421ea04 	addi	r16,r16,-30808
100155e0:	e0bffc17 	ldw	r2,-16(fp)
100155e4:	1009883a 	mov	r4,r2
100155e8:	01400304 	movi	r5,12
100155ec:	000586c0 	call	1000586c <__mulsi3>
100155f0:	8085883a 	add	r2,r16,r2
100155f4:	10800017 	ldw	r2,0(r2)
100155f8:	1000151e 	bne	r2,zero,10015650 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
100155fc:	040400b4 	movhi	r16,4098
10015600:	8421ea04 	addi	r16,r16,-30808
10015604:	e0bffc17 	ldw	r2,-16(fp)
10015608:	1009883a 	mov	r4,r2
1001560c:	01400304 	movi	r5,12
10015610:	000586c0 	call	1000586c <__mulsi3>
10015614:	8085883a 	add	r2,r16,r2
10015618:	e0fffe17 	ldw	r3,-8(fp)
1001561c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10015620:	008400b4 	movhi	r2,4098
10015624:	10a66c04 	addi	r2,r2,-26192
10015628:	10c00017 	ldw	r3,0(r2)
1001562c:	e0bffc17 	ldw	r2,-16(fp)
10015630:	1880040e 	bge	r3,r2,10015644 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10015634:	008400b4 	movhi	r2,4098
10015638:	10a66c04 	addi	r2,r2,-26192
1001563c:	e0fffc17 	ldw	r3,-16(fp)
10015640:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10015644:	e0bffc17 	ldw	r2,-16(fp)
10015648:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
1001564c:	00000606 	br	10015668 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10015650:	e0bffc17 	ldw	r2,-16(fp)
10015654:	10800044 	addi	r2,r2,1
10015658:	e0bffc15 	stw	r2,-16(fp)
1001565c:	e0bffc17 	ldw	r2,-16(fp)
10015660:	10800810 	cmplti	r2,r2,32
10015664:	103fdc1e 	bne	r2,zero,100155d8 <__alt_data_end+0xf80155d8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10015668:	e0bffd17 	ldw	r2,-12(fp)
}
1001566c:	e6ffff04 	addi	sp,fp,-4
10015670:	dfc00217 	ldw	ra,8(sp)
10015674:	df000117 	ldw	fp,4(sp)
10015678:	dc000017 	ldw	r16,0(sp)
1001567c:	dec00304 	addi	sp,sp,12
10015680:	f800283a 	ret

10015684 <atexit>:
10015684:	200b883a 	mov	r5,r4
10015688:	000d883a 	mov	r6,zero
1001568c:	0009883a 	mov	r4,zero
10015690:	000f883a 	mov	r7,zero
10015694:	001574c1 	jmpi	1001574c <__register_exitproc>

10015698 <exit>:
10015698:	defffe04 	addi	sp,sp,-8
1001569c:	000b883a 	mov	r5,zero
100156a0:	dc000015 	stw	r16,0(sp)
100156a4:	dfc00115 	stw	ra,4(sp)
100156a8:	2021883a 	mov	r16,r4
100156ac:	00158600 	call	10015860 <__call_exitprocs>
100156b0:	008400b4 	movhi	r2,4098
100156b4:	10a66204 	addi	r2,r2,-26232
100156b8:	11000017 	ldw	r4,0(r2)
100156bc:	20800f17 	ldw	r2,60(r4)
100156c0:	10000126 	beq	r2,zero,100156c8 <exit+0x30>
100156c4:	103ee83a 	callr	r2
100156c8:	8009883a 	mov	r4,r16
100156cc:	00159f40 	call	100159f4 <_exit>

100156d0 <memcmp>:
100156d0:	01c000c4 	movi	r7,3
100156d4:	3980192e 	bgeu	r7,r6,1001573c <memcmp+0x6c>
100156d8:	2144b03a 	or	r2,r4,r5
100156dc:	11c4703a 	and	r2,r2,r7
100156e0:	10000f26 	beq	r2,zero,10015720 <memcmp+0x50>
100156e4:	20800003 	ldbu	r2,0(r4)
100156e8:	28c00003 	ldbu	r3,0(r5)
100156ec:	10c0151e 	bne	r2,r3,10015744 <memcmp+0x74>
100156f0:	31bfff84 	addi	r6,r6,-2
100156f4:	01ffffc4 	movi	r7,-1
100156f8:	00000406 	br	1001570c <memcmp+0x3c>
100156fc:	20800003 	ldbu	r2,0(r4)
10015700:	28c00003 	ldbu	r3,0(r5)
10015704:	31bfffc4 	addi	r6,r6,-1
10015708:	10c00e1e 	bne	r2,r3,10015744 <memcmp+0x74>
1001570c:	21000044 	addi	r4,r4,1
10015710:	29400044 	addi	r5,r5,1
10015714:	31fff91e 	bne	r6,r7,100156fc <__alt_data_end+0xf80156fc>
10015718:	0005883a 	mov	r2,zero
1001571c:	f800283a 	ret
10015720:	20c00017 	ldw	r3,0(r4)
10015724:	28800017 	ldw	r2,0(r5)
10015728:	1880041e 	bne	r3,r2,1001573c <memcmp+0x6c>
1001572c:	31bfff04 	addi	r6,r6,-4
10015730:	21000104 	addi	r4,r4,4
10015734:	29400104 	addi	r5,r5,4
10015738:	39bff936 	bltu	r7,r6,10015720 <__alt_data_end+0xf8015720>
1001573c:	303fe91e 	bne	r6,zero,100156e4 <__alt_data_end+0xf80156e4>
10015740:	003ff506 	br	10015718 <__alt_data_end+0xf8015718>
10015744:	10c5c83a 	sub	r2,r2,r3
10015748:	f800283a 	ret

1001574c <__register_exitproc>:
1001574c:	008400b4 	movhi	r2,4098
10015750:	defffa04 	addi	sp,sp,-24
10015754:	10a66204 	addi	r2,r2,-26232
10015758:	dc000315 	stw	r16,12(sp)
1001575c:	14000017 	ldw	r16,0(r2)
10015760:	dc400415 	stw	r17,16(sp)
10015764:	dfc00515 	stw	ra,20(sp)
10015768:	80805217 	ldw	r2,328(r16)
1001576c:	2023883a 	mov	r17,r4
10015770:	10003626 	beq	r2,zero,1001584c <__register_exitproc+0x100>
10015774:	10c00117 	ldw	r3,4(r2)
10015778:	010007c4 	movi	r4,31
1001577c:	20c00e16 	blt	r4,r3,100157b8 <__register_exitproc+0x6c>
10015780:	1a400044 	addi	r9,r3,1
10015784:	8800211e 	bne	r17,zero,1001580c <__register_exitproc+0xc0>
10015788:	18c00084 	addi	r3,r3,2
1001578c:	18c7883a 	add	r3,r3,r3
10015790:	18c7883a 	add	r3,r3,r3
10015794:	12400115 	stw	r9,4(r2)
10015798:	10c7883a 	add	r3,r2,r3
1001579c:	19400015 	stw	r5,0(r3)
100157a0:	0005883a 	mov	r2,zero
100157a4:	dfc00517 	ldw	ra,20(sp)
100157a8:	dc400417 	ldw	r17,16(sp)
100157ac:	dc000317 	ldw	r16,12(sp)
100157b0:	dec00604 	addi	sp,sp,24
100157b4:	f800283a 	ret
100157b8:	00800034 	movhi	r2,0
100157bc:	10800004 	addi	r2,r2,0
100157c0:	10002526 	beq	r2,zero,10015858 <__register_exitproc+0x10c>
100157c4:	01006404 	movi	r4,400
100157c8:	d9400015 	stw	r5,0(sp)
100157cc:	d9800115 	stw	r6,4(sp)
100157d0:	d9c00215 	stw	r7,8(sp)
100157d4:	00000000 	call	10000000 <__alt_mem_sdram>
100157d8:	d9400017 	ldw	r5,0(sp)
100157dc:	d9800117 	ldw	r6,4(sp)
100157e0:	d9c00217 	ldw	r7,8(sp)
100157e4:	10001c26 	beq	r2,zero,10015858 <__register_exitproc+0x10c>
100157e8:	80c05217 	ldw	r3,328(r16)
100157ec:	10000115 	stw	zero,4(r2)
100157f0:	02400044 	movi	r9,1
100157f4:	10c00015 	stw	r3,0(r2)
100157f8:	80805215 	stw	r2,328(r16)
100157fc:	10006215 	stw	zero,392(r2)
10015800:	10006315 	stw	zero,396(r2)
10015804:	0007883a 	mov	r3,zero
10015808:	883fdf26 	beq	r17,zero,10015788 <__alt_data_end+0xf8015788>
1001580c:	18d1883a 	add	r8,r3,r3
10015810:	4211883a 	add	r8,r8,r8
10015814:	1211883a 	add	r8,r2,r8
10015818:	41802215 	stw	r6,136(r8)
1001581c:	01000044 	movi	r4,1
10015820:	11806217 	ldw	r6,392(r2)
10015824:	20c8983a 	sll	r4,r4,r3
10015828:	310cb03a 	or	r6,r6,r4
1001582c:	11806215 	stw	r6,392(r2)
10015830:	41c04215 	stw	r7,264(r8)
10015834:	01800084 	movi	r6,2
10015838:	89bfd31e 	bne	r17,r6,10015788 <__alt_data_end+0xf8015788>
1001583c:	11806317 	ldw	r6,396(r2)
10015840:	3108b03a 	or	r4,r6,r4
10015844:	11006315 	stw	r4,396(r2)
10015848:	003fcf06 	br	10015788 <__alt_data_end+0xf8015788>
1001584c:	80805304 	addi	r2,r16,332
10015850:	80805215 	stw	r2,328(r16)
10015854:	003fc706 	br	10015774 <__alt_data_end+0xf8015774>
10015858:	00bfffc4 	movi	r2,-1
1001585c:	003fd106 	br	100157a4 <__alt_data_end+0xf80157a4>

10015860 <__call_exitprocs>:
10015860:	008400b4 	movhi	r2,4098
10015864:	10a66204 	addi	r2,r2,-26232
10015868:	10800017 	ldw	r2,0(r2)
1001586c:	defff404 	addi	sp,sp,-48
10015870:	dd800815 	stw	r22,32(sp)
10015874:	d8800015 	stw	r2,0(sp)
10015878:	10805204 	addi	r2,r2,328
1001587c:	dd000615 	stw	r20,24(sp)
10015880:	dc800415 	stw	r18,16(sp)
10015884:	dfc00b15 	stw	ra,44(sp)
10015888:	df000a15 	stw	fp,40(sp)
1001588c:	ddc00915 	stw	r23,36(sp)
10015890:	dd400715 	stw	r21,28(sp)
10015894:	dcc00515 	stw	r19,20(sp)
10015898:	dc400315 	stw	r17,12(sp)
1001589c:	dc000215 	stw	r16,8(sp)
100158a0:	2025883a 	mov	r18,r4
100158a4:	2829883a 	mov	r20,r5
100158a8:	d8800115 	stw	r2,4(sp)
100158ac:	05bfffc4 	movi	r22,-1
100158b0:	d8800017 	ldw	r2,0(sp)
100158b4:	14c05217 	ldw	r19,328(r2)
100158b8:	98001d26 	beq	r19,zero,10015930 <__call_exitprocs+0xd0>
100158bc:	dd400117 	ldw	r21,4(sp)
100158c0:	98800117 	ldw	r2,4(r19)
100158c4:	173fffc4 	addi	fp,r2,-1
100158c8:	e0000d16 	blt	fp,zero,10015900 <__call_exitprocs+0xa0>
100158cc:	14000044 	addi	r16,r2,1
100158d0:	8421883a 	add	r16,r16,r16
100158d4:	8421883a 	add	r16,r16,r16
100158d8:	84402004 	addi	r17,r16,128
100158dc:	9c63883a 	add	r17,r19,r17
100158e0:	9c21883a 	add	r16,r19,r16
100158e4:	a0001e26 	beq	r20,zero,10015960 <__call_exitprocs+0x100>
100158e8:	80804017 	ldw	r2,256(r16)
100158ec:	15001c26 	beq	r2,r20,10015960 <__call_exitprocs+0x100>
100158f0:	e73fffc4 	addi	fp,fp,-1
100158f4:	843fff04 	addi	r16,r16,-4
100158f8:	8c7fff04 	addi	r17,r17,-4
100158fc:	e5bff91e 	bne	fp,r22,100158e4 <__alt_data_end+0xf80158e4>
10015900:	00800034 	movhi	r2,0
10015904:	10800004 	addi	r2,r2,0
10015908:	10000926 	beq	r2,zero,10015930 <__call_exitprocs+0xd0>
1001590c:	98800117 	ldw	r2,4(r19)
10015910:	1000311e 	bne	r2,zero,100159d8 <__call_exitprocs+0x178>
10015914:	98800017 	ldw	r2,0(r19)
10015918:	10003426 	beq	r2,zero,100159ec <__call_exitprocs+0x18c>
1001591c:	9809883a 	mov	r4,r19
10015920:	a8800015 	stw	r2,0(r21)
10015924:	00000000 	call	10000000 <__alt_mem_sdram>
10015928:	acc00017 	ldw	r19,0(r21)
1001592c:	983fe41e 	bne	r19,zero,100158c0 <__alt_data_end+0xf80158c0>
10015930:	dfc00b17 	ldw	ra,44(sp)
10015934:	df000a17 	ldw	fp,40(sp)
10015938:	ddc00917 	ldw	r23,36(sp)
1001593c:	dd800817 	ldw	r22,32(sp)
10015940:	dd400717 	ldw	r21,28(sp)
10015944:	dd000617 	ldw	r20,24(sp)
10015948:	dcc00517 	ldw	r19,20(sp)
1001594c:	dc800417 	ldw	r18,16(sp)
10015950:	dc400317 	ldw	r17,12(sp)
10015954:	dc000217 	ldw	r16,8(sp)
10015958:	dec00c04 	addi	sp,sp,48
1001595c:	f800283a 	ret
10015960:	98800117 	ldw	r2,4(r19)
10015964:	80c00017 	ldw	r3,0(r16)
10015968:	10bfffc4 	addi	r2,r2,-1
1001596c:	17001526 	beq	r2,fp,100159c4 <__call_exitprocs+0x164>
10015970:	80000015 	stw	zero,0(r16)
10015974:	183fde26 	beq	r3,zero,100158f0 <__alt_data_end+0xf80158f0>
10015978:	00800044 	movi	r2,1
1001597c:	1708983a 	sll	r4,r2,fp
10015980:	98806217 	ldw	r2,392(r19)
10015984:	9dc00117 	ldw	r23,4(r19)
10015988:	2084703a 	and	r2,r4,r2
1001598c:	1000061e 	bne	r2,zero,100159a8 <__call_exitprocs+0x148>
10015990:	183ee83a 	callr	r3
10015994:	98800117 	ldw	r2,4(r19)
10015998:	15ffc51e 	bne	r2,r23,100158b0 <__alt_data_end+0xf80158b0>
1001599c:	a8800017 	ldw	r2,0(r21)
100159a0:	14ffd326 	beq	r2,r19,100158f0 <__alt_data_end+0xf80158f0>
100159a4:	003fc206 	br	100158b0 <__alt_data_end+0xf80158b0>
100159a8:	98806317 	ldw	r2,396(r19)
100159ac:	2084703a 	and	r2,r4,r2
100159b0:	1000061e 	bne	r2,zero,100159cc <__call_exitprocs+0x16c>
100159b4:	89400017 	ldw	r5,0(r17)
100159b8:	9009883a 	mov	r4,r18
100159bc:	183ee83a 	callr	r3
100159c0:	003ff406 	br	10015994 <__alt_data_end+0xf8015994>
100159c4:	9f000115 	stw	fp,4(r19)
100159c8:	003fea06 	br	10015974 <__alt_data_end+0xf8015974>
100159cc:	89000017 	ldw	r4,0(r17)
100159d0:	183ee83a 	callr	r3
100159d4:	003fef06 	br	10015994 <__alt_data_end+0xf8015994>
100159d8:	98800017 	ldw	r2,0(r19)
100159dc:	982b883a 	mov	r21,r19
100159e0:	1027883a 	mov	r19,r2
100159e4:	983fb61e 	bne	r19,zero,100158c0 <__alt_data_end+0xf80158c0>
100159e8:	003fd106 	br	10015930 <__alt_data_end+0xf8015930>
100159ec:	0005883a 	mov	r2,zero
100159f0:	003ffa06 	br	100159dc <__alt_data_end+0xf80159dc>

100159f4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100159f4:	defffd04 	addi	sp,sp,-12
100159f8:	df000215 	stw	fp,8(sp)
100159fc:	df000204 	addi	fp,sp,8
10015a00:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10015a04:	0001883a 	nop
10015a08:	e0bfff17 	ldw	r2,-4(fp)
10015a0c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10015a10:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10015a14:	10000226 	beq	r2,zero,10015a20 <_exit+0x2c>
    ALT_SIM_FAIL();
10015a18:	002af070 	cmpltui	zero,zero,43969
10015a1c:	00000106 	br	10015a24 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10015a20:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10015a24:	003fff06 	br	10015a24 <__alt_data_end+0xf8015a24>
