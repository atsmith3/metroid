
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00019f58 memsz 0x00019f58 flags r-x
    LOAD off    0x0001af78 vaddr 0x10019f78 paddr 0x1001ba64 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x0001d550 vaddr 0x1001d550 paddr 0x1001d550 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017914  100001bc  100001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000024a8  10017ad0  10017ad0  00018ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  10019f78  1001ba64  0001af78  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  1001d550  1001d550  0001d550  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0001ca64  2**0
                  CONTENTS
  7 .sdram        00000000  1001d6b0  1001d6b0  0001ca64  2**0
                  CONTENTS
  8 .comment      00000046  00000000  00000000  0001ca64  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000e88  00000000  00000000  0001cab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00025a77  00000000  00000000  0001d938  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009c45  00000000  00000000  000433af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c954  00000000  00000000  0004cff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000252c  00000000  00000000  00059948  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003add  00000000  00000000  0005be74  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00019992  00000000  00000000  0005f951  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000792e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018f0  00000000  00000000  00079328  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007e221  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0007e224  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007e230  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007e231  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007e232  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007e236  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007e23a  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0007e23e  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0007e249  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0007e254  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0007e25f  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001b  00000000  00000000  0007e26a  2**0
                  CONTENTS, READONLY
 30 .jdi          00004442  00000000  00000000  0007e285  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001d240a  00000000  00000000  000826c7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001bc l    d  .text	00000000 .text
10017ad0 l    d  .rodata	00000000 .rodata
10019f78 l    d  .rwdata	00000000 .rwdata
1001d550 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
1001d6b0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
100001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
1001d550 l     O .bss	00000002 ctl_reg.3318
1001d552 l     O .bss	00000002 no_device.3319
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
10007398 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10019dbe l     O .rodata	00000010 zeroes.4181
10019dce l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1000c04c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1000dbf4 l     F .text	00000008 __fp_lock
1000dbfc l     F .text	00000008 __fp_unlock
1000dc10 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10019f78 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
1001a3bc l     O .rwdata	00000020 lc_ctype_charset
1001a39c l     O .rwdata	00000020 lc_message_charset
1001a3dc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10019e00 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
10011008 l     F .text	000000fc __sprint_r.part.0
10019f34 l     O .rodata	00000010 blanks.4125
10019f24 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
10015274 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1001539c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
100153c8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
100154d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
100155cc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
100156b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
100158a4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
1001ba54 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
10015b58 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10015ca8 l     F .text	00000038 alt_dev_reg
1001a9c4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10015f84 l     F .text	00000204 altera_avalon_jtag_uart_irq
10016188 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10016a5c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10016efc l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10017054 l     F .text	00000050 alt_get_errno
100170a4 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10010648 g     F .text	00000074 _mprec_log10
10010734 g     F .text	0000008c __any_on
10012a34 g     F .text	00000054 _isatty_r
10019e0c g     O .rodata	00000028 __mprec_tinytens
100157e4 g     F .text	00000078 alt_main
10009c1c g     F .text	000000b8 _puts_r
1001d5b0 g     O .bss	00000100 alt_irq
10012a88 g     F .text	0000005c _lseek_r
1001ba64 g       *ABS*	00000000 __flash_rwdata_start
10014e34 g     F .text	00000084 .hidden __eqdf2
1001d6b0 g       *ABS*	00000000 __alt_heap_start
10009be0 g     F .text	0000003c printf
10012cb0 g     F .text	0000009c _wcrtomb_r
10010f00 g     F .text	0000005c __sseek
1000df58 g     F .text	00000010 __sinit
10012b40 g     F .text	00000154 __swbuf_r
1000e9d0 g     F .text	0000007c _setlocale_r
1000ddb0 g     F .text	00000078 __sfmoreglue
10015880 g     F .text	00000024 __malloc_unlock
100079cc g     F .text	00000450 .hidden __divsf3
1000729c g     F .text	00000080 UsbGetRetryCnt
1000f4f8 g     F .text	0000015c memmove
100001f8 g     F .text	00000050 IO_init
1000df40 g     F .text	00000018 _cleanup
1000f778 g     F .text	000000a8 _Balloc
10008488 g     F .text	00000078 .hidden __fixsfsi
10014eb8 g     F .text	000000e0 .hidden __gtdf2
10017494 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
100129dc g     F .text	00000058 _fstat_r
1001d56c g     O .bss	00000004 errno
10010e7c g     F .text	00000008 __seofread
1001d574 g     O .bss	00000004 alt_argv
10023a24 g       *ABS*	00000000 _gp
10015b28 g     F .text	00000030 usleep
10007f8c g     F .text	000004fc .hidden __subsf3
1001a844 g     O .rwdata	00000180 alt_fd_list
100174b4 g     F .text	00000090 alt_find_dev
10009a7c g     F .text	00000138 memcpy
1000dc04 g     F .text	0000000c _cleanup_r
10015100 g     F .text	000000d0 .hidden __floatsidf
10016fdc g     F .text	00000078 alt_io_redirect
10014f98 g     F .text	000000e0 .hidden __ltdf2
10017ad0 g       *ABS*	00000000 __DTOR_END__
10009cd4 g     F .text	00000014 puts
10010d60 g     F .text	00000074 __fpclassifyd
100105a4 g     F .text	000000a4 __ratio
10012540 g     F .text	00000024 __vfiprintf_internal
10016384 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
10009bb4 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
100074b4 g     F .text	00000008 .hidden __udivsi3
10015520 g     F .text	000000ac isatty
10019e5c g     O .rodata	000000c8 __mprec_tens
1000ea4c g     F .text	0000000c __locale_charset
10007ed4 g     F .text	000000b8 .hidden __lesf2
1001d568 g     O .bss	00000004 __malloc_top_pad
1000693c g     F .text	00000264 UsbGetConfigDesc2
1001ba2c g     O .rwdata	00000004 __mb_cur_max
1000ea7c g     F .text	0000000c _localeconv_r
1000fba0 g     F .text	0000003c __i2b
1000e3bc g     F .text	000004a4 __sfvwrite_r
10010dd4 g     F .text	00000054 _sbrk_r
10012ae4 g     F .text	0000005c _read_r
1001ba4c g     O .rwdata	00000004 alt_max_fd
100126ec g     F .text	00000100 _fclose_r
1000dbc4 g     F .text	00000030 fflush
1001d564 g     O .bss	00000004 __malloc_max_sbrked_mem
10009770 g     F .text	00000110 .hidden __extendsfdf2
10013c18 g     F .text	0000089c .hidden __adddf3
1001034c g     F .text	0000011c __b2d
100135fc g     F .text	0000061c .hidden __umoddi3
10015708 g     F .text	000000dc lseek
1001ba24 g     O .rwdata	00000004 _global_impure_ptr
100107c0 g     F .text	000005a0 _realloc_r
1001d6b0 g       *ABS*	00000000 __bss_end
10016e0c g     F .text	000000f0 alt_iic_isr_register
10017390 g     F .text	00000104 alt_tick
10012fbc g     F .text	00000640 .hidden __udivdi3
10012800 g     F .text	00000184 _fputwc_r
10019e34 g     O .rodata	00000028 __mprec_bigtens
1000f984 g     F .text	00000104 __s2b
100151d0 g     F .text	000000a4 .hidden __floatunsidf
100100f4 g     F .text	00000060 __mcmp
1000639c g     F .text	000000fc UsbSetAddress
1000df78 g     F .text	00000018 __fp_lock_all
10016dc0 g     F .text	0000004c alt_ic_irq_enabled
100172f8 g     F .text	00000098 alt_alarm_stop
1001d57c g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000d0 alt_irq_handler
1001a81c g     O .rwdata	00000028 alt_dev_null
10016a40 g     F .text	0000001c alt_dcache_flush_all
1000fa88 g     F .text	00000068 __hi0bits
100002c0 g     F .text	00000074 IO_read
10015078 g     F .text	00000088 .hidden __fixdfsi
1001ba64 g       *ABS*	00000000 __ram_rwdata_end
1001ba44 g     O .rwdata	00000008 alt_dev_list
10015ba8 g     F .text	00000100 write
10007e1c g     F .text	000000b8 .hidden __gtsf2
10019f78 g       *ABS*	00000000 __ram_rodata_end
10015418 g     F .text	000000b8 fstat
10014f98 g     F .text	000000e0 .hidden __ledf2
1000731c g     F .text	0000007c UsbPrintMem
1000fe6c g     F .text	00000140 __pow5mult
1001111c g     F .text	00001424 ___vfiprintf_internal_r
1001d55c g     O .bss	00000004 __nlocale_changed
100074bc g     F .text	00000008 .hidden __umodsi3
1001d6b0 g       *ABS*	00000000 end
10015ec0 g     F .text	000000c4 altera_avalon_jtag_uart_init
10017ad0 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10009a18 g     F .text	00000064 .hidden __clzsi2
10016590 g     F .text	00000218 altera_avalon_jtag_uart_write
1000df68 g     F .text	00000004 __sfp_lock_acquire
1000f410 g     F .text	000000e8 memchr
10009dfc g     F .text	000020fc ___vfprintf_internal_r
10006c9c g     F .text	000000fc UsbClassRequest
1000e0cc g     F .text	000002f0 _free_r
1000ea58 g     F .text	00000010 __locale_mb_cur_max
10017908 g     F .text	00000194 __call_exitprocs
1001d558 g     O .bss	00000004 __mlocale_changed
1001ba30 g     O .rwdata	00000004 __malloc_sbrk_base
100001bc g     F .text	0000003c _start
1001d580 g     O .bss	00000004 _alt_tick_rate
10009d00 g     F .text	00000064 rand
1000ffac g     F .text	00000148 __lshift
1001d584 g     O .bss	00000004 _alt_nticks
100158f4 g     F .text	00000104 read
10015d14 g     F .text	00000048 alt_sys_init
10008500 g     F .text	00000134 .hidden __floatsisf
100177f4 g     F .text	00000114 __register_exitproc
1000fbdc g     F .text	00000290 __multiply
10016230 g     F .text	00000068 altera_avalon_jtag_uart_close
100074c4 g     F .text	00000028 .hidden __mulsi3
10019f78 g       *ABS*	00000000 __ram_rwdata_start
10017ad0 g       *ABS*	00000000 __ram_rodata_start
1001d588 g     O .bss	00000028 __malloc_current_mallinfo
10010468 g     F .text	0000013c __d2b
10006498 g     F .text	00000144 UsbGetDeviceDesc1
10015d5c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10017658 g     F .text	000000d4 alt_get_fd
100168e8 g     F .text	00000158 alt_busy_sleep
100125c0 g     F .text	00000054 _close_r
10017778 g     F .text	0000007c memcmp
10015e1c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1001d6b0 g       *ABS*	00000000 __alt_stack_base
10015e6c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
1000bf1c g     F .text	00000130 __swsetup_r
100144b4 g     F .text	00000980 .hidden __divdf3
1000de28 g     F .text	00000118 __sfp
100106bc g     F .text	00000078 __copybits
1001a414 g     O .rwdata	00000408 __malloc_av_
1000df74 g     F .text	00000004 __sinit_lock_release
10008634 g     F .text	0000086c .hidden __muldf3
10010e28 g     F .text	00000054 __sread
10007218 g     F .text	00000084 UsbWaitTDListDone
10017544 g     F .text	00000114 alt_find_file
10016aac g     F .text	000000a4 alt_dev_llist_insert
1001585c g     F .text	00000024 __malloc_lock
10015a78 g     F .text	000000b0 sbrk
1000d99c g     F .text	00000228 _fflush_r
10012614 g     F .text	000000d8 _calloc_r
1001d550 g       *ABS*	00000000 __bss_start
1000f654 g     F .text	00000124 memset
10000334 g     F .text	00005f20 main
1001d578 g     O .bss	00000004 alt_envp
1001d560 g     O .bss	00000004 __malloc_max_total_mem
10015dbc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10006ba0 g     F .text	000000fc UsbSetConfig
10012c94 g     F .text	0000001c __swbuf
10009ce8 g     F .text	00000018 srand
10007ed4 g     F .text	000000b8 .hidden __ltsf2
10010f5c g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
100127ec g     F .text	00000014 fclose
10009880 g     F .text	00000198 .hidden __truncdfsf2
1000c274 g     F .text	00001728 _dtoa_r
1000ec68 g     F .text	000007a8 _malloc_r
10012e24 g     F .text	00000030 __ascii_wctomb
1001ba50 g     O .rwdata	00000004 alt_errno
1000e860 g     F .text	000000b8 _fwalk
10007404 g     F .text	00000054 .hidden __divsi3
1000dfa8 g     F .text	00000124 _malloc_trim_r
10006d98 g     F .text	00000144 UsbGetHidDesc
10017ad0 g       *ABS*	00000000 __CTOR_END__
10010f64 g     F .text	000000a4 strcmp
10017ad0 g       *ABS*	00000000 __flash_rodata_start
10017ad0 g       *ABS*	00000000 __DTOR_LIST__
10014e34 g     F .text	00000084 .hidden __nedf2
100062a8 g     F .text	00000044 UsbRead
10015ce0 g     F .text	00000034 alt_irq_init
100159f8 g     F .text	00000080 alt_release_fd
10019c78 g     O .rodata	00000100 .hidden __clz_tab
1001d554 g     O .bss	00000004 _PathLocale
1001772c g     F .text	00000014 atexit
10007e1c g     F .text	000000b8 .hidden __gesf2
10012564 g     F .text	0000005c _write_r
1000ea88 g     F .text	0000001c setlocale
1001ba28 g     O .rwdata	00000004 _impure_ptr
1001d570 g     O .bss	00000004 alt_argc
10016bb0 g     F .text	00000060 _do_dtors
1000ea74 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
100102ec g     F .text	00000060 __ulp
1000df90 g     F .text	00000018 __fp_unlock_all
1001ba3c g     O .rwdata	00000008 alt_fs_list
10006edc g     F .text	0000033c UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000eaa4 g     F .text	0000000c localeconv
10016c2c g     F .text	00000050 alt_ic_isr_register
1001ba64 g       *ABS*	00000000 _edata
1001d6b0 g       *ABS*	00000000 _end
10006254 g     F .text	00000054 UsbWrite
100001bc g       *ABS*	00000000 __ram_exceptions_end
10016298 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
10016d1c g     F .text	000000a4 alt_ic_irq_disable
10010e84 g     F .text	0000007c __swrite
1001ba34 g     O .rwdata	00000004 __malloc_trim_threshold
1000ea68 g     F .text	0000000c __locale_msgcharset
10017740 g     F .text	00000038 exit
1000e918 g     F .text	000000b8 _fwalk_reent
10010154 g     F .text	00000198 __mdiff
10007458 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
1000df6c g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10000248 g     F .text	00000078 IO_write
10017a9c g     F .text	00000034 _exit
100167a8 g     F .text	00000140 alt_alarm_start
10012eb0 g     F .text	0000010c .hidden __muldi3
1000eab0 g     F .text	000001b8 __smakebuf_r
10009d64 g     F .text	00000098 strlen
10017198 g     F .text	00000160 open
10014eb8 g     F .text	000000e0 .hidden __gedf2
1001ba38 g     O .rwdata	00000004 __wctomb
10011104 g     F .text	00000018 __sprint_r
10016c10 g     F .text	0000001c alt_icache_flush_all
1001ba58 g     O .rwdata	00000004 alt_priority_mask
10016c7c g     F .text	000000a0 alt_ic_irq_enable
1000bef8 g     F .text	00000024 __vfprintf_internal
10012e54 g     F .text	0000005c _wctomb_r
10008ea0 g     F .text	000008d0 .hidden __subdf3
1000faf0 g     F .text	000000b0 __lo0bits
100067b0 g     F .text	0000018c UsbGetConfigDesc1
1001ba5c g     O .rwdata	00000008 alt_alarm_list
10016b50 g     F .text	00000060 _do_ctors
100062ec g     F .text	000000b0 UsbSoftReset
10012d4c g     F .text	000000d8 wcrtomb
100152c4 g     F .text	000000d8 close
100074ec g     F .text	000004e0 .hidden __addsf3
100065dc g     F .text	000001d4 UsbGetDeviceDesc2
10015634 g     F .text	00000084 alt_load
10012984 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
1000df70 g     F .text	00000004 __sinit_lock_acquire
1000f848 g     F .text	0000013c __multadd
1000f820 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406f14 	ori	at,at,444
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001426 	beq	r2,zero,1000017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	008400b4 	movhi	r2,4098
10000130:	10b56c04 	addi	r2,r2,-10832
10000134:	e0fffd17 	ldw	r3,-12(fp)
10000138:	180690fa 	slli	r3,r3,3
1000013c:	10c5883a 	add	r2,r2,r3
10000140:	10c00017 	ldw	r3,0(r2)
10000144:	008400b4 	movhi	r2,4098
10000148:	10b56c04 	addi	r2,r2,-10832
1000014c:	e13ffd17 	ldw	r4,-12(fp)
10000150:	200890fa 	slli	r4,r4,3
10000154:	1105883a 	add	r2,r2,r4
10000158:	10800104 	addi	r2,r2,4
1000015c:	10800017 	ldw	r2,0(r2)
10000160:	1009883a 	mov	r4,r2
10000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
10000178:	00000706 	br	10000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000017c:	e0bffc17 	ldw	r2,-16(fp)
10000180:	1085883a 	add	r2,r2,r2
10000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000188:	e0bffd17 	ldw	r2,-12(fp)
1000018c:	10800044 	addi	r2,r2,1
10000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
10000194:	003fe106 	br	1000011c <__alt_data_end+0xf800011c>

    active = alt_irq_pending ();
10000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000019c:	e0bffb17 	ldw	r2,-20(fp)
100001a0:	103fdb1e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	e037883a 	mov	sp,fp
100001ac:	dfc00117 	ldw	ra,4(sp)
100001b0:	df000017 	ldw	fp,0(sp)
100001b4:	dec00204 	addi	sp,sp,8
100001b8:	f800283a 	ret

Disassembly of section .text:

100001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001bc:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c4:	068400b4 	movhi	gp,4098
    ori gp, gp, %lo(_gp)
100001c8:	d68e8914 	ori	gp,gp,14884
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001cc:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001d0:	10b55414 	ori	r2,r2,54608

    movhi r3, %hi(__bss_end)
100001d4:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001d8:	18f5ac14 	ori	r3,r3,54960

    beq r2, r3, 1f
100001dc:	10c00326 	beq	r2,r3,100001ec <_start+0x30>

0:
    stw zero, (r2)
100001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e8:	10fffd36 	bltu	r2,r3,100001e0 <__alt_data_end+0xf80001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001ec:	00156340 	call	10015634 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001f0:	00157e40 	call	100157e4 <alt_main>

100001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f4:	003fff06 	br	100001f4 <__alt_data_end+0xf80001f4>

100001f8 <IO_init>:
#define otg_hpi_cs			(volatile char*)	OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*)	OTG_HPI_W_BASE


void IO_init(void)
{
100001f8:	deffff04 	addi	sp,sp,-4
100001fc:	df000015 	stw	fp,0(sp)
10000200:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 1;
10000204:	0080f404 	movi	r2,976
10000208:	00c00044 	movi	r3,1
1000020c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10000210:	0080fc04 	movi	r2,1008
10000214:	00c00044 	movi	r3,1
10000218:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
1000021c:	0080f804 	movi	r2,992
10000220:	00c00044 	movi	r3,1
10000224:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
10000228:	00810404 	movi	r2,1040
1000022c:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
10000230:	00810004 	movi	r2,1024
10000234:	10000015 	stw	zero,0(r2)
}
10000238:	e037883a 	mov	sp,fp
1000023c:	df000017 	ldw	fp,0(sp)
10000240:	dec00104 	addi	sp,sp,4
10000244:	f800283a 	ret

10000248 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
10000248:	defffd04 	addi	sp,sp,-12
1000024c:	df000215 	stw	fp,8(sp)
10000250:	df000204 	addi	fp,sp,8
10000254:	2007883a 	mov	r3,r4
10000258:	2805883a 	mov	r2,r5
1000025c:	e0fffe05 	stb	r3,-8(fp)
10000260:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
10000264:	00810404 	movi	r2,1040
10000268:	e0fffe03 	ldbu	r3,-8(fp)
1000026c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
10000270:	00810004 	movi	r2,1024
10000274:	e0ffff0b 	ldhu	r3,-4(fp)
10000278:	10c00015 	stw	r3,0(r2)
	
	*otg_hpi_r = 1;
1000027c:	0080fc04 	movi	r2,1008
10000280:	00c00044 	movi	r3,1
10000284:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 0;
10000288:	0080f404 	movi	r2,976
1000028c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10000290:	0080f804 	movi	r2,992
10000294:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
10000298:	0080f804 	movi	r2,992
1000029c:	00c00044 	movi	r3,1
100002a0:	10c00005 	stb	r3,0(r2)
	
	*otg_hpi_cs = 1;
100002a4:	0080f404 	movi	r2,976
100002a8:	00c00044 	movi	r3,1
100002ac:	10c00005 	stb	r3,0(r2)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
}
100002b0:	e037883a 	mov	sp,fp
100002b4:	df000017 	ldw	fp,0(sp)
100002b8:	dec00104 	addi	sp,sp,4
100002bc:	f800283a 	ret

100002c0 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
100002c0:	defffd04 	addi	sp,sp,-12
100002c4:	df000215 	stw	fp,8(sp)
100002c8:	df000204 	addi	fp,sp,8
100002cc:	2005883a 	mov	r2,r4
100002d0:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	
	*otg_hpi_address = Address;
100002d4:	00810404 	movi	r2,1040
100002d8:	e0ffff03 	ldbu	r3,-4(fp)
100002dc:	10c00015 	stw	r3,0(r2)
		
	*otg_hpi_w = 1;
100002e0:	0080f804 	movi	r2,992
100002e4:	00c00044 	movi	r3,1
100002e8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 0;
100002ec:	0080f404 	movi	r2,976
100002f0:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
100002f4:	0080fc04 	movi	r2,1008
100002f8:	10000005 	stb	zero,0(r2)
	
	temp = *otg_hpi_data;
100002fc:	00810004 	movi	r2,1024
10000300:	10800017 	ldw	r2,0(r2)
10000304:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
10000308:	0080fc04 	movi	r2,1008
1000030c:	00c00044 	movi	r3,1
10000310:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000314:	0080f404 	movi	r2,976
10000318:	00c00044 	movi	r3,1
1000031c:	10c00005 	stb	r3,0(r2)
	
	return temp;
10000320:	e0bffe0b 	ldhu	r2,-8(fp)
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	//printf("%x\n",temp);
	return temp;
}
10000324:	e037883a 	mov	sp,fp
10000328:	df000017 	ldw	fp,0(sp)
1000032c:	dec00104 	addi	sp,sp,4
10000330:	f800283a 	ret

10000334 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
10000334:	def90804 	addi	sp,sp,-7136
10000338:	dfc6f715 	stw	ra,7132(sp)
1000033c:	df06f615 	stw	fp,7128(sp)
10000340:	dc86f515 	stw	r18,7124(sp)
10000344:	dc46f415 	stw	r17,7120(sp)
10000348:	dc06f315 	stw	r16,7116(sp)
1000034c:	df06f604 	addi	fp,sp,7128
	IO_init();
10000350:	00001f80 	call	100001f8 <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
10000354:	e039430d 	sth	zero,-6900(fp)
	long keycode = 0;
10000358:	e0394415 	stw	zero,-6896(fp)
	alt_u8 toggle = 0;
1000035c:	e0390a85 	stb	zero,-7126(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
10000360:	01040074 	movhi	r4,4097
10000364:	211eb404 	addi	r4,r4,31440
10000368:	0009cd40 	call	10009cd4 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
1000036c:	00062ec0 	call	100062ec <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10000370:	01005104 	movi	r4,324
10000374:	000b883a 	mov	r5,zero
10000378:	00062540 	call	10006254 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
1000037c:	01302414 	movui	r4,49296
10000380:	017fffd4 	movui	r5,65535
10000384:	00062540 	call	10006254 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10000388:	01006d04 	movi	r4,436
1000038c:	01409604 	movi	r5,600
10000390:	00062540 	call	10006254 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10000394:	00811004 	movi	r2,1088
10000398:	e0b90a0d 	sth	r2,-7128(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
1000039c:	e0b90a0b 	ldhu	r2,-7128(fp)
100003a0:	01005084 	movi	r4,322
100003a4:	100b883a 	mov	r5,r2
100003a8:	00062540 	call	10006254 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
100003ac:	00808404 	movi	r2,528
100003b0:	e0b9450d 	sth	r2,-6892(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
100003b4:	e0b9450b 	ldhu	r2,-6892(fp)
100003b8:	01302314 	movui	r4,49292
100003bc:	100b883a 	mov	r5,r2
100003c0:	00062540 	call	10006254 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
100003c4:	01007104 	movi	r4,452
100003c8:	000b883a 	mov	r5,zero
100003cc:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100003d0:	01007184 	movi	r4,454
100003d4:	000b883a 	mov	r5,zero
100003d8:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
100003dc:	01007204 	movi	r4,456
100003e0:	000b883a 	mov	r5,zero
100003e4:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
100003e8:	01007284 	movi	r4,458
100003ec:	000b883a 	mov	r5,zero
100003f0:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
100003f4:	01007304 	movi	r4,460
100003f8:	000b883a 	mov	r5,zero
100003fc:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000400:	01007384 	movi	r4,462
10000404:	000b883a 	mov	r5,zero
10000408:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
1000040c:	01007404 	movi	r4,464
10000410:	000b883a 	mov	r5,zero
10000414:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10000418:	01007484 	movi	r4,466
1000041c:	000b883a 	mov	r5,zero
10000420:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000424:	01007504 	movi	r4,468
10000428:	000b883a 	mov	r5,zero
1000042c:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10000430:	01007584 	movi	r4,470
10000434:	000b883a 	mov	r5,zero
10000438:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
1000043c:	01007604 	movi	r4,472
10000440:	000b883a 	mov	r5,zero
10000444:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10000448:	01007684 	movi	r4,474
1000044c:	000b883a 	mov	r5,zero
10000450:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000454:	01007704 	movi	r4,476
10000458:	000b883a 	mov	r5,zero
1000045c:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10000460:	01007784 	movi	r4,478
10000464:	000b883a 	mov	r5,zero
10000468:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
1000046c:	01007084 	movi	r4,450
10000470:	01401c84 	movi	r5,114
10000474:	00062540 	call	10006254 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000478:	01000044 	movi	r4,1
1000047c:	01738054 	movui	r5,52737
10000480:	00002480 	call	10000248 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10000484:	0001883a 	nop
10000488:	010000c4 	movi	r4,3
1000048c:	00002c00 	call	100002c0 <IO_read>
10000490:	10bfffcc 	andi	r2,r2,65535
10000494:	103ffc26 	beq	r2,zero,10000488 <__alt_data_end+0xf8000488>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000498:	0001883a 	nop
1000049c:	01000044 	movi	r4,1
100004a0:	00002c00 	call	100002c0 <IO_read>
100004a4:	10bfffcc 	andi	r2,r2,65535
100004a8:	1083fb58 	cmpnei	r2,r2,4077
100004ac:	10000826 	beq	r2,zero,100004d0 <main+0x19c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100004b0:	01000044 	movi	r4,1
100004b4:	00002c00 	call	100002c0 <IO_read>
100004b8:	10bfffcc 	andi	r2,r2,65535
100004bc:	01040074 	movhi	r4,4097
100004c0:	211eba04 	addi	r4,r4,31464
100004c4:	100b883a 	mov	r5,r2
100004c8:	0009be00 	call	10009be0 <printf>
		goto USB_HOT_PLUG;
100004cc:	003fa706 	br	1000036c <__alt_data_end+0xf800036c>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
100004d0:	01040074 	movhi	r4,4097
100004d4:	211ec304 	addi	r4,r4,31500
100004d8:	0009be00 	call	10009be0 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
100004dc:	01007084 	movi	r4,450
100004e0:	01401d04 	movi	r5,116
100004e4:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
100004e8:	01007104 	movi	r4,452
100004ec:	01400f04 	movi	r5,60
100004f0:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100004f4:	01007184 	movi	r4,454
100004f8:	000b883a 	mov	r5,zero
100004fc:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000500:	01007204 	movi	r4,456
10000504:	000b883a 	mov	r5,zero
10000508:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
1000050c:	01007284 	movi	r4,458
10000510:	000b883a 	mov	r5,zero
10000514:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10000518:	01007304 	movi	r4,460
1000051c:	000b883a 	mov	r5,zero
10000520:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000524:	01007384 	movi	r4,462
10000528:	000b883a 	mov	r5,zero
1000052c:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000530:	01007404 	movi	r4,464
10000534:	000b883a 	mov	r5,zero
10000538:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
1000053c:	01007484 	movi	r4,466
10000540:	000b883a 	mov	r5,zero
10000544:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000548:	01007504 	movi	r4,468
1000054c:	000b883a 	mov	r5,zero
10000550:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10000554:	01007584 	movi	r4,470
10000558:	000b883a 	mov	r5,zero
1000055c:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10000560:	01007604 	movi	r4,472
10000564:	000b883a 	mov	r5,zero
10000568:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
1000056c:	01007684 	movi	r4,474
10000570:	000b883a 	mov	r5,zero
10000574:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000578:	01007704 	movi	r4,476
1000057c:	000b883a 	mov	r5,zero
10000580:	00062540 	call	10006254 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10000584:	01007784 	movi	r4,478
10000588:	000b883a 	mov	r5,zero
1000058c:	00062540 	call	10006254 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000590:	01000044 	movi	r4,1
10000594:	01738054 	movui	r5,52737
10000598:	00002480 	call	10000248 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
1000059c:	0001883a 	nop
100005a0:	01000044 	movi	r4,1
100005a4:	00002c00 	call	100002c0 <IO_read>
100005a8:	10bfffcc 	andi	r2,r2,65535
100005ac:	1083fb58 	cmpnei	r2,r2,4077
100005b0:	10000826 	beq	r2,zero,100005d4 <main+0x2a0>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100005b4:	01000044 	movi	r4,1
100005b8:	00002c00 	call	100002c0 <IO_read>
100005bc:	10bfffcc 	andi	r2,r2,65535
100005c0:	01040074 	movhi	r4,4097
100005c4:	211eba04 	addi	r4,r4,31464
100005c8:	100b883a 	mov	r5,r2
100005cc:	0009be00 	call	10009be0 <printf>
		goto USB_HOT_PLUG;
100005d0:	003f6606 	br	1000036c <__alt_data_end+0xf800036c>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
100005d4:	00b02284 	movi	r2,-16246
100005d8:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
100005dc:	008c0004 	movi	r2,12288
100005e0:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
100005e4:	00880004 	movi	r2,8192
100005e8:	e0b9430d 	sth	r2,-6900(fp)
	usb_ctl_val = UsbRead(ctl_reg);
100005ec:	d0a6cb0b 	ldhu	r2,-25812(gp)
100005f0:	10bfffcc 	andi	r2,r2,65535
100005f4:	1009883a 	mov	r4,r2
100005f8:	00062a80 	call	100062a8 <UsbRead>
100005fc:	e0b90a0d 	sth	r2,-7128(fp)

	if (!(usb_ctl_val & no_device))
10000600:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000604:	e0f90a0b 	ldhu	r3,-7128(fp)
10000608:	1884703a 	and	r2,r3,r2
1000060c:	10bfffcc 	andi	r2,r2,65535
10000610:	1000341e 	bne	r2,zero,100006e4 <main+0x3b0>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000614:	e0390ac5 	stb	zero,-7125(fp)
10000618:	00001006 	br	1000065c <main+0x328>
		{
			usleep(5*1000);
1000061c:	0104e204 	movi	r4,5000
10000620:	0015b280 	call	10015b28 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10000624:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000628:	10bfffcc 	andi	r2,r2,65535
1000062c:	1009883a 	mov	r4,r2
10000630:	00062a80 	call	100062a8 <UsbRead>
10000634:	e0b90a0d 	sth	r2,-7128(fp)
			if(usb_ctl_val & no_device) break;
10000638:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000063c:	e0f90a0b 	ldhu	r3,-7128(fp)
10000640:	1884703a 	and	r2,r3,r2
10000644:	10bfffcc 	andi	r2,r2,65535
10000648:	10000126 	beq	r2,zero,10000650 <main+0x31c>
1000064c:	00000606 	br	10000668 <main+0x334>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000650:	e0b90ac3 	ldbu	r2,-7125(fp)
10000654:	10800044 	addi	r2,r2,1
10000658:	e0b90ac5 	stb	r2,-7125(fp)
1000065c:	e0b90ac3 	ldbu	r2,-7125(fp)
10000660:	10800170 	cmpltui	r2,r2,5
10000664:	103fed1e 	bne	r2,zero,1000061c <__alt_data_end+0xf800061c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
		}
		if(!(usb_ctl_val & no_device))
10000668:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000066c:	e0f90a0b 	ldhu	r3,-7128(fp)
10000670:	1884703a 	and	r2,r3,r2
10000674:	10bfffcc 	andi	r2,r2,65535
10000678:	1000261e 	bne	r2,zero,10000714 <main+0x3e0>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
1000067c:	01040074 	movhi	r4,4097
10000680:	211ec704 	addi	r4,r4,31516
10000684:	0009cd40 	call	10009cd4 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10000688:	01040074 	movhi	r4,4097
1000068c:	211ed104 	addi	r4,r4,31556
10000690:	0009cd40 	call	10009cd4 <puts>
			while (!(usb_ctl_val & no_device))
10000694:	00000d06 	br	100006cc <main+0x398>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10000698:	d0a6cb0b 	ldhu	r2,-25812(gp)
1000069c:	10bfffcc 	andi	r2,r2,65535
100006a0:	1009883a 	mov	r4,r2
100006a4:	00062a80 	call	100062a8 <UsbRead>
100006a8:	e0b90a0d 	sth	r2,-7128(fp)
				if(usb_ctl_val & no_device)
100006ac:	d0a6cb8b 	ldhu	r2,-25810(gp)
100006b0:	e0f90a0b 	ldhu	r3,-7128(fp)
100006b4:	1884703a 	and	r2,r3,r2
100006b8:	10bfffcc 	andi	r2,r2,65535
100006bc:	10000126 	beq	r2,zero,100006c4 <main+0x390>
					goto USB_HOT_PLUG;
100006c0:	003f2a06 	br	1000036c <__alt_data_end+0xf800036c>

				usleep(2000);
100006c4:	0101f404 	movi	r4,2000
100006c8:	0015b280 	call	10015b28 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
100006cc:	d0a6cb8b 	ldhu	r2,-25810(gp)
100006d0:	e0f90a0b 	ldhu	r3,-7128(fp)
100006d4:	1884703a 	and	r2,r3,r2
100006d8:	10bfffcc 	andi	r2,r2,65535
100006dc:	103fee26 	beq	r2,zero,10000698 <__alt_data_end+0xf8000698>
100006e0:	00000c06 	br	10000714 <main+0x3e0>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
100006e4:	e0f90a0b 	ldhu	r3,-7128(fp)
100006e8:	e0b9430b 	ldhu	r2,-6900(fp)
100006ec:	1884703a 	and	r2,r3,r2
100006f0:	10bfffcc 	andi	r2,r2,65535
100006f4:	10000426 	beq	r2,zero,10000708 <main+0x3d4>
		{
			printf("[INFO]: full speed device\n");
100006f8:	01040074 	movhi	r4,4097
100006fc:	211edd04 	addi	r4,r4,31604
10000700:	0009cd40 	call	10009cd4 <puts>
10000704:	00000306 	br	10000714 <main+0x3e0>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10000708:	01040074 	movhi	r4,4097
1000070c:	211ee404 	addi	r4,r4,31632
10000710:	0009cd40 	call	10009cd4 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10000714:	000639c0 	call	1000639c <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000718:	00000306 	br	10000728 <main+0x3f4>
	{
		UsbSetAddress();
1000071c:	000639c0 	call	1000639c <UsbSetAddress>
		usleep(10*1000);
10000720:	0109c404 	movi	r4,10000
10000724:	0015b280 	call	10015b28 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000728:	010000c4 	movi	r4,3
1000072c:	00002c00 	call	100002c0 <IO_read>
10000730:	10bfffcc 	andi	r2,r2,65535
10000734:	1080040c 	andi	r2,r2,16
10000738:	103ff826 	beq	r2,zero,1000071c <__alt_data_end+0xf800071c>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000073c:	00072180 	call	10007218 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
10000740:	01000084 	movi	r4,2
10000744:	01414184 	movi	r5,1286
10000748:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000074c:	0009883a 	mov	r4,zero
10000750:	00002c00 	call	100002c0 <IO_read>
10000754:	10bfffcc 	andi	r2,r2,65535
10000758:	01040074 	movhi	r4,4097
1000075c:	211eeb04 	addi	r4,r4,31660
10000760:	100b883a 	mov	r5,r2
10000764:	0009be00 	call	10009be0 <printf>

	IO_write(HPI_ADDR,0x0508); // n
10000768:	01000084 	movi	r4,2
1000076c:	01414204 	movi	r5,1288
10000770:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000774:	0009883a 	mov	r4,zero
10000778:	00002c00 	call	100002c0 <IO_read>
1000077c:	e0b90a0d 	sth	r2,-7128(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10000780:	e0b90a0b 	ldhu	r2,-7128(fp)
10000784:	01040074 	movhi	r4,4097
10000788:	211ef604 	addi	r4,r4,31704
1000078c:	100b883a 	mov	r5,r2
10000790:	0009be00 	call	10009be0 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10000794:	e0b90a0b 	ldhu	r2,-7128(fp)
10000798:	108000e0 	cmpeqi	r2,r2,3
1000079c:	1000031e 	bne	r2,zero,100007ac <main+0x478>
	{
		usb_ctl_val = UsbGetRetryCnt();
100007a0:	000729c0 	call	1000729c <UsbGetRetryCnt>
100007a4:	e0b90a0d 	sth	r2,-7128(fp)

		goto USB_HOT_PLUG;
100007a8:	003ef006 	br	1000036c <__alt_data_end+0xf800036c>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
100007ac:	01040074 	movhi	r4,4097
100007b0:	211f0204 	addi	r4,r4,31752
100007b4:	0009cd40 	call	10009cd4 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
100007b8:	00064980 	call	10006498 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007bc:	00000306 	br	100007cc <main+0x498>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
100007c0:	00064980 	call	10006498 <UsbGetDeviceDesc1>
		usleep(10*1000);
100007c4:	0109c404 	movi	r4,10000
100007c8:	0015b280 	call	10015b28 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007cc:	010000c4 	movi	r4,3
100007d0:	00002c00 	call	100002c0 <IO_read>
100007d4:	10bfffcc 	andi	r2,r2,65535
100007d8:	1080040c 	andi	r2,r2,16
100007dc:	103ff826 	beq	r2,zero,100007c0 <__alt_data_end+0xf80007c0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100007e0:	00072180 	call	10007218 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100007e4:	01000084 	movi	r4,2
100007e8:	01414184 	movi	r5,1286
100007ec:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
100007f0:	0009883a 	mov	r4,zero
100007f4:	00002c00 	call	100002c0 <IO_read>
100007f8:	10bfffcc 	andi	r2,r2,65535
100007fc:	01040074 	movhi	r4,4097
10000800:	211f1104 	addi	r4,r4,31812
10000804:	100b883a 	mov	r5,r2
10000808:	0009be00 	call	10009be0 <printf>

	IO_write(HPI_ADDR,0x0508);
1000080c:	01000084 	movi	r4,2
10000810:	01414204 	movi	r5,1288
10000814:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000818:	0009883a 	mov	r4,zero
1000081c:	00002c00 	call	100002c0 <IO_read>
10000820:	e0b90a0d 	sth	r2,-7128(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000824:	e0b90a0b 	ldhu	r2,-7128(fp)
10000828:	01040074 	movhi	r4,4097
1000082c:	211f1c04 	addi	r4,r4,31856
10000830:	100b883a 	mov	r5,r2
10000834:	0009be00 	call	10009be0 <printf>
	while (usb_ctl_val != 0x03)
10000838:	00000206 	br	10000844 <main+0x510>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000083c:	000729c0 	call	1000729c <UsbGetRetryCnt>
10000840:	e0b90a0d 	sth	r2,-7128(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000844:	e0b90a0b 	ldhu	r2,-7128(fp)
10000848:	108000d8 	cmpnei	r2,r2,3
1000084c:	103ffb1e 	bne	r2,zero,1000083c <__alt_data_end+0xf800083c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10000850:	01040074 	movhi	r4,4097
10000854:	211f2804 	addi	r4,r4,31904
10000858:	0009cd40 	call	10009cd4 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
1000085c:	00065dc0 	call	100065dc <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000860:	00000306 	br	10000870 <main+0x53c>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10000864:	00065dc0 	call	100065dc <UsbGetDeviceDesc2>
		usleep(10*1000);
10000868:	0109c404 	movi	r4,10000
1000086c:	0015b280 	call	10015b28 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000870:	010000c4 	movi	r4,3
10000874:	00002c00 	call	100002c0 <IO_read>
10000878:	10bfffcc 	andi	r2,r2,65535
1000087c:	1080040c 	andi	r2,r2,16
10000880:	103ff826 	beq	r2,zero,10000864 <__alt_data_end+0xf8000864>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000884:	00072180 	call	10007218 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000888:	01000084 	movi	r4,2
1000088c:	01414184 	movi	r5,1286
10000890:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000894:	0009883a 	mov	r4,zero
10000898:	00002c00 	call	100002c0 <IO_read>
1000089c:	10bfffcc 	andi	r2,r2,65535
100008a0:	01040074 	movhi	r4,4097
100008a4:	211f1104 	addi	r4,r4,31812
100008a8:	100b883a 	mov	r5,r2
100008ac:	0009be00 	call	10009be0 <printf>

	IO_write(HPI_ADDR,0x0508);
100008b0:	01000084 	movi	r4,2
100008b4:	01414204 	movi	r5,1288
100008b8:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100008bc:	0009883a 	mov	r4,zero
100008c0:	00002c00 	call	100002c0 <IO_read>
100008c4:	e0b90a0d 	sth	r2,-7128(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100008c8:	e0b90a0b 	ldhu	r2,-7128(fp)
100008cc:	01040074 	movhi	r4,4097
100008d0:	211f1c04 	addi	r4,r4,31856
100008d4:	100b883a 	mov	r5,r2
100008d8:	0009be00 	call	10009be0 <printf>
	while (usb_ctl_val != 0x03)
100008dc:	00000206 	br	100008e8 <main+0x5b4>
	{
		usb_ctl_val = UsbGetRetryCnt();
100008e0:	000729c0 	call	1000729c <UsbGetRetryCnt>
100008e4:	e0b90a0d 	sth	r2,-7128(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100008e8:	e0b90a0b 	ldhu	r2,-7128(fp)
100008ec:	108000d8 	cmpnei	r2,r2,3
100008f0:	103ffb1e 	bne	r2,zero,100008e0 <__alt_data_end+0xf80008e0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
100008f4:	01040074 	movhi	r4,4097
100008f8:	211f3c04 	addi	r4,r4,31984
100008fc:	0009cd40 	call	10009cd4 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
10000900:	00067b00 	call	100067b0 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000904:	00000306 	br	10000914 <main+0x5e0>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
10000908:	00067b00 	call	100067b0 <UsbGetConfigDesc1>
		usleep(10*1000);
1000090c:	0109c404 	movi	r4,10000
10000910:	0015b280 	call	10015b28 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000914:	010000c4 	movi	r4,3
10000918:	00002c00 	call	100002c0 <IO_read>
1000091c:	10bfffcc 	andi	r2,r2,65535
10000920:	1080040c 	andi	r2,r2,16
10000924:	103ff826 	beq	r2,zero,10000908 <__alt_data_end+0xf8000908>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000928:	00072180 	call	10007218 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
1000092c:	01000084 	movi	r4,2
10000930:	01414184 	movi	r5,1286
10000934:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000938:	0009883a 	mov	r4,zero
1000093c:	00002c00 	call	100002c0 <IO_read>
10000940:	10bfffcc 	andi	r2,r2,65535
10000944:	01040074 	movhi	r4,4097
10000948:	211f4e04 	addi	r4,r4,32056
1000094c:	100b883a 	mov	r5,r2
10000950:	0009be00 	call	10009be0 <printf>

	IO_write(HPI_ADDR,0x0508);
10000954:	01000084 	movi	r4,2
10000958:	01414204 	movi	r5,1288
1000095c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000960:	0009883a 	mov	r4,zero
10000964:	00002c00 	call	100002c0 <IO_read>
10000968:	e0b90a0d 	sth	r2,-7128(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
1000096c:	e0b90a0b 	ldhu	r2,-7128(fp)
10000970:	01040074 	movhi	r4,4097
10000974:	211f5904 	addi	r4,r4,32100
10000978:	100b883a 	mov	r5,r2
1000097c:	0009be00 	call	10009be0 <printf>
	while (usb_ctl_val != 0x03)
10000980:	00000206 	br	1000098c <main+0x658>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000984:	000729c0 	call	1000729c <UsbGetRetryCnt>
10000988:	e0b90a0d 	sth	r2,-7128(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
1000098c:	e0b90a0b 	ldhu	r2,-7128(fp)
10000990:	108000d8 	cmpnei	r2,r2,3
10000994:	103ffb1e 	bne	r2,zero,10000984 <__alt_data_end+0xf8000984>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10000998:	01040074 	movhi	r4,4097
1000099c:	211f6504 	addi	r4,r4,32148
100009a0:	0009cd40 	call	10009cd4 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
100009a4:	000693c0 	call	1000693c <UsbGetConfigDesc2>

	usleep(100*1000);
100009a8:	010000b4 	movhi	r4,2
100009ac:	2121a804 	addi	r4,r4,-31072
100009b0:	0015b280 	call	10015b28 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009b4:	00000306 	br	100009c4 <main+0x690>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
100009b8:	000693c0 	call	1000693c <UsbGetConfigDesc2>
		usleep(10*1000);
100009bc:	0109c404 	movi	r4,10000
100009c0:	0015b280 	call	10015b28 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009c4:	010000c4 	movi	r4,3
100009c8:	00002c00 	call	100002c0 <IO_read>
100009cc:	10bfffcc 	andi	r2,r2,65535
100009d0:	1080040c 	andi	r2,r2,16
100009d4:	103ff826 	beq	r2,zero,100009b8 <__alt_data_end+0xf80009b8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100009d8:	00072180 	call	10007218 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100009dc:	01000084 	movi	r4,2
100009e0:	01414184 	movi	r5,1286
100009e4:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
100009e8:	0009883a 	mov	r4,zero
100009ec:	00002c00 	call	100002c0 <IO_read>
100009f0:	10bfffcc 	andi	r2,r2,65535
100009f4:	01040074 	movhi	r4,4097
100009f8:	211f7804 	addi	r4,r4,32224
100009fc:	100b883a 	mov	r5,r2
10000a00:	0009be00 	call	10009be0 <printf>

	IO_write(HPI_ADDR,0x0508);
10000a04:	01000084 	movi	r4,2
10000a08:	01414204 	movi	r5,1288
10000a0c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000a10:	0009883a 	mov	r4,zero
10000a14:	00002c00 	call	100002c0 <IO_read>
10000a18:	e0b90a0d 	sth	r2,-7128(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10000a1c:	e0b90a0b 	ldhu	r2,-7128(fp)
10000a20:	01040074 	movhi	r4,4097
10000a24:	211f8304 	addi	r4,r4,32268
10000a28:	100b883a 	mov	r5,r2
10000a2c:	0009be00 	call	10009be0 <printf>
	while (usb_ctl_val != 0x03)
10000a30:	00000206 	br	10000a3c <main+0x708>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000a34:	000729c0 	call	1000729c <UsbGetRetryCnt>
10000a38:	e0b90a0d 	sth	r2,-7128(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000a3c:	e0b90a0b 	ldhu	r2,-7128(fp)
10000a40:	108000d8 	cmpnei	r2,r2,3
10000a44:	103ffb1e 	bne	r2,zero,10000a34 <__alt_data_end+0xf8000a34>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000a48:	01040074 	movhi	r4,4097
10000a4c:	211f8f04 	addi	r4,r4,32316
10000a50:	0009cd40 	call	10009cd4 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000a54:	01000084 	movi	r4,2
10000a58:	01415b04 	movi	r5,1388
10000a5c:	00002480 	call	10000248 <IO_write>
	code = IO_read(HPI_DATA);
10000a60:	0009883a 	mov	r4,zero
10000a64:	00002c00 	call	100002c0 <IO_read>
10000a68:	e0b9458d 	sth	r2,-6890(fp)
	code = code & 0x003;
10000a6c:	e0b9458b 	ldhu	r2,-6890(fp)
10000a70:	108000cc 	andi	r2,r2,3
10000a74:	e0b9458d 	sth	r2,-6890(fp)
	printf("\ncode = %x\n", code);
10000a78:	e0b9458b 	ldhu	r2,-6890(fp)
10000a7c:	01040074 	movhi	r4,4097
10000a80:	211fa204 	addi	r4,r4,32392
10000a84:	100b883a 	mov	r5,r2
10000a88:	0009be00 	call	10009be0 <printf>

	if (code == 0x01)
10000a8c:	e0b9458b 	ldhu	r2,-6890(fp)
10000a90:	10800058 	cmpnei	r2,r2,1
10000a94:	1000041e 	bne	r2,zero,10000aa8 <main+0x774>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000a98:	01040074 	movhi	r4,4097
10000a9c:	211fa504 	addi	r4,r4,32404
10000aa0:	0009cd40 	call	10009cd4 <puts>
10000aa4:	00000306 	br	10000ab4 <main+0x780>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000aa8:	01040074 	movhi	r4,4097
10000aac:	211fb404 	addi	r4,r4,32464
10000ab0:	0009cd40 	call	10009cd4 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000ab4:	01000084 	movi	r4,2
10000ab8:	01415d84 	movi	r5,1398
10000abc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x073F);
10000ac0:	0009883a 	mov	r4,zero
10000ac4:	0141cfc4 	movi	r5,1855
10000ac8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x8105);
10000acc:	0009883a 	mov	r4,zero
10000ad0:	01604154 	movui	r5,33029
10000ad4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0003);
10000ad8:	0009883a 	mov	r4,zero
10000adc:	014000c4 	movi	r5,3
10000ae0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);
10000ae4:	0009883a 	mov	r4,zero
10000ae8:	01400204 	movi	r5,8
10000aec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10000af0:	0009883a 	mov	r4,zero
10000af4:	016b0294 	movui	r5,44042
10000af8:	00002480 	call	10000248 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000afc:	01006c04 	movi	r4,432
10000b00:	01415d84 	movi	r5,1398
10000b04:	00062540 	call	10006254 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000b08:	01000084 	movi	r4,2
10000b0c:	01415f04 	movi	r5,1404
10000b10:	00002480 	call	10000248 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000b14:	0009883a 	mov	r4,zero
10000b18:	00002c00 	call	100002c0 <IO_read>
10000b1c:	e0b94605 	stb	r2,-6888(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000b20:	e0b94603 	ldbu	r2,-6888(fp)
10000b24:	01040074 	movhi	r4,4097
10000b28:	211fbd04 	addi	r4,r4,32500
10000b2c:	100b883a 	mov	r5,r2
10000b30:	0009be00 	call	10009be0 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000b34:	0006ba00 	call	10006ba0 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b38:	00000306 	br	10000b48 <main+0x814>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000b3c:	0006ba00 	call	10006ba0 <UsbSetConfig>
		usleep(10*1000);
10000b40:	0109c404 	movi	r4,10000
10000b44:	0015b280 	call	10015b28 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b48:	010000c4 	movi	r4,3
10000b4c:	00002c00 	call	100002c0 <IO_read>
10000b50:	10bfffcc 	andi	r2,r2,65535
10000b54:	1080040c 	andi	r2,r2,16
10000b58:	103ff826 	beq	r2,zero,10000b3c <__alt_data_end+0xf8000b3c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000b5c:	00072180 	call	10007218 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000b60:	01000084 	movi	r4,2
10000b64:	01414184 	movi	r5,1286
10000b68:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000b6c:	0009883a 	mov	r4,zero
10000b70:	00002c00 	call	100002c0 <IO_read>
10000b74:	10bfffcc 	andi	r2,r2,65535
10000b78:	01040074 	movhi	r4,4097
10000b7c:	211fc704 	addi	r4,r4,32540
10000b80:	100b883a 	mov	r5,r2
10000b84:	0009be00 	call	10009be0 <printf>

	IO_write(HPI_ADDR,0x0508);
10000b88:	01000084 	movi	r4,2
10000b8c:	01414204 	movi	r5,1288
10000b90:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000b94:	0009883a 	mov	r4,zero
10000b98:	00002c00 	call	100002c0 <IO_read>
10000b9c:	e0b90a0d 	sth	r2,-7128(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000ba0:	e0b90a0b 	ldhu	r2,-7128(fp)
10000ba4:	01040074 	movhi	r4,4097
10000ba8:	211fd204 	addi	r4,r4,32584
10000bac:	100b883a 	mov	r5,r2
10000bb0:	0009be00 	call	10009be0 <printf>
	while (usb_ctl_val != 0x03)
10000bb4:	00000206 	br	10000bc0 <main+0x88c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000bb8:	000729c0 	call	1000729c <UsbGetRetryCnt>
10000bbc:	e0b90a0d 	sth	r2,-7128(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000bc0:	e0b90a0b 	ldhu	r2,-7128(fp)
10000bc4:	108000d8 	cmpnei	r2,r2,3
10000bc8:	103ffb1e 	bne	r2,zero,10000bb8 <__alt_data_end+0xf8000bb8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000bcc:	01040074 	movhi	r4,4097
10000bd0:	211fde04 	addi	r4,r4,32632
10000bd4:	0009cd40 	call	10009cd4 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000bd8:	0006c9c0 	call	10006c9c <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bdc:	00000306 	br	10000bec <main+0x8b8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000be0:	0006c9c0 	call	10006c9c <UsbClassRequest>
		usleep(10*1000);
10000be4:	0109c404 	movi	r4,10000
10000be8:	0015b280 	call	10015b28 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bec:	010000c4 	movi	r4,3
10000bf0:	00002c00 	call	100002c0 <IO_read>
10000bf4:	10bfffcc 	andi	r2,r2,65535
10000bf8:	1080040c 	andi	r2,r2,16
10000bfc:	103ff826 	beq	r2,zero,10000be0 <__alt_data_end+0xf8000be0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000c00:	00072180 	call	10007218 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000c04:	01000084 	movi	r4,2
10000c08:	01414184 	movi	r5,1286
10000c0c:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000c10:	0009883a 	mov	r4,zero
10000c14:	00002c00 	call	100002c0 <IO_read>
10000c18:	10bfffcc 	andi	r2,r2,65535
10000c1c:	01040074 	movhi	r4,4097
10000c20:	211ff004 	addi	r4,r4,32704
10000c24:	100b883a 	mov	r5,r2
10000c28:	0009be00 	call	10009be0 <printf>

	IO_write(HPI_ADDR,0x0508);
10000c2c:	01000084 	movi	r4,2
10000c30:	01414204 	movi	r5,1288
10000c34:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000c38:	0009883a 	mov	r4,zero
10000c3c:	00002c00 	call	100002c0 <IO_read>
10000c40:	e0b90a0d 	sth	r2,-7128(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000c44:	e0b90a0b 	ldhu	r2,-7128(fp)
10000c48:	01040074 	movhi	r4,4097
10000c4c:	211ffb04 	addi	r4,r4,32748
10000c50:	100b883a 	mov	r5,r2
10000c54:	0009be00 	call	10009be0 <printf>
	while (usb_ctl_val != 0x03)
10000c58:	00000206 	br	10000c64 <main+0x930>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000c5c:	000729c0 	call	1000729c <UsbGetRetryCnt>
10000c60:	e0b90a0d 	sth	r2,-7128(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000c64:	e0b90a0b 	ldhu	r2,-7128(fp)
10000c68:	108000d8 	cmpnei	r2,r2,3
10000c6c:	103ffb1e 	bne	r2,zero,10000c5c <__alt_data_end+0xf8000c5c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000c70:	010400b4 	movhi	r4,4098
10000c74:	21200704 	addi	r4,r4,-32740
10000c78:	0009cd40 	call	10009cd4 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10000c7c:	0006d980 	call	10006d98 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c80:	00000306 	br	10000c90 <main+0x95c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10000c84:	0006d980 	call	10006d98 <UsbGetHidDesc>
		usleep(10*1000);
10000c88:	0109c404 	movi	r4,10000
10000c8c:	0015b280 	call	10015b28 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c90:	010000c4 	movi	r4,3
10000c94:	00002c00 	call	100002c0 <IO_read>
10000c98:	10bfffcc 	andi	r2,r2,65535
10000c9c:	1080040c 	andi	r2,r2,16
10000ca0:	103ff826 	beq	r2,zero,10000c84 <__alt_data_end+0xf8000c84>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000ca4:	00072180 	call	10007218 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000ca8:	01000084 	movi	r4,2
10000cac:	01414184 	movi	r5,1286
10000cb0:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000cb4:	0009883a 	mov	r4,zero
10000cb8:	00002c00 	call	100002c0 <IO_read>
10000cbc:	10bfffcc 	andi	r2,r2,65535
10000cc0:	01040074 	movhi	r4,4097
10000cc4:	211ff004 	addi	r4,r4,32704
10000cc8:	100b883a 	mov	r5,r2
10000ccc:	0009be00 	call	10009be0 <printf>

	IO_write(HPI_ADDR,0x0508);
10000cd0:	01000084 	movi	r4,2
10000cd4:	01414204 	movi	r5,1288
10000cd8:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000cdc:	0009883a 	mov	r4,zero
10000ce0:	00002c00 	call	100002c0 <IO_read>
10000ce4:	e0b90a0d 	sth	r2,-7128(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000ce8:	e0b90a0b 	ldhu	r2,-7128(fp)
10000cec:	01040074 	movhi	r4,4097
10000cf0:	211ffb04 	addi	r4,r4,32748
10000cf4:	100b883a 	mov	r5,r2
10000cf8:	0009be00 	call	10009be0 <printf>
	while (usb_ctl_val != 0x03)
10000cfc:	00000206 	br	10000d08 <main+0x9d4>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d00:	000729c0 	call	1000729c <UsbGetRetryCnt>
10000d04:	e0b90a0d 	sth	r2,-7128(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000d08:	e0b90a0b 	ldhu	r2,-7128(fp)
10000d0c:	108000d8 	cmpnei	r2,r2,3
10000d10:	103ffb1e 	bne	r2,zero,10000d00 <__alt_data_end+0xf8000d00>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10000d14:	010400b4 	movhi	r4,4098
10000d18:	21201904 	addi	r4,r4,-32668
10000d1c:	0009cd40 	call	10009cd4 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10000d20:	0006edc0 	call	10006edc <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d24:	00000306 	br	10000d34 <main+0xa00>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10000d28:	0006edc0 	call	10006edc <UsbGetReportDesc>
		usleep(10*1000);
10000d2c:	0109c404 	movi	r4,10000
10000d30:	0015b280 	call	10015b28 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d34:	010000c4 	movi	r4,3
10000d38:	00002c00 	call	100002c0 <IO_read>
10000d3c:	10bfffcc 	andi	r2,r2,65535
10000d40:	1080040c 	andi	r2,r2,16
10000d44:	103ff826 	beq	r2,zero,10000d28 <__alt_data_end+0xf8000d28>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000d48:	00072180 	call	10007218 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000d4c:	01000084 	movi	r4,2
10000d50:	01414184 	movi	r5,1286
10000d54:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d58:	0009883a 	mov	r4,zero
10000d5c:	00002c00 	call	100002c0 <IO_read>
10000d60:	10bfffcc 	andi	r2,r2,65535
10000d64:	010400b4 	movhi	r4,4098
10000d68:	21202d04 	addi	r4,r4,-32588
10000d6c:	100b883a 	mov	r5,r2
10000d70:	0009be00 	call	10009be0 <printf>

	IO_write(HPI_ADDR,0x0508);
10000d74:	01000084 	movi	r4,2
10000d78:	01414204 	movi	r5,1288
10000d7c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000d80:	0009883a 	mov	r4,zero
10000d84:	00002c00 	call	100002c0 <IO_read>
10000d88:	e0b90a0d 	sth	r2,-7128(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10000d8c:	e0b90a0b 	ldhu	r2,-7128(fp)
10000d90:	010400b4 	movhi	r4,4098
10000d94:	21203904 	addi	r4,r4,-32540
10000d98:	100b883a 	mov	r5,r2
10000d9c:	0009be00 	call	10009be0 <printf>
	while (usb_ctl_val != 0x03)
10000da0:	00000206 	br	10000dac <main+0xa78>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000da4:	000729c0 	call	1000729c <UsbGetRetryCnt>
10000da8:	e0b90a0d 	sth	r2,-7128(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000dac:	e0b90a0b 	ldhu	r2,-7128(fp)
10000db0:	108000d8 	cmpnei	r2,r2,3
10000db4:	103ffb1e 	bne	r2,zero,10000da4 <__alt_data_end+0xf8000da4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10000db8:	010400b4 	movhi	r4,4098
10000dbc:	21204504 	addi	r4,r4,-32492
10000dc0:	0009cd40 	call	10009cd4 <puts>
	 *
	 *
	 *
	 *
	 */
	int scene[5][16][21] = 	{
10000dc4:	008400b4 	movhi	r2,4098
10000dc8:	10a07104 	addi	r2,r2,-32316
10000dcc:	e0f96d04 	addi	r3,fp,-6732
10000dd0:	100b883a 	mov	r5,r2
10000dd4:	00869004 	movi	r2,6720
10000dd8:	1809883a 	mov	r4,r3
10000ddc:	100d883a 	mov	r6,r2
10000de0:	0009a7c0 	call	10009a7c <memcpy>
							{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2},
							{2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2}
							}
							};

	usleep(10000);
10000de4:	0109c404 	movi	r4,10000
10000de8:	0015b280 	call	10015b28 <usleep>
	*HEALTH = 3;
10000dec:	00806804 	movi	r2,416
10000df0:	00c000c4 	movi	r3,3
10000df4:	10c00015 	stw	r3,0(r2)
	*SAMUS_EN = 1;
10000df8:	0080e804 	movi	r2,928
10000dfc:	00c00044 	movi	r3,1
10000e00:	10c00005 	stb	r3,0(r2)
	*SAMUS_X = 150;
10000e04:	0080e404 	movi	r2,912
10000e08:	00c02584 	movi	r3,150
10000e0c:	10c00015 	stw	r3,0(r2)
	*SAMUS_Y = 400;
10000e10:	0080e004 	movi	r2,896
10000e14:	00c06404 	movi	r3,400
10000e18:	10c00015 	stw	r3,0(r2)
    *SCENE_SELECT = 3;
10000e1c:	00805404 	movi	r2,336
10000e20:	00c000c4 	movi	r3,3
10000e24:	10c00015 	stw	r3,0(r2)
	*LOSS_EN = False;
10000e28:	00806004 	movi	r2,384
10000e2c:	10000015 	stw	zero,0(r2)
	*TIT_EN = False;
10000e30:	00806404 	movi	r2,400
10000e34:	10000015 	stw	zero,0(r2)
	int SAMUS_BOT = 70;
10000e38:	00801184 	movi	r2,70
10000e3c:	e0b94715 	stw	r2,-6884(fp)
	int SAMUS_RIGHT = 35;
10000e40:	008008c4 	movi	r2,35
10000e44:	e0b94815 	stw	r2,-6880(fp)
	int samus_inv_counter = 0;
10000e48:	e0390b15 	stw	zero,-7124(fp)
	int samus_inv_counter_start = False;
10000e4c:	e0390c15 	stw	zero,-7120(fp)
	float y_inc = 0;
10000e50:	e0390d15 	stw	zero,-7116(fp)
	float gravity = .8;
10000e54:	008fd374 	movhi	r2,16205
10000e58:	10b33344 	addi	r2,r2,-13107
10000e5c:	e0b94915 	stw	r2,-6876(fp)
	float jump_height = 0;
10000e60:	e0390e15 	stw	zero,-7112(fp)
	float max_jump_height = 100;
10000e64:	0090b234 	movhi	r2,17096
10000e68:	e0b94a15 	stw	r2,-6872(fp)
	int grounded = False;
10000e6c:	e0390f15 	stw	zero,-7108(fp)
	int let_go = False;
10000e70:	e0391015 	stw	zero,-7104(fp)
	int has_control = True;
10000e74:	00800044 	movi	r2,1
10000e78:	e0b91115 	stw	r2,-7100(fp)
	int y_set = False;
10000e7c:	e0391215 	stw	zero,-7096(fp)
	int button_let_go = True;
10000e80:	00800044 	movi	r2,1
10000e84:	e0b91315 	stw	r2,-7092(fp)
	int bulinc = 12;
10000e88:	00800304 	movi	r2,12
10000e8c:	e0b94b15 	stw	r2,-6868(fp)
	int bul1Left = 0;
10000e90:	e0391415 	stw	zero,-7088(fp)
	int bul1Up = 0;
10000e94:	e0391515 	stw	zero,-7084(fp)
	int bul1start = 0;
10000e98:	e0391615 	stw	zero,-7080(fp)
	int bul2Left = 0;
10000e9c:	e0391715 	stw	zero,-7076(fp)
	int bul2Up = 0;
10000ea0:	e0391815 	stw	zero,-7072(fp)
	int bul2start = 0;
10000ea4:	e0391915 	stw	zero,-7068(fp)
	int bul3Left = 0;
10000ea8:	e0391a15 	stw	zero,-7064(fp)
	int bul3Up = 0;
10000eac:	e0391b15 	stw	zero,-7060(fp)
	int bul3start = 0;
10000eb0:	e0391c15 	stw	zero,-7056(fp)
	int bullet_en = True;
10000eb4:	00800044 	movi	r2,1
10000eb8:	e0b91d15 	stw	r2,-7052(fp)
	int bul_max_length = 90;
10000ebc:	00801684 	movi	r2,90
10000ec0:	e0b91e15 	stw	r2,-7048(fp)
	int sceneNum = 4;
10000ec4:	00800104 	movi	r2,4
10000ec8:	e0b91f15 	stw	r2,-7044(fp)
	int sceneStart = True;
10000ecc:	00800044 	movi	r2,1
10000ed0:	e0b92015 	stw	r2,-7040(fp)
	int scenVictory = False;
10000ed4:	e0394c15 	stw	zero,-6864(fp)
	int finalVictory = False;
10000ed8:	e0394d15 	stw	zero,-6860(fp)
	int scene3_dir = 0;
10000edc:	e0394e15 	stw	zero,-6856(fp)
	int scene4_dir = 0;
10000ee0:	e0394f15 	stw	zero,-6852(fp)

	int scene0_x = 40;
10000ee4:	00800a04 	movi	r2,40
10000ee8:	e0b95015 	stw	r2,-6848(fp)
	int scene0_y = 330;
10000eec:	00805284 	movi	r2,330
10000ef0:	e0b95115 	stw	r2,-6844(fp)
	int scene1_x = 40;
10000ef4:	00800a04 	movi	r2,40
10000ef8:	e0b95215 	stw	r2,-6840(fp)
	int scene1_y = 330;
10000efc:	00805284 	movi	r2,330
10000f00:	e0b95315 	stw	r2,-6836(fp)
	int scene2_x = 40;
10000f04:	00800a04 	movi	r2,40
10000f08:	e0b95415 	stw	r2,-6832(fp)
	int scene2_y = 270;
10000f0c:	00804384 	movi	r2,270
10000f10:	e0b95515 	stw	r2,-6828(fp)
	int scene3_x = 40;
10000f14:	00800a04 	movi	r2,40
10000f18:	e0b95615 	stw	r2,-6824(fp)
	int scene3_y = 110;
10000f1c:	00801b84 	movi	r2,110
10000f20:	e0b95715 	stw	r2,-6820(fp)
	int scene4_x = 40;
10000f24:	00800a04 	movi	r2,40
10000f28:	e0b95815 	stw	r2,-6816(fp)
	int scene4_y = 300;
10000f2c:	00804b04 	movi	r2,300
10000f30:	e0b95915 	stw	r2,-6812(fp)

	int monster1_1_x_scene0 = 420;
10000f34:	00806904 	movi	r2,420
10000f38:	e0b95a15 	stw	r2,-6808(fp)
	int monster1_1_y_scene0 = 239;
10000f3c:	00803bc4 	movi	r2,239
10000f40:	e0b95b15 	stw	r2,-6804(fp)
	int monster1_1_x_scene1 = 330;
10000f44:	00805284 	movi	r2,330
10000f48:	e0b95c15 	stw	r2,-6800(fp)
	int monster1_1_y_scene1 = 125;
10000f4c:	00801f44 	movi	r2,125
10000f50:	e0b95d15 	stw	r2,-6796(fp)
	int monster1_1_x_scene3 = 370;
10000f54:	00805c84 	movi	r2,370
10000f58:	e0b95e15 	stw	r2,-6792(fp)
	int monster1_1_y_scene3 = 215;
10000f5c:	008035c4 	movi	r2,215
10000f60:	e0b95f15 	stw	r2,-6788(fp)

	int monster2_1_x_scene2 = 80;
10000f64:	00801404 	movi	r2,80
10000f68:	e0b96015 	stw	r2,-6784(fp)
	int monster2_1_y_scene2 = 30;
10000f6c:	00800784 	movi	r2,30
10000f70:	e0b96115 	stw	r2,-6780(fp)
	int monster2_1_x_scene3 = 420;
10000f74:	00806904 	movi	r2,420
10000f78:	e0b96215 	stw	r2,-6776(fp)
	int monster2_1_y_scene3 = 30;
10000f7c:	00800784 	movi	r2,30
10000f80:	e0b96315 	stw	r2,-6772(fp)

	int monster3_1_x_scene1 = 420;
10000f84:	00806904 	movi	r2,420
10000f88:	e0b96415 	stw	r2,-6768(fp)
	int monster3_1_y_scene1 = 215;
10000f8c:	008035c4 	movi	r2,215
10000f90:	e0b96515 	stw	r2,-6764(fp)
	int monster3_1_x_scene2 = 420;
10000f94:	00806904 	movi	r2,420
10000f98:	e0b96615 	stw	r2,-6760(fp)
	int monster3_1_y_scene2 = 215;
10000f9c:	008035c4 	movi	r2,215
10000fa0:	e0b96715 	stw	r2,-6756(fp)
	int monster3_1_x_scene3 = 180;
10000fa4:	00802d04 	movi	r2,180
10000fa8:	e0b96815 	stw	r2,-6752(fp)
	int monster3_1_y_scene3 = 245;
10000fac:	00803d44 	movi	r2,245
10000fb0:	e0b96915 	stw	r2,-6748(fp)

	int monster1_1_x = 420;
10000fb4:	00806904 	movi	r2,420
10000fb8:	e0b92115 	stw	r2,-7036(fp)
	int monster1_1_y = 185;
10000fbc:	00802e44 	movi	r2,185
10000fc0:	e0b92215 	stw	r2,-7032(fp)
	int monster1_1_left = True;
10000fc4:	00800044 	movi	r2,1
10000fc8:	e0b92315 	stw	r2,-7028(fp)
	int monster1_1_health = 3;
10000fcc:	008000c4 	movi	r2,3
10000fd0:	e0b92415 	stw	r2,-7024(fp)
	int monster2_1_x = 220;
10000fd4:	00803704 	movi	r2,220
10000fd8:	e0b92515 	stw	r2,-7020(fp)
	int monster2_1_y = 55;
10000fdc:	00800dc4 	movi	r2,55
10000fe0:	e0b92615 	stw	r2,-7016(fp)
	int monster2_1_left = True;
10000fe4:	00800044 	movi	r2,1
10000fe8:	e0b92715 	stw	r2,-7012(fp)
	int monster2_jump_counter = 0;
10000fec:	e0392815 	stw	zero,-7008(fp)
	int monster2_grounded = True;
10000ff0:	00800044 	movi	r2,1
10000ff4:	e0b96a15 	stw	r2,-6744(fp)
	int mon2_at_top = True;
10000ff8:	00800044 	movi	r2,1
10000ffc:	e0b92915 	stw	r2,-7004(fp)
	int mon2_hit_bot = False;
10001000:	e0392a15 	stw	zero,-7000(fp)
	float mon_2_y_inc = 0;
10001004:	e0392b15 	stw	zero,-6996(fp)
	int monster2_1_health = 3;
10001008:	008000c4 	movi	r2,3
1000100c:	e0b92c15 	stw	r2,-6992(fp)
	int monster3_1_x = 220;
10001010:	00803704 	movi	r2,220
10001014:	e0b92d15 	stw	r2,-6988(fp)
	int monster3_1_y = 55;
10001018:	00800dc4 	movi	r2,55
1000101c:	e0b92e15 	stw	r2,-6984(fp)
	int monster3_1_left = False;
10001020:	e0392f15 	stw	zero,-6980(fp)
	int kraid_health = 0;
10001024:	e0393015 	stw	zero,-6976(fp)
	int kraid_move_counter = 0;
10001028:	e0393115 	stw	zero,-6972(fp)
	int kraid_move_left = True;
1000102c:	00800044 	movi	r2,1
10001030:	e0b93215 	stw	r2,-6968(fp)
	int kraid_blink = False;
10001034:	e0393315 	stw	zero,-6964(fp)
	int kraid_counter_max = 10;
10001038:	00800284 	movi	r2,10
1000103c:	e0b96b15 	stw	r2,-6740(fp)
	int kraid_kill_counter = 120;
10001040:	00801e04 	movi	r2,120
10001044:	e0b96c15 	stw	r2,-6736(fp)
	int kraid_counter = 0;
10001048:	e0393415 	stw	zero,-6960(fp)
	float nail_one_inc = 0;
1000104c:	e0393515 	stw	zero,-6956(fp)
	float nail_two_inc = 0;
10001050:	e0393615 	stw	zero,-6952(fp)
	int nail_counter = 100;
10001054:	00801904 	movi	r2,100
10001058:	e0b93715 	stw	r2,-6948(fp)
	int bullet_counter = 100;
1000105c:	00801904 	movi	r2,100
10001060:	e0b93815 	stw	r2,-6944(fp)
	int attack_counter_nail = 0;
10001064:	e0393915 	stw	zero,-6940(fp)
	int attack_counter_bullet = 0;
10001068:	e0393a15 	stw	zero,-6936(fp)
	int kraid_bul_start = 0;
1000106c:	e0393b15 	stw	zero,-6932(fp)
	int throw_dir_1 = 1;
10001070:	00800044 	movi	r2,1
10001074:	e0b93c15 	stw	r2,-6928(fp)
	int throw_dir_2 = 1;
10001078:	00800044 	movi	r2,1
1000107c:	e0b93d15 	stw	r2,-6924(fp)
	int attack_counter_nail_2 = 0;
10001080:	e0393e15 	stw	zero,-6920(fp)

	int moving_on = False;
10001084:	e0393f15 	stw	zero,-6916(fp)
	int god_mode = False;
10001088:	e0394015 	stw	zero,-6912(fp)
	int m_let_go = True;
1000108c:	00800044 	movi	r2,1
10001090:	e0b94115 	stw	r2,-6908(fp)
	int game_win = False;
10001094:	e0394215 	stw	zero,-6904(fp)

	while(1)
	{
		toggle++;
10001098:	e0b90a83 	ldbu	r2,-7126(fp)
1000109c:	10800044 	addi	r2,r2,1
100010a0:	e0b90a85 	stb	r2,-7126(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
100010a4:	01000084 	movi	r4,2
100010a8:	01414004 	movi	r5,1280
100010ac:	00002480 	call	10000248 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
100010b0:	0009883a 	mov	r4,zero
100010b4:	01414704 	movi	r5,1308
100010b8:	00002480 	call	10000248 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
100010bc:	e0b94603 	ldbu	r2,-6888(fp)
100010c0:	108003cc 	andi	r2,r2,15
100010c4:	0009883a 	mov	r4,zero
100010c8:	100b883a 	mov	r5,r2
100010cc:	00002480 	call	10000248 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
100010d0:	0009883a 	mov	r4,zero
100010d4:	0140a444 	movi	r5,657
100010d8:	00002480 	call	10000248 <IO_write>
		if(toggle%2)
100010dc:	e0b90a83 	ldbu	r2,-7126(fp)
100010e0:	1080004c 	andi	r2,r2,1
100010e4:	10803fcc 	andi	r2,r2,255
100010e8:	10000426 	beq	r2,zero,100010fc <main+0xdc8>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
100010ec:	0009883a 	mov	r4,zero
100010f0:	01400044 	movi	r5,1
100010f4:	00002480 	call	10000248 <IO_write>
100010f8:	00000306 	br	10001108 <main+0xdd4>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
100010fc:	0009883a 	mov	r4,zero
10001100:	01401044 	movi	r5,65
10001104:	00002480 	call	10000248 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10001108:	0009883a 	mov	r4,zero
1000110c:	014004c4 	movi	r5,19
10001110:	00002480 	call	10000248 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
10001114:	0009883a 	mov	r4,zero
10001118:	000b883a 	mov	r5,zero
1000111c:	00002480 	call	10000248 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001120:	01006c04 	movi	r4,432
10001124:	01414004 	movi	r5,1280
10001128:	00062540 	call	10006254 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000112c:	00002406 	br	100011c0 <main+0xe8c>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10001130:	01000084 	movi	r4,2
10001134:	01414004 	movi	r5,1280
10001138:	00002480 	call	10000248 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
1000113c:	0009883a 	mov	r4,zero
10001140:	01414704 	movi	r5,1308
10001144:	00002480 	call	10000248 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10001148:	e0b94603 	ldbu	r2,-6888(fp)
1000114c:	108003cc 	andi	r2,r2,15
10001150:	0009883a 	mov	r4,zero
10001154:	100b883a 	mov	r5,r2
10001158:	00002480 	call	10000248 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
1000115c:	0009883a 	mov	r4,zero
10001160:	0140a444 	movi	r5,657
10001164:	00002480 	call	10000248 <IO_write>
			if(toggle%2)
10001168:	e0b90a83 	ldbu	r2,-7126(fp)
1000116c:	1080004c 	andi	r2,r2,1
10001170:	10803fcc 	andi	r2,r2,255
10001174:	10000426 	beq	r2,zero,10001188 <main+0xe54>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10001178:	0009883a 	mov	r4,zero
1000117c:	01400044 	movi	r5,1
10001180:	00002480 	call	10000248 <IO_write>
10001184:	00000306 	br	10001194 <main+0xe60>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10001188:	0009883a 	mov	r4,zero
1000118c:	01401044 	movi	r5,65
10001190:	00002480 	call	10000248 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10001194:	0009883a 	mov	r4,zero
10001198:	014004c4 	movi	r5,19
1000119c:	00002480 	call	10000248 <IO_write>
			IO_write(HPI_DATA,0x0000);//
100011a0:	0009883a 	mov	r4,zero
100011a4:	000b883a 	mov	r5,zero
100011a8:	00002480 	call	10000248 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100011ac:	01006c04 	movi	r4,432
100011b0:	01414004 	movi	r5,1280
100011b4:	00062540 	call	10006254 <UsbWrite>
			usleep(10*1000);
100011b8:	0109c404 	movi	r4,10000
100011bc:	0015b280 	call	10015b28 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100011c0:	010000c4 	movi	r4,3
100011c4:	00002c00 	call	100002c0 <IO_read>
100011c8:	10bfffcc 	andi	r2,r2,65535
100011cc:	1080040c 	andi	r2,r2,16
100011d0:	103fd726 	beq	r2,zero,10001130 <__alt_data_end+0xf8001130>
			usleep(10*1000);
		}//end while



		usb_ctl_val = UsbWaitTDListDone();
100011d4:	00072180 	call	10007218 <UsbWaitTDListDone>
100011d8:	e0b90a0d 	sth	r2,-7128(fp)

		// packet starts from 0x051c, reading third byte
		// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
		IO_write(HPI_ADDR,0x051e); //the start address
100011dc:	01000084 	movi	r4,2
100011e0:	01414784 	movi	r5,1310
100011e4:	00002480 	call	10000248 <IO_write>
		keycode = IO_read(HPI_DATA);
100011e8:	0009883a 	mov	r4,zero
100011ec:	00002c00 	call	100002c0 <IO_read>
100011f0:	10bfffcc 	andi	r2,r2,65535
100011f4:	e0b94415 	stw	r2,-6896(fp)
		IOWR(KEYCODE_BASE, 0, keycode & 0xff);
100011f8:	e0b94417 	ldw	r2,-6896(fp)
100011fc:	10c03fcc 	andi	r3,r2,255
10001200:	0080f004 	movi	r2,960
10001204:	10c00035 	stwio	r3,0(r2)


		usleep(200);//usleep(5000);
10001208:	01003204 	movi	r4,200
1000120c:	0015b280 	call	10015b28 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10001210:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001214:	10bfffcc 	andi	r2,r2,65535
10001218:	1009883a 	mov	r4,r2
1000121c:	00062a80 	call	100062a8 <UsbRead>
10001220:	e0b90a0d 	sth	r2,-7128(fp)

		if(!(usb_ctl_val & no_device))
10001224:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001228:	e0f90a0b 	ldhu	r3,-7128(fp)
1000122c:	1884703a 	and	r2,r3,r2
10001230:	10bfffcc 	andi	r2,r2,65535
10001234:	1000201e 	bne	r2,zero,100012b8 <main+0xf84>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10001238:	e0390ac5 	stb	zero,-7125(fp)
1000123c:	00001006 	br	10001280 <main+0xf4c>
			{
				usleep(5*1000);
10001240:	0104e204 	movi	r4,5000
10001244:	0015b280 	call	10015b28 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
10001248:	d0a6cb0b 	ldhu	r2,-25812(gp)
1000124c:	10bfffcc 	andi	r2,r2,65535
10001250:	1009883a 	mov	r4,r2
10001254:	00062a80 	call	100062a8 <UsbRead>
10001258:	e0b90a0d 	sth	r2,-7128(fp)
				if(usb_ctl_val & no_device) break;
1000125c:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001260:	e0f90a0b 	ldhu	r3,-7128(fp)
10001264:	1884703a 	and	r2,r3,r2
10001268:	10bfffcc 	andi	r2,r2,65535
1000126c:	10000126 	beq	r2,zero,10001274 <main+0xf40>
10001270:	00000606 	br	1000128c <main+0xf58>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10001274:	e0b90ac3 	ldbu	r2,-7125(fp)
10001278:	10800044 	addi	r2,r2,1
1000127c:	e0b90ac5 	stb	r2,-7125(fp)
10001280:	e0b90ac3 	ldbu	r2,-7125(fp)
10001284:	108001f0 	cmpltui	r2,r2,7
10001288:	103fed1e 	bne	r2,zero,10001240 <__alt_data_end+0xf8001240>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
			}
			if(!(usb_ctl_val & no_device))
1000128c:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001290:	e0f90a0b 	ldhu	r3,-7128(fp)
10001294:	1884703a 	and	r2,r3,r2
10001298:	10bfffcc 	andi	r2,r2,65535
1000129c:	1000061e 	bne	r2,zero,100012b8 <main+0xf84>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
100012a0:	010400b4 	movhi	r4,4098
100012a4:	21205904 	addi	r4,r4,-32412
100012a8:	0009cd40 	call	10009cd4 <puts>
				printf("[INFO]: please insert again!!! \n");
100012ac:	010400b4 	movhi	r4,4098
100012b0:	21206404 	addi	r4,r4,-32368
100012b4:	0009cd40 	call	10009cd4 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
100012b8:	00001d06 	br	10001330 <main+0xffc>
		{

			usb_ctl_val = UsbRead(ctl_reg);
100012bc:	d0a6cb0b 	ldhu	r2,-25812(gp)
100012c0:	10bfffcc 	andi	r2,r2,65535
100012c4:	1009883a 	mov	r4,r2
100012c8:	00062a80 	call	100062a8 <UsbRead>
100012cc:	e0b90a0d 	sth	r2,-7128(fp)
			usleep(5*1000);
100012d0:	0104e204 	movi	r4,5000
100012d4:	0015b280 	call	10015b28 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100012d8:	d0a6cb0b 	ldhu	r2,-25812(gp)
100012dc:	10bfffcc 	andi	r2,r2,65535
100012e0:	1009883a 	mov	r4,r2
100012e4:	00062a80 	call	100062a8 <UsbRead>
100012e8:	e0b90a0d 	sth	r2,-7128(fp)
			usleep(5*1000);
100012ec:	0104e204 	movi	r4,5000
100012f0:	0015b280 	call	10015b28 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100012f4:	d0a6cb0b 	ldhu	r2,-25812(gp)
100012f8:	10bfffcc 	andi	r2,r2,65535
100012fc:	1009883a 	mov	r4,r2
10001300:	00062a80 	call	100062a8 <UsbRead>
10001304:	e0b90a0d 	sth	r2,-7128(fp)
			usleep(5*1000);
10001308:	0104e204 	movi	r4,5000
1000130c:	0015b280 	call	10015b28 <usleep>

			if(usb_ctl_val & no_device)
10001310:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001314:	e0f90a0b 	ldhu	r3,-7128(fp)
10001318:	1884703a 	and	r2,r3,r2
1000131c:	10bfffcc 	andi	r2,r2,65535
10001320:	10000126 	beq	r2,zero,10001328 <main+0xff4>
				goto USB_HOT_PLUG;
10001324:	003c1106 	br	1000036c <__alt_data_end+0xf800036c>

			usleep(200);
10001328:	01003204 	movi	r4,200
1000132c:	0015b280 	call	10015b28 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
10001330:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001334:	e0f90a0b 	ldhu	r3,-7128(fp)
10001338:	1884703a 	and	r2,r3,r2
1000133c:	10bfffcc 	andi	r2,r2,65535
10001340:	103fde26 	beq	r2,zero,100012bc <__alt_data_end+0xf80012bc>
			usleep(200);
		}


    // GAME START
	if(*HEALTH == 0){
10001344:	00806804 	movi	r2,416
10001348:	10800017 	ldw	r2,0(r2)
1000134c:	10000f1e 	bne	r2,zero,1000138c <main+0x1058>
		if (keycode == 0x15){
10001350:	e0b94417 	ldw	r2,-6896(fp)
10001354:	10800558 	cmpnei	r2,r2,21
10001358:	1000081e 	bne	r2,zero,1000137c <main+0x1048>
			sceneStart = True;
1000135c:	00800044 	movi	r2,1
10001360:	e0b92015 	stw	r2,-7040(fp)
			*HEALTH = 3;
10001364:	00806804 	movi	r2,416
10001368:	00c000c4 	movi	r3,3
1000136c:	10c00015 	stw	r3,0(r2)
			*LOSS_EN = False;
10001370:	00806004 	movi	r2,384
10001374:	10000015 	stw	zero,0(r2)
		}
		else{
			*LOSS_EN = True;
		}
		continue;
10001378:	0013b506 	br	10006250 <main+0x5f1c>
			sceneStart = True;
			*HEALTH = 3;
			*LOSS_EN = False;
		}
		else{
			*LOSS_EN = True;
1000137c:	00806004 	movi	r2,384
10001380:	00c00044 	movi	r3,1
10001384:	10c00015 	stw	r3,0(r2)
		}
		continue;
10001388:	0013b106 	br	10006250 <main+0x5f1c>
	}
	if(keycode==0x17 || sceneNum == -1){
1000138c:	e0b94417 	ldw	r2,-6896(fp)
10001390:	108005e0 	cmpeqi	r2,r2,23
10001394:	1000031e 	bne	r2,zero,100013a4 <main+0x1070>
10001398:	e0b91f17 	ldw	r2,-7044(fp)
1000139c:	10bfffd8 	cmpnei	r2,r2,-1
100013a0:	1000091e 	bne	r2,zero,100013c8 <main+0x1094>
		*TIT_EN = True;
100013a4:	00806404 	movi	r2,400
100013a8:	00c00044 	movi	r3,1
100013ac:	10c00015 	stw	r3,0(r2)
		if(keycode == 0x2c){
100013b0:	e0b94417 	ldw	r2,-6896(fp)
100013b4:	10800b18 	cmpnei	r2,r2,44
100013b8:	1000021e 	bne	r2,zero,100013c4 <main+0x1090>
			sceneNum = 0;
100013bc:	e0391f15 	stw	zero,-7044(fp)
		}
		continue;
100013c0:	0013a306 	br	10006250 <main+0x5f1c>
100013c4:	0013a206 	br	10006250 <main+0x5f1c>
	}
	else{
		*TIT_EN = False;
100013c8:	00806404 	movi	r2,400
100013cc:	10000015 	stw	zero,0(r2)
	}
	if(game_win == True){
100013d0:	e0b94217 	ldw	r2,-6904(fp)
100013d4:	10800058 	cmpnei	r2,r2,1
100013d8:	1000041e 	bne	r2,zero,100013ec <main+0x10b8>
		*WIN_EN = True;
100013dc:	00805c04 	movi	r2,368
100013e0:	00c00044 	movi	r3,1
100013e4:	10c00015 	stw	r3,0(r2)
100013e8:	00000206 	br	100013f4 <main+0x10c0>
	}
	else{
		*WIN_EN = False;
100013ec:	00805c04 	movi	r2,368
100013f0:	10000015 	stw	zero,0(r2)
	}

	if(keycode == 0x10 && m_let_go == True){
100013f4:	e0b94417 	ldw	r2,-6896(fp)
100013f8:	10800418 	cmpnei	r2,r2,16
100013fc:	10000b1e 	bne	r2,zero,1000142c <main+0x10f8>
10001400:	e0b94117 	ldw	r2,-6908(fp)
10001404:	10800058 	cmpnei	r2,r2,1
10001408:	1000081e 	bne	r2,zero,1000142c <main+0x10f8>
		if(god_mode == True){
1000140c:	e0b94017 	ldw	r2,-6912(fp)
10001410:	10800058 	cmpnei	r2,r2,1
10001414:	1000021e 	bne	r2,zero,10001420 <main+0x10ec>
			god_mode = False;
10001418:	e0394015 	stw	zero,-6912(fp)
1000141c:	00000206 	br	10001428 <main+0x10f4>
		}
		else{
			god_mode = True;
10001420:	00800044 	movi	r2,1
10001424:	e0b94015 	stw	r2,-6912(fp)
		}
		m_let_go = False;
10001428:	e0394115 	stw	zero,-6908(fp)
	}

	if(((keycode&0x0000FF)!=0x10 && (keycode&0x00FF00)>>8 != 0x10 && (keycode&0xFF0000)>>16 != 0x10) && m_let_go == False){
1000142c:	e0b94417 	ldw	r2,-6896(fp)
10001430:	10803fcc 	andi	r2,r2,255
10001434:	10800420 	cmpeqi	r2,r2,16
10001438:	10000e1e 	bne	r2,zero,10001474 <main+0x1140>
1000143c:	e0b94417 	ldw	r2,-6896(fp)
10001440:	10bfc00c 	andi	r2,r2,65280
10001444:	1005d23a 	srai	r2,r2,8
10001448:	10800420 	cmpeqi	r2,r2,16
1000144c:	1000091e 	bne	r2,zero,10001474 <main+0x1140>
10001450:	e0b94417 	ldw	r2,-6896(fp)
10001454:	10803fec 	andhi	r2,r2,255
10001458:	1005d43a 	srai	r2,r2,16
1000145c:	10800420 	cmpeqi	r2,r2,16
10001460:	1000041e 	bne	r2,zero,10001474 <main+0x1140>
10001464:	e0b94117 	ldw	r2,-6908(fp)
10001468:	1000021e 	bne	r2,zero,10001474 <main+0x1140>
		m_let_go = True;
1000146c:	00800044 	movi	r2,1
10001470:	e0b94115 	stw	r2,-6908(fp)
	}

	//Scene Init
	if(sceneStart == True){
10001474:	e0b92017 	ldw	r2,-7040(fp)
10001478:	10800058 	cmpnei	r2,r2,1
1000147c:	1000ec1e 	bne	r2,zero,10001830 <main+0x14fc>
		if(sceneNum == 0){
10001480:	e0b91f17 	ldw	r2,-7044(fp)
10001484:	1000241e 	bne	r2,zero,10001518 <main+0x11e4>
		    *SCENE_SELECT = 0;
10001488:	00805404 	movi	r2,336
1000148c:	10000015 	stw	zero,0(r2)
			moving_on = False;
10001490:	e0393f15 	stw	zero,-6916(fp)
			*KRAID_G_EN = False;
10001494:	00804004 	movi	r2,256
10001498:	10000015 	stw	zero,0(r2)
			*KRAID_R_EN = False;
1000149c:	00803c04 	movi	r2,240
100014a0:	10000015 	stw	zero,0(r2)
			*KRAID_N_EN = False;
100014a4:	00803804 	movi	r2,224
100014a8:	10000015 	stw	zero,0(r2)

			*SAMUS_EN = 1;
100014ac:	0080e804 	movi	r2,928
100014b0:	00c00044 	movi	r3,1
100014b4:	10c00005 	stb	r3,0(r2)
			*SAMUS_X = scene0_x;
100014b8:	0080e404 	movi	r2,912
100014bc:	e0f95017 	ldw	r3,-6848(fp)
100014c0:	10c00015 	stw	r3,0(r2)
			*SAMUS_Y = scene0_y;
100014c4:	0080e004 	movi	r2,896
100014c8:	e0f95117 	ldw	r3,-6844(fp)
100014cc:	10c00015 	stw	r3,0(r2)
			*SAMUS_DIR = 0;
100014d0:	00805804 	movi	r2,352
100014d4:	10000005 	stb	zero,0(r2)

			monster1_1_x = monster1_1_x_scene0;
100014d8:	e0b95a17 	ldw	r2,-6808(fp)
100014dc:	e0b92115 	stw	r2,-7036(fp)
			monster1_1_y = monster1_1_y_scene0;
100014e0:	e0b95b17 	ldw	r2,-6804(fp)
100014e4:	e0b92215 	stw	r2,-7032(fp)
			*MON1_EN = 1;
100014e8:	0080d404 	movi	r2,848
100014ec:	00c00044 	movi	r3,1
100014f0:	10c00005 	stb	r3,0(r2)
			*MON2_EN = 0;
100014f4:	0080c804 	movi	r2,800
100014f8:	10000005 	stb	zero,0(r2)
			*MON3_EN = 0;
100014fc:	0080bc04 	movi	r2,752
10001500:	10000005 	stb	zero,0(r2)

			*KRAID_THROW_EN = False;
10001504:	00803004 	movi	r2,192
10001508:	10000015 	stw	zero,0(r2)
			*KRAID_THROW_2_EN = False;
1000150c:	00801004 	movi	r2,64
10001510:	10000015 	stw	zero,0(r2)
10001514:	0000bd06 	br	1000180c <main+0x14d8>
		}
		else if(sceneNum == 1){
10001518:	e0b91f17 	ldw	r2,-7044(fp)
1000151c:	10800058 	cmpnei	r2,r2,1
10001520:	1000281e 	bne	r2,zero,100015c4 <main+0x1290>
		    *SCENE_SELECT = 1;
10001524:	00805404 	movi	r2,336
10001528:	00c00044 	movi	r3,1
1000152c:	10c00015 	stw	r3,0(r2)
			moving_on = False;
10001530:	e0393f15 	stw	zero,-6916(fp)
			*KRAID_G_EN = False;
10001534:	00804004 	movi	r2,256
10001538:	10000015 	stw	zero,0(r2)
			*KRAID_R_EN = False;
1000153c:	00803c04 	movi	r2,240
10001540:	10000015 	stw	zero,0(r2)
			*KRAID_N_EN = False;
10001544:	00803804 	movi	r2,224
10001548:	10000015 	stw	zero,0(r2)

			*SAMUS_EN = 1;
1000154c:	0080e804 	movi	r2,928
10001550:	00c00044 	movi	r3,1
10001554:	10c00005 	stb	r3,0(r2)
			*SAMUS_X = scene1_x;
10001558:	0080e404 	movi	r2,912
1000155c:	e0f95217 	ldw	r3,-6840(fp)
10001560:	10c00015 	stw	r3,0(r2)
			*SAMUS_Y = scene1_y;
10001564:	0080e004 	movi	r2,896
10001568:	e0f95317 	ldw	r3,-6836(fp)
1000156c:	10c00015 	stw	r3,0(r2)
			*SAMUS_DIR = 0;
10001570:	00805804 	movi	r2,352
10001574:	10000005 	stb	zero,0(r2)


			monster1_1_x = monster1_1_x_scene1;
10001578:	e0b95c17 	ldw	r2,-6800(fp)
1000157c:	e0b92115 	stw	r2,-7036(fp)
			monster1_1_y = monster1_1_y_scene1;
10001580:	e0b95d17 	ldw	r2,-6796(fp)
10001584:	e0b92215 	stw	r2,-7032(fp)

			monster3_1_x = monster3_1_x_scene1;
10001588:	e0b96417 	ldw	r2,-6768(fp)
1000158c:	e0b92d15 	stw	r2,-6988(fp)
			monster3_1_y = monster3_1_y_scene1;
10001590:	e0b96517 	ldw	r2,-6764(fp)
10001594:	e0b92e15 	stw	r2,-6984(fp)

			monster1_1_health = 3;
10001598:	008000c4 	movi	r2,3
1000159c:	e0b92415 	stw	r2,-7024(fp)

			*MON1_EN = 1;
100015a0:	0080d404 	movi	r2,848
100015a4:	00c00044 	movi	r3,1
100015a8:	10c00005 	stb	r3,0(r2)
			*MON2_EN = 0;
100015ac:	0080c804 	movi	r2,800
100015b0:	10000005 	stb	zero,0(r2)
			*MON3_EN = 1;
100015b4:	0080bc04 	movi	r2,752
100015b8:	00c00044 	movi	r3,1
100015bc:	10c00005 	stb	r3,0(r2)
100015c0:	00009206 	br	1000180c <main+0x14d8>

		}
		else if(sceneNum == 2){
100015c4:	e0b91f17 	ldw	r2,-7044(fp)
100015c8:	10800098 	cmpnei	r2,r2,2
100015cc:	1000281e 	bne	r2,zero,10001670 <main+0x133c>
		    *SCENE_SELECT = 2;
100015d0:	00805404 	movi	r2,336
100015d4:	00c00084 	movi	r3,2
100015d8:	10c00015 	stw	r3,0(r2)
			moving_on = False;
100015dc:	e0393f15 	stw	zero,-6916(fp)
			*KRAID_G_EN = False;
100015e0:	00804004 	movi	r2,256
100015e4:	10000015 	stw	zero,0(r2)
			*KRAID_R_EN = False;
100015e8:	00803c04 	movi	r2,240
100015ec:	10000015 	stw	zero,0(r2)
			*KRAID_N_EN = False;
100015f0:	00803804 	movi	r2,224
100015f4:	10000015 	stw	zero,0(r2)

			*SAMUS_EN = 1;
100015f8:	0080e804 	movi	r2,928
100015fc:	00c00044 	movi	r3,1
10001600:	10c00005 	stb	r3,0(r2)
			*SAMUS_X = scene2_x;
10001604:	0080e404 	movi	r2,912
10001608:	e0f95417 	ldw	r3,-6832(fp)
1000160c:	10c00015 	stw	r3,0(r2)
			*SAMUS_Y = scene2_y;
10001610:	0080e004 	movi	r2,896
10001614:	e0f95517 	ldw	r3,-6828(fp)
10001618:	10c00015 	stw	r3,0(r2)
			*SAMUS_DIR = 0;
1000161c:	00805804 	movi	r2,352
10001620:	10000005 	stb	zero,0(r2)

			monster2_1_x = monster2_1_x_scene2;
10001624:	e0b96017 	ldw	r2,-6784(fp)
10001628:	e0b92515 	stw	r2,-7020(fp)
			monster2_1_y = monster2_1_y_scene2;
1000162c:	e0b96117 	ldw	r2,-6780(fp)
10001630:	e0b92615 	stw	r2,-7016(fp)

			monster3_1_x = monster3_1_x_scene2;
10001634:	e0b96617 	ldw	r2,-6760(fp)
10001638:	e0b92d15 	stw	r2,-6988(fp)
			monster3_1_y = monster3_1_y_scene2;
1000163c:	e0b96717 	ldw	r2,-6756(fp)
10001640:	e0b92e15 	stw	r2,-6984(fp)

			monster2_1_health = 3;
10001644:	008000c4 	movi	r2,3
10001648:	e0b92c15 	stw	r2,-6992(fp)

			*MON1_EN = 0;
1000164c:	0080d404 	movi	r2,848
10001650:	10000005 	stb	zero,0(r2)
			*MON2_EN = 1;
10001654:	0080c804 	movi	r2,800
10001658:	00c00044 	movi	r3,1
1000165c:	10c00005 	stb	r3,0(r2)
			*MON3_EN = 1;
10001660:	0080bc04 	movi	r2,752
10001664:	00c00044 	movi	r3,1
10001668:	10c00005 	stb	r3,0(r2)
1000166c:	00006706 	br	1000180c <main+0x14d8>

		}
		else if(sceneNum == 3){
10001670:	e0b91f17 	ldw	r2,-7044(fp)
10001674:	108000d8 	cmpnei	r2,r2,3
10001678:	1000341e 	bne	r2,zero,1000174c <main+0x1418>
			moving_on = False;
1000167c:	e0393f15 	stw	zero,-6916(fp)
			*SAMUS_EN = 1;
10001680:	0080e804 	movi	r2,928
10001684:	00c00044 	movi	r3,1
10001688:	10c00005 	stb	r3,0(r2)
			*SCENE_SELECT = 3;
1000168c:	00805404 	movi	r2,336
10001690:	00c000c4 	movi	r3,3
10001694:	10c00015 	stw	r3,0(r2)
			*SAMUS_X = scene3_x;
10001698:	0080e404 	movi	r2,912
1000169c:	e0f95617 	ldw	r3,-6824(fp)
100016a0:	10c00015 	stw	r3,0(r2)
			*SAMUS_Y = scene3_y;
100016a4:	0080e004 	movi	r2,896
100016a8:	e0f95717 	ldw	r3,-6820(fp)
100016ac:	10c00015 	stw	r3,0(r2)
			*SAMUS_DIR = scene3_dir;
100016b0:	00805804 	movi	r2,352
100016b4:	e0f94e17 	ldw	r3,-6856(fp)
100016b8:	10c00005 	stb	r3,0(r2)
			monster1_1_x = monster1_1_x_scene3;
100016bc:	e0b95e17 	ldw	r2,-6792(fp)
100016c0:	e0b92115 	stw	r2,-7036(fp)
			monster1_1_y = monster1_1_y_scene3;
100016c4:	e0b95f17 	ldw	r2,-6788(fp)
100016c8:	e0b92215 	stw	r2,-7032(fp)
			monster1_1_health = 3;
100016cc:	008000c4 	movi	r2,3
100016d0:	e0b92415 	stw	r2,-7024(fp)
			monster2_1_x = monster2_1_x_scene3;
100016d4:	e0b96217 	ldw	r2,-6776(fp)
100016d8:	e0b92515 	stw	r2,-7020(fp)
			monster2_1_y = monster2_1_y_scene3;
100016dc:	e0b96317 	ldw	r2,-6772(fp)
100016e0:	e0b92615 	stw	r2,-7016(fp)
			monster2_1_health = 3;
100016e4:	008000c4 	movi	r2,3
100016e8:	e0b92c15 	stw	r2,-6992(fp)
			mon2_at_top = True;
100016ec:	00800044 	movi	r2,1
100016f0:	e0b92915 	stw	r2,-7004(fp)
			monster3_1_x = monster3_1_x_scene3;
100016f4:	e0b96817 	ldw	r2,-6752(fp)
100016f8:	e0b92d15 	stw	r2,-6988(fp)
			monster3_1_y = monster3_1_y_scene3;
100016fc:	e0b96917 	ldw	r2,-6748(fp)
10001700:	e0b92e15 	stw	r2,-6984(fp)
			*MON1_EN = 1;
10001704:	0080d404 	movi	r2,848
10001708:	00c00044 	movi	r3,1
1000170c:	10c00005 	stb	r3,0(r2)
			*MON2_EN = 1;
10001710:	0080c804 	movi	r2,800
10001714:	00c00044 	movi	r3,1
10001718:	10c00005 	stb	r3,0(r2)
			*MON3_EN = 1;
1000171c:	0080bc04 	movi	r2,752
10001720:	00c00044 	movi	r3,1
10001724:	10c00005 	stb	r3,0(r2)
			has_control = True;
10001728:	00800044 	movi	r2,1
1000172c:	e0b91115 	stw	r2,-7100(fp)
			*KRAID_G_EN = False;
10001730:	00804004 	movi	r2,256
10001734:	10000015 	stw	zero,0(r2)
			*KRAID_R_EN = False;
10001738:	00803c04 	movi	r2,240
1000173c:	10000015 	stw	zero,0(r2)
			*KRAID_N_EN = False;
10001740:	00803804 	movi	r2,224
10001744:	10000015 	stw	zero,0(r2)
10001748:	00003006 	br	1000180c <main+0x14d8>
		}
		else if(sceneNum == 4){
1000174c:	e0b91f17 	ldw	r2,-7044(fp)
10001750:	10800118 	cmpnei	r2,r2,4
10001754:	10002d1e 	bne	r2,zero,1000180c <main+0x14d8>
			moving_on = False;
10001758:	e0393f15 	stw	zero,-6916(fp)
			*SAMUS_EN = 1;
1000175c:	0080e804 	movi	r2,928
10001760:	00c00044 	movi	r3,1
10001764:	10c00005 	stb	r3,0(r2)
			*SCENE_SELECT = 4;
10001768:	00805404 	movi	r2,336
1000176c:	00c00104 	movi	r3,4
10001770:	10c00015 	stw	r3,0(r2)
			*SAMUS_X = scene4_x;
10001774:	0080e404 	movi	r2,912
10001778:	e0f95817 	ldw	r3,-6816(fp)
1000177c:	10c00015 	stw	r3,0(r2)
			*SAMUS_Y = scene4_y;
10001780:	0080e004 	movi	r2,896
10001784:	e0f95917 	ldw	r3,-6812(fp)
10001788:	10c00015 	stw	r3,0(r2)
			*SAMUS_DIR = scene4_dir;
1000178c:	00805804 	movi	r2,352
10001790:	e0f94f17 	ldw	r3,-6852(fp)
10001794:	10c00005 	stb	r3,0(r2)
			*MON1_EN = 0;
10001798:	0080d404 	movi	r2,848
1000179c:	10000005 	stb	zero,0(r2)
			*MON2_EN = 0;
100017a0:	0080c804 	movi	r2,800
100017a4:	10000005 	stb	zero,0(r2)
			*MON3_EN = 0;
100017a8:	0080bc04 	movi	r2,752
100017ac:	10000005 	stb	zero,0(r2)
			*KRAID_X = 400;
100017b0:	00802804 	movi	r2,160
100017b4:	00c06404 	movi	r3,400
100017b8:	10c00015 	stw	r3,0(r2)
			*KRAID_Y = 330;
100017bc:	00802404 	movi	r2,144
100017c0:	00c05284 	movi	r3,330
100017c4:	10c00015 	stw	r3,0(r2)
			*KRAID_R_EN = True;
100017c8:	00803c04 	movi	r2,240
100017cc:	00c00044 	movi	r3,1
100017d0:	10c00015 	stw	r3,0(r2)
			*KRAID_DIR = 1;
100017d4:	00804404 	movi	r2,272
100017d8:	00c00044 	movi	r3,1
100017dc:	10c00015 	stw	r3,0(r2)
			kraid_health = 15;
100017e0:	008003c4 	movi	r2,15
100017e4:	e0b93015 	stw	r2,-6976(fp)
			has_control = True;
100017e8:	00800044 	movi	r2,1
100017ec:	e0b91115 	stw	r2,-7100(fp)
			kraid_move_counter = 100;
100017f0:	00801904 	movi	r2,100
100017f4:	e0b93115 	stw	r2,-6972(fp)
			kraid_move_left = True;
100017f8:	00800044 	movi	r2,1
100017fc:	e0b93215 	stw	r2,-6968(fp)
			attack_counter_nail_2=50;
10001800:	00800c84 	movi	r2,50
10001804:	e0b93e15 	stw	r2,-6920(fp)
			attack_counter_nail=0;
10001808:	e0393915 	stw	zero,-6940(fp)
		}
		has_control = True;
1000180c:	00800044 	movi	r2,1
10001810:	e0b91115 	stw	r2,-7100(fp)
		sceneStart = False;
10001814:	e0392015 	stw	zero,-7040(fp)
		*EXP1_EN = 0;
10001818:	0080b004 	movi	r2,704
1000181c:	10000015 	stw	zero,0(r2)
		*EXP2_EN = 0;
10001820:	0080a404 	movi	r2,656
10001824:	10000015 	stw	zero,0(r2)
		*EXP3_EN = 0;
10001828:	00809804 	movi	r2,608
1000182c:	10000015 	stw	zero,0(r2)
	}


    //SAMUS MOVEMENT
    //Move Right
    if(((keycode&0x0000FF)==0x1A || (keycode&0x00FF00)>>8 == 0x1A || (keycode&0xFF0000)>>16 == 0x1A) && has_control == True){
10001830:	e0b94417 	ldw	r2,-6896(fp)
10001834:	10803fcc 	andi	r2,r2,255
10001838:	108006a0 	cmpeqi	r2,r2,26
1000183c:	10000a1e 	bne	r2,zero,10001868 <main+0x1534>
10001840:	e0b94417 	ldw	r2,-6896(fp)
10001844:	10bfc00c 	andi	r2,r2,65280
10001848:	1005d23a 	srai	r2,r2,8
1000184c:	108006a0 	cmpeqi	r2,r2,26
10001850:	1000051e 	bne	r2,zero,10001868 <main+0x1534>
10001854:	e0b94417 	ldw	r2,-6896(fp)
10001858:	10803fec 	andhi	r2,r2,255
1000185c:	1005d43a 	srai	r2,r2,16
10001860:	10800698 	cmpnei	r2,r2,26
10001864:	1000071e 	bne	r2,zero,10001884 <main+0x1550>
10001868:	e0b91117 	ldw	r2,-7100(fp)
1000186c:	10800058 	cmpnei	r2,r2,1
10001870:	1000041e 	bne	r2,zero,10001884 <main+0x1550>
    	*SAMUS_UP = 1;
10001874:	00805004 	movi	r2,320
10001878:	00c00044 	movi	r3,1
1000187c:	10c00005 	stb	r3,0(r2)
10001880:	00000206 	br	1000188c <main+0x1558>
    }
    else{
    	*SAMUS_UP = 0;
10001884:	00805004 	movi	r2,320
10001888:	10000005 	stb	zero,0(r2)
    }
    //Move right
    if(((keycode&0x0000FF)==7 || (keycode&0x00FF00)>>8 == 7 || (keycode&0xFF0000)>>16 == 7) && has_control == True){
1000188c:	e0b94417 	ldw	r2,-6896(fp)
10001890:	10803fcc 	andi	r2,r2,255
10001894:	108001e0 	cmpeqi	r2,r2,7
10001898:	10000a1e 	bne	r2,zero,100018c4 <main+0x1590>
1000189c:	e0b94417 	ldw	r2,-6896(fp)
100018a0:	10bfc00c 	andi	r2,r2,65280
100018a4:	1005d23a 	srai	r2,r2,8
100018a8:	108001e0 	cmpeqi	r2,r2,7
100018ac:	1000051e 	bne	r2,zero,100018c4 <main+0x1590>
100018b0:	e0b94417 	ldw	r2,-6896(fp)
100018b4:	10803fec 	andhi	r2,r2,255
100018b8:	1005d43a 	srai	r2,r2,16
100018bc:	108001d8 	cmpnei	r2,r2,7
100018c0:	10008e1e 	bne	r2,zero,10001afc <main+0x17c8>
100018c4:	e0b91117 	ldw	r2,-7100(fp)
100018c8:	10800058 	cmpnei	r2,r2,1
100018cc:	10008b1e 	bne	r2,zero,10001afc <main+0x17c8>
    	if(scene[sceneNum][(*SAMUS_Y+10)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+25)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+50)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+70)/30][(*SAMUS_X+40)/30]==0){
100018d0:	0080e004 	movi	r2,896
100018d4:	10800017 	ldw	r2,0(r2)
100018d8:	10800284 	addi	r2,r2,10
100018dc:	1009883a 	mov	r4,r2
100018e0:	01400784 	movi	r5,30
100018e4:	00074040 	call	10007404 <__divsi3>
100018e8:	1023883a 	mov	r17,r2
100018ec:	0080e404 	movi	r2,912
100018f0:	10800017 	ldw	r2,0(r2)
100018f4:	10800a04 	addi	r2,r2,40
100018f8:	1009883a 	mov	r4,r2
100018fc:	01400784 	movi	r5,30
10001900:	00074040 	call	10007404 <__divsi3>
10001904:	1021883a 	mov	r16,r2
10001908:	e4b91f17 	ldw	r18,-7044(fp)
1000190c:	8809883a 	mov	r4,r17
10001910:	01400544 	movi	r5,21
10001914:	00074c40 	call	100074c4 <__mulsi3>
10001918:	1023883a 	mov	r17,r2
1000191c:	9009883a 	mov	r4,r18
10001920:	01405404 	movi	r5,336
10001924:	00074c40 	call	100074c4 <__mulsi3>
10001928:	8885883a 	add	r2,r17,r2
1000192c:	1405883a 	add	r2,r2,r16
10001930:	1085883a 	add	r2,r2,r2
10001934:	1085883a 	add	r2,r2,r2
10001938:	e0f90a04 	addi	r3,fp,-7128
1000193c:	1885883a 	add	r2,r3,r2
10001940:	10806304 	addi	r2,r2,396
10001944:	10800017 	ldw	r2,0(r2)
10001948:	10006b1e 	bne	r2,zero,10001af8 <main+0x17c4>
1000194c:	0080e004 	movi	r2,896
10001950:	10800017 	ldw	r2,0(r2)
10001954:	10800644 	addi	r2,r2,25
10001958:	1009883a 	mov	r4,r2
1000195c:	01400784 	movi	r5,30
10001960:	00074040 	call	10007404 <__divsi3>
10001964:	1023883a 	mov	r17,r2
10001968:	0080e404 	movi	r2,912
1000196c:	10800017 	ldw	r2,0(r2)
10001970:	10800a04 	addi	r2,r2,40
10001974:	1009883a 	mov	r4,r2
10001978:	01400784 	movi	r5,30
1000197c:	00074040 	call	10007404 <__divsi3>
10001980:	1021883a 	mov	r16,r2
10001984:	e4b91f17 	ldw	r18,-7044(fp)
10001988:	8809883a 	mov	r4,r17
1000198c:	01400544 	movi	r5,21
10001990:	00074c40 	call	100074c4 <__mulsi3>
10001994:	1023883a 	mov	r17,r2
10001998:	9009883a 	mov	r4,r18
1000199c:	01405404 	movi	r5,336
100019a0:	00074c40 	call	100074c4 <__mulsi3>
100019a4:	8885883a 	add	r2,r17,r2
100019a8:	1405883a 	add	r2,r2,r16
100019ac:	1085883a 	add	r2,r2,r2
100019b0:	1085883a 	add	r2,r2,r2
100019b4:	e0f90a04 	addi	r3,fp,-7128
100019b8:	1885883a 	add	r2,r3,r2
100019bc:	10806304 	addi	r2,r2,396
100019c0:	10800017 	ldw	r2,0(r2)
100019c4:	10004c1e 	bne	r2,zero,10001af8 <main+0x17c4>
100019c8:	0080e004 	movi	r2,896
100019cc:	10800017 	ldw	r2,0(r2)
100019d0:	10800c84 	addi	r2,r2,50
100019d4:	1009883a 	mov	r4,r2
100019d8:	01400784 	movi	r5,30
100019dc:	00074040 	call	10007404 <__divsi3>
100019e0:	1023883a 	mov	r17,r2
100019e4:	0080e404 	movi	r2,912
100019e8:	10800017 	ldw	r2,0(r2)
100019ec:	10800a04 	addi	r2,r2,40
100019f0:	1009883a 	mov	r4,r2
100019f4:	01400784 	movi	r5,30
100019f8:	00074040 	call	10007404 <__divsi3>
100019fc:	1021883a 	mov	r16,r2
10001a00:	e4b91f17 	ldw	r18,-7044(fp)
10001a04:	8809883a 	mov	r4,r17
10001a08:	01400544 	movi	r5,21
10001a0c:	00074c40 	call	100074c4 <__mulsi3>
10001a10:	1023883a 	mov	r17,r2
10001a14:	9009883a 	mov	r4,r18
10001a18:	01405404 	movi	r5,336
10001a1c:	00074c40 	call	100074c4 <__mulsi3>
10001a20:	8885883a 	add	r2,r17,r2
10001a24:	1405883a 	add	r2,r2,r16
10001a28:	1085883a 	add	r2,r2,r2
10001a2c:	1085883a 	add	r2,r2,r2
10001a30:	e0f90a04 	addi	r3,fp,-7128
10001a34:	1885883a 	add	r2,r3,r2
10001a38:	10806304 	addi	r2,r2,396
10001a3c:	10800017 	ldw	r2,0(r2)
10001a40:	10002d1e 	bne	r2,zero,10001af8 <main+0x17c4>
10001a44:	0080e004 	movi	r2,896
10001a48:	10800017 	ldw	r2,0(r2)
10001a4c:	10801184 	addi	r2,r2,70
10001a50:	1009883a 	mov	r4,r2
10001a54:	01400784 	movi	r5,30
10001a58:	00074040 	call	10007404 <__divsi3>
10001a5c:	1023883a 	mov	r17,r2
10001a60:	0080e404 	movi	r2,912
10001a64:	10800017 	ldw	r2,0(r2)
10001a68:	10800a04 	addi	r2,r2,40
10001a6c:	1009883a 	mov	r4,r2
10001a70:	01400784 	movi	r5,30
10001a74:	00074040 	call	10007404 <__divsi3>
10001a78:	1021883a 	mov	r16,r2
10001a7c:	e4b91f17 	ldw	r18,-7044(fp)
10001a80:	8809883a 	mov	r4,r17
10001a84:	01400544 	movi	r5,21
10001a88:	00074c40 	call	100074c4 <__mulsi3>
10001a8c:	1023883a 	mov	r17,r2
10001a90:	9009883a 	mov	r4,r18
10001a94:	01405404 	movi	r5,336
10001a98:	00074c40 	call	100074c4 <__mulsi3>
10001a9c:	8885883a 	add	r2,r17,r2
10001aa0:	1405883a 	add	r2,r2,r16
10001aa4:	1085883a 	add	r2,r2,r2
10001aa8:	1085883a 	add	r2,r2,r2
10001aac:	e0f90a04 	addi	r3,fp,-7128
10001ab0:	1885883a 	add	r2,r3,r2
10001ab4:	10806304 	addi	r2,r2,396
10001ab8:	10800017 	ldw	r2,0(r2)
10001abc:	10000e1e 	bne	r2,zero,10001af8 <main+0x17c4>
    		*SAMUS_DIR = 0;
10001ac0:	00805804 	movi	r2,352
10001ac4:	10000005 	stb	zero,0(r2)
    		*SAMUS_X+=6;
10001ac8:	0080e404 	movi	r2,912
10001acc:	00c0e404 	movi	r3,912
10001ad0:	18c00017 	ldw	r3,0(r3)
10001ad4:	18c00184 	addi	r3,r3,6
10001ad8:	10c00015 	stw	r3,0(r2)
    		if(grounded == True){
10001adc:	e0b90f17 	ldw	r2,-7108(fp)
10001ae0:	10800058 	cmpnei	r2,r2,1
10001ae4:	1000041e 	bne	r2,zero,10001af8 <main+0x17c4>
    			*SAMUS_WALK = 1;
10001ae8:	0080dc04 	movi	r2,880
10001aec:	00c00044 	movi	r3,1
10001af0:	10c00005 	stb	r3,0(r2)
    else{
    	*SAMUS_UP = 0;
    }
    //Move right
    if(((keycode&0x0000FF)==7 || (keycode&0x00FF00)>>8 == 7 || (keycode&0xFF0000)>>16 == 7) && has_control == True){
    	if(scene[sceneNum][(*SAMUS_Y+10)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+25)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+50)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+70)/30][(*SAMUS_X+40)/30]==0){
10001af4:	0000a706 	br	10001d94 <main+0x1a60>
10001af8:	0000a606 	br	10001d94 <main+0x1a60>
    			*SAMUS_WALK = 1;
    		}
    	}
    }
    //Move Left
    else if(((keycode&0x0000FF)==4 || (keycode&0x00FF00)>>8 == 4 || (keycode&0xFF0000)>>16 == 4) && has_control == True){
10001afc:	e0b94417 	ldw	r2,-6896(fp)
10001b00:	10803fcc 	andi	r2,r2,255
10001b04:	10800120 	cmpeqi	r2,r2,4
10001b08:	10000a1e 	bne	r2,zero,10001b34 <main+0x1800>
10001b0c:	e0b94417 	ldw	r2,-6896(fp)
10001b10:	10bfc00c 	andi	r2,r2,65280
10001b14:	1005d23a 	srai	r2,r2,8
10001b18:	10800120 	cmpeqi	r2,r2,4
10001b1c:	1000051e 	bne	r2,zero,10001b34 <main+0x1800>
10001b20:	e0b94417 	ldw	r2,-6896(fp)
10001b24:	10803fec 	andhi	r2,r2,255
10001b28:	1005d43a 	srai	r2,r2,16
10001b2c:	10800118 	cmpnei	r2,r2,4
10001b30:	10008f1e 	bne	r2,zero,10001d70 <main+0x1a3c>
10001b34:	e0b91117 	ldw	r2,-7100(fp)
10001b38:	10800058 	cmpnei	r2,r2,1
10001b3c:	10008c1e 	bne	r2,zero,10001d70 <main+0x1a3c>
    	if(scene[sceneNum][(*SAMUS_Y+15)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+25)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+50)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+70)/30][(*SAMUS_X-3)/30]==0){
10001b40:	0080e004 	movi	r2,896
10001b44:	10800017 	ldw	r2,0(r2)
10001b48:	108003c4 	addi	r2,r2,15
10001b4c:	1009883a 	mov	r4,r2
10001b50:	01400784 	movi	r5,30
10001b54:	00074040 	call	10007404 <__divsi3>
10001b58:	1023883a 	mov	r17,r2
10001b5c:	0080e404 	movi	r2,912
10001b60:	10800017 	ldw	r2,0(r2)
10001b64:	10bfff44 	addi	r2,r2,-3
10001b68:	1009883a 	mov	r4,r2
10001b6c:	01400784 	movi	r5,30
10001b70:	00074040 	call	10007404 <__divsi3>
10001b74:	1021883a 	mov	r16,r2
10001b78:	e4b91f17 	ldw	r18,-7044(fp)
10001b7c:	8809883a 	mov	r4,r17
10001b80:	01400544 	movi	r5,21
10001b84:	00074c40 	call	100074c4 <__mulsi3>
10001b88:	1023883a 	mov	r17,r2
10001b8c:	9009883a 	mov	r4,r18
10001b90:	01405404 	movi	r5,336
10001b94:	00074c40 	call	100074c4 <__mulsi3>
10001b98:	8885883a 	add	r2,r17,r2
10001b9c:	1405883a 	add	r2,r2,r16
10001ba0:	1085883a 	add	r2,r2,r2
10001ba4:	1085883a 	add	r2,r2,r2
10001ba8:	e0f90a04 	addi	r3,fp,-7128
10001bac:	1885883a 	add	r2,r3,r2
10001bb0:	10806304 	addi	r2,r2,396
10001bb4:	10800017 	ldw	r2,0(r2)
10001bb8:	10006c1e 	bne	r2,zero,10001d6c <main+0x1a38>
10001bbc:	0080e004 	movi	r2,896
10001bc0:	10800017 	ldw	r2,0(r2)
10001bc4:	10800644 	addi	r2,r2,25
10001bc8:	1009883a 	mov	r4,r2
10001bcc:	01400784 	movi	r5,30
10001bd0:	00074040 	call	10007404 <__divsi3>
10001bd4:	1023883a 	mov	r17,r2
10001bd8:	0080e404 	movi	r2,912
10001bdc:	10800017 	ldw	r2,0(r2)
10001be0:	10bfff44 	addi	r2,r2,-3
10001be4:	1009883a 	mov	r4,r2
10001be8:	01400784 	movi	r5,30
10001bec:	00074040 	call	10007404 <__divsi3>
10001bf0:	1021883a 	mov	r16,r2
10001bf4:	e4b91f17 	ldw	r18,-7044(fp)
10001bf8:	8809883a 	mov	r4,r17
10001bfc:	01400544 	movi	r5,21
10001c00:	00074c40 	call	100074c4 <__mulsi3>
10001c04:	1023883a 	mov	r17,r2
10001c08:	9009883a 	mov	r4,r18
10001c0c:	01405404 	movi	r5,336
10001c10:	00074c40 	call	100074c4 <__mulsi3>
10001c14:	8885883a 	add	r2,r17,r2
10001c18:	1405883a 	add	r2,r2,r16
10001c1c:	1085883a 	add	r2,r2,r2
10001c20:	1085883a 	add	r2,r2,r2
10001c24:	e0f90a04 	addi	r3,fp,-7128
10001c28:	1885883a 	add	r2,r3,r2
10001c2c:	10806304 	addi	r2,r2,396
10001c30:	10800017 	ldw	r2,0(r2)
10001c34:	10004d1e 	bne	r2,zero,10001d6c <main+0x1a38>
10001c38:	0080e004 	movi	r2,896
10001c3c:	10800017 	ldw	r2,0(r2)
10001c40:	10800c84 	addi	r2,r2,50
10001c44:	1009883a 	mov	r4,r2
10001c48:	01400784 	movi	r5,30
10001c4c:	00074040 	call	10007404 <__divsi3>
10001c50:	1023883a 	mov	r17,r2
10001c54:	0080e404 	movi	r2,912
10001c58:	10800017 	ldw	r2,0(r2)
10001c5c:	10bfff44 	addi	r2,r2,-3
10001c60:	1009883a 	mov	r4,r2
10001c64:	01400784 	movi	r5,30
10001c68:	00074040 	call	10007404 <__divsi3>
10001c6c:	1021883a 	mov	r16,r2
10001c70:	e4b91f17 	ldw	r18,-7044(fp)
10001c74:	8809883a 	mov	r4,r17
10001c78:	01400544 	movi	r5,21
10001c7c:	00074c40 	call	100074c4 <__mulsi3>
10001c80:	1023883a 	mov	r17,r2
10001c84:	9009883a 	mov	r4,r18
10001c88:	01405404 	movi	r5,336
10001c8c:	00074c40 	call	100074c4 <__mulsi3>
10001c90:	8885883a 	add	r2,r17,r2
10001c94:	1405883a 	add	r2,r2,r16
10001c98:	1085883a 	add	r2,r2,r2
10001c9c:	1085883a 	add	r2,r2,r2
10001ca0:	e0f90a04 	addi	r3,fp,-7128
10001ca4:	1885883a 	add	r2,r3,r2
10001ca8:	10806304 	addi	r2,r2,396
10001cac:	10800017 	ldw	r2,0(r2)
10001cb0:	10002e1e 	bne	r2,zero,10001d6c <main+0x1a38>
10001cb4:	0080e004 	movi	r2,896
10001cb8:	10800017 	ldw	r2,0(r2)
10001cbc:	10801184 	addi	r2,r2,70
10001cc0:	1009883a 	mov	r4,r2
10001cc4:	01400784 	movi	r5,30
10001cc8:	00074040 	call	10007404 <__divsi3>
10001ccc:	1023883a 	mov	r17,r2
10001cd0:	0080e404 	movi	r2,912
10001cd4:	10800017 	ldw	r2,0(r2)
10001cd8:	10bfff44 	addi	r2,r2,-3
10001cdc:	1009883a 	mov	r4,r2
10001ce0:	01400784 	movi	r5,30
10001ce4:	00074040 	call	10007404 <__divsi3>
10001ce8:	1021883a 	mov	r16,r2
10001cec:	e4b91f17 	ldw	r18,-7044(fp)
10001cf0:	8809883a 	mov	r4,r17
10001cf4:	01400544 	movi	r5,21
10001cf8:	00074c40 	call	100074c4 <__mulsi3>
10001cfc:	1023883a 	mov	r17,r2
10001d00:	9009883a 	mov	r4,r18
10001d04:	01405404 	movi	r5,336
10001d08:	00074c40 	call	100074c4 <__mulsi3>
10001d0c:	8885883a 	add	r2,r17,r2
10001d10:	1405883a 	add	r2,r2,r16
10001d14:	1085883a 	add	r2,r2,r2
10001d18:	1085883a 	add	r2,r2,r2
10001d1c:	e0f90a04 	addi	r3,fp,-7128
10001d20:	1885883a 	add	r2,r3,r2
10001d24:	10806304 	addi	r2,r2,396
10001d28:	10800017 	ldw	r2,0(r2)
10001d2c:	10000f1e 	bne	r2,zero,10001d6c <main+0x1a38>
    		*SAMUS_DIR = 1;
10001d30:	00805804 	movi	r2,352
10001d34:	00c00044 	movi	r3,1
10001d38:	10c00005 	stb	r3,0(r2)
    		*SAMUS_X-=6;
10001d3c:	0080e404 	movi	r2,912
10001d40:	00c0e404 	movi	r3,912
10001d44:	18c00017 	ldw	r3,0(r3)
10001d48:	18fffe84 	addi	r3,r3,-6
10001d4c:	10c00015 	stw	r3,0(r2)
    		if(grounded == True){
10001d50:	e0b90f17 	ldw	r2,-7108(fp)
10001d54:	10800058 	cmpnei	r2,r2,1
10001d58:	1000041e 	bne	r2,zero,10001d6c <main+0x1a38>
				*SAMUS_WALK = 1;
10001d5c:	0080dc04 	movi	r2,880
10001d60:	00c00044 	movi	r3,1
10001d64:	10c00005 	stb	r3,0(r2)
    		}
    	}
    }
    //Move Left
    else if(((keycode&0x0000FF)==4 || (keycode&0x00FF00)>>8 == 4 || (keycode&0xFF0000)>>16 == 4) && has_control == True){
    	if(scene[sceneNum][(*SAMUS_Y+15)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+25)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+50)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+70)/30][(*SAMUS_X-3)/30]==0){
10001d68:	00000a06 	br	10001d94 <main+0x1a60>
10001d6c:	00000906 	br	10001d94 <main+0x1a60>
    		if(grounded == True){
				*SAMUS_WALK = 1;
			}
    	}
    }
    else if(grounded == True){
10001d70:	e0b90f17 	ldw	r2,-7108(fp)
10001d74:	10800058 	cmpnei	r2,r2,1
10001d78:	1000031e 	bne	r2,zero,10001d88 <main+0x1a54>
        *SAMUS_WALK = 0;
10001d7c:	0080dc04 	movi	r2,880
10001d80:	10000005 	stb	zero,0(r2)
10001d84:	00000306 	br	10001d94 <main+0x1a60>
    }
    else{
    	*SAMUS_WALK = 1;
10001d88:	0080dc04 	movi	r2,880
10001d8c:	00c00044 	movi	r3,1
10001d90:	10c00005 	stb	r3,0(r2)
    }

    // Jump code
    if(grounded == False){
10001d94:	e0b90f17 	ldw	r2,-7108(fp)
10001d98:	1000041e 	bne	r2,zero,10001dac <main+0x1a78>
    	*SAMUS_JUMP = 1;
10001d9c:	0080d804 	movi	r2,864
10001da0:	00c00044 	movi	r3,1
10001da4:	10c00005 	stb	r3,0(r2)
10001da8:	00000206 	br	10001db4 <main+0x1a80>
    }
    else{
    	*SAMUS_JUMP = 0;
10001dac:	0080d804 	movi	r2,864
10001db0:	10000005 	stb	zero,0(r2)
    }
    if(((keycode&0x0000FF)==0x2c || (keycode&0x00FF00)>>8 == 0x2c || (keycode&0xFF0000)>>16 == 0x2c) && grounded == True && let_go == False && button_let_go == True && has_control == True){
10001db4:	e0b94417 	ldw	r2,-6896(fp)
10001db8:	10803fcc 	andi	r2,r2,255
10001dbc:	10800b20 	cmpeqi	r2,r2,44
10001dc0:	10000a1e 	bne	r2,zero,10001dec <main+0x1ab8>
10001dc4:	e0b94417 	ldw	r2,-6896(fp)
10001dc8:	10bfc00c 	andi	r2,r2,65280
10001dcc:	1005d23a 	srai	r2,r2,8
10001dd0:	10800b20 	cmpeqi	r2,r2,44
10001dd4:	1000051e 	bne	r2,zero,10001dec <main+0x1ab8>
10001dd8:	e0b94417 	ldw	r2,-6896(fp)
10001ddc:	10803fec 	andhi	r2,r2,255
10001de0:	1005d43a 	srai	r2,r2,16
10001de4:	10800b18 	cmpnei	r2,r2,44
10001de8:	1000121e 	bne	r2,zero,10001e34 <main+0x1b00>
10001dec:	e0b90f17 	ldw	r2,-7108(fp)
10001df0:	10800058 	cmpnei	r2,r2,1
10001df4:	10000f1e 	bne	r2,zero,10001e34 <main+0x1b00>
10001df8:	e0b91017 	ldw	r2,-7104(fp)
10001dfc:	10000d1e 	bne	r2,zero,10001e34 <main+0x1b00>
10001e00:	e0b91317 	ldw	r2,-7092(fp)
10001e04:	10800058 	cmpnei	r2,r2,1
10001e08:	10000a1e 	bne	r2,zero,10001e34 <main+0x1b00>
10001e0c:	e0b91117 	ldw	r2,-7100(fp)
10001e10:	10800058 	cmpnei	r2,r2,1
10001e14:	1000071e 	bne	r2,zero,10001e34 <main+0x1b00>
    	y_inc = -12;
10001e18:	00b05034 	movhi	r2,49472
10001e1c:	e0b90d15 	stw	r2,-7116(fp)
    	grounded = False;
10001e20:	e0390f15 	stw	zero,-7108(fp)
    	let_go = True;
10001e24:	00800044 	movi	r2,1
10001e28:	e0b91015 	stw	r2,-7104(fp)
    	jump_height = 0;
10001e2c:	e0390e15 	stw	zero,-7112(fp)
    	button_let_go = False;
10001e30:	e0391315 	stw	zero,-7092(fp)
    }
    if((((keycode&0x0000FF)!=0x2c && (keycode&0x00FF00)>>8 != 0x2c && (keycode&0xFF0000)>>16 != 0x2c))){
10001e34:	e0b94417 	ldw	r2,-6896(fp)
10001e38:	10803fcc 	andi	r2,r2,255
10001e3c:	10800b20 	cmpeqi	r2,r2,44
10001e40:	10000c1e 	bne	r2,zero,10001e74 <main+0x1b40>
10001e44:	e0b94417 	ldw	r2,-6896(fp)
10001e48:	10bfc00c 	andi	r2,r2,65280
10001e4c:	1005d23a 	srai	r2,r2,8
10001e50:	10800b20 	cmpeqi	r2,r2,44
10001e54:	1000071e 	bne	r2,zero,10001e74 <main+0x1b40>
10001e58:	e0b94417 	ldw	r2,-6896(fp)
10001e5c:	10803fec 	andhi	r2,r2,255
10001e60:	1005d43a 	srai	r2,r2,16
10001e64:	10800b20 	cmpeqi	r2,r2,44
10001e68:	1000021e 	bne	r2,zero,10001e74 <main+0x1b40>
    	button_let_go = True;
10001e6c:	00800044 	movi	r2,1
10001e70:	e0b91315 	stw	r2,-7092(fp)
    }
    if((((keycode&0x0000FF)!=0x2c && (keycode&0x00FF00)>>8 != 0x2c && (keycode&0xFF0000)>>16 != 0x2c) && let_go == True)){
10001e74:	e0b94417 	ldw	r2,-6896(fp)
10001e78:	10803fcc 	andi	r2,r2,255
10001e7c:	10800b20 	cmpeqi	r2,r2,44
10001e80:	10000e1e 	bne	r2,zero,10001ebc <main+0x1b88>
10001e84:	e0b94417 	ldw	r2,-6896(fp)
10001e88:	10bfc00c 	andi	r2,r2,65280
10001e8c:	1005d23a 	srai	r2,r2,8
10001e90:	10800b20 	cmpeqi	r2,r2,44
10001e94:	1000091e 	bne	r2,zero,10001ebc <main+0x1b88>
10001e98:	e0b94417 	ldw	r2,-6896(fp)
10001e9c:	10803fec 	andhi	r2,r2,255
10001ea0:	1005d43a 	srai	r2,r2,16
10001ea4:	10800b20 	cmpeqi	r2,r2,44
10001ea8:	1000041e 	bne	r2,zero,10001ebc <main+0x1b88>
10001eac:	e0b91017 	ldw	r2,-7104(fp)
10001eb0:	10800058 	cmpnei	r2,r2,1
10001eb4:	1000011e 	bne	r2,zero,10001ebc <main+0x1b88>
    	let_go = False;
10001eb8:	e0391015 	stw	zero,-7104(fp)
    }
    if(grounded == False){
10001ebc:	e0b90f17 	ldw	r2,-7108(fp)
10001ec0:	1000141e 	bne	r2,zero,10001f14 <main+0x1be0>
    	if((keycode&0x0000FF)!=0x1A && (keycode&0x00FF00)>>8 != 0x1A && (keycode&0xFF0000)>>16 != 0x1A){
10001ec4:	e0b94417 	ldw	r2,-6896(fp)
10001ec8:	10803fcc 	andi	r2,r2,255
10001ecc:	108006a0 	cmpeqi	r2,r2,26
10001ed0:	10000e1e 	bne	r2,zero,10001f0c <main+0x1bd8>
10001ed4:	e0b94417 	ldw	r2,-6896(fp)
10001ed8:	10bfc00c 	andi	r2,r2,65280
10001edc:	1005d23a 	srai	r2,r2,8
10001ee0:	108006a0 	cmpeqi	r2,r2,26
10001ee4:	1000091e 	bne	r2,zero,10001f0c <main+0x1bd8>
10001ee8:	e0b94417 	ldw	r2,-6896(fp)
10001eec:	10803fec 	andhi	r2,r2,255
10001ef0:	1005d43a 	srai	r2,r2,16
10001ef4:	108006a0 	cmpeqi	r2,r2,26
10001ef8:	1000041e 	bne	r2,zero,10001f0c <main+0x1bd8>
    		*SAMUS_WALK = True;
10001efc:	0080dc04 	movi	r2,880
10001f00:	00c00044 	movi	r3,1
10001f04:	10c00005 	stb	r3,0(r2)
10001f08:	00000206 	br	10001f14 <main+0x1be0>
    	}
    	else{
    		*SAMUS_WALK = False;
10001f0c:	0080dc04 	movi	r2,880
10001f10:	10000005 	stb	zero,0(r2)
    	}
    }

    if(let_go == False || jump_height >= max_jump_height){
10001f14:	e0b91017 	ldw	r2,-7104(fp)
10001f18:	10000426 	beq	r2,zero,10001f2c <main+0x1bf8>
10001f1c:	e1390e17 	ldw	r4,-7112(fp)
10001f20:	e1794a17 	ldw	r5,-6872(fp)
10001f24:	0007e1c0 	call	10007e1c <__gesf2>
10001f28:	10000c16 	blt	r2,zero,10001f5c <main+0x1c28>
    	if(y_inc < -6){
10001f2c:	e1390d17 	ldw	r4,-7116(fp)
10001f30:	01703034 	movhi	r5,49344
10001f34:	0007ed40 	call	10007ed4 <__lesf2>
10001f38:	1000020e 	bge	r2,zero,10001f44 <main+0x1c10>
    		y_inc = -6;
10001f3c:	00b03034 	movhi	r2,49344
10001f40:	e0b90d15 	stw	r2,-7116(fp)
    	}
    	y_inc += gravity;
10001f44:	e1390d17 	ldw	r4,-7116(fp)
10001f48:	e1794917 	ldw	r5,-6876(fp)
10001f4c:	00074ec0 	call	100074ec <__addsf3>
10001f50:	1007883a 	mov	r3,r2
10001f54:	e0f90d15 	stw	r3,-7116(fp)
    	let_go = False;
10001f58:	e0391015 	stw	zero,-7104(fp)
    }

    if(grounded == True){
10001f5c:	e0b90f17 	ldw	r2,-7108(fp)
10001f60:	10800058 	cmpnei	r2,r2,1
10001f64:	1000011e 	bne	r2,zero,10001f6c <main+0x1c38>
    	y_inc = 0;
10001f68:	e0390d15 	stw	zero,-7116(fp)
    }
    if(y_inc > 12){
10001f6c:	e1390d17 	ldw	r4,-7116(fp)
10001f70:	01505034 	movhi	r5,16704
10001f74:	0007e1c0 	call	10007e1c <__gesf2>
10001f78:	0080020e 	bge	zero,r2,10001f84 <main+0x1c50>
    	y_inc = 12;
10001f7c:	00905034 	movhi	r2,16704
10001f80:	e0b90d15 	stw	r2,-7116(fp)
    }

    *SAMUS_Y += y_inc;
10001f84:	0400e004 	movi	r16,896
10001f88:	0080e004 	movi	r2,896
10001f8c:	10800017 	ldw	r2,0(r2)
10001f90:	1009883a 	mov	r4,r2
10001f94:	00085000 	call	10008500 <__floatsisf>
10001f98:	1007883a 	mov	r3,r2
10001f9c:	1809883a 	mov	r4,r3
10001fa0:	e1790d17 	ldw	r5,-7116(fp)
10001fa4:	00074ec0 	call	100074ec <__addsf3>
10001fa8:	1007883a 	mov	r3,r2
10001fac:	1805883a 	mov	r2,r3
10001fb0:	1009883a 	mov	r4,r2
10001fb4:	00084880 	call	10008488 <__fixsfsi>
10001fb8:	80800015 	stw	r2,0(r16)
    jump_height -= y_inc;
10001fbc:	e1390e17 	ldw	r4,-7112(fp)
10001fc0:	e1790d17 	ldw	r5,-7116(fp)
10001fc4:	0007f8c0 	call	10007f8c <__subsf3>
10001fc8:	1007883a 	mov	r3,r2
10001fcc:	e0f90e15 	stw	r3,-7112(fp)

    //bot collision detection
    if((scene[sceneNum][(*SAMUS_Y+80)/30][(*SAMUS_X+5)/30] != 0 || scene[sceneNum][(*SAMUS_Y+80)/30][(*SAMUS_X+33)/30] != 0)){
10001fd0:	0080e004 	movi	r2,896
10001fd4:	10800017 	ldw	r2,0(r2)
10001fd8:	10801404 	addi	r2,r2,80
10001fdc:	1009883a 	mov	r4,r2
10001fe0:	01400784 	movi	r5,30
10001fe4:	00074040 	call	10007404 <__divsi3>
10001fe8:	1023883a 	mov	r17,r2
10001fec:	0080e404 	movi	r2,912
10001ff0:	10800017 	ldw	r2,0(r2)
10001ff4:	10800144 	addi	r2,r2,5
10001ff8:	1009883a 	mov	r4,r2
10001ffc:	01400784 	movi	r5,30
10002000:	00074040 	call	10007404 <__divsi3>
10002004:	1021883a 	mov	r16,r2
10002008:	e4b91f17 	ldw	r18,-7044(fp)
1000200c:	8809883a 	mov	r4,r17
10002010:	01400544 	movi	r5,21
10002014:	00074c40 	call	100074c4 <__mulsi3>
10002018:	1023883a 	mov	r17,r2
1000201c:	9009883a 	mov	r4,r18
10002020:	01405404 	movi	r5,336
10002024:	00074c40 	call	100074c4 <__mulsi3>
10002028:	8885883a 	add	r2,r17,r2
1000202c:	1405883a 	add	r2,r2,r16
10002030:	1085883a 	add	r2,r2,r2
10002034:	1085883a 	add	r2,r2,r2
10002038:	e0f90a04 	addi	r3,fp,-7128
1000203c:	1885883a 	add	r2,r3,r2
10002040:	10806304 	addi	r2,r2,396
10002044:	10800017 	ldw	r2,0(r2)
10002048:	10001f1e 	bne	r2,zero,100020c8 <main+0x1d94>
1000204c:	0080e004 	movi	r2,896
10002050:	10800017 	ldw	r2,0(r2)
10002054:	10801404 	addi	r2,r2,80
10002058:	1009883a 	mov	r4,r2
1000205c:	01400784 	movi	r5,30
10002060:	00074040 	call	10007404 <__divsi3>
10002064:	1023883a 	mov	r17,r2
10002068:	0080e404 	movi	r2,912
1000206c:	10800017 	ldw	r2,0(r2)
10002070:	10800844 	addi	r2,r2,33
10002074:	1009883a 	mov	r4,r2
10002078:	01400784 	movi	r5,30
1000207c:	00074040 	call	10007404 <__divsi3>
10002080:	1021883a 	mov	r16,r2
10002084:	e4b91f17 	ldw	r18,-7044(fp)
10002088:	8809883a 	mov	r4,r17
1000208c:	01400544 	movi	r5,21
10002090:	00074c40 	call	100074c4 <__mulsi3>
10002094:	1023883a 	mov	r17,r2
10002098:	9009883a 	mov	r4,r18
1000209c:	01405404 	movi	r5,336
100020a0:	00074c40 	call	100074c4 <__mulsi3>
100020a4:	8885883a 	add	r2,r17,r2
100020a8:	1405883a 	add	r2,r2,r16
100020ac:	1085883a 	add	r2,r2,r2
100020b0:	1085883a 	add	r2,r2,r2
100020b4:	e0f90a04 	addi	r3,fp,-7128
100020b8:	1885883a 	add	r2,r3,r2
100020bc:	10806304 	addi	r2,r2,396
100020c0:	10800017 	ldw	r2,0(r2)
100020c4:	10000e26 	beq	r2,zero,10002100 <main+0x1dcc>
    	*SAMUS_Y = (*SAMUS_Y/30)*30+19;
100020c8:	0400e004 	movi	r16,896
100020cc:	0080e004 	movi	r2,896
100020d0:	10800017 	ldw	r2,0(r2)
100020d4:	1009883a 	mov	r4,r2
100020d8:	01400784 	movi	r5,30
100020dc:	00074040 	call	10007404 <__divsi3>
100020e0:	1009883a 	mov	r4,r2
100020e4:	01400784 	movi	r5,30
100020e8:	00074c40 	call	100074c4 <__mulsi3>
100020ec:	108004c4 	addi	r2,r2,19
100020f0:	80800015 	stw	r2,0(r16)
    	grounded = True;
100020f4:	00800044 	movi	r2,1
100020f8:	e0b90f15 	stw	r2,-7108(fp)
100020fc:	00000106 	br	10002104 <main+0x1dd0>
    }
    else{
    	grounded = False;
10002100:	e0390f15 	stw	zero,-7108(fp)
    }

    //If hits head
    if(scene[sceneNum][(*SAMUS_Y+5)/30][(*SAMUS_X+2)/30] != 0 || scene[sceneNum][(*SAMUS_Y+5)/30][(*SAMUS_X+33)/30] != 0){
10002104:	0080e004 	movi	r2,896
10002108:	10800017 	ldw	r2,0(r2)
1000210c:	10800144 	addi	r2,r2,5
10002110:	1009883a 	mov	r4,r2
10002114:	01400784 	movi	r5,30
10002118:	00074040 	call	10007404 <__divsi3>
1000211c:	1023883a 	mov	r17,r2
10002120:	0080e404 	movi	r2,912
10002124:	10800017 	ldw	r2,0(r2)
10002128:	10800084 	addi	r2,r2,2
1000212c:	1009883a 	mov	r4,r2
10002130:	01400784 	movi	r5,30
10002134:	00074040 	call	10007404 <__divsi3>
10002138:	1021883a 	mov	r16,r2
1000213c:	e4b91f17 	ldw	r18,-7044(fp)
10002140:	8809883a 	mov	r4,r17
10002144:	01400544 	movi	r5,21
10002148:	00074c40 	call	100074c4 <__mulsi3>
1000214c:	1023883a 	mov	r17,r2
10002150:	9009883a 	mov	r4,r18
10002154:	01405404 	movi	r5,336
10002158:	00074c40 	call	100074c4 <__mulsi3>
1000215c:	8885883a 	add	r2,r17,r2
10002160:	1405883a 	add	r2,r2,r16
10002164:	1085883a 	add	r2,r2,r2
10002168:	1085883a 	add	r2,r2,r2
1000216c:	e0f90a04 	addi	r3,fp,-7128
10002170:	1885883a 	add	r2,r3,r2
10002174:	10806304 	addi	r2,r2,396
10002178:	10800017 	ldw	r2,0(r2)
1000217c:	10001f1e 	bne	r2,zero,100021fc <main+0x1ec8>
10002180:	0080e004 	movi	r2,896
10002184:	10800017 	ldw	r2,0(r2)
10002188:	10800144 	addi	r2,r2,5
1000218c:	1009883a 	mov	r4,r2
10002190:	01400784 	movi	r5,30
10002194:	00074040 	call	10007404 <__divsi3>
10002198:	1023883a 	mov	r17,r2
1000219c:	0080e404 	movi	r2,912
100021a0:	10800017 	ldw	r2,0(r2)
100021a4:	10800844 	addi	r2,r2,33
100021a8:	1009883a 	mov	r4,r2
100021ac:	01400784 	movi	r5,30
100021b0:	00074040 	call	10007404 <__divsi3>
100021b4:	1021883a 	mov	r16,r2
100021b8:	e4b91f17 	ldw	r18,-7044(fp)
100021bc:	8809883a 	mov	r4,r17
100021c0:	01400544 	movi	r5,21
100021c4:	00074c40 	call	100074c4 <__mulsi3>
100021c8:	1023883a 	mov	r17,r2
100021cc:	9009883a 	mov	r4,r18
100021d0:	01405404 	movi	r5,336
100021d4:	00074c40 	call	100074c4 <__mulsi3>
100021d8:	8885883a 	add	r2,r17,r2
100021dc:	1405883a 	add	r2,r2,r16
100021e0:	1085883a 	add	r2,r2,r2
100021e4:	1085883a 	add	r2,r2,r2
100021e8:	e0f90a04 	addi	r3,fp,-7128
100021ec:	1885883a 	add	r2,r3,r2
100021f0:	10806304 	addi	r2,r2,396
100021f4:	10800017 	ldw	r2,0(r2)
100021f8:	10000426 	beq	r2,zero,1000220c <main+0x1ed8>
    	y_inc = -y_inc;
100021fc:	e0b90d17 	ldw	r2,-7116(fp)
10002200:	10a0003c 	xorhi	r2,r2,32768
10002204:	e0b90d15 	stw	r2,-7116(fp)
    	let_go = False;
10002208:	e0391015 	stw	zero,-7104(fp)
    }


    //Bullet code
    if(!((keycode&0x0000FF)==0x0d || (keycode&0x00FF00)>>8 == 0x0d || (keycode&0xFF0000)>>16 == 0x0d)){
1000220c:	e0b94417 	ldw	r2,-6896(fp)
10002210:	10803fcc 	andi	r2,r2,255
10002214:	10800360 	cmpeqi	r2,r2,13
10002218:	10000c1e 	bne	r2,zero,1000224c <main+0x1f18>
1000221c:	e0b94417 	ldw	r2,-6896(fp)
10002220:	10bfc00c 	andi	r2,r2,65280
10002224:	1005d23a 	srai	r2,r2,8
10002228:	10800360 	cmpeqi	r2,r2,13
1000222c:	1000071e 	bne	r2,zero,1000224c <main+0x1f18>
10002230:	e0b94417 	ldw	r2,-6896(fp)
10002234:	10803fec 	andhi	r2,r2,255
10002238:	1005d43a 	srai	r2,r2,16
1000223c:	10800360 	cmpeqi	r2,r2,13
10002240:	1000021e 	bne	r2,zero,1000224c <main+0x1f18>
    	bullet_en = True;
10002244:	00800044 	movi	r2,1
10002248:	e0b91d15 	stw	r2,-7052(fp)
    }
    if(((keycode&0x0000FF)==0x0d || (keycode&0x00FF00)>>8 == 0x0d || (keycode&0xFF0000)>>16 == 0x0d) && bullet_en == True){
1000224c:	e0b94417 	ldw	r2,-6896(fp)
10002250:	10803fcc 	andi	r2,r2,255
10002254:	10800360 	cmpeqi	r2,r2,13
10002258:	10000a1e 	bne	r2,zero,10002284 <main+0x1f50>
1000225c:	e0b94417 	ldw	r2,-6896(fp)
10002260:	10bfc00c 	andi	r2,r2,65280
10002264:	1005d23a 	srai	r2,r2,8
10002268:	10800360 	cmpeqi	r2,r2,13
1000226c:	1000051e 	bne	r2,zero,10002284 <main+0x1f50>
10002270:	e0b94417 	ldw	r2,-6896(fp)
10002274:	10803fec 	andhi	r2,r2,255
10002278:	1005d43a 	srai	r2,r2,16
1000227c:	10800358 	cmpnei	r2,r2,13
10002280:	1000f01e 	bne	r2,zero,10002644 <main+0x2310>
10002284:	e0b91d17 	ldw	r2,-7052(fp)
10002288:	10800058 	cmpnei	r2,r2,1
1000228c:	1000ed1e 	bne	r2,zero,10002644 <main+0x2310>
    	if(*BUL1_EN == True && *BUL2_EN == True && *BUL3_EN == False){
10002290:	00808c04 	movi	r2,560
10002294:	10800017 	ldw	r2,0(r2)
10002298:	10800058 	cmpnei	r2,r2,1
1000229c:	10004f1e 	bne	r2,zero,100023dc <main+0x20a8>
100022a0:	00808004 	movi	r2,512
100022a4:	10800017 	ldw	r2,0(r2)
100022a8:	10800058 	cmpnei	r2,r2,1
100022ac:	10004b1e 	bne	r2,zero,100023dc <main+0x20a8>
100022b0:	00807404 	movi	r2,464
100022b4:	10800017 	ldw	r2,0(r2)
100022b8:	1000481e 	bne	r2,zero,100023dc <main+0x20a8>
    		if(*SAMUS_DIR == 1){
100022bc:	00805804 	movi	r2,352
100022c0:	10800003 	ldbu	r2,0(r2)
100022c4:	10803fcc 	andi	r2,r2,255
100022c8:	1080201c 	xori	r2,r2,128
100022cc:	10bfe004 	addi	r2,r2,-128
100022d0:	10800058 	cmpnei	r2,r2,1
100022d4:	10000f1e 	bne	r2,zero,10002314 <main+0x1fe0>
    			*BUL3_EN = True;
100022d8:	00807404 	movi	r2,464
100022dc:	00c00044 	movi	r3,1
100022e0:	10c00015 	stw	r3,0(r2)
    			*BUL3_X = *SAMUS_X;
100022e4:	00807004 	movi	r2,448
100022e8:	00c0e404 	movi	r3,912
100022ec:	18c00017 	ldw	r3,0(r3)
100022f0:	10c00015 	stw	r3,0(r2)
    			*BUL3_Y = *SAMUS_Y+25;
100022f4:	00806c04 	movi	r2,432
100022f8:	00c0e004 	movi	r3,896
100022fc:	18c00017 	ldw	r3,0(r3)
10002300:	18c00644 	addi	r3,r3,25
10002304:	10c00015 	stw	r3,0(r2)
    			bul3Left = True;
10002308:	00800044 	movi	r2,1
1000230c:	e0b91a15 	stw	r2,-7064(fp)
10002310:	00000e06 	br	1000234c <main+0x2018>
    		}
    		else{
    			*BUL3_EN = True;
10002314:	00807404 	movi	r2,464
10002318:	00c00044 	movi	r3,1
1000231c:	10c00015 	stw	r3,0(r2)
    			*BUL3_X = *SAMUS_X+30;
10002320:	00807004 	movi	r2,448
10002324:	00c0e404 	movi	r3,912
10002328:	18c00017 	ldw	r3,0(r3)
1000232c:	18c00784 	addi	r3,r3,30
10002330:	10c00015 	stw	r3,0(r2)
    			*BUL3_Y = *SAMUS_Y+25;
10002334:	00806c04 	movi	r2,432
10002338:	00c0e004 	movi	r3,896
1000233c:	18c00017 	ldw	r3,0(r3)
10002340:	18c00644 	addi	r3,r3,25
10002344:	10c00015 	stw	r3,0(r2)
    			bul3Left = False;
10002348:	e0391a15 	stw	zero,-7064(fp)
    		}
			if(grounded == False){
1000234c:	e0b90f17 	ldw	r2,-7108(fp)
10002350:	1000051e 	bne	r2,zero,10002368 <main+0x2034>
				*BUL3_Y = *SAMUS_Y+22;
10002354:	00806c04 	movi	r2,432
10002358:	00c0e004 	movi	r3,896
1000235c:	18c00017 	ldw	r3,0(r3)
10002360:	18c00584 	addi	r3,r3,22
10002364:	10c00015 	stw	r3,0(r2)
			}

    		if((keycode&0x0000FF)==0x1A || (keycode&0x00FF00)>>8 == 0x1A || (keycode&0xFF0000)>>16 == 0x1A){
10002368:	e0b94417 	ldw	r2,-6896(fp)
1000236c:	10803fcc 	andi	r2,r2,255
10002370:	108006a0 	cmpeqi	r2,r2,26
10002374:	10000a1e 	bne	r2,zero,100023a0 <main+0x206c>
10002378:	e0b94417 	ldw	r2,-6896(fp)
1000237c:	10bfc00c 	andi	r2,r2,65280
10002380:	1005d23a 	srai	r2,r2,8
10002384:	108006a0 	cmpeqi	r2,r2,26
10002388:	1000051e 	bne	r2,zero,100023a0 <main+0x206c>
1000238c:	e0b94417 	ldw	r2,-6896(fp)
10002390:	10803fec 	andhi	r2,r2,255
10002394:	1005d43a 	srai	r2,r2,16
10002398:	10800698 	cmpnei	r2,r2,26
1000239c:	10000c1e 	bne	r2,zero,100023d0 <main+0x209c>
    			bul3Up = True;
100023a0:	00800044 	movi	r2,1
100023a4:	e0b91b15 	stw	r2,-7060(fp)
    			*BUL3_Y = *SAMUS_Y;
100023a8:	00806c04 	movi	r2,432
100023ac:	00c0e004 	movi	r3,896
100023b0:	18c00017 	ldw	r3,0(r3)
100023b4:	10c00015 	stw	r3,0(r2)
    			*BUL3_X = *SAMUS_X+18;
100023b8:	00807004 	movi	r2,448
100023bc:	00c0e404 	movi	r3,912
100023c0:	18c00017 	ldw	r3,0(r3)
100023c4:	18c00484 	addi	r3,r3,18
100023c8:	10c00015 	stw	r3,0(r2)
100023cc:	00000106 	br	100023d4 <main+0x20a0>
    		}
    		else{
    			bul3Up = False;
100023d0:	e0391b15 	stw	zero,-7060(fp)
    		}
    		bul3start = 0;
100023d4:	e0391c15 	stw	zero,-7056(fp)
100023d8:	00009906 	br	10002640 <main+0x230c>
    	}
    	else if(*BUL1_EN == True && *BUL2_EN == False){
100023dc:	00808c04 	movi	r2,560
100023e0:	10800017 	ldw	r2,0(r2)
100023e4:	10800058 	cmpnei	r2,r2,1
100023e8:	10004b1e 	bne	r2,zero,10002518 <main+0x21e4>
100023ec:	00808004 	movi	r2,512
100023f0:	10800017 	ldw	r2,0(r2)
100023f4:	1000481e 	bne	r2,zero,10002518 <main+0x21e4>

			if(*SAMUS_DIR == 1){
100023f8:	00805804 	movi	r2,352
100023fc:	10800003 	ldbu	r2,0(r2)
10002400:	10803fcc 	andi	r2,r2,255
10002404:	1080201c 	xori	r2,r2,128
10002408:	10bfe004 	addi	r2,r2,-128
1000240c:	10800058 	cmpnei	r2,r2,1
10002410:	10000f1e 	bne	r2,zero,10002450 <main+0x211c>
				*BUL2_EN = True;
10002414:	00808004 	movi	r2,512
10002418:	00c00044 	movi	r3,1
1000241c:	10c00015 	stw	r3,0(r2)
				*BUL2_X = *SAMUS_X;
10002420:	00807c04 	movi	r2,496
10002424:	00c0e404 	movi	r3,912
10002428:	18c00017 	ldw	r3,0(r3)
1000242c:	10c00015 	stw	r3,0(r2)
				*BUL2_Y = *SAMUS_Y+25;
10002430:	00807804 	movi	r2,480
10002434:	00c0e004 	movi	r3,896
10002438:	18c00017 	ldw	r3,0(r3)
1000243c:	18c00644 	addi	r3,r3,25
10002440:	10c00015 	stw	r3,0(r2)
				bul2Left = True;
10002444:	00800044 	movi	r2,1
10002448:	e0b91715 	stw	r2,-7076(fp)
1000244c:	00000e06 	br	10002488 <main+0x2154>
			}
			else{
				*BUL2_EN = True;
10002450:	00808004 	movi	r2,512
10002454:	00c00044 	movi	r3,1
10002458:	10c00015 	stw	r3,0(r2)
				*BUL2_X = *SAMUS_X+30;
1000245c:	00807c04 	movi	r2,496
10002460:	00c0e404 	movi	r3,912
10002464:	18c00017 	ldw	r3,0(r3)
10002468:	18c00784 	addi	r3,r3,30
1000246c:	10c00015 	stw	r3,0(r2)
				*BUL2_Y = *SAMUS_Y+25;
10002470:	00807804 	movi	r2,480
10002474:	00c0e004 	movi	r3,896
10002478:	18c00017 	ldw	r3,0(r3)
1000247c:	18c00644 	addi	r3,r3,25
10002480:	10c00015 	stw	r3,0(r2)
				bul2Left = False;
10002484:	e0391715 	stw	zero,-7076(fp)
			}
			if(grounded == False){
10002488:	e0b90f17 	ldw	r2,-7108(fp)
1000248c:	1000051e 	bne	r2,zero,100024a4 <main+0x2170>
				*BUL2_Y = *SAMUS_Y+22;
10002490:	00807804 	movi	r2,480
10002494:	00c0e004 	movi	r3,896
10002498:	18c00017 	ldw	r3,0(r3)
1000249c:	18c00584 	addi	r3,r3,22
100024a0:	10c00015 	stw	r3,0(r2)
			}

			if((keycode&0x0000FF)==0x1A || (keycode&0x00FF00)>>8 == 0x1A || (keycode&0xFF0000)>>16 == 0x1A){
100024a4:	e0b94417 	ldw	r2,-6896(fp)
100024a8:	10803fcc 	andi	r2,r2,255
100024ac:	108006a0 	cmpeqi	r2,r2,26
100024b0:	10000a1e 	bne	r2,zero,100024dc <main+0x21a8>
100024b4:	e0b94417 	ldw	r2,-6896(fp)
100024b8:	10bfc00c 	andi	r2,r2,65280
100024bc:	1005d23a 	srai	r2,r2,8
100024c0:	108006a0 	cmpeqi	r2,r2,26
100024c4:	1000051e 	bne	r2,zero,100024dc <main+0x21a8>
100024c8:	e0b94417 	ldw	r2,-6896(fp)
100024cc:	10803fec 	andhi	r2,r2,255
100024d0:	1005d43a 	srai	r2,r2,16
100024d4:	10800698 	cmpnei	r2,r2,26
100024d8:	10000c1e 	bne	r2,zero,1000250c <main+0x21d8>
				bul2Up = True;
100024dc:	00800044 	movi	r2,1
100024e0:	e0b91815 	stw	r2,-7072(fp)
				*BUL2_Y = *SAMUS_Y;
100024e4:	00807804 	movi	r2,480
100024e8:	00c0e004 	movi	r3,896
100024ec:	18c00017 	ldw	r3,0(r3)
100024f0:	10c00015 	stw	r3,0(r2)
				*BUL2_X = *SAMUS_X+18;
100024f4:	00807c04 	movi	r2,496
100024f8:	00c0e404 	movi	r3,912
100024fc:	18c00017 	ldw	r3,0(r3)
10002500:	18c00484 	addi	r3,r3,18
10002504:	10c00015 	stw	r3,0(r2)
10002508:	00000106 	br	10002510 <main+0x21dc>
			}
			else{
				bul2Up = False;
1000250c:	e0391815 	stw	zero,-7072(fp)
			}
			bul2start = 0;
10002510:	e0391915 	stw	zero,-7068(fp)
10002514:	00004a06 	br	10002640 <main+0x230c>
		}
    	else if(*BUL1_EN == False){
10002518:	00808c04 	movi	r2,560
1000251c:	10800017 	ldw	r2,0(r2)
10002520:	1000471e 	bne	r2,zero,10002640 <main+0x230c>
			if(*SAMUS_DIR == 1){
10002524:	00805804 	movi	r2,352
10002528:	10800003 	ldbu	r2,0(r2)
1000252c:	10803fcc 	andi	r2,r2,255
10002530:	1080201c 	xori	r2,r2,128
10002534:	10bfe004 	addi	r2,r2,-128
10002538:	10800058 	cmpnei	r2,r2,1
1000253c:	10000f1e 	bne	r2,zero,1000257c <main+0x2248>
				*BUL1_EN = True;
10002540:	00808c04 	movi	r2,560
10002544:	00c00044 	movi	r3,1
10002548:	10c00015 	stw	r3,0(r2)
				*BUL1_X = *SAMUS_X;
1000254c:	00808804 	movi	r2,544
10002550:	00c0e404 	movi	r3,912
10002554:	18c00017 	ldw	r3,0(r3)
10002558:	10c00015 	stw	r3,0(r2)
				*BUL1_Y = *SAMUS_Y+25;
1000255c:	00808404 	movi	r2,528
10002560:	00c0e004 	movi	r3,896
10002564:	18c00017 	ldw	r3,0(r3)
10002568:	18c00644 	addi	r3,r3,25
1000256c:	10c00015 	stw	r3,0(r2)
				bul1Left = True;
10002570:	00800044 	movi	r2,1
10002574:	e0b91415 	stw	r2,-7088(fp)
10002578:	00000e06 	br	100025b4 <main+0x2280>
			}
			else{
				*BUL1_EN = True;
1000257c:	00808c04 	movi	r2,560
10002580:	00c00044 	movi	r3,1
10002584:	10c00015 	stw	r3,0(r2)
				*BUL1_X = *SAMUS_X+30;
10002588:	00808804 	movi	r2,544
1000258c:	00c0e404 	movi	r3,912
10002590:	18c00017 	ldw	r3,0(r3)
10002594:	18c00784 	addi	r3,r3,30
10002598:	10c00015 	stw	r3,0(r2)
				*BUL1_Y = *SAMUS_Y+25;
1000259c:	00808404 	movi	r2,528
100025a0:	00c0e004 	movi	r3,896
100025a4:	18c00017 	ldw	r3,0(r3)
100025a8:	18c00644 	addi	r3,r3,25
100025ac:	10c00015 	stw	r3,0(r2)
				bul1Left = False;
100025b0:	e0391415 	stw	zero,-7088(fp)
			}
			if(grounded == False){
100025b4:	e0b90f17 	ldw	r2,-7108(fp)
100025b8:	1000051e 	bne	r2,zero,100025d0 <main+0x229c>
				*BUL1_Y = *SAMUS_Y+22;
100025bc:	00808404 	movi	r2,528
100025c0:	00c0e004 	movi	r3,896
100025c4:	18c00017 	ldw	r3,0(r3)
100025c8:	18c00584 	addi	r3,r3,22
100025cc:	10c00015 	stw	r3,0(r2)
			}

			bul1start = 0;
100025d0:	e0391615 	stw	zero,-7080(fp)
			if((keycode&0x0000FF)==0x1A || (keycode&0x00FF00)>>8 == 0x1A || (keycode&0xFF0000)>>16 == 0x1A){
100025d4:	e0b94417 	ldw	r2,-6896(fp)
100025d8:	10803fcc 	andi	r2,r2,255
100025dc:	108006a0 	cmpeqi	r2,r2,26
100025e0:	10000a1e 	bne	r2,zero,1000260c <main+0x22d8>
100025e4:	e0b94417 	ldw	r2,-6896(fp)
100025e8:	10bfc00c 	andi	r2,r2,65280
100025ec:	1005d23a 	srai	r2,r2,8
100025f0:	108006a0 	cmpeqi	r2,r2,26
100025f4:	1000051e 	bne	r2,zero,1000260c <main+0x22d8>
100025f8:	e0b94417 	ldw	r2,-6896(fp)
100025fc:	10803fec 	andhi	r2,r2,255
10002600:	1005d43a 	srai	r2,r2,16
10002604:	10800698 	cmpnei	r2,r2,26
10002608:	10000c1e 	bne	r2,zero,1000263c <main+0x2308>
				bul1Up = True;
1000260c:	00800044 	movi	r2,1
10002610:	e0b91515 	stw	r2,-7084(fp)
				*BUL1_Y = *SAMUS_Y;
10002614:	00808404 	movi	r2,528
10002618:	00c0e004 	movi	r3,896
1000261c:	18c00017 	ldw	r3,0(r3)
10002620:	10c00015 	stw	r3,0(r2)
				*BUL1_X = *SAMUS_X+18;
10002624:	00808804 	movi	r2,544
10002628:	00c0e404 	movi	r3,912
1000262c:	18c00017 	ldw	r3,0(r3)
10002630:	18c00484 	addi	r3,r3,18
10002634:	10c00015 	stw	r3,0(r2)
10002638:	00000106 	br	10002640 <main+0x230c>
			}
			else{
				bul1Up = False;
1000263c:	e0391515 	stw	zero,-7084(fp)
			}
		}
    	bullet_en = False;
10002640:	e0391d15 	stw	zero,-7052(fp)
    }
    //Left collisions
    if(*BUL3_EN == True && bul1Up == False && bul3Left == True && (scene[sceneNum][(*BUL3_Y)/30][(*BUL3_X-8)/30]!=0 || scene[sceneNum][(*BUL3_Y+8)/30][(*BUL3_X-8)/30]!=0)){
10002644:	00807404 	movi	r2,464
10002648:	10800017 	ldw	r2,0(r2)
1000264c:	10800058 	cmpnei	r2,r2,1
10002650:	1000441e 	bne	r2,zero,10002764 <main+0x2430>
10002654:	e0b91517 	ldw	r2,-7084(fp)
10002658:	1000421e 	bne	r2,zero,10002764 <main+0x2430>
1000265c:	e0b91a17 	ldw	r2,-7064(fp)
10002660:	10800058 	cmpnei	r2,r2,1
10002664:	10003f1e 	bne	r2,zero,10002764 <main+0x2430>
10002668:	00806c04 	movi	r2,432
1000266c:	10800017 	ldw	r2,0(r2)
10002670:	1009883a 	mov	r4,r2
10002674:	01400784 	movi	r5,30
10002678:	00074040 	call	10007404 <__divsi3>
1000267c:	1023883a 	mov	r17,r2
10002680:	00807004 	movi	r2,448
10002684:	10800017 	ldw	r2,0(r2)
10002688:	10bffe04 	addi	r2,r2,-8
1000268c:	1009883a 	mov	r4,r2
10002690:	01400784 	movi	r5,30
10002694:	00074040 	call	10007404 <__divsi3>
10002698:	1021883a 	mov	r16,r2
1000269c:	e4b91f17 	ldw	r18,-7044(fp)
100026a0:	8809883a 	mov	r4,r17
100026a4:	01400544 	movi	r5,21
100026a8:	00074c40 	call	100074c4 <__mulsi3>
100026ac:	1023883a 	mov	r17,r2
100026b0:	9009883a 	mov	r4,r18
100026b4:	01405404 	movi	r5,336
100026b8:	00074c40 	call	100074c4 <__mulsi3>
100026bc:	8885883a 	add	r2,r17,r2
100026c0:	1405883a 	add	r2,r2,r16
100026c4:	1085883a 	add	r2,r2,r2
100026c8:	1085883a 	add	r2,r2,r2
100026cc:	e0f90a04 	addi	r3,fp,-7128
100026d0:	1885883a 	add	r2,r3,r2
100026d4:	10806304 	addi	r2,r2,396
100026d8:	10800017 	ldw	r2,0(r2)
100026dc:	10001f1e 	bne	r2,zero,1000275c <main+0x2428>
100026e0:	00806c04 	movi	r2,432
100026e4:	10800017 	ldw	r2,0(r2)
100026e8:	10800204 	addi	r2,r2,8
100026ec:	1009883a 	mov	r4,r2
100026f0:	01400784 	movi	r5,30
100026f4:	00074040 	call	10007404 <__divsi3>
100026f8:	1023883a 	mov	r17,r2
100026fc:	00807004 	movi	r2,448
10002700:	10800017 	ldw	r2,0(r2)
10002704:	10bffe04 	addi	r2,r2,-8
10002708:	1009883a 	mov	r4,r2
1000270c:	01400784 	movi	r5,30
10002710:	00074040 	call	10007404 <__divsi3>
10002714:	1021883a 	mov	r16,r2
10002718:	e4b91f17 	ldw	r18,-7044(fp)
1000271c:	8809883a 	mov	r4,r17
10002720:	01400544 	movi	r5,21
10002724:	00074c40 	call	100074c4 <__mulsi3>
10002728:	1023883a 	mov	r17,r2
1000272c:	9009883a 	mov	r4,r18
10002730:	01405404 	movi	r5,336
10002734:	00074c40 	call	100074c4 <__mulsi3>
10002738:	8885883a 	add	r2,r17,r2
1000273c:	1405883a 	add	r2,r2,r16
10002740:	1085883a 	add	r2,r2,r2
10002744:	1085883a 	add	r2,r2,r2
10002748:	e0f90a04 	addi	r3,fp,-7128
1000274c:	1885883a 	add	r2,r3,r2
10002750:	10806304 	addi	r2,r2,396
10002754:	10800017 	ldw	r2,0(r2)
10002758:	10000226 	beq	r2,zero,10002764 <main+0x2430>
    	*BUL3_EN = False;
1000275c:	00807404 	movi	r2,464
10002760:	10000015 	stw	zero,0(r2)
    }
    if(*BUL1_EN == True && bul1Up == False && bul1Left == True && (scene[sceneNum][(*BUL1_Y)/30][(*BUL1_X-8)/30]!=0 || scene[sceneNum][(*BUL1_Y+8)/30][(*BUL1_X-8)/30]!=0)){
10002764:	00808c04 	movi	r2,560
10002768:	10800017 	ldw	r2,0(r2)
1000276c:	10800058 	cmpnei	r2,r2,1
10002770:	1000441e 	bne	r2,zero,10002884 <main+0x2550>
10002774:	e0b91517 	ldw	r2,-7084(fp)
10002778:	1000421e 	bne	r2,zero,10002884 <main+0x2550>
1000277c:	e0b91417 	ldw	r2,-7088(fp)
10002780:	10800058 	cmpnei	r2,r2,1
10002784:	10003f1e 	bne	r2,zero,10002884 <main+0x2550>
10002788:	00808404 	movi	r2,528
1000278c:	10800017 	ldw	r2,0(r2)
10002790:	1009883a 	mov	r4,r2
10002794:	01400784 	movi	r5,30
10002798:	00074040 	call	10007404 <__divsi3>
1000279c:	1023883a 	mov	r17,r2
100027a0:	00808804 	movi	r2,544
100027a4:	10800017 	ldw	r2,0(r2)
100027a8:	10bffe04 	addi	r2,r2,-8
100027ac:	1009883a 	mov	r4,r2
100027b0:	01400784 	movi	r5,30
100027b4:	00074040 	call	10007404 <__divsi3>
100027b8:	1021883a 	mov	r16,r2
100027bc:	e4b91f17 	ldw	r18,-7044(fp)
100027c0:	8809883a 	mov	r4,r17
100027c4:	01400544 	movi	r5,21
100027c8:	00074c40 	call	100074c4 <__mulsi3>
100027cc:	1023883a 	mov	r17,r2
100027d0:	9009883a 	mov	r4,r18
100027d4:	01405404 	movi	r5,336
100027d8:	00074c40 	call	100074c4 <__mulsi3>
100027dc:	8885883a 	add	r2,r17,r2
100027e0:	1405883a 	add	r2,r2,r16
100027e4:	1085883a 	add	r2,r2,r2
100027e8:	1085883a 	add	r2,r2,r2
100027ec:	e0f90a04 	addi	r3,fp,-7128
100027f0:	1885883a 	add	r2,r3,r2
100027f4:	10806304 	addi	r2,r2,396
100027f8:	10800017 	ldw	r2,0(r2)
100027fc:	10001f1e 	bne	r2,zero,1000287c <main+0x2548>
10002800:	00808404 	movi	r2,528
10002804:	10800017 	ldw	r2,0(r2)
10002808:	10800204 	addi	r2,r2,8
1000280c:	1009883a 	mov	r4,r2
10002810:	01400784 	movi	r5,30
10002814:	00074040 	call	10007404 <__divsi3>
10002818:	1023883a 	mov	r17,r2
1000281c:	00808804 	movi	r2,544
10002820:	10800017 	ldw	r2,0(r2)
10002824:	10bffe04 	addi	r2,r2,-8
10002828:	1009883a 	mov	r4,r2
1000282c:	01400784 	movi	r5,30
10002830:	00074040 	call	10007404 <__divsi3>
10002834:	1021883a 	mov	r16,r2
10002838:	e4b91f17 	ldw	r18,-7044(fp)
1000283c:	8809883a 	mov	r4,r17
10002840:	01400544 	movi	r5,21
10002844:	00074c40 	call	100074c4 <__mulsi3>
10002848:	1023883a 	mov	r17,r2
1000284c:	9009883a 	mov	r4,r18
10002850:	01405404 	movi	r5,336
10002854:	00074c40 	call	100074c4 <__mulsi3>
10002858:	8885883a 	add	r2,r17,r2
1000285c:	1405883a 	add	r2,r2,r16
10002860:	1085883a 	add	r2,r2,r2
10002864:	1085883a 	add	r2,r2,r2
10002868:	e0f90a04 	addi	r3,fp,-7128
1000286c:	1885883a 	add	r2,r3,r2
10002870:	10806304 	addi	r2,r2,396
10002874:	10800017 	ldw	r2,0(r2)
10002878:	10000226 	beq	r2,zero,10002884 <main+0x2550>
		*BUL1_EN = False;
1000287c:	00808c04 	movi	r2,560
10002880:	10000015 	stw	zero,0(r2)
	}
    if(*BUL2_EN == True && bul2Up == False && bul2Left == True && (scene[sceneNum][(*BUL2_Y)/30][(*BUL2_X-8)/30]!=0 || scene[sceneNum][(*BUL2_Y+8)/30][(*BUL2_X-8)/30]!=0)){
10002884:	00808004 	movi	r2,512
10002888:	10800017 	ldw	r2,0(r2)
1000288c:	10800058 	cmpnei	r2,r2,1
10002890:	1000441e 	bne	r2,zero,100029a4 <main+0x2670>
10002894:	e0b91817 	ldw	r2,-7072(fp)
10002898:	1000421e 	bne	r2,zero,100029a4 <main+0x2670>
1000289c:	e0b91717 	ldw	r2,-7076(fp)
100028a0:	10800058 	cmpnei	r2,r2,1
100028a4:	10003f1e 	bne	r2,zero,100029a4 <main+0x2670>
100028a8:	00807804 	movi	r2,480
100028ac:	10800017 	ldw	r2,0(r2)
100028b0:	1009883a 	mov	r4,r2
100028b4:	01400784 	movi	r5,30
100028b8:	00074040 	call	10007404 <__divsi3>
100028bc:	1023883a 	mov	r17,r2
100028c0:	00807c04 	movi	r2,496
100028c4:	10800017 	ldw	r2,0(r2)
100028c8:	10bffe04 	addi	r2,r2,-8
100028cc:	1009883a 	mov	r4,r2
100028d0:	01400784 	movi	r5,30
100028d4:	00074040 	call	10007404 <__divsi3>
100028d8:	1021883a 	mov	r16,r2
100028dc:	e4b91f17 	ldw	r18,-7044(fp)
100028e0:	8809883a 	mov	r4,r17
100028e4:	01400544 	movi	r5,21
100028e8:	00074c40 	call	100074c4 <__mulsi3>
100028ec:	1023883a 	mov	r17,r2
100028f0:	9009883a 	mov	r4,r18
100028f4:	01405404 	movi	r5,336
100028f8:	00074c40 	call	100074c4 <__mulsi3>
100028fc:	8885883a 	add	r2,r17,r2
10002900:	1405883a 	add	r2,r2,r16
10002904:	1085883a 	add	r2,r2,r2
10002908:	1085883a 	add	r2,r2,r2
1000290c:	e0f90a04 	addi	r3,fp,-7128
10002910:	1885883a 	add	r2,r3,r2
10002914:	10806304 	addi	r2,r2,396
10002918:	10800017 	ldw	r2,0(r2)
1000291c:	10001f1e 	bne	r2,zero,1000299c <main+0x2668>
10002920:	00807804 	movi	r2,480
10002924:	10800017 	ldw	r2,0(r2)
10002928:	10800204 	addi	r2,r2,8
1000292c:	1009883a 	mov	r4,r2
10002930:	01400784 	movi	r5,30
10002934:	00074040 	call	10007404 <__divsi3>
10002938:	1023883a 	mov	r17,r2
1000293c:	00807c04 	movi	r2,496
10002940:	10800017 	ldw	r2,0(r2)
10002944:	10bffe04 	addi	r2,r2,-8
10002948:	1009883a 	mov	r4,r2
1000294c:	01400784 	movi	r5,30
10002950:	00074040 	call	10007404 <__divsi3>
10002954:	1021883a 	mov	r16,r2
10002958:	e4b91f17 	ldw	r18,-7044(fp)
1000295c:	8809883a 	mov	r4,r17
10002960:	01400544 	movi	r5,21
10002964:	00074c40 	call	100074c4 <__mulsi3>
10002968:	1023883a 	mov	r17,r2
1000296c:	9009883a 	mov	r4,r18
10002970:	01405404 	movi	r5,336
10002974:	00074c40 	call	100074c4 <__mulsi3>
10002978:	8885883a 	add	r2,r17,r2
1000297c:	1405883a 	add	r2,r2,r16
10002980:	1085883a 	add	r2,r2,r2
10002984:	1085883a 	add	r2,r2,r2
10002988:	e0f90a04 	addi	r3,fp,-7128
1000298c:	1885883a 	add	r2,r3,r2
10002990:	10806304 	addi	r2,r2,396
10002994:	10800017 	ldw	r2,0(r2)
10002998:	10000226 	beq	r2,zero,100029a4 <main+0x2670>
		*BUL2_EN = False;
1000299c:	00808004 	movi	r2,512
100029a0:	10000015 	stw	zero,0(r2)
	}
    //Right collisions
    if(*BUL3_EN == True && bul3Up == False && bul3Left == False && (scene[sceneNum][(*BUL3_Y)/30][(*BUL3_X+18)/30]!=0 || scene[sceneNum][(*BUL3_Y+8)/30][(*BUL3_X+18)/30]!=0)){
100029a4:	00807404 	movi	r2,464
100029a8:	10800017 	ldw	r2,0(r2)
100029ac:	10800058 	cmpnei	r2,r2,1
100029b0:	1000431e 	bne	r2,zero,10002ac0 <main+0x278c>
100029b4:	e0b91b17 	ldw	r2,-7060(fp)
100029b8:	1000411e 	bne	r2,zero,10002ac0 <main+0x278c>
100029bc:	e0b91a17 	ldw	r2,-7064(fp)
100029c0:	10003f1e 	bne	r2,zero,10002ac0 <main+0x278c>
100029c4:	00806c04 	movi	r2,432
100029c8:	10800017 	ldw	r2,0(r2)
100029cc:	1009883a 	mov	r4,r2
100029d0:	01400784 	movi	r5,30
100029d4:	00074040 	call	10007404 <__divsi3>
100029d8:	1023883a 	mov	r17,r2
100029dc:	00807004 	movi	r2,448
100029e0:	10800017 	ldw	r2,0(r2)
100029e4:	10800484 	addi	r2,r2,18
100029e8:	1009883a 	mov	r4,r2
100029ec:	01400784 	movi	r5,30
100029f0:	00074040 	call	10007404 <__divsi3>
100029f4:	1021883a 	mov	r16,r2
100029f8:	e4b91f17 	ldw	r18,-7044(fp)
100029fc:	8809883a 	mov	r4,r17
10002a00:	01400544 	movi	r5,21
10002a04:	00074c40 	call	100074c4 <__mulsi3>
10002a08:	1023883a 	mov	r17,r2
10002a0c:	9009883a 	mov	r4,r18
10002a10:	01405404 	movi	r5,336
10002a14:	00074c40 	call	100074c4 <__mulsi3>
10002a18:	8885883a 	add	r2,r17,r2
10002a1c:	1405883a 	add	r2,r2,r16
10002a20:	1085883a 	add	r2,r2,r2
10002a24:	1085883a 	add	r2,r2,r2
10002a28:	e0f90a04 	addi	r3,fp,-7128
10002a2c:	1885883a 	add	r2,r3,r2
10002a30:	10806304 	addi	r2,r2,396
10002a34:	10800017 	ldw	r2,0(r2)
10002a38:	10001f1e 	bne	r2,zero,10002ab8 <main+0x2784>
10002a3c:	00806c04 	movi	r2,432
10002a40:	10800017 	ldw	r2,0(r2)
10002a44:	10800204 	addi	r2,r2,8
10002a48:	1009883a 	mov	r4,r2
10002a4c:	01400784 	movi	r5,30
10002a50:	00074040 	call	10007404 <__divsi3>
10002a54:	1023883a 	mov	r17,r2
10002a58:	00807004 	movi	r2,448
10002a5c:	10800017 	ldw	r2,0(r2)
10002a60:	10800484 	addi	r2,r2,18
10002a64:	1009883a 	mov	r4,r2
10002a68:	01400784 	movi	r5,30
10002a6c:	00074040 	call	10007404 <__divsi3>
10002a70:	1021883a 	mov	r16,r2
10002a74:	e4b91f17 	ldw	r18,-7044(fp)
10002a78:	8809883a 	mov	r4,r17
10002a7c:	01400544 	movi	r5,21
10002a80:	00074c40 	call	100074c4 <__mulsi3>
10002a84:	1023883a 	mov	r17,r2
10002a88:	9009883a 	mov	r4,r18
10002a8c:	01405404 	movi	r5,336
10002a90:	00074c40 	call	100074c4 <__mulsi3>
10002a94:	8885883a 	add	r2,r17,r2
10002a98:	1405883a 	add	r2,r2,r16
10002a9c:	1085883a 	add	r2,r2,r2
10002aa0:	1085883a 	add	r2,r2,r2
10002aa4:	e0f90a04 	addi	r3,fp,-7128
10002aa8:	1885883a 	add	r2,r3,r2
10002aac:	10806304 	addi	r2,r2,396
10002ab0:	10800017 	ldw	r2,0(r2)
10002ab4:	10000226 	beq	r2,zero,10002ac0 <main+0x278c>
		*BUL3_EN = False;
10002ab8:	00807404 	movi	r2,464
10002abc:	10000015 	stw	zero,0(r2)
	}
	if(*BUL1_EN == True && bul1Up == False && bul1Left == False && (scene[sceneNum][(*BUL1_Y)/30][(*BUL1_X+18)/30]!=0 || scene[sceneNum][(*BUL1_Y+8)/30][((*BUL1_X+18)/30)]!=0)){
10002ac0:	00808c04 	movi	r2,560
10002ac4:	10800017 	ldw	r2,0(r2)
10002ac8:	10800058 	cmpnei	r2,r2,1
10002acc:	1000431e 	bne	r2,zero,10002bdc <main+0x28a8>
10002ad0:	e0b91517 	ldw	r2,-7084(fp)
10002ad4:	1000411e 	bne	r2,zero,10002bdc <main+0x28a8>
10002ad8:	e0b91417 	ldw	r2,-7088(fp)
10002adc:	10003f1e 	bne	r2,zero,10002bdc <main+0x28a8>
10002ae0:	00808404 	movi	r2,528
10002ae4:	10800017 	ldw	r2,0(r2)
10002ae8:	1009883a 	mov	r4,r2
10002aec:	01400784 	movi	r5,30
10002af0:	00074040 	call	10007404 <__divsi3>
10002af4:	1023883a 	mov	r17,r2
10002af8:	00808804 	movi	r2,544
10002afc:	10800017 	ldw	r2,0(r2)
10002b00:	10800484 	addi	r2,r2,18
10002b04:	1009883a 	mov	r4,r2
10002b08:	01400784 	movi	r5,30
10002b0c:	00074040 	call	10007404 <__divsi3>
10002b10:	1021883a 	mov	r16,r2
10002b14:	e4b91f17 	ldw	r18,-7044(fp)
10002b18:	8809883a 	mov	r4,r17
10002b1c:	01400544 	movi	r5,21
10002b20:	00074c40 	call	100074c4 <__mulsi3>
10002b24:	1023883a 	mov	r17,r2
10002b28:	9009883a 	mov	r4,r18
10002b2c:	01405404 	movi	r5,336
10002b30:	00074c40 	call	100074c4 <__mulsi3>
10002b34:	8885883a 	add	r2,r17,r2
10002b38:	1405883a 	add	r2,r2,r16
10002b3c:	1085883a 	add	r2,r2,r2
10002b40:	1085883a 	add	r2,r2,r2
10002b44:	e0f90a04 	addi	r3,fp,-7128
10002b48:	1885883a 	add	r2,r3,r2
10002b4c:	10806304 	addi	r2,r2,396
10002b50:	10800017 	ldw	r2,0(r2)
10002b54:	10001f1e 	bne	r2,zero,10002bd4 <main+0x28a0>
10002b58:	00808404 	movi	r2,528
10002b5c:	10800017 	ldw	r2,0(r2)
10002b60:	10800204 	addi	r2,r2,8
10002b64:	1009883a 	mov	r4,r2
10002b68:	01400784 	movi	r5,30
10002b6c:	00074040 	call	10007404 <__divsi3>
10002b70:	1023883a 	mov	r17,r2
10002b74:	00808804 	movi	r2,544
10002b78:	10800017 	ldw	r2,0(r2)
10002b7c:	10800484 	addi	r2,r2,18
10002b80:	1009883a 	mov	r4,r2
10002b84:	01400784 	movi	r5,30
10002b88:	00074040 	call	10007404 <__divsi3>
10002b8c:	1021883a 	mov	r16,r2
10002b90:	e4b91f17 	ldw	r18,-7044(fp)
10002b94:	8809883a 	mov	r4,r17
10002b98:	01400544 	movi	r5,21
10002b9c:	00074c40 	call	100074c4 <__mulsi3>
10002ba0:	1023883a 	mov	r17,r2
10002ba4:	9009883a 	mov	r4,r18
10002ba8:	01405404 	movi	r5,336
10002bac:	00074c40 	call	100074c4 <__mulsi3>
10002bb0:	8885883a 	add	r2,r17,r2
10002bb4:	1405883a 	add	r2,r2,r16
10002bb8:	1085883a 	add	r2,r2,r2
10002bbc:	1085883a 	add	r2,r2,r2
10002bc0:	e0f90a04 	addi	r3,fp,-7128
10002bc4:	1885883a 	add	r2,r3,r2
10002bc8:	10806304 	addi	r2,r2,396
10002bcc:	10800017 	ldw	r2,0(r2)
10002bd0:	10000226 	beq	r2,zero,10002bdc <main+0x28a8>
		*BUL1_EN = False;
10002bd4:	00808c04 	movi	r2,560
10002bd8:	10000015 	stw	zero,0(r2)
	}
	if(*BUL2_EN == True && bul2Up == False && bul2Left == False && (scene[sceneNum][(*BUL2_Y)/30][(*BUL2_X+18)/30]!=0 || scene[sceneNum][(*BUL2_Y+8)/30][((*BUL2_X+18)/30)]!=0)){
10002bdc:	00808004 	movi	r2,512
10002be0:	10800017 	ldw	r2,0(r2)
10002be4:	10800058 	cmpnei	r2,r2,1
10002be8:	1000431e 	bne	r2,zero,10002cf8 <main+0x29c4>
10002bec:	e0b91817 	ldw	r2,-7072(fp)
10002bf0:	1000411e 	bne	r2,zero,10002cf8 <main+0x29c4>
10002bf4:	e0b91717 	ldw	r2,-7076(fp)
10002bf8:	10003f1e 	bne	r2,zero,10002cf8 <main+0x29c4>
10002bfc:	00807804 	movi	r2,480
10002c00:	10800017 	ldw	r2,0(r2)
10002c04:	1009883a 	mov	r4,r2
10002c08:	01400784 	movi	r5,30
10002c0c:	00074040 	call	10007404 <__divsi3>
10002c10:	1023883a 	mov	r17,r2
10002c14:	00807c04 	movi	r2,496
10002c18:	10800017 	ldw	r2,0(r2)
10002c1c:	10800484 	addi	r2,r2,18
10002c20:	1009883a 	mov	r4,r2
10002c24:	01400784 	movi	r5,30
10002c28:	00074040 	call	10007404 <__divsi3>
10002c2c:	1021883a 	mov	r16,r2
10002c30:	e4b91f17 	ldw	r18,-7044(fp)
10002c34:	8809883a 	mov	r4,r17
10002c38:	01400544 	movi	r5,21
10002c3c:	00074c40 	call	100074c4 <__mulsi3>
10002c40:	1023883a 	mov	r17,r2
10002c44:	9009883a 	mov	r4,r18
10002c48:	01405404 	movi	r5,336
10002c4c:	00074c40 	call	100074c4 <__mulsi3>
10002c50:	8885883a 	add	r2,r17,r2
10002c54:	1405883a 	add	r2,r2,r16
10002c58:	1085883a 	add	r2,r2,r2
10002c5c:	1085883a 	add	r2,r2,r2
10002c60:	e0f90a04 	addi	r3,fp,-7128
10002c64:	1885883a 	add	r2,r3,r2
10002c68:	10806304 	addi	r2,r2,396
10002c6c:	10800017 	ldw	r2,0(r2)
10002c70:	10001f1e 	bne	r2,zero,10002cf0 <main+0x29bc>
10002c74:	00807804 	movi	r2,480
10002c78:	10800017 	ldw	r2,0(r2)
10002c7c:	10800204 	addi	r2,r2,8
10002c80:	1009883a 	mov	r4,r2
10002c84:	01400784 	movi	r5,30
10002c88:	00074040 	call	10007404 <__divsi3>
10002c8c:	1023883a 	mov	r17,r2
10002c90:	00807c04 	movi	r2,496
10002c94:	10800017 	ldw	r2,0(r2)
10002c98:	10800484 	addi	r2,r2,18
10002c9c:	1009883a 	mov	r4,r2
10002ca0:	01400784 	movi	r5,30
10002ca4:	00074040 	call	10007404 <__divsi3>
10002ca8:	1021883a 	mov	r16,r2
10002cac:	e4b91f17 	ldw	r18,-7044(fp)
10002cb0:	8809883a 	mov	r4,r17
10002cb4:	01400544 	movi	r5,21
10002cb8:	00074c40 	call	100074c4 <__mulsi3>
10002cbc:	1023883a 	mov	r17,r2
10002cc0:	9009883a 	mov	r4,r18
10002cc4:	01405404 	movi	r5,336
10002cc8:	00074c40 	call	100074c4 <__mulsi3>
10002ccc:	8885883a 	add	r2,r17,r2
10002cd0:	1405883a 	add	r2,r2,r16
10002cd4:	1085883a 	add	r2,r2,r2
10002cd8:	1085883a 	add	r2,r2,r2
10002cdc:	e0f90a04 	addi	r3,fp,-7128
10002ce0:	1885883a 	add	r2,r3,r2
10002ce4:	10806304 	addi	r2,r2,396
10002ce8:	10800017 	ldw	r2,0(r2)
10002cec:	10000226 	beq	r2,zero,10002cf8 <main+0x29c4>
		*BUL2_EN = False;
10002cf0:	00808004 	movi	r2,512
10002cf4:	10000015 	stw	zero,0(r2)
	}
	//Top collisions
	if(*BUL1_EN == True && bul1Up == True && (scene[sceneNum][(*BUL1_Y-8)/30][(*BUL1_X)/30]!=0 || scene[sceneNum][(*BUL1_Y-8)/30][(*BUL1_X+8)/30]!=0)){
10002cf8:	00808c04 	movi	r2,560
10002cfc:	10800017 	ldw	r2,0(r2)
10002d00:	10800058 	cmpnei	r2,r2,1
10002d04:	1000421e 	bne	r2,zero,10002e10 <main+0x2adc>
10002d08:	e0b91517 	ldw	r2,-7084(fp)
10002d0c:	10800058 	cmpnei	r2,r2,1
10002d10:	10003f1e 	bne	r2,zero,10002e10 <main+0x2adc>
10002d14:	00808404 	movi	r2,528
10002d18:	10800017 	ldw	r2,0(r2)
10002d1c:	10bffe04 	addi	r2,r2,-8
10002d20:	1009883a 	mov	r4,r2
10002d24:	01400784 	movi	r5,30
10002d28:	00074040 	call	10007404 <__divsi3>
10002d2c:	1023883a 	mov	r17,r2
10002d30:	00808804 	movi	r2,544
10002d34:	10800017 	ldw	r2,0(r2)
10002d38:	1009883a 	mov	r4,r2
10002d3c:	01400784 	movi	r5,30
10002d40:	00074040 	call	10007404 <__divsi3>
10002d44:	1021883a 	mov	r16,r2
10002d48:	e4b91f17 	ldw	r18,-7044(fp)
10002d4c:	8809883a 	mov	r4,r17
10002d50:	01400544 	movi	r5,21
10002d54:	00074c40 	call	100074c4 <__mulsi3>
10002d58:	1023883a 	mov	r17,r2
10002d5c:	9009883a 	mov	r4,r18
10002d60:	01405404 	movi	r5,336
10002d64:	00074c40 	call	100074c4 <__mulsi3>
10002d68:	8885883a 	add	r2,r17,r2
10002d6c:	1405883a 	add	r2,r2,r16
10002d70:	1085883a 	add	r2,r2,r2
10002d74:	1085883a 	add	r2,r2,r2
10002d78:	e0f90a04 	addi	r3,fp,-7128
10002d7c:	1885883a 	add	r2,r3,r2
10002d80:	10806304 	addi	r2,r2,396
10002d84:	10800017 	ldw	r2,0(r2)
10002d88:	10001f1e 	bne	r2,zero,10002e08 <main+0x2ad4>
10002d8c:	00808404 	movi	r2,528
10002d90:	10800017 	ldw	r2,0(r2)
10002d94:	10bffe04 	addi	r2,r2,-8
10002d98:	1009883a 	mov	r4,r2
10002d9c:	01400784 	movi	r5,30
10002da0:	00074040 	call	10007404 <__divsi3>
10002da4:	1023883a 	mov	r17,r2
10002da8:	00808804 	movi	r2,544
10002dac:	10800017 	ldw	r2,0(r2)
10002db0:	10800204 	addi	r2,r2,8
10002db4:	1009883a 	mov	r4,r2
10002db8:	01400784 	movi	r5,30
10002dbc:	00074040 	call	10007404 <__divsi3>
10002dc0:	1021883a 	mov	r16,r2
10002dc4:	e4b91f17 	ldw	r18,-7044(fp)
10002dc8:	8809883a 	mov	r4,r17
10002dcc:	01400544 	movi	r5,21
10002dd0:	00074c40 	call	100074c4 <__mulsi3>
10002dd4:	1023883a 	mov	r17,r2
10002dd8:	9009883a 	mov	r4,r18
10002ddc:	01405404 	movi	r5,336
10002de0:	00074c40 	call	100074c4 <__mulsi3>
10002de4:	8885883a 	add	r2,r17,r2
10002de8:	1405883a 	add	r2,r2,r16
10002dec:	1085883a 	add	r2,r2,r2
10002df0:	1085883a 	add	r2,r2,r2
10002df4:	e0f90a04 	addi	r3,fp,-7128
10002df8:	1885883a 	add	r2,r3,r2
10002dfc:	10806304 	addi	r2,r2,396
10002e00:	10800017 	ldw	r2,0(r2)
10002e04:	10000226 	beq	r2,zero,10002e10 <main+0x2adc>
		*BUL1_EN = False;
10002e08:	00808c04 	movi	r2,560
10002e0c:	10000015 	stw	zero,0(r2)
	}
	if(*BUL2_EN == True && bul2Up == True && (scene[sceneNum][(*BUL2_Y-8)/30][(*BUL2_X)/30]!=0 || scene[sceneNum][(*BUL2_Y-8)/30][(*BUL2_X+8)/30]!=0)){
10002e10:	00808004 	movi	r2,512
10002e14:	10800017 	ldw	r2,0(r2)
10002e18:	10800058 	cmpnei	r2,r2,1
10002e1c:	1000421e 	bne	r2,zero,10002f28 <main+0x2bf4>
10002e20:	e0b91817 	ldw	r2,-7072(fp)
10002e24:	10800058 	cmpnei	r2,r2,1
10002e28:	10003f1e 	bne	r2,zero,10002f28 <main+0x2bf4>
10002e2c:	00807804 	movi	r2,480
10002e30:	10800017 	ldw	r2,0(r2)
10002e34:	10bffe04 	addi	r2,r2,-8
10002e38:	1009883a 	mov	r4,r2
10002e3c:	01400784 	movi	r5,30
10002e40:	00074040 	call	10007404 <__divsi3>
10002e44:	1023883a 	mov	r17,r2
10002e48:	00807c04 	movi	r2,496
10002e4c:	10800017 	ldw	r2,0(r2)
10002e50:	1009883a 	mov	r4,r2
10002e54:	01400784 	movi	r5,30
10002e58:	00074040 	call	10007404 <__divsi3>
10002e5c:	1021883a 	mov	r16,r2
10002e60:	e4b91f17 	ldw	r18,-7044(fp)
10002e64:	8809883a 	mov	r4,r17
10002e68:	01400544 	movi	r5,21
10002e6c:	00074c40 	call	100074c4 <__mulsi3>
10002e70:	1023883a 	mov	r17,r2
10002e74:	9009883a 	mov	r4,r18
10002e78:	01405404 	movi	r5,336
10002e7c:	00074c40 	call	100074c4 <__mulsi3>
10002e80:	8885883a 	add	r2,r17,r2
10002e84:	1405883a 	add	r2,r2,r16
10002e88:	1085883a 	add	r2,r2,r2
10002e8c:	1085883a 	add	r2,r2,r2
10002e90:	e0f90a04 	addi	r3,fp,-7128
10002e94:	1885883a 	add	r2,r3,r2
10002e98:	10806304 	addi	r2,r2,396
10002e9c:	10800017 	ldw	r2,0(r2)
10002ea0:	10001f1e 	bne	r2,zero,10002f20 <main+0x2bec>
10002ea4:	00807804 	movi	r2,480
10002ea8:	10800017 	ldw	r2,0(r2)
10002eac:	10bffe04 	addi	r2,r2,-8
10002eb0:	1009883a 	mov	r4,r2
10002eb4:	01400784 	movi	r5,30
10002eb8:	00074040 	call	10007404 <__divsi3>
10002ebc:	1023883a 	mov	r17,r2
10002ec0:	00807c04 	movi	r2,496
10002ec4:	10800017 	ldw	r2,0(r2)
10002ec8:	10800204 	addi	r2,r2,8
10002ecc:	1009883a 	mov	r4,r2
10002ed0:	01400784 	movi	r5,30
10002ed4:	00074040 	call	10007404 <__divsi3>
10002ed8:	1021883a 	mov	r16,r2
10002edc:	e4b91f17 	ldw	r18,-7044(fp)
10002ee0:	8809883a 	mov	r4,r17
10002ee4:	01400544 	movi	r5,21
10002ee8:	00074c40 	call	100074c4 <__mulsi3>
10002eec:	1023883a 	mov	r17,r2
10002ef0:	9009883a 	mov	r4,r18
10002ef4:	01405404 	movi	r5,336
10002ef8:	00074c40 	call	100074c4 <__mulsi3>
10002efc:	8885883a 	add	r2,r17,r2
10002f00:	1405883a 	add	r2,r2,r16
10002f04:	1085883a 	add	r2,r2,r2
10002f08:	1085883a 	add	r2,r2,r2
10002f0c:	e0f90a04 	addi	r3,fp,-7128
10002f10:	1885883a 	add	r2,r3,r2
10002f14:	10806304 	addi	r2,r2,396
10002f18:	10800017 	ldw	r2,0(r2)
10002f1c:	10000226 	beq	r2,zero,10002f28 <main+0x2bf4>
		*BUL2_EN = False;
10002f20:	00808004 	movi	r2,512
10002f24:	10000015 	stw	zero,0(r2)
	}
	if(*BUL3_EN == True && bul3Up == True && (scene[sceneNum][(*BUL3_Y-8)/30][(*BUL3_X)/30]!=0 || scene[sceneNum][(*BUL3_Y-8)/30][(*BUL3_X+8)/30]!=0)){
10002f28:	00807404 	movi	r2,464
10002f2c:	10800017 	ldw	r2,0(r2)
10002f30:	10800058 	cmpnei	r2,r2,1
10002f34:	1000421e 	bne	r2,zero,10003040 <main+0x2d0c>
10002f38:	e0b91b17 	ldw	r2,-7060(fp)
10002f3c:	10800058 	cmpnei	r2,r2,1
10002f40:	10003f1e 	bne	r2,zero,10003040 <main+0x2d0c>
10002f44:	00806c04 	movi	r2,432
10002f48:	10800017 	ldw	r2,0(r2)
10002f4c:	10bffe04 	addi	r2,r2,-8
10002f50:	1009883a 	mov	r4,r2
10002f54:	01400784 	movi	r5,30
10002f58:	00074040 	call	10007404 <__divsi3>
10002f5c:	1023883a 	mov	r17,r2
10002f60:	00807004 	movi	r2,448
10002f64:	10800017 	ldw	r2,0(r2)
10002f68:	1009883a 	mov	r4,r2
10002f6c:	01400784 	movi	r5,30
10002f70:	00074040 	call	10007404 <__divsi3>
10002f74:	1021883a 	mov	r16,r2
10002f78:	e4b91f17 	ldw	r18,-7044(fp)
10002f7c:	8809883a 	mov	r4,r17
10002f80:	01400544 	movi	r5,21
10002f84:	00074c40 	call	100074c4 <__mulsi3>
10002f88:	1023883a 	mov	r17,r2
10002f8c:	9009883a 	mov	r4,r18
10002f90:	01405404 	movi	r5,336
10002f94:	00074c40 	call	100074c4 <__mulsi3>
10002f98:	8885883a 	add	r2,r17,r2
10002f9c:	1405883a 	add	r2,r2,r16
10002fa0:	1085883a 	add	r2,r2,r2
10002fa4:	1085883a 	add	r2,r2,r2
10002fa8:	e0f90a04 	addi	r3,fp,-7128
10002fac:	1885883a 	add	r2,r3,r2
10002fb0:	10806304 	addi	r2,r2,396
10002fb4:	10800017 	ldw	r2,0(r2)
10002fb8:	10001f1e 	bne	r2,zero,10003038 <main+0x2d04>
10002fbc:	00806c04 	movi	r2,432
10002fc0:	10800017 	ldw	r2,0(r2)
10002fc4:	10bffe04 	addi	r2,r2,-8
10002fc8:	1009883a 	mov	r4,r2
10002fcc:	01400784 	movi	r5,30
10002fd0:	00074040 	call	10007404 <__divsi3>
10002fd4:	1023883a 	mov	r17,r2
10002fd8:	00807004 	movi	r2,448
10002fdc:	10800017 	ldw	r2,0(r2)
10002fe0:	10800204 	addi	r2,r2,8
10002fe4:	1009883a 	mov	r4,r2
10002fe8:	01400784 	movi	r5,30
10002fec:	00074040 	call	10007404 <__divsi3>
10002ff0:	1021883a 	mov	r16,r2
10002ff4:	e4b91f17 	ldw	r18,-7044(fp)
10002ff8:	8809883a 	mov	r4,r17
10002ffc:	01400544 	movi	r5,21
10003000:	00074c40 	call	100074c4 <__mulsi3>
10003004:	1023883a 	mov	r17,r2
10003008:	9009883a 	mov	r4,r18
1000300c:	01405404 	movi	r5,336
10003010:	00074c40 	call	100074c4 <__mulsi3>
10003014:	8885883a 	add	r2,r17,r2
10003018:	1405883a 	add	r2,r2,r16
1000301c:	1085883a 	add	r2,r2,r2
10003020:	1085883a 	add	r2,r2,r2
10003024:	e0f90a04 	addi	r3,fp,-7128
10003028:	1885883a 	add	r2,r3,r2
1000302c:	10806304 	addi	r2,r2,396
10003030:	10800017 	ldw	r2,0(r2)
10003034:	10000226 	beq	r2,zero,10003040 <main+0x2d0c>
		*BUL3_EN = False;
10003038:	00807404 	movi	r2,464
1000303c:	10000015 	stw	zero,0(r2)
	}

    if(*BUL3_EN == True){
10003040:	00807404 	movi	r2,464
10003044:	10800017 	ldw	r2,0(r2)
10003048:	10800058 	cmpnei	r2,r2,1
1000304c:	1000241e 	bne	r2,zero,100030e0 <main+0x2dac>
    	if(bul3start >= bul_max_length)
10003050:	e0f91c17 	ldw	r3,-7056(fp)
10003054:	e0b91e17 	ldw	r2,-7048(fp)
10003058:	18800316 	blt	r3,r2,10003068 <main+0x2d34>
    		*BUL3_EN = False;
1000305c:	00807404 	movi	r2,464
10003060:	10000015 	stw	zero,0(r2)
10003064:	00001e06 	br	100030e0 <main+0x2dac>
    	else{
    		if(bul3Up == True){
10003068:	e0b91b17 	ldw	r2,-7060(fp)
1000306c:	10800058 	cmpnei	r2,r2,1
10003070:	1000071e 	bne	r2,zero,10003090 <main+0x2d5c>
    			*BUL3_Y -= bulinc;
10003074:	00806c04 	movi	r2,432
10003078:	00c06c04 	movi	r3,432
1000307c:	19000017 	ldw	r4,0(r3)
10003080:	e0f94b17 	ldw	r3,-6868(fp)
10003084:	20c7c83a 	sub	r3,r4,r3
10003088:	10c00015 	stw	r3,0(r2)
1000308c:	00001006 	br	100030d0 <main+0x2d9c>
    		}
    		else if(bul3Left == True){
10003090:	e0b91a17 	ldw	r2,-7064(fp)
10003094:	10800058 	cmpnei	r2,r2,1
10003098:	1000071e 	bne	r2,zero,100030b8 <main+0x2d84>
    			*BUL3_X -= bulinc;
1000309c:	00807004 	movi	r2,448
100030a0:	00c07004 	movi	r3,448
100030a4:	19000017 	ldw	r4,0(r3)
100030a8:	e0f94b17 	ldw	r3,-6868(fp)
100030ac:	20c7c83a 	sub	r3,r4,r3
100030b0:	10c00015 	stw	r3,0(r2)
100030b4:	00000606 	br	100030d0 <main+0x2d9c>
    		}
    		else{
    			*BUL3_X += bulinc;
100030b8:	00807004 	movi	r2,448
100030bc:	00c07004 	movi	r3,448
100030c0:	19000017 	ldw	r4,0(r3)
100030c4:	e0f94b17 	ldw	r3,-6868(fp)
100030c8:	20c7883a 	add	r3,r4,r3
100030cc:	10c00015 	stw	r3,0(r2)
    		}
    		bul3start += bulinc;
100030d0:	e0f91c17 	ldw	r3,-7056(fp)
100030d4:	e0b94b17 	ldw	r2,-6868(fp)
100030d8:	1885883a 	add	r2,r3,r2
100030dc:	e0b91c15 	stw	r2,-7056(fp)
    	}
    }
    if(*BUL2_EN == True){
100030e0:	00808004 	movi	r2,512
100030e4:	10800017 	ldw	r2,0(r2)
100030e8:	10800058 	cmpnei	r2,r2,1
100030ec:	1000241e 	bne	r2,zero,10003180 <main+0x2e4c>
		if(bul2start >= bul_max_length)
100030f0:	e0f91917 	ldw	r3,-7068(fp)
100030f4:	e0b91e17 	ldw	r2,-7048(fp)
100030f8:	18800316 	blt	r3,r2,10003108 <main+0x2dd4>
			*BUL2_EN = False;
100030fc:	00808004 	movi	r2,512
10003100:	10000015 	stw	zero,0(r2)
10003104:	00001e06 	br	10003180 <main+0x2e4c>
		else{
			if(bul2Up == True){
10003108:	e0b91817 	ldw	r2,-7072(fp)
1000310c:	10800058 	cmpnei	r2,r2,1
10003110:	1000071e 	bne	r2,zero,10003130 <main+0x2dfc>
				*BUL2_Y -= bulinc;
10003114:	00807804 	movi	r2,480
10003118:	00c07804 	movi	r3,480
1000311c:	19000017 	ldw	r4,0(r3)
10003120:	e0f94b17 	ldw	r3,-6868(fp)
10003124:	20c7c83a 	sub	r3,r4,r3
10003128:	10c00015 	stw	r3,0(r2)
1000312c:	00001006 	br	10003170 <main+0x2e3c>
			}
			else if(bul2Left == True){
10003130:	e0b91717 	ldw	r2,-7076(fp)
10003134:	10800058 	cmpnei	r2,r2,1
10003138:	1000071e 	bne	r2,zero,10003158 <main+0x2e24>
				*BUL2_X -= bulinc;
1000313c:	00807c04 	movi	r2,496
10003140:	00c07c04 	movi	r3,496
10003144:	19000017 	ldw	r4,0(r3)
10003148:	e0f94b17 	ldw	r3,-6868(fp)
1000314c:	20c7c83a 	sub	r3,r4,r3
10003150:	10c00015 	stw	r3,0(r2)
10003154:	00000606 	br	10003170 <main+0x2e3c>
			}
			else{
				*BUL2_X += bulinc;
10003158:	00807c04 	movi	r2,496
1000315c:	00c07c04 	movi	r3,496
10003160:	19000017 	ldw	r4,0(r3)
10003164:	e0f94b17 	ldw	r3,-6868(fp)
10003168:	20c7883a 	add	r3,r4,r3
1000316c:	10c00015 	stw	r3,0(r2)
			}
			bul2start += bulinc;
10003170:	e0f91917 	ldw	r3,-7068(fp)
10003174:	e0b94b17 	ldw	r2,-6868(fp)
10003178:	1885883a 	add	r2,r3,r2
1000317c:	e0b91915 	stw	r2,-7068(fp)
		}
	}
    if(*BUL1_EN == True){
10003180:	00808c04 	movi	r2,560
10003184:	10800017 	ldw	r2,0(r2)
10003188:	10800058 	cmpnei	r2,r2,1
1000318c:	1000241e 	bne	r2,zero,10003220 <main+0x2eec>
		if(bul1start >= bul_max_length)
10003190:	e0f91617 	ldw	r3,-7080(fp)
10003194:	e0b91e17 	ldw	r2,-7048(fp)
10003198:	18800316 	blt	r3,r2,100031a8 <main+0x2e74>
			*BUL1_EN = False;
1000319c:	00808c04 	movi	r2,560
100031a0:	10000015 	stw	zero,0(r2)
100031a4:	00001e06 	br	10003220 <main+0x2eec>
		else{
			if(bul1Up == True){
100031a8:	e0b91517 	ldw	r2,-7084(fp)
100031ac:	10800058 	cmpnei	r2,r2,1
100031b0:	1000071e 	bne	r2,zero,100031d0 <main+0x2e9c>
				*BUL1_Y -= bulinc;
100031b4:	00808404 	movi	r2,528
100031b8:	00c08404 	movi	r3,528
100031bc:	19000017 	ldw	r4,0(r3)
100031c0:	e0f94b17 	ldw	r3,-6868(fp)
100031c4:	20c7c83a 	sub	r3,r4,r3
100031c8:	10c00015 	stw	r3,0(r2)
100031cc:	00001006 	br	10003210 <main+0x2edc>
			}
			else if(bul1Left == True){
100031d0:	e0b91417 	ldw	r2,-7088(fp)
100031d4:	10800058 	cmpnei	r2,r2,1
100031d8:	1000071e 	bne	r2,zero,100031f8 <main+0x2ec4>
				*BUL1_X -= bulinc;
100031dc:	00808804 	movi	r2,544
100031e0:	00c08804 	movi	r3,544
100031e4:	19000017 	ldw	r4,0(r3)
100031e8:	e0f94b17 	ldw	r3,-6868(fp)
100031ec:	20c7c83a 	sub	r3,r4,r3
100031f0:	10c00015 	stw	r3,0(r2)
100031f4:	00000606 	br	10003210 <main+0x2edc>
			}
			else{
				*BUL1_X += bulinc;
100031f8:	00808804 	movi	r2,544
100031fc:	00c08804 	movi	r3,544
10003200:	19000017 	ldw	r4,0(r3)
10003204:	e0f94b17 	ldw	r3,-6868(fp)
10003208:	20c7883a 	add	r3,r4,r3
1000320c:	10c00015 	stw	r3,0(r2)
			}
			bul1start += bulinc;
10003210:	e0f91617 	ldw	r3,-7080(fp)
10003214:	e0b94b17 	ldw	r2,-6868(fp)
10003218:	1885883a 	add	r2,r3,r2
1000321c:	e0b91615 	stw	r2,-7080(fp)
		}
	}

    if(sceneNum >= 3){
10003220:	e0b91f17 	ldw	r2,-7044(fp)
10003224:	108000d0 	cmplti	r2,r2,3
10003228:	1000061e 	bne	r2,zero,10003244 <main+0x2f10>
    	bul_max_length = 180;
1000322c:	00802d04 	movi	r2,180
10003230:	e0b91e15 	stw	r2,-7048(fp)
    	*BUL_EM = 1;
10003234:	00804c04 	movi	r2,304
10003238:	00c00044 	movi	r3,1
1000323c:	10c00015 	stw	r3,0(r2)
10003240:	00000406 	br	10003254 <main+0x2f20>
    }
    else{
    	bul_max_length = 90;
10003244:	00801684 	movi	r2,90
10003248:	e0b91e15 	stw	r2,-7048(fp)
    	*BUL_EM = 0;
1000324c:	00804c04 	movi	r2,304
10003250:	10000015 	stw	zero,0(r2)
    }


    //monsters code
    *MON1_X = monster1_1_x;
10003254:	0080d004 	movi	r2,832
10003258:	e0f92117 	ldw	r3,-7036(fp)
1000325c:	10c00015 	stw	r3,0(r2)
    *MON1_Y = monster1_1_y;
10003260:	0080cc04 	movi	r2,816
10003264:	e0f92217 	ldw	r3,-7032(fp)
10003268:	10c00015 	stw	r3,0(r2)
    if(*MON1_EN == True){
1000326c:	0080d404 	movi	r2,848
10003270:	10800003 	ldbu	r2,0(r2)
10003274:	10803fcc 	andi	r2,r2,255
10003278:	1080201c 	xori	r2,r2,128
1000327c:	10bfe004 	addi	r2,r2,-128
10003280:	10800058 	cmpnei	r2,r2,1
10003284:	10000a1e 	bne	r2,zero,100032b0 <main+0x2f7c>
		if(monster1_1_left == True){
10003288:	e0b92317 	ldw	r2,-7028(fp)
1000328c:	10800058 	cmpnei	r2,r2,1
10003290:	1000041e 	bne	r2,zero,100032a4 <main+0x2f70>
			monster1_1_x-=2;
10003294:	e0b92117 	ldw	r2,-7036(fp)
10003298:	10bfff84 	addi	r2,r2,-2
1000329c:	e0b92115 	stw	r2,-7036(fp)
100032a0:	00000306 	br	100032b0 <main+0x2f7c>
		}
		else{
			monster1_1_x+=2;
100032a4:	e0b92117 	ldw	r2,-7036(fp)
100032a8:	10800084 	addi	r2,r2,2
100032ac:	e0b92115 	stw	r2,-7036(fp)
		}
    }
    //Monster 1
    if(scene[sceneNum][(monster1_1_y+35)/30][monster1_1_x/30]==0){
100032b0:	e0b92217 	ldw	r2,-7032(fp)
100032b4:	108008c4 	addi	r2,r2,35
100032b8:	1009883a 	mov	r4,r2
100032bc:	01400784 	movi	r5,30
100032c0:	00074040 	call	10007404 <__divsi3>
100032c4:	1023883a 	mov	r17,r2
100032c8:	e0b92117 	ldw	r2,-7036(fp)
100032cc:	1009883a 	mov	r4,r2
100032d0:	01400784 	movi	r5,30
100032d4:	00074040 	call	10007404 <__divsi3>
100032d8:	1021883a 	mov	r16,r2
100032dc:	e4b91f17 	ldw	r18,-7044(fp)
100032e0:	8809883a 	mov	r4,r17
100032e4:	01400544 	movi	r5,21
100032e8:	00074c40 	call	100074c4 <__mulsi3>
100032ec:	1023883a 	mov	r17,r2
100032f0:	9009883a 	mov	r4,r18
100032f4:	01405404 	movi	r5,336
100032f8:	00074c40 	call	100074c4 <__mulsi3>
100032fc:	8885883a 	add	r2,r17,r2
10003300:	1405883a 	add	r2,r2,r16
10003304:	1085883a 	add	r2,r2,r2
10003308:	1085883a 	add	r2,r2,r2
1000330c:	e0f90a04 	addi	r3,fp,-7128
10003310:	1885883a 	add	r2,r3,r2
10003314:	10806304 	addi	r2,r2,396
10003318:	10800017 	ldw	r2,0(r2)
1000331c:	1000021e 	bne	r2,zero,10003328 <main+0x2ff4>
    	monster1_1_left = False;
10003320:	e0392315 	stw	zero,-7028(fp)
10003324:	00001f06 	br	100033a4 <main+0x3070>
    }
    else if(scene[sceneNum][(monster1_1_y+35)/30][(monster1_1_x+30)/30]==0){
10003328:	e0b92217 	ldw	r2,-7032(fp)
1000332c:	108008c4 	addi	r2,r2,35
10003330:	1009883a 	mov	r4,r2
10003334:	01400784 	movi	r5,30
10003338:	00074040 	call	10007404 <__divsi3>
1000333c:	1023883a 	mov	r17,r2
10003340:	e0b92117 	ldw	r2,-7036(fp)
10003344:	10800784 	addi	r2,r2,30
10003348:	1009883a 	mov	r4,r2
1000334c:	01400784 	movi	r5,30
10003350:	00074040 	call	10007404 <__divsi3>
10003354:	1021883a 	mov	r16,r2
10003358:	e4b91f17 	ldw	r18,-7044(fp)
1000335c:	8809883a 	mov	r4,r17
10003360:	01400544 	movi	r5,21
10003364:	00074c40 	call	100074c4 <__mulsi3>
10003368:	1023883a 	mov	r17,r2
1000336c:	9009883a 	mov	r4,r18
10003370:	01405404 	movi	r5,336
10003374:	00074c40 	call	100074c4 <__mulsi3>
10003378:	8885883a 	add	r2,r17,r2
1000337c:	1405883a 	add	r2,r2,r16
10003380:	1085883a 	add	r2,r2,r2
10003384:	1085883a 	add	r2,r2,r2
10003388:	e0f90a04 	addi	r3,fp,-7128
1000338c:	1885883a 	add	r2,r3,r2
10003390:	10806304 	addi	r2,r2,396
10003394:	10800017 	ldw	r2,0(r2)
10003398:	1000021e 	bne	r2,zero,100033a4 <main+0x3070>
    	monster1_1_left = True;
1000339c:	00800044 	movi	r2,1
100033a0:	e0b92315 	stw	r2,-7028(fp)
    }
    //Monster 2
    *MON2_X = monster2_1_x;
100033a4:	0080c404 	movi	r2,784
100033a8:	e0f92517 	ldw	r3,-7020(fp)
100033ac:	10c00015 	stw	r3,0(r2)
	*MON2_Y = monster2_1_y;
100033b0:	0080c004 	movi	r2,768
100033b4:	e0f92617 	ldw	r3,-7016(fp)
100033b8:	10c00015 	stw	r3,0(r2)
	if(*MON2_EN == True){
100033bc:	0080c804 	movi	r2,800
100033c0:	10800003 	ldbu	r2,0(r2)
100033c4:	10803fcc 	andi	r2,r2,255
100033c8:	1080201c 	xori	r2,r2,128
100033cc:	10bfe004 	addi	r2,r2,-128
100033d0:	10800058 	cmpnei	r2,r2,1
100033d4:	1000101e 	bne	r2,zero,10003418 <main+0x30e4>
		if(monster2_1_left == True && mon2_at_top == False){
100033d8:	e0b92717 	ldw	r2,-7012(fp)
100033dc:	10800058 	cmpnei	r2,r2,1
100033e0:	1000061e 	bne	r2,zero,100033fc <main+0x30c8>
100033e4:	e0b92917 	ldw	r2,-7004(fp)
100033e8:	1000041e 	bne	r2,zero,100033fc <main+0x30c8>
			monster2_1_x-=3;
100033ec:	e0b92517 	ldw	r2,-7020(fp)
100033f0:	10bfff44 	addi	r2,r2,-3
100033f4:	e0b92515 	stw	r2,-7020(fp)
100033f8:	00000706 	br	10003418 <main+0x30e4>
		}
		else if(monster2_1_left == False && mon2_at_top == False){
100033fc:	e0b92717 	ldw	r2,-7012(fp)
10003400:	1000051e 	bne	r2,zero,10003418 <main+0x30e4>
10003404:	e0b92917 	ldw	r2,-7004(fp)
10003408:	1000031e 	bne	r2,zero,10003418 <main+0x30e4>
			monster2_1_x+=3;
1000340c:	e0b92517 	ldw	r2,-7020(fp)
10003410:	108000c4 	addi	r2,r2,3
10003414:	e0b92515 	stw	r2,-7020(fp)
		}
	}
	//Monster 3
	*MON3_X = monster3_1_x;
10003418:	0080b804 	movi	r2,736
1000341c:	e0f92d17 	ldw	r3,-6988(fp)
10003420:	10c00015 	stw	r3,0(r2)
	*MON3_Y = monster3_1_y;
10003424:	0080b404 	movi	r2,720
10003428:	e0f92e17 	ldw	r3,-6984(fp)
1000342c:	10c00015 	stw	r3,0(r2)
	if(*MON3_EN == True){
10003430:	0080bc04 	movi	r2,752
10003434:	10800003 	ldbu	r2,0(r2)
10003438:	10803fcc 	andi	r2,r2,255
1000343c:	1080201c 	xori	r2,r2,128
10003440:	10bfe004 	addi	r2,r2,-128
10003444:	10800058 	cmpnei	r2,r2,1
10003448:	10000a1e 	bne	r2,zero,10003474 <main+0x3140>
		if(monster3_1_left == True){
1000344c:	e0b92f17 	ldw	r2,-6980(fp)
10003450:	10800058 	cmpnei	r2,r2,1
10003454:	1000041e 	bne	r2,zero,10003468 <main+0x3134>
			monster3_1_x-=5;
10003458:	e0b92d17 	ldw	r2,-6988(fp)
1000345c:	10bffec4 	addi	r2,r2,-5
10003460:	e0b92d15 	stw	r2,-6988(fp)
10003464:	00000306 	br	10003474 <main+0x3140>
		}
		else{
			monster3_1_x+=5;
10003468:	e0b92d17 	ldw	r2,-6988(fp)
1000346c:	10800144 	addi	r2,r2,5
10003470:	e0b92d15 	stw	r2,-6988(fp)
		}
	}
	//Kraid
	if(*KRAID_G_EN == True || *KRAID_R_EN == True || *KRAID_N_EN == True){
10003474:	00804004 	movi	r2,256
10003478:	10800017 	ldw	r2,0(r2)
1000347c:	10800060 	cmpeqi	r2,r2,1
10003480:	1000081e 	bne	r2,zero,100034a4 <main+0x3170>
10003484:	00803c04 	movi	r2,240
10003488:	10800017 	ldw	r2,0(r2)
1000348c:	10800060 	cmpeqi	r2,r2,1
10003490:	1000041e 	bne	r2,zero,100034a4 <main+0x3170>
10003494:	00803804 	movi	r2,224
10003498:	10800017 	ldw	r2,0(r2)
1000349c:	10800058 	cmpnei	r2,r2,1
100034a0:	10002a1e 	bne	r2,zero,1000354c <main+0x3218>
		if(kraid_move_left == False){
100034a4:	e0b93217 	ldw	r2,-6968(fp)
100034a8:	1000091e 	bne	r2,zero,100034d0 <main+0x319c>
			*KRAID_X+=4;
100034ac:	00802804 	movi	r2,160
100034b0:	00c02804 	movi	r3,160
100034b4:	18c00017 	ldw	r3,0(r3)
100034b8:	18c00104 	addi	r3,r3,4
100034bc:	10c00015 	stw	r3,0(r2)
			kraid_move_counter-=7;
100034c0:	e0b93117 	ldw	r2,-6972(fp)
100034c4:	10bffe44 	addi	r2,r2,-7
100034c8:	e0b93115 	stw	r2,-6972(fp)
100034cc:	00000806 	br	100034f0 <main+0x31bc>
		}
		else{
			*KRAID_X-=4;
100034d0:	00802804 	movi	r2,160
100034d4:	00c02804 	movi	r3,160
100034d8:	18c00017 	ldw	r3,0(r3)
100034dc:	18ffff04 	addi	r3,r3,-4
100034e0:	10c00015 	stw	r3,0(r2)
			kraid_move_counter-=7;
100034e4:	e0b93117 	ldw	r2,-6972(fp)
100034e8:	10bffe44 	addi	r2,r2,-7
100034ec:	e0b93115 	stw	r2,-6972(fp)
		}
		if(kraid_move_counter < 0 || *KRAID_X < 200 || *KRAID_X > 550){
100034f0:	e0b93117 	ldw	r2,-6972(fp)
100034f4:	10000816 	blt	r2,zero,10003518 <main+0x31e4>
100034f8:	00802804 	movi	r2,160
100034fc:	10800017 	ldw	r2,0(r2)
10003500:	10803210 	cmplti	r2,r2,200
10003504:	1000041e 	bne	r2,zero,10003518 <main+0x31e4>
10003508:	00802804 	movi	r2,160
1000350c:	10800017 	ldw	r2,0(r2)
10003510:	108089d0 	cmplti	r2,r2,551
10003514:	10000d1e 	bne	r2,zero,1000354c <main+0x3218>
			if(kraid_move_left == True){
10003518:	e0b93217 	ldw	r2,-6968(fp)
1000351c:	10800058 	cmpnei	r2,r2,1
10003520:	1000021e 	bne	r2,zero,1000352c <main+0x31f8>
				kraid_move_left = False;
10003524:	e0393215 	stw	zero,-6968(fp)
10003528:	00000206 	br	10003534 <main+0x3200>
			}
			else{
				kraid_move_left = True;
1000352c:	00800044 	movi	r2,1
10003530:	e0b93215 	stw	r2,-6968(fp)
			}
			kraid_move_counter = rand()%200+50;
10003534:	0009d000 	call	10009d00 <rand>
10003538:	1009883a 	mov	r4,r2
1000353c:	01403204 	movi	r5,200
10003540:	00074580 	call	10007458 <__modsi3>
10003544:	10800c84 	addi	r2,r2,50
10003548:	e0b93115 	stw	r2,-6972(fp)
		}
	}

	if(*SAMUS_X > *KRAID_X+20){
1000354c:	0080e404 	movi	r2,912
10003550:	10800017 	ldw	r2,0(r2)
10003554:	00c02804 	movi	r3,160
10003558:	18c00017 	ldw	r3,0(r3)
1000355c:	18c00504 	addi	r3,r3,20
10003560:	1880030e 	bge	r3,r2,10003570 <main+0x323c>
		*KRAID_DIR = 0;
10003564:	00804404 	movi	r2,272
10003568:	10000015 	stw	zero,0(r2)
1000356c:	00000306 	br	1000357c <main+0x3248>
	}
	else{
		*KRAID_DIR = 1;
10003570:	00804404 	movi	r2,272
10003574:	00c00044 	movi	r3,1
10003578:	10c00015 	stw	r3,0(r2)
	}


	//Monster 1 collision detection
	if(scene[sceneNum][(monster1_1_y+35)/30][monster1_1_x/30]==0){
1000357c:	e0b92217 	ldw	r2,-7032(fp)
10003580:	108008c4 	addi	r2,r2,35
10003584:	1009883a 	mov	r4,r2
10003588:	01400784 	movi	r5,30
1000358c:	00074040 	call	10007404 <__divsi3>
10003590:	1023883a 	mov	r17,r2
10003594:	e0b92117 	ldw	r2,-7036(fp)
10003598:	1009883a 	mov	r4,r2
1000359c:	01400784 	movi	r5,30
100035a0:	00074040 	call	10007404 <__divsi3>
100035a4:	1021883a 	mov	r16,r2
100035a8:	e4b91f17 	ldw	r18,-7044(fp)
100035ac:	8809883a 	mov	r4,r17
100035b0:	01400544 	movi	r5,21
100035b4:	00074c40 	call	100074c4 <__mulsi3>
100035b8:	1023883a 	mov	r17,r2
100035bc:	9009883a 	mov	r4,r18
100035c0:	01405404 	movi	r5,336
100035c4:	00074c40 	call	100074c4 <__mulsi3>
100035c8:	8885883a 	add	r2,r17,r2
100035cc:	1405883a 	add	r2,r2,r16
100035d0:	1085883a 	add	r2,r2,r2
100035d4:	1085883a 	add	r2,r2,r2
100035d8:	e0f90a04 	addi	r3,fp,-7128
100035dc:	1885883a 	add	r2,r3,r2
100035e0:	10806304 	addi	r2,r2,396
100035e4:	10800017 	ldw	r2,0(r2)
100035e8:	1000021e 	bne	r2,zero,100035f4 <main+0x32c0>
		monster1_1_left = False;
100035ec:	e0392315 	stw	zero,-7028(fp)
100035f0:	00001f06 	br	10003670 <main+0x333c>
	}
	else if(scene[sceneNum][(monster1_1_y+35)/30][(monster1_1_x+30)/30]==0){
100035f4:	e0b92217 	ldw	r2,-7032(fp)
100035f8:	108008c4 	addi	r2,r2,35
100035fc:	1009883a 	mov	r4,r2
10003600:	01400784 	movi	r5,30
10003604:	00074040 	call	10007404 <__divsi3>
10003608:	1023883a 	mov	r17,r2
1000360c:	e0b92117 	ldw	r2,-7036(fp)
10003610:	10800784 	addi	r2,r2,30
10003614:	1009883a 	mov	r4,r2
10003618:	01400784 	movi	r5,30
1000361c:	00074040 	call	10007404 <__divsi3>
10003620:	1021883a 	mov	r16,r2
10003624:	e4b91f17 	ldw	r18,-7044(fp)
10003628:	8809883a 	mov	r4,r17
1000362c:	01400544 	movi	r5,21
10003630:	00074c40 	call	100074c4 <__mulsi3>
10003634:	1023883a 	mov	r17,r2
10003638:	9009883a 	mov	r4,r18
1000363c:	01405404 	movi	r5,336
10003640:	00074c40 	call	100074c4 <__mulsi3>
10003644:	8885883a 	add	r2,r17,r2
10003648:	1405883a 	add	r2,r2,r16
1000364c:	1085883a 	add	r2,r2,r2
10003650:	1085883a 	add	r2,r2,r2
10003654:	e0f90a04 	addi	r3,fp,-7128
10003658:	1885883a 	add	r2,r3,r2
1000365c:	10806304 	addi	r2,r2,396
10003660:	10800017 	ldw	r2,0(r2)
10003664:	1000021e 	bne	r2,zero,10003670 <main+0x333c>
		monster1_1_left = True;
10003668:	00800044 	movi	r2,1
1000366c:	e0b92315 	stw	r2,-7028(fp)
	}
	//Monster 2 collision detection
	if(scene[sceneNum][(monster2_1_y+25)/30][monster2_1_x/30]!=0 || scene[sceneNum][(monster2_1_y)/30][monster2_1_x/30]!=0){
10003670:	e0b92617 	ldw	r2,-7016(fp)
10003674:	10800644 	addi	r2,r2,25
10003678:	1009883a 	mov	r4,r2
1000367c:	01400784 	movi	r5,30
10003680:	00074040 	call	10007404 <__divsi3>
10003684:	1023883a 	mov	r17,r2
10003688:	e0b92517 	ldw	r2,-7020(fp)
1000368c:	1009883a 	mov	r4,r2
10003690:	01400784 	movi	r5,30
10003694:	00074040 	call	10007404 <__divsi3>
10003698:	1021883a 	mov	r16,r2
1000369c:	e4b91f17 	ldw	r18,-7044(fp)
100036a0:	8809883a 	mov	r4,r17
100036a4:	01400544 	movi	r5,21
100036a8:	00074c40 	call	100074c4 <__mulsi3>
100036ac:	1023883a 	mov	r17,r2
100036b0:	9009883a 	mov	r4,r18
100036b4:	01405404 	movi	r5,336
100036b8:	00074c40 	call	100074c4 <__mulsi3>
100036bc:	8885883a 	add	r2,r17,r2
100036c0:	1405883a 	add	r2,r2,r16
100036c4:	1085883a 	add	r2,r2,r2
100036c8:	1085883a 	add	r2,r2,r2
100036cc:	e0f90a04 	addi	r3,fp,-7128
100036d0:	1885883a 	add	r2,r3,r2
100036d4:	10806304 	addi	r2,r2,396
100036d8:	10800017 	ldw	r2,0(r2)
100036dc:	10001b1e 	bne	r2,zero,1000374c <main+0x3418>
100036e0:	e0b92617 	ldw	r2,-7016(fp)
100036e4:	1009883a 	mov	r4,r2
100036e8:	01400784 	movi	r5,30
100036ec:	00074040 	call	10007404 <__divsi3>
100036f0:	1023883a 	mov	r17,r2
100036f4:	e0b92517 	ldw	r2,-7020(fp)
100036f8:	1009883a 	mov	r4,r2
100036fc:	01400784 	movi	r5,30
10003700:	00074040 	call	10007404 <__divsi3>
10003704:	1021883a 	mov	r16,r2
10003708:	e4b91f17 	ldw	r18,-7044(fp)
1000370c:	8809883a 	mov	r4,r17
10003710:	01400544 	movi	r5,21
10003714:	00074c40 	call	100074c4 <__mulsi3>
10003718:	1023883a 	mov	r17,r2
1000371c:	9009883a 	mov	r4,r18
10003720:	01405404 	movi	r5,336
10003724:	00074c40 	call	100074c4 <__mulsi3>
10003728:	8885883a 	add	r2,r17,r2
1000372c:	1405883a 	add	r2,r2,r16
10003730:	1085883a 	add	r2,r2,r2
10003734:	1085883a 	add	r2,r2,r2
10003738:	e0f90a04 	addi	r3,fp,-7128
1000373c:	1885883a 	add	r2,r3,r2
10003740:	10806304 	addi	r2,r2,396
10003744:	10800017 	ldw	r2,0(r2)
10003748:	10000226 	beq	r2,zero,10003754 <main+0x3420>
		monster2_1_left = False;
1000374c:	e0392715 	stw	zero,-7012(fp)
10003750:	00003b06 	br	10003840 <main+0x350c>
	}
	else if(scene[sceneNum][(monster2_1_y+25)/30][(monster2_1_x+45)/30]!=0 || scene[sceneNum][(monster2_1_y)/30][(monster2_1_x+45)/30]!=0){
10003754:	e0b92617 	ldw	r2,-7016(fp)
10003758:	10800644 	addi	r2,r2,25
1000375c:	1009883a 	mov	r4,r2
10003760:	01400784 	movi	r5,30
10003764:	00074040 	call	10007404 <__divsi3>
10003768:	1023883a 	mov	r17,r2
1000376c:	e0b92517 	ldw	r2,-7020(fp)
10003770:	10800b44 	addi	r2,r2,45
10003774:	1009883a 	mov	r4,r2
10003778:	01400784 	movi	r5,30
1000377c:	00074040 	call	10007404 <__divsi3>
10003780:	1021883a 	mov	r16,r2
10003784:	e4b91f17 	ldw	r18,-7044(fp)
10003788:	8809883a 	mov	r4,r17
1000378c:	01400544 	movi	r5,21
10003790:	00074c40 	call	100074c4 <__mulsi3>
10003794:	1023883a 	mov	r17,r2
10003798:	9009883a 	mov	r4,r18
1000379c:	01405404 	movi	r5,336
100037a0:	00074c40 	call	100074c4 <__mulsi3>
100037a4:	8885883a 	add	r2,r17,r2
100037a8:	1405883a 	add	r2,r2,r16
100037ac:	1085883a 	add	r2,r2,r2
100037b0:	1085883a 	add	r2,r2,r2
100037b4:	e0f90a04 	addi	r3,fp,-7128
100037b8:	1885883a 	add	r2,r3,r2
100037bc:	10806304 	addi	r2,r2,396
100037c0:	10800017 	ldw	r2,0(r2)
100037c4:	10001c1e 	bne	r2,zero,10003838 <main+0x3504>
100037c8:	e0b92617 	ldw	r2,-7016(fp)
100037cc:	1009883a 	mov	r4,r2
100037d0:	01400784 	movi	r5,30
100037d4:	00074040 	call	10007404 <__divsi3>
100037d8:	1023883a 	mov	r17,r2
100037dc:	e0b92517 	ldw	r2,-7020(fp)
100037e0:	10800b44 	addi	r2,r2,45
100037e4:	1009883a 	mov	r4,r2
100037e8:	01400784 	movi	r5,30
100037ec:	00074040 	call	10007404 <__divsi3>
100037f0:	1021883a 	mov	r16,r2
100037f4:	e4b91f17 	ldw	r18,-7044(fp)
100037f8:	8809883a 	mov	r4,r17
100037fc:	01400544 	movi	r5,21
10003800:	00074c40 	call	100074c4 <__mulsi3>
10003804:	1023883a 	mov	r17,r2
10003808:	9009883a 	mov	r4,r18
1000380c:	01405404 	movi	r5,336
10003810:	00074c40 	call	100074c4 <__mulsi3>
10003814:	8885883a 	add	r2,r17,r2
10003818:	1405883a 	add	r2,r2,r16
1000381c:	1085883a 	add	r2,r2,r2
10003820:	1085883a 	add	r2,r2,r2
10003824:	e0f90a04 	addi	r3,fp,-7128
10003828:	1885883a 	add	r2,r3,r2
1000382c:	10806304 	addi	r2,r2,396
10003830:	10800017 	ldw	r2,0(r2)
10003834:	10000226 	beq	r2,zero,10003840 <main+0x350c>
		monster2_1_left = True;
10003838:	00800044 	movi	r2,1
1000383c:	e0b92715 	stw	r2,-7012(fp)
	}
	//Monster 2 Jump Code
	if(*MON2_EN == True){
10003840:	0080c804 	movi	r2,800
10003844:	10800003 	ldbu	r2,0(r2)
10003848:	10803fcc 	andi	r2,r2,255
1000384c:	1080201c 	xori	r2,r2,128
10003850:	10bfe004 	addi	r2,r2,-128
10003854:	10800058 	cmpnei	r2,r2,1
10003858:	1000e11e 	bne	r2,zero,10003be0 <main+0x38ac>
		if (monster2_jump_counter >= 40 && mon2_at_top == True){
1000385c:	e0b92817 	ldw	r2,-7008(fp)
10003860:	10800a10 	cmplti	r2,r2,40
10003864:	1000131e 	bne	r2,zero,100038b4 <main+0x3580>
10003868:	e0b92917 	ldw	r2,-7004(fp)
1000386c:	10800058 	cmpnei	r2,r2,1
10003870:	1000101e 	bne	r2,zero,100038b4 <main+0x3580>
			mon_2_y_inc = 15;
10003874:	00905c34 	movhi	r2,16752
10003878:	e0b92b15 	stw	r2,-6996(fp)
			monster2_grounded = False;
1000387c:	e0396a15 	stw	zero,-6744(fp)
			mon2_hit_bot = False;
10003880:	e0392a15 	stw	zero,-7000(fp)
			monster2_1_left = rand()%2;
10003884:	0009d000 	call	10009d00 <rand>
10003888:	1007883a 	mov	r3,r2
1000388c:	00a00034 	movhi	r2,32768
10003890:	10800044 	addi	r2,r2,1
10003894:	1884703a 	and	r2,r3,r2
10003898:	1000040e 	bge	r2,zero,100038ac <main+0x3578>
1000389c:	10bfffc4 	addi	r2,r2,-1
100038a0:	00ffff84 	movi	r3,-2
100038a4:	10c4b03a 	or	r2,r2,r3
100038a8:	10800044 	addi	r2,r2,1
100038ac:	e0b92715 	stw	r2,-7012(fp)
			mon2_at_top = False;
100038b0:	e0392915 	stw	zero,-7004(fp)
		}
		if(mon2_at_top == False){
100038b4:	e0b92917 	ldw	r2,-7004(fp)
100038b8:	1000231e 	bne	r2,zero,10003948 <main+0x3614>
			monster2_jump_counter = 0;
100038bc:	e0392815 	stw	zero,-7008(fp)
			mon_2_y_inc -= (gravity*.35);
100038c0:	e1392b17 	ldw	r4,-6996(fp)
100038c4:	00097700 	call	10009770 <__extendsfdf2>
100038c8:	1021883a 	mov	r16,r2
100038cc:	1823883a 	mov	r17,r3
100038d0:	e1394917 	ldw	r4,-6876(fp)
100038d4:	00097700 	call	10009770 <__extendsfdf2>
100038d8:	100b883a 	mov	r5,r2
100038dc:	180d883a 	mov	r6,r3
100038e0:	2809883a 	mov	r4,r5
100038e4:	300b883a 	mov	r5,r6
100038e8:	019999b4 	movhi	r6,26214
100038ec:	31999984 	addi	r6,r6,26214
100038f0:	01cff5b4 	movhi	r7,16342
100038f4:	39d99984 	addi	r7,r7,26214
100038f8:	00086340 	call	10008634 <__muldf3>
100038fc:	1009883a 	mov	r4,r2
10003900:	180b883a 	mov	r5,r3
10003904:	2005883a 	mov	r2,r4
10003908:	2807883a 	mov	r3,r5
1000390c:	8009883a 	mov	r4,r16
10003910:	880b883a 	mov	r5,r17
10003914:	100d883a 	mov	r6,r2
10003918:	180f883a 	mov	r7,r3
1000391c:	0008ea00 	call	10008ea0 <__subdf3>
10003920:	1009883a 	mov	r4,r2
10003924:	180b883a 	mov	r5,r3
10003928:	2005883a 	mov	r2,r4
1000392c:	2807883a 	mov	r3,r5
10003930:	1009883a 	mov	r4,r2
10003934:	180b883a 	mov	r5,r3
10003938:	00098800 	call	10009880 <__truncdfsf2>
1000393c:	1007883a 	mov	r3,r2
10003940:	e0f92b15 	stw	r3,-6996(fp)
10003944:	00000106 	br	1000394c <main+0x3618>
		}
		else{
			mon_2_y_inc = 0;
10003948:	e0392b15 	stw	zero,-6996(fp)
		}

		if(mon_2_y_inc < -15){
1000394c:	e1392b17 	ldw	r4,-6996(fp)
10003950:	01705c34 	movhi	r5,49520
10003954:	0007ed40 	call	10007ed4 <__lesf2>
10003958:	1000020e 	bge	r2,zero,10003964 <main+0x3630>
			mon_2_y_inc = -15;
1000395c:	00b05c34 	movhi	r2,49520
10003960:	e0b92b15 	stw	r2,-6996(fp)
		}
		if(mon_2_y_inc > 15){
10003964:	e1392b17 	ldw	r4,-6996(fp)
10003968:	01505c34 	movhi	r5,16752
1000396c:	0007e1c0 	call	10007e1c <__gesf2>
10003970:	0080020e 	bge	zero,r2,1000397c <main+0x3648>
			mon_2_y_inc = 15;
10003974:	00905c34 	movhi	r2,16752
10003978:	e0b92b15 	stw	r2,-6996(fp)
		}
		if(mon2_hit_bot == False || mon_2_y_inc < 0){
1000397c:	e0b92a17 	ldw	r2,-7000(fp)
10003980:	10000426 	beq	r2,zero,10003994 <main+0x3660>
10003984:	e1392b17 	ldw	r4,-6996(fp)
10003988:	000b883a 	mov	r5,zero
1000398c:	0007ed40 	call	10007ed4 <__lesf2>
10003990:	10000b0e 	bge	r2,zero,100039c0 <main+0x368c>
			monster2_1_y += mon_2_y_inc;
10003994:	e1392617 	ldw	r4,-7016(fp)
10003998:	00085000 	call	10008500 <__floatsisf>
1000399c:	1007883a 	mov	r3,r2
100039a0:	1809883a 	mov	r4,r3
100039a4:	e1792b17 	ldw	r5,-6996(fp)
100039a8:	00074ec0 	call	100074ec <__addsf3>
100039ac:	1007883a 	mov	r3,r2
100039b0:	1805883a 	mov	r2,r3
100039b4:	1009883a 	mov	r4,r2
100039b8:	00084880 	call	10008488 <__fixsfsi>
100039bc:	e0b92615 	stw	r2,-7016(fp)
		}

		//mon2 bot collision detection
		if((scene[sceneNum][(monster2_1_y+30)/30][(monster2_1_x+5)/30] != 0 || scene[sceneNum][(monster2_1_y+30)/30][(monster2_1_x+40)/30] != 0)){
100039c0:	e0b92617 	ldw	r2,-7016(fp)
100039c4:	10800784 	addi	r2,r2,30
100039c8:	1009883a 	mov	r4,r2
100039cc:	01400784 	movi	r5,30
100039d0:	00074040 	call	10007404 <__divsi3>
100039d4:	1023883a 	mov	r17,r2
100039d8:	e0b92517 	ldw	r2,-7020(fp)
100039dc:	10800144 	addi	r2,r2,5
100039e0:	1009883a 	mov	r4,r2
100039e4:	01400784 	movi	r5,30
100039e8:	00074040 	call	10007404 <__divsi3>
100039ec:	1021883a 	mov	r16,r2
100039f0:	e4b91f17 	ldw	r18,-7044(fp)
100039f4:	8809883a 	mov	r4,r17
100039f8:	01400544 	movi	r5,21
100039fc:	00074c40 	call	100074c4 <__mulsi3>
10003a00:	1023883a 	mov	r17,r2
10003a04:	9009883a 	mov	r4,r18
10003a08:	01405404 	movi	r5,336
10003a0c:	00074c40 	call	100074c4 <__mulsi3>
10003a10:	8885883a 	add	r2,r17,r2
10003a14:	1405883a 	add	r2,r2,r16
10003a18:	1085883a 	add	r2,r2,r2
10003a1c:	1085883a 	add	r2,r2,r2
10003a20:	e0f90a04 	addi	r3,fp,-7128
10003a24:	1885883a 	add	r2,r3,r2
10003a28:	10806304 	addi	r2,r2,396
10003a2c:	10800017 	ldw	r2,0(r2)
10003a30:	10001d1e 	bne	r2,zero,10003aa8 <main+0x3774>
10003a34:	e0b92617 	ldw	r2,-7016(fp)
10003a38:	10800784 	addi	r2,r2,30
10003a3c:	1009883a 	mov	r4,r2
10003a40:	01400784 	movi	r5,30
10003a44:	00074040 	call	10007404 <__divsi3>
10003a48:	1023883a 	mov	r17,r2
10003a4c:	e0b92517 	ldw	r2,-7020(fp)
10003a50:	10800a04 	addi	r2,r2,40
10003a54:	1009883a 	mov	r4,r2
10003a58:	01400784 	movi	r5,30
10003a5c:	00074040 	call	10007404 <__divsi3>
10003a60:	1021883a 	mov	r16,r2
10003a64:	e4b91f17 	ldw	r18,-7044(fp)
10003a68:	8809883a 	mov	r4,r17
10003a6c:	01400544 	movi	r5,21
10003a70:	00074c40 	call	100074c4 <__mulsi3>
10003a74:	1023883a 	mov	r17,r2
10003a78:	9009883a 	mov	r4,r18
10003a7c:	01405404 	movi	r5,336
10003a80:	00074c40 	call	100074c4 <__mulsi3>
10003a84:	8885883a 	add	r2,r17,r2
10003a88:	1405883a 	add	r2,r2,r16
10003a8c:	1085883a 	add	r2,r2,r2
10003a90:	1085883a 	add	r2,r2,r2
10003a94:	e0f90a04 	addi	r3,fp,-7128
10003a98:	1885883a 	add	r2,r3,r2
10003a9c:	10806304 	addi	r2,r2,396
10003aa0:	10800017 	ldw	r2,0(r2)
10003aa4:	10000a26 	beq	r2,zero,10003ad0 <main+0x379c>
			monster2_1_y = (monster2_1_y/30)*30;
10003aa8:	e0b92617 	ldw	r2,-7016(fp)
10003aac:	1009883a 	mov	r4,r2
10003ab0:	01400784 	movi	r5,30
10003ab4:	00074040 	call	10007404 <__divsi3>
10003ab8:	1009883a 	mov	r4,r2
10003abc:	01400784 	movi	r5,30
10003ac0:	00074c40 	call	100074c4 <__mulsi3>
10003ac4:	e0b92615 	stw	r2,-7016(fp)
			mon2_hit_bot = True;
10003ac8:	00800044 	movi	r2,1
10003acc:	e0b92a15 	stw	r2,-7000(fp)
		}

		//If hits head
		if((scene[sceneNum][(monster2_1_y-5)/30][(monster2_1_x+5)/30] != 0 || scene[sceneNum][(monster2_1_y-5)/30][(monster2_1_x+40)/30] != 0) && mon_2_y_inc < 0){
10003ad0:	e0b92617 	ldw	r2,-7016(fp)
10003ad4:	10bffec4 	addi	r2,r2,-5
10003ad8:	1009883a 	mov	r4,r2
10003adc:	01400784 	movi	r5,30
10003ae0:	00074040 	call	10007404 <__divsi3>
10003ae4:	1023883a 	mov	r17,r2
10003ae8:	e0b92517 	ldw	r2,-7020(fp)
10003aec:	10800144 	addi	r2,r2,5
10003af0:	1009883a 	mov	r4,r2
10003af4:	01400784 	movi	r5,30
10003af8:	00074040 	call	10007404 <__divsi3>
10003afc:	1021883a 	mov	r16,r2
10003b00:	e4b91f17 	ldw	r18,-7044(fp)
10003b04:	8809883a 	mov	r4,r17
10003b08:	01400544 	movi	r5,21
10003b0c:	00074c40 	call	100074c4 <__mulsi3>
10003b10:	1023883a 	mov	r17,r2
10003b14:	9009883a 	mov	r4,r18
10003b18:	01405404 	movi	r5,336
10003b1c:	00074c40 	call	100074c4 <__mulsi3>
10003b20:	8885883a 	add	r2,r17,r2
10003b24:	1405883a 	add	r2,r2,r16
10003b28:	1085883a 	add	r2,r2,r2
10003b2c:	1085883a 	add	r2,r2,r2
10003b30:	e0f90a04 	addi	r3,fp,-7128
10003b34:	1885883a 	add	r2,r3,r2
10003b38:	10806304 	addi	r2,r2,396
10003b3c:	10800017 	ldw	r2,0(r2)
10003b40:	10001d1e 	bne	r2,zero,10003bb8 <main+0x3884>
10003b44:	e0b92617 	ldw	r2,-7016(fp)
10003b48:	10bffec4 	addi	r2,r2,-5
10003b4c:	1009883a 	mov	r4,r2
10003b50:	01400784 	movi	r5,30
10003b54:	00074040 	call	10007404 <__divsi3>
10003b58:	1023883a 	mov	r17,r2
10003b5c:	e0b92517 	ldw	r2,-7020(fp)
10003b60:	10800a04 	addi	r2,r2,40
10003b64:	1009883a 	mov	r4,r2
10003b68:	01400784 	movi	r5,30
10003b6c:	00074040 	call	10007404 <__divsi3>
10003b70:	1021883a 	mov	r16,r2
10003b74:	e4b91f17 	ldw	r18,-7044(fp)
10003b78:	8809883a 	mov	r4,r17
10003b7c:	01400544 	movi	r5,21
10003b80:	00074c40 	call	100074c4 <__mulsi3>
10003b84:	1023883a 	mov	r17,r2
10003b88:	9009883a 	mov	r4,r18
10003b8c:	01405404 	movi	r5,336
10003b90:	00074c40 	call	100074c4 <__mulsi3>
10003b94:	8885883a 	add	r2,r17,r2
10003b98:	1405883a 	add	r2,r2,r16
10003b9c:	1085883a 	add	r2,r2,r2
10003ba0:	1085883a 	add	r2,r2,r2
10003ba4:	e0f90a04 	addi	r3,fp,-7128
10003ba8:	1885883a 	add	r2,r3,r2
10003bac:	10806304 	addi	r2,r2,396
10003bb0:	10800017 	ldw	r2,0(r2)
10003bb4:	10000726 	beq	r2,zero,10003bd4 <main+0x38a0>
10003bb8:	e1392b17 	ldw	r4,-6996(fp)
10003bbc:	000b883a 	mov	r5,zero
10003bc0:	0007ed40 	call	10007ed4 <__lesf2>
10003bc4:	1000030e 	bge	r2,zero,10003bd4 <main+0x38a0>
			mon_2_y_inc = 0;
10003bc8:	e0392b15 	stw	zero,-6996(fp)
			mon2_at_top = True;
10003bcc:	00800044 	movi	r2,1
10003bd0:	e0b92915 	stw	r2,-7004(fp)
		}

		monster2_jump_counter+=1;
10003bd4:	e0b92817 	ldw	r2,-7008(fp)
10003bd8:	10800044 	addi	r2,r2,1
10003bdc:	e0b92815 	stw	r2,-7008(fp)
		}
		//Monster 3 collision detection
		if(scene[sceneNum][(monster3_1_y)/30][(monster3_1_x-5)/30]!=0 || scene[sceneNum][(monster3_1_y+10)/30][(monster3_1_x-5)/30]!=0){
10003be0:	e0b92e17 	ldw	r2,-6984(fp)
10003be4:	1009883a 	mov	r4,r2
10003be8:	01400784 	movi	r5,30
10003bec:	00074040 	call	10007404 <__divsi3>
10003bf0:	1023883a 	mov	r17,r2
10003bf4:	e0b92d17 	ldw	r2,-6988(fp)
10003bf8:	10bffec4 	addi	r2,r2,-5
10003bfc:	1009883a 	mov	r4,r2
10003c00:	01400784 	movi	r5,30
10003c04:	00074040 	call	10007404 <__divsi3>
10003c08:	1021883a 	mov	r16,r2
10003c0c:	e4b91f17 	ldw	r18,-7044(fp)
10003c10:	8809883a 	mov	r4,r17
10003c14:	01400544 	movi	r5,21
10003c18:	00074c40 	call	100074c4 <__mulsi3>
10003c1c:	1023883a 	mov	r17,r2
10003c20:	9009883a 	mov	r4,r18
10003c24:	01405404 	movi	r5,336
10003c28:	00074c40 	call	100074c4 <__mulsi3>
10003c2c:	8885883a 	add	r2,r17,r2
10003c30:	1405883a 	add	r2,r2,r16
10003c34:	1085883a 	add	r2,r2,r2
10003c38:	1085883a 	add	r2,r2,r2
10003c3c:	e0f90a04 	addi	r3,fp,-7128
10003c40:	1885883a 	add	r2,r3,r2
10003c44:	10806304 	addi	r2,r2,396
10003c48:	10800017 	ldw	r2,0(r2)
10003c4c:	10001d1e 	bne	r2,zero,10003cc4 <main+0x3990>
10003c50:	e0b92e17 	ldw	r2,-6984(fp)
10003c54:	10800284 	addi	r2,r2,10
10003c58:	1009883a 	mov	r4,r2
10003c5c:	01400784 	movi	r5,30
10003c60:	00074040 	call	10007404 <__divsi3>
10003c64:	1023883a 	mov	r17,r2
10003c68:	e0b92d17 	ldw	r2,-6988(fp)
10003c6c:	10bffec4 	addi	r2,r2,-5
10003c70:	1009883a 	mov	r4,r2
10003c74:	01400784 	movi	r5,30
10003c78:	00074040 	call	10007404 <__divsi3>
10003c7c:	1021883a 	mov	r16,r2
10003c80:	e4b91f17 	ldw	r18,-7044(fp)
10003c84:	8809883a 	mov	r4,r17
10003c88:	01400544 	movi	r5,21
10003c8c:	00074c40 	call	100074c4 <__mulsi3>
10003c90:	1023883a 	mov	r17,r2
10003c94:	9009883a 	mov	r4,r18
10003c98:	01405404 	movi	r5,336
10003c9c:	00074c40 	call	100074c4 <__mulsi3>
10003ca0:	8885883a 	add	r2,r17,r2
10003ca4:	1405883a 	add	r2,r2,r16
10003ca8:	1085883a 	add	r2,r2,r2
10003cac:	1085883a 	add	r2,r2,r2
10003cb0:	e0f90a04 	addi	r3,fp,-7128
10003cb4:	1885883a 	add	r2,r3,r2
10003cb8:	10806304 	addi	r2,r2,396
10003cbc:	10800017 	ldw	r2,0(r2)
10003cc0:	10000226 	beq	r2,zero,10003ccc <main+0x3998>
			monster3_1_left = False;
10003cc4:	e0392f15 	stw	zero,-6980(fp)
10003cc8:	00003b06 	br	10003db8 <main+0x3a84>
		}
		else if(scene[sceneNum][(monster3_1_y)/30][(monster3_1_x+35)/30]!=0 || scene[sceneNum][(monster3_1_y+10)/30][(monster3_1_x+35)/30]!=0){
10003ccc:	e0b92e17 	ldw	r2,-6984(fp)
10003cd0:	1009883a 	mov	r4,r2
10003cd4:	01400784 	movi	r5,30
10003cd8:	00074040 	call	10007404 <__divsi3>
10003cdc:	1023883a 	mov	r17,r2
10003ce0:	e0b92d17 	ldw	r2,-6988(fp)
10003ce4:	108008c4 	addi	r2,r2,35
10003ce8:	1009883a 	mov	r4,r2
10003cec:	01400784 	movi	r5,30
10003cf0:	00074040 	call	10007404 <__divsi3>
10003cf4:	1021883a 	mov	r16,r2
10003cf8:	e4b91f17 	ldw	r18,-7044(fp)
10003cfc:	8809883a 	mov	r4,r17
10003d00:	01400544 	movi	r5,21
10003d04:	00074c40 	call	100074c4 <__mulsi3>
10003d08:	1023883a 	mov	r17,r2
10003d0c:	9009883a 	mov	r4,r18
10003d10:	01405404 	movi	r5,336
10003d14:	00074c40 	call	100074c4 <__mulsi3>
10003d18:	8885883a 	add	r2,r17,r2
10003d1c:	1405883a 	add	r2,r2,r16
10003d20:	1085883a 	add	r2,r2,r2
10003d24:	1085883a 	add	r2,r2,r2
10003d28:	e0f90a04 	addi	r3,fp,-7128
10003d2c:	1885883a 	add	r2,r3,r2
10003d30:	10806304 	addi	r2,r2,396
10003d34:	10800017 	ldw	r2,0(r2)
10003d38:	10001d1e 	bne	r2,zero,10003db0 <main+0x3a7c>
10003d3c:	e0b92e17 	ldw	r2,-6984(fp)
10003d40:	10800284 	addi	r2,r2,10
10003d44:	1009883a 	mov	r4,r2
10003d48:	01400784 	movi	r5,30
10003d4c:	00074040 	call	10007404 <__divsi3>
10003d50:	1023883a 	mov	r17,r2
10003d54:	e0b92d17 	ldw	r2,-6988(fp)
10003d58:	108008c4 	addi	r2,r2,35
10003d5c:	1009883a 	mov	r4,r2
10003d60:	01400784 	movi	r5,30
10003d64:	00074040 	call	10007404 <__divsi3>
10003d68:	1021883a 	mov	r16,r2
10003d6c:	e4b91f17 	ldw	r18,-7044(fp)
10003d70:	8809883a 	mov	r4,r17
10003d74:	01400544 	movi	r5,21
10003d78:	00074c40 	call	100074c4 <__mulsi3>
10003d7c:	1023883a 	mov	r17,r2
10003d80:	9009883a 	mov	r4,r18
10003d84:	01405404 	movi	r5,336
10003d88:	00074c40 	call	100074c4 <__mulsi3>
10003d8c:	8885883a 	add	r2,r17,r2
10003d90:	1405883a 	add	r2,r2,r16
10003d94:	1085883a 	add	r2,r2,r2
10003d98:	1085883a 	add	r2,r2,r2
10003d9c:	e0f90a04 	addi	r3,fp,-7128
10003da0:	1885883a 	add	r2,r3,r2
10003da4:	10806304 	addi	r2,r2,396
10003da8:	10800017 	ldw	r2,0(r2)
10003dac:	10000226 	beq	r2,zero,10003db8 <main+0x3a84>
			monster3_1_left = True;
10003db0:	00800044 	movi	r2,1
10003db4:	e0b92f15 	stw	r2,-6980(fp)
		}
		if(monster3_1_left == True){
10003db8:	e0b92f17 	ldw	r2,-6980(fp)
10003dbc:	10800058 	cmpnei	r2,r2,1
10003dc0:	1000031e 	bne	r2,zero,10003dd0 <main+0x3a9c>
			*MON3_DIR = False;
10003dc4:	00804804 	movi	r2,288
10003dc8:	10000015 	stw	zero,0(r2)
10003dcc:	00000306 	br	10003ddc <main+0x3aa8>
		}
		else{
			*MON3_DIR = True;
10003dd0:	00804804 	movi	r2,288
10003dd4:	00c00044 	movi	r3,1
10003dd8:	10c00015 	stw	r3,0(r2)
		}


		//bullet collision with monsters
		if(*BUL1_X+12 > monster1_1_x && *BUL1_X < monster1_1_x+30 && *BUL1_Y+12 > monster1_1_y && *BUL1_Y < monster1_1_y+30 && *MON1_EN == True && *BUL1_EN == 1){
10003ddc:	00808804 	movi	r2,544
10003de0:	10800017 	ldw	r2,0(r2)
10003de4:	10800304 	addi	r2,r2,12
10003de8:	e0f92117 	ldw	r3,-7036(fp)
10003dec:	18801f0e 	bge	r3,r2,10003e6c <main+0x3b38>
10003df0:	00808804 	movi	r2,544
10003df4:	10c00017 	ldw	r3,0(r2)
10003df8:	e0b92117 	ldw	r2,-7036(fp)
10003dfc:	10800784 	addi	r2,r2,30
10003e00:	18801a0e 	bge	r3,r2,10003e6c <main+0x3b38>
10003e04:	00808404 	movi	r2,528
10003e08:	10800017 	ldw	r2,0(r2)
10003e0c:	10800304 	addi	r2,r2,12
10003e10:	e0f92217 	ldw	r3,-7032(fp)
10003e14:	1880150e 	bge	r3,r2,10003e6c <main+0x3b38>
10003e18:	00808404 	movi	r2,528
10003e1c:	10c00017 	ldw	r3,0(r2)
10003e20:	e0b92217 	ldw	r2,-7032(fp)
10003e24:	10800784 	addi	r2,r2,30
10003e28:	1880100e 	bge	r3,r2,10003e6c <main+0x3b38>
10003e2c:	0080d404 	movi	r2,848
10003e30:	10800003 	ldbu	r2,0(r2)
10003e34:	10803fcc 	andi	r2,r2,255
10003e38:	1080201c 	xori	r2,r2,128
10003e3c:	10bfe004 	addi	r2,r2,-128
10003e40:	10800058 	cmpnei	r2,r2,1
10003e44:	1000091e 	bne	r2,zero,10003e6c <main+0x3b38>
10003e48:	00808c04 	movi	r2,560
10003e4c:	10800017 	ldw	r2,0(r2)
10003e50:	10800058 	cmpnei	r2,r2,1
10003e54:	1000051e 	bne	r2,zero,10003e6c <main+0x3b38>
			*BUL1_EN=0;
10003e58:	00808c04 	movi	r2,560
10003e5c:	10000015 	stw	zero,0(r2)
			monster1_1_health-=1;
10003e60:	e0b92417 	ldw	r2,-7024(fp)
10003e64:	10bfffc4 	addi	r2,r2,-1
10003e68:	e0b92415 	stw	r2,-7024(fp)
		}
		if(*BUL2_X+12 > monster1_1_x && *BUL2_X < monster1_1_x+30 && *BUL2_Y+12 > monster1_1_y && *BUL2_Y < monster1_1_y+30 && *MON1_EN == True && *BUL2_EN == 1){
10003e6c:	00807c04 	movi	r2,496
10003e70:	10800017 	ldw	r2,0(r2)
10003e74:	10800304 	addi	r2,r2,12
10003e78:	e0f92117 	ldw	r3,-7036(fp)
10003e7c:	18801f0e 	bge	r3,r2,10003efc <main+0x3bc8>
10003e80:	00807c04 	movi	r2,496
10003e84:	10c00017 	ldw	r3,0(r2)
10003e88:	e0b92117 	ldw	r2,-7036(fp)
10003e8c:	10800784 	addi	r2,r2,30
10003e90:	18801a0e 	bge	r3,r2,10003efc <main+0x3bc8>
10003e94:	00807804 	movi	r2,480
10003e98:	10800017 	ldw	r2,0(r2)
10003e9c:	10800304 	addi	r2,r2,12
10003ea0:	e0f92217 	ldw	r3,-7032(fp)
10003ea4:	1880150e 	bge	r3,r2,10003efc <main+0x3bc8>
10003ea8:	00807804 	movi	r2,480
10003eac:	10c00017 	ldw	r3,0(r2)
10003eb0:	e0b92217 	ldw	r2,-7032(fp)
10003eb4:	10800784 	addi	r2,r2,30
10003eb8:	1880100e 	bge	r3,r2,10003efc <main+0x3bc8>
10003ebc:	0080d404 	movi	r2,848
10003ec0:	10800003 	ldbu	r2,0(r2)
10003ec4:	10803fcc 	andi	r2,r2,255
10003ec8:	1080201c 	xori	r2,r2,128
10003ecc:	10bfe004 	addi	r2,r2,-128
10003ed0:	10800058 	cmpnei	r2,r2,1
10003ed4:	1000091e 	bne	r2,zero,10003efc <main+0x3bc8>
10003ed8:	00808004 	movi	r2,512
10003edc:	10800017 	ldw	r2,0(r2)
10003ee0:	10800058 	cmpnei	r2,r2,1
10003ee4:	1000051e 	bne	r2,zero,10003efc <main+0x3bc8>
			*BUL2_EN=0;
10003ee8:	00808004 	movi	r2,512
10003eec:	10000015 	stw	zero,0(r2)
			monster1_1_health-=1;
10003ef0:	e0b92417 	ldw	r2,-7024(fp)
10003ef4:	10bfffc4 	addi	r2,r2,-1
10003ef8:	e0b92415 	stw	r2,-7024(fp)
		}
		if(*BUL3_X+12 > monster1_1_x && *BUL3_X < monster1_1_x+30 && *BUL3_Y+12 > monster1_1_y && *BUL3_Y < monster1_1_y+30 && *MON1_EN == True && *BUL3_EN == 1){
10003efc:	00807004 	movi	r2,448
10003f00:	10800017 	ldw	r2,0(r2)
10003f04:	10800304 	addi	r2,r2,12
10003f08:	e0f92117 	ldw	r3,-7036(fp)
10003f0c:	18801f0e 	bge	r3,r2,10003f8c <main+0x3c58>
10003f10:	00807004 	movi	r2,448
10003f14:	10c00017 	ldw	r3,0(r2)
10003f18:	e0b92117 	ldw	r2,-7036(fp)
10003f1c:	10800784 	addi	r2,r2,30
10003f20:	18801a0e 	bge	r3,r2,10003f8c <main+0x3c58>
10003f24:	00806c04 	movi	r2,432
10003f28:	10800017 	ldw	r2,0(r2)
10003f2c:	10800304 	addi	r2,r2,12
10003f30:	e0f92217 	ldw	r3,-7032(fp)
10003f34:	1880150e 	bge	r3,r2,10003f8c <main+0x3c58>
10003f38:	00806c04 	movi	r2,432
10003f3c:	10c00017 	ldw	r3,0(r2)
10003f40:	e0b92217 	ldw	r2,-7032(fp)
10003f44:	10800784 	addi	r2,r2,30
10003f48:	1880100e 	bge	r3,r2,10003f8c <main+0x3c58>
10003f4c:	0080d404 	movi	r2,848
10003f50:	10800003 	ldbu	r2,0(r2)
10003f54:	10803fcc 	andi	r2,r2,255
10003f58:	1080201c 	xori	r2,r2,128
10003f5c:	10bfe004 	addi	r2,r2,-128
10003f60:	10800058 	cmpnei	r2,r2,1
10003f64:	1000091e 	bne	r2,zero,10003f8c <main+0x3c58>
10003f68:	00807404 	movi	r2,464
10003f6c:	10800017 	ldw	r2,0(r2)
10003f70:	10800058 	cmpnei	r2,r2,1
10003f74:	1000051e 	bne	r2,zero,10003f8c <main+0x3c58>
			*BUL3_EN=0;
10003f78:	00807404 	movi	r2,464
10003f7c:	10000015 	stw	zero,0(r2)
			monster1_1_health-=1;
10003f80:	e0b92417 	ldw	r2,-7024(fp)
10003f84:	10bfffc4 	addi	r2,r2,-1
10003f88:	e0b92415 	stw	r2,-7024(fp)
		}
		if(*BUL1_X+12 > monster2_1_x && *BUL1_X < monster2_1_x+30 && *BUL1_Y+12 > monster2_1_y && *BUL1_Y < monster2_1_y+30 && *MON2_EN == True && *BUL1_EN == 1){
10003f8c:	00808804 	movi	r2,544
10003f90:	10800017 	ldw	r2,0(r2)
10003f94:	10800304 	addi	r2,r2,12
10003f98:	e0f92517 	ldw	r3,-7020(fp)
10003f9c:	18801f0e 	bge	r3,r2,1000401c <main+0x3ce8>
10003fa0:	00808804 	movi	r2,544
10003fa4:	10c00017 	ldw	r3,0(r2)
10003fa8:	e0b92517 	ldw	r2,-7020(fp)
10003fac:	10800784 	addi	r2,r2,30
10003fb0:	18801a0e 	bge	r3,r2,1000401c <main+0x3ce8>
10003fb4:	00808404 	movi	r2,528
10003fb8:	10800017 	ldw	r2,0(r2)
10003fbc:	10800304 	addi	r2,r2,12
10003fc0:	e0f92617 	ldw	r3,-7016(fp)
10003fc4:	1880150e 	bge	r3,r2,1000401c <main+0x3ce8>
10003fc8:	00808404 	movi	r2,528
10003fcc:	10c00017 	ldw	r3,0(r2)
10003fd0:	e0b92617 	ldw	r2,-7016(fp)
10003fd4:	10800784 	addi	r2,r2,30
10003fd8:	1880100e 	bge	r3,r2,1000401c <main+0x3ce8>
10003fdc:	0080c804 	movi	r2,800
10003fe0:	10800003 	ldbu	r2,0(r2)
10003fe4:	10803fcc 	andi	r2,r2,255
10003fe8:	1080201c 	xori	r2,r2,128
10003fec:	10bfe004 	addi	r2,r2,-128
10003ff0:	10800058 	cmpnei	r2,r2,1
10003ff4:	1000091e 	bne	r2,zero,1000401c <main+0x3ce8>
10003ff8:	00808c04 	movi	r2,560
10003ffc:	10800017 	ldw	r2,0(r2)
10004000:	10800058 	cmpnei	r2,r2,1
10004004:	1000051e 	bne	r2,zero,1000401c <main+0x3ce8>
			*BUL1_EN=0;
10004008:	00808c04 	movi	r2,560
1000400c:	10000015 	stw	zero,0(r2)
			monster2_1_health-=1;
10004010:	e0b92c17 	ldw	r2,-6992(fp)
10004014:	10bfffc4 	addi	r2,r2,-1
10004018:	e0b92c15 	stw	r2,-6992(fp)
		}
		if(*BUL2_X+12 > monster2_1_x && *BUL2_X < monster2_1_x+30 && *BUL2_Y+12 > monster2_1_y && *BUL2_Y < monster2_1_y+30 && *MON2_EN == True && *BUL2_EN == 1){
1000401c:	00807c04 	movi	r2,496
10004020:	10800017 	ldw	r2,0(r2)
10004024:	10800304 	addi	r2,r2,12
10004028:	e0f92517 	ldw	r3,-7020(fp)
1000402c:	18801f0e 	bge	r3,r2,100040ac <main+0x3d78>
10004030:	00807c04 	movi	r2,496
10004034:	10c00017 	ldw	r3,0(r2)
10004038:	e0b92517 	ldw	r2,-7020(fp)
1000403c:	10800784 	addi	r2,r2,30
10004040:	18801a0e 	bge	r3,r2,100040ac <main+0x3d78>
10004044:	00807804 	movi	r2,480
10004048:	10800017 	ldw	r2,0(r2)
1000404c:	10800304 	addi	r2,r2,12
10004050:	e0f92617 	ldw	r3,-7016(fp)
10004054:	1880150e 	bge	r3,r2,100040ac <main+0x3d78>
10004058:	00807804 	movi	r2,480
1000405c:	10c00017 	ldw	r3,0(r2)
10004060:	e0b92617 	ldw	r2,-7016(fp)
10004064:	10800784 	addi	r2,r2,30
10004068:	1880100e 	bge	r3,r2,100040ac <main+0x3d78>
1000406c:	0080c804 	movi	r2,800
10004070:	10800003 	ldbu	r2,0(r2)
10004074:	10803fcc 	andi	r2,r2,255
10004078:	1080201c 	xori	r2,r2,128
1000407c:	10bfe004 	addi	r2,r2,-128
10004080:	10800058 	cmpnei	r2,r2,1
10004084:	1000091e 	bne	r2,zero,100040ac <main+0x3d78>
10004088:	00808004 	movi	r2,512
1000408c:	10800017 	ldw	r2,0(r2)
10004090:	10800058 	cmpnei	r2,r2,1
10004094:	1000051e 	bne	r2,zero,100040ac <main+0x3d78>
			*BUL2_EN=0;
10004098:	00808004 	movi	r2,512
1000409c:	10000015 	stw	zero,0(r2)
			monster2_1_health-=1;
100040a0:	e0b92c17 	ldw	r2,-6992(fp)
100040a4:	10bfffc4 	addi	r2,r2,-1
100040a8:	e0b92c15 	stw	r2,-6992(fp)
		}
		if(*BUL3_X+12 > monster2_1_x && *BUL3_X < monster2_1_x+30 && *BUL3_Y+12 > monster2_1_y && *BUL3_Y < monster2_1_y+30 && *MON2_EN == True && *BUL3_EN == 1){
100040ac:	00807004 	movi	r2,448
100040b0:	10800017 	ldw	r2,0(r2)
100040b4:	10800304 	addi	r2,r2,12
100040b8:	e0f92517 	ldw	r3,-7020(fp)
100040bc:	18801f0e 	bge	r3,r2,1000413c <main+0x3e08>
100040c0:	00807004 	movi	r2,448
100040c4:	10c00017 	ldw	r3,0(r2)
100040c8:	e0b92517 	ldw	r2,-7020(fp)
100040cc:	10800784 	addi	r2,r2,30
100040d0:	18801a0e 	bge	r3,r2,1000413c <main+0x3e08>
100040d4:	00806c04 	movi	r2,432
100040d8:	10800017 	ldw	r2,0(r2)
100040dc:	10800304 	addi	r2,r2,12
100040e0:	e0f92617 	ldw	r3,-7016(fp)
100040e4:	1880150e 	bge	r3,r2,1000413c <main+0x3e08>
100040e8:	00806c04 	movi	r2,432
100040ec:	10c00017 	ldw	r3,0(r2)
100040f0:	e0b92617 	ldw	r2,-7016(fp)
100040f4:	10800784 	addi	r2,r2,30
100040f8:	1880100e 	bge	r3,r2,1000413c <main+0x3e08>
100040fc:	0080c804 	movi	r2,800
10004100:	10800003 	ldbu	r2,0(r2)
10004104:	10803fcc 	andi	r2,r2,255
10004108:	1080201c 	xori	r2,r2,128
1000410c:	10bfe004 	addi	r2,r2,-128
10004110:	10800058 	cmpnei	r2,r2,1
10004114:	1000091e 	bne	r2,zero,1000413c <main+0x3e08>
10004118:	00807404 	movi	r2,464
1000411c:	10800017 	ldw	r2,0(r2)
10004120:	10800058 	cmpnei	r2,r2,1
10004124:	1000051e 	bne	r2,zero,1000413c <main+0x3e08>
			*BUL3_EN=0;
10004128:	00807404 	movi	r2,464
1000412c:	10000015 	stw	zero,0(r2)
			monster2_1_health-=1;
10004130:	e0b92c17 	ldw	r2,-6992(fp)
10004134:	10bfffc4 	addi	r2,r2,-1
10004138:	e0b92c15 	stw	r2,-6992(fp)
		}
		if(*BUL1_X+12 > monster3_1_x && *BUL1_X < monster3_1_x+30 && *BUL1_Y+12 > monster3_1_y && *BUL1_Y < monster3_1_y+10 && *MON3_EN == True && *BUL1_EN == 1){
1000413c:	00808804 	movi	r2,544
10004140:	10800017 	ldw	r2,0(r2)
10004144:	10800304 	addi	r2,r2,12
10004148:	e0f92d17 	ldw	r3,-6988(fp)
1000414c:	18801c0e 	bge	r3,r2,100041c0 <main+0x3e8c>
10004150:	00808804 	movi	r2,544
10004154:	10c00017 	ldw	r3,0(r2)
10004158:	e0b92d17 	ldw	r2,-6988(fp)
1000415c:	10800784 	addi	r2,r2,30
10004160:	1880170e 	bge	r3,r2,100041c0 <main+0x3e8c>
10004164:	00808404 	movi	r2,528
10004168:	10800017 	ldw	r2,0(r2)
1000416c:	10800304 	addi	r2,r2,12
10004170:	e0f92e17 	ldw	r3,-6984(fp)
10004174:	1880120e 	bge	r3,r2,100041c0 <main+0x3e8c>
10004178:	00808404 	movi	r2,528
1000417c:	10c00017 	ldw	r3,0(r2)
10004180:	e0b92e17 	ldw	r2,-6984(fp)
10004184:	10800284 	addi	r2,r2,10
10004188:	18800d0e 	bge	r3,r2,100041c0 <main+0x3e8c>
1000418c:	0080bc04 	movi	r2,752
10004190:	10800003 	ldbu	r2,0(r2)
10004194:	10803fcc 	andi	r2,r2,255
10004198:	1080201c 	xori	r2,r2,128
1000419c:	10bfe004 	addi	r2,r2,-128
100041a0:	10800058 	cmpnei	r2,r2,1
100041a4:	1000061e 	bne	r2,zero,100041c0 <main+0x3e8c>
100041a8:	00808c04 	movi	r2,560
100041ac:	10800017 	ldw	r2,0(r2)
100041b0:	10800058 	cmpnei	r2,r2,1
100041b4:	1000021e 	bne	r2,zero,100041c0 <main+0x3e8c>
			*BUL1_EN=0;
100041b8:	00808c04 	movi	r2,560
100041bc:	10000015 	stw	zero,0(r2)
		}
		if(*BUL2_X+12 > monster3_1_x && *BUL2_X < monster3_1_x+30 && *BUL2_Y+12 > monster3_1_y && *BUL2_Y < monster3_1_y+10 && *MON3_EN == True && *BUL2_EN == 1){
100041c0:	00807c04 	movi	r2,496
100041c4:	10800017 	ldw	r2,0(r2)
100041c8:	10800304 	addi	r2,r2,12
100041cc:	e0f92d17 	ldw	r3,-6988(fp)
100041d0:	18801c0e 	bge	r3,r2,10004244 <main+0x3f10>
100041d4:	00807c04 	movi	r2,496
100041d8:	10c00017 	ldw	r3,0(r2)
100041dc:	e0b92d17 	ldw	r2,-6988(fp)
100041e0:	10800784 	addi	r2,r2,30
100041e4:	1880170e 	bge	r3,r2,10004244 <main+0x3f10>
100041e8:	00807804 	movi	r2,480
100041ec:	10800017 	ldw	r2,0(r2)
100041f0:	10800304 	addi	r2,r2,12
100041f4:	e0f92e17 	ldw	r3,-6984(fp)
100041f8:	1880120e 	bge	r3,r2,10004244 <main+0x3f10>
100041fc:	00807804 	movi	r2,480
10004200:	10c00017 	ldw	r3,0(r2)
10004204:	e0b92e17 	ldw	r2,-6984(fp)
10004208:	10800284 	addi	r2,r2,10
1000420c:	18800d0e 	bge	r3,r2,10004244 <main+0x3f10>
10004210:	0080bc04 	movi	r2,752
10004214:	10800003 	ldbu	r2,0(r2)
10004218:	10803fcc 	andi	r2,r2,255
1000421c:	1080201c 	xori	r2,r2,128
10004220:	10bfe004 	addi	r2,r2,-128
10004224:	10800058 	cmpnei	r2,r2,1
10004228:	1000061e 	bne	r2,zero,10004244 <main+0x3f10>
1000422c:	00808004 	movi	r2,512
10004230:	10800017 	ldw	r2,0(r2)
10004234:	10800058 	cmpnei	r2,r2,1
10004238:	1000021e 	bne	r2,zero,10004244 <main+0x3f10>
			*BUL2_EN=0;
1000423c:	00808004 	movi	r2,512
10004240:	10000015 	stw	zero,0(r2)
		}
		if(*BUL3_X+12 > monster3_1_x && *BUL3_X < monster3_1_x+30 && *BUL3_Y+12 > monster3_1_y && *BUL3_Y < monster3_1_y+10 && *MON3_EN == True && *BUL3_EN == 1){
10004244:	00807004 	movi	r2,448
10004248:	10800017 	ldw	r2,0(r2)
1000424c:	10800304 	addi	r2,r2,12
10004250:	e0f92d17 	ldw	r3,-6988(fp)
10004254:	18801c0e 	bge	r3,r2,100042c8 <main+0x3f94>
10004258:	00807004 	movi	r2,448
1000425c:	10c00017 	ldw	r3,0(r2)
10004260:	e0b92d17 	ldw	r2,-6988(fp)
10004264:	10800784 	addi	r2,r2,30
10004268:	1880170e 	bge	r3,r2,100042c8 <main+0x3f94>
1000426c:	00806c04 	movi	r2,432
10004270:	10800017 	ldw	r2,0(r2)
10004274:	10800304 	addi	r2,r2,12
10004278:	e0f92e17 	ldw	r3,-6984(fp)
1000427c:	1880120e 	bge	r3,r2,100042c8 <main+0x3f94>
10004280:	00806c04 	movi	r2,432
10004284:	10c00017 	ldw	r3,0(r2)
10004288:	e0b92e17 	ldw	r2,-6984(fp)
1000428c:	10800284 	addi	r2,r2,10
10004290:	18800d0e 	bge	r3,r2,100042c8 <main+0x3f94>
10004294:	0080bc04 	movi	r2,752
10004298:	10800003 	ldbu	r2,0(r2)
1000429c:	10803fcc 	andi	r2,r2,255
100042a0:	1080201c 	xori	r2,r2,128
100042a4:	10bfe004 	addi	r2,r2,-128
100042a8:	10800058 	cmpnei	r2,r2,1
100042ac:	1000061e 	bne	r2,zero,100042c8 <main+0x3f94>
100042b0:	00807404 	movi	r2,464
100042b4:	10800017 	ldw	r2,0(r2)
100042b8:	10800058 	cmpnei	r2,r2,1
100042bc:	1000021e 	bne	r2,zero,100042c8 <main+0x3f94>
			*BUL3_EN=0;
100042c0:	00807404 	movi	r2,464
100042c4:	10000015 	stw	zero,0(r2)
		}
		if(*BUL1_X+12 > *KRAID_X && *BUL1_X < *KRAID_X+50 && *BUL1_Y+12 > *KRAID_Y && *BUL1_Y < *KRAID_Y+70 && (*KRAID_G_EN == True || *KRAID_N_EN == True || *KRAID_R_EN == True) && *BUL1_EN == 1){
100042c8:	00808804 	movi	r2,544
100042cc:	10800017 	ldw	r2,0(r2)
100042d0:	10800304 	addi	r2,r2,12
100042d4:	00c02804 	movi	r3,160
100042d8:	18c00017 	ldw	r3,0(r3)
100042dc:	18802c0e 	bge	r3,r2,10004390 <main+0x405c>
100042e0:	00808804 	movi	r2,544
100042e4:	10c00017 	ldw	r3,0(r2)
100042e8:	00802804 	movi	r2,160
100042ec:	10800017 	ldw	r2,0(r2)
100042f0:	10800c84 	addi	r2,r2,50
100042f4:	1880260e 	bge	r3,r2,10004390 <main+0x405c>
100042f8:	00808404 	movi	r2,528
100042fc:	10800017 	ldw	r2,0(r2)
10004300:	10800304 	addi	r2,r2,12
10004304:	00c02404 	movi	r3,144
10004308:	18c00017 	ldw	r3,0(r3)
1000430c:	1880200e 	bge	r3,r2,10004390 <main+0x405c>
10004310:	00808404 	movi	r2,528
10004314:	10c00017 	ldw	r3,0(r2)
10004318:	00802404 	movi	r2,144
1000431c:	10800017 	ldw	r2,0(r2)
10004320:	10801184 	addi	r2,r2,70
10004324:	18801a0e 	bge	r3,r2,10004390 <main+0x405c>
10004328:	00804004 	movi	r2,256
1000432c:	10800017 	ldw	r2,0(r2)
10004330:	10800060 	cmpeqi	r2,r2,1
10004334:	1000081e 	bne	r2,zero,10004358 <main+0x4024>
10004338:	00803804 	movi	r2,224
1000433c:	10800017 	ldw	r2,0(r2)
10004340:	10800060 	cmpeqi	r2,r2,1
10004344:	1000041e 	bne	r2,zero,10004358 <main+0x4024>
10004348:	00803c04 	movi	r2,240
1000434c:	10800017 	ldw	r2,0(r2)
10004350:	10800058 	cmpnei	r2,r2,1
10004354:	10000e1e 	bne	r2,zero,10004390 <main+0x405c>
10004358:	00808c04 	movi	r2,560
1000435c:	10800017 	ldw	r2,0(r2)
10004360:	10800058 	cmpnei	r2,r2,1
10004364:	10000a1e 	bne	r2,zero,10004390 <main+0x405c>
			if(kraid_blink == False)
10004368:	e0b93317 	ldw	r2,-6964(fp)
1000436c:	1000031e 	bne	r2,zero,1000437c <main+0x4048>
				kraid_health-=1;
10004370:	e0b93017 	ldw	r2,-6976(fp)
10004374:	10bfffc4 	addi	r2,r2,-1
10004378:	e0b93015 	stw	r2,-6976(fp)
			*BUL1_EN=0;
1000437c:	00808c04 	movi	r2,560
10004380:	10000015 	stw	zero,0(r2)
			kraid_blink = True;
10004384:	00800044 	movi	r2,1
10004388:	e0b93315 	stw	r2,-6964(fp)
			kraid_counter = 0;
1000438c:	e0393415 	stw	zero,-6960(fp)
		}
		if(*BUL2_X+12 > *KRAID_X && *BUL2_X < *KRAID_X+50 && *BUL2_Y+12 > *KRAID_Y && *BUL2_Y < *KRAID_Y+70 && (*KRAID_G_EN == True || *KRAID_N_EN == True || *KRAID_R_EN == True) && *BUL2_EN == 1){
10004390:	00807c04 	movi	r2,496
10004394:	10800017 	ldw	r2,0(r2)
10004398:	10800304 	addi	r2,r2,12
1000439c:	00c02804 	movi	r3,160
100043a0:	18c00017 	ldw	r3,0(r3)
100043a4:	18802c0e 	bge	r3,r2,10004458 <main+0x4124>
100043a8:	00807c04 	movi	r2,496
100043ac:	10c00017 	ldw	r3,0(r2)
100043b0:	00802804 	movi	r2,160
100043b4:	10800017 	ldw	r2,0(r2)
100043b8:	10800c84 	addi	r2,r2,50
100043bc:	1880260e 	bge	r3,r2,10004458 <main+0x4124>
100043c0:	00807804 	movi	r2,480
100043c4:	10800017 	ldw	r2,0(r2)
100043c8:	10800304 	addi	r2,r2,12
100043cc:	00c02404 	movi	r3,144
100043d0:	18c00017 	ldw	r3,0(r3)
100043d4:	1880200e 	bge	r3,r2,10004458 <main+0x4124>
100043d8:	00807804 	movi	r2,480
100043dc:	10c00017 	ldw	r3,0(r2)
100043e0:	00802404 	movi	r2,144
100043e4:	10800017 	ldw	r2,0(r2)
100043e8:	10801184 	addi	r2,r2,70
100043ec:	18801a0e 	bge	r3,r2,10004458 <main+0x4124>
100043f0:	00804004 	movi	r2,256
100043f4:	10800017 	ldw	r2,0(r2)
100043f8:	10800060 	cmpeqi	r2,r2,1
100043fc:	1000081e 	bne	r2,zero,10004420 <main+0x40ec>
10004400:	00803804 	movi	r2,224
10004404:	10800017 	ldw	r2,0(r2)
10004408:	10800060 	cmpeqi	r2,r2,1
1000440c:	1000041e 	bne	r2,zero,10004420 <main+0x40ec>
10004410:	00803c04 	movi	r2,240
10004414:	10800017 	ldw	r2,0(r2)
10004418:	10800058 	cmpnei	r2,r2,1
1000441c:	10000e1e 	bne	r2,zero,10004458 <main+0x4124>
10004420:	00808004 	movi	r2,512
10004424:	10800017 	ldw	r2,0(r2)
10004428:	10800058 	cmpnei	r2,r2,1
1000442c:	10000a1e 	bne	r2,zero,10004458 <main+0x4124>
			if(kraid_blink == False)
10004430:	e0b93317 	ldw	r2,-6964(fp)
10004434:	1000031e 	bne	r2,zero,10004444 <main+0x4110>
				kraid_health-=1;
10004438:	e0b93017 	ldw	r2,-6976(fp)
1000443c:	10bfffc4 	addi	r2,r2,-1
10004440:	e0b93015 	stw	r2,-6976(fp)
			*BUL2_EN=0;
10004444:	00808004 	movi	r2,512
10004448:	10000015 	stw	zero,0(r2)
			kraid_blink = True;
1000444c:	00800044 	movi	r2,1
10004450:	e0b93315 	stw	r2,-6964(fp)
			kraid_counter = 0;
10004454:	e0393415 	stw	zero,-6960(fp)
		}
		if(*BUL3_X+12 > *KRAID_X && *BUL3_X < *KRAID_X+50 && *BUL3_Y+12 > *KRAID_Y && *BUL3_Y < *KRAID_Y+70 && (*KRAID_G_EN == True || *KRAID_N_EN == True || *KRAID_R_EN == True) && *BUL3_EN == 1){			if(kraid_blink == False)
10004458:	00807004 	movi	r2,448
1000445c:	10800017 	ldw	r2,0(r2)
10004460:	10800304 	addi	r2,r2,12
10004464:	00c02804 	movi	r3,160
10004468:	18c00017 	ldw	r3,0(r3)
1000446c:	18802c0e 	bge	r3,r2,10004520 <main+0x41ec>
10004470:	00807004 	movi	r2,448
10004474:	10c00017 	ldw	r3,0(r2)
10004478:	00802804 	movi	r2,160
1000447c:	10800017 	ldw	r2,0(r2)
10004480:	10800c84 	addi	r2,r2,50
10004484:	1880260e 	bge	r3,r2,10004520 <main+0x41ec>
10004488:	00806c04 	movi	r2,432
1000448c:	10800017 	ldw	r2,0(r2)
10004490:	10800304 	addi	r2,r2,12
10004494:	00c02404 	movi	r3,144
10004498:	18c00017 	ldw	r3,0(r3)
1000449c:	1880200e 	bge	r3,r2,10004520 <main+0x41ec>
100044a0:	00806c04 	movi	r2,432
100044a4:	10c00017 	ldw	r3,0(r2)
100044a8:	00802404 	movi	r2,144
100044ac:	10800017 	ldw	r2,0(r2)
100044b0:	10801184 	addi	r2,r2,70
100044b4:	18801a0e 	bge	r3,r2,10004520 <main+0x41ec>
100044b8:	00804004 	movi	r2,256
100044bc:	10800017 	ldw	r2,0(r2)
100044c0:	10800060 	cmpeqi	r2,r2,1
100044c4:	1000081e 	bne	r2,zero,100044e8 <main+0x41b4>
100044c8:	00803804 	movi	r2,224
100044cc:	10800017 	ldw	r2,0(r2)
100044d0:	10800060 	cmpeqi	r2,r2,1
100044d4:	1000041e 	bne	r2,zero,100044e8 <main+0x41b4>
100044d8:	00803c04 	movi	r2,240
100044dc:	10800017 	ldw	r2,0(r2)
100044e0:	10800058 	cmpnei	r2,r2,1
100044e4:	10000e1e 	bne	r2,zero,10004520 <main+0x41ec>
100044e8:	00807404 	movi	r2,464
100044ec:	10800017 	ldw	r2,0(r2)
100044f0:	10800058 	cmpnei	r2,r2,1
100044f4:	10000a1e 	bne	r2,zero,10004520 <main+0x41ec>
100044f8:	e0b93317 	ldw	r2,-6964(fp)
100044fc:	1000031e 	bne	r2,zero,1000450c <main+0x41d8>
				kraid_health-=1;
10004500:	e0b93017 	ldw	r2,-6976(fp)
10004504:	10bfffc4 	addi	r2,r2,-1
10004508:	e0b93015 	stw	r2,-6976(fp)
			*BUL3_EN=0;
1000450c:	00807404 	movi	r2,464
10004510:	10000015 	stw	zero,0(r2)
			kraid_blink = True;
10004514:	00800044 	movi	r2,1
10004518:	e0b93315 	stw	r2,-6964(fp)
			kraid_counter = 0;
1000451c:	e0393415 	stw	zero,-6960(fp)
		}

		if(monster1_1_health == 0){
10004520:	e0b92417 	ldw	r2,-7024(fp)
10004524:	10000d1e 	bne	r2,zero,1000455c <main+0x4228>
			*MON1_EN = 0;
10004528:	0080d404 	movi	r2,848
1000452c:	10000005 	stb	zero,0(r2)
			*EXP1_X = monster1_1_x-10;
10004530:	0080ac04 	movi	r2,688
10004534:	e0f92117 	ldw	r3,-7036(fp)
10004538:	18fffd84 	addi	r3,r3,-10
1000453c:	10c00015 	stw	r3,0(r2)
			*EXP1_Y = monster1_1_y-10;
10004540:	0080a804 	movi	r2,672
10004544:	e0f92217 	ldw	r3,-7032(fp)
10004548:	18fffd84 	addi	r3,r3,-10
1000454c:	10c00015 	stw	r3,0(r2)
			*EXP1_EN = 1;
10004550:	0080b004 	movi	r2,704
10004554:	00c00044 	movi	r3,1
10004558:	10c00015 	stw	r3,0(r2)
		}
		if(monster2_1_health == 0){
1000455c:	e0b92c17 	ldw	r2,-6992(fp)
10004560:	10000b1e 	bne	r2,zero,10004590 <main+0x425c>
			*MON2_EN = 0;
10004564:	0080c804 	movi	r2,800
10004568:	10000005 	stb	zero,0(r2)
			*EXP2_X = monster2_1_x;
1000456c:	0080a004 	movi	r2,640
10004570:	e0f92517 	ldw	r3,-7020(fp)
10004574:	10c00015 	stw	r3,0(r2)
			*EXP2_Y = monster2_1_y;
10004578:	00809c04 	movi	r2,624
1000457c:	e0f92617 	ldw	r3,-7016(fp)
10004580:	10c00015 	stw	r3,0(r2)
			*EXP2_EN = 1;
10004584:	0080a404 	movi	r2,656
10004588:	00c00044 	movi	r3,1
1000458c:	10c00015 	stw	r3,0(r2)
		}
		if(sceneNum == 4){
10004590:	e0b91f17 	ldw	r2,-7044(fp)
10004594:	10800118 	cmpnei	r2,r2,4
10004598:	10005c1e 	bne	r2,zero,1000470c <main+0x43d8>
			if(kraid_health <= 0){
1000459c:	e0b93017 	ldw	r2,-6976(fp)
100045a0:	00803a16 	blt	zero,r2,1000468c <main+0x4358>
				kraid_counter+=1;
100045a4:	e0b93417 	ldw	r2,-6960(fp)
100045a8:	10800044 	addi	r2,r2,1
100045ac:	e0b93415 	stw	r2,-6960(fp)
				if(kraid_counter > kraid_kill_counter){
100045b0:	e0b93417 	ldw	r2,-6960(fp)
100045b4:	e0f96c17 	ldw	r3,-6736(fp)
100045b8:	1880020e 	bge	r3,r2,100045c4 <main+0x4290>
					game_win = True;
100045bc:	00800044 	movi	r2,1
100045c0:	e0b94215 	stw	r2,-6904(fp)
				}
				*KRAID_G_EN = 0;
100045c4:	00804004 	movi	r2,256
100045c8:	10000015 	stw	zero,0(r2)
				*KRAID_N_EN = 0;
100045cc:	00803804 	movi	r2,224
100045d0:	10000015 	stw	zero,0(r2)
				*KRAID_R_EN = 0;
100045d4:	00803c04 	movi	r2,240
100045d8:	10000015 	stw	zero,0(r2)
				has_control = False;
100045dc:	e0391115 	stw	zero,-7100(fp)
				if(*EXP1_EN == 0){
100045e0:	0080b004 	movi	r2,704
100045e4:	10800017 	ldw	r2,0(r2)
100045e8:	1000481e 	bne	r2,zero,1000470c <main+0x43d8>
					*EXP1_X = *KRAID_X-20;
100045ec:	0080ac04 	movi	r2,688
100045f0:	00c02804 	movi	r3,160
100045f4:	18c00017 	ldw	r3,0(r3)
100045f8:	18fffb04 	addi	r3,r3,-20
100045fc:	10c00015 	stw	r3,0(r2)
					*EXP1_Y = *KRAID_Y-20;
10004600:	0080a804 	movi	r2,672
10004604:	00c02404 	movi	r3,144
10004608:	18c00017 	ldw	r3,0(r3)
1000460c:	18fffb04 	addi	r3,r3,-20
10004610:	10c00015 	stw	r3,0(r2)
					*EXP1_EN = 1;
10004614:	0080b004 	movi	r2,704
10004618:	00c00044 	movi	r3,1
1000461c:	10c00015 	stw	r3,0(r2)

					*EXP2_X = *KRAID_X+50;
10004620:	0080a004 	movi	r2,640
10004624:	00c02804 	movi	r3,160
10004628:	18c00017 	ldw	r3,0(r3)
1000462c:	18c00c84 	addi	r3,r3,50
10004630:	10c00015 	stw	r3,0(r2)
					*EXP2_Y = *KRAID_Y+10;
10004634:	00809c04 	movi	r2,624
10004638:	00c02404 	movi	r3,144
1000463c:	18c00017 	ldw	r3,0(r3)
10004640:	18c00284 	addi	r3,r3,10
10004644:	10c00015 	stw	r3,0(r2)
					*EXP2_EN = 1;
10004648:	0080a404 	movi	r2,656
1000464c:	00c00044 	movi	r3,1
10004650:	10c00015 	stw	r3,0(r2)

					*EXP3_X = *KRAID_X+15;
10004654:	00809404 	movi	r2,592
10004658:	00c02804 	movi	r3,160
1000465c:	18c00017 	ldw	r3,0(r3)
10004660:	18c003c4 	addi	r3,r3,15
10004664:	10c00015 	stw	r3,0(r2)
					*EXP3_Y = *KRAID_Y+40;
10004668:	00809004 	movi	r2,576
1000466c:	00c02404 	movi	r3,144
10004670:	18c00017 	ldw	r3,0(r3)
10004674:	18c00a04 	addi	r3,r3,40
10004678:	10c00015 	stw	r3,0(r2)
					*EXP3_EN = 1;
1000467c:	00809804 	movi	r2,608
10004680:	00c00044 	movi	r3,1
10004684:	10c00015 	stw	r3,0(r2)
10004688:	00002006 	br	1000470c <main+0x43d8>
				}
			}
			else if(kraid_health <= 5){
1000468c:	e0b93017 	ldw	r2,-6976(fp)
10004690:	10800188 	cmpgei	r2,r2,6
10004694:	1000081e 	bne	r2,zero,100046b8 <main+0x4384>
				*KRAID_G_EN = 1;
10004698:	00804004 	movi	r2,256
1000469c:	00c00044 	movi	r3,1
100046a0:	10c00015 	stw	r3,0(r2)
				*KRAID_N_EN = 0;
100046a4:	00803804 	movi	r2,224
100046a8:	10000015 	stw	zero,0(r2)
				*KRAID_R_EN = 0;
100046ac:	00803c04 	movi	r2,240
100046b0:	10000015 	stw	zero,0(r2)
100046b4:	00001506 	br	1000470c <main+0x43d8>
			}
			else if(kraid_health <= 10){
100046b8:	e0b93017 	ldw	r2,-6976(fp)
100046bc:	108002c8 	cmpgei	r2,r2,11
100046c0:	1000081e 	bne	r2,zero,100046e4 <main+0x43b0>
				*KRAID_G_EN = 0;
100046c4:	00804004 	movi	r2,256
100046c8:	10000015 	stw	zero,0(r2)
				*KRAID_N_EN = 1;
100046cc:	00803804 	movi	r2,224
100046d0:	00c00044 	movi	r3,1
100046d4:	10c00015 	stw	r3,0(r2)
				*KRAID_R_EN = 0;
100046d8:	00803c04 	movi	r2,240
100046dc:	10000015 	stw	zero,0(r2)
100046e0:	00000a06 	br	1000470c <main+0x43d8>
			}
			else if(kraid_health <= 15){
100046e4:	e0b93017 	ldw	r2,-6976(fp)
100046e8:	10800408 	cmpgei	r2,r2,16
100046ec:	1000071e 	bne	r2,zero,1000470c <main+0x43d8>
				*KRAID_G_EN = 0;
100046f0:	00804004 	movi	r2,256
100046f4:	10000015 	stw	zero,0(r2)
				*KRAID_N_EN = 0;
100046f8:	00803804 	movi	r2,224
100046fc:	10000015 	stw	zero,0(r2)
				*KRAID_R_EN = 1;
10004700:	00803c04 	movi	r2,240
10004704:	00c00044 	movi	r3,1
10004708:	10c00015 	stw	r3,0(r2)
			}
		}
		//Samus Collision with monster
		if(*SAMUS_X+45 > monster3_1_x && *SAMUS_X < monster3_1_x+30 && ((*SAMUS_Y+70 > monster3_1_y && *SAMUS_Y < monster3_1_y+10 && grounded == True) || (*SAMUS_Y+45 > monster3_1_y && *SAMUS_Y < monster3_1_y+10 && grounded == False)) && *MON3_EN == True && *SAMUS_EN == 1 && samus_inv_counter_start == False){
1000470c:	0080e404 	movi	r2,912
10004710:	10800017 	ldw	r2,0(r2)
10004714:	10800b44 	addi	r2,r2,45
10004718:	e0f92d17 	ldw	r3,-6988(fp)
1000471c:	1880370e 	bge	r3,r2,100047fc <main+0x44c8>
10004720:	0080e404 	movi	r2,912
10004724:	10c00017 	ldw	r3,0(r2)
10004728:	e0b92d17 	ldw	r2,-6988(fp)
1000472c:	10800784 	addi	r2,r2,30
10004730:	1880320e 	bge	r3,r2,100047fc <main+0x44c8>
10004734:	0080e004 	movi	r2,896
10004738:	10800017 	ldw	r2,0(r2)
1000473c:	10801184 	addi	r2,r2,70
10004740:	e0f92e17 	ldw	r3,-6984(fp)
10004744:	1880080e 	bge	r3,r2,10004768 <main+0x4434>
10004748:	0080e004 	movi	r2,896
1000474c:	10c00017 	ldw	r3,0(r2)
10004750:	e0b92e17 	ldw	r2,-6984(fp)
10004754:	10800284 	addi	r2,r2,10
10004758:	1880030e 	bge	r3,r2,10004768 <main+0x4434>
1000475c:	e0b90f17 	ldw	r2,-7108(fp)
10004760:	10800060 	cmpeqi	r2,r2,1
10004764:	10000c1e 	bne	r2,zero,10004798 <main+0x4464>
10004768:	0080e004 	movi	r2,896
1000476c:	10800017 	ldw	r2,0(r2)
10004770:	10800b44 	addi	r2,r2,45
10004774:	e0f92e17 	ldw	r3,-6984(fp)
10004778:	1880200e 	bge	r3,r2,100047fc <main+0x44c8>
1000477c:	0080e004 	movi	r2,896
10004780:	10c00017 	ldw	r3,0(r2)
10004784:	e0b92e17 	ldw	r2,-6984(fp)
10004788:	10800284 	addi	r2,r2,10
1000478c:	18801b0e 	bge	r3,r2,100047fc <main+0x44c8>
10004790:	e0b90f17 	ldw	r2,-7108(fp)
10004794:	1000191e 	bne	r2,zero,100047fc <main+0x44c8>
10004798:	0080bc04 	movi	r2,752
1000479c:	10800003 	ldbu	r2,0(r2)
100047a0:	10803fcc 	andi	r2,r2,255
100047a4:	1080201c 	xori	r2,r2,128
100047a8:	10bfe004 	addi	r2,r2,-128
100047ac:	10800058 	cmpnei	r2,r2,1
100047b0:	1000121e 	bne	r2,zero,100047fc <main+0x44c8>
100047b4:	0080e804 	movi	r2,928
100047b8:	10800003 	ldbu	r2,0(r2)
100047bc:	10803fcc 	andi	r2,r2,255
100047c0:	1080201c 	xori	r2,r2,128
100047c4:	10bfe004 	addi	r2,r2,-128
100047c8:	10800058 	cmpnei	r2,r2,1
100047cc:	10000b1e 	bne	r2,zero,100047fc <main+0x44c8>
100047d0:	e0b90c17 	ldw	r2,-7120(fp)
100047d4:	1000091e 	bne	r2,zero,100047fc <main+0x44c8>
			samus_inv_counter_start = True;
100047d8:	00800044 	movi	r2,1
100047dc:	e0b90c15 	stw	r2,-7120(fp)
			y_set = False;
100047e0:	e0391215 	stw	zero,-7096(fp)
			*HEALTH = *HEALTH-1;
100047e4:	00806804 	movi	r2,416
100047e8:	00c06804 	movi	r3,416
100047ec:	18c00017 	ldw	r3,0(r3)
100047f0:	18ffffc4 	addi	r3,r3,-1
100047f4:	10c00015 	stw	r3,0(r2)
100047f8:	00018106 	br	10004e00 <main+0x4acc>
		}
		else if(*SAMUS_X+45 > monster2_1_x && *SAMUS_X < monster2_1_x+45 && ((*SAMUS_Y+70 > monster2_1_y && *SAMUS_Y < monster2_1_y+33 && grounded == True) || (*SAMUS_Y+45 > monster2_1_y && *SAMUS_Y < monster2_1_y+33 && grounded == False)) && *MON2_EN == True && *SAMUS_EN == 1 && samus_inv_counter_start == False){
100047fc:	0080e404 	movi	r2,912
10004800:	10800017 	ldw	r2,0(r2)
10004804:	10800b44 	addi	r2,r2,45
10004808:	e0f92517 	ldw	r3,-7020(fp)
1000480c:	1880370e 	bge	r3,r2,100048ec <main+0x45b8>
10004810:	0080e404 	movi	r2,912
10004814:	10c00017 	ldw	r3,0(r2)
10004818:	e0b92517 	ldw	r2,-7020(fp)
1000481c:	10800b44 	addi	r2,r2,45
10004820:	1880320e 	bge	r3,r2,100048ec <main+0x45b8>
10004824:	0080e004 	movi	r2,896
10004828:	10800017 	ldw	r2,0(r2)
1000482c:	10801184 	addi	r2,r2,70
10004830:	e0f92617 	ldw	r3,-7016(fp)
10004834:	1880080e 	bge	r3,r2,10004858 <main+0x4524>
10004838:	0080e004 	movi	r2,896
1000483c:	10c00017 	ldw	r3,0(r2)
10004840:	e0b92617 	ldw	r2,-7016(fp)
10004844:	10800844 	addi	r2,r2,33
10004848:	1880030e 	bge	r3,r2,10004858 <main+0x4524>
1000484c:	e0b90f17 	ldw	r2,-7108(fp)
10004850:	10800060 	cmpeqi	r2,r2,1
10004854:	10000c1e 	bne	r2,zero,10004888 <main+0x4554>
10004858:	0080e004 	movi	r2,896
1000485c:	10800017 	ldw	r2,0(r2)
10004860:	10800b44 	addi	r2,r2,45
10004864:	e0f92617 	ldw	r3,-7016(fp)
10004868:	1880200e 	bge	r3,r2,100048ec <main+0x45b8>
1000486c:	0080e004 	movi	r2,896
10004870:	10c00017 	ldw	r3,0(r2)
10004874:	e0b92617 	ldw	r2,-7016(fp)
10004878:	10800844 	addi	r2,r2,33
1000487c:	18801b0e 	bge	r3,r2,100048ec <main+0x45b8>
10004880:	e0b90f17 	ldw	r2,-7108(fp)
10004884:	1000191e 	bne	r2,zero,100048ec <main+0x45b8>
10004888:	0080c804 	movi	r2,800
1000488c:	10800003 	ldbu	r2,0(r2)
10004890:	10803fcc 	andi	r2,r2,255
10004894:	1080201c 	xori	r2,r2,128
10004898:	10bfe004 	addi	r2,r2,-128
1000489c:	10800058 	cmpnei	r2,r2,1
100048a0:	1000121e 	bne	r2,zero,100048ec <main+0x45b8>
100048a4:	0080e804 	movi	r2,928
100048a8:	10800003 	ldbu	r2,0(r2)
100048ac:	10803fcc 	andi	r2,r2,255
100048b0:	1080201c 	xori	r2,r2,128
100048b4:	10bfe004 	addi	r2,r2,-128
100048b8:	10800058 	cmpnei	r2,r2,1
100048bc:	10000b1e 	bne	r2,zero,100048ec <main+0x45b8>
100048c0:	e0b90c17 	ldw	r2,-7120(fp)
100048c4:	1000091e 	bne	r2,zero,100048ec <main+0x45b8>
			samus_inv_counter_start = True;
100048c8:	00800044 	movi	r2,1
100048cc:	e0b90c15 	stw	r2,-7120(fp)
			y_set = False;
100048d0:	e0391215 	stw	zero,-7096(fp)
			*HEALTH = *HEALTH-1;
100048d4:	00806804 	movi	r2,416
100048d8:	00c06804 	movi	r3,416
100048dc:	18c00017 	ldw	r3,0(r3)
100048e0:	18ffffc4 	addi	r3,r3,-1
100048e4:	10c00015 	stw	r3,0(r2)
100048e8:	00014506 	br	10004e00 <main+0x4acc>
		}
		else if(*SAMUS_X+45 > monster1_1_x && *SAMUS_X < monster1_1_x+30 && ((*SAMUS_Y+70 > monster1_1_y && *SAMUS_Y < monster1_1_y+30 && grounded == True) || (*SAMUS_Y+45 > monster1_1_y && *SAMUS_Y < monster1_1_y+30 && grounded == False)) && *MON1_EN == True && *SAMUS_EN == 1 && samus_inv_counter_start == False){
100048ec:	0080e404 	movi	r2,912
100048f0:	10800017 	ldw	r2,0(r2)
100048f4:	10800b44 	addi	r2,r2,45
100048f8:	e0f92117 	ldw	r3,-7036(fp)
100048fc:	1880370e 	bge	r3,r2,100049dc <main+0x46a8>
10004900:	0080e404 	movi	r2,912
10004904:	10c00017 	ldw	r3,0(r2)
10004908:	e0b92117 	ldw	r2,-7036(fp)
1000490c:	10800784 	addi	r2,r2,30
10004910:	1880320e 	bge	r3,r2,100049dc <main+0x46a8>
10004914:	0080e004 	movi	r2,896
10004918:	10800017 	ldw	r2,0(r2)
1000491c:	10801184 	addi	r2,r2,70
10004920:	e0f92217 	ldw	r3,-7032(fp)
10004924:	1880080e 	bge	r3,r2,10004948 <main+0x4614>
10004928:	0080e004 	movi	r2,896
1000492c:	10c00017 	ldw	r3,0(r2)
10004930:	e0b92217 	ldw	r2,-7032(fp)
10004934:	10800784 	addi	r2,r2,30
10004938:	1880030e 	bge	r3,r2,10004948 <main+0x4614>
1000493c:	e0b90f17 	ldw	r2,-7108(fp)
10004940:	10800060 	cmpeqi	r2,r2,1
10004944:	10000c1e 	bne	r2,zero,10004978 <main+0x4644>
10004948:	0080e004 	movi	r2,896
1000494c:	10800017 	ldw	r2,0(r2)
10004950:	10800b44 	addi	r2,r2,45
10004954:	e0f92217 	ldw	r3,-7032(fp)
10004958:	1880200e 	bge	r3,r2,100049dc <main+0x46a8>
1000495c:	0080e004 	movi	r2,896
10004960:	10c00017 	ldw	r3,0(r2)
10004964:	e0b92217 	ldw	r2,-7032(fp)
10004968:	10800784 	addi	r2,r2,30
1000496c:	18801b0e 	bge	r3,r2,100049dc <main+0x46a8>
10004970:	e0b90f17 	ldw	r2,-7108(fp)
10004974:	1000191e 	bne	r2,zero,100049dc <main+0x46a8>
10004978:	0080d404 	movi	r2,848
1000497c:	10800003 	ldbu	r2,0(r2)
10004980:	10803fcc 	andi	r2,r2,255
10004984:	1080201c 	xori	r2,r2,128
10004988:	10bfe004 	addi	r2,r2,-128
1000498c:	10800058 	cmpnei	r2,r2,1
10004990:	1000121e 	bne	r2,zero,100049dc <main+0x46a8>
10004994:	0080e804 	movi	r2,928
10004998:	10800003 	ldbu	r2,0(r2)
1000499c:	10803fcc 	andi	r2,r2,255
100049a0:	1080201c 	xori	r2,r2,128
100049a4:	10bfe004 	addi	r2,r2,-128
100049a8:	10800058 	cmpnei	r2,r2,1
100049ac:	10000b1e 	bne	r2,zero,100049dc <main+0x46a8>
100049b0:	e0b90c17 	ldw	r2,-7120(fp)
100049b4:	1000091e 	bne	r2,zero,100049dc <main+0x46a8>
			samus_inv_counter_start = True;
100049b8:	00800044 	movi	r2,1
100049bc:	e0b90c15 	stw	r2,-7120(fp)
			y_set = False;
100049c0:	e0391215 	stw	zero,-7096(fp)
			*HEALTH = *HEALTH-1;
100049c4:	00806804 	movi	r2,416
100049c8:	00c06804 	movi	r3,416
100049cc:	18c00017 	ldw	r3,0(r3)
100049d0:	18ffffc4 	addi	r3,r3,-1
100049d4:	10c00015 	stw	r3,0(r2)
100049d8:	00010906 	br	10004e00 <main+0x4acc>
		}
		else if(*SAMUS_X+45 > *KRAID_X && *SAMUS_X < *KRAID_X+60 && ((*SAMUS_Y+70 > *KRAID_Y && *SAMUS_Y < *KRAID_Y+70 && grounded == True) || (*SAMUS_Y+45 > *KRAID_Y && *SAMUS_Y < *KRAID_Y+70 && grounded == False)) && (*KRAID_G_EN == True || *KRAID_N_EN == True || *KRAID_R_EN == True)&& *SAMUS_EN == 1 && samus_inv_counter_start == False){
100049dc:	0080e404 	movi	r2,912
100049e0:	10800017 	ldw	r2,0(r2)
100049e4:	10800b44 	addi	r2,r2,45
100049e8:	00c02804 	movi	r3,160
100049ec:	18c00017 	ldw	r3,0(r3)
100049f0:	1880410e 	bge	r3,r2,10004af8 <main+0x47c4>
100049f4:	0080e404 	movi	r2,912
100049f8:	10c00017 	ldw	r3,0(r2)
100049fc:	00802804 	movi	r2,160
10004a00:	10800017 	ldw	r2,0(r2)
10004a04:	10800f04 	addi	r2,r2,60
10004a08:	18803b0e 	bge	r3,r2,10004af8 <main+0x47c4>
10004a0c:	0080e004 	movi	r2,896
10004a10:	10800017 	ldw	r2,0(r2)
10004a14:	10801184 	addi	r2,r2,70
10004a18:	00c02404 	movi	r3,144
10004a1c:	18c00017 	ldw	r3,0(r3)
10004a20:	1880090e 	bge	r3,r2,10004a48 <main+0x4714>
10004a24:	0080e004 	movi	r2,896
10004a28:	10c00017 	ldw	r3,0(r2)
10004a2c:	00802404 	movi	r2,144
10004a30:	10800017 	ldw	r2,0(r2)
10004a34:	10801184 	addi	r2,r2,70
10004a38:	1880030e 	bge	r3,r2,10004a48 <main+0x4714>
10004a3c:	e0b90f17 	ldw	r2,-7108(fp)
10004a40:	10800060 	cmpeqi	r2,r2,1
10004a44:	10000e1e 	bne	r2,zero,10004a80 <main+0x474c>
10004a48:	0080e004 	movi	r2,896
10004a4c:	10800017 	ldw	r2,0(r2)
10004a50:	10800b44 	addi	r2,r2,45
10004a54:	00c02404 	movi	r3,144
10004a58:	18c00017 	ldw	r3,0(r3)
10004a5c:	1880260e 	bge	r3,r2,10004af8 <main+0x47c4>
10004a60:	0080e004 	movi	r2,896
10004a64:	10c00017 	ldw	r3,0(r2)
10004a68:	00802404 	movi	r2,144
10004a6c:	10800017 	ldw	r2,0(r2)
10004a70:	10801184 	addi	r2,r2,70
10004a74:	1880200e 	bge	r3,r2,10004af8 <main+0x47c4>
10004a78:	e0b90f17 	ldw	r2,-7108(fp)
10004a7c:	10001e1e 	bne	r2,zero,10004af8 <main+0x47c4>
10004a80:	00804004 	movi	r2,256
10004a84:	10800017 	ldw	r2,0(r2)
10004a88:	10800060 	cmpeqi	r2,r2,1
10004a8c:	1000081e 	bne	r2,zero,10004ab0 <main+0x477c>
10004a90:	00803804 	movi	r2,224
10004a94:	10800017 	ldw	r2,0(r2)
10004a98:	10800060 	cmpeqi	r2,r2,1
10004a9c:	1000041e 	bne	r2,zero,10004ab0 <main+0x477c>
10004aa0:	00803c04 	movi	r2,240
10004aa4:	10800017 	ldw	r2,0(r2)
10004aa8:	10800058 	cmpnei	r2,r2,1
10004aac:	1000121e 	bne	r2,zero,10004af8 <main+0x47c4>
10004ab0:	0080e804 	movi	r2,928
10004ab4:	10800003 	ldbu	r2,0(r2)
10004ab8:	10803fcc 	andi	r2,r2,255
10004abc:	1080201c 	xori	r2,r2,128
10004ac0:	10bfe004 	addi	r2,r2,-128
10004ac4:	10800058 	cmpnei	r2,r2,1
10004ac8:	10000b1e 	bne	r2,zero,10004af8 <main+0x47c4>
10004acc:	e0b90c17 	ldw	r2,-7120(fp)
10004ad0:	1000091e 	bne	r2,zero,10004af8 <main+0x47c4>
			samus_inv_counter_start = True;
10004ad4:	00800044 	movi	r2,1
10004ad8:	e0b90c15 	stw	r2,-7120(fp)
			y_set = False;
10004adc:	e0391215 	stw	zero,-7096(fp)
			*HEALTH = *HEALTH-1;
10004ae0:	00806804 	movi	r2,416
10004ae4:	00c06804 	movi	r3,416
10004ae8:	18c00017 	ldw	r3,0(r3)
10004aec:	18ffffc4 	addi	r3,r3,-1
10004af0:	10c00015 	stw	r3,0(r2)
10004af4:	0000c206 	br	10004e00 <main+0x4acc>
		}
		else if(*SAMUS_X+45 > *KRAID_SPIKE_X && *SAMUS_X < *KRAID_SPIKE_X+10 && ((*SAMUS_Y+70 > *KRAID_SPIKE_Y && *SAMUS_Y < *KRAID_SPIKE_Y+10 && grounded == True) || (*SAMUS_Y+45 > *KRAID_SPIKE_Y && *SAMUS_Y < *KRAID_SPIKE_Y+10 && grounded == False)) && *KRAID_SHOOT_EN == True && *SAMUS_EN == 1 && samus_inv_counter_start == False){
10004af8:	0080e404 	movi	r2,912
10004afc:	10800017 	ldw	r2,0(r2)
10004b00:	10800b44 	addi	r2,r2,45
10004b04:	00c02004 	movi	r3,128
10004b08:	18c00017 	ldw	r3,0(r3)
10004b0c:	18803b0e 	bge	r3,r2,10004bfc <main+0x48c8>
10004b10:	0080e404 	movi	r2,912
10004b14:	10c00017 	ldw	r3,0(r2)
10004b18:	00802004 	movi	r2,128
10004b1c:	10800017 	ldw	r2,0(r2)
10004b20:	10800284 	addi	r2,r2,10
10004b24:	1880350e 	bge	r3,r2,10004bfc <main+0x48c8>
10004b28:	0080e004 	movi	r2,896
10004b2c:	10800017 	ldw	r2,0(r2)
10004b30:	10801184 	addi	r2,r2,70
10004b34:	00c01c04 	movi	r3,112
10004b38:	18c00017 	ldw	r3,0(r3)
10004b3c:	1880090e 	bge	r3,r2,10004b64 <main+0x4830>
10004b40:	0080e004 	movi	r2,896
10004b44:	10c00017 	ldw	r3,0(r2)
10004b48:	00801c04 	movi	r2,112
10004b4c:	10800017 	ldw	r2,0(r2)
10004b50:	10800284 	addi	r2,r2,10
10004b54:	1880030e 	bge	r3,r2,10004b64 <main+0x4830>
10004b58:	e0b90f17 	ldw	r2,-7108(fp)
10004b5c:	10800060 	cmpeqi	r2,r2,1
10004b60:	10000e1e 	bne	r2,zero,10004b9c <main+0x4868>
10004b64:	0080e004 	movi	r2,896
10004b68:	10800017 	ldw	r2,0(r2)
10004b6c:	10800b44 	addi	r2,r2,45
10004b70:	00c01c04 	movi	r3,112
10004b74:	18c00017 	ldw	r3,0(r3)
10004b78:	1880200e 	bge	r3,r2,10004bfc <main+0x48c8>
10004b7c:	0080e004 	movi	r2,896
10004b80:	10c00017 	ldw	r3,0(r2)
10004b84:	00801c04 	movi	r2,112
10004b88:	10800017 	ldw	r2,0(r2)
10004b8c:	10800284 	addi	r2,r2,10
10004b90:	18801a0e 	bge	r3,r2,10004bfc <main+0x48c8>
10004b94:	e0b90f17 	ldw	r2,-7108(fp)
10004b98:	1000181e 	bne	r2,zero,10004bfc <main+0x48c8>
10004b9c:	00803404 	movi	r2,208
10004ba0:	10800017 	ldw	r2,0(r2)
10004ba4:	10800058 	cmpnei	r2,r2,1
10004ba8:	1000141e 	bne	r2,zero,10004bfc <main+0x48c8>
10004bac:	0080e804 	movi	r2,928
10004bb0:	10800003 	ldbu	r2,0(r2)
10004bb4:	10803fcc 	andi	r2,r2,255
10004bb8:	1080201c 	xori	r2,r2,128
10004bbc:	10bfe004 	addi	r2,r2,-128
10004bc0:	10800058 	cmpnei	r2,r2,1
10004bc4:	10000d1e 	bne	r2,zero,10004bfc <main+0x48c8>
10004bc8:	e0b90c17 	ldw	r2,-7120(fp)
10004bcc:	10000b1e 	bne	r2,zero,10004bfc <main+0x48c8>
			samus_inv_counter_start = True;
10004bd0:	00800044 	movi	r2,1
10004bd4:	e0b90c15 	stw	r2,-7120(fp)
			y_set = False;
10004bd8:	e0391215 	stw	zero,-7096(fp)
			*HEALTH = *HEALTH-1;
10004bdc:	00806804 	movi	r2,416
10004be0:	00c06804 	movi	r3,416
10004be4:	18c00017 	ldw	r3,0(r3)
10004be8:	18ffffc4 	addi	r3,r3,-1
10004bec:	10c00015 	stw	r3,0(r2)
			*KRAID_SHOOT_EN = False;
10004bf0:	00803404 	movi	r2,208
10004bf4:	10000015 	stw	zero,0(r2)
10004bf8:	00008106 	br	10004e00 <main+0x4acc>
		}
		else if(*SAMUS_X+45 > *KRAID_THROW_X && *SAMUS_X < *KRAID_THROW_X+10 && ((*SAMUS_Y+70 > *KRAID_THROW_Y && *SAMUS_Y < *KRAID_THROW_Y+10 && grounded == True) || (*SAMUS_Y+45 > *KRAID_THROW_Y && *SAMUS_Y < *KRAID_THROW_Y+10 && grounded == False)) && *KRAID_THROW_EN == True && *SAMUS_EN == 1 && samus_inv_counter_start == False){
10004bfc:	0080e404 	movi	r2,912
10004c00:	10800017 	ldw	r2,0(r2)
10004c04:	10800b44 	addi	r2,r2,45
10004c08:	00c01804 	movi	r3,96
10004c0c:	18c00017 	ldw	r3,0(r3)
10004c10:	18803b0e 	bge	r3,r2,10004d00 <main+0x49cc>
10004c14:	0080e404 	movi	r2,912
10004c18:	10c00017 	ldw	r3,0(r2)
10004c1c:	00801804 	movi	r2,96
10004c20:	10800017 	ldw	r2,0(r2)
10004c24:	10800284 	addi	r2,r2,10
10004c28:	1880350e 	bge	r3,r2,10004d00 <main+0x49cc>
10004c2c:	0080e004 	movi	r2,896
10004c30:	10800017 	ldw	r2,0(r2)
10004c34:	10801184 	addi	r2,r2,70
10004c38:	00c01404 	movi	r3,80
10004c3c:	18c00017 	ldw	r3,0(r3)
10004c40:	1880090e 	bge	r3,r2,10004c68 <main+0x4934>
10004c44:	0080e004 	movi	r2,896
10004c48:	10c00017 	ldw	r3,0(r2)
10004c4c:	00801404 	movi	r2,80
10004c50:	10800017 	ldw	r2,0(r2)
10004c54:	10800284 	addi	r2,r2,10
10004c58:	1880030e 	bge	r3,r2,10004c68 <main+0x4934>
10004c5c:	e0b90f17 	ldw	r2,-7108(fp)
10004c60:	10800060 	cmpeqi	r2,r2,1
10004c64:	10000e1e 	bne	r2,zero,10004ca0 <main+0x496c>
10004c68:	0080e004 	movi	r2,896
10004c6c:	10800017 	ldw	r2,0(r2)
10004c70:	10800b44 	addi	r2,r2,45
10004c74:	00c01404 	movi	r3,80
10004c78:	18c00017 	ldw	r3,0(r3)
10004c7c:	1880200e 	bge	r3,r2,10004d00 <main+0x49cc>
10004c80:	0080e004 	movi	r2,896
10004c84:	10c00017 	ldw	r3,0(r2)
10004c88:	00801404 	movi	r2,80
10004c8c:	10800017 	ldw	r2,0(r2)
10004c90:	10800284 	addi	r2,r2,10
10004c94:	18801a0e 	bge	r3,r2,10004d00 <main+0x49cc>
10004c98:	e0b90f17 	ldw	r2,-7108(fp)
10004c9c:	1000181e 	bne	r2,zero,10004d00 <main+0x49cc>
10004ca0:	00803004 	movi	r2,192
10004ca4:	10800017 	ldw	r2,0(r2)
10004ca8:	10800058 	cmpnei	r2,r2,1
10004cac:	1000141e 	bne	r2,zero,10004d00 <main+0x49cc>
10004cb0:	0080e804 	movi	r2,928
10004cb4:	10800003 	ldbu	r2,0(r2)
10004cb8:	10803fcc 	andi	r2,r2,255
10004cbc:	1080201c 	xori	r2,r2,128
10004cc0:	10bfe004 	addi	r2,r2,-128
10004cc4:	10800058 	cmpnei	r2,r2,1
10004cc8:	10000d1e 	bne	r2,zero,10004d00 <main+0x49cc>
10004ccc:	e0b90c17 	ldw	r2,-7120(fp)
10004cd0:	10000b1e 	bne	r2,zero,10004d00 <main+0x49cc>
			samus_inv_counter_start = True;
10004cd4:	00800044 	movi	r2,1
10004cd8:	e0b90c15 	stw	r2,-7120(fp)
			y_set = False;
10004cdc:	e0391215 	stw	zero,-7096(fp)
			*HEALTH = *HEALTH-1;
10004ce0:	00806804 	movi	r2,416
10004ce4:	00c06804 	movi	r3,416
10004ce8:	18c00017 	ldw	r3,0(r3)
10004cec:	18ffffc4 	addi	r3,r3,-1
10004cf0:	10c00015 	stw	r3,0(r2)
			*KRAID_THROW_EN = False;
10004cf4:	00803004 	movi	r2,192
10004cf8:	10000015 	stw	zero,0(r2)
10004cfc:	00004006 	br	10004e00 <main+0x4acc>
		}
		else if(*SAMUS_X+45 > *KRAID_THROW_2_X && *SAMUS_X < *KRAID_THROW_2_X+10 && ((*SAMUS_Y+70 > *KRAID_THROW_2_Y && *SAMUS_Y < *KRAID_THROW_2_Y+10 && grounded == True) || (*SAMUS_Y+45 > *KRAID_THROW_2_Y && *SAMUS_Y < *KRAID_THROW_2_Y+10 && grounded == False)) && *KRAID_THROW_2_EN == True && *SAMUS_EN == 1 && samus_inv_counter_start == False){
10004d00:	0080e404 	movi	r2,912
10004d04:	10800017 	ldw	r2,0(r2)
10004d08:	10800b44 	addi	r2,r2,45
10004d0c:	00c00c04 	movi	r3,48
10004d10:	18c00017 	ldw	r3,0(r3)
10004d14:	18803a0e 	bge	r3,r2,10004e00 <main+0x4acc>
10004d18:	0080e404 	movi	r2,912
10004d1c:	10c00017 	ldw	r3,0(r2)
10004d20:	00800c04 	movi	r2,48
10004d24:	10800017 	ldw	r2,0(r2)
10004d28:	10800284 	addi	r2,r2,10
10004d2c:	1880340e 	bge	r3,r2,10004e00 <main+0x4acc>
10004d30:	0080e004 	movi	r2,896
10004d34:	10800017 	ldw	r2,0(r2)
10004d38:	10801184 	addi	r2,r2,70
10004d3c:	00c00804 	movi	r3,32
10004d40:	18c00017 	ldw	r3,0(r3)
10004d44:	1880090e 	bge	r3,r2,10004d6c <main+0x4a38>
10004d48:	0080e004 	movi	r2,896
10004d4c:	10c00017 	ldw	r3,0(r2)
10004d50:	00800804 	movi	r2,32
10004d54:	10800017 	ldw	r2,0(r2)
10004d58:	10800284 	addi	r2,r2,10
10004d5c:	1880030e 	bge	r3,r2,10004d6c <main+0x4a38>
10004d60:	e0b90f17 	ldw	r2,-7108(fp)
10004d64:	10800060 	cmpeqi	r2,r2,1
10004d68:	10000e1e 	bne	r2,zero,10004da4 <main+0x4a70>
10004d6c:	0080e004 	movi	r2,896
10004d70:	10800017 	ldw	r2,0(r2)
10004d74:	10800b44 	addi	r2,r2,45
10004d78:	00c00804 	movi	r3,32
10004d7c:	18c00017 	ldw	r3,0(r3)
10004d80:	18801f0e 	bge	r3,r2,10004e00 <main+0x4acc>
10004d84:	0080e004 	movi	r2,896
10004d88:	10c00017 	ldw	r3,0(r2)
10004d8c:	00800804 	movi	r2,32
10004d90:	10800017 	ldw	r2,0(r2)
10004d94:	10800284 	addi	r2,r2,10
10004d98:	1880190e 	bge	r3,r2,10004e00 <main+0x4acc>
10004d9c:	e0b90f17 	ldw	r2,-7108(fp)
10004da0:	1000171e 	bne	r2,zero,10004e00 <main+0x4acc>
10004da4:	00801004 	movi	r2,64
10004da8:	10800017 	ldw	r2,0(r2)
10004dac:	10800058 	cmpnei	r2,r2,1
10004db0:	1000131e 	bne	r2,zero,10004e00 <main+0x4acc>
10004db4:	0080e804 	movi	r2,928
10004db8:	10800003 	ldbu	r2,0(r2)
10004dbc:	10803fcc 	andi	r2,r2,255
10004dc0:	1080201c 	xori	r2,r2,128
10004dc4:	10bfe004 	addi	r2,r2,-128
10004dc8:	10800058 	cmpnei	r2,r2,1
10004dcc:	10000c1e 	bne	r2,zero,10004e00 <main+0x4acc>
10004dd0:	e0b90c17 	ldw	r2,-7120(fp)
10004dd4:	10000a1e 	bne	r2,zero,10004e00 <main+0x4acc>
			samus_inv_counter_start = True;
10004dd8:	00800044 	movi	r2,1
10004ddc:	e0b90c15 	stw	r2,-7120(fp)
			y_set = False;
10004de0:	e0391215 	stw	zero,-7096(fp)
			*HEALTH = *HEALTH-1;
10004de4:	00806804 	movi	r2,416
10004de8:	00c06804 	movi	r3,416
10004dec:	18c00017 	ldw	r3,0(r3)
10004df0:	18ffffc4 	addi	r3,r3,-1
10004df4:	10c00015 	stw	r3,0(r2)
			*KRAID_THROW_2_EN = False;
10004df8:	00801004 	movi	r2,64
10004dfc:	10000015 	stw	zero,0(r2)
		}




		if(samus_inv_counter_start == True){
10004e00:	e0b90c17 	ldw	r2,-7120(fp)
10004e04:	10800058 	cmpnei	r2,r2,1
10004e08:	10017f1e 	bne	r2,zero,10005408 <main+0x50d4>
			if(*SAMUS_EN == False){
10004e0c:	0080e804 	movi	r2,928
10004e10:	10800003 	ldbu	r2,0(r2)
10004e14:	10803fcc 	andi	r2,r2,255
10004e18:	1080201c 	xori	r2,r2,128
10004e1c:	10bfe004 	addi	r2,r2,-128
10004e20:	1000041e 	bne	r2,zero,10004e34 <main+0x4b00>
				*SAMUS_EN = True;
10004e24:	0080e804 	movi	r2,928
10004e28:	00c00044 	movi	r3,1
10004e2c:	10c00005 	stb	r3,0(r2)
10004e30:	00000206 	br	10004e3c <main+0x4b08>
			}
			else{
				*SAMUS_EN = False;
10004e34:	0080e804 	movi	r2,928
10004e38:	10000005 	stb	zero,0(r2)
			}

			if(samus_inv_counter < 15){
10004e3c:	e0b90b17 	ldw	r2,-7124(fp)
10004e40:	108003c8 	cmpgei	r2,r2,15
10004e44:	1001621e 	bne	r2,zero,100053d0 <main+0x509c>
				if(scene[sceneNum][(*SAMUS_Y+15)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+25)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+50)/30][(*SAMUS_X-3)/30]==0 && scene[sceneNum][(*SAMUS_Y+70)/30][(*SAMUS_X-3)/30]==0 && *SAMUS_DIR == 0){
10004e48:	0080e004 	movi	r2,896
10004e4c:	10800017 	ldw	r2,0(r2)
10004e50:	108003c4 	addi	r2,r2,15
10004e54:	1009883a 	mov	r4,r2
10004e58:	01400784 	movi	r5,30
10004e5c:	00074040 	call	10007404 <__divsi3>
10004e60:	1023883a 	mov	r17,r2
10004e64:	0080e404 	movi	r2,912
10004e68:	10800017 	ldw	r2,0(r2)
10004e6c:	10bfff44 	addi	r2,r2,-3
10004e70:	1009883a 	mov	r4,r2
10004e74:	01400784 	movi	r5,30
10004e78:	00074040 	call	10007404 <__divsi3>
10004e7c:	1021883a 	mov	r16,r2
10004e80:	e4b91f17 	ldw	r18,-7044(fp)
10004e84:	8809883a 	mov	r4,r17
10004e88:	01400544 	movi	r5,21
10004e8c:	00074c40 	call	100074c4 <__mulsi3>
10004e90:	1023883a 	mov	r17,r2
10004e94:	9009883a 	mov	r4,r18
10004e98:	01405404 	movi	r5,336
10004e9c:	00074c40 	call	100074c4 <__mulsi3>
10004ea0:	8885883a 	add	r2,r17,r2
10004ea4:	1405883a 	add	r2,r2,r16
10004ea8:	1085883a 	add	r2,r2,r2
10004eac:	1085883a 	add	r2,r2,r2
10004eb0:	e0f90a04 	addi	r3,fp,-7128
10004eb4:	1885883a 	add	r2,r3,r2
10004eb8:	10806304 	addi	r2,r2,396
10004ebc:	10800017 	ldw	r2,0(r2)
10004ec0:	10006f1e 	bne	r2,zero,10005080 <main+0x4d4c>
10004ec4:	0080e004 	movi	r2,896
10004ec8:	10800017 	ldw	r2,0(r2)
10004ecc:	10800644 	addi	r2,r2,25
10004ed0:	1009883a 	mov	r4,r2
10004ed4:	01400784 	movi	r5,30
10004ed8:	00074040 	call	10007404 <__divsi3>
10004edc:	1023883a 	mov	r17,r2
10004ee0:	0080e404 	movi	r2,912
10004ee4:	10800017 	ldw	r2,0(r2)
10004ee8:	10bfff44 	addi	r2,r2,-3
10004eec:	1009883a 	mov	r4,r2
10004ef0:	01400784 	movi	r5,30
10004ef4:	00074040 	call	10007404 <__divsi3>
10004ef8:	1021883a 	mov	r16,r2
10004efc:	e4b91f17 	ldw	r18,-7044(fp)
10004f00:	8809883a 	mov	r4,r17
10004f04:	01400544 	movi	r5,21
10004f08:	00074c40 	call	100074c4 <__mulsi3>
10004f0c:	1023883a 	mov	r17,r2
10004f10:	9009883a 	mov	r4,r18
10004f14:	01405404 	movi	r5,336
10004f18:	00074c40 	call	100074c4 <__mulsi3>
10004f1c:	8885883a 	add	r2,r17,r2
10004f20:	1405883a 	add	r2,r2,r16
10004f24:	1085883a 	add	r2,r2,r2
10004f28:	1085883a 	add	r2,r2,r2
10004f2c:	e0f90a04 	addi	r3,fp,-7128
10004f30:	1885883a 	add	r2,r3,r2
10004f34:	10806304 	addi	r2,r2,396
10004f38:	10800017 	ldw	r2,0(r2)
10004f3c:	1000501e 	bne	r2,zero,10005080 <main+0x4d4c>
10004f40:	0080e004 	movi	r2,896
10004f44:	10800017 	ldw	r2,0(r2)
10004f48:	10800c84 	addi	r2,r2,50
10004f4c:	1009883a 	mov	r4,r2
10004f50:	01400784 	movi	r5,30
10004f54:	00074040 	call	10007404 <__divsi3>
10004f58:	1023883a 	mov	r17,r2
10004f5c:	0080e404 	movi	r2,912
10004f60:	10800017 	ldw	r2,0(r2)
10004f64:	10bfff44 	addi	r2,r2,-3
10004f68:	1009883a 	mov	r4,r2
10004f6c:	01400784 	movi	r5,30
10004f70:	00074040 	call	10007404 <__divsi3>
10004f74:	1021883a 	mov	r16,r2
10004f78:	e4b91f17 	ldw	r18,-7044(fp)
10004f7c:	8809883a 	mov	r4,r17
10004f80:	01400544 	movi	r5,21
10004f84:	00074c40 	call	100074c4 <__mulsi3>
10004f88:	1023883a 	mov	r17,r2
10004f8c:	9009883a 	mov	r4,r18
10004f90:	01405404 	movi	r5,336
10004f94:	00074c40 	call	100074c4 <__mulsi3>
10004f98:	8885883a 	add	r2,r17,r2
10004f9c:	1405883a 	add	r2,r2,r16
10004fa0:	1085883a 	add	r2,r2,r2
10004fa4:	1085883a 	add	r2,r2,r2
10004fa8:	e0f90a04 	addi	r3,fp,-7128
10004fac:	1885883a 	add	r2,r3,r2
10004fb0:	10806304 	addi	r2,r2,396
10004fb4:	10800017 	ldw	r2,0(r2)
10004fb8:	1000311e 	bne	r2,zero,10005080 <main+0x4d4c>
10004fbc:	0080e004 	movi	r2,896
10004fc0:	10800017 	ldw	r2,0(r2)
10004fc4:	10801184 	addi	r2,r2,70
10004fc8:	1009883a 	mov	r4,r2
10004fcc:	01400784 	movi	r5,30
10004fd0:	00074040 	call	10007404 <__divsi3>
10004fd4:	1023883a 	mov	r17,r2
10004fd8:	0080e404 	movi	r2,912
10004fdc:	10800017 	ldw	r2,0(r2)
10004fe0:	10bfff44 	addi	r2,r2,-3
10004fe4:	1009883a 	mov	r4,r2
10004fe8:	01400784 	movi	r5,30
10004fec:	00074040 	call	10007404 <__divsi3>
10004ff0:	1021883a 	mov	r16,r2
10004ff4:	e4b91f17 	ldw	r18,-7044(fp)
10004ff8:	8809883a 	mov	r4,r17
10004ffc:	01400544 	movi	r5,21
10005000:	00074c40 	call	100074c4 <__mulsi3>
10005004:	1023883a 	mov	r17,r2
10005008:	9009883a 	mov	r4,r18
1000500c:	01405404 	movi	r5,336
10005010:	00074c40 	call	100074c4 <__mulsi3>
10005014:	8885883a 	add	r2,r17,r2
10005018:	1405883a 	add	r2,r2,r16
1000501c:	1085883a 	add	r2,r2,r2
10005020:	1085883a 	add	r2,r2,r2
10005024:	e0f90a04 	addi	r3,fp,-7128
10005028:	1885883a 	add	r2,r3,r2
1000502c:	10806304 	addi	r2,r2,396
10005030:	10800017 	ldw	r2,0(r2)
10005034:	1000121e 	bne	r2,zero,10005080 <main+0x4d4c>
10005038:	00805804 	movi	r2,352
1000503c:	10800003 	ldbu	r2,0(r2)
10005040:	10803fcc 	andi	r2,r2,255
10005044:	1080201c 	xori	r2,r2,128
10005048:	10bfe004 	addi	r2,r2,-128
1000504c:	10000c1e 	bne	r2,zero,10005080 <main+0x4d4c>
					*SAMUS_X-=((25-samus_inv_counter)/2);
10005050:	00c0e404 	movi	r3,912
10005054:	0080e404 	movi	r2,912
10005058:	11000017 	ldw	r4,0(r2)
1000505c:	01400644 	movi	r5,25
10005060:	e0b90b17 	ldw	r2,-7124(fp)
10005064:	2885c83a 	sub	r2,r5,r2
10005068:	100ad7fa 	srli	r5,r2,31
1000506c:	2885883a 	add	r2,r5,r2
10005070:	1005d07a 	srai	r2,r2,1
10005074:	2085c83a 	sub	r2,r4,r2
10005078:	18800015 	stw	r2,0(r3)
1000507c:	00008e06 	br	100052b8 <main+0x4f84>
				}
				else if(scene[sceneNum][(*SAMUS_Y+10)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+25)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+50)/30][(*SAMUS_X+40)/30]==0 && scene[sceneNum][(*SAMUS_Y+70)/30][(*SAMUS_X+40)/30]==0 && *SAMUS_DIR == 1){
10005080:	0080e004 	movi	r2,896
10005084:	10800017 	ldw	r2,0(r2)
10005088:	10800284 	addi	r2,r2,10
1000508c:	1009883a 	mov	r4,r2
10005090:	01400784 	movi	r5,30
10005094:	00074040 	call	10007404 <__divsi3>
10005098:	1023883a 	mov	r17,r2
1000509c:	0080e404 	movi	r2,912
100050a0:	10800017 	ldw	r2,0(r2)
100050a4:	10800a04 	addi	r2,r2,40
100050a8:	1009883a 	mov	r4,r2
100050ac:	01400784 	movi	r5,30
100050b0:	00074040 	call	10007404 <__divsi3>
100050b4:	1021883a 	mov	r16,r2
100050b8:	e4b91f17 	ldw	r18,-7044(fp)
100050bc:	8809883a 	mov	r4,r17
100050c0:	01400544 	movi	r5,21
100050c4:	00074c40 	call	100074c4 <__mulsi3>
100050c8:	1023883a 	mov	r17,r2
100050cc:	9009883a 	mov	r4,r18
100050d0:	01405404 	movi	r5,336
100050d4:	00074c40 	call	100074c4 <__mulsi3>
100050d8:	8885883a 	add	r2,r17,r2
100050dc:	1405883a 	add	r2,r2,r16
100050e0:	1085883a 	add	r2,r2,r2
100050e4:	1085883a 	add	r2,r2,r2
100050e8:	e0f90a04 	addi	r3,fp,-7128
100050ec:	1885883a 	add	r2,r3,r2
100050f0:	10806304 	addi	r2,r2,396
100050f4:	10800017 	ldw	r2,0(r2)
100050f8:	10006f1e 	bne	r2,zero,100052b8 <main+0x4f84>
100050fc:	0080e004 	movi	r2,896
10005100:	10800017 	ldw	r2,0(r2)
10005104:	10800644 	addi	r2,r2,25
10005108:	1009883a 	mov	r4,r2
1000510c:	01400784 	movi	r5,30
10005110:	00074040 	call	10007404 <__divsi3>
10005114:	1023883a 	mov	r17,r2
10005118:	0080e404 	movi	r2,912
1000511c:	10800017 	ldw	r2,0(r2)
10005120:	10800a04 	addi	r2,r2,40
10005124:	1009883a 	mov	r4,r2
10005128:	01400784 	movi	r5,30
1000512c:	00074040 	call	10007404 <__divsi3>
10005130:	1021883a 	mov	r16,r2
10005134:	e4b91f17 	ldw	r18,-7044(fp)
10005138:	8809883a 	mov	r4,r17
1000513c:	01400544 	movi	r5,21
10005140:	00074c40 	call	100074c4 <__mulsi3>
10005144:	1023883a 	mov	r17,r2
10005148:	9009883a 	mov	r4,r18
1000514c:	01405404 	movi	r5,336
10005150:	00074c40 	call	100074c4 <__mulsi3>
10005154:	8885883a 	add	r2,r17,r2
10005158:	1405883a 	add	r2,r2,r16
1000515c:	1085883a 	add	r2,r2,r2
10005160:	1085883a 	add	r2,r2,r2
10005164:	e0f90a04 	addi	r3,fp,-7128
10005168:	1885883a 	add	r2,r3,r2
1000516c:	10806304 	addi	r2,r2,396
10005170:	10800017 	ldw	r2,0(r2)
10005174:	1000501e 	bne	r2,zero,100052b8 <main+0x4f84>
10005178:	0080e004 	movi	r2,896
1000517c:	10800017 	ldw	r2,0(r2)
10005180:	10800c84 	addi	r2,r2,50
10005184:	1009883a 	mov	r4,r2
10005188:	01400784 	movi	r5,30
1000518c:	00074040 	call	10007404 <__divsi3>
10005190:	1023883a 	mov	r17,r2
10005194:	0080e404 	movi	r2,912
10005198:	10800017 	ldw	r2,0(r2)
1000519c:	10800a04 	addi	r2,r2,40
100051a0:	1009883a 	mov	r4,r2
100051a4:	01400784 	movi	r5,30
100051a8:	00074040 	call	10007404 <__divsi3>
100051ac:	1021883a 	mov	r16,r2
100051b0:	e4b91f17 	ldw	r18,-7044(fp)
100051b4:	8809883a 	mov	r4,r17
100051b8:	01400544 	movi	r5,21
100051bc:	00074c40 	call	100074c4 <__mulsi3>
100051c0:	1023883a 	mov	r17,r2
100051c4:	9009883a 	mov	r4,r18
100051c8:	01405404 	movi	r5,336
100051cc:	00074c40 	call	100074c4 <__mulsi3>
100051d0:	8885883a 	add	r2,r17,r2
100051d4:	1405883a 	add	r2,r2,r16
100051d8:	1085883a 	add	r2,r2,r2
100051dc:	1085883a 	add	r2,r2,r2
100051e0:	e0f90a04 	addi	r3,fp,-7128
100051e4:	1885883a 	add	r2,r3,r2
100051e8:	10806304 	addi	r2,r2,396
100051ec:	10800017 	ldw	r2,0(r2)
100051f0:	1000311e 	bne	r2,zero,100052b8 <main+0x4f84>
100051f4:	0080e004 	movi	r2,896
100051f8:	10800017 	ldw	r2,0(r2)
100051fc:	10801184 	addi	r2,r2,70
10005200:	1009883a 	mov	r4,r2
10005204:	01400784 	movi	r5,30
10005208:	00074040 	call	10007404 <__divsi3>
1000520c:	1023883a 	mov	r17,r2
10005210:	0080e404 	movi	r2,912
10005214:	10800017 	ldw	r2,0(r2)
10005218:	10800a04 	addi	r2,r2,40
1000521c:	1009883a 	mov	r4,r2
10005220:	01400784 	movi	r5,30
10005224:	00074040 	call	10007404 <__divsi3>
10005228:	1021883a 	mov	r16,r2
1000522c:	e4b91f17 	ldw	r18,-7044(fp)
10005230:	8809883a 	mov	r4,r17
10005234:	01400544 	movi	r5,21
10005238:	00074c40 	call	100074c4 <__mulsi3>
1000523c:	1023883a 	mov	r17,r2
10005240:	9009883a 	mov	r4,r18
10005244:	01405404 	movi	r5,336
10005248:	00074c40 	call	100074c4 <__mulsi3>
1000524c:	8885883a 	add	r2,r17,r2
10005250:	1405883a 	add	r2,r2,r16
10005254:	1085883a 	add	r2,r2,r2
10005258:	1085883a 	add	r2,r2,r2
1000525c:	e0f90a04 	addi	r3,fp,-7128
10005260:	1885883a 	add	r2,r3,r2
10005264:	10806304 	addi	r2,r2,396
10005268:	10800017 	ldw	r2,0(r2)
1000526c:	1000121e 	bne	r2,zero,100052b8 <main+0x4f84>
10005270:	00805804 	movi	r2,352
10005274:	10800003 	ldbu	r2,0(r2)
10005278:	10803fcc 	andi	r2,r2,255
1000527c:	1080201c 	xori	r2,r2,128
10005280:	10bfe004 	addi	r2,r2,-128
10005284:	10800058 	cmpnei	r2,r2,1
10005288:	10000b1e 	bne	r2,zero,100052b8 <main+0x4f84>
						*SAMUS_X+=((25-samus_inv_counter)/2);
1000528c:	00c0e404 	movi	r3,912
10005290:	0080e404 	movi	r2,912
10005294:	11000017 	ldw	r4,0(r2)
10005298:	01400644 	movi	r5,25
1000529c:	e0b90b17 	ldw	r2,-7124(fp)
100052a0:	2885c83a 	sub	r2,r5,r2
100052a4:	100ad7fa 	srli	r5,r2,31
100052a8:	2885883a 	add	r2,r5,r2
100052ac:	1005d07a 	srai	r2,r2,1
100052b0:	2085883a 	add	r2,r4,r2
100052b4:	18800015 	stw	r2,0(r3)
				}
				if(scene[sceneNum][(*SAMUS_Y+5)/30][(*SAMUS_X+2)/30] != 0 || scene[sceneNum][(*SAMUS_Y+5)/30][(*SAMUS_X+33)/30] == 0 && y_set == False){
100052b8:	0080e004 	movi	r2,896
100052bc:	10800017 	ldw	r2,0(r2)
100052c0:	10800144 	addi	r2,r2,5
100052c4:	1009883a 	mov	r4,r2
100052c8:	01400784 	movi	r5,30
100052cc:	00074040 	call	10007404 <__divsi3>
100052d0:	1023883a 	mov	r17,r2
100052d4:	0080e404 	movi	r2,912
100052d8:	10800017 	ldw	r2,0(r2)
100052dc:	10800084 	addi	r2,r2,2
100052e0:	1009883a 	mov	r4,r2
100052e4:	01400784 	movi	r5,30
100052e8:	00074040 	call	10007404 <__divsi3>
100052ec:	1021883a 	mov	r16,r2
100052f0:	e4b91f17 	ldw	r18,-7044(fp)
100052f4:	8809883a 	mov	r4,r17
100052f8:	01400544 	movi	r5,21
100052fc:	00074c40 	call	100074c4 <__mulsi3>
10005300:	1023883a 	mov	r17,r2
10005304:	9009883a 	mov	r4,r18
10005308:	01405404 	movi	r5,336
1000530c:	00074c40 	call	100074c4 <__mulsi3>
10005310:	8885883a 	add	r2,r17,r2
10005314:	1405883a 	add	r2,r2,r16
10005318:	1085883a 	add	r2,r2,r2
1000531c:	1085883a 	add	r2,r2,r2
10005320:	e0f90a04 	addi	r3,fp,-7128
10005324:	1885883a 	add	r2,r3,r2
10005328:	10806304 	addi	r2,r2,396
1000532c:	10800017 	ldw	r2,0(r2)
10005330:	1000211e 	bne	r2,zero,100053b8 <main+0x5084>
10005334:	0080e004 	movi	r2,896
10005338:	10800017 	ldw	r2,0(r2)
1000533c:	10800144 	addi	r2,r2,5
10005340:	1009883a 	mov	r4,r2
10005344:	01400784 	movi	r5,30
10005348:	00074040 	call	10007404 <__divsi3>
1000534c:	1023883a 	mov	r17,r2
10005350:	0080e404 	movi	r2,912
10005354:	10800017 	ldw	r2,0(r2)
10005358:	10800844 	addi	r2,r2,33
1000535c:	1009883a 	mov	r4,r2
10005360:	01400784 	movi	r5,30
10005364:	00074040 	call	10007404 <__divsi3>
10005368:	1021883a 	mov	r16,r2
1000536c:	e4b91f17 	ldw	r18,-7044(fp)
10005370:	8809883a 	mov	r4,r17
10005374:	01400544 	movi	r5,21
10005378:	00074c40 	call	100074c4 <__mulsi3>
1000537c:	1023883a 	mov	r17,r2
10005380:	9009883a 	mov	r4,r18
10005384:	01405404 	movi	r5,336
10005388:	00074c40 	call	100074c4 <__mulsi3>
1000538c:	8885883a 	add	r2,r17,r2
10005390:	1405883a 	add	r2,r2,r16
10005394:	1085883a 	add	r2,r2,r2
10005398:	1085883a 	add	r2,r2,r2
1000539c:	e0f90a04 	addi	r3,fp,-7128
100053a0:	1885883a 	add	r2,r3,r2
100053a4:	10806304 	addi	r2,r2,396
100053a8:	10800017 	ldw	r2,0(r2)
100053ac:	1000061e 	bne	r2,zero,100053c8 <main+0x5094>
100053b0:	e0b91217 	ldw	r2,-7096(fp)
100053b4:	1000041e 	bne	r2,zero,100053c8 <main+0x5094>
					y_inc= -5;
100053b8:	00b02834 	movhi	r2,49312
100053bc:	e0b90d15 	stw	r2,-7116(fp)
					y_set = True;
100053c0:	00800044 	movi	r2,1
100053c4:	e0b91215 	stw	r2,-7096(fp)
				}
				has_control = False;
100053c8:	e0391115 	stw	zero,-7100(fp)
100053cc:	00000206 	br	100053d8 <main+0x50a4>
			}
			else{
				has_control = True;
100053d0:	00800044 	movi	r2,1
100053d4:	e0b91115 	stw	r2,-7100(fp)
			}

			if(samus_inv_counter >= 50){
100053d8:	e0b90b17 	ldw	r2,-7124(fp)
100053dc:	10800c90 	cmplti	r2,r2,50
100053e0:	1000061e 	bne	r2,zero,100053fc <main+0x50c8>
				samus_inv_counter = 0;
100053e4:	e0390b15 	stw	zero,-7124(fp)
				samus_inv_counter_start = False;
100053e8:	e0390c15 	stw	zero,-7120(fp)
				*SAMUS_EN = True;
100053ec:	0080e804 	movi	r2,928
100053f0:	00c00044 	movi	r3,1
100053f4:	10c00005 	stb	r3,0(r2)
100053f8:	00000306 	br	10005408 <main+0x50d4>
			}
			else{
				samus_inv_counter+=1;
100053fc:	e0b90b17 	ldw	r2,-7124(fp)
10005400:	10800044 	addi	r2,r2,1
10005404:	e0b90b15 	stw	r2,-7124(fp)
			}
		}
		if(sceneNum == 4){
10005408:	e0b91f17 	ldw	r2,-7044(fp)
1000540c:	10800118 	cmpnei	r2,r2,4
10005410:	1003171e 	bne	r2,zero,10006070 <main+0x5d3c>
			//Kraid inv frames
			if(kraid_blink == True){
10005414:	e0b93317 	ldw	r2,-6964(fp)
10005418:	10800058 	cmpnei	r2,r2,1
1000541c:	10004d1e 	bne	r2,zero,10005554 <main+0x5220>
				if(kraid_health <= 5){
10005420:	e0b93017 	ldw	r2,-6976(fp)
10005424:	10800188 	cmpgei	r2,r2,6
10005428:	10000a1e 	bne	r2,zero,10005454 <main+0x5120>
					if(*KRAID_G_EN == True){
1000542c:	00804004 	movi	r2,256
10005430:	10800017 	ldw	r2,0(r2)
10005434:	10800058 	cmpnei	r2,r2,1
10005438:	10001f1e 	bne	r2,zero,100054b8 <main+0x5184>
						*KRAID_G_EN = False;
1000543c:	00804004 	movi	r2,256
10005440:	10000015 	stw	zero,0(r2)
						*KRAID_R_EN = True;
10005444:	00803c04 	movi	r2,240
10005448:	00c00044 	movi	r3,1
1000544c:	10c00015 	stw	r3,0(r2)
10005450:	00001906 	br	100054b8 <main+0x5184>
					}
				}
				else if(kraid_health <= 10){
10005454:	e0b93017 	ldw	r2,-6976(fp)
10005458:	108002c8 	cmpgei	r2,r2,11
1000545c:	10000a1e 	bne	r2,zero,10005488 <main+0x5154>
					if(*KRAID_N_EN == True){
10005460:	00803804 	movi	r2,224
10005464:	10800017 	ldw	r2,0(r2)
10005468:	10800058 	cmpnei	r2,r2,1
1000546c:	1000121e 	bne	r2,zero,100054b8 <main+0x5184>
						*KRAID_N_EN = False;
10005470:	00803804 	movi	r2,224
10005474:	10000015 	stw	zero,0(r2)
						*KRAID_G_EN = True;
10005478:	00804004 	movi	r2,256
1000547c:	00c00044 	movi	r3,1
10005480:	10c00015 	stw	r3,0(r2)
10005484:	00000c06 	br	100054b8 <main+0x5184>
					}
				}
				else if(kraid_health <= 15){
10005488:	e0b93017 	ldw	r2,-6976(fp)
1000548c:	10800408 	cmpgei	r2,r2,16
10005490:	1000091e 	bne	r2,zero,100054b8 <main+0x5184>
					if(*KRAID_R_EN == True){
10005494:	00803c04 	movi	r2,240
10005498:	10800017 	ldw	r2,0(r2)
1000549c:	10800058 	cmpnei	r2,r2,1
100054a0:	1000051e 	bne	r2,zero,100054b8 <main+0x5184>
						*KRAID_R_EN = False;
100054a4:	00803c04 	movi	r2,240
100054a8:	10000015 	stw	zero,0(r2)
						*KRAID_G_EN = True;
100054ac:	00804004 	movi	r2,256
100054b0:	00c00044 	movi	r3,1
100054b4:	10c00015 	stw	r3,0(r2)
					}
				}
				kraid_counter+=1;
100054b8:	e0b93417 	ldw	r2,-6960(fp)
100054bc:	10800044 	addi	r2,r2,1
100054c0:	e0b93415 	stw	r2,-6960(fp)
				if(kraid_counter > kraid_counter_max){
100054c4:	e0b93417 	ldw	r2,-6960(fp)
100054c8:	e0f96b17 	ldw	r3,-6740(fp)
100054cc:	1880210e 	bge	r3,r2,10005554 <main+0x5220>
					if(kraid_health <= 5){
100054d0:	e0b93017 	ldw	r2,-6976(fp)
100054d4:	10800188 	cmpgei	r2,r2,6
100054d8:	1000081e 	bne	r2,zero,100054fc <main+0x51c8>
						*KRAID_G_EN = True;
100054dc:	00804004 	movi	r2,256
100054e0:	00c00044 	movi	r3,1
100054e4:	10c00015 	stw	r3,0(r2)
						*KRAID_R_EN = False;
100054e8:	00803c04 	movi	r2,240
100054ec:	10000015 	stw	zero,0(r2)
						*KRAID_N_EN = False;
100054f0:	00803804 	movi	r2,224
100054f4:	10000015 	stw	zero,0(r2)
100054f8:	00001506 	br	10005550 <main+0x521c>
					}
					else if(kraid_health <= 10){
100054fc:	e0b93017 	ldw	r2,-6976(fp)
10005500:	108002c8 	cmpgei	r2,r2,11
10005504:	1000081e 	bne	r2,zero,10005528 <main+0x51f4>
						*KRAID_G_EN = False;
10005508:	00804004 	movi	r2,256
1000550c:	10000015 	stw	zero,0(r2)
						*KRAID_R_EN = False;
10005510:	00803c04 	movi	r2,240
10005514:	10000015 	stw	zero,0(r2)
						*KRAID_N_EN = True;
10005518:	00803804 	movi	r2,224
1000551c:	00c00044 	movi	r3,1
10005520:	10c00015 	stw	r3,0(r2)
10005524:	00000a06 	br	10005550 <main+0x521c>
					}
					else if(kraid_health <= 15){
10005528:	e0b93017 	ldw	r2,-6976(fp)
1000552c:	10800408 	cmpgei	r2,r2,16
10005530:	1000071e 	bne	r2,zero,10005550 <main+0x521c>
						*KRAID_R_EN = True;
10005534:	00803c04 	movi	r2,240
10005538:	00c00044 	movi	r3,1
1000553c:	10c00015 	stw	r3,0(r2)
						*KRAID_G_EN = False;
10005540:	00804004 	movi	r2,256
10005544:	10000015 	stw	zero,0(r2)
						*KRAID_N_EN = False;
10005548:	00803804 	movi	r2,224
1000554c:	10000015 	stw	zero,0(r2)
					}
					kraid_blink = False;
10005550:	e0393315 	stw	zero,-6964(fp)
				}
			}
			//Kraid Attack

			attack_counter_nail+=1;
10005554:	e0b93917 	ldw	r2,-6940(fp)
10005558:	10800044 	addi	r2,r2,1
1000555c:	e0b93915 	stw	r2,-6940(fp)
			attack_counter_nail_2+=1;
10005560:	e0b93e17 	ldw	r2,-6920(fp)
10005564:	10800044 	addi	r2,r2,1
10005568:	e0b93e15 	stw	r2,-6920(fp)
			attack_counter_bullet+=1;
1000556c:	e0b93a17 	ldw	r2,-6936(fp)
10005570:	10800044 	addi	r2,r2,1
10005574:	e0b93a15 	stw	r2,-6936(fp)
			//nail
			if((attack_counter_nail > nail_counter || attack_counter_nail_2 > nail_counter)&& (*KRAID_G_EN == True || *KRAID_R_EN == True || *KRAID_N_EN == True)){
10005578:	e0b93917 	ldw	r2,-6940(fp)
1000557c:	e0f93717 	ldw	r3,-6948(fp)
10005580:	18800316 	blt	r3,r2,10005590 <main+0x525c>
10005584:	e0b93e17 	ldw	r2,-6920(fp)
10005588:	e0f93717 	ldw	r3,-6948(fp)
1000558c:	1880700e 	bge	r3,r2,10005750 <main+0x541c>
10005590:	00804004 	movi	r2,256
10005594:	10800017 	ldw	r2,0(r2)
10005598:	10800060 	cmpeqi	r2,r2,1
1000559c:	1000081e 	bne	r2,zero,100055c0 <main+0x528c>
100055a0:	00803c04 	movi	r2,240
100055a4:	10800017 	ldw	r2,0(r2)
100055a8:	10800060 	cmpeqi	r2,r2,1
100055ac:	1000041e 	bne	r2,zero,100055c0 <main+0x528c>
100055b0:	00803804 	movi	r2,224
100055b4:	10800017 	ldw	r2,0(r2)
100055b8:	10800058 	cmpnei	r2,r2,1
100055bc:	1000641e 	bne	r2,zero,10005750 <main+0x541c>
				if(*KRAID_THROW_EN == False){
100055c0:	00803004 	movi	r2,192
100055c4:	10800017 	ldw	r2,0(r2)
100055c8:	1000221e 	bne	r2,zero,10005654 <main+0x5320>
					*KRAID_THROW_EN = True;
100055cc:	00803004 	movi	r2,192
100055d0:	00c00044 	movi	r3,1
100055d4:	10c00015 	stw	r3,0(r2)
					if(*KRAID_DIR == 1){
100055d8:	00804404 	movi	r2,272
100055dc:	10800017 	ldw	r2,0(r2)
100055e0:	10800058 	cmpnei	r2,r2,1
100055e4:	10000c1e 	bne	r2,zero,10005618 <main+0x52e4>
						throw_dir_1 = 1;
100055e8:	00800044 	movi	r2,1
100055ec:	e0b93c15 	stw	r2,-6928(fp)
						*KRAID_THROW_X = *KRAID_X;
100055f0:	00801804 	movi	r2,96
100055f4:	00c02804 	movi	r3,160
100055f8:	18c00017 	ldw	r3,0(r3)
100055fc:	10c00015 	stw	r3,0(r2)
						*KRAID_THROW_Y = *KRAID_Y+5;
10005600:	00801404 	movi	r2,80
10005604:	00c02404 	movi	r3,144
10005608:	18c00017 	ldw	r3,0(r3)
1000560c:	18c00144 	addi	r3,r3,5
10005610:	10c00015 	stw	r3,0(r2)
10005614:	00000b06 	br	10005644 <main+0x5310>
					}
					else{
						throw_dir_1 = 0;
10005618:	e0393c15 	stw	zero,-6928(fp)
						*KRAID_THROW_X = *KRAID_X+60;
1000561c:	00801804 	movi	r2,96
10005620:	00c02804 	movi	r3,160
10005624:	18c00017 	ldw	r3,0(r3)
10005628:	18c00f04 	addi	r3,r3,60
1000562c:	10c00015 	stw	r3,0(r2)
						*KRAID_THROW_Y = *KRAID_Y+5;
10005630:	00801404 	movi	r2,80
10005634:	00c02404 	movi	r3,144
10005638:	18c00017 	ldw	r3,0(r3)
1000563c:	18c00144 	addi	r3,r3,5
10005640:	10c00015 	stw	r3,0(r2)
					}
					nail_one_inc = -6;
10005644:	00b03034 	movhi	r2,49344
10005648:	e0b93515 	stw	r2,-6956(fp)
					attack_counter_nail = 0;
1000564c:	e0393915 	stw	zero,-6940(fp)
10005650:	00002406 	br	100056e4 <main+0x53b0>
				}
				else if(*KRAID_THROW_2_EN == False){
10005654:	00801004 	movi	r2,64
10005658:	10800017 	ldw	r2,0(r2)
1000565c:	1000211e 	bne	r2,zero,100056e4 <main+0x53b0>
					*KRAID_THROW_2_EN = True;
10005660:	00801004 	movi	r2,64
10005664:	00c00044 	movi	r3,1
10005668:	10c00015 	stw	r3,0(r2)
					if(*KRAID_DIR == 1){
1000566c:	00804404 	movi	r2,272
10005670:	10800017 	ldw	r2,0(r2)
10005674:	10800058 	cmpnei	r2,r2,1
10005678:	10000c1e 	bne	r2,zero,100056ac <main+0x5378>
						throw_dir_2 = 1;
1000567c:	00800044 	movi	r2,1
10005680:	e0b93d15 	stw	r2,-6924(fp)
						*KRAID_THROW_2_X = *KRAID_X;
10005684:	00800c04 	movi	r2,48
10005688:	00c02804 	movi	r3,160
1000568c:	18c00017 	ldw	r3,0(r3)
10005690:	10c00015 	stw	r3,0(r2)
						*KRAID_THROW_2_Y = *KRAID_Y+5;
10005694:	00800804 	movi	r2,32
10005698:	00c02404 	movi	r3,144
1000569c:	18c00017 	ldw	r3,0(r3)
100056a0:	18c00144 	addi	r3,r3,5
100056a4:	10c00015 	stw	r3,0(r2)
100056a8:	00000b06 	br	100056d8 <main+0x53a4>
					}
					else{
						throw_dir_2 = 0;
100056ac:	e0393d15 	stw	zero,-6924(fp)
						*KRAID_THROW_2_X = *KRAID_X+60;
100056b0:	00800c04 	movi	r2,48
100056b4:	00c02804 	movi	r3,160
100056b8:	18c00017 	ldw	r3,0(r3)
100056bc:	18c00f04 	addi	r3,r3,60
100056c0:	10c00015 	stw	r3,0(r2)
						*KRAID_THROW_2_Y = *KRAID_Y+5;
100056c4:	00800804 	movi	r2,32
100056c8:	00c02404 	movi	r3,144
100056cc:	18c00017 	ldw	r3,0(r3)
100056d0:	18c00144 	addi	r3,r3,5
100056d4:	10c00015 	stw	r3,0(r2)
					}
					nail_two_inc = -7;
100056d8:	00b03834 	movhi	r2,49376
100056dc:	e0b93615 	stw	r2,-6952(fp)
					attack_counter_nail_2 = 0;
100056e0:	e0393e15 	stw	zero,-6920(fp)
				}
				if(kraid_health <=5){
100056e4:	e0b93017 	ldw	r2,-6976(fp)
100056e8:	10800188 	cmpgei	r2,r2,6
100056ec:	1000061e 	bne	r2,zero,10005708 <main+0x53d4>
					nail_counter = rand()%50+100;
100056f0:	0009d000 	call	10009d00 <rand>
100056f4:	1009883a 	mov	r4,r2
100056f8:	01400c84 	movi	r5,50
100056fc:	00074580 	call	10007458 <__modsi3>
10005700:	10801904 	addi	r2,r2,100
10005704:	e0b93715 	stw	r2,-6948(fp)
				}
				if(kraid_health <=10){
10005708:	e0b93017 	ldw	r2,-6976(fp)
1000570c:	108002c8 	cmpgei	r2,r2,11
10005710:	1000061e 	bne	r2,zero,1000572c <main+0x53f8>
					nail_counter = rand()%100+100;
10005714:	0009d000 	call	10009d00 <rand>
10005718:	1009883a 	mov	r4,r2
1000571c:	01401904 	movi	r5,100
10005720:	00074580 	call	10007458 <__modsi3>
10005724:	10801904 	addi	r2,r2,100
10005728:	e0b93715 	stw	r2,-6948(fp)
				}
				if(kraid_health <=5){
1000572c:	e0b93017 	ldw	r2,-6976(fp)
10005730:	10800188 	cmpgei	r2,r2,6
10005734:	1000061e 	bne	r2,zero,10005750 <main+0x541c>
					nail_counter = rand()%150+100;
10005738:	0009d000 	call	10009d00 <rand>
1000573c:	1009883a 	mov	r4,r2
10005740:	01402584 	movi	r5,150
10005744:	00074580 	call	10007458 <__modsi3>
10005748:	10801904 	addi	r2,r2,100
1000574c:	e0b93715 	stw	r2,-6948(fp)
				}
			}
			if(*KRAID_THROW_EN == True){
10005750:	00803004 	movi	r2,192
10005754:	10800017 	ldw	r2,0(r2)
10005758:	10800058 	cmpnei	r2,r2,1
1000575c:	1000261e 	bne	r2,zero,100057f8 <main+0x54c4>
				if(throw_dir_1 == 1){
10005760:	e0b93c17 	ldw	r2,-6928(fp)
10005764:	10800058 	cmpnei	r2,r2,1
10005768:	1000061e 	bne	r2,zero,10005784 <main+0x5450>
					*KRAID_THROW_X-=6;
1000576c:	00801804 	movi	r2,96
10005770:	00c01804 	movi	r3,96
10005774:	18c00017 	ldw	r3,0(r3)
10005778:	18fffe84 	addi	r3,r3,-6
1000577c:	10c00015 	stw	r3,0(r2)
10005780:	00000506 	br	10005798 <main+0x5464>
				}
				else{
					*KRAID_THROW_X+=6;
10005784:	00801804 	movi	r2,96
10005788:	00c01804 	movi	r3,96
1000578c:	18c00017 	ldw	r3,0(r3)
10005790:	18c00184 	addi	r3,r3,6
10005794:	10c00015 	stw	r3,0(r2)
				}
				*KRAID_THROW_Y+=nail_one_inc;
10005798:	04001404 	movi	r16,80
1000579c:	00801404 	movi	r2,80
100057a0:	10800017 	ldw	r2,0(r2)
100057a4:	1009883a 	mov	r4,r2
100057a8:	00085000 	call	10008500 <__floatsisf>
100057ac:	1007883a 	mov	r3,r2
100057b0:	1809883a 	mov	r4,r3
100057b4:	e1793517 	ldw	r5,-6956(fp)
100057b8:	00074ec0 	call	100074ec <__addsf3>
100057bc:	1007883a 	mov	r3,r2
100057c0:	1805883a 	mov	r2,r3
100057c4:	1009883a 	mov	r4,r2
100057c8:	00084880 	call	10008488 <__fixsfsi>
100057cc:	80800015 	stw	r2,0(r16)
				nail_one_inc+=(gravity/2);
100057d0:	e1394917 	ldw	r4,-6876(fp)
100057d4:	01500034 	movhi	r5,16384
100057d8:	00079cc0 	call	100079cc <__divsf3>
100057dc:	1007883a 	mov	r3,r2
100057e0:	1805883a 	mov	r2,r3
100057e4:	e1393517 	ldw	r4,-6956(fp)
100057e8:	100b883a 	mov	r5,r2
100057ec:	00074ec0 	call	100074ec <__addsf3>
100057f0:	1007883a 	mov	r3,r2
100057f4:	e0f93515 	stw	r3,-6956(fp)
			}
			if(*KRAID_THROW_2_EN == True){
100057f8:	00801004 	movi	r2,64
100057fc:	10800017 	ldw	r2,0(r2)
10005800:	10800058 	cmpnei	r2,r2,1
10005804:	1000261e 	bne	r2,zero,100058a0 <main+0x556c>
				if(throw_dir_2 == 1){
10005808:	e0b93d17 	ldw	r2,-6924(fp)
1000580c:	10800058 	cmpnei	r2,r2,1
10005810:	1000061e 	bne	r2,zero,1000582c <main+0x54f8>
					*KRAID_THROW_2_X-=6;
10005814:	00800c04 	movi	r2,48
10005818:	00c00c04 	movi	r3,48
1000581c:	18c00017 	ldw	r3,0(r3)
10005820:	18fffe84 	addi	r3,r3,-6
10005824:	10c00015 	stw	r3,0(r2)
10005828:	00000506 	br	10005840 <main+0x550c>
				}
				else{
					*KRAID_THROW_2_X+=6;
1000582c:	00800c04 	movi	r2,48
10005830:	00c00c04 	movi	r3,48
10005834:	18c00017 	ldw	r3,0(r3)
10005838:	18c00184 	addi	r3,r3,6
1000583c:	10c00015 	stw	r3,0(r2)
				}
				*KRAID_THROW_2_Y+=nail_two_inc;
10005840:	04000804 	movi	r16,32
10005844:	00800804 	movi	r2,32
10005848:	10800017 	ldw	r2,0(r2)
1000584c:	1009883a 	mov	r4,r2
10005850:	00085000 	call	10008500 <__floatsisf>
10005854:	1007883a 	mov	r3,r2
10005858:	1809883a 	mov	r4,r3
1000585c:	e1793617 	ldw	r5,-6952(fp)
10005860:	00074ec0 	call	100074ec <__addsf3>
10005864:	1007883a 	mov	r3,r2
10005868:	1805883a 	mov	r2,r3
1000586c:	1009883a 	mov	r4,r2
10005870:	00084880 	call	10008488 <__fixsfsi>
10005874:	80800015 	stw	r2,0(r16)
				nail_two_inc+=(gravity/2);
10005878:	e1394917 	ldw	r4,-6876(fp)
1000587c:	01500034 	movhi	r5,16384
10005880:	00079cc0 	call	100079cc <__divsf3>
10005884:	1007883a 	mov	r3,r2
10005888:	1805883a 	mov	r2,r3
1000588c:	e1393617 	ldw	r4,-6952(fp)
10005890:	100b883a 	mov	r5,r2
10005894:	00074ec0 	call	100074ec <__addsf3>
10005898:	1007883a 	mov	r3,r2
1000589c:	e0f93615 	stw	r3,-6952(fp)
			}
			if(*KRAID_THROW_EN == True && (scene[sceneNum][(*KRAID_THROW_Y)/30][(*KRAID_THROW_X)/30]!=0 || scene[sceneNum][(*KRAID_THROW_Y+8)/30][(*KRAID_THROW_X)/30]!=0 || scene[sceneNum][(*KRAID_THROW_Y)/30][(*KRAID_THROW_X+8)/30]!=0 || scene[sceneNum][(*KRAID_THROW_Y+8)/30][(*KRAID_THROW_X+8)/30]!=0)){
100058a0:	00803004 	movi	r2,192
100058a4:	10800017 	ldw	r2,0(r2)
100058a8:	10800058 	cmpnei	r2,r2,1
100058ac:	10007a1e 	bne	r2,zero,10005a98 <main+0x5764>
100058b0:	00801404 	movi	r2,80
100058b4:	10800017 	ldw	r2,0(r2)
100058b8:	1009883a 	mov	r4,r2
100058bc:	01400784 	movi	r5,30
100058c0:	00074040 	call	10007404 <__divsi3>
100058c4:	1023883a 	mov	r17,r2
100058c8:	00801804 	movi	r2,96
100058cc:	10800017 	ldw	r2,0(r2)
100058d0:	1009883a 	mov	r4,r2
100058d4:	01400784 	movi	r5,30
100058d8:	00074040 	call	10007404 <__divsi3>
100058dc:	1021883a 	mov	r16,r2
100058e0:	e4b91f17 	ldw	r18,-7044(fp)
100058e4:	8809883a 	mov	r4,r17
100058e8:	01400544 	movi	r5,21
100058ec:	00074c40 	call	100074c4 <__mulsi3>
100058f0:	1023883a 	mov	r17,r2
100058f4:	9009883a 	mov	r4,r18
100058f8:	01405404 	movi	r5,336
100058fc:	00074c40 	call	100074c4 <__mulsi3>
10005900:	8885883a 	add	r2,r17,r2
10005904:	1405883a 	add	r2,r2,r16
10005908:	1085883a 	add	r2,r2,r2
1000590c:	1085883a 	add	r2,r2,r2
10005910:	e0f90a04 	addi	r3,fp,-7128
10005914:	1885883a 	add	r2,r3,r2
10005918:	10806304 	addi	r2,r2,396
1000591c:	10800017 	ldw	r2,0(r2)
10005920:	10005b1e 	bne	r2,zero,10005a90 <main+0x575c>
10005924:	00801404 	movi	r2,80
10005928:	10800017 	ldw	r2,0(r2)
1000592c:	10800204 	addi	r2,r2,8
10005930:	1009883a 	mov	r4,r2
10005934:	01400784 	movi	r5,30
10005938:	00074040 	call	10007404 <__divsi3>
1000593c:	1023883a 	mov	r17,r2
10005940:	00801804 	movi	r2,96
10005944:	10800017 	ldw	r2,0(r2)
10005948:	1009883a 	mov	r4,r2
1000594c:	01400784 	movi	r5,30
10005950:	00074040 	call	10007404 <__divsi3>
10005954:	1021883a 	mov	r16,r2
10005958:	e4b91f17 	ldw	r18,-7044(fp)
1000595c:	8809883a 	mov	r4,r17
10005960:	01400544 	movi	r5,21
10005964:	00074c40 	call	100074c4 <__mulsi3>
10005968:	1023883a 	mov	r17,r2
1000596c:	9009883a 	mov	r4,r18
10005970:	01405404 	movi	r5,336
10005974:	00074c40 	call	100074c4 <__mulsi3>
10005978:	8885883a 	add	r2,r17,r2
1000597c:	1405883a 	add	r2,r2,r16
10005980:	1085883a 	add	r2,r2,r2
10005984:	1085883a 	add	r2,r2,r2
10005988:	e0f90a04 	addi	r3,fp,-7128
1000598c:	1885883a 	add	r2,r3,r2
10005990:	10806304 	addi	r2,r2,396
10005994:	10800017 	ldw	r2,0(r2)
10005998:	10003d1e 	bne	r2,zero,10005a90 <main+0x575c>
1000599c:	00801404 	movi	r2,80
100059a0:	10800017 	ldw	r2,0(r2)
100059a4:	1009883a 	mov	r4,r2
100059a8:	01400784 	movi	r5,30
100059ac:	00074040 	call	10007404 <__divsi3>
100059b0:	1023883a 	mov	r17,r2
100059b4:	00801804 	movi	r2,96
100059b8:	10800017 	ldw	r2,0(r2)
100059bc:	10800204 	addi	r2,r2,8
100059c0:	1009883a 	mov	r4,r2
100059c4:	01400784 	movi	r5,30
100059c8:	00074040 	call	10007404 <__divsi3>
100059cc:	1021883a 	mov	r16,r2
100059d0:	e4b91f17 	ldw	r18,-7044(fp)
100059d4:	8809883a 	mov	r4,r17
100059d8:	01400544 	movi	r5,21
100059dc:	00074c40 	call	100074c4 <__mulsi3>
100059e0:	1023883a 	mov	r17,r2
100059e4:	9009883a 	mov	r4,r18
100059e8:	01405404 	movi	r5,336
100059ec:	00074c40 	call	100074c4 <__mulsi3>
100059f0:	8885883a 	add	r2,r17,r2
100059f4:	1405883a 	add	r2,r2,r16
100059f8:	1085883a 	add	r2,r2,r2
100059fc:	1085883a 	add	r2,r2,r2
10005a00:	e0f90a04 	addi	r3,fp,-7128
10005a04:	1885883a 	add	r2,r3,r2
10005a08:	10806304 	addi	r2,r2,396
10005a0c:	10800017 	ldw	r2,0(r2)
10005a10:	10001f1e 	bne	r2,zero,10005a90 <main+0x575c>
10005a14:	00801404 	movi	r2,80
10005a18:	10800017 	ldw	r2,0(r2)
10005a1c:	10800204 	addi	r2,r2,8
10005a20:	1009883a 	mov	r4,r2
10005a24:	01400784 	movi	r5,30
10005a28:	00074040 	call	10007404 <__divsi3>
10005a2c:	1023883a 	mov	r17,r2
10005a30:	00801804 	movi	r2,96
10005a34:	10800017 	ldw	r2,0(r2)
10005a38:	10800204 	addi	r2,r2,8
10005a3c:	1009883a 	mov	r4,r2
10005a40:	01400784 	movi	r5,30
10005a44:	00074040 	call	10007404 <__divsi3>
10005a48:	1021883a 	mov	r16,r2
10005a4c:	e4b91f17 	ldw	r18,-7044(fp)
10005a50:	8809883a 	mov	r4,r17
10005a54:	01400544 	movi	r5,21
10005a58:	00074c40 	call	100074c4 <__mulsi3>
10005a5c:	1023883a 	mov	r17,r2
10005a60:	9009883a 	mov	r4,r18
10005a64:	01405404 	movi	r5,336
10005a68:	00074c40 	call	100074c4 <__mulsi3>
10005a6c:	8885883a 	add	r2,r17,r2
10005a70:	1405883a 	add	r2,r2,r16
10005a74:	1085883a 	add	r2,r2,r2
10005a78:	1085883a 	add	r2,r2,r2
10005a7c:	e0f90a04 	addi	r3,fp,-7128
10005a80:	1885883a 	add	r2,r3,r2
10005a84:	10806304 	addi	r2,r2,396
10005a88:	10800017 	ldw	r2,0(r2)
10005a8c:	10000226 	beq	r2,zero,10005a98 <main+0x5764>
				*KRAID_THROW_EN = False;
10005a90:	00803004 	movi	r2,192
10005a94:	10000015 	stw	zero,0(r2)
			}
			if(*KRAID_THROW_2_EN == True && (scene[sceneNum][(*KRAID_THROW_2_Y)/30][(*KRAID_THROW_2_X)/30]!=0 || scene[sceneNum][(*KRAID_THROW_2_Y+8)/30][(*KRAID_THROW_2_X)/30]!=0 || scene[sceneNum][(*KRAID_THROW_2_Y)/30][(*KRAID_THROW_2_X+8)/30]!=0 || scene[sceneNum][(*KRAID_THROW_2_Y+8)/30][(*KRAID_THROW_2_X+8)/30]!=0)){
10005a98:	00801004 	movi	r2,64
10005a9c:	10800017 	ldw	r2,0(r2)
10005aa0:	10800058 	cmpnei	r2,r2,1
10005aa4:	10007a1e 	bne	r2,zero,10005c90 <main+0x595c>
10005aa8:	00800804 	movi	r2,32
10005aac:	10800017 	ldw	r2,0(r2)
10005ab0:	1009883a 	mov	r4,r2
10005ab4:	01400784 	movi	r5,30
10005ab8:	00074040 	call	10007404 <__divsi3>
10005abc:	1023883a 	mov	r17,r2
10005ac0:	00800c04 	movi	r2,48
10005ac4:	10800017 	ldw	r2,0(r2)
10005ac8:	1009883a 	mov	r4,r2
10005acc:	01400784 	movi	r5,30
10005ad0:	00074040 	call	10007404 <__divsi3>
10005ad4:	1021883a 	mov	r16,r2
10005ad8:	e4b91f17 	ldw	r18,-7044(fp)
10005adc:	8809883a 	mov	r4,r17
10005ae0:	01400544 	movi	r5,21
10005ae4:	00074c40 	call	100074c4 <__mulsi3>
10005ae8:	1023883a 	mov	r17,r2
10005aec:	9009883a 	mov	r4,r18
10005af0:	01405404 	movi	r5,336
10005af4:	00074c40 	call	100074c4 <__mulsi3>
10005af8:	8885883a 	add	r2,r17,r2
10005afc:	1405883a 	add	r2,r2,r16
10005b00:	1085883a 	add	r2,r2,r2
10005b04:	1085883a 	add	r2,r2,r2
10005b08:	e0f90a04 	addi	r3,fp,-7128
10005b0c:	1885883a 	add	r2,r3,r2
10005b10:	10806304 	addi	r2,r2,396
10005b14:	10800017 	ldw	r2,0(r2)
10005b18:	10005b1e 	bne	r2,zero,10005c88 <main+0x5954>
10005b1c:	00800804 	movi	r2,32
10005b20:	10800017 	ldw	r2,0(r2)
10005b24:	10800204 	addi	r2,r2,8
10005b28:	1009883a 	mov	r4,r2
10005b2c:	01400784 	movi	r5,30
10005b30:	00074040 	call	10007404 <__divsi3>
10005b34:	1023883a 	mov	r17,r2
10005b38:	00800c04 	movi	r2,48
10005b3c:	10800017 	ldw	r2,0(r2)
10005b40:	1009883a 	mov	r4,r2
10005b44:	01400784 	movi	r5,30
10005b48:	00074040 	call	10007404 <__divsi3>
10005b4c:	1021883a 	mov	r16,r2
10005b50:	e4b91f17 	ldw	r18,-7044(fp)
10005b54:	8809883a 	mov	r4,r17
10005b58:	01400544 	movi	r5,21
10005b5c:	00074c40 	call	100074c4 <__mulsi3>
10005b60:	1023883a 	mov	r17,r2
10005b64:	9009883a 	mov	r4,r18
10005b68:	01405404 	movi	r5,336
10005b6c:	00074c40 	call	100074c4 <__mulsi3>
10005b70:	8885883a 	add	r2,r17,r2
10005b74:	1405883a 	add	r2,r2,r16
10005b78:	1085883a 	add	r2,r2,r2
10005b7c:	1085883a 	add	r2,r2,r2
10005b80:	e0f90a04 	addi	r3,fp,-7128
10005b84:	1885883a 	add	r2,r3,r2
10005b88:	10806304 	addi	r2,r2,396
10005b8c:	10800017 	ldw	r2,0(r2)
10005b90:	10003d1e 	bne	r2,zero,10005c88 <main+0x5954>
10005b94:	00800804 	movi	r2,32
10005b98:	10800017 	ldw	r2,0(r2)
10005b9c:	1009883a 	mov	r4,r2
10005ba0:	01400784 	movi	r5,30
10005ba4:	00074040 	call	10007404 <__divsi3>
10005ba8:	1023883a 	mov	r17,r2
10005bac:	00800c04 	movi	r2,48
10005bb0:	10800017 	ldw	r2,0(r2)
10005bb4:	10800204 	addi	r2,r2,8
10005bb8:	1009883a 	mov	r4,r2
10005bbc:	01400784 	movi	r5,30
10005bc0:	00074040 	call	10007404 <__divsi3>
10005bc4:	1021883a 	mov	r16,r2
10005bc8:	e4b91f17 	ldw	r18,-7044(fp)
10005bcc:	8809883a 	mov	r4,r17
10005bd0:	01400544 	movi	r5,21
10005bd4:	00074c40 	call	100074c4 <__mulsi3>
10005bd8:	1023883a 	mov	r17,r2
10005bdc:	9009883a 	mov	r4,r18
10005be0:	01405404 	movi	r5,336
10005be4:	00074c40 	call	100074c4 <__mulsi3>
10005be8:	8885883a 	add	r2,r17,r2
10005bec:	1405883a 	add	r2,r2,r16
10005bf0:	1085883a 	add	r2,r2,r2
10005bf4:	1085883a 	add	r2,r2,r2
10005bf8:	e0f90a04 	addi	r3,fp,-7128
10005bfc:	1885883a 	add	r2,r3,r2
10005c00:	10806304 	addi	r2,r2,396
10005c04:	10800017 	ldw	r2,0(r2)
10005c08:	10001f1e 	bne	r2,zero,10005c88 <main+0x5954>
10005c0c:	00800804 	movi	r2,32
10005c10:	10800017 	ldw	r2,0(r2)
10005c14:	10800204 	addi	r2,r2,8
10005c18:	1009883a 	mov	r4,r2
10005c1c:	01400784 	movi	r5,30
10005c20:	00074040 	call	10007404 <__divsi3>
10005c24:	1023883a 	mov	r17,r2
10005c28:	00800c04 	movi	r2,48
10005c2c:	10800017 	ldw	r2,0(r2)
10005c30:	10800204 	addi	r2,r2,8
10005c34:	1009883a 	mov	r4,r2
10005c38:	01400784 	movi	r5,30
10005c3c:	00074040 	call	10007404 <__divsi3>
10005c40:	1021883a 	mov	r16,r2
10005c44:	e4b91f17 	ldw	r18,-7044(fp)
10005c48:	8809883a 	mov	r4,r17
10005c4c:	01400544 	movi	r5,21
10005c50:	00074c40 	call	100074c4 <__mulsi3>
10005c54:	1023883a 	mov	r17,r2
10005c58:	9009883a 	mov	r4,r18
10005c5c:	01405404 	movi	r5,336
10005c60:	00074c40 	call	100074c4 <__mulsi3>
10005c64:	8885883a 	add	r2,r17,r2
10005c68:	1405883a 	add	r2,r2,r16
10005c6c:	1085883a 	add	r2,r2,r2
10005c70:	1085883a 	add	r2,r2,r2
10005c74:	e0f90a04 	addi	r3,fp,-7128
10005c78:	1885883a 	add	r2,r3,r2
10005c7c:	10806304 	addi	r2,r2,396
10005c80:	10800017 	ldw	r2,0(r2)
10005c84:	10000226 	beq	r2,zero,10005c90 <main+0x595c>
				*KRAID_THROW_2_EN = False;
10005c88:	00801004 	movi	r2,64
10005c8c:	10000015 	stw	zero,0(r2)
			}

			//spike
			if(attack_counter_bullet > bullet_counter && (*KRAID_G_EN == True || *KRAID_R_EN == True || *KRAID_N_EN == True)){
10005c90:	e0b93a17 	ldw	r2,-6936(fp)
10005c94:	e0f93817 	ldw	r3,-6944(fp)
10005c98:	18804c0e 	bge	r3,r2,10005dcc <main+0x5a98>
10005c9c:	00804004 	movi	r2,256
10005ca0:	10800017 	ldw	r2,0(r2)
10005ca4:	10800060 	cmpeqi	r2,r2,1
10005ca8:	1000081e 	bne	r2,zero,10005ccc <main+0x5998>
10005cac:	00803c04 	movi	r2,240
10005cb0:	10800017 	ldw	r2,0(r2)
10005cb4:	10800060 	cmpeqi	r2,r2,1
10005cb8:	1000041e 	bne	r2,zero,10005ccc <main+0x5998>
10005cbc:	00803804 	movi	r2,224
10005cc0:	10800017 	ldw	r2,0(r2)
10005cc4:	10800058 	cmpnei	r2,r2,1
10005cc8:	1000401e 	bne	r2,zero,10005dcc <main+0x5a98>
				if(*KRAID_SHOOT_EN == False){
10005ccc:	00803404 	movi	r2,208
10005cd0:	10800017 	ldw	r2,0(r2)
10005cd4:	1000211e 	bne	r2,zero,10005d5c <main+0x5a28>
					if(*KRAID_DIR == 1){
10005cd8:	00804404 	movi	r2,272
10005cdc:	10800017 	ldw	r2,0(r2)
10005ce0:	10800058 	cmpnei	r2,r2,1
10005ce4:	10000d1e 	bne	r2,zero,10005d1c <main+0x59e8>
						*KRAID_BUL_DIR = 1;
10005ce8:	00802c04 	movi	r2,176
10005cec:	00c00044 	movi	r3,1
10005cf0:	10c00015 	stw	r3,0(r2)
						*KRAID_SPIKE_X = *KRAID_X;
10005cf4:	00802004 	movi	r2,128
10005cf8:	00c02804 	movi	r3,160
10005cfc:	18c00017 	ldw	r3,0(r3)
10005d00:	10c00015 	stw	r3,0(r2)
						*KRAID_SPIKE_Y = *KRAID_Y+25;
10005d04:	00801c04 	movi	r2,112
10005d08:	00c02404 	movi	r3,144
10005d0c:	18c00017 	ldw	r3,0(r3)
10005d10:	18c00644 	addi	r3,r3,25
10005d14:	10c00015 	stw	r3,0(r2)
10005d18:	00000c06 	br	10005d4c <main+0x5a18>
					}
					else{
						*KRAID_BUL_DIR = 0;
10005d1c:	00802c04 	movi	r2,176
10005d20:	10000015 	stw	zero,0(r2)
						*KRAID_SPIKE_X = *KRAID_X+60;
10005d24:	00802004 	movi	r2,128
10005d28:	00c02804 	movi	r3,160
10005d2c:	18c00017 	ldw	r3,0(r3)
10005d30:	18c00f04 	addi	r3,r3,60
10005d34:	10c00015 	stw	r3,0(r2)
						*KRAID_SPIKE_Y = *KRAID_Y+25;
10005d38:	00801c04 	movi	r2,112
10005d3c:	00c02404 	movi	r3,144
10005d40:	18c00017 	ldw	r3,0(r3)
10005d44:	18c00644 	addi	r3,r3,25
10005d48:	10c00015 	stw	r3,0(r2)
					}
					*KRAID_SHOOT_EN = True;
10005d4c:	00803404 	movi	r2,208
10005d50:	00c00044 	movi	r3,1
10005d54:	10c00015 	stw	r3,0(r2)
					kraid_bul_start = 0;
10005d58:	e0393b15 	stw	zero,-6932(fp)
				}
				attack_counter_bullet = 0;
10005d5c:	e0393a15 	stw	zero,-6936(fp)
				if(kraid_health <=5){
10005d60:	e0b93017 	ldw	r2,-6976(fp)
10005d64:	10800188 	cmpgei	r2,r2,6
10005d68:	1000061e 	bne	r2,zero,10005d84 <main+0x5a50>
					bullet_counter = rand()%25+50;
10005d6c:	0009d000 	call	10009d00 <rand>
10005d70:	1009883a 	mov	r4,r2
10005d74:	01400644 	movi	r5,25
10005d78:	00074580 	call	10007458 <__modsi3>
10005d7c:	10800c84 	addi	r2,r2,50
10005d80:	e0b93815 	stw	r2,-6944(fp)
				}
				if(kraid_health <=10){
10005d84:	e0b93017 	ldw	r2,-6976(fp)
10005d88:	108002c8 	cmpgei	r2,r2,11
10005d8c:	1000061e 	bne	r2,zero,10005da8 <main+0x5a74>
					bullet_counter = rand()%50+50;
10005d90:	0009d000 	call	10009d00 <rand>
10005d94:	1009883a 	mov	r4,r2
10005d98:	01400c84 	movi	r5,50
10005d9c:	00074580 	call	10007458 <__modsi3>
10005da0:	10800c84 	addi	r2,r2,50
10005da4:	e0b93815 	stw	r2,-6944(fp)
				}
				if(kraid_health <=5){
10005da8:	e0b93017 	ldw	r2,-6976(fp)
10005dac:	10800188 	cmpgei	r2,r2,6
10005db0:	1000061e 	bne	r2,zero,10005dcc <main+0x5a98>
					bullet_counter = rand()%100+50;
10005db4:	0009d000 	call	10009d00 <rand>
10005db8:	1009883a 	mov	r4,r2
10005dbc:	01401904 	movi	r5,100
10005dc0:	00074580 	call	10007458 <__modsi3>
10005dc4:	10800c84 	addi	r2,r2,50
10005dc8:	e0b93815 	stw	r2,-6944(fp)
				}
			}
			if(*KRAID_SHOOT_EN == True){
10005dcc:	00803404 	movi	r2,208
10005dd0:	10800017 	ldw	r2,0(r2)
10005dd4:	10800058 	cmpnei	r2,r2,1
10005dd8:	1000151e 	bne	r2,zero,10005e30 <main+0x5afc>
				if(*KRAID_BUL_DIR == 1){
10005ddc:	00802c04 	movi	r2,176
10005de0:	10800017 	ldw	r2,0(r2)
10005de4:	10800058 	cmpnei	r2,r2,1
10005de8:	1000091e 	bne	r2,zero,10005e10 <main+0x5adc>
					*KRAID_SPIKE_X-=6;
10005dec:	00802004 	movi	r2,128
10005df0:	00c02004 	movi	r3,128
10005df4:	18c00017 	ldw	r3,0(r3)
10005df8:	18fffe84 	addi	r3,r3,-6
10005dfc:	10c00015 	stw	r3,0(r2)
					kraid_bul_start+=6;
10005e00:	e0b93b17 	ldw	r2,-6932(fp)
10005e04:	10800184 	addi	r2,r2,6
10005e08:	e0b93b15 	stw	r2,-6932(fp)
10005e0c:	00000806 	br	10005e30 <main+0x5afc>
				}
				else{
					*KRAID_SPIKE_X+=6;
10005e10:	00802004 	movi	r2,128
10005e14:	00c02004 	movi	r3,128
10005e18:	18c00017 	ldw	r3,0(r3)
10005e1c:	18c00184 	addi	r3,r3,6
10005e20:	10c00015 	stw	r3,0(r2)
					kraid_bul_start+=6;
10005e24:	e0b93b17 	ldw	r2,-6932(fp)
10005e28:	10800184 	addi	r2,r2,6
10005e2c:	e0b93b15 	stw	r2,-6932(fp)
				}
			}
			if(kraid_bul_start >= 200){
10005e30:	e0b93b17 	ldw	r2,-6932(fp)
10005e34:	10803210 	cmplti	r2,r2,200
10005e38:	1000021e 	bne	r2,zero,10005e44 <main+0x5b10>
				*KRAID_SHOOT_EN = False;
10005e3c:	00803404 	movi	r2,208
10005e40:	10000015 	stw	zero,0(r2)
			}
			if(*KRAID_SHOOT_EN == True && *KRAID_BUL_DIR == True && (scene[sceneNum][(*KRAID_SPIKE_Y)/30][(*KRAID_SPIKE_X)/30]!=0 || scene[sceneNum][(*KRAID_SPIKE_Y+8)/30][(*KRAID_SPIKE_X)/30]!=0)){
10005e44:	00803404 	movi	r2,208
10005e48:	10800017 	ldw	r2,0(r2)
10005e4c:	10800058 	cmpnei	r2,r2,1
10005e50:	1000411e 	bne	r2,zero,10005f58 <main+0x5c24>
10005e54:	00802c04 	movi	r2,176
10005e58:	10800017 	ldw	r2,0(r2)
10005e5c:	10800058 	cmpnei	r2,r2,1
10005e60:	10003d1e 	bne	r2,zero,10005f58 <main+0x5c24>
10005e64:	00801c04 	movi	r2,112
10005e68:	10800017 	ldw	r2,0(r2)
10005e6c:	1009883a 	mov	r4,r2
10005e70:	01400784 	movi	r5,30
10005e74:	00074040 	call	10007404 <__divsi3>
10005e78:	1023883a 	mov	r17,r2
10005e7c:	00802004 	movi	r2,128
10005e80:	10800017 	ldw	r2,0(r2)
10005e84:	1009883a 	mov	r4,r2
10005e88:	01400784 	movi	r5,30
10005e8c:	00074040 	call	10007404 <__divsi3>
10005e90:	1021883a 	mov	r16,r2
10005e94:	e4b91f17 	ldw	r18,-7044(fp)
10005e98:	8809883a 	mov	r4,r17
10005e9c:	01400544 	movi	r5,21
10005ea0:	00074c40 	call	100074c4 <__mulsi3>
10005ea4:	1023883a 	mov	r17,r2
10005ea8:	9009883a 	mov	r4,r18
10005eac:	01405404 	movi	r5,336
10005eb0:	00074c40 	call	100074c4 <__mulsi3>
10005eb4:	8885883a 	add	r2,r17,r2
10005eb8:	1405883a 	add	r2,r2,r16
10005ebc:	1085883a 	add	r2,r2,r2
10005ec0:	1085883a 	add	r2,r2,r2
10005ec4:	e0f90a04 	addi	r3,fp,-7128
10005ec8:	1885883a 	add	r2,r3,r2
10005ecc:	10806304 	addi	r2,r2,396
10005ed0:	10800017 	ldw	r2,0(r2)
10005ed4:	10001e1e 	bne	r2,zero,10005f50 <main+0x5c1c>
10005ed8:	00801c04 	movi	r2,112
10005edc:	10800017 	ldw	r2,0(r2)
10005ee0:	10800204 	addi	r2,r2,8
10005ee4:	1009883a 	mov	r4,r2
10005ee8:	01400784 	movi	r5,30
10005eec:	00074040 	call	10007404 <__divsi3>
10005ef0:	1023883a 	mov	r17,r2
10005ef4:	00802004 	movi	r2,128
10005ef8:	10800017 	ldw	r2,0(r2)
10005efc:	1009883a 	mov	r4,r2
10005f00:	01400784 	movi	r5,30
10005f04:	00074040 	call	10007404 <__divsi3>
10005f08:	1021883a 	mov	r16,r2
10005f0c:	e4b91f17 	ldw	r18,-7044(fp)
10005f10:	8809883a 	mov	r4,r17
10005f14:	01400544 	movi	r5,21
10005f18:	00074c40 	call	100074c4 <__mulsi3>
10005f1c:	1023883a 	mov	r17,r2
10005f20:	9009883a 	mov	r4,r18
10005f24:	01405404 	movi	r5,336
10005f28:	00074c40 	call	100074c4 <__mulsi3>
10005f2c:	8885883a 	add	r2,r17,r2
10005f30:	1405883a 	add	r2,r2,r16
10005f34:	1085883a 	add	r2,r2,r2
10005f38:	1085883a 	add	r2,r2,r2
10005f3c:	e0f90a04 	addi	r3,fp,-7128
10005f40:	1885883a 	add	r2,r3,r2
10005f44:	10806304 	addi	r2,r2,396
10005f48:	10800017 	ldw	r2,0(r2)
10005f4c:	10000226 	beq	r2,zero,10005f58 <main+0x5c24>
				*KRAID_SHOOT_EN = False;
10005f50:	00803404 	movi	r2,208
10005f54:	10000015 	stw	zero,0(r2)
			}
			if(*KRAID_SHOOT_EN == True && *KRAID_BUL_DIR == False && (scene[sceneNum][(*KRAID_SPIKE_Y)/30][(*KRAID_SPIKE_X+10)/30]!=0 || scene[sceneNum][(*KRAID_SPIKE_Y+8)/30][(*KRAID_SPIKE_X+10)/30]!=0)){
10005f58:	00803404 	movi	r2,208
10005f5c:	10800017 	ldw	r2,0(r2)
10005f60:	10800058 	cmpnei	r2,r2,1
10005f64:	1000421e 	bne	r2,zero,10006070 <main+0x5d3c>
10005f68:	00802c04 	movi	r2,176
10005f6c:	10800017 	ldw	r2,0(r2)
10005f70:	10003f1e 	bne	r2,zero,10006070 <main+0x5d3c>
10005f74:	00801c04 	movi	r2,112
10005f78:	10800017 	ldw	r2,0(r2)
10005f7c:	1009883a 	mov	r4,r2
10005f80:	01400784 	movi	r5,30
10005f84:	00074040 	call	10007404 <__divsi3>
10005f88:	1023883a 	mov	r17,r2
10005f8c:	00802004 	movi	r2,128
10005f90:	10800017 	ldw	r2,0(r2)
10005f94:	10800284 	addi	r2,r2,10
10005f98:	1009883a 	mov	r4,r2
10005f9c:	01400784 	movi	r5,30
10005fa0:	00074040 	call	10007404 <__divsi3>
10005fa4:	1021883a 	mov	r16,r2
10005fa8:	e4b91f17 	ldw	r18,-7044(fp)
10005fac:	8809883a 	mov	r4,r17
10005fb0:	01400544 	movi	r5,21
10005fb4:	00074c40 	call	100074c4 <__mulsi3>
10005fb8:	1023883a 	mov	r17,r2
10005fbc:	9009883a 	mov	r4,r18
10005fc0:	01405404 	movi	r5,336
10005fc4:	00074c40 	call	100074c4 <__mulsi3>
10005fc8:	8885883a 	add	r2,r17,r2
10005fcc:	1405883a 	add	r2,r2,r16
10005fd0:	1085883a 	add	r2,r2,r2
10005fd4:	1085883a 	add	r2,r2,r2
10005fd8:	e0f90a04 	addi	r3,fp,-7128
10005fdc:	1885883a 	add	r2,r3,r2
10005fe0:	10806304 	addi	r2,r2,396
10005fe4:	10800017 	ldw	r2,0(r2)
10005fe8:	10001f1e 	bne	r2,zero,10006068 <main+0x5d34>
10005fec:	00801c04 	movi	r2,112
10005ff0:	10800017 	ldw	r2,0(r2)
10005ff4:	10800204 	addi	r2,r2,8
10005ff8:	1009883a 	mov	r4,r2
10005ffc:	01400784 	movi	r5,30
10006000:	00074040 	call	10007404 <__divsi3>
10006004:	1023883a 	mov	r17,r2
10006008:	00802004 	movi	r2,128
1000600c:	10800017 	ldw	r2,0(r2)
10006010:	10800284 	addi	r2,r2,10
10006014:	1009883a 	mov	r4,r2
10006018:	01400784 	movi	r5,30
1000601c:	00074040 	call	10007404 <__divsi3>
10006020:	1021883a 	mov	r16,r2
10006024:	e4b91f17 	ldw	r18,-7044(fp)
10006028:	8809883a 	mov	r4,r17
1000602c:	01400544 	movi	r5,21
10006030:	00074c40 	call	100074c4 <__mulsi3>
10006034:	1023883a 	mov	r17,r2
10006038:	9009883a 	mov	r4,r18
1000603c:	01405404 	movi	r5,336
10006040:	00074c40 	call	100074c4 <__mulsi3>
10006044:	8885883a 	add	r2,r17,r2
10006048:	1405883a 	add	r2,r2,r16
1000604c:	1085883a 	add	r2,r2,r2
10006050:	1085883a 	add	r2,r2,r2
10006054:	e0f90a04 	addi	r3,fp,-7128
10006058:	1885883a 	add	r2,r3,r2
1000605c:	10806304 	addi	r2,r2,396
10006060:	10800017 	ldw	r2,0(r2)
10006064:	10000226 	beq	r2,zero,10006070 <main+0x5d3c>
				*KRAID_SHOOT_EN = False;
10006068:	00803404 	movi	r2,208
1000606c:	10000015 	stw	zero,0(r2)
		}


		//EXTRA
		//debugging reset
		if (keycode == 0x15){
10006070:	e0b94417 	ldw	r2,-6896(fp)
10006074:	10800558 	cmpnei	r2,r2,21
10006078:	1000031e 	bne	r2,zero,10006088 <main+0x5d54>
			sceneStart = True;
1000607c:	00800044 	movi	r2,1
10006080:	e0b92015 	stw	r2,-7040(fp)
			game_win = False;
10006084:	e0394215 	stw	zero,-6904(fp)
		}
		if (keycode == 0x13){
10006088:	e0b94417 	ldw	r2,-6896(fp)
1000608c:	108004d8 	cmpnei	r2,r2,19
10006090:	1000051e 	bne	r2,zero,100060a8 <main+0x5d74>
			sceneStart = True;
10006094:	00800044 	movi	r2,1
10006098:	e0b92015 	stw	r2,-7040(fp)
			game_win = False;
1000609c:	e0394215 	stw	zero,-6904(fp)
			sceneNum = -1;
100060a0:	00bfffc4 	movi	r2,-1
100060a4:	e0b91f15 	stw	r2,-7044(fp)
		}

		if(god_mode == True){
100060a8:	e0b94017 	ldw	r2,-6912(fp)
100060ac:	10800058 	cmpnei	r2,r2,1
100060b0:	1000061e 	bne	r2,zero,100060cc <main+0x5d98>
			*HEALTH = 3;
100060b4:	00806804 	movi	r2,416
100060b8:	00c000c4 	movi	r3,3
100060bc:	10c00015 	stw	r3,0(r2)
			printf("God-Mode enabled.\n");
100060c0:	010400b4 	movhi	r4,4098
100060c4:	21206c04 	addi	r4,r4,-32336
100060c8:	0009cd40 	call	10009cd4 <puts>
		}
		if(*MON1_EN == False && *MON2_EN == False && sceneNum != 4){
100060cc:	0080d404 	movi	r2,848
100060d0:	10800003 	ldbu	r2,0(r2)
100060d4:	10803fcc 	andi	r2,r2,255
100060d8:	1080201c 	xori	r2,r2,128
100060dc:	10bfe004 	addi	r2,r2,-128
100060e0:	10000c1e 	bne	r2,zero,10006114 <main+0x5de0>
100060e4:	0080c804 	movi	r2,800
100060e8:	10800003 	ldbu	r2,0(r2)
100060ec:	10803fcc 	andi	r2,r2,255
100060f0:	1080201c 	xori	r2,r2,128
100060f4:	10bfe004 	addi	r2,r2,-128
100060f8:	1000061e 	bne	r2,zero,10006114 <main+0x5de0>
100060fc:	e0b91f17 	ldw	r2,-7044(fp)
10006100:	10800120 	cmpeqi	r2,r2,4
10006104:	1000031e 	bne	r2,zero,10006114 <main+0x5de0>
			moving_on = True;
10006108:	00800044 	movi	r2,1
1000610c:	e0b93f15 	stw	r2,-6916(fp)
10006110:	00000106 	br	10006118 <main+0x5de4>
		}
		else{
			moving_on = False;
10006114:	e0393f15 	stw	zero,-6916(fp)
		}

		if(moving_on == True && sceneNum == 3 && *SAMUS_X > 560 && *SAMUS_Y < 90){
10006118:	e0b93f17 	ldw	r2,-6916(fp)
1000611c:	10800058 	cmpnei	r2,r2,1
10006120:	1000101e 	bne	r2,zero,10006164 <main+0x5e30>
10006124:	e0b91f17 	ldw	r2,-7044(fp)
10006128:	108000d8 	cmpnei	r2,r2,3
1000612c:	10000d1e 	bne	r2,zero,10006164 <main+0x5e30>
10006130:	0080e404 	movi	r2,912
10006134:	10800017 	ldw	r2,0(r2)
10006138:	10808c50 	cmplti	r2,r2,561
1000613c:	1000091e 	bne	r2,zero,10006164 <main+0x5e30>
10006140:	0080e004 	movi	r2,896
10006144:	10800017 	ldw	r2,0(r2)
10006148:	10801688 	cmpgei	r2,r2,90
1000614c:	1000051e 	bne	r2,zero,10006164 <main+0x5e30>
			sceneNum = 4;
10006150:	00800104 	movi	r2,4
10006154:	e0b91f15 	stw	r2,-7044(fp)
			sceneStart = True;
10006158:	00800044 	movi	r2,1
1000615c:	e0b92015 	stw	r2,-7040(fp)
10006160:	00003b06 	br	10006250 <main+0x5f1c>
		}
		else if(moving_on == True && sceneNum == 0 && *SAMUS_X > 560 && *SAMUS_Y > 330){
10006164:	e0b93f17 	ldw	r2,-6916(fp)
10006168:	10800058 	cmpnei	r2,r2,1
1000616c:	10000f1e 	bne	r2,zero,100061ac <main+0x5e78>
10006170:	e0b91f17 	ldw	r2,-7044(fp)
10006174:	10000d1e 	bne	r2,zero,100061ac <main+0x5e78>
10006178:	0080e404 	movi	r2,912
1000617c:	10800017 	ldw	r2,0(r2)
10006180:	10808c50 	cmplti	r2,r2,561
10006184:	1000091e 	bne	r2,zero,100061ac <main+0x5e78>
10006188:	0080e004 	movi	r2,896
1000618c:	10800017 	ldw	r2,0(r2)
10006190:	108052d0 	cmplti	r2,r2,331
10006194:	1000051e 	bne	r2,zero,100061ac <main+0x5e78>
			sceneNum = 1;
10006198:	00800044 	movi	r2,1
1000619c:	e0b91f15 	stw	r2,-7044(fp)
			sceneStart = True;
100061a0:	00800044 	movi	r2,1
100061a4:	e0b92015 	stw	r2,-7040(fp)
100061a8:	00002906 	br	10006250 <main+0x5f1c>
		}
		else if(moving_on == True && sceneNum == 1 && *SAMUS_X > 555 && *SAMUS_Y > 280){
100061ac:	e0b93f17 	ldw	r2,-6916(fp)
100061b0:	10800058 	cmpnei	r2,r2,1
100061b4:	1000101e 	bne	r2,zero,100061f8 <main+0x5ec4>
100061b8:	e0b91f17 	ldw	r2,-7044(fp)
100061bc:	10800058 	cmpnei	r2,r2,1
100061c0:	10000d1e 	bne	r2,zero,100061f8 <main+0x5ec4>
100061c4:	0080e404 	movi	r2,912
100061c8:	10800017 	ldw	r2,0(r2)
100061cc:	10808b10 	cmplti	r2,r2,556
100061d0:	1000091e 	bne	r2,zero,100061f8 <main+0x5ec4>
100061d4:	0080e004 	movi	r2,896
100061d8:	10800017 	ldw	r2,0(r2)
100061dc:	10804650 	cmplti	r2,r2,281
100061e0:	1000051e 	bne	r2,zero,100061f8 <main+0x5ec4>
			sceneNum = 2;
100061e4:	00800084 	movi	r2,2
100061e8:	e0b91f15 	stw	r2,-7044(fp)
			sceneStart = True;
100061ec:	00800044 	movi	r2,1
100061f0:	e0b92015 	stw	r2,-7040(fp)
100061f4:	00001606 	br	10006250 <main+0x5f1c>
		}
		else if(moving_on == True && sceneNum == 2 && *SAMUS_X > 555 && *SAMUS_Y > 100 && *SAMUS_Y < 120){
100061f8:	e0b93f17 	ldw	r2,-6916(fp)
100061fc:	10800058 	cmpnei	r2,r2,1
10006200:	1000131e 	bne	r2,zero,10006250 <main+0x5f1c>
10006204:	e0b91f17 	ldw	r2,-7044(fp)
10006208:	10800098 	cmpnei	r2,r2,2
1000620c:	1000101e 	bne	r2,zero,10006250 <main+0x5f1c>
10006210:	0080e404 	movi	r2,912
10006214:	10800017 	ldw	r2,0(r2)
10006218:	10808b10 	cmplti	r2,r2,556
1000621c:	10000c1e 	bne	r2,zero,10006250 <main+0x5f1c>
10006220:	0080e004 	movi	r2,896
10006224:	10800017 	ldw	r2,0(r2)
10006228:	10801950 	cmplti	r2,r2,101
1000622c:	1000081e 	bne	r2,zero,10006250 <main+0x5f1c>
10006230:	0080e004 	movi	r2,896
10006234:	10800017 	ldw	r2,0(r2)
10006238:	10801e08 	cmpgei	r2,r2,120
1000623c:	1000041e 	bne	r2,zero,10006250 <main+0x5f1c>
			sceneNum = 3;
10006240:	008000c4 	movi	r2,3
10006244:	e0b91f15 	stw	r2,-7044(fp)
			sceneStart = True;
10006248:	00800044 	movi	r2,1
1000624c:	e0b92015 	stw	r2,-7040(fp)
		}




	}//end while
10006250:	002b9106 	br	10001098 <__alt_data_end+0xf8001098>

10006254 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
10006254:	defffc04 	addi	sp,sp,-16
10006258:	dfc00315 	stw	ra,12(sp)
1000625c:	df000215 	stw	fp,8(sp)
10006260:	df000204 	addi	fp,sp,8
10006264:	2007883a 	mov	r3,r4
10006268:	2805883a 	mov	r2,r5
1000626c:	e0fffe0d 	sth	r3,-8(fp)
10006270:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
10006274:	e0bffe0b 	ldhu	r2,-8(fp)
10006278:	01000084 	movi	r4,2
1000627c:	100b883a 	mov	r5,r2
10006280:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA, Data);
10006284:	e0bfff0b 	ldhu	r2,-4(fp)
10006288:	0009883a 	mov	r4,zero
1000628c:	100b883a 	mov	r5,r2
10006290:	00002480 	call	10000248 <IO_write>
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
}
10006294:	e037883a 	mov	sp,fp
10006298:	dfc00117 	ldw	ra,4(sp)
1000629c:	df000017 	ldw	fp,0(sp)
100062a0:	dec00204 	addi	sp,sp,8
100062a4:	f800283a 	ret

100062a8 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
100062a8:	defffd04 	addi	sp,sp,-12
100062ac:	dfc00215 	stw	ra,8(sp)
100062b0:	df000115 	stw	fp,4(sp)
100062b4:	df000104 	addi	fp,sp,4
100062b8:	2005883a 	mov	r2,r4
100062bc:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
100062c0:	e0bfff0b 	ldhu	r2,-4(fp)
100062c4:	01000084 	movi	r4,2
100062c8:	100b883a 	mov	r5,r2
100062cc:	00002480 	call	10000248 <IO_write>
	return IO_read(HPI_DATA);
100062d0:	0009883a 	mov	r4,zero
100062d4:	00002c00 	call	100002c0 <IO_read>
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
}
100062d8:	e037883a 	mov	sp,fp
100062dc:	dfc00117 	ldw	ra,4(sp)
100062e0:	df000017 	ldw	fp,0(sp)
100062e4:	dec00204 	addi	sp,sp,8
100062e8:	f800283a 	ret

100062ec <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
100062ec:	defffe04 	addi	sp,sp,-8
100062f0:	dfc00115 	stw	ra,4(sp)
100062f4:	df000015 	stw	fp,0(sp)
100062f8:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
100062fc:	01000044 	movi	r4,1
10006300:	017e9414 	movui	r5,64080
10006304:	00002480 	call	10000248 <IO_write>
	usleep(100000);
10006308:	010000b4 	movhi	r4,2
1000630c:	2121a804 	addi	r4,r4,-31072
10006310:	0015b280 	call	10015b28 <usleep>
	printf("[USB INIT]:reset finished!\n");
10006314:	010400b4 	movhi	r4,4098
10006318:	21270104 	addi	r4,r4,-25596
1000631c:	0009cd40 	call	10009cd4 <puts>

	usleep(500000);
10006320:	01000234 	movhi	r4,8
10006324:	21284804 	addi	r4,r4,-24288
10006328:	0015b280 	call	10015b28 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
1000632c:	010400b4 	movhi	r4,4098
10006330:	21270804 	addi	r4,r4,-25568
10006334:	0009cd40 	call	10009cd4 <puts>
	IO_read(HPI_MAILBOX);
10006338:	01000044 	movi	r4,1
1000633c:	00002c00 	call	100002c0 <IO_read>
	IO_read(HPI_STATUS);
10006340:	010000c4 	movi	r4,3
10006344:	00002c00 	call	100002c0 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10006348:	01005104 	movi	r4,324
1000634c:	00062a80 	call	100062a8 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10006350:	01005104 	movi	r4,324
10006354:	000b883a 	mov	r5,zero
10006358:	00062540 	call	10006254 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
1000635c:	01005204 	movi	r4,328
10006360:	00062a80 	call	100062a8 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10006364:	01005204 	movi	r4,328
10006368:	000b883a 	mov	r5,zero
1000636c:	00062540 	call	10006254 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10006370:	01302414 	movui	r4,49296
10006374:	017fffd4 	movui	r5,65535
10006378:	00062540 	call	10006254 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
1000637c:	01302c14 	movui	r4,49328
10006380:	017fffd4 	movui	r5,65535
10006384:	00062540 	call	10006254 <UsbWrite>
}
10006388:	e037883a 	mov	sp,fp
1000638c:	dfc00117 	ldw	ra,4(sp)
10006390:	df000017 	ldw	fp,0(sp)
10006394:	dec00204 	addi	sp,sp,8
10006398:	f800283a 	ret

1000639c <UsbSetAddress>:


void UsbSetAddress()
{
1000639c:	defffe04 	addi	sp,sp,-8
100063a0:	dfc00115 	stw	ra,4(sp)
100063a4:	df000015 	stw	fp,0(sp)
100063a8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100063ac:	01000084 	movi	r4,2
100063b0:	01414004 	movi	r5,1280
100063b4:	00002480 	call	10000248 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
100063b8:	0009883a 	mov	r4,zero
100063bc:	01414304 	movi	r5,1292
100063c0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100063c4:	0009883a 	mov	r4,zero
100063c8:	01400204 	movi	r5,8
100063cc:	00002480 	call	10000248 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
100063d0:	0009883a 	mov	r4,zero
100063d4:	01403404 	movi	r5,208
100063d8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
100063dc:	0009883a 	mov	r4,zero
100063e0:	01400044 	movi	r5,1
100063e4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
100063e8:	0009883a 	mov	r4,zero
100063ec:	014004c4 	movi	r5,19
100063f0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
100063f4:	0009883a 	mov	r4,zero
100063f8:	01414504 	movi	r5,1300
100063fc:	00002480 	call	10000248 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10006400:	0009883a 	mov	r4,zero
10006404:	01414004 	movi	r5,1280
10006408:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);
1000640c:	0009883a 	mov	r4,zero
10006410:	01400084 	movi	r5,2
10006414:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10006418:	0009883a 	mov	r4,zero
1000641c:	000b883a 	mov	r5,zero
10006420:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10006424:	0009883a 	mov	r4,zero
10006428:	000b883a 	mov	r5,zero
1000642c:	00002480 	call	10000248 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10006430:	0009883a 	mov	r4,zero
10006434:	000b883a 	mov	r5,zero
10006438:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//
1000643c:	0009883a 	mov	r4,zero
10006440:	000b883a 	mov	r5,zero
10006444:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10006448:	0009883a 	mov	r4,zero
1000644c:	01402404 	movi	r5,144
10006450:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
10006454:	0009883a 	mov	r4,zero
10006458:	01401044 	movi	r5,65
1000645c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10006460:	0009883a 	mov	r4,zero
10006464:	014004c4 	movi	r5,19
10006468:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000646c:	0009883a 	mov	r4,zero
10006470:	000b883a 	mov	r5,zero
10006474:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10006478:	01006c04 	movi	r4,432
1000647c:	01414004 	movi	r5,1280
10006480:	00062540 	call	10006254 <UsbWrite>
}
10006484:	e037883a 	mov	sp,fp
10006488:	dfc00117 	ldw	ra,4(sp)
1000648c:	df000017 	ldw	fp,0(sp)
10006490:	dec00204 	addi	sp,sp,8
10006494:	f800283a 	ret

10006498 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
10006498:	defffe04 	addi	sp,sp,-8
1000649c:	dfc00115 	stw	ra,4(sp)
100064a0:	df000015 	stw	fp,0(sp)
100064a4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100064a8:	01000084 	movi	r4,2
100064ac:	01414004 	movi	r5,1280
100064b0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100064b4:	0009883a 	mov	r4,zero
100064b8:	01414304 	movi	r5,1292
100064bc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100064c0:	0009883a 	mov	r4,zero
100064c4:	01400204 	movi	r5,8
100064c8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100064cc:	0009883a 	mov	r4,zero
100064d0:	0140b404 	movi	r5,720
100064d4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
100064d8:	0009883a 	mov	r4,zero
100064dc:	01400044 	movi	r5,1
100064e0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
100064e4:	0009883a 	mov	r4,zero
100064e8:	014004c4 	movi	r5,19
100064ec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
100064f0:	0009883a 	mov	r4,zero
100064f4:	01414504 	movi	r5,1300
100064f8:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100064fc:	0009883a 	mov	r4,zero
10006500:	0141a004 	movi	r5,1664
10006504:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
10006508:	0009883a 	mov	r4,zero
1000650c:	01404004 	movi	r5,256
10006510:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10006514:	0009883a 	mov	r4,zero
10006518:	000b883a 	mov	r5,zero
1000651c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);
10006520:	0009883a 	mov	r4,zero
10006524:	01400204 	movi	r5,8
10006528:	00002480 	call	10000248 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
1000652c:	0009883a 	mov	r4,zero
10006530:	01414b04 	movi	r5,1324
10006534:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//
10006538:	0009883a 	mov	r4,zero
1000653c:	01400204 	movi	r5,8
10006540:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//
10006544:	0009883a 	mov	r4,zero
10006548:	0140a404 	movi	r5,656
1000654c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
10006550:	0009883a 	mov	r4,zero
10006554:	01401044 	movi	r5,65
10006558:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000655c:	0009883a 	mov	r4,zero
10006560:	014004c4 	movi	r5,19
10006564:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);
10006568:	0009883a 	mov	r4,zero
1000656c:	01414804 	movi	r5,1312
10006570:	00002480 	call	10000248 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10006574:	0009883a 	mov	r4,zero
10006578:	000b883a 	mov	r5,zero
1000657c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10006580:	0009883a 	mov	r4,zero
10006584:	000b883a 	mov	r5,zero
10006588:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
1000658c:	0009883a 	mov	r4,zero
10006590:	01408404 	movi	r5,528
10006594:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
10006598:	0009883a 	mov	r4,zero
1000659c:	01401044 	movi	r5,65
100065a0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
100065a4:	0009883a 	mov	r4,zero
100065a8:	014004c4 	movi	r5,19
100065ac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
100065b0:	0009883a 	mov	r4,zero
100065b4:	000b883a 	mov	r5,zero
100065b8:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100065bc:	01006c04 	movi	r4,432
100065c0:	01414004 	movi	r5,1280
100065c4:	00062540 	call	10006254 <UsbWrite>
}
100065c8:	e037883a 	mov	sp,fp
100065cc:	dfc00117 	ldw	ra,4(sp)
100065d0:	df000017 	ldw	fp,0(sp)
100065d4:	dec00204 	addi	sp,sp,8
100065d8:	f800283a 	ret

100065dc <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
100065dc:	defffe04 	addi	sp,sp,-8
100065e0:	dfc00115 	stw	ra,4(sp)
100065e4:	df000015 	stw	fp,0(sp)
100065e8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100065ec:	01000084 	movi	r4,2
100065f0:	01414004 	movi	r5,1280
100065f4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100065f8:	0009883a 	mov	r4,zero
100065fc:	01414304 	movi	r5,1292
10006600:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10006604:	0009883a 	mov	r4,zero
10006608:	01400204 	movi	r5,8
1000660c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10006610:	0009883a 	mov	r4,zero
10006614:	0140b404 	movi	r5,720
10006618:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000661c:	0009883a 	mov	r4,zero
10006620:	01400044 	movi	r5,1
10006624:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10006628:	0009883a 	mov	r4,zero
1000662c:	014004c4 	movi	r5,19
10006630:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10006634:	0009883a 	mov	r4,zero
10006638:	01414504 	movi	r5,1300
1000663c:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10006640:	0009883a 	mov	r4,zero
10006644:	0141a004 	movi	r5,1664
10006648:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
1000664c:	0009883a 	mov	r4,zero
10006650:	01404004 	movi	r5,256
10006654:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10006658:	0009883a 	mov	r4,zero
1000665c:	000b883a 	mov	r5,zero
10006660:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10006664:	0009883a 	mov	r4,zero
10006668:	01400484 	movi	r5,18
1000666c:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10006670:	0009883a 	mov	r4,zero
10006674:	01415104 	movi	r5,1348
10006678:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
1000667c:	0009883a 	mov	r4,zero
10006680:	01400204 	movi	r5,8
10006684:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10006688:	0009883a 	mov	r4,zero
1000668c:	0140a404 	movi	r5,656
10006690:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10006694:	0009883a 	mov	r4,zero
10006698:	01401044 	movi	r5,65
1000669c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100066a0:	0009883a 	mov	r4,zero
100066a4:	014004c4 	movi	r5,19
100066a8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100066ac:	0009883a 	mov	r4,zero
100066b0:	01414804 	movi	r5,1312
100066b4:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100066b8:	0009883a 	mov	r4,zero
100066bc:	01415304 	movi	r5,1356
100066c0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100066c4:	0009883a 	mov	r4,zero
100066c8:	01400204 	movi	r5,8
100066cc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100066d0:	0009883a 	mov	r4,zero
100066d4:	0140a404 	movi	r5,656
100066d8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
100066dc:	0009883a 	mov	r4,zero
100066e0:	01400044 	movi	r5,1
100066e4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100066e8:	0009883a 	mov	r4,zero
100066ec:	014004c4 	movi	r5,19
100066f0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100066f4:	0009883a 	mov	r4,zero
100066f8:	01414b04 	movi	r5,1324
100066fc:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
10006700:	0009883a 	mov	r4,zero
10006704:	01415504 	movi	r5,1364
10006708:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
1000670c:	0009883a 	mov	r4,zero
10006710:	01400084 	movi	r5,2
10006714:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10006718:	0009883a 	mov	r4,zero
1000671c:	0140a404 	movi	r5,656
10006720:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10006724:	0009883a 	mov	r4,zero
10006728:	01401044 	movi	r5,65
1000672c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10006730:	0009883a 	mov	r4,zero
10006734:	014004c4 	movi	r5,19
10006738:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
1000673c:	0009883a 	mov	r4,zero
10006740:	01414e04 	movi	r5,1336
10006744:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10006748:	0009883a 	mov	r4,zero
1000674c:	000b883a 	mov	r5,zero
10006750:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10006754:	0009883a 	mov	r4,zero
10006758:	000b883a 	mov	r5,zero
1000675c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10006760:	0009883a 	mov	r4,zero
10006764:	01408404 	movi	r5,528
10006768:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
1000676c:	0009883a 	mov	r4,zero
10006770:	01401044 	movi	r5,65
10006774:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10006778:	0009883a 	mov	r4,zero
1000677c:	014004c4 	movi	r5,19
10006780:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10006784:	0009883a 	mov	r4,zero
10006788:	000b883a 	mov	r5,zero
1000678c:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10006790:	01006c04 	movi	r4,432
10006794:	01414004 	movi	r5,1280
10006798:	00062540 	call	10006254 <UsbWrite>
}
1000679c:	e037883a 	mov	sp,fp
100067a0:	dfc00117 	ldw	ra,4(sp)
100067a4:	df000017 	ldw	fp,0(sp)
100067a8:	dec00204 	addi	sp,sp,8
100067ac:	f800283a 	ret

100067b0 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
100067b0:	defffe04 	addi	sp,sp,-8
100067b4:	dfc00115 	stw	ra,4(sp)
100067b8:	df000015 	stw	fp,0(sp)
100067bc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100067c0:	01000084 	movi	r4,2
100067c4:	01414004 	movi	r5,1280
100067c8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100067cc:	0009883a 	mov	r4,zero
100067d0:	01414304 	movi	r5,1292
100067d4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100067d8:	0009883a 	mov	r4,zero
100067dc:	01400204 	movi	r5,8
100067e0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100067e4:	0009883a 	mov	r4,zero
100067e8:	0140b404 	movi	r5,720
100067ec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
100067f0:	0009883a 	mov	r4,zero
100067f4:	01400044 	movi	r5,1
100067f8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
100067fc:	0009883a 	mov	r4,zero
10006800:	014004c4 	movi	r5,19
10006804:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10006808:	0009883a 	mov	r4,zero
1000680c:	01414504 	movi	r5,1300
10006810:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10006814:	0009883a 	mov	r4,zero
10006818:	0141a004 	movi	r5,1664
1000681c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10006820:	0009883a 	mov	r4,zero
10006824:	01408004 	movi	r5,512
10006828:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
1000682c:	0009883a 	mov	r4,zero
10006830:	000b883a 	mov	r5,zero
10006834:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10006838:	0009883a 	mov	r4,zero
1000683c:	01400244 	movi	r5,9
10006840:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10006844:	0009883a 	mov	r4,zero
10006848:	01415104 	movi	r5,1348
1000684c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10006850:	0009883a 	mov	r4,zero
10006854:	01400204 	movi	r5,8
10006858:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000685c:	0009883a 	mov	r4,zero
10006860:	0140a404 	movi	r5,656
10006864:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10006868:	0009883a 	mov	r4,zero
1000686c:	01401044 	movi	r5,65
10006870:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10006874:	0009883a 	mov	r4,zero
10006878:	014004c4 	movi	r5,19
1000687c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10006880:	0009883a 	mov	r4,zero
10006884:	01414804 	movi	r5,1312
10006888:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
1000688c:	0009883a 	mov	r4,zero
10006890:	01415304 	movi	r5,1356
10006894:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
10006898:	0009883a 	mov	r4,zero
1000689c:	01400044 	movi	r5,1
100068a0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100068a4:	0009883a 	mov	r4,zero
100068a8:	0140a404 	movi	r5,656
100068ac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100068b0:	0009883a 	mov	r4,zero
100068b4:	01400044 	movi	r5,1
100068b8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100068bc:	0009883a 	mov	r4,zero
100068c0:	014004c4 	movi	r5,19
100068c4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100068c8:	0009883a 	mov	r4,zero
100068cc:	01414b04 	movi	r5,1324
100068d0:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
100068d4:	0009883a 	mov	r4,zero
100068d8:	000b883a 	mov	r5,zero
100068dc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100068e0:	0009883a 	mov	r4,zero
100068e4:	000b883a 	mov	r5,zero
100068e8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
100068ec:	0009883a 	mov	r4,zero
100068f0:	01408404 	movi	r5,528
100068f4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100068f8:	0009883a 	mov	r4,zero
100068fc:	01401044 	movi	r5,65
10006900:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10006904:	0009883a 	mov	r4,zero
10006908:	014004c4 	movi	r5,19
1000690c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10006910:	0009883a 	mov	r4,zero
10006914:	000b883a 	mov	r5,zero
10006918:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000691c:	01006c04 	movi	r4,432
10006920:	01414004 	movi	r5,1280
10006924:	00062540 	call	10006254 <UsbWrite>
}
10006928:	e037883a 	mov	sp,fp
1000692c:	dfc00117 	ldw	ra,4(sp)
10006930:	df000017 	ldw	fp,0(sp)
10006934:	dec00204 	addi	sp,sp,8
10006938:	f800283a 	ret

1000693c <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
1000693c:	defffe04 	addi	sp,sp,-8
10006940:	dfc00115 	stw	ra,4(sp)
10006944:	df000015 	stw	fp,0(sp)
10006948:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000694c:	01000084 	movi	r4,2
10006950:	01414004 	movi	r5,1280
10006954:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10006958:	0009883a 	mov	r4,zero
1000695c:	01414304 	movi	r5,1292
10006960:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10006964:	0009883a 	mov	r4,zero
10006968:	01400204 	movi	r5,8
1000696c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10006970:	0009883a 	mov	r4,zero
10006974:	0140b404 	movi	r5,720
10006978:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000697c:	0009883a 	mov	r4,zero
10006980:	01400044 	movi	r5,1
10006984:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10006988:	0009883a 	mov	r4,zero
1000698c:	014004c4 	movi	r5,19
10006990:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10006994:	0009883a 	mov	r4,zero
10006998:	01414504 	movi	r5,1300
1000699c:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100069a0:	0009883a 	mov	r4,zero
100069a4:	0141a004 	movi	r5,1664
100069a8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
100069ac:	0009883a 	mov	r4,zero
100069b0:	01408004 	movi	r5,512
100069b4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100069b8:	0009883a 	mov	r4,zero
100069bc:	000b883a 	mov	r5,zero
100069c0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
100069c4:	0009883a 	mov	r4,zero
100069c8:	01403fc4 	movi	r5,255
100069cc:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
100069d0:	0009883a 	mov	r4,zero
100069d4:	01415704 	movi	r5,1372
100069d8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100069dc:	0009883a 	mov	r4,zero
100069e0:	01400204 	movi	r5,8
100069e4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100069e8:	0009883a 	mov	r4,zero
100069ec:	0140a404 	movi	r5,656
100069f0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100069f4:	0009883a 	mov	r4,zero
100069f8:	01401044 	movi	r5,65
100069fc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10006a00:	0009883a 	mov	r4,zero
10006a04:	014004c4 	movi	r5,19
10006a08:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10006a0c:	0009883a 	mov	r4,zero
10006a10:	01414804 	movi	r5,1312
10006a14:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10006a18:	0009883a 	mov	r4,zero
10006a1c:	01415904 	movi	r5,1380
10006a20:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10006a24:	0009883a 	mov	r4,zero
10006a28:	01400204 	movi	r5,8
10006a2c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10006a30:	0009883a 	mov	r4,zero
10006a34:	0140a404 	movi	r5,656
10006a38:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10006a3c:	0009883a 	mov	r4,zero
10006a40:	01400044 	movi	r5,1
10006a44:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10006a48:	0009883a 	mov	r4,zero
10006a4c:	014004c4 	movi	r5,19
10006a50:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10006a54:	0009883a 	mov	r4,zero
10006a58:	01414b04 	movi	r5,1324
10006a5c:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
10006a60:	0009883a 	mov	r4,zero
10006a64:	01415b04 	movi	r5,1388
10006a68:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10006a6c:	0009883a 	mov	r4,zero
10006a70:	01400204 	movi	r5,8
10006a74:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10006a78:	0009883a 	mov	r4,zero
10006a7c:	0140a404 	movi	r5,656
10006a80:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10006a84:	0009883a 	mov	r4,zero
10006a88:	01401044 	movi	r5,65
10006a8c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10006a90:	0009883a 	mov	r4,zero
10006a94:	014004c4 	movi	r5,19
10006a98:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10006a9c:	0009883a 	mov	r4,zero
10006aa0:	01414e04 	movi	r5,1336
10006aa4:	00002480 	call	10000248 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
10006aa8:	0009883a 	mov	r4,zero
10006aac:	01415d04 	movi	r5,1396
10006ab0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10006ab4:	0009883a 	mov	r4,zero
10006ab8:	01400204 	movi	r5,8
10006abc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10006ac0:	0009883a 	mov	r4,zero
10006ac4:	0140a404 	movi	r5,656
10006ac8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10006acc:	0009883a 	mov	r4,zero
10006ad0:	01400044 	movi	r5,1
10006ad4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10006ad8:	0009883a 	mov	r4,zero
10006adc:	014004c4 	movi	r5,19
10006ae0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10006ae4:	0009883a 	mov	r4,zero
10006ae8:	01415104 	movi	r5,1348
10006aec:	00002480 	call	10000248 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10006af0:	0009883a 	mov	r4,zero
10006af4:	01415f04 	movi	r5,1404
10006af8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10006afc:	0009883a 	mov	r4,zero
10006b00:	01400084 	movi	r5,2
10006b04:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10006b08:	0009883a 	mov	r4,zero
10006b0c:	0140a404 	movi	r5,656
10006b10:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10006b14:	0009883a 	mov	r4,zero
10006b18:	01401044 	movi	r5,65
10006b1c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10006b20:	0009883a 	mov	r4,zero
10006b24:	014004c4 	movi	r5,19
10006b28:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10006b2c:	0009883a 	mov	r4,zero
10006b30:	01415404 	movi	r5,1360
10006b34:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10006b38:	0009883a 	mov	r4,zero
10006b3c:	000b883a 	mov	r5,zero
10006b40:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10006b44:	0009883a 	mov	r4,zero
10006b48:	000b883a 	mov	r5,zero
10006b4c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10006b50:	0009883a 	mov	r4,zero
10006b54:	01408404 	movi	r5,528
10006b58:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10006b5c:	0009883a 	mov	r4,zero
10006b60:	01401044 	movi	r5,65
10006b64:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10006b68:	0009883a 	mov	r4,zero
10006b6c:	014004c4 	movi	r5,19
10006b70:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10006b74:	0009883a 	mov	r4,zero
10006b78:	000b883a 	mov	r5,zero
10006b7c:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10006b80:	01006c04 	movi	r4,432
10006b84:	01414004 	movi	r5,1280
10006b88:	00062540 	call	10006254 <UsbWrite>
}
10006b8c:	e037883a 	mov	sp,fp
10006b90:	dfc00117 	ldw	ra,4(sp)
10006b94:	df000017 	ldw	fp,0(sp)
10006b98:	dec00204 	addi	sp,sp,8
10006b9c:	f800283a 	ret

10006ba0 <UsbSetConfig>:

void UsbSetConfig()
{
10006ba0:	defffe04 	addi	sp,sp,-8
10006ba4:	dfc00115 	stw	ra,4(sp)
10006ba8:	df000015 	stw	fp,0(sp)
10006bac:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10006bb0:	01000084 	movi	r4,2
10006bb4:	01414004 	movi	r5,1280
10006bb8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10006bbc:	0009883a 	mov	r4,zero
10006bc0:	01414304 	movi	r5,1292
10006bc4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10006bc8:	0009883a 	mov	r4,zero
10006bcc:	01400204 	movi	r5,8
10006bd0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10006bd4:	0009883a 	mov	r4,zero
10006bd8:	0140b404 	movi	r5,720
10006bdc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10006be0:	0009883a 	mov	r4,zero
10006be4:	01400044 	movi	r5,1
10006be8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10006bec:	0009883a 	mov	r4,zero
10006bf0:	014004c4 	movi	r5,19
10006bf4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10006bf8:	0009883a 	mov	r4,zero
10006bfc:	01414504 	movi	r5,1300
10006c00:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10006c04:	0009883a 	mov	r4,zero
10006c08:	01424004 	movi	r5,2304
10006c0c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10006c10:	0009883a 	mov	r4,zero
10006c14:	01400044 	movi	r5,1
10006c18:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10006c1c:	0009883a 	mov	r4,zero
10006c20:	000b883a 	mov	r5,zero
10006c24:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10006c28:	0009883a 	mov	r4,zero
10006c2c:	000b883a 	mov	r5,zero
10006c30:	00002480 	call	10000248 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10006c34:	0009883a 	mov	r4,zero
10006c38:	000b883a 	mov	r5,zero
10006c3c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10006c40:	0009883a 	mov	r4,zero
10006c44:	000b883a 	mov	r5,zero
10006c48:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10006c4c:	0009883a 	mov	r4,zero
10006c50:	0140a404 	movi	r5,656
10006c54:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10006c58:	0009883a 	mov	r4,zero
10006c5c:	01401044 	movi	r5,65
10006c60:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10006c64:	0009883a 	mov	r4,zero
10006c68:	014004c4 	movi	r5,19
10006c6c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10006c70:	0009883a 	mov	r4,zero
10006c74:	000b883a 	mov	r5,zero
10006c78:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10006c7c:	01006c04 	movi	r4,432
10006c80:	01414004 	movi	r5,1280
10006c84:	00062540 	call	10006254 <UsbWrite>

}
10006c88:	e037883a 	mov	sp,fp
10006c8c:	dfc00117 	ldw	ra,4(sp)
10006c90:	df000017 	ldw	fp,0(sp)
10006c94:	dec00204 	addi	sp,sp,8
10006c98:	f800283a 	ret

10006c9c <UsbClassRequest>:

void UsbClassRequest()
{
10006c9c:	defffe04 	addi	sp,sp,-8
10006ca0:	dfc00115 	stw	ra,4(sp)
10006ca4:	df000015 	stw	fp,0(sp)
10006ca8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10006cac:	01000084 	movi	r4,2
10006cb0:	01414004 	movi	r5,1280
10006cb4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10006cb8:	0009883a 	mov	r4,zero
10006cbc:	01414304 	movi	r5,1292
10006cc0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10006cc4:	0009883a 	mov	r4,zero
10006cc8:	01400204 	movi	r5,8
10006ccc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10006cd0:	0009883a 	mov	r4,zero
10006cd4:	0140b404 	movi	r5,720
10006cd8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10006cdc:	0009883a 	mov	r4,zero
10006ce0:	01400044 	movi	r5,1
10006ce4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10006ce8:	0009883a 	mov	r4,zero
10006cec:	014004c4 	movi	r5,19
10006cf0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10006cf4:	0009883a 	mov	r4,zero
10006cf8:	01414504 	movi	r5,1300
10006cfc:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10006d00:	0009883a 	mov	r4,zero
10006d04:	01428844 	movi	r5,2593
10006d08:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10006d0c:	0009883a 	mov	r4,zero
10006d10:	000b883a 	mov	r5,zero
10006d14:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10006d18:	0009883a 	mov	r4,zero
10006d1c:	000b883a 	mov	r5,zero
10006d20:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10006d24:	0009883a 	mov	r4,zero
10006d28:	000b883a 	mov	r5,zero
10006d2c:	00002480 	call	10000248 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10006d30:	0009883a 	mov	r4,zero
10006d34:	000b883a 	mov	r5,zero
10006d38:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10006d3c:	0009883a 	mov	r4,zero
10006d40:	000b883a 	mov	r5,zero
10006d44:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10006d48:	0009883a 	mov	r4,zero
10006d4c:	0140a404 	movi	r5,656
10006d50:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10006d54:	0009883a 	mov	r4,zero
10006d58:	01401044 	movi	r5,65
10006d5c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10006d60:	0009883a 	mov	r4,zero
10006d64:	014004c4 	movi	r5,19
10006d68:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10006d6c:	0009883a 	mov	r4,zero
10006d70:	000b883a 	mov	r5,zero
10006d74:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10006d78:	01006c04 	movi	r4,432
10006d7c:	01414004 	movi	r5,1280
10006d80:	00062540 	call	10006254 <UsbWrite>
}
10006d84:	e037883a 	mov	sp,fp
10006d88:	dfc00117 	ldw	ra,4(sp)
10006d8c:	df000017 	ldw	fp,0(sp)
10006d90:	dec00204 	addi	sp,sp,8
10006d94:	f800283a 	ret

10006d98 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10006d98:	defffe04 	addi	sp,sp,-8
10006d9c:	dfc00115 	stw	ra,4(sp)
10006da0:	df000015 	stw	fp,0(sp)
10006da4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10006da8:	01000084 	movi	r4,2
10006dac:	01414004 	movi	r5,1280
10006db0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10006db4:	0009883a 	mov	r4,zero
10006db8:	01414304 	movi	r5,1292
10006dbc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10006dc0:	0009883a 	mov	r4,zero
10006dc4:	01400204 	movi	r5,8
10006dc8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10006dcc:	0009883a 	mov	r4,zero
10006dd0:	0140b404 	movi	r5,720
10006dd4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10006dd8:	0009883a 	mov	r4,zero
10006ddc:	01400044 	movi	r5,1
10006de0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10006de4:	0009883a 	mov	r4,zero
10006de8:	014004c4 	movi	r5,19
10006dec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10006df0:	0009883a 	mov	r4,zero
10006df4:	01414504 	movi	r5,1300
10006df8:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10006dfc:	0009883a 	mov	r4,zero
10006e00:	0141a044 	movi	r5,1665
10006e04:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10006e08:	0009883a 	mov	r4,zero
10006e0c:	01484004 	movi	r5,8448
10006e10:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10006e14:	0009883a 	mov	r4,zero
10006e18:	000b883a 	mov	r5,zero
10006e1c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10006e20:	0009883a 	mov	r4,zero
10006e24:	01401ec4 	movi	r5,123
10006e28:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10006e2c:	0009883a 	mov	r4,zero
10006e30:	01415104 	movi	r5,1348
10006e34:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10006e38:	0009883a 	mov	r4,zero
10006e3c:	01400204 	movi	r5,8
10006e40:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10006e44:	0009883a 	mov	r4,zero
10006e48:	0140a404 	movi	r5,656
10006e4c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10006e50:	0009883a 	mov	r4,zero
10006e54:	01401044 	movi	r5,65
10006e58:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10006e5c:	0009883a 	mov	r4,zero
10006e60:	014004c4 	movi	r5,19
10006e64:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10006e68:	0009883a 	mov	r4,zero
10006e6c:	01414804 	movi	r5,1312
10006e70:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10006e74:	0009883a 	mov	r4,zero
10006e78:	000b883a 	mov	r5,zero
10006e7c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10006e80:	0009883a 	mov	r4,zero
10006e84:	000b883a 	mov	r5,zero
10006e88:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10006e8c:	0009883a 	mov	r4,zero
10006e90:	01408404 	movi	r5,528
10006e94:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10006e98:	0009883a 	mov	r4,zero
10006e9c:	01401044 	movi	r5,65
10006ea0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10006ea4:	0009883a 	mov	r4,zero
10006ea8:	014004c4 	movi	r5,19
10006eac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10006eb0:	0009883a 	mov	r4,zero
10006eb4:	000b883a 	mov	r5,zero
10006eb8:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10006ebc:	01006c04 	movi	r4,432
10006ec0:	01414004 	movi	r5,1280
10006ec4:	00062540 	call	10006254 <UsbWrite>

}
10006ec8:	e037883a 	mov	sp,fp
10006ecc:	dfc00117 	ldw	ra,4(sp)
10006ed0:	df000017 	ldw	fp,0(sp)
10006ed4:	dec00204 	addi	sp,sp,8
10006ed8:	f800283a 	ret

10006edc <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10006edc:	defffe04 	addi	sp,sp,-8
10006ee0:	dfc00115 	stw	ra,4(sp)
10006ee4:	df000015 	stw	fp,0(sp)
10006ee8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10006eec:	01000084 	movi	r4,2
10006ef0:	01414004 	movi	r5,1280
10006ef4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10006ef8:	0009883a 	mov	r4,zero
10006efc:	01414304 	movi	r5,1292
10006f00:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10006f04:	0009883a 	mov	r4,zero
10006f08:	01400204 	movi	r5,8
10006f0c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10006f10:	0009883a 	mov	r4,zero
10006f14:	0140b404 	movi	r5,720
10006f18:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10006f1c:	0009883a 	mov	r4,zero
10006f20:	01400044 	movi	r5,1
10006f24:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10006f28:	0009883a 	mov	r4,zero
10006f2c:	014004c4 	movi	r5,19
10006f30:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10006f34:	0009883a 	mov	r4,zero
10006f38:	01414504 	movi	r5,1300
10006f3c:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10006f40:	0009883a 	mov	r4,zero
10006f44:	0141a044 	movi	r5,1665
10006f48:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10006f4c:	0009883a 	mov	r4,zero
10006f50:	01488004 	movi	r5,8704
10006f54:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10006f58:	0009883a 	mov	r4,zero
10006f5c:	000b883a 	mov	r5,zero
10006f60:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10006f64:	0009883a 	mov	r4,zero
10006f68:	01401ec4 	movi	r5,123
10006f6c:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10006f70:	0009883a 	mov	r4,zero
10006f74:	01416004 	movi	r5,1408
10006f78:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10006f7c:	0009883a 	mov	r4,zero
10006f80:	01400204 	movi	r5,8
10006f84:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10006f88:	0009883a 	mov	r4,zero
10006f8c:	0140a404 	movi	r5,656
10006f90:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10006f94:	0009883a 	mov	r4,zero
10006f98:	01401044 	movi	r5,65
10006f9c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10006fa0:	0009883a 	mov	r4,zero
10006fa4:	014004c4 	movi	r5,19
10006fa8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10006fac:	0009883a 	mov	r4,zero
10006fb0:	01414804 	movi	r5,1312
10006fb4:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10006fb8:	0009883a 	mov	r4,zero
10006fbc:	01416204 	movi	r5,1416
10006fc0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10006fc4:	0009883a 	mov	r4,zero
10006fc8:	01400204 	movi	r5,8
10006fcc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10006fd0:	0009883a 	mov	r4,zero
10006fd4:	0140a404 	movi	r5,656
10006fd8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10006fdc:	0009883a 	mov	r4,zero
10006fe0:	01400044 	movi	r5,1
10006fe4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10006fe8:	0009883a 	mov	r4,zero
10006fec:	014004c4 	movi	r5,19
10006ff0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10006ff4:	0009883a 	mov	r4,zero
10006ff8:	01414b04 	movi	r5,1324
10006ffc:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10007000:	0009883a 	mov	r4,zero
10007004:	01416404 	movi	r5,1424
10007008:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
1000700c:	0009883a 	mov	r4,zero
10007010:	01400204 	movi	r5,8
10007014:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10007018:	0009883a 	mov	r4,zero
1000701c:	0140a404 	movi	r5,656
10007020:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10007024:	0009883a 	mov	r4,zero
10007028:	01401044 	movi	r5,65
1000702c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10007030:	0009883a 	mov	r4,zero
10007034:	014004c4 	movi	r5,19
10007038:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
1000703c:	0009883a 	mov	r4,zero
10007040:	01414e04 	movi	r5,1336
10007044:	00002480 	call	10000248 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10007048:	0009883a 	mov	r4,zero
1000704c:	01416604 	movi	r5,1432
10007050:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10007054:	0009883a 	mov	r4,zero
10007058:	01400204 	movi	r5,8
1000705c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10007060:	0009883a 	mov	r4,zero
10007064:	0140a404 	movi	r5,656
10007068:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
1000706c:	0009883a 	mov	r4,zero
10007070:	01400044 	movi	r5,1
10007074:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10007078:	0009883a 	mov	r4,zero
1000707c:	014004c4 	movi	r5,19
10007080:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10007084:	0009883a 	mov	r4,zero
10007088:	01415104 	movi	r5,1348
1000708c:	00002480 	call	10000248 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10007090:	0009883a 	mov	r4,zero
10007094:	01416804 	movi	r5,1440
10007098:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
1000709c:	0009883a 	mov	r4,zero
100070a0:	01400204 	movi	r5,8
100070a4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100070a8:	0009883a 	mov	r4,zero
100070ac:	0140a404 	movi	r5,656
100070b0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
100070b4:	0009883a 	mov	r4,zero
100070b8:	01401044 	movi	r5,65
100070bc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100070c0:	0009883a 	mov	r4,zero
100070c4:	014004c4 	movi	r5,19
100070c8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
100070cc:	0009883a 	mov	r4,zero
100070d0:	01415404 	movi	r5,1360
100070d4:	00002480 	call	10000248 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
100070d8:	0009883a 	mov	r4,zero
100070dc:	01416a04 	movi	r5,1448
100070e0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100070e4:	0009883a 	mov	r4,zero
100070e8:	01400204 	movi	r5,8
100070ec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100070f0:	0009883a 	mov	r4,zero
100070f4:	0140a404 	movi	r5,656
100070f8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100070fc:	0009883a 	mov	r4,zero
10007100:	01400044 	movi	r5,1
10007104:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10007108:	0009883a 	mov	r4,zero
1000710c:	014004c4 	movi	r5,19
10007110:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10007114:	0009883a 	mov	r4,zero
10007118:	01415704 	movi	r5,1372
1000711c:	00002480 	call	10000248 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10007120:	0009883a 	mov	r4,zero
10007124:	01416c04 	movi	r5,1456
10007128:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
1000712c:	0009883a 	mov	r4,zero
10007130:	01400204 	movi	r5,8
10007134:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10007138:	0009883a 	mov	r4,zero
1000713c:	0140a404 	movi	r5,656
10007140:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10007144:	0009883a 	mov	r4,zero
10007148:	01401044 	movi	r5,65
1000714c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10007150:	0009883a 	mov	r4,zero
10007154:	014004c4 	movi	r5,19
10007158:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
1000715c:	0009883a 	mov	r4,zero
10007160:	01415a04 	movi	r5,1384
10007164:	00002480 	call	10000248 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10007168:	0009883a 	mov	r4,zero
1000716c:	01416e04 	movi	r5,1464
10007170:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10007174:	0009883a 	mov	r4,zero
10007178:	014000c4 	movi	r5,3
1000717c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10007180:	0009883a 	mov	r4,zero
10007184:	0140a404 	movi	r5,656
10007188:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
1000718c:	0009883a 	mov	r4,zero
10007190:	01400044 	movi	r5,1
10007194:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10007198:	0009883a 	mov	r4,zero
1000719c:	014004c4 	movi	r5,19
100071a0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
100071a4:	0009883a 	mov	r4,zero
100071a8:	01415d04 	movi	r5,1396
100071ac:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
100071b0:	0009883a 	mov	r4,zero
100071b4:	000b883a 	mov	r5,zero
100071b8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100071bc:	0009883a 	mov	r4,zero
100071c0:	000b883a 	mov	r5,zero
100071c4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
100071c8:	0009883a 	mov	r4,zero
100071cc:	01408404 	movi	r5,528
100071d0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100071d4:	0009883a 	mov	r4,zero
100071d8:	01401044 	movi	r5,65
100071dc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100071e0:	0009883a 	mov	r4,zero
100071e4:	014004c4 	movi	r5,19
100071e8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100071ec:	0009883a 	mov	r4,zero
100071f0:	000b883a 	mov	r5,zero
100071f4:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100071f8:	01006c04 	movi	r4,432
100071fc:	01414004 	movi	r5,1280
10007200:	00062540 	call	10006254 <UsbWrite>

}
10007204:	e037883a 	mov	sp,fp
10007208:	dfc00117 	ldw	ra,4(sp)
1000720c:	df000017 	ldw	fp,0(sp)
10007210:	dec00204 	addi	sp,sp,8
10007214:	f800283a 	ret

10007218 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10007218:	defffd04 	addi	sp,sp,-12
1000721c:	dfc00215 	stw	ra,8(sp)
10007220:	df000115 	stw	fp,4(sp)
10007224:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10007228:	01005104 	movi	r4,324
1000722c:	00062a80 	call	100062a8 <UsbRead>
10007230:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
10007234:	01005104 	movi	r4,324
10007238:	000b883a 	mov	r5,zero
1000723c:	00062540 	call	10006254 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10007240:	00000d06 	br	10007278 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
10007244:	e0bfff0b 	ldhu	r2,-4(fp)
10007248:	10000526 	beq	r2,zero,10007260 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
1000724c:	e0bfff0b 	ldhu	r2,-4(fp)
10007250:	010400b4 	movhi	r4,4098
10007254:	21271104 	addi	r4,r4,-25532
10007258:	100b883a 	mov	r5,r2
1000725c:	0009be00 	call	10009be0 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10007260:	01005104 	movi	r4,324
10007264:	00062a80 	call	100062a8 <UsbRead>
10007268:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
1000726c:	01005104 	movi	r4,324
10007270:	000b883a 	mov	r5,zero
10007274:	00062540 	call	10006254 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10007278:	e0bfff0b 	ldhu	r2,-4(fp)
1000727c:	10840018 	cmpnei	r2,r2,4096
10007280:	103ff01e 	bne	r2,zero,10007244 <__alt_data_end+0xf8007244>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
10007284:	e0bfff0b 	ldhu	r2,-4(fp)
}
10007288:	e037883a 	mov	sp,fp
1000728c:	dfc00117 	ldw	ra,4(sp)
10007290:	df000017 	ldw	fp,0(sp)
10007294:	dec00204 	addi	sp,sp,8
10007298:	f800283a 	ret

1000729c <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
1000729c:	defffd04 	addi	sp,sp,-12
100072a0:	dfc00215 	stw	ra,8(sp)
100072a4:	df000115 	stw	fp,4(sp)
100072a8:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
100072ac:	010000c4 	movi	r4,3
100072b0:	00002c00 	call	100002c0 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
100072b4:	01005104 	movi	r4,324
100072b8:	00062a80 	call	100062a8 <UsbRead>
100072bc:	10bfffcc 	andi	r2,r2,65535
100072c0:	10840018 	cmpnei	r2,r2,4096
100072c4:	1000091e 	bne	r2,zero,100072ec <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
100072c8:	01005104 	movi	r4,324
100072cc:	000b883a 	mov	r5,zero
100072d0:	00062540 	call	10006254 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100072d4:	0001883a 	nop
100072d8:	010000c4 	movi	r4,3
100072dc:	00002c00 	call	100002c0 <IO_read>
100072e0:	10bfffcc 	andi	r2,r2,65535
100072e4:	1080040c 	andi	r2,r2,16
100072e8:	103ffb26 	beq	r2,zero,100072d8 <__alt_data_end+0xf80072d8>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
100072ec:	01000084 	movi	r4,2
100072f0:	01414204 	movi	r5,1288
100072f4:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100072f8:	0009883a 	mov	r4,zero
100072fc:	00002c00 	call	100002c0 <IO_read>
10007300:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
10007304:	e0bfff0b 	ldhu	r2,-4(fp)
}
10007308:	e037883a 	mov	sp,fp
1000730c:	dfc00117 	ldw	ra,4(sp)
10007310:	df000017 	ldw	fp,0(sp)
10007314:	dec00204 	addi	sp,sp,8
10007318:	f800283a 	ret

1000731c <UsbPrintMem>:


void UsbPrintMem()
{
1000731c:	defffc04 	addi	sp,sp,-16
10007320:	dfc00315 	stw	ra,12(sp)
10007324:	df000215 	stw	fp,8(sp)
10007328:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
1000732c:	01000084 	movi	r4,2
10007330:	01414004 	movi	r5,1280
10007334:	00002480 	call	10000248 <IO_write>
	for (i = 0; i <= 200; i += 2)
10007338:	e03ffe15 	stw	zero,-8(fp)
1000733c:	00000e06 	br	10007378 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
10007340:	0009883a 	mov	r4,zero
10007344:	00002c00 	call	100002c0 <IO_read>
10007348:	10bfffcc 	andi	r2,r2,65535
1000734c:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10007350:	e0bffe17 	ldw	r2,-8(fp)
10007354:	10814004 	addi	r2,r2,1280
10007358:	010400b4 	movhi	r4,4098
1000735c:	21271904 	addi	r4,r4,-25500
10007360:	100b883a 	mov	r5,r2
10007364:	e1bfff17 	ldw	r6,-4(fp)
10007368:	0009be00 	call	10009be0 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
1000736c:	e0bffe17 	ldw	r2,-8(fp)
10007370:	10800084 	addi	r2,r2,2
10007374:	e0bffe15 	stw	r2,-8(fp)
10007378:	e0bffe17 	ldw	r2,-8(fp)
1000737c:	10803250 	cmplti	r2,r2,201
10007380:	103fef1e 	bne	r2,zero,10007340 <__alt_data_end+0xf8007340>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
10007384:	e037883a 	mov	sp,fp
10007388:	dfc00117 	ldw	ra,4(sp)
1000738c:	df000017 	ldw	fp,0(sp)
10007390:	dec00204 	addi	sp,sp,8
10007394:	f800283a 	ret

10007398 <udivmodsi4>:
10007398:	2900182e 	bgeu	r5,r4,100073fc <udivmodsi4+0x64>
1000739c:	28001716 	blt	r5,zero,100073fc <udivmodsi4+0x64>
100073a0:	00800804 	movi	r2,32
100073a4:	00c00044 	movi	r3,1
100073a8:	00000206 	br	100073b4 <udivmodsi4+0x1c>
100073ac:	10001126 	beq	r2,zero,100073f4 <udivmodsi4+0x5c>
100073b0:	28000516 	blt	r5,zero,100073c8 <udivmodsi4+0x30>
100073b4:	294b883a 	add	r5,r5,r5
100073b8:	10bfffc4 	addi	r2,r2,-1
100073bc:	18c7883a 	add	r3,r3,r3
100073c0:	293ffa36 	bltu	r5,r4,100073ac <__alt_data_end+0xf80073ac>
100073c4:	18000b26 	beq	r3,zero,100073f4 <udivmodsi4+0x5c>
100073c8:	0005883a 	mov	r2,zero
100073cc:	21400236 	bltu	r4,r5,100073d8 <udivmodsi4+0x40>
100073d0:	2149c83a 	sub	r4,r4,r5
100073d4:	10c4b03a 	or	r2,r2,r3
100073d8:	1806d07a 	srli	r3,r3,1
100073dc:	280ad07a 	srli	r5,r5,1
100073e0:	183ffa1e 	bne	r3,zero,100073cc <__alt_data_end+0xf80073cc>
100073e4:	3000011e 	bne	r6,zero,100073ec <udivmodsi4+0x54>
100073e8:	f800283a 	ret
100073ec:	2005883a 	mov	r2,r4
100073f0:	f800283a 	ret
100073f4:	0005883a 	mov	r2,zero
100073f8:	003ffa06 	br	100073e4 <__alt_data_end+0xf80073e4>
100073fc:	00c00044 	movi	r3,1
10007400:	003ff106 	br	100073c8 <__alt_data_end+0xf80073c8>

10007404 <__divsi3>:
10007404:	defffe04 	addi	sp,sp,-8
10007408:	dfc00115 	stw	ra,4(sp)
1000740c:	dc000015 	stw	r16,0(sp)
10007410:	20000b16 	blt	r4,zero,10007440 <__divsi3+0x3c>
10007414:	0021883a 	mov	r16,zero
10007418:	28000c16 	blt	r5,zero,1000744c <__divsi3+0x48>
1000741c:	000d883a 	mov	r6,zero
10007420:	00073980 	call	10007398 <udivmodsi4>
10007424:	0407c83a 	sub	r3,zero,r16
10007428:	1884f03a 	xor	r2,r3,r2
1000742c:	1405883a 	add	r2,r2,r16
10007430:	dfc00117 	ldw	ra,4(sp)
10007434:	dc000017 	ldw	r16,0(sp)
10007438:	dec00204 	addi	sp,sp,8
1000743c:	f800283a 	ret
10007440:	0109c83a 	sub	r4,zero,r4
10007444:	04000044 	movi	r16,1
10007448:	283ff40e 	bge	r5,zero,1000741c <__alt_data_end+0xf800741c>
1000744c:	014bc83a 	sub	r5,zero,r5
10007450:	8400005c 	xori	r16,r16,1
10007454:	003ff106 	br	1000741c <__alt_data_end+0xf800741c>

10007458 <__modsi3>:
10007458:	defffd04 	addi	sp,sp,-12
1000745c:	dfc00215 	stw	ra,8(sp)
10007460:	dc400115 	stw	r17,4(sp)
10007464:	dc000015 	stw	r16,0(sp)
10007468:	20000c16 	blt	r4,zero,1000749c <__modsi3+0x44>
1000746c:	0023883a 	mov	r17,zero
10007470:	0021883a 	mov	r16,zero
10007474:	28000d16 	blt	r5,zero,100074ac <__modsi3+0x54>
10007478:	01800044 	movi	r6,1
1000747c:	00073980 	call	10007398 <udivmodsi4>
10007480:	1404f03a 	xor	r2,r2,r16
10007484:	8885883a 	add	r2,r17,r2
10007488:	dfc00217 	ldw	ra,8(sp)
1000748c:	dc400117 	ldw	r17,4(sp)
10007490:	dc000017 	ldw	r16,0(sp)
10007494:	dec00304 	addi	sp,sp,12
10007498:	f800283a 	ret
1000749c:	0109c83a 	sub	r4,zero,r4
100074a0:	04400044 	movi	r17,1
100074a4:	043fffc4 	movi	r16,-1
100074a8:	283ff30e 	bge	r5,zero,10007478 <__alt_data_end+0xf8007478>
100074ac:	014bc83a 	sub	r5,zero,r5
100074b0:	003ff106 	br	10007478 <__alt_data_end+0xf8007478>

100074b4 <__udivsi3>:
100074b4:	000d883a 	mov	r6,zero
100074b8:	00073981 	jmpi	10007398 <udivmodsi4>

100074bc <__umodsi3>:
100074bc:	01800044 	movi	r6,1
100074c0:	00073981 	jmpi	10007398 <udivmodsi4>

100074c4 <__mulsi3>:
100074c4:	0005883a 	mov	r2,zero
100074c8:	20000726 	beq	r4,zero,100074e8 <__mulsi3+0x24>
100074cc:	20c0004c 	andi	r3,r4,1
100074d0:	2008d07a 	srli	r4,r4,1
100074d4:	18000126 	beq	r3,zero,100074dc <__mulsi3+0x18>
100074d8:	1145883a 	add	r2,r2,r5
100074dc:	294b883a 	add	r5,r5,r5
100074e0:	203ffa1e 	bne	r4,zero,100074cc <__alt_data_end+0xf80074cc>
100074e4:	f800283a 	ret
100074e8:	f800283a 	ret

100074ec <__addsf3>:
100074ec:	defffc04 	addi	sp,sp,-16
100074f0:	2004d7fa 	srli	r2,r4,31
100074f4:	280ed5fa 	srli	r7,r5,23
100074f8:	dc000015 	stw	r16,0(sp)
100074fc:	01802034 	movhi	r6,128
10007500:	2020d5fa 	srli	r16,r4,23
10007504:	31bfffc4 	addi	r6,r6,-1
10007508:	2810d7fa 	srli	r8,r5,31
1000750c:	3108703a 	and	r4,r6,r4
10007510:	dc800215 	stw	r18,8(sp)
10007514:	314c703a 	and	r6,r6,r5
10007518:	84003fcc 	andi	r16,r16,255
1000751c:	200690fa 	slli	r3,r4,3
10007520:	dfc00315 	stw	ra,12(sp)
10007524:	39003fcc 	andi	r4,r7,255
10007528:	dc400115 	stw	r17,4(sp)
1000752c:	14803fcc 	andi	r18,r2,255
10007530:	300c90fa 	slli	r6,r6,3
10007534:	810bc83a 	sub	r5,r16,r4
10007538:	92004826 	beq	r18,r8,1000765c <__addsf3+0x170>
1000753c:	01406c0e 	bge	zero,r5,100076f0 <__addsf3+0x204>
10007540:	20001e1e 	bne	r4,zero,100075bc <__addsf3+0xd0>
10007544:	3000611e 	bne	r6,zero,100076cc <__addsf3+0x1e0>
10007548:	188001cc 	andi	r2,r3,7
1000754c:	10000426 	beq	r2,zero,10007560 <__addsf3+0x74>
10007550:	190003cc 	andi	r4,r3,15
10007554:	00800104 	movi	r2,4
10007558:	20800126 	beq	r4,r2,10007560 <__addsf3+0x74>
1000755c:	18c00104 	addi	r3,r3,4
10007560:	1901002c 	andhi	r4,r3,1024
10007564:	9005883a 	mov	r2,r18
10007568:	20003426 	beq	r4,zero,1000763c <__addsf3+0x150>
1000756c:	81400044 	addi	r5,r16,1
10007570:	01003fc4 	movi	r4,255
10007574:	29006926 	beq	r5,r4,1000771c <__addsf3+0x230>
10007578:	180691ba 	slli	r3,r3,6
1000757c:	1808d27a 	srli	r4,r3,9
10007580:	29403fcc 	andi	r5,r5,255
10007584:	280a95fa 	slli	r5,r5,23
10007588:	10803fcc 	andi	r2,r2,255
1000758c:	00c02034 	movhi	r3,128
10007590:	100497fa 	slli	r2,r2,31
10007594:	18ffffc4 	addi	r3,r3,-1
10007598:	20c6703a 	and	r3,r4,r3
1000759c:	1946b03a 	or	r3,r3,r5
100075a0:	1884b03a 	or	r2,r3,r2
100075a4:	dfc00317 	ldw	ra,12(sp)
100075a8:	dc800217 	ldw	r18,8(sp)
100075ac:	dc400117 	ldw	r17,4(sp)
100075b0:	dc000017 	ldw	r16,0(sp)
100075b4:	dec00404 	addi	sp,sp,16
100075b8:	f800283a 	ret
100075bc:	00803fc4 	movi	r2,255
100075c0:	80bfe126 	beq	r16,r2,10007548 <__alt_data_end+0xf8007548>
100075c4:	31810034 	orhi	r6,r6,1024
100075c8:	008006c4 	movi	r2,27
100075cc:	11405b0e 	bge	r2,r5,1000773c <__addsf3+0x250>
100075d0:	01400044 	movi	r5,1
100075d4:	1947c83a 	sub	r3,r3,r5
100075d8:	1881002c 	andhi	r2,r3,1024
100075dc:	10001426 	beq	r2,zero,10007630 <__addsf3+0x144>
100075e0:	04410034 	movhi	r17,1024
100075e4:	8c7fffc4 	addi	r17,r17,-1
100075e8:	1c62703a 	and	r17,r3,r17
100075ec:	8809883a 	mov	r4,r17
100075f0:	0009a180 	call	10009a18 <__clzsi2>
100075f4:	10bffec4 	addi	r2,r2,-5
100075f8:	88a2983a 	sll	r17,r17,r2
100075fc:	14004a16 	blt	r2,r16,10007728 <__addsf3+0x23c>
10007600:	140bc83a 	sub	r5,r2,r16
10007604:	00c007c4 	movi	r3,31
10007608:	1947c83a 	sub	r3,r3,r5
1000760c:	88c6983a 	sll	r3,r17,r3
10007610:	29400044 	addi	r5,r5,1
10007614:	8962d83a 	srl	r17,r17,r5
10007618:	1806c03a 	cmpne	r3,r3,zero
1000761c:	0021883a 	mov	r16,zero
10007620:	1c46b03a 	or	r3,r3,r17
10007624:	003fc806 	br	10007548 <__alt_data_end+0xf8007548>
10007628:	1000e526 	beq	r2,zero,100079c0 <__addsf3+0x4d4>
1000762c:	1007883a 	mov	r3,r2
10007630:	188001cc 	andi	r2,r3,7
10007634:	103fc61e 	bne	r2,zero,10007550 <__alt_data_end+0xf8007550>
10007638:	9005883a 	mov	r2,r18
1000763c:	01003fc4 	movi	r4,255
10007640:	1806d0fa 	srli	r3,r3,3
10007644:	81001a26 	beq	r16,r4,100076b0 <__addsf3+0x1c4>
10007648:	01002034 	movhi	r4,128
1000764c:	213fffc4 	addi	r4,r4,-1
10007650:	800b883a 	mov	r5,r16
10007654:	1908703a 	and	r4,r3,r4
10007658:	003fc906 	br	10007580 <__alt_data_end+0xf8007580>
1000765c:	01403e0e 	bge	zero,r5,10007758 <__addsf3+0x26c>
10007660:	20001e26 	beq	r4,zero,100076dc <__addsf3+0x1f0>
10007664:	01003fc4 	movi	r4,255
10007668:	813fb726 	beq	r16,r4,10007548 <__alt_data_end+0xf8007548>
1000766c:	31810034 	orhi	r6,r6,1024
10007670:	010006c4 	movi	r4,27
10007674:	2140570e 	bge	r4,r5,100077d4 <__addsf3+0x2e8>
10007678:	01400044 	movi	r5,1
1000767c:	1947883a 	add	r3,r3,r5
10007680:	1901002c 	andhi	r4,r3,1024
10007684:	203fea26 	beq	r4,zero,10007630 <__alt_data_end+0xf8007630>
10007688:	84000044 	addi	r16,r16,1
1000768c:	01003fc4 	movi	r4,255
10007690:	81007526 	beq	r16,r4,10007868 <__addsf3+0x37c>
10007694:	00bf0034 	movhi	r2,64512
10007698:	10bfffc4 	addi	r2,r2,-1
1000769c:	1900004c 	andi	r4,r3,1
100076a0:	1886703a 	and	r3,r3,r2
100076a4:	1806d07a 	srli	r3,r3,1
100076a8:	1906b03a 	or	r3,r3,r4
100076ac:	003fa606 	br	10007548 <__alt_data_end+0xf8007548>
100076b0:	18001a26 	beq	r3,zero,1000771c <__addsf3+0x230>
100076b4:	19001034 	orhi	r4,r3,64
100076b8:	00c02034 	movhi	r3,128
100076bc:	18ffffc4 	addi	r3,r3,-1
100076c0:	017fffc4 	movi	r5,-1
100076c4:	20c8703a 	and	r4,r4,r3
100076c8:	003fad06 	br	10007580 <__alt_data_end+0xf8007580>
100076cc:	297fffc4 	addi	r5,r5,-1
100076d0:	28002c1e 	bne	r5,zero,10007784 <__addsf3+0x298>
100076d4:	1987c83a 	sub	r3,r3,r6
100076d8:	003fbf06 	br	100075d8 <__alt_data_end+0xf80075d8>
100076dc:	303f9a26 	beq	r6,zero,10007548 <__alt_data_end+0xf8007548>
100076e0:	297fffc4 	addi	r5,r5,-1
100076e4:	28004b1e 	bne	r5,zero,10007814 <__addsf3+0x328>
100076e8:	1987883a 	add	r3,r3,r6
100076ec:	003fe406 	br	10007680 <__alt_data_end+0xf8007680>
100076f0:	2800271e 	bne	r5,zero,10007790 <__addsf3+0x2a4>
100076f4:	80800044 	addi	r2,r16,1
100076f8:	10803fcc 	andi	r2,r2,255
100076fc:	01000044 	movi	r4,1
10007700:	2080520e 	bge	r4,r2,1000784c <__addsf3+0x360>
10007704:	19a3c83a 	sub	r17,r3,r6
10007708:	8881002c 	andhi	r2,r17,1024
1000770c:	10002c26 	beq	r2,zero,100077c0 <__addsf3+0x2d4>
10007710:	30e3c83a 	sub	r17,r6,r3
10007714:	4025883a 	mov	r18,r8
10007718:	003fb406 	br	100075ec <__alt_data_end+0xf80075ec>
1000771c:	017fffc4 	movi	r5,-1
10007720:	0009883a 	mov	r4,zero
10007724:	003f9606 	br	10007580 <__alt_data_end+0xf8007580>
10007728:	00ff0034 	movhi	r3,64512
1000772c:	18ffffc4 	addi	r3,r3,-1
10007730:	80a1c83a 	sub	r16,r16,r2
10007734:	88c6703a 	and	r3,r17,r3
10007738:	003f8306 	br	10007548 <__alt_data_end+0xf8007548>
1000773c:	00800804 	movi	r2,32
10007740:	1145c83a 	sub	r2,r2,r5
10007744:	3084983a 	sll	r2,r6,r2
10007748:	314cd83a 	srl	r6,r6,r5
1000774c:	100ac03a 	cmpne	r5,r2,zero
10007750:	298ab03a 	or	r5,r5,r6
10007754:	003f9f06 	br	100075d4 <__alt_data_end+0xf80075d4>
10007758:	2800451e 	bne	r5,zero,10007870 <__addsf3+0x384>
1000775c:	81000044 	addi	r4,r16,1
10007760:	21c03fcc 	andi	r7,r4,255
10007764:	01400044 	movi	r5,1
10007768:	29c02d0e 	bge	r5,r7,10007820 <__addsf3+0x334>
1000776c:	01403fc4 	movi	r5,255
10007770:	21403c26 	beq	r4,r5,10007864 <__addsf3+0x378>
10007774:	30c7883a 	add	r3,r6,r3
10007778:	1806d07a 	srli	r3,r3,1
1000777c:	2021883a 	mov	r16,r4
10007780:	003f7106 	br	10007548 <__alt_data_end+0xf8007548>
10007784:	00803fc4 	movi	r2,255
10007788:	80bf8f1e 	bne	r16,r2,100075c8 <__alt_data_end+0xf80075c8>
1000778c:	003f6e06 	br	10007548 <__alt_data_end+0xf8007548>
10007790:	80001726 	beq	r16,zero,100077f0 <__addsf3+0x304>
10007794:	00803fc4 	movi	r2,255
10007798:	20801a26 	beq	r4,r2,10007804 <__addsf3+0x318>
1000779c:	014bc83a 	sub	r5,zero,r5
100077a0:	18c10034 	orhi	r3,r3,1024
100077a4:	008006c4 	movi	r2,27
100077a8:	1140430e 	bge	r2,r5,100078b8 <__addsf3+0x3cc>
100077ac:	00c00044 	movi	r3,1
100077b0:	30c7c83a 	sub	r3,r6,r3
100077b4:	2021883a 	mov	r16,r4
100077b8:	4025883a 	mov	r18,r8
100077bc:	003f8606 	br	100075d8 <__alt_data_end+0xf80075d8>
100077c0:	883f8a1e 	bne	r17,zero,100075ec <__alt_data_end+0xf80075ec>
100077c4:	0007883a 	mov	r3,zero
100077c8:	0005883a 	mov	r2,zero
100077cc:	0021883a 	mov	r16,zero
100077d0:	003f9a06 	br	1000763c <__alt_data_end+0xf800763c>
100077d4:	01000804 	movi	r4,32
100077d8:	2149c83a 	sub	r4,r4,r5
100077dc:	3108983a 	sll	r4,r6,r4
100077e0:	314cd83a 	srl	r6,r6,r5
100077e4:	200ac03a 	cmpne	r5,r4,zero
100077e8:	298ab03a 	or	r5,r5,r6
100077ec:	003fa306 	br	1000767c <__alt_data_end+0xf800767c>
100077f0:	18000426 	beq	r3,zero,10007804 <__addsf3+0x318>
100077f4:	014a303a 	nor	r5,zero,r5
100077f8:	283fed26 	beq	r5,zero,100077b0 <__alt_data_end+0xf80077b0>
100077fc:	00803fc4 	movi	r2,255
10007800:	20bfe81e 	bne	r4,r2,100077a4 <__alt_data_end+0xf80077a4>
10007804:	3007883a 	mov	r3,r6
10007808:	2021883a 	mov	r16,r4
1000780c:	4025883a 	mov	r18,r8
10007810:	003f4d06 	br	10007548 <__alt_data_end+0xf8007548>
10007814:	01003fc4 	movi	r4,255
10007818:	813f951e 	bne	r16,r4,10007670 <__alt_data_end+0xf8007670>
1000781c:	003f4a06 	br	10007548 <__alt_data_end+0xf8007548>
10007820:	8000471e 	bne	r16,zero,10007940 <__addsf3+0x454>
10007824:	18006126 	beq	r3,zero,100079ac <__addsf3+0x4c0>
10007828:	303f4726 	beq	r6,zero,10007548 <__alt_data_end+0xf8007548>
1000782c:	1987883a 	add	r3,r3,r6
10007830:	1881002c 	andhi	r2,r3,1024
10007834:	103f7e26 	beq	r2,zero,10007630 <__alt_data_end+0xf8007630>
10007838:	00bf0034 	movhi	r2,64512
1000783c:	10bfffc4 	addi	r2,r2,-1
10007840:	2821883a 	mov	r16,r5
10007844:	1886703a 	and	r3,r3,r2
10007848:	003f3f06 	br	10007548 <__alt_data_end+0xf8007548>
1000784c:	8000141e 	bne	r16,zero,100078a0 <__addsf3+0x3b4>
10007850:	1800311e 	bne	r3,zero,10007918 <__addsf3+0x42c>
10007854:	30004626 	beq	r6,zero,10007970 <__addsf3+0x484>
10007858:	3007883a 	mov	r3,r6
1000785c:	4025883a 	mov	r18,r8
10007860:	003f3906 	br	10007548 <__alt_data_end+0xf8007548>
10007864:	2021883a 	mov	r16,r4
10007868:	0007883a 	mov	r3,zero
1000786c:	003f7306 	br	1000763c <__alt_data_end+0xf800763c>
10007870:	8000181e 	bne	r16,zero,100078d4 <__addsf3+0x3e8>
10007874:	18002f26 	beq	r3,zero,10007934 <__addsf3+0x448>
10007878:	014a303a 	nor	r5,zero,r5
1000787c:	28000526 	beq	r5,zero,10007894 <__addsf3+0x3a8>
10007880:	01c03fc4 	movi	r7,255
10007884:	21c02b26 	beq	r4,r7,10007934 <__addsf3+0x448>
10007888:	01c006c4 	movi	r7,27
1000788c:	3940400e 	bge	r7,r5,10007990 <__addsf3+0x4a4>
10007890:	00c00044 	movi	r3,1
10007894:	1987883a 	add	r3,r3,r6
10007898:	2021883a 	mov	r16,r4
1000789c:	003f7806 	br	10007680 <__alt_data_end+0xf8007680>
100078a0:	1800111e 	bne	r3,zero,100078e8 <__addsf3+0x3fc>
100078a4:	30003526 	beq	r6,zero,1000797c <__addsf3+0x490>
100078a8:	3007883a 	mov	r3,r6
100078ac:	4025883a 	mov	r18,r8
100078b0:	04003fc4 	movi	r16,255
100078b4:	003f2406 	br	10007548 <__alt_data_end+0xf8007548>
100078b8:	00800804 	movi	r2,32
100078bc:	1145c83a 	sub	r2,r2,r5
100078c0:	1884983a 	sll	r2,r3,r2
100078c4:	194ad83a 	srl	r5,r3,r5
100078c8:	1006c03a 	cmpne	r3,r2,zero
100078cc:	1946b03a 	or	r3,r3,r5
100078d0:	003fb706 	br	100077b0 <__alt_data_end+0xf80077b0>
100078d4:	01c03fc4 	movi	r7,255
100078d8:	21c01626 	beq	r4,r7,10007934 <__addsf3+0x448>
100078dc:	014bc83a 	sub	r5,zero,r5
100078e0:	18c10034 	orhi	r3,r3,1024
100078e4:	003fe806 	br	10007888 <__alt_data_end+0xf8007888>
100078e8:	30001f26 	beq	r6,zero,10007968 <__addsf3+0x47c>
100078ec:	1806d0fa 	srli	r3,r3,3
100078f0:	1880102c 	andhi	r2,r3,64
100078f4:	10000526 	beq	r2,zero,1000790c <__addsf3+0x420>
100078f8:	300cd0fa 	srli	r6,r6,3
100078fc:	3080102c 	andhi	r2,r6,64
10007900:	1000021e 	bne	r2,zero,1000790c <__addsf3+0x420>
10007904:	3007883a 	mov	r3,r6
10007908:	4025883a 	mov	r18,r8
1000790c:	180690fa 	slli	r3,r3,3
10007910:	04003fc4 	movi	r16,255
10007914:	003f0c06 	br	10007548 <__alt_data_end+0xf8007548>
10007918:	303f0b26 	beq	r6,zero,10007548 <__alt_data_end+0xf8007548>
1000791c:	1985c83a 	sub	r2,r3,r6
10007920:	1101002c 	andhi	r4,r2,1024
10007924:	203f4026 	beq	r4,zero,10007628 <__alt_data_end+0xf8007628>
10007928:	30c7c83a 	sub	r3,r6,r3
1000792c:	4025883a 	mov	r18,r8
10007930:	003f0506 	br	10007548 <__alt_data_end+0xf8007548>
10007934:	3007883a 	mov	r3,r6
10007938:	2021883a 	mov	r16,r4
1000793c:	003f0206 	br	10007548 <__alt_data_end+0xf8007548>
10007940:	18001c26 	beq	r3,zero,100079b4 <__addsf3+0x4c8>
10007944:	30000826 	beq	r6,zero,10007968 <__addsf3+0x47c>
10007948:	1806d0fa 	srli	r3,r3,3
1000794c:	1880102c 	andhi	r2,r3,64
10007950:	103fee26 	beq	r2,zero,1000790c <__alt_data_end+0xf800790c>
10007954:	300cd0fa 	srli	r6,r6,3
10007958:	3080102c 	andhi	r2,r6,64
1000795c:	103feb1e 	bne	r2,zero,1000790c <__alt_data_end+0xf800790c>
10007960:	3007883a 	mov	r3,r6
10007964:	003fe906 	br	1000790c <__alt_data_end+0xf800790c>
10007968:	04003fc4 	movi	r16,255
1000796c:	003ef606 	br	10007548 <__alt_data_end+0xf8007548>
10007970:	8007883a 	mov	r3,r16
10007974:	0005883a 	mov	r2,zero
10007978:	003f3006 	br	1000763c <__alt_data_end+0xf800763c>
1000797c:	00c10034 	movhi	r3,1024
10007980:	0005883a 	mov	r2,zero
10007984:	18fffe04 	addi	r3,r3,-8
10007988:	04003fc4 	movi	r16,255
1000798c:	003f2b06 	br	1000763c <__alt_data_end+0xf800763c>
10007990:	01c00804 	movi	r7,32
10007994:	394fc83a 	sub	r7,r7,r5
10007998:	19ce983a 	sll	r7,r3,r7
1000799c:	194ad83a 	srl	r5,r3,r5
100079a0:	3806c03a 	cmpne	r3,r7,zero
100079a4:	1946b03a 	or	r3,r3,r5
100079a8:	003fba06 	br	10007894 <__alt_data_end+0xf8007894>
100079ac:	3007883a 	mov	r3,r6
100079b0:	003ee506 	br	10007548 <__alt_data_end+0xf8007548>
100079b4:	3007883a 	mov	r3,r6
100079b8:	04003fc4 	movi	r16,255
100079bc:	003ee206 	br	10007548 <__alt_data_end+0xf8007548>
100079c0:	0007883a 	mov	r3,zero
100079c4:	0005883a 	mov	r2,zero
100079c8:	003f1c06 	br	1000763c <__alt_data_end+0xf800763c>

100079cc <__divsf3>:
100079cc:	defff504 	addi	sp,sp,-44
100079d0:	dd000515 	stw	r20,20(sp)
100079d4:	2028d5fa 	srli	r20,r4,23
100079d8:	dd400615 	stw	r21,24(sp)
100079dc:	202ad7fa 	srli	r21,r4,31
100079e0:	00c02034 	movhi	r3,128
100079e4:	dcc00415 	stw	r19,16(sp)
100079e8:	dc800315 	stw	r18,12(sp)
100079ec:	18ffffc4 	addi	r3,r3,-1
100079f0:	dfc00a15 	stw	ra,40(sp)
100079f4:	df000915 	stw	fp,36(sp)
100079f8:	ddc00815 	stw	r23,32(sp)
100079fc:	dd800715 	stw	r22,28(sp)
10007a00:	dc400215 	stw	r17,8(sp)
10007a04:	dc000115 	stw	r16,4(sp)
10007a08:	a5003fcc 	andi	r20,r20,255
10007a0c:	1924703a 	and	r18,r3,r4
10007a10:	acc03fcc 	andi	r19,r21,255
10007a14:	a0004d26 	beq	r20,zero,10007b4c <__divsf3+0x180>
10007a18:	00803fc4 	movi	r2,255
10007a1c:	a0802e26 	beq	r20,r2,10007ad8 <__divsf3+0x10c>
10007a20:	91002034 	orhi	r4,r18,128
10007a24:	202490fa 	slli	r18,r4,3
10007a28:	a53fe044 	addi	r20,r20,-127
10007a2c:	0021883a 	mov	r16,zero
10007a30:	002f883a 	mov	r23,zero
10007a34:	2804d5fa 	srli	r2,r5,23
10007a38:	282cd7fa 	srli	r22,r5,31
10007a3c:	00c02034 	movhi	r3,128
10007a40:	18ffffc4 	addi	r3,r3,-1
10007a44:	10803fcc 	andi	r2,r2,255
10007a48:	1962703a 	and	r17,r3,r5
10007a4c:	b7003fcc 	andi	fp,r22,255
10007a50:	10004526 	beq	r2,zero,10007b68 <__divsf3+0x19c>
10007a54:	00c03fc4 	movi	r3,255
10007a58:	10c04026 	beq	r2,r3,10007b5c <__divsf3+0x190>
10007a5c:	88c02034 	orhi	r3,r17,128
10007a60:	182290fa 	slli	r17,r3,3
10007a64:	10bfe044 	addi	r2,r2,-127
10007a68:	0009883a 	mov	r4,zero
10007a6c:	2420b03a 	or	r16,r4,r16
10007a70:	802090ba 	slli	r16,r16,2
10007a74:	01c40034 	movhi	r7,4096
10007a78:	39dea604 	addi	r7,r7,31384
10007a7c:	81e1883a 	add	r16,r16,r7
10007a80:	80c00017 	ldw	r3,0(r16)
10007a84:	ad8af03a 	xor	r5,r21,r22
10007a88:	280d883a 	mov	r6,r5
10007a8c:	a085c83a 	sub	r2,r20,r2
10007a90:	29403fcc 	andi	r5,r5,255
10007a94:	1800683a 	jmp	r3
10007a98:	10007ca4 	muli	zero,r2,498
10007a9c:	10007c4c 	andi	zero,r2,497
10007aa0:	10007c70 	cmpltui	zero,r2,497
10007aa4:	10007c38 	rdprs	zero,r2,496
10007aa8:	10007c70 	cmpltui	zero,r2,497
10007aac:	10007ae8 	cmpgeui	zero,r2,491
10007ab0:	10007c70 	cmpltui	zero,r2,497
10007ab4:	10007c38 	rdprs	zero,r2,496
10007ab8:	10007c4c 	andi	zero,r2,497
10007abc:	10007c4c 	andi	zero,r2,497
10007ac0:	10007ae8 	cmpgeui	zero,r2,491
10007ac4:	10007c38 	rdprs	zero,r2,496
10007ac8:	10007d3c 	xorhi	zero,r2,500
10007acc:	10007d3c 	xorhi	zero,r2,500
10007ad0:	10007d3c 	xorhi	zero,r2,500
10007ad4:	10007c7c 	xorhi	zero,r2,497
10007ad8:	9000531e 	bne	r18,zero,10007c28 <__divsf3+0x25c>
10007adc:	04000204 	movi	r16,8
10007ae0:	05c00084 	movi	r23,2
10007ae4:	003fd306 	br	10007a34 <__alt_data_end+0xf8007a34>
10007ae8:	00c02034 	movhi	r3,128
10007aec:	000d883a 	mov	r6,zero
10007af0:	18ffffc4 	addi	r3,r3,-1
10007af4:	013fffc4 	movi	r4,-1
10007af8:	21003fcc 	andi	r4,r4,255
10007afc:	200895fa 	slli	r4,r4,23
10007b00:	30803fcc 	andi	r2,r6,255
10007b04:	01802034 	movhi	r6,128
10007b08:	31bfffc4 	addi	r6,r6,-1
10007b0c:	100497fa 	slli	r2,r2,31
10007b10:	1986703a 	and	r3,r3,r6
10007b14:	1906b03a 	or	r3,r3,r4
10007b18:	1884b03a 	or	r2,r3,r2
10007b1c:	dfc00a17 	ldw	ra,40(sp)
10007b20:	df000917 	ldw	fp,36(sp)
10007b24:	ddc00817 	ldw	r23,32(sp)
10007b28:	dd800717 	ldw	r22,28(sp)
10007b2c:	dd400617 	ldw	r21,24(sp)
10007b30:	dd000517 	ldw	r20,20(sp)
10007b34:	dcc00417 	ldw	r19,16(sp)
10007b38:	dc800317 	ldw	r18,12(sp)
10007b3c:	dc400217 	ldw	r17,8(sp)
10007b40:	dc000117 	ldw	r16,4(sp)
10007b44:	dec00b04 	addi	sp,sp,44
10007b48:	f800283a 	ret
10007b4c:	90002b1e 	bne	r18,zero,10007bfc <__divsf3+0x230>
10007b50:	04000104 	movi	r16,4
10007b54:	05c00044 	movi	r23,1
10007b58:	003fb606 	br	10007a34 <__alt_data_end+0xf8007a34>
10007b5c:	8800251e 	bne	r17,zero,10007bf4 <__divsf3+0x228>
10007b60:	01000084 	movi	r4,2
10007b64:	00000206 	br	10007b70 <__divsf3+0x1a4>
10007b68:	88001a1e 	bne	r17,zero,10007bd4 <__divsf3+0x208>
10007b6c:	01000044 	movi	r4,1
10007b70:	2420b03a 	or	r16,r4,r16
10007b74:	802090ba 	slli	r16,r16,2
10007b78:	00c40034 	movhi	r3,4096
10007b7c:	18dee504 	addi	r3,r3,31636
10007b80:	80e1883a 	add	r16,r16,r3
10007b84:	80c00017 	ldw	r3,0(r16)
10007b88:	ad8af03a 	xor	r5,r21,r22
10007b8c:	a085c83a 	sub	r2,r20,r2
10007b90:	1800683a 	jmp	r3
10007b94:	10007c4c 	andi	zero,r2,497
10007b98:	10007c4c 	andi	zero,r2,497
10007b9c:	10007d9c 	xori	zero,r2,502
10007ba0:	10007c34 	orhi	zero,r2,496
10007ba4:	10007d9c 	xori	zero,r2,502
10007ba8:	10007ae8 	cmpgeui	zero,r2,491
10007bac:	10007d9c 	xori	zero,r2,502
10007bb0:	10007c34 	orhi	zero,r2,496
10007bb4:	10007c4c 	andi	zero,r2,497
10007bb8:	10007c4c 	andi	zero,r2,497
10007bbc:	10007ae8 	cmpgeui	zero,r2,491
10007bc0:	10007c34 	orhi	zero,r2,496
10007bc4:	10007d3c 	xorhi	zero,r2,500
10007bc8:	10007d3c 	xorhi	zero,r2,500
10007bcc:	10007d3c 	xorhi	zero,r2,500
10007bd0:	10007d68 	cmpgeui	zero,r2,501
10007bd4:	8809883a 	mov	r4,r17
10007bd8:	0009a180 	call	10009a18 <__clzsi2>
10007bdc:	10fffec4 	addi	r3,r2,-5
10007be0:	88e2983a 	sll	r17,r17,r3
10007be4:	00ffe284 	movi	r3,-118
10007be8:	1885c83a 	sub	r2,r3,r2
10007bec:	0009883a 	mov	r4,zero
10007bf0:	003f9e06 	br	10007a6c <__alt_data_end+0xf8007a6c>
10007bf4:	010000c4 	movi	r4,3
10007bf8:	003f9c06 	br	10007a6c <__alt_data_end+0xf8007a6c>
10007bfc:	9009883a 	mov	r4,r18
10007c00:	d9400015 	stw	r5,0(sp)
10007c04:	0009a180 	call	10009a18 <__clzsi2>
10007c08:	10fffec4 	addi	r3,r2,-5
10007c0c:	053fe284 	movi	r20,-118
10007c10:	90e4983a 	sll	r18,r18,r3
10007c14:	a0a9c83a 	sub	r20,r20,r2
10007c18:	0021883a 	mov	r16,zero
10007c1c:	002f883a 	mov	r23,zero
10007c20:	d9400017 	ldw	r5,0(sp)
10007c24:	003f8306 	br	10007a34 <__alt_data_end+0xf8007a34>
10007c28:	04000304 	movi	r16,12
10007c2c:	05c000c4 	movi	r23,3
10007c30:	003f8006 	br	10007a34 <__alt_data_end+0xf8007a34>
10007c34:	0023883a 	mov	r17,zero
10007c38:	e027883a 	mov	r19,fp
10007c3c:	202f883a 	mov	r23,r4
10007c40:	00c00084 	movi	r3,2
10007c44:	980b883a 	mov	r5,r19
10007c48:	b8c0501e 	bne	r23,r3,10007d8c <__divsf3+0x3c0>
10007c4c:	2980004c 	andi	r6,r5,1
10007c50:	013fffc4 	movi	r4,-1
10007c54:	0007883a 	mov	r3,zero
10007c58:	003fa706 	br	10007af8 <__alt_data_end+0xf8007af8>
10007c5c:	013fe084 	movi	r4,-126
10007c60:	2089c83a 	sub	r4,r4,r2
10007c64:	00c006c4 	movi	r3,27
10007c68:	1900500e 	bge	r3,r4,10007dac <__divsf3+0x3e0>
10007c6c:	9980004c 	andi	r6,r19,1
10007c70:	0009883a 	mov	r4,zero
10007c74:	0007883a 	mov	r3,zero
10007c78:	003f9f06 	br	10007af8 <__alt_data_end+0xf8007af8>
10007c7c:	9080102c 	andhi	r2,r18,64
10007c80:	10000226 	beq	r2,zero,10007c8c <__divsf3+0x2c0>
10007c84:	8880102c 	andhi	r2,r17,64
10007c88:	10003a26 	beq	r2,zero,10007d74 <__divsf3+0x3a8>
10007c8c:	00802034 	movhi	r2,128
10007c90:	90c01034 	orhi	r3,r18,64
10007c94:	10bfffc4 	addi	r2,r2,-1
10007c98:	a80d883a 	mov	r6,r21
10007c9c:	1886703a 	and	r3,r3,r2
10007ca0:	003f9406 	br	10007af4 <__alt_data_end+0xf8007af4>
10007ca4:	9006917a 	slli	r3,r18,5
10007ca8:	8822917a 	slli	r17,r17,5
10007cac:	1c402936 	bltu	r3,r17,10007d54 <__divsf3+0x388>
10007cb0:	1c47c83a 	sub	r3,r3,r17
10007cb4:	2827883a 	mov	r19,r5
10007cb8:	01800684 	movi	r6,26
10007cbc:	01000044 	movi	r4,1
10007cc0:	180f883a 	mov	r7,r3
10007cc4:	2109883a 	add	r4,r4,r4
10007cc8:	18c7883a 	add	r3,r3,r3
10007ccc:	38000116 	blt	r7,zero,10007cd4 <__divsf3+0x308>
10007cd0:	1c400236 	bltu	r3,r17,10007cdc <__divsf3+0x310>
10007cd4:	1c47c83a 	sub	r3,r3,r17
10007cd8:	21000054 	ori	r4,r4,1
10007cdc:	31bfffc4 	addi	r6,r6,-1
10007ce0:	303ff71e 	bne	r6,zero,10007cc0 <__alt_data_end+0xf8007cc0>
10007ce4:	1806c03a 	cmpne	r3,r3,zero
10007ce8:	1922b03a 	or	r17,r3,r4
10007cec:	11001fc4 	addi	r4,r2,127
10007cf0:	013fda0e 	bge	zero,r4,10007c5c <__alt_data_end+0xf8007c5c>
10007cf4:	88c001cc 	andi	r3,r17,7
10007cf8:	18000426 	beq	r3,zero,10007d0c <__divsf3+0x340>
10007cfc:	894003cc 	andi	r5,r17,15
10007d00:	00c00104 	movi	r3,4
10007d04:	28c00126 	beq	r5,r3,10007d0c <__divsf3+0x340>
10007d08:	88e3883a 	add	r17,r17,r3
10007d0c:	88c2002c 	andhi	r3,r17,2048
10007d10:	18000426 	beq	r3,zero,10007d24 <__divsf3+0x358>
10007d14:	11002004 	addi	r4,r2,128
10007d18:	00be0034 	movhi	r2,63488
10007d1c:	10bfffc4 	addi	r2,r2,-1
10007d20:	88a2703a 	and	r17,r17,r2
10007d24:	00803f84 	movi	r2,254
10007d28:	1100060e 	bge	r2,r4,10007d44 <__divsf3+0x378>
10007d2c:	9980004c 	andi	r6,r19,1
10007d30:	013fffc4 	movi	r4,-1
10007d34:	0007883a 	mov	r3,zero
10007d38:	003f6f06 	br	10007af8 <__alt_data_end+0xf8007af8>
10007d3c:	9023883a 	mov	r17,r18
10007d40:	003fbf06 	br	10007c40 <__alt_data_end+0xf8007c40>
10007d44:	880691ba 	slli	r3,r17,6
10007d48:	9980004c 	andi	r6,r19,1
10007d4c:	1806d27a 	srli	r3,r3,9
10007d50:	003f6906 	br	10007af8 <__alt_data_end+0xf8007af8>
10007d54:	10bfffc4 	addi	r2,r2,-1
10007d58:	2827883a 	mov	r19,r5
10007d5c:	018006c4 	movi	r6,27
10007d60:	0009883a 	mov	r4,zero
10007d64:	003fd606 	br	10007cc0 <__alt_data_end+0xf8007cc0>
10007d68:	9080102c 	andhi	r2,r18,64
10007d6c:	0023883a 	mov	r17,zero
10007d70:	103fc626 	beq	r2,zero,10007c8c <__alt_data_end+0xf8007c8c>
10007d74:	00802034 	movhi	r2,128
10007d78:	88c01034 	orhi	r3,r17,64
10007d7c:	10bfffc4 	addi	r2,r2,-1
10007d80:	b00d883a 	mov	r6,r22
10007d84:	1886703a 	and	r3,r3,r2
10007d88:	003f5a06 	br	10007af4 <__alt_data_end+0xf8007af4>
10007d8c:	00c000c4 	movi	r3,3
10007d90:	b8c01c26 	beq	r23,r3,10007e04 <__divsf3+0x438>
10007d94:	00c00044 	movi	r3,1
10007d98:	b8ffd41e 	bne	r23,r3,10007cec <__alt_data_end+0xf8007cec>
10007d9c:	2980004c 	andi	r6,r5,1
10007da0:	0009883a 	mov	r4,zero
10007da4:	0007883a 	mov	r3,zero
10007da8:	003f5306 	br	10007af8 <__alt_data_end+0xf8007af8>
10007dac:	10802784 	addi	r2,r2,158
10007db0:	8884983a 	sll	r2,r17,r2
10007db4:	8908d83a 	srl	r4,r17,r4
10007db8:	1022c03a 	cmpne	r17,r2,zero
10007dbc:	8908b03a 	or	r4,r17,r4
10007dc0:	208001cc 	andi	r2,r4,7
10007dc4:	10000426 	beq	r2,zero,10007dd8 <__divsf3+0x40c>
10007dc8:	20c003cc 	andi	r3,r4,15
10007dcc:	00800104 	movi	r2,4
10007dd0:	18800126 	beq	r3,r2,10007dd8 <__divsf3+0x40c>
10007dd4:	2089883a 	add	r4,r4,r2
10007dd8:	2081002c 	andhi	r2,r4,1024
10007ddc:	10000426 	beq	r2,zero,10007df0 <__divsf3+0x424>
10007de0:	9980004c 	andi	r6,r19,1
10007de4:	01000044 	movi	r4,1
10007de8:	0007883a 	mov	r3,zero
10007dec:	003f4206 	br	10007af8 <__alt_data_end+0xf8007af8>
10007df0:	200691ba 	slli	r3,r4,6
10007df4:	9980004c 	andi	r6,r19,1
10007df8:	0009883a 	mov	r4,zero
10007dfc:	1806d27a 	srli	r3,r3,9
10007e00:	003f3d06 	br	10007af8 <__alt_data_end+0xf8007af8>
10007e04:	00802034 	movhi	r2,128
10007e08:	88c01034 	orhi	r3,r17,64
10007e0c:	10bfffc4 	addi	r2,r2,-1
10007e10:	9980004c 	andi	r6,r19,1
10007e14:	1886703a 	and	r3,r3,r2
10007e18:	003f3606 	br	10007af4 <__alt_data_end+0xf8007af4>

10007e1c <__gesf2>:
10007e1c:	2004d5fa 	srli	r2,r4,23
10007e20:	2806d5fa 	srli	r3,r5,23
10007e24:	01802034 	movhi	r6,128
10007e28:	31bfffc4 	addi	r6,r6,-1
10007e2c:	10803fcc 	andi	r2,r2,255
10007e30:	01c03fc4 	movi	r7,255
10007e34:	3110703a 	and	r8,r6,r4
10007e38:	18c03fcc 	andi	r3,r3,255
10007e3c:	314c703a 	and	r6,r6,r5
10007e40:	2008d7fa 	srli	r4,r4,31
10007e44:	280ad7fa 	srli	r5,r5,31
10007e48:	11c00926 	beq	r2,r7,10007e70 <__gesf2+0x54>
10007e4c:	19c01226 	beq	r3,r7,10007e98 <__gesf2+0x7c>
10007e50:	1000091e 	bne	r2,zero,10007e78 <__gesf2+0x5c>
10007e54:	4013003a 	cmpeq	r9,r8,zero
10007e58:	480f883a 	mov	r7,r9
10007e5c:	1800091e 	bne	r3,zero,10007e84 <__gesf2+0x68>
10007e60:	3000081e 	bne	r6,zero,10007e84 <__gesf2+0x68>
10007e64:	48001026 	beq	r9,zero,10007ea8 <__gesf2+0x8c>
10007e68:	0005883a 	mov	r2,zero
10007e6c:	f800283a 	ret
10007e70:	4000161e 	bne	r8,zero,10007ecc <__gesf2+0xb0>
10007e74:	18800826 	beq	r3,r2,10007e98 <__gesf2+0x7c>
10007e78:	1800091e 	bne	r3,zero,10007ea0 <__gesf2+0x84>
10007e7c:	000f883a 	mov	r7,zero
10007e80:	30000926 	beq	r6,zero,10007ea8 <__gesf2+0x8c>
10007e84:	29403fcc 	andi	r5,r5,255
10007e88:	38000626 	beq	r7,zero,10007ea4 <__gesf2+0x88>
10007e8c:	2800071e 	bne	r5,zero,10007eac <__gesf2+0x90>
10007e90:	00bfffc4 	movi	r2,-1
10007e94:	f800283a 	ret
10007e98:	30000c1e 	bne	r6,zero,10007ecc <__gesf2+0xb0>
10007e9c:	103fed26 	beq	r2,zero,10007e54 <__alt_data_end+0xf8007e54>
10007ea0:	29403fcc 	andi	r5,r5,255
10007ea4:	21400326 	beq	r4,r5,10007eb4 <__gesf2+0x98>
10007ea8:	203ff91e 	bne	r4,zero,10007e90 <__alt_data_end+0xf8007e90>
10007eac:	00800044 	movi	r2,1
10007eb0:	f800283a 	ret
10007eb4:	18bffc16 	blt	r3,r2,10007ea8 <__alt_data_end+0xf8007ea8>
10007eb8:	10c00216 	blt	r2,r3,10007ec4 <__gesf2+0xa8>
10007ebc:	323ffa36 	bltu	r6,r8,10007ea8 <__alt_data_end+0xf8007ea8>
10007ec0:	41bfe92e 	bgeu	r8,r6,10007e68 <__alt_data_end+0xf8007e68>
10007ec4:	203ff226 	beq	r4,zero,10007e90 <__alt_data_end+0xf8007e90>
10007ec8:	003ff806 	br	10007eac <__alt_data_end+0xf8007eac>
10007ecc:	00bfff84 	movi	r2,-2
10007ed0:	f800283a 	ret

10007ed4 <__lesf2>:
10007ed4:	2004d5fa 	srli	r2,r4,23
10007ed8:	280cd5fa 	srli	r6,r5,23
10007edc:	00c02034 	movhi	r3,128
10007ee0:	18ffffc4 	addi	r3,r3,-1
10007ee4:	10803fcc 	andi	r2,r2,255
10007ee8:	01c03fc4 	movi	r7,255
10007eec:	1910703a 	and	r8,r3,r4
10007ef0:	31803fcc 	andi	r6,r6,255
10007ef4:	1946703a 	and	r3,r3,r5
10007ef8:	2008d7fa 	srli	r4,r4,31
10007efc:	280ad7fa 	srli	r5,r5,31
10007f00:	11c00a26 	beq	r2,r7,10007f2c <__lesf2+0x58>
10007f04:	31c01526 	beq	r6,r7,10007f5c <__lesf2+0x88>
10007f08:	10000a1e 	bne	r2,zero,10007f34 <__lesf2+0x60>
10007f0c:	4013003a 	cmpeq	r9,r8,zero
10007f10:	480f883a 	mov	r7,r9
10007f14:	30000d26 	beq	r6,zero,10007f4c <__lesf2+0x78>
10007f18:	29403fcc 	andi	r5,r5,255
10007f1c:	38001426 	beq	r7,zero,10007f70 <__lesf2+0x9c>
10007f20:	2800081e 	bne	r5,zero,10007f44 <__lesf2+0x70>
10007f24:	00bfffc4 	movi	r2,-1
10007f28:	f800283a 	ret
10007f2c:	40000c1e 	bne	r8,zero,10007f60 <__lesf2+0x8c>
10007f30:	30800a26 	beq	r6,r2,10007f5c <__lesf2+0x88>
10007f34:	30000d1e 	bne	r6,zero,10007f6c <__lesf2+0x98>
10007f38:	000f883a 	mov	r7,zero
10007f3c:	183ff61e 	bne	r3,zero,10007f18 <__alt_data_end+0xf8007f18>
10007f40:	203ff81e 	bne	r4,zero,10007f24 <__alt_data_end+0xf8007f24>
10007f44:	00800044 	movi	r2,1
10007f48:	f800283a 	ret
10007f4c:	183ff21e 	bne	r3,zero,10007f18 <__alt_data_end+0xf8007f18>
10007f50:	483ffb26 	beq	r9,zero,10007f40 <__alt_data_end+0xf8007f40>
10007f54:	0005883a 	mov	r2,zero
10007f58:	f800283a 	ret
10007f5c:	18000226 	beq	r3,zero,10007f68 <__lesf2+0x94>
10007f60:	00800084 	movi	r2,2
10007f64:	f800283a 	ret
10007f68:	103fe826 	beq	r2,zero,10007f0c <__alt_data_end+0xf8007f0c>
10007f6c:	29403fcc 	andi	r5,r5,255
10007f70:	217ff31e 	bne	r4,r5,10007f40 <__alt_data_end+0xf8007f40>
10007f74:	30bff216 	blt	r6,r2,10007f40 <__alt_data_end+0xf8007f40>
10007f78:	11800216 	blt	r2,r6,10007f84 <__lesf2+0xb0>
10007f7c:	1a3ff036 	bltu	r3,r8,10007f40 <__alt_data_end+0xf8007f40>
10007f80:	40fff42e 	bgeu	r8,r3,10007f54 <__alt_data_end+0xf8007f54>
10007f84:	203fe726 	beq	r4,zero,10007f24 <__alt_data_end+0xf8007f24>
10007f88:	003fee06 	br	10007f44 <__alt_data_end+0xf8007f44>

10007f8c <__subsf3>:
10007f8c:	defffc04 	addi	sp,sp,-16
10007f90:	280ed5fa 	srli	r7,r5,23
10007f94:	02002034 	movhi	r8,128
10007f98:	280d883a 	mov	r6,r5
10007f9c:	423fffc4 	addi	r8,r8,-1
10007fa0:	200ad5fa 	srli	r5,r4,23
10007fa4:	dc400115 	stw	r17,4(sp)
10007fa8:	2022d7fa 	srli	r17,r4,31
10007fac:	4108703a 	and	r4,r8,r4
10007fb0:	dc000015 	stw	r16,0(sp)
10007fb4:	4190703a 	and	r8,r8,r6
10007fb8:	200690fa 	slli	r3,r4,3
10007fbc:	dfc00315 	stw	ra,12(sp)
10007fc0:	dc800215 	stw	r18,8(sp)
10007fc4:	39c03fcc 	andi	r7,r7,255
10007fc8:	01003fc4 	movi	r4,255
10007fcc:	8805883a 	mov	r2,r17
10007fd0:	2c003fcc 	andi	r16,r5,255
10007fd4:	8c403fcc 	andi	r17,r17,255
10007fd8:	300cd7fa 	srli	r6,r6,31
10007fdc:	401090fa 	slli	r8,r8,3
10007fe0:	39006126 	beq	r7,r4,10008168 <__subsf3+0x1dc>
10007fe4:	3180005c 	xori	r6,r6,1
10007fe8:	89804926 	beq	r17,r6,10008110 <__subsf3+0x184>
10007fec:	81c5c83a 	sub	r2,r16,r7
10007ff0:	0080710e 	bge	zero,r2,100081b8 <__subsf3+0x22c>
10007ff4:	38001e1e 	bne	r7,zero,10008070 <__subsf3+0xe4>
10007ff8:	4000651e 	bne	r8,zero,10008190 <__subsf3+0x204>
10007ffc:	188001cc 	andi	r2,r3,7
10008000:	10000426 	beq	r2,zero,10008014 <__subsf3+0x88>
10008004:	190003cc 	andi	r4,r3,15
10008008:	00800104 	movi	r2,4
1000800c:	20800126 	beq	r4,r2,10008014 <__subsf3+0x88>
10008010:	18c00104 	addi	r3,r3,4
10008014:	1901002c 	andhi	r4,r3,1024
10008018:	8880004c 	andi	r2,r17,1
1000801c:	20003426 	beq	r4,zero,100080f0 <__subsf3+0x164>
10008020:	81400044 	addi	r5,r16,1
10008024:	01003fc4 	movi	r4,255
10008028:	29006e26 	beq	r5,r4,100081e4 <__subsf3+0x258>
1000802c:	180691ba 	slli	r3,r3,6
10008030:	1808d27a 	srli	r4,r3,9
10008034:	29403fcc 	andi	r5,r5,255
10008038:	280a95fa 	slli	r5,r5,23
1000803c:	10803fcc 	andi	r2,r2,255
10008040:	00c02034 	movhi	r3,128
10008044:	100497fa 	slli	r2,r2,31
10008048:	18ffffc4 	addi	r3,r3,-1
1000804c:	20c6703a 	and	r3,r4,r3
10008050:	1946b03a 	or	r3,r3,r5
10008054:	1884b03a 	or	r2,r3,r2
10008058:	dfc00317 	ldw	ra,12(sp)
1000805c:	dc800217 	ldw	r18,8(sp)
10008060:	dc400117 	ldw	r17,4(sp)
10008064:	dc000017 	ldw	r16,0(sp)
10008068:	dec00404 	addi	sp,sp,16
1000806c:	f800283a 	ret
10008070:	01003fc4 	movi	r4,255
10008074:	813fe126 	beq	r16,r4,10007ffc <__alt_data_end+0xf8007ffc>
10008078:	42010034 	orhi	r8,r8,1024
1000807c:	010006c4 	movi	r4,27
10008080:	2080600e 	bge	r4,r2,10008204 <__subsf3+0x278>
10008084:	02000044 	movi	r8,1
10008088:	1a07c83a 	sub	r3,r3,r8
1000808c:	1881002c 	andhi	r2,r3,1024
10008090:	10001426 	beq	r2,zero,100080e4 <__subsf3+0x158>
10008094:	04810034 	movhi	r18,1024
10008098:	94bfffc4 	addi	r18,r18,-1
1000809c:	1ca4703a 	and	r18,r3,r18
100080a0:	9009883a 	mov	r4,r18
100080a4:	0009a180 	call	10009a18 <__clzsi2>
100080a8:	10bffec4 	addi	r2,r2,-5
100080ac:	90a4983a 	sll	r18,r18,r2
100080b0:	14004f16 	blt	r2,r16,100081f0 <__subsf3+0x264>
100080b4:	140bc83a 	sub	r5,r2,r16
100080b8:	00c007c4 	movi	r3,31
100080bc:	1947c83a 	sub	r3,r3,r5
100080c0:	90c6983a 	sll	r3,r18,r3
100080c4:	29400044 	addi	r5,r5,1
100080c8:	9164d83a 	srl	r18,r18,r5
100080cc:	1806c03a 	cmpne	r3,r3,zero
100080d0:	0021883a 	mov	r16,zero
100080d4:	1c86b03a 	or	r3,r3,r18
100080d8:	003fc806 	br	10007ffc <__alt_data_end+0xf8007ffc>
100080dc:	1000e726 	beq	r2,zero,1000847c <__subsf3+0x4f0>
100080e0:	1007883a 	mov	r3,r2
100080e4:	188001cc 	andi	r2,r3,7
100080e8:	103fc61e 	bne	r2,zero,10008004 <__alt_data_end+0xf8008004>
100080ec:	8880004c 	andi	r2,r17,1
100080f0:	01003fc4 	movi	r4,255
100080f4:	1806d0fa 	srli	r3,r3,3
100080f8:	81001e26 	beq	r16,r4,10008174 <__subsf3+0x1e8>
100080fc:	01002034 	movhi	r4,128
10008100:	213fffc4 	addi	r4,r4,-1
10008104:	800b883a 	mov	r5,r16
10008108:	1908703a 	and	r4,r3,r4
1000810c:	003fc906 	br	10008034 <__alt_data_end+0xf8008034>
10008110:	81c9c83a 	sub	r4,r16,r7
10008114:	0100420e 	bge	zero,r4,10008220 <__subsf3+0x294>
10008118:	38002226 	beq	r7,zero,100081a4 <__subsf3+0x218>
1000811c:	01403fc4 	movi	r5,255
10008120:	817fb626 	beq	r16,r5,10007ffc <__alt_data_end+0xf8007ffc>
10008124:	42010034 	orhi	r8,r8,1024
10008128:	014006c4 	movi	r5,27
1000812c:	2900580e 	bge	r5,r4,10008290 <__subsf3+0x304>
10008130:	01000044 	movi	r4,1
10008134:	1907883a 	add	r3,r3,r4
10008138:	1901002c 	andhi	r4,r3,1024
1000813c:	203fe926 	beq	r4,zero,100080e4 <__alt_data_end+0xf80080e4>
10008140:	84000044 	addi	r16,r16,1
10008144:	01003fc4 	movi	r4,255
10008148:	81007626 	beq	r16,r4,10008324 <__subsf3+0x398>
1000814c:	00bf0034 	movhi	r2,64512
10008150:	10bfffc4 	addi	r2,r2,-1
10008154:	1900004c 	andi	r4,r3,1
10008158:	1886703a 	and	r3,r3,r2
1000815c:	1806d07a 	srli	r3,r3,1
10008160:	1906b03a 	or	r3,r3,r4
10008164:	003fa506 	br	10007ffc <__alt_data_end+0xf8007ffc>
10008168:	403f9e26 	beq	r8,zero,10007fe4 <__alt_data_end+0xf8007fe4>
1000816c:	31803fcc 	andi	r6,r6,255
10008170:	003f9d06 	br	10007fe8 <__alt_data_end+0xf8007fe8>
10008174:	18001b26 	beq	r3,zero,100081e4 <__subsf3+0x258>
10008178:	19001034 	orhi	r4,r3,64
1000817c:	00c02034 	movhi	r3,128
10008180:	18ffffc4 	addi	r3,r3,-1
10008184:	017fffc4 	movi	r5,-1
10008188:	20c8703a 	and	r4,r4,r3
1000818c:	003fa906 	br	10008034 <__alt_data_end+0xf8008034>
10008190:	10bfffc4 	addi	r2,r2,-1
10008194:	103fbc26 	beq	r2,zero,10008088 <__alt_data_end+0xf8008088>
10008198:	01003fc4 	movi	r4,255
1000819c:	813fb71e 	bne	r16,r4,1000807c <__alt_data_end+0xf800807c>
100081a0:	003f9606 	br	10007ffc <__alt_data_end+0xf8007ffc>
100081a4:	403f9526 	beq	r8,zero,10007ffc <__alt_data_end+0xf8007ffc>
100081a8:	213fffc4 	addi	r4,r4,-1
100081ac:	2000481e 	bne	r4,zero,100082d0 <__subsf3+0x344>
100081b0:	1a07883a 	add	r3,r3,r8
100081b4:	003fe006 	br	10008138 <__alt_data_end+0xf8008138>
100081b8:	1000241e 	bne	r2,zero,1000824c <__subsf3+0x2c0>
100081bc:	80800044 	addi	r2,r16,1
100081c0:	10803fcc 	andi	r2,r2,255
100081c4:	01000044 	movi	r4,1
100081c8:	20804f0e 	bge	r4,r2,10008308 <__subsf3+0x37c>
100081cc:	1a25c83a 	sub	r18,r3,r8
100081d0:	9081002c 	andhi	r2,r18,1024
100081d4:	10002926 	beq	r2,zero,1000827c <__subsf3+0x2f0>
100081d8:	40e5c83a 	sub	r18,r8,r3
100081dc:	3023883a 	mov	r17,r6
100081e0:	003faf06 	br	100080a0 <__alt_data_end+0xf80080a0>
100081e4:	017fffc4 	movi	r5,-1
100081e8:	0009883a 	mov	r4,zero
100081ec:	003f9106 	br	10008034 <__alt_data_end+0xf8008034>
100081f0:	00ff0034 	movhi	r3,64512
100081f4:	18ffffc4 	addi	r3,r3,-1
100081f8:	80a1c83a 	sub	r16,r16,r2
100081fc:	90c6703a 	and	r3,r18,r3
10008200:	003f7e06 	br	10007ffc <__alt_data_end+0xf8007ffc>
10008204:	01000804 	movi	r4,32
10008208:	2089c83a 	sub	r4,r4,r2
1000820c:	4108983a 	sll	r4,r8,r4
10008210:	4090d83a 	srl	r8,r8,r2
10008214:	2004c03a 	cmpne	r2,r4,zero
10008218:	1210b03a 	or	r8,r2,r8
1000821c:	003f9a06 	br	10008088 <__alt_data_end+0xf8008088>
10008220:	2000421e 	bne	r4,zero,1000832c <__subsf3+0x3a0>
10008224:	81000044 	addi	r4,r16,1
10008228:	21803fcc 	andi	r6,r4,255
1000822c:	01400044 	movi	r5,1
10008230:	29802a0e 	bge	r5,r6,100082dc <__subsf3+0x350>
10008234:	01403fc4 	movi	r5,255
10008238:	21403926 	beq	r4,r5,10008320 <__subsf3+0x394>
1000823c:	40c7883a 	add	r3,r8,r3
10008240:	1806d07a 	srli	r3,r3,1
10008244:	2021883a 	mov	r16,r4
10008248:	003f6c06 	br	10007ffc <__alt_data_end+0xf8007ffc>
1000824c:	80001726 	beq	r16,zero,100082ac <__subsf3+0x320>
10008250:	01003fc4 	movi	r4,255
10008254:	39001a26 	beq	r7,r4,100082c0 <__subsf3+0x334>
10008258:	0085c83a 	sub	r2,zero,r2
1000825c:	18c10034 	orhi	r3,r3,1024
10008260:	010006c4 	movi	r4,27
10008264:	2080430e 	bge	r4,r2,10008374 <__subsf3+0x3e8>
10008268:	00c00044 	movi	r3,1
1000826c:	40c7c83a 	sub	r3,r8,r3
10008270:	3821883a 	mov	r16,r7
10008274:	3023883a 	mov	r17,r6
10008278:	003f8406 	br	1000808c <__alt_data_end+0xf800808c>
1000827c:	903f881e 	bne	r18,zero,100080a0 <__alt_data_end+0xf80080a0>
10008280:	0007883a 	mov	r3,zero
10008284:	0005883a 	mov	r2,zero
10008288:	0021883a 	mov	r16,zero
1000828c:	003f9806 	br	100080f0 <__alt_data_end+0xf80080f0>
10008290:	01400804 	movi	r5,32
10008294:	290bc83a 	sub	r5,r5,r4
10008298:	414a983a 	sll	r5,r8,r5
1000829c:	4110d83a 	srl	r8,r8,r4
100082a0:	2808c03a 	cmpne	r4,r5,zero
100082a4:	2208b03a 	or	r4,r4,r8
100082a8:	003fa206 	br	10008134 <__alt_data_end+0xf8008134>
100082ac:	18000426 	beq	r3,zero,100082c0 <__subsf3+0x334>
100082b0:	0084303a 	nor	r2,zero,r2
100082b4:	103fed26 	beq	r2,zero,1000826c <__alt_data_end+0xf800826c>
100082b8:	01003fc4 	movi	r4,255
100082bc:	393fe81e 	bne	r7,r4,10008260 <__alt_data_end+0xf8008260>
100082c0:	4007883a 	mov	r3,r8
100082c4:	3821883a 	mov	r16,r7
100082c8:	3023883a 	mov	r17,r6
100082cc:	003f4b06 	br	10007ffc <__alt_data_end+0xf8007ffc>
100082d0:	01403fc4 	movi	r5,255
100082d4:	817f941e 	bne	r16,r5,10008128 <__alt_data_end+0xf8008128>
100082d8:	003f4806 	br	10007ffc <__alt_data_end+0xf8007ffc>
100082dc:	8000471e 	bne	r16,zero,100083fc <__subsf3+0x470>
100082e0:	18006126 	beq	r3,zero,10008468 <__subsf3+0x4dc>
100082e4:	403f4526 	beq	r8,zero,10007ffc <__alt_data_end+0xf8007ffc>
100082e8:	1a07883a 	add	r3,r3,r8
100082ec:	1881002c 	andhi	r2,r3,1024
100082f0:	103f7c26 	beq	r2,zero,100080e4 <__alt_data_end+0xf80080e4>
100082f4:	00bf0034 	movhi	r2,64512
100082f8:	10bfffc4 	addi	r2,r2,-1
100082fc:	2821883a 	mov	r16,r5
10008300:	1886703a 	and	r3,r3,r2
10008304:	003f3d06 	br	10007ffc <__alt_data_end+0xf8007ffc>
10008308:	8000141e 	bne	r16,zero,1000835c <__subsf3+0x3d0>
1000830c:	1800311e 	bne	r3,zero,100083d4 <__subsf3+0x448>
10008310:	40004626 	beq	r8,zero,1000842c <__subsf3+0x4a0>
10008314:	4007883a 	mov	r3,r8
10008318:	3023883a 	mov	r17,r6
1000831c:	003f3706 	br	10007ffc <__alt_data_end+0xf8007ffc>
10008320:	2021883a 	mov	r16,r4
10008324:	0007883a 	mov	r3,zero
10008328:	003f7106 	br	100080f0 <__alt_data_end+0xf80080f0>
1000832c:	8000181e 	bne	r16,zero,10008390 <__subsf3+0x404>
10008330:	18002f26 	beq	r3,zero,100083f0 <__subsf3+0x464>
10008334:	0108303a 	nor	r4,zero,r4
10008338:	20000526 	beq	r4,zero,10008350 <__subsf3+0x3c4>
1000833c:	01403fc4 	movi	r5,255
10008340:	39402b26 	beq	r7,r5,100083f0 <__subsf3+0x464>
10008344:	014006c4 	movi	r5,27
10008348:	2900400e 	bge	r5,r4,1000844c <__subsf3+0x4c0>
1000834c:	00c00044 	movi	r3,1
10008350:	1a07883a 	add	r3,r3,r8
10008354:	3821883a 	mov	r16,r7
10008358:	003f7706 	br	10008138 <__alt_data_end+0xf8008138>
1000835c:	1800111e 	bne	r3,zero,100083a4 <__subsf3+0x418>
10008360:	40003526 	beq	r8,zero,10008438 <__subsf3+0x4ac>
10008364:	4007883a 	mov	r3,r8
10008368:	3023883a 	mov	r17,r6
1000836c:	04003fc4 	movi	r16,255
10008370:	003f2206 	br	10007ffc <__alt_data_end+0xf8007ffc>
10008374:	01000804 	movi	r4,32
10008378:	2089c83a 	sub	r4,r4,r2
1000837c:	1908983a 	sll	r4,r3,r4
10008380:	1884d83a 	srl	r2,r3,r2
10008384:	2006c03a 	cmpne	r3,r4,zero
10008388:	1886b03a 	or	r3,r3,r2
1000838c:	003fb706 	br	1000826c <__alt_data_end+0xf800826c>
10008390:	01403fc4 	movi	r5,255
10008394:	39401626 	beq	r7,r5,100083f0 <__subsf3+0x464>
10008398:	0109c83a 	sub	r4,zero,r4
1000839c:	18c10034 	orhi	r3,r3,1024
100083a0:	003fe806 	br	10008344 <__alt_data_end+0xf8008344>
100083a4:	40001f26 	beq	r8,zero,10008424 <__subsf3+0x498>
100083a8:	1806d0fa 	srli	r3,r3,3
100083ac:	1880102c 	andhi	r2,r3,64
100083b0:	10000526 	beq	r2,zero,100083c8 <__subsf3+0x43c>
100083b4:	4010d0fa 	srli	r8,r8,3
100083b8:	4080102c 	andhi	r2,r8,64
100083bc:	1000021e 	bne	r2,zero,100083c8 <__subsf3+0x43c>
100083c0:	4007883a 	mov	r3,r8
100083c4:	3023883a 	mov	r17,r6
100083c8:	180690fa 	slli	r3,r3,3
100083cc:	04003fc4 	movi	r16,255
100083d0:	003f0a06 	br	10007ffc <__alt_data_end+0xf8007ffc>
100083d4:	403f0926 	beq	r8,zero,10007ffc <__alt_data_end+0xf8007ffc>
100083d8:	1a05c83a 	sub	r2,r3,r8
100083dc:	1101002c 	andhi	r4,r2,1024
100083e0:	203f3e26 	beq	r4,zero,100080dc <__alt_data_end+0xf80080dc>
100083e4:	40c7c83a 	sub	r3,r8,r3
100083e8:	3023883a 	mov	r17,r6
100083ec:	003f0306 	br	10007ffc <__alt_data_end+0xf8007ffc>
100083f0:	4007883a 	mov	r3,r8
100083f4:	3821883a 	mov	r16,r7
100083f8:	003f0006 	br	10007ffc <__alt_data_end+0xf8007ffc>
100083fc:	18001c26 	beq	r3,zero,10008470 <__subsf3+0x4e4>
10008400:	40000826 	beq	r8,zero,10008424 <__subsf3+0x498>
10008404:	1806d0fa 	srli	r3,r3,3
10008408:	1880102c 	andhi	r2,r3,64
1000840c:	103fee26 	beq	r2,zero,100083c8 <__alt_data_end+0xf80083c8>
10008410:	4010d0fa 	srli	r8,r8,3
10008414:	4080102c 	andhi	r2,r8,64
10008418:	103feb1e 	bne	r2,zero,100083c8 <__alt_data_end+0xf80083c8>
1000841c:	4007883a 	mov	r3,r8
10008420:	003fe906 	br	100083c8 <__alt_data_end+0xf80083c8>
10008424:	04003fc4 	movi	r16,255
10008428:	003ef406 	br	10007ffc <__alt_data_end+0xf8007ffc>
1000842c:	8007883a 	mov	r3,r16
10008430:	0005883a 	mov	r2,zero
10008434:	003f2e06 	br	100080f0 <__alt_data_end+0xf80080f0>
10008438:	00c10034 	movhi	r3,1024
1000843c:	0005883a 	mov	r2,zero
10008440:	18fffe04 	addi	r3,r3,-8
10008444:	04003fc4 	movi	r16,255
10008448:	003f2906 	br	100080f0 <__alt_data_end+0xf80080f0>
1000844c:	01400804 	movi	r5,32
10008450:	290bc83a 	sub	r5,r5,r4
10008454:	194a983a 	sll	r5,r3,r5
10008458:	1908d83a 	srl	r4,r3,r4
1000845c:	2806c03a 	cmpne	r3,r5,zero
10008460:	1906b03a 	or	r3,r3,r4
10008464:	003fba06 	br	10008350 <__alt_data_end+0xf8008350>
10008468:	4007883a 	mov	r3,r8
1000846c:	003ee306 	br	10007ffc <__alt_data_end+0xf8007ffc>
10008470:	4007883a 	mov	r3,r8
10008474:	04003fc4 	movi	r16,255
10008478:	003ee006 	br	10007ffc <__alt_data_end+0xf8007ffc>
1000847c:	0007883a 	mov	r3,zero
10008480:	0005883a 	mov	r2,zero
10008484:	003f1a06 	br	100080f0 <__alt_data_end+0xf80080f0>

10008488 <__fixsfsi>:
10008488:	2006d5fa 	srli	r3,r4,23
1000848c:	00802034 	movhi	r2,128
10008490:	10bfffc4 	addi	r2,r2,-1
10008494:	18c03fcc 	andi	r3,r3,255
10008498:	01401f84 	movi	r5,126
1000849c:	1104703a 	and	r2,r2,r4
100084a0:	2008d7fa 	srli	r4,r4,31
100084a4:	28c0110e 	bge	r5,r3,100084ec <__fixsfsi+0x64>
100084a8:	01402744 	movi	r5,157
100084ac:	28c00b16 	blt	r5,r3,100084dc <__fixsfsi+0x54>
100084b0:	01402544 	movi	r5,149
100084b4:	10802034 	orhi	r2,r2,128
100084b8:	28c00e16 	blt	r5,r3,100084f4 <__fixsfsi+0x6c>
100084bc:	01402584 	movi	r5,150
100084c0:	28c7c83a 	sub	r3,r5,r3
100084c4:	10c6d83a 	srl	r3,r2,r3
100084c8:	21003fcc 	andi	r4,r4,255
100084cc:	0105c83a 	sub	r2,zero,r4
100084d0:	1886f03a 	xor	r3,r3,r2
100084d4:	1905883a 	add	r2,r3,r4
100084d8:	f800283a 	ret
100084dc:	00a00034 	movhi	r2,32768
100084e0:	10bfffc4 	addi	r2,r2,-1
100084e4:	2085883a 	add	r2,r4,r2
100084e8:	f800283a 	ret
100084ec:	0005883a 	mov	r2,zero
100084f0:	f800283a 	ret
100084f4:	18ffda84 	addi	r3,r3,-150
100084f8:	10c6983a 	sll	r3,r2,r3
100084fc:	003ff206 	br	100084c8 <__alt_data_end+0xf80084c8>

10008500 <__floatsisf>:
10008500:	defffd04 	addi	sp,sp,-12
10008504:	dc000015 	stw	r16,0(sp)
10008508:	dfc00215 	stw	ra,8(sp)
1000850c:	dc400115 	stw	r17,4(sp)
10008510:	2021883a 	mov	r16,r4
10008514:	20003a26 	beq	r4,zero,10008600 <__floatsisf+0x100>
10008518:	2022d7fa 	srli	r17,r4,31
1000851c:	88000126 	beq	r17,zero,10008524 <__floatsisf+0x24>
10008520:	0121c83a 	sub	r16,zero,r4
10008524:	8009883a 	mov	r4,r16
10008528:	0009a180 	call	10009a18 <__clzsi2>
1000852c:	00c02784 	movi	r3,158
10008530:	1887c83a 	sub	r3,r3,r2
10008534:	01802584 	movi	r6,150
10008538:	800b883a 	mov	r5,r16
1000853c:	30c01616 	blt	r6,r3,10008598 <__floatsisf+0x98>
10008540:	01000204 	movi	r4,8
10008544:	2080020e 	bge	r4,r2,10008550 <__floatsisf+0x50>
10008548:	10bffe04 	addi	r2,r2,-8
1000854c:	80a0983a 	sll	r16,r16,r2
10008550:	00802034 	movhi	r2,128
10008554:	10bfffc4 	addi	r2,r2,-1
10008558:	8809883a 	mov	r4,r17
1000855c:	80a0703a 	and	r16,r16,r2
10008560:	18803fcc 	andi	r2,r3,255
10008564:	100695fa 	slli	r3,r2,23
10008568:	20803fcc 	andi	r2,r4,255
1000856c:	100897fa 	slli	r4,r2,31
10008570:	00802034 	movhi	r2,128
10008574:	10bfffc4 	addi	r2,r2,-1
10008578:	8084703a 	and	r2,r16,r2
1000857c:	10c4b03a 	or	r2,r2,r3
10008580:	1104b03a 	or	r2,r2,r4
10008584:	dfc00217 	ldw	ra,8(sp)
10008588:	dc400117 	ldw	r17,4(sp)
1000858c:	dc000017 	ldw	r16,0(sp)
10008590:	dec00304 	addi	sp,sp,12
10008594:	f800283a 	ret
10008598:	01002644 	movi	r4,153
1000859c:	20c01c16 	blt	r4,r3,10008610 <__floatsisf+0x110>
100085a0:	01000144 	movi	r4,5
100085a4:	2080020e 	bge	r4,r2,100085b0 <__floatsisf+0xb0>
100085a8:	113ffec4 	addi	r4,r2,-5
100085ac:	290a983a 	sll	r5,r5,r4
100085b0:	043f0034 	movhi	r16,64512
100085b4:	843fffc4 	addi	r16,r16,-1
100085b8:	298001cc 	andi	r6,r5,7
100085bc:	2c20703a 	and	r16,r5,r16
100085c0:	30000426 	beq	r6,zero,100085d4 <__floatsisf+0xd4>
100085c4:	294003cc 	andi	r5,r5,15
100085c8:	01000104 	movi	r4,4
100085cc:	29000126 	beq	r5,r4,100085d4 <__floatsisf+0xd4>
100085d0:	8121883a 	add	r16,r16,r4
100085d4:	8101002c 	andhi	r4,r16,1024
100085d8:	20000526 	beq	r4,zero,100085f0 <__floatsisf+0xf0>
100085dc:	00c027c4 	movi	r3,159
100085e0:	1887c83a 	sub	r3,r3,r2
100085e4:	00bf0034 	movhi	r2,64512
100085e8:	10bfffc4 	addi	r2,r2,-1
100085ec:	80a0703a 	and	r16,r16,r2
100085f0:	802091ba 	slli	r16,r16,6
100085f4:	8809883a 	mov	r4,r17
100085f8:	8020d27a 	srli	r16,r16,9
100085fc:	003fd806 	br	10008560 <__alt_data_end+0xf8008560>
10008600:	0009883a 	mov	r4,zero
10008604:	0007883a 	mov	r3,zero
10008608:	0021883a 	mov	r16,zero
1000860c:	003fd406 	br	10008560 <__alt_data_end+0xf8008560>
10008610:	01800144 	movi	r6,5
10008614:	110006c4 	addi	r4,r2,27
10008618:	8108983a 	sll	r4,r16,r4
1000861c:	308fc83a 	sub	r7,r6,r2
10008620:	81cad83a 	srl	r5,r16,r7
10008624:	2008c03a 	cmpne	r4,r4,zero
10008628:	214ab03a 	or	r5,r4,r5
1000862c:	30bfe00e 	bge	r6,r2,100085b0 <__alt_data_end+0xf80085b0>
10008630:	003fdd06 	br	100085a8 <__alt_data_end+0xf80085a8>

10008634 <__muldf3>:
10008634:	deffee04 	addi	sp,sp,-72
10008638:	dd000c15 	stw	r20,48(sp)
1000863c:	2828d53a 	srli	r20,r5,20
10008640:	dd400d15 	stw	r21,52(sp)
10008644:	282ad7fa 	srli	r21,r5,31
10008648:	dc000815 	stw	r16,32(sp)
1000864c:	04000434 	movhi	r16,16
10008650:	ddc00f15 	stw	r23,60(sp)
10008654:	dcc00b15 	stw	r19,44(sp)
10008658:	dc800a15 	stw	r18,40(sp)
1000865c:	843fffc4 	addi	r16,r16,-1
10008660:	dfc01115 	stw	ra,68(sp)
10008664:	df001015 	stw	fp,64(sp)
10008668:	dd800e15 	stw	r22,56(sp)
1000866c:	dc400915 	stw	r17,36(sp)
10008670:	a501ffcc 	andi	r20,r20,2047
10008674:	2025883a 	mov	r18,r4
10008678:	202f883a 	mov	r23,r4
1000867c:	2c20703a 	and	r16,r5,r16
10008680:	a827883a 	mov	r19,r21
10008684:	aa403fcc 	andi	r9,r21,255
10008688:	a0005926 	beq	r20,zero,100087f0 <__muldf3+0x1bc>
1000868c:	0081ffc4 	movi	r2,2047
10008690:	a0803426 	beq	r20,r2,10008764 <__muldf3+0x130>
10008694:	84000434 	orhi	r16,r16,16
10008698:	2004d77a 	srli	r2,r4,29
1000869c:	802090fa 	slli	r16,r16,3
100086a0:	202e90fa 	slli	r23,r4,3
100086a4:	a53f0044 	addi	r20,r20,-1023
100086a8:	80a0b03a 	or	r16,r16,r2
100086ac:	000b883a 	mov	r5,zero
100086b0:	0039883a 	mov	fp,zero
100086b4:	3806d53a 	srli	r3,r7,20
100086b8:	382cd7fa 	srli	r22,r7,31
100086bc:	00800434 	movhi	r2,16
100086c0:	10bfffc4 	addi	r2,r2,-1
100086c4:	18c1ffcc 	andi	r3,r3,2047
100086c8:	3025883a 	mov	r18,r6
100086cc:	38a2703a 	and	r17,r7,r2
100086d0:	b2803fcc 	andi	r10,r22,255
100086d4:	18006426 	beq	r3,zero,10008868 <__muldf3+0x234>
100086d8:	0081ffc4 	movi	r2,2047
100086dc:	18805c26 	beq	r3,r2,10008850 <__muldf3+0x21c>
100086e0:	8c400434 	orhi	r17,r17,16
100086e4:	3004d77a 	srli	r2,r6,29
100086e8:	882290fa 	slli	r17,r17,3
100086ec:	302490fa 	slli	r18,r6,3
100086f0:	18ff0044 	addi	r3,r3,-1023
100086f4:	88a2b03a 	or	r17,r17,r2
100086f8:	000f883a 	mov	r7,zero
100086fc:	394ab03a 	or	r5,r7,r5
10008700:	280a90ba 	slli	r5,r5,2
10008704:	00840074 	movhi	r2,4097
10008708:	10a1c904 	addi	r2,r2,-30940
1000870c:	288b883a 	add	r5,r5,r2
10008710:	28800017 	ldw	r2,0(r5)
10008714:	a0c7883a 	add	r3,r20,r3
10008718:	b54cf03a 	xor	r6,r22,r21
1000871c:	1a000044 	addi	r8,r3,1
10008720:	1000683a 	jmp	r2
10008724:	10008968 	cmpgeui	zero,r2,549
10008728:	10008954 	ori	zero,r2,549
1000872c:	10008954 	ori	zero,r2,549
10008730:	10008940 	call	11000894 <_gp+0xfdce70>
10008734:	10008780 	call	11000878 <_gp+0xfdce54>
10008738:	10008780 	call	11000878 <_gp+0xfdce54>
1000873c:	10008928 	cmpgeui	zero,r2,548
10008740:	10008940 	call	11000894 <_gp+0xfdce70>
10008744:	10008780 	call	11000878 <_gp+0xfdce54>
10008748:	10008928 	cmpgeui	zero,r2,548
1000874c:	10008780 	call	11000878 <_gp+0xfdce54>
10008750:	10008940 	call	11000894 <_gp+0xfdce70>
10008754:	10008784 	addi	zero,r2,542
10008758:	10008784 	addi	zero,r2,542
1000875c:	10008784 	addi	zero,r2,542
10008760:	10008ca4 	muli	zero,r2,562
10008764:	8104b03a 	or	r2,r16,r4
10008768:	10006c1e 	bne	r2,zero,1000891c <__muldf3+0x2e8>
1000876c:	01400204 	movi	r5,8
10008770:	0021883a 	mov	r16,zero
10008774:	002f883a 	mov	r23,zero
10008778:	07000084 	movi	fp,2
1000877c:	003fcd06 	br	100086b4 <__alt_data_end+0xf80086b4>
10008780:	3013883a 	mov	r9,r6
10008784:	00800084 	movi	r2,2
10008788:	e080501e 	bne	fp,r2,100088cc <__muldf3+0x298>
1000878c:	4cc0004c 	andi	r19,r9,1
10008790:	0101ffc4 	movi	r4,2047
10008794:	0021883a 	mov	r16,zero
10008798:	002f883a 	mov	r23,zero
1000879c:	2008953a 	slli	r4,r4,20
100087a0:	98c03fcc 	andi	r3,r19,255
100087a4:	04400434 	movhi	r17,16
100087a8:	8c7fffc4 	addi	r17,r17,-1
100087ac:	180697fa 	slli	r3,r3,31
100087b0:	8460703a 	and	r16,r16,r17
100087b4:	8120b03a 	or	r16,r16,r4
100087b8:	80c6b03a 	or	r3,r16,r3
100087bc:	b805883a 	mov	r2,r23
100087c0:	dfc01117 	ldw	ra,68(sp)
100087c4:	df001017 	ldw	fp,64(sp)
100087c8:	ddc00f17 	ldw	r23,60(sp)
100087cc:	dd800e17 	ldw	r22,56(sp)
100087d0:	dd400d17 	ldw	r21,52(sp)
100087d4:	dd000c17 	ldw	r20,48(sp)
100087d8:	dcc00b17 	ldw	r19,44(sp)
100087dc:	dc800a17 	ldw	r18,40(sp)
100087e0:	dc400917 	ldw	r17,36(sp)
100087e4:	dc000817 	ldw	r16,32(sp)
100087e8:	dec01204 	addi	sp,sp,72
100087ec:	f800283a 	ret
100087f0:	8104b03a 	or	r2,r16,r4
100087f4:	10004426 	beq	r2,zero,10008908 <__muldf3+0x2d4>
100087f8:	80014b26 	beq	r16,zero,10008d28 <__muldf3+0x6f4>
100087fc:	8009883a 	mov	r4,r16
10008800:	d9800715 	stw	r6,28(sp)
10008804:	d9c00215 	stw	r7,8(sp)
10008808:	da400415 	stw	r9,16(sp)
1000880c:	0009a180 	call	10009a18 <__clzsi2>
10008810:	d9800717 	ldw	r6,28(sp)
10008814:	d9c00217 	ldw	r7,8(sp)
10008818:	da400417 	ldw	r9,16(sp)
1000881c:	1007883a 	mov	r3,r2
10008820:	01000a04 	movi	r4,40
10008824:	1dfffe04 	addi	r23,r3,-8
10008828:	20c9c83a 	sub	r4,r4,r3
1000882c:	85e0983a 	sll	r16,r16,r23
10008830:	9108d83a 	srl	r4,r18,r4
10008834:	95ee983a 	sll	r23,r18,r23
10008838:	2420b03a 	or	r16,r4,r16
1000883c:	053f0344 	movi	r20,-1011
10008840:	a0e9c83a 	sub	r20,r20,r3
10008844:	000b883a 	mov	r5,zero
10008848:	0039883a 	mov	fp,zero
1000884c:	003f9906 	br	100086b4 <__alt_data_end+0xf80086b4>
10008850:	8984b03a 	or	r2,r17,r6
10008854:	10002a1e 	bne	r2,zero,10008900 <__muldf3+0x2cc>
10008858:	0023883a 	mov	r17,zero
1000885c:	0025883a 	mov	r18,zero
10008860:	01c00084 	movi	r7,2
10008864:	003fa506 	br	100086fc <__alt_data_end+0xf80086fc>
10008868:	8984b03a 	or	r2,r17,r6
1000886c:	10002026 	beq	r2,zero,100088f0 <__muldf3+0x2bc>
10008870:	88011c26 	beq	r17,zero,10008ce4 <__muldf3+0x6b0>
10008874:	8809883a 	mov	r4,r17
10008878:	d9400215 	stw	r5,8(sp)
1000887c:	d9800715 	stw	r6,28(sp)
10008880:	da400415 	stw	r9,16(sp)
10008884:	da800315 	stw	r10,12(sp)
10008888:	0009a180 	call	10009a18 <__clzsi2>
1000888c:	d9400217 	ldw	r5,8(sp)
10008890:	d9800717 	ldw	r6,28(sp)
10008894:	da400417 	ldw	r9,16(sp)
10008898:	da800317 	ldw	r10,12(sp)
1000889c:	1007883a 	mov	r3,r2
100088a0:	01000a04 	movi	r4,40
100088a4:	1cbffe04 	addi	r18,r3,-8
100088a8:	20c9c83a 	sub	r4,r4,r3
100088ac:	8ca2983a 	sll	r17,r17,r18
100088b0:	3108d83a 	srl	r4,r6,r4
100088b4:	34a4983a 	sll	r18,r6,r18
100088b8:	2462b03a 	or	r17,r4,r17
100088bc:	00bf0344 	movi	r2,-1011
100088c0:	10c7c83a 	sub	r3,r2,r3
100088c4:	000f883a 	mov	r7,zero
100088c8:	003f8c06 	br	100086fc <__alt_data_end+0xf80086fc>
100088cc:	008000c4 	movi	r2,3
100088d0:	e0816d26 	beq	fp,r2,10008e88 <__muldf3+0x854>
100088d4:	00800044 	movi	r2,1
100088d8:	e081321e 	bne	fp,r2,10008da4 <__muldf3+0x770>
100088dc:	48a6703a 	and	r19,r9,r2
100088e0:	0009883a 	mov	r4,zero
100088e4:	0021883a 	mov	r16,zero
100088e8:	002f883a 	mov	r23,zero
100088ec:	003fab06 	br	1000879c <__alt_data_end+0xf800879c>
100088f0:	0023883a 	mov	r17,zero
100088f4:	0025883a 	mov	r18,zero
100088f8:	01c00044 	movi	r7,1
100088fc:	003f7f06 	br	100086fc <__alt_data_end+0xf80086fc>
10008900:	01c000c4 	movi	r7,3
10008904:	003f7d06 	br	100086fc <__alt_data_end+0xf80086fc>
10008908:	01400104 	movi	r5,4
1000890c:	0021883a 	mov	r16,zero
10008910:	002f883a 	mov	r23,zero
10008914:	07000044 	movi	fp,1
10008918:	003f6606 	br	100086b4 <__alt_data_end+0xf80086b4>
1000891c:	01400304 	movi	r5,12
10008920:	070000c4 	movi	fp,3
10008924:	003f6306 	br	100086b4 <__alt_data_end+0xf80086b4>
10008928:	04000434 	movhi	r16,16
1000892c:	0027883a 	mov	r19,zero
10008930:	843fffc4 	addi	r16,r16,-1
10008934:	05ffffc4 	movi	r23,-1
10008938:	0101ffc4 	movi	r4,2047
1000893c:	003f9706 	br	1000879c <__alt_data_end+0xf800879c>
10008940:	8821883a 	mov	r16,r17
10008944:	902f883a 	mov	r23,r18
10008948:	5013883a 	mov	r9,r10
1000894c:	3839883a 	mov	fp,r7
10008950:	003f8c06 	br	10008784 <__alt_data_end+0xf8008784>
10008954:	8821883a 	mov	r16,r17
10008958:	902f883a 	mov	r23,r18
1000895c:	3013883a 	mov	r9,r6
10008960:	3839883a 	mov	fp,r7
10008964:	003f8706 	br	10008784 <__alt_data_end+0xf8008784>
10008968:	b82ad43a 	srli	r21,r23,16
1000896c:	9038d43a 	srli	fp,r18,16
10008970:	bdffffcc 	andi	r23,r23,65535
10008974:	94bfffcc 	andi	r18,r18,65535
10008978:	9009883a 	mov	r4,r18
1000897c:	b80b883a 	mov	r5,r23
10008980:	d8c00515 	stw	r3,20(sp)
10008984:	d9800715 	stw	r6,28(sp)
10008988:	da000615 	stw	r8,24(sp)
1000898c:	00074c40 	call	100074c4 <__mulsi3>
10008990:	9009883a 	mov	r4,r18
10008994:	a80b883a 	mov	r5,r21
10008998:	1029883a 	mov	r20,r2
1000899c:	00074c40 	call	100074c4 <__mulsi3>
100089a0:	e009883a 	mov	r4,fp
100089a4:	a80b883a 	mov	r5,r21
100089a8:	102d883a 	mov	r22,r2
100089ac:	00074c40 	call	100074c4 <__mulsi3>
100089b0:	e009883a 	mov	r4,fp
100089b4:	b80b883a 	mov	r5,r23
100089b8:	1027883a 	mov	r19,r2
100089bc:	00074c40 	call	100074c4 <__mulsi3>
100089c0:	a008d43a 	srli	r4,r20,16
100089c4:	b085883a 	add	r2,r22,r2
100089c8:	d8c00517 	ldw	r3,20(sp)
100089cc:	110f883a 	add	r7,r2,r4
100089d0:	d9800717 	ldw	r6,28(sp)
100089d4:	da000617 	ldw	r8,24(sp)
100089d8:	3d80022e 	bgeu	r7,r22,100089e4 <__muldf3+0x3b0>
100089dc:	00800074 	movhi	r2,1
100089e0:	98a7883a 	add	r19,r19,r2
100089e4:	3804943a 	slli	r2,r7,16
100089e8:	380ed43a 	srli	r7,r7,16
100089ec:	882cd43a 	srli	r22,r17,16
100089f0:	a53fffcc 	andi	r20,r20,65535
100089f4:	8c7fffcc 	andi	r17,r17,65535
100089f8:	1529883a 	add	r20,r2,r20
100089fc:	8809883a 	mov	r4,r17
10008a00:	b80b883a 	mov	r5,r23
10008a04:	d8c00515 	stw	r3,20(sp)
10008a08:	d9800715 	stw	r6,28(sp)
10008a0c:	da000615 	stw	r8,24(sp)
10008a10:	d9c00015 	stw	r7,0(sp)
10008a14:	dd000115 	stw	r20,4(sp)
10008a18:	00074c40 	call	100074c4 <__mulsi3>
10008a1c:	a80b883a 	mov	r5,r21
10008a20:	8809883a 	mov	r4,r17
10008a24:	d8800415 	stw	r2,16(sp)
10008a28:	00074c40 	call	100074c4 <__mulsi3>
10008a2c:	a80b883a 	mov	r5,r21
10008a30:	b009883a 	mov	r4,r22
10008a34:	1029883a 	mov	r20,r2
10008a38:	00074c40 	call	100074c4 <__mulsi3>
10008a3c:	b009883a 	mov	r4,r22
10008a40:	b80b883a 	mov	r5,r23
10008a44:	102b883a 	mov	r21,r2
10008a48:	00074c40 	call	100074c4 <__mulsi3>
10008a4c:	da400417 	ldw	r9,16(sp)
10008a50:	a085883a 	add	r2,r20,r2
10008a54:	d8c00517 	ldw	r3,20(sp)
10008a58:	4808d43a 	srli	r4,r9,16
10008a5c:	d9800717 	ldw	r6,28(sp)
10008a60:	da000617 	ldw	r8,24(sp)
10008a64:	1109883a 	add	r4,r2,r4
10008a68:	2500022e 	bgeu	r4,r20,10008a74 <__muldf3+0x440>
10008a6c:	00800074 	movhi	r2,1
10008a70:	a8ab883a 	add	r21,r21,r2
10008a74:	200e943a 	slli	r7,r4,16
10008a78:	2004d43a 	srli	r2,r4,16
10008a7c:	802ed43a 	srli	r23,r16,16
10008a80:	843fffcc 	andi	r16,r16,65535
10008a84:	4d3fffcc 	andi	r20,r9,65535
10008a88:	9009883a 	mov	r4,r18
10008a8c:	800b883a 	mov	r5,r16
10008a90:	3d29883a 	add	r20,r7,r20
10008a94:	d8c00515 	stw	r3,20(sp)
10008a98:	d9800715 	stw	r6,28(sp)
10008a9c:	da000615 	stw	r8,24(sp)
10008aa0:	a8ab883a 	add	r21,r21,r2
10008aa4:	00074c40 	call	100074c4 <__mulsi3>
10008aa8:	9009883a 	mov	r4,r18
10008aac:	b80b883a 	mov	r5,r23
10008ab0:	d8800315 	stw	r2,12(sp)
10008ab4:	00074c40 	call	100074c4 <__mulsi3>
10008ab8:	e009883a 	mov	r4,fp
10008abc:	b80b883a 	mov	r5,r23
10008ac0:	1025883a 	mov	r18,r2
10008ac4:	00074c40 	call	100074c4 <__mulsi3>
10008ac8:	e009883a 	mov	r4,fp
10008acc:	800b883a 	mov	r5,r16
10008ad0:	d8800215 	stw	r2,8(sp)
10008ad4:	00074c40 	call	100074c4 <__mulsi3>
10008ad8:	da800317 	ldw	r10,12(sp)
10008adc:	d9400017 	ldw	r5,0(sp)
10008ae0:	9085883a 	add	r2,r18,r2
10008ae4:	5008d43a 	srli	r4,r10,16
10008ae8:	a153883a 	add	r9,r20,r5
10008aec:	d8c00517 	ldw	r3,20(sp)
10008af0:	1109883a 	add	r4,r2,r4
10008af4:	d9800717 	ldw	r6,28(sp)
10008af8:	da000617 	ldw	r8,24(sp)
10008afc:	dac00217 	ldw	r11,8(sp)
10008b00:	2480022e 	bgeu	r4,r18,10008b0c <__muldf3+0x4d8>
10008b04:	00800074 	movhi	r2,1
10008b08:	5897883a 	add	r11,r11,r2
10008b0c:	200e943a 	slli	r7,r4,16
10008b10:	2038d43a 	srli	fp,r4,16
10008b14:	52bfffcc 	andi	r10,r10,65535
10008b18:	3a8f883a 	add	r7,r7,r10
10008b1c:	8809883a 	mov	r4,r17
10008b20:	800b883a 	mov	r5,r16
10008b24:	d8c00515 	stw	r3,20(sp)
10008b28:	d9800715 	stw	r6,28(sp)
10008b2c:	d9c00215 	stw	r7,8(sp)
10008b30:	da000615 	stw	r8,24(sp)
10008b34:	da400415 	stw	r9,16(sp)
10008b38:	5f39883a 	add	fp,r11,fp
10008b3c:	00074c40 	call	100074c4 <__mulsi3>
10008b40:	8809883a 	mov	r4,r17
10008b44:	b80b883a 	mov	r5,r23
10008b48:	1025883a 	mov	r18,r2
10008b4c:	00074c40 	call	100074c4 <__mulsi3>
10008b50:	b009883a 	mov	r4,r22
10008b54:	b80b883a 	mov	r5,r23
10008b58:	d8800315 	stw	r2,12(sp)
10008b5c:	00074c40 	call	100074c4 <__mulsi3>
10008b60:	b009883a 	mov	r4,r22
10008b64:	800b883a 	mov	r5,r16
10008b68:	1023883a 	mov	r17,r2
10008b6c:	00074c40 	call	100074c4 <__mulsi3>
10008b70:	da800317 	ldw	r10,12(sp)
10008b74:	9008d43a 	srli	r4,r18,16
10008b78:	d8c00517 	ldw	r3,20(sp)
10008b7c:	5085883a 	add	r2,r10,r2
10008b80:	1109883a 	add	r4,r2,r4
10008b84:	d9800717 	ldw	r6,28(sp)
10008b88:	d9c00217 	ldw	r7,8(sp)
10008b8c:	da000617 	ldw	r8,24(sp)
10008b90:	da400417 	ldw	r9,16(sp)
10008b94:	2280022e 	bgeu	r4,r10,10008ba0 <__muldf3+0x56c>
10008b98:	00800074 	movhi	r2,1
10008b9c:	88a3883a 	add	r17,r17,r2
10008ba0:	2004943a 	slli	r2,r4,16
10008ba4:	94bfffcc 	andi	r18,r18,65535
10008ba8:	4ce7883a 	add	r19,r9,r19
10008bac:	14a5883a 	add	r18,r2,r18
10008bb0:	9d29803a 	cmpltu	r20,r19,r20
10008bb4:	9565883a 	add	r18,r18,r21
10008bb8:	9505883a 	add	r2,r18,r20
10008bbc:	99e7883a 	add	r19,r19,r7
10008bc0:	99cf803a 	cmpltu	r7,r19,r7
10008bc4:	e08b883a 	add	r5,fp,r2
10008bc8:	2008d43a 	srli	r4,r4,16
10008bcc:	29ef883a 	add	r23,r5,r7
10008bd0:	1529803a 	cmpltu	r20,r2,r20
10008bd4:	956b803a 	cmpltu	r21,r18,r21
10008bd8:	b9cf803a 	cmpltu	r7,r23,r7
10008bdc:	a564b03a 	or	r18,r20,r21
10008be0:	2f39803a 	cmpltu	fp,r5,fp
10008be4:	9125883a 	add	r18,r18,r4
10008be8:	3f38b03a 	or	fp,r7,fp
10008bec:	9725883a 	add	r18,r18,fp
10008bf0:	9804927a 	slli	r2,r19,9
10008bf4:	9463883a 	add	r17,r18,r17
10008bf8:	d9000117 	ldw	r4,4(sp)
10008bfc:	b820d5fa 	srli	r16,r23,23
10008c00:	8822927a 	slli	r17,r17,9
10008c04:	9826d5fa 	srli	r19,r19,23
10008c08:	1104b03a 	or	r2,r2,r4
10008c0c:	b82e927a 	slli	r23,r23,9
10008c10:	1004c03a 	cmpne	r2,r2,zero
10008c14:	8c20b03a 	or	r16,r17,r16
10008c18:	14e6b03a 	or	r19,r2,r19
10008c1c:	8080402c 	andhi	r2,r16,256
10008c20:	9deeb03a 	or	r23,r19,r23
10008c24:	10000726 	beq	r2,zero,10008c44 <__muldf3+0x610>
10008c28:	b804d07a 	srli	r2,r23,1
10008c2c:	800697fa 	slli	r3,r16,31
10008c30:	bdc0004c 	andi	r23,r23,1
10008c34:	8020d07a 	srli	r16,r16,1
10008c38:	b8aeb03a 	or	r23,r23,r2
10008c3c:	b8eeb03a 	or	r23,r23,r3
10008c40:	4007883a 	mov	r3,r8
10008c44:	1900ffc4 	addi	r4,r3,1023
10008c48:	01004d0e 	bge	zero,r4,10008d80 <__muldf3+0x74c>
10008c4c:	b88001cc 	andi	r2,r23,7
10008c50:	10000726 	beq	r2,zero,10008c70 <__muldf3+0x63c>
10008c54:	b94003cc 	andi	r5,r23,15
10008c58:	00800104 	movi	r2,4
10008c5c:	28800426 	beq	r5,r2,10008c70 <__muldf3+0x63c>
10008c60:	b885883a 	add	r2,r23,r2
10008c64:	15ef803a 	cmpltu	r23,r2,r23
10008c68:	85e1883a 	add	r16,r16,r23
10008c6c:	102f883a 	mov	r23,r2
10008c70:	8080402c 	andhi	r2,r16,256
10008c74:	10000426 	beq	r2,zero,10008c88 <__muldf3+0x654>
10008c78:	00bfc034 	movhi	r2,65280
10008c7c:	10bfffc4 	addi	r2,r2,-1
10008c80:	19010004 	addi	r4,r3,1024
10008c84:	80a0703a 	and	r16,r16,r2
10008c88:	0081ff84 	movi	r2,2046
10008c8c:	1100340e 	bge	r2,r4,10008d60 <__muldf3+0x72c>
10008c90:	34c0004c 	andi	r19,r6,1
10008c94:	0101ffc4 	movi	r4,2047
10008c98:	0021883a 	mov	r16,zero
10008c9c:	002f883a 	mov	r23,zero
10008ca0:	003ebe06 	br	1000879c <__alt_data_end+0xf800879c>
10008ca4:	8080022c 	andhi	r2,r16,8
10008ca8:	10000926 	beq	r2,zero,10008cd0 <__muldf3+0x69c>
10008cac:	8880022c 	andhi	r2,r17,8
10008cb0:	1000071e 	bne	r2,zero,10008cd0 <__muldf3+0x69c>
10008cb4:	00800434 	movhi	r2,16
10008cb8:	8c000234 	orhi	r16,r17,8
10008cbc:	10bfffc4 	addi	r2,r2,-1
10008cc0:	b027883a 	mov	r19,r22
10008cc4:	80a0703a 	and	r16,r16,r2
10008cc8:	902f883a 	mov	r23,r18
10008ccc:	003f1a06 	br	10008938 <__alt_data_end+0xf8008938>
10008cd0:	00800434 	movhi	r2,16
10008cd4:	84000234 	orhi	r16,r16,8
10008cd8:	10bfffc4 	addi	r2,r2,-1
10008cdc:	80a0703a 	and	r16,r16,r2
10008ce0:	003f1506 	br	10008938 <__alt_data_end+0xf8008938>
10008ce4:	3009883a 	mov	r4,r6
10008ce8:	d9400215 	stw	r5,8(sp)
10008cec:	d9800715 	stw	r6,28(sp)
10008cf0:	da400415 	stw	r9,16(sp)
10008cf4:	da800315 	stw	r10,12(sp)
10008cf8:	0009a180 	call	10009a18 <__clzsi2>
10008cfc:	10c00804 	addi	r3,r2,32
10008d00:	010009c4 	movi	r4,39
10008d04:	d9400217 	ldw	r5,8(sp)
10008d08:	d9800717 	ldw	r6,28(sp)
10008d0c:	da400417 	ldw	r9,16(sp)
10008d10:	da800317 	ldw	r10,12(sp)
10008d14:	20fee20e 	bge	r4,r3,100088a0 <__alt_data_end+0xf80088a0>
10008d18:	147ffe04 	addi	r17,r2,-8
10008d1c:	9462983a 	sll	r17,r18,r17
10008d20:	0025883a 	mov	r18,zero
10008d24:	003ee506 	br	100088bc <__alt_data_end+0xf80088bc>
10008d28:	d9800715 	stw	r6,28(sp)
10008d2c:	d9c00215 	stw	r7,8(sp)
10008d30:	da400415 	stw	r9,16(sp)
10008d34:	0009a180 	call	10009a18 <__clzsi2>
10008d38:	10c00804 	addi	r3,r2,32
10008d3c:	010009c4 	movi	r4,39
10008d40:	d9800717 	ldw	r6,28(sp)
10008d44:	d9c00217 	ldw	r7,8(sp)
10008d48:	da400417 	ldw	r9,16(sp)
10008d4c:	20feb40e 	bge	r4,r3,10008820 <__alt_data_end+0xf8008820>
10008d50:	143ffe04 	addi	r16,r2,-8
10008d54:	9420983a 	sll	r16,r18,r16
10008d58:	002f883a 	mov	r23,zero
10008d5c:	003eb706 	br	1000883c <__alt_data_end+0xf800883c>
10008d60:	8004977a 	slli	r2,r16,29
10008d64:	b82ed0fa 	srli	r23,r23,3
10008d68:	8020927a 	slli	r16,r16,9
10008d6c:	2101ffcc 	andi	r4,r4,2047
10008d70:	15eeb03a 	or	r23,r2,r23
10008d74:	8020d33a 	srli	r16,r16,12
10008d78:	34c0004c 	andi	r19,r6,1
10008d7c:	003e8706 	br	1000879c <__alt_data_end+0xf800879c>
10008d80:	00bf0084 	movi	r2,-1022
10008d84:	10c5c83a 	sub	r2,r2,r3
10008d88:	01000e04 	movi	r4,56
10008d8c:	2080080e 	bge	r4,r2,10008db0 <__muldf3+0x77c>
10008d90:	34c0004c 	andi	r19,r6,1
10008d94:	0009883a 	mov	r4,zero
10008d98:	0021883a 	mov	r16,zero
10008d9c:	002f883a 	mov	r23,zero
10008da0:	003e7e06 	br	1000879c <__alt_data_end+0xf800879c>
10008da4:	4007883a 	mov	r3,r8
10008da8:	480d883a 	mov	r6,r9
10008dac:	003fa506 	br	10008c44 <__alt_data_end+0xf8008c44>
10008db0:	010007c4 	movi	r4,31
10008db4:	20801816 	blt	r4,r2,10008e18 <__muldf3+0x7e4>
10008db8:	18c10784 	addi	r3,r3,1054
10008dbc:	80c8983a 	sll	r4,r16,r3
10008dc0:	b88ad83a 	srl	r5,r23,r2
10008dc4:	b8c6983a 	sll	r3,r23,r3
10008dc8:	80a0d83a 	srl	r16,r16,r2
10008dcc:	2908b03a 	or	r4,r5,r4
10008dd0:	1804c03a 	cmpne	r2,r3,zero
10008dd4:	2088b03a 	or	r4,r4,r2
10008dd8:	208001cc 	andi	r2,r4,7
10008ddc:	10000726 	beq	r2,zero,10008dfc <__muldf3+0x7c8>
10008de0:	20c003cc 	andi	r3,r4,15
10008de4:	00800104 	movi	r2,4
10008de8:	18800426 	beq	r3,r2,10008dfc <__muldf3+0x7c8>
10008dec:	20c00104 	addi	r3,r4,4
10008df0:	1905803a 	cmpltu	r2,r3,r4
10008df4:	80a1883a 	add	r16,r16,r2
10008df8:	1809883a 	mov	r4,r3
10008dfc:	8080202c 	andhi	r2,r16,128
10008e00:	10001b26 	beq	r2,zero,10008e70 <__muldf3+0x83c>
10008e04:	34c0004c 	andi	r19,r6,1
10008e08:	01000044 	movi	r4,1
10008e0c:	0021883a 	mov	r16,zero
10008e10:	002f883a 	mov	r23,zero
10008e14:	003e6106 	br	1000879c <__alt_data_end+0xf800879c>
10008e18:	013ef884 	movi	r4,-1054
10008e1c:	20c9c83a 	sub	r4,r4,r3
10008e20:	01400804 	movi	r5,32
10008e24:	8108d83a 	srl	r4,r16,r4
10008e28:	11401526 	beq	r2,r5,10008e80 <__muldf3+0x84c>
10008e2c:	18c10f84 	addi	r3,r3,1086
10008e30:	80e0983a 	sll	r16,r16,r3
10008e34:	85eeb03a 	or	r23,r16,r23
10008e38:	b804c03a 	cmpne	r2,r23,zero
10008e3c:	1108b03a 	or	r4,r2,r4
10008e40:	20c001cc 	andi	r3,r4,7
10008e44:	1800061e 	bne	r3,zero,10008e60 <__muldf3+0x82c>
10008e48:	0021883a 	mov	r16,zero
10008e4c:	202ed0fa 	srli	r23,r4,3
10008e50:	34c0004c 	andi	r19,r6,1
10008e54:	0009883a 	mov	r4,zero
10008e58:	b8eeb03a 	or	r23,r23,r3
10008e5c:	003e4f06 	br	1000879c <__alt_data_end+0xf800879c>
10008e60:	20c003cc 	andi	r3,r4,15
10008e64:	00800104 	movi	r2,4
10008e68:	0021883a 	mov	r16,zero
10008e6c:	18bfdf1e 	bne	r3,r2,10008dec <__alt_data_end+0xf8008dec>
10008e70:	8004927a 	slli	r2,r16,9
10008e74:	8006977a 	slli	r3,r16,29
10008e78:	1020d33a 	srli	r16,r2,12
10008e7c:	003ff306 	br	10008e4c <__alt_data_end+0xf8008e4c>
10008e80:	0021883a 	mov	r16,zero
10008e84:	003feb06 	br	10008e34 <__alt_data_end+0xf8008e34>
10008e88:	00800434 	movhi	r2,16
10008e8c:	84000234 	orhi	r16,r16,8
10008e90:	10bfffc4 	addi	r2,r2,-1
10008e94:	4cc0004c 	andi	r19,r9,1
10008e98:	80a0703a 	and	r16,r16,r2
10008e9c:	003ea606 	br	10008938 <__alt_data_end+0xf8008938>

10008ea0 <__subdf3>:
10008ea0:	00c00434 	movhi	r3,16
10008ea4:	18ffffc4 	addi	r3,r3,-1
10008ea8:	defffb04 	addi	sp,sp,-20
10008eac:	28d2703a 	and	r9,r5,r3
10008eb0:	3814d53a 	srli	r10,r7,20
10008eb4:	38c6703a 	and	r3,r7,r3
10008eb8:	3004d77a 	srli	r2,r6,29
10008ebc:	dc800215 	stw	r18,8(sp)
10008ec0:	dc000015 	stw	r16,0(sp)
10008ec4:	2824d7fa 	srli	r18,r5,31
10008ec8:	2820d53a 	srli	r16,r5,20
10008ecc:	481290fa 	slli	r9,r9,3
10008ed0:	200ad77a 	srli	r5,r4,29
10008ed4:	180690fa 	slli	r3,r3,3
10008ed8:	dc400115 	stw	r17,4(sp)
10008edc:	dfc00415 	stw	ra,16(sp)
10008ee0:	202290fa 	slli	r17,r4,3
10008ee4:	dcc00315 	stw	r19,12(sp)
10008ee8:	5281ffcc 	andi	r10,r10,2047
10008eec:	0101ffc4 	movi	r4,2047
10008ef0:	9011883a 	mov	r8,r18
10008ef4:	8401ffcc 	andi	r16,r16,2047
10008ef8:	94803fcc 	andi	r18,r18,255
10008efc:	494ab03a 	or	r5,r9,r5
10008f00:	380ed7fa 	srli	r7,r7,31
10008f04:	1886b03a 	or	r3,r3,r2
10008f08:	300c90fa 	slli	r6,r6,3
10008f0c:	51009026 	beq	r10,r4,10009150 <__subdf3+0x2b0>
10008f10:	39c0005c 	xori	r7,r7,1
10008f14:	8285c83a 	sub	r2,r16,r10
10008f18:	91c06f26 	beq	r18,r7,100090d8 <__subdf3+0x238>
10008f1c:	0080b10e 	bge	zero,r2,100091e4 <__subdf3+0x344>
10008f20:	50002a1e 	bne	r10,zero,10008fcc <__subdf3+0x12c>
10008f24:	1988b03a 	or	r4,r3,r6
10008f28:	2000941e 	bne	r4,zero,1000917c <__subdf3+0x2dc>
10008f2c:	888001cc 	andi	r2,r17,7
10008f30:	10005b26 	beq	r2,zero,100090a0 <__subdf3+0x200>
10008f34:	88c003cc 	andi	r3,r17,15
10008f38:	00800104 	movi	r2,4
10008f3c:	18805826 	beq	r3,r2,100090a0 <__subdf3+0x200>
10008f40:	88c00104 	addi	r3,r17,4
10008f44:	1c63803a 	cmpltu	r17,r3,r17
10008f48:	2c4b883a 	add	r5,r5,r17
10008f4c:	2880202c 	andhi	r2,r5,128
10008f50:	9200004c 	andi	r8,r18,1
10008f54:	1823883a 	mov	r17,r3
10008f58:	10005426 	beq	r2,zero,100090ac <__subdf3+0x20c>
10008f5c:	84000044 	addi	r16,r16,1
10008f60:	0081ffc4 	movi	r2,2047
10008f64:	8080bf26 	beq	r16,r2,10009264 <__subdf3+0x3c4>
10008f68:	013fe034 	movhi	r4,65408
10008f6c:	213fffc4 	addi	r4,r4,-1
10008f70:	290a703a 	and	r5,r5,r4
10008f74:	2804977a 	slli	r2,r5,29
10008f78:	280a927a 	slli	r5,r5,9
10008f7c:	8822d0fa 	srli	r17,r17,3
10008f80:	8401ffcc 	andi	r16,r16,2047
10008f84:	2808d33a 	srli	r4,r5,12
10008f88:	1444b03a 	or	r2,r2,r17
10008f8c:	8401ffcc 	andi	r16,r16,2047
10008f90:	800a953a 	slli	r5,r16,20
10008f94:	40c03fcc 	andi	r3,r8,255
10008f98:	04000434 	movhi	r16,16
10008f9c:	180697fa 	slli	r3,r3,31
10008fa0:	843fffc4 	addi	r16,r16,-1
10008fa4:	2420703a 	and	r16,r4,r16
10008fa8:	8160b03a 	or	r16,r16,r5
10008fac:	80c6b03a 	or	r3,r16,r3
10008fb0:	dfc00417 	ldw	ra,16(sp)
10008fb4:	dcc00317 	ldw	r19,12(sp)
10008fb8:	dc800217 	ldw	r18,8(sp)
10008fbc:	dc400117 	ldw	r17,4(sp)
10008fc0:	dc000017 	ldw	r16,0(sp)
10008fc4:	dec00504 	addi	sp,sp,20
10008fc8:	f800283a 	ret
10008fcc:	0101ffc4 	movi	r4,2047
10008fd0:	813fd626 	beq	r16,r4,10008f2c <__alt_data_end+0xf8008f2c>
10008fd4:	18c02034 	orhi	r3,r3,128
10008fd8:	01000e04 	movi	r4,56
10008fdc:	2080a416 	blt	r4,r2,10009270 <__subdf3+0x3d0>
10008fe0:	010007c4 	movi	r4,31
10008fe4:	2080c716 	blt	r4,r2,10009304 <__subdf3+0x464>
10008fe8:	01000804 	movi	r4,32
10008fec:	2089c83a 	sub	r4,r4,r2
10008ff0:	1910983a 	sll	r8,r3,r4
10008ff4:	308ed83a 	srl	r7,r6,r2
10008ff8:	3108983a 	sll	r4,r6,r4
10008ffc:	1884d83a 	srl	r2,r3,r2
10009000:	41ccb03a 	or	r6,r8,r7
10009004:	2008c03a 	cmpne	r4,r4,zero
10009008:	310cb03a 	or	r6,r6,r4
1000900c:	898dc83a 	sub	r6,r17,r6
10009010:	89a3803a 	cmpltu	r17,r17,r6
10009014:	288bc83a 	sub	r5,r5,r2
10009018:	2c4bc83a 	sub	r5,r5,r17
1000901c:	3023883a 	mov	r17,r6
10009020:	2880202c 	andhi	r2,r5,128
10009024:	10006b26 	beq	r2,zero,100091d4 <__subdf3+0x334>
10009028:	04c02034 	movhi	r19,128
1000902c:	9cffffc4 	addi	r19,r19,-1
10009030:	2ce6703a 	and	r19,r5,r19
10009034:	98007c26 	beq	r19,zero,10009228 <__subdf3+0x388>
10009038:	9809883a 	mov	r4,r19
1000903c:	0009a180 	call	10009a18 <__clzsi2>
10009040:	10fffe04 	addi	r3,r2,-8
10009044:	010007c4 	movi	r4,31
10009048:	20c07d16 	blt	r4,r3,10009240 <__subdf3+0x3a0>
1000904c:	01400a04 	movi	r5,40
10009050:	2885c83a 	sub	r2,r5,r2
10009054:	888ad83a 	srl	r5,r17,r2
10009058:	98e6983a 	sll	r19,r19,r3
1000905c:	88e2983a 	sll	r17,r17,r3
10009060:	2ce6b03a 	or	r19,r5,r19
10009064:	1c007a16 	blt	r3,r16,10009250 <__subdf3+0x3b0>
10009068:	1c21c83a 	sub	r16,r3,r16
1000906c:	81400044 	addi	r5,r16,1
10009070:	00c007c4 	movi	r3,31
10009074:	19409616 	blt	r3,r5,100092d0 <__subdf3+0x430>
10009078:	1c21c83a 	sub	r16,r3,r16
1000907c:	8c08983a 	sll	r4,r17,r16
10009080:	8946d83a 	srl	r3,r17,r5
10009084:	9c20983a 	sll	r16,r19,r16
10009088:	2008c03a 	cmpne	r4,r4,zero
1000908c:	994ad83a 	srl	r5,r19,r5
10009090:	1c06b03a 	or	r3,r3,r16
10009094:	1922b03a 	or	r17,r3,r4
10009098:	0021883a 	mov	r16,zero
1000909c:	003fa306 	br	10008f2c <__alt_data_end+0xf8008f2c>
100090a0:	2880202c 	andhi	r2,r5,128
100090a4:	9200004c 	andi	r8,r18,1
100090a8:	103fac1e 	bne	r2,zero,10008f5c <__alt_data_end+0xf8008f5c>
100090ac:	2804977a 	slli	r2,r5,29
100090b0:	8822d0fa 	srli	r17,r17,3
100090b4:	00c1ffc4 	movi	r3,2047
100090b8:	280ad0fa 	srli	r5,r5,3
100090bc:	1444b03a 	or	r2,r2,r17
100090c0:	80c02726 	beq	r16,r3,10009160 <__subdf3+0x2c0>
100090c4:	01000434 	movhi	r4,16
100090c8:	213fffc4 	addi	r4,r4,-1
100090cc:	80e0703a 	and	r16,r16,r3
100090d0:	2908703a 	and	r4,r5,r4
100090d4:	003fad06 	br	10008f8c <__alt_data_end+0xf8008f8c>
100090d8:	0080690e 	bge	zero,r2,10009280 <__subdf3+0x3e0>
100090dc:	50002f26 	beq	r10,zero,1000919c <__subdf3+0x2fc>
100090e0:	0101ffc4 	movi	r4,2047
100090e4:	813f9126 	beq	r16,r4,10008f2c <__alt_data_end+0xf8008f2c>
100090e8:	18c02034 	orhi	r3,r3,128
100090ec:	01000e04 	movi	r4,56
100090f0:	2080b00e 	bge	r4,r2,100093b4 <__subdf3+0x514>
100090f4:	198cb03a 	or	r6,r3,r6
100090f8:	300ec03a 	cmpne	r7,r6,zero
100090fc:	0005883a 	mov	r2,zero
10009100:	3c4f883a 	add	r7,r7,r17
10009104:	3c63803a 	cmpltu	r17,r7,r17
10009108:	114b883a 	add	r5,r2,r5
1000910c:	2c4b883a 	add	r5,r5,r17
10009110:	3823883a 	mov	r17,r7
10009114:	2880202c 	andhi	r2,r5,128
10009118:	10002e26 	beq	r2,zero,100091d4 <__subdf3+0x334>
1000911c:	84000044 	addi	r16,r16,1
10009120:	0081ffc4 	movi	r2,2047
10009124:	8080de26 	beq	r16,r2,100094a0 <__subdf3+0x600>
10009128:	00bfe034 	movhi	r2,65408
1000912c:	10bfffc4 	addi	r2,r2,-1
10009130:	288a703a 	and	r5,r5,r2
10009134:	880cd07a 	srli	r6,r17,1
10009138:	280897fa 	slli	r4,r5,31
1000913c:	88c0004c 	andi	r3,r17,1
10009140:	30e2b03a 	or	r17,r6,r3
10009144:	280ad07a 	srli	r5,r5,1
10009148:	8922b03a 	or	r17,r17,r4
1000914c:	003f7706 	br	10008f2c <__alt_data_end+0xf8008f2c>
10009150:	1984b03a 	or	r2,r3,r6
10009154:	103f6e26 	beq	r2,zero,10008f10 <__alt_data_end+0xf8008f10>
10009158:	39c03fcc 	andi	r7,r7,255
1000915c:	003f6d06 	br	10008f14 <__alt_data_end+0xf8008f14>
10009160:	1146b03a 	or	r3,r2,r5
10009164:	18003f26 	beq	r3,zero,10009264 <__subdf3+0x3c4>
10009168:	00c00434 	movhi	r3,16
1000916c:	29000234 	orhi	r4,r5,8
10009170:	18ffffc4 	addi	r3,r3,-1
10009174:	20c8703a 	and	r4,r4,r3
10009178:	003f8406 	br	10008f8c <__alt_data_end+0xf8008f8c>
1000917c:	10bfffc4 	addi	r2,r2,-1
10009180:	1000501e 	bne	r2,zero,100092c4 <__subdf3+0x424>
10009184:	898fc83a 	sub	r7,r17,r6
10009188:	89e3803a 	cmpltu	r17,r17,r7
1000918c:	28cbc83a 	sub	r5,r5,r3
10009190:	2c4bc83a 	sub	r5,r5,r17
10009194:	3823883a 	mov	r17,r7
10009198:	003fa106 	br	10009020 <__alt_data_end+0xf8009020>
1000919c:	1988b03a 	or	r4,r3,r6
100091a0:	203f6226 	beq	r4,zero,10008f2c <__alt_data_end+0xf8008f2c>
100091a4:	10bfffc4 	addi	r2,r2,-1
100091a8:	10009b1e 	bne	r2,zero,10009418 <__subdf3+0x578>
100091ac:	344d883a 	add	r6,r6,r17
100091b0:	3463803a 	cmpltu	r17,r6,r17
100091b4:	194b883a 	add	r5,r3,r5
100091b8:	2c4b883a 	add	r5,r5,r17
100091bc:	3023883a 	mov	r17,r6
100091c0:	003fd406 	br	10009114 <__alt_data_end+0xf8009114>
100091c4:	1106b03a 	or	r3,r2,r4
100091c8:	1800b426 	beq	r3,zero,1000949c <__subdf3+0x5fc>
100091cc:	100b883a 	mov	r5,r2
100091d0:	2023883a 	mov	r17,r4
100091d4:	888001cc 	andi	r2,r17,7
100091d8:	103f561e 	bne	r2,zero,10008f34 <__alt_data_end+0xf8008f34>
100091dc:	9200004c 	andi	r8,r18,1
100091e0:	003fb206 	br	100090ac <__alt_data_end+0xf80090ac>
100091e4:	1000531e 	bne	r2,zero,10009334 <__subdf3+0x494>
100091e8:	80800044 	addi	r2,r16,1
100091ec:	1081ffcc 	andi	r2,r2,2047
100091f0:	01000044 	movi	r4,1
100091f4:	2080a00e 	bge	r4,r2,10009478 <__subdf3+0x5d8>
100091f8:	8985c83a 	sub	r2,r17,r6
100091fc:	8889803a 	cmpltu	r4,r17,r2
10009200:	28e7c83a 	sub	r19,r5,r3
10009204:	9927c83a 	sub	r19,r19,r4
10009208:	9900202c 	andhi	r4,r19,128
1000920c:	20006226 	beq	r4,zero,10009398 <__subdf3+0x4f8>
10009210:	3463c83a 	sub	r17,r6,r17
10009214:	194bc83a 	sub	r5,r3,r5
10009218:	344d803a 	cmpltu	r6,r6,r17
1000921c:	29a7c83a 	sub	r19,r5,r6
10009220:	3825883a 	mov	r18,r7
10009224:	983f841e 	bne	r19,zero,10009038 <__alt_data_end+0xf8009038>
10009228:	8809883a 	mov	r4,r17
1000922c:	0009a180 	call	10009a18 <__clzsi2>
10009230:	10800804 	addi	r2,r2,32
10009234:	10fffe04 	addi	r3,r2,-8
10009238:	010007c4 	movi	r4,31
1000923c:	20ff830e 	bge	r4,r3,1000904c <__alt_data_end+0xf800904c>
10009240:	14fff604 	addi	r19,r2,-40
10009244:	8ce6983a 	sll	r19,r17,r19
10009248:	0023883a 	mov	r17,zero
1000924c:	1c3f860e 	bge	r3,r16,10009068 <__alt_data_end+0xf8009068>
10009250:	017fe034 	movhi	r5,65408
10009254:	297fffc4 	addi	r5,r5,-1
10009258:	80e1c83a 	sub	r16,r16,r3
1000925c:	994a703a 	and	r5,r19,r5
10009260:	003f3206 	br	10008f2c <__alt_data_end+0xf8008f2c>
10009264:	0009883a 	mov	r4,zero
10009268:	0005883a 	mov	r2,zero
1000926c:	003f4706 	br	10008f8c <__alt_data_end+0xf8008f8c>
10009270:	198cb03a 	or	r6,r3,r6
10009274:	300cc03a 	cmpne	r6,r6,zero
10009278:	0005883a 	mov	r2,zero
1000927c:	003f6306 	br	1000900c <__alt_data_end+0xf800900c>
10009280:	10009d1e 	bne	r2,zero,100094f8 <__subdf3+0x658>
10009284:	81c00044 	addi	r7,r16,1
10009288:	3881ffcc 	andi	r2,r7,2047
1000928c:	02400044 	movi	r9,1
10009290:	4880680e 	bge	r9,r2,10009434 <__subdf3+0x594>
10009294:	0081ffc4 	movi	r2,2047
10009298:	3880ae26 	beq	r7,r2,10009554 <__subdf3+0x6b4>
1000929c:	344d883a 	add	r6,r6,r17
100092a0:	3463803a 	cmpltu	r17,r6,r17
100092a4:	194b883a 	add	r5,r3,r5
100092a8:	2c4b883a 	add	r5,r5,r17
100092ac:	282297fa 	slli	r17,r5,31
100092b0:	300cd07a 	srli	r6,r6,1
100092b4:	280ad07a 	srli	r5,r5,1
100092b8:	3821883a 	mov	r16,r7
100092bc:	89a2b03a 	or	r17,r17,r6
100092c0:	003f1a06 	br	10008f2c <__alt_data_end+0xf8008f2c>
100092c4:	0101ffc4 	movi	r4,2047
100092c8:	813f431e 	bne	r16,r4,10008fd8 <__alt_data_end+0xf8008fd8>
100092cc:	003f1706 	br	10008f2c <__alt_data_end+0xf8008f2c>
100092d0:	80bff844 	addi	r2,r16,-31
100092d4:	00c00804 	movi	r3,32
100092d8:	9884d83a 	srl	r2,r19,r2
100092dc:	28c05126 	beq	r5,r3,10009424 <__subdf3+0x584>
100092e0:	00c00fc4 	movi	r3,63
100092e4:	1c21c83a 	sub	r16,r3,r16
100092e8:	9c26983a 	sll	r19,r19,r16
100092ec:	9c62b03a 	or	r17,r19,r17
100092f0:	8822c03a 	cmpne	r17,r17,zero
100092f4:	88a2b03a 	or	r17,r17,r2
100092f8:	000b883a 	mov	r5,zero
100092fc:	0021883a 	mov	r16,zero
10009300:	003fb406 	br	100091d4 <__alt_data_end+0xf80091d4>
10009304:	113ff804 	addi	r4,r2,-32
10009308:	01c00804 	movi	r7,32
1000930c:	1908d83a 	srl	r4,r3,r4
10009310:	11c04626 	beq	r2,r7,1000942c <__subdf3+0x58c>
10009314:	01c01004 	movi	r7,64
10009318:	3885c83a 	sub	r2,r7,r2
1000931c:	1884983a 	sll	r2,r3,r2
10009320:	118cb03a 	or	r6,r2,r6
10009324:	300cc03a 	cmpne	r6,r6,zero
10009328:	310cb03a 	or	r6,r6,r4
1000932c:	0005883a 	mov	r2,zero
10009330:	003f3606 	br	1000900c <__alt_data_end+0xf800900c>
10009334:	80002b26 	beq	r16,zero,100093e4 <__subdf3+0x544>
10009338:	0101ffc4 	movi	r4,2047
1000933c:	51006926 	beq	r10,r4,100094e4 <__subdf3+0x644>
10009340:	0085c83a 	sub	r2,zero,r2
10009344:	29402034 	orhi	r5,r5,128
10009348:	01000e04 	movi	r4,56
1000934c:	20807d16 	blt	r4,r2,10009544 <__subdf3+0x6a4>
10009350:	010007c4 	movi	r4,31
10009354:	2080d916 	blt	r4,r2,100096bc <__subdf3+0x81c>
10009358:	01000804 	movi	r4,32
1000935c:	2089c83a 	sub	r4,r4,r2
10009360:	2912983a 	sll	r9,r5,r4
10009364:	8890d83a 	srl	r8,r17,r2
10009368:	8908983a 	sll	r4,r17,r4
1000936c:	2884d83a 	srl	r2,r5,r2
10009370:	4a22b03a 	or	r17,r9,r8
10009374:	2008c03a 	cmpne	r4,r4,zero
10009378:	8922b03a 	or	r17,r17,r4
1000937c:	3463c83a 	sub	r17,r6,r17
10009380:	1885c83a 	sub	r2,r3,r2
10009384:	344d803a 	cmpltu	r6,r6,r17
10009388:	118bc83a 	sub	r5,r2,r6
1000938c:	5021883a 	mov	r16,r10
10009390:	3825883a 	mov	r18,r7
10009394:	003f2206 	br	10009020 <__alt_data_end+0xf8009020>
10009398:	9886b03a 	or	r3,r19,r2
1000939c:	18001c1e 	bne	r3,zero,10009410 <__subdf3+0x570>
100093a0:	0011883a 	mov	r8,zero
100093a4:	000b883a 	mov	r5,zero
100093a8:	0023883a 	mov	r17,zero
100093ac:	0021883a 	mov	r16,zero
100093b0:	003f3e06 	br	100090ac <__alt_data_end+0xf80090ac>
100093b4:	010007c4 	movi	r4,31
100093b8:	20803c16 	blt	r4,r2,100094ac <__subdf3+0x60c>
100093bc:	01000804 	movi	r4,32
100093c0:	2089c83a 	sub	r4,r4,r2
100093c4:	1912983a 	sll	r9,r3,r4
100093c8:	308ed83a 	srl	r7,r6,r2
100093cc:	3108983a 	sll	r4,r6,r4
100093d0:	1884d83a 	srl	r2,r3,r2
100093d4:	49ceb03a 	or	r7,r9,r7
100093d8:	2008c03a 	cmpne	r4,r4,zero
100093dc:	390eb03a 	or	r7,r7,r4
100093e0:	003f4706 	br	10009100 <__alt_data_end+0xf8009100>
100093e4:	2c48b03a 	or	r4,r5,r17
100093e8:	20003e26 	beq	r4,zero,100094e4 <__subdf3+0x644>
100093ec:	0084303a 	nor	r2,zero,r2
100093f0:	10003a1e 	bne	r2,zero,100094dc <__subdf3+0x63c>
100093f4:	3463c83a 	sub	r17,r6,r17
100093f8:	194bc83a 	sub	r5,r3,r5
100093fc:	344d803a 	cmpltu	r6,r6,r17
10009400:	298bc83a 	sub	r5,r5,r6
10009404:	5021883a 	mov	r16,r10
10009408:	3825883a 	mov	r18,r7
1000940c:	003f0406 	br	10009020 <__alt_data_end+0xf8009020>
10009410:	1023883a 	mov	r17,r2
10009414:	003f0706 	br	10009034 <__alt_data_end+0xf8009034>
10009418:	0101ffc4 	movi	r4,2047
1000941c:	813f331e 	bne	r16,r4,100090ec <__alt_data_end+0xf80090ec>
10009420:	003ec206 	br	10008f2c <__alt_data_end+0xf8008f2c>
10009424:	0027883a 	mov	r19,zero
10009428:	003fb006 	br	100092ec <__alt_data_end+0xf80092ec>
1000942c:	0005883a 	mov	r2,zero
10009430:	003fbb06 	br	10009320 <__alt_data_end+0xf8009320>
10009434:	2c44b03a 	or	r2,r5,r17
10009438:	80008b1e 	bne	r16,zero,10009668 <__subdf3+0x7c8>
1000943c:	1000b526 	beq	r2,zero,10009714 <__subdf3+0x874>
10009440:	1984b03a 	or	r2,r3,r6
10009444:	103eb926 	beq	r2,zero,10008f2c <__alt_data_end+0xf8008f2c>
10009448:	3449883a 	add	r4,r6,r17
1000944c:	2463803a 	cmpltu	r17,r4,r17
10009450:	194b883a 	add	r5,r3,r5
10009454:	2c4b883a 	add	r5,r5,r17
10009458:	2880202c 	andhi	r2,r5,128
1000945c:	2023883a 	mov	r17,r4
10009460:	103f5c26 	beq	r2,zero,100091d4 <__alt_data_end+0xf80091d4>
10009464:	00bfe034 	movhi	r2,65408
10009468:	10bfffc4 	addi	r2,r2,-1
1000946c:	4821883a 	mov	r16,r9
10009470:	288a703a 	and	r5,r5,r2
10009474:	003ead06 	br	10008f2c <__alt_data_end+0xf8008f2c>
10009478:	2c44b03a 	or	r2,r5,r17
1000947c:	8000291e 	bne	r16,zero,10009524 <__subdf3+0x684>
10009480:	10004f1e 	bne	r2,zero,100095c0 <__subdf3+0x720>
10009484:	1984b03a 	or	r2,r3,r6
10009488:	10000426 	beq	r2,zero,1000949c <__subdf3+0x5fc>
1000948c:	180b883a 	mov	r5,r3
10009490:	3023883a 	mov	r17,r6
10009494:	3825883a 	mov	r18,r7
10009498:	003ea406 	br	10008f2c <__alt_data_end+0xf8008f2c>
1000949c:	0011883a 	mov	r8,zero
100094a0:	000b883a 	mov	r5,zero
100094a4:	0023883a 	mov	r17,zero
100094a8:	003f0006 	br	100090ac <__alt_data_end+0xf80090ac>
100094ac:	11fff804 	addi	r7,r2,-32
100094b0:	19c8d83a 	srl	r4,r3,r7
100094b4:	01c00804 	movi	r7,32
100094b8:	11c07e26 	beq	r2,r7,100096b4 <__subdf3+0x814>
100094bc:	01c01004 	movi	r7,64
100094c0:	3885c83a 	sub	r2,r7,r2
100094c4:	1884983a 	sll	r2,r3,r2
100094c8:	118cb03a 	or	r6,r2,r6
100094cc:	300ec03a 	cmpne	r7,r6,zero
100094d0:	390eb03a 	or	r7,r7,r4
100094d4:	0005883a 	mov	r2,zero
100094d8:	003f0906 	br	10009100 <__alt_data_end+0xf8009100>
100094dc:	0101ffc4 	movi	r4,2047
100094e0:	513f991e 	bne	r10,r4,10009348 <__alt_data_end+0xf8009348>
100094e4:	180b883a 	mov	r5,r3
100094e8:	3023883a 	mov	r17,r6
100094ec:	5021883a 	mov	r16,r10
100094f0:	3825883a 	mov	r18,r7
100094f4:	003e8d06 	br	10008f2c <__alt_data_end+0xf8008f2c>
100094f8:	80001a1e 	bne	r16,zero,10009564 <__subdf3+0x6c4>
100094fc:	2c48b03a 	or	r4,r5,r17
10009500:	20005526 	beq	r4,zero,10009658 <__subdf3+0x7b8>
10009504:	0084303a 	nor	r2,zero,r2
10009508:	1000511e 	bne	r2,zero,10009650 <__subdf3+0x7b0>
1000950c:	89a3883a 	add	r17,r17,r6
10009510:	194b883a 	add	r5,r3,r5
10009514:	898d803a 	cmpltu	r6,r17,r6
10009518:	298b883a 	add	r5,r5,r6
1000951c:	5021883a 	mov	r16,r10
10009520:	003efc06 	br	10009114 <__alt_data_end+0xf8009114>
10009524:	1000341e 	bne	r2,zero,100095f8 <__subdf3+0x758>
10009528:	1984b03a 	or	r2,r3,r6
1000952c:	10006f26 	beq	r2,zero,100096ec <__subdf3+0x84c>
10009530:	180b883a 	mov	r5,r3
10009534:	3023883a 	mov	r17,r6
10009538:	3825883a 	mov	r18,r7
1000953c:	0401ffc4 	movi	r16,2047
10009540:	003e7a06 	br	10008f2c <__alt_data_end+0xf8008f2c>
10009544:	2c62b03a 	or	r17,r5,r17
10009548:	8822c03a 	cmpne	r17,r17,zero
1000954c:	0005883a 	mov	r2,zero
10009550:	003f8a06 	br	1000937c <__alt_data_end+0xf800937c>
10009554:	3821883a 	mov	r16,r7
10009558:	000b883a 	mov	r5,zero
1000955c:	0023883a 	mov	r17,zero
10009560:	003ed206 	br	100090ac <__alt_data_end+0xf80090ac>
10009564:	0101ffc4 	movi	r4,2047
10009568:	51003b26 	beq	r10,r4,10009658 <__subdf3+0x7b8>
1000956c:	0085c83a 	sub	r2,zero,r2
10009570:	29402034 	orhi	r5,r5,128
10009574:	01000e04 	movi	r4,56
10009578:	20806216 	blt	r4,r2,10009704 <__subdf3+0x864>
1000957c:	010007c4 	movi	r4,31
10009580:	20806b16 	blt	r4,r2,10009730 <__subdf3+0x890>
10009584:	01000804 	movi	r4,32
10009588:	2089c83a 	sub	r4,r4,r2
1000958c:	2912983a 	sll	r9,r5,r4
10009590:	888ed83a 	srl	r7,r17,r2
10009594:	8908983a 	sll	r4,r17,r4
10009598:	2884d83a 	srl	r2,r5,r2
1000959c:	49e2b03a 	or	r17,r9,r7
100095a0:	2008c03a 	cmpne	r4,r4,zero
100095a4:	8922b03a 	or	r17,r17,r4
100095a8:	89a3883a 	add	r17,r17,r6
100095ac:	10c5883a 	add	r2,r2,r3
100095b0:	898d803a 	cmpltu	r6,r17,r6
100095b4:	118b883a 	add	r5,r2,r6
100095b8:	5021883a 	mov	r16,r10
100095bc:	003ed506 	br	10009114 <__alt_data_end+0xf8009114>
100095c0:	1984b03a 	or	r2,r3,r6
100095c4:	103e5926 	beq	r2,zero,10008f2c <__alt_data_end+0xf8008f2c>
100095c8:	8989c83a 	sub	r4,r17,r6
100095cc:	8911803a 	cmpltu	r8,r17,r4
100095d0:	28c5c83a 	sub	r2,r5,r3
100095d4:	1205c83a 	sub	r2,r2,r8
100095d8:	1200202c 	andhi	r8,r2,128
100095dc:	403ef926 	beq	r8,zero,100091c4 <__alt_data_end+0xf80091c4>
100095e0:	3463c83a 	sub	r17,r6,r17
100095e4:	194bc83a 	sub	r5,r3,r5
100095e8:	344d803a 	cmpltu	r6,r6,r17
100095ec:	298bc83a 	sub	r5,r5,r6
100095f0:	3825883a 	mov	r18,r7
100095f4:	003e4d06 	br	10008f2c <__alt_data_end+0xf8008f2c>
100095f8:	1984b03a 	or	r2,r3,r6
100095fc:	10002b26 	beq	r2,zero,100096ac <__subdf3+0x80c>
10009600:	2808d0fa 	srli	r4,r5,3
10009604:	8822d0fa 	srli	r17,r17,3
10009608:	280a977a 	slli	r5,r5,29
1000960c:	2080022c 	andhi	r2,r4,8
10009610:	2c62b03a 	or	r17,r5,r17
10009614:	10000826 	beq	r2,zero,10009638 <__subdf3+0x798>
10009618:	1810d0fa 	srli	r8,r3,3
1000961c:	4080022c 	andhi	r2,r8,8
10009620:	1000051e 	bne	r2,zero,10009638 <__subdf3+0x798>
10009624:	300cd0fa 	srli	r6,r6,3
10009628:	1804977a 	slli	r2,r3,29
1000962c:	4009883a 	mov	r4,r8
10009630:	3825883a 	mov	r18,r7
10009634:	11a2b03a 	or	r17,r2,r6
10009638:	880ad77a 	srli	r5,r17,29
1000963c:	200890fa 	slli	r4,r4,3
10009640:	882290fa 	slli	r17,r17,3
10009644:	0401ffc4 	movi	r16,2047
10009648:	290ab03a 	or	r5,r5,r4
1000964c:	003e3706 	br	10008f2c <__alt_data_end+0xf8008f2c>
10009650:	0101ffc4 	movi	r4,2047
10009654:	513fc71e 	bne	r10,r4,10009574 <__alt_data_end+0xf8009574>
10009658:	180b883a 	mov	r5,r3
1000965c:	3023883a 	mov	r17,r6
10009660:	5021883a 	mov	r16,r10
10009664:	003e3106 	br	10008f2c <__alt_data_end+0xf8008f2c>
10009668:	10002d26 	beq	r2,zero,10009720 <__subdf3+0x880>
1000966c:	1984b03a 	or	r2,r3,r6
10009670:	10000e26 	beq	r2,zero,100096ac <__subdf3+0x80c>
10009674:	2808d0fa 	srli	r4,r5,3
10009678:	8822d0fa 	srli	r17,r17,3
1000967c:	280a977a 	slli	r5,r5,29
10009680:	2080022c 	andhi	r2,r4,8
10009684:	2c62b03a 	or	r17,r5,r17
10009688:	103feb26 	beq	r2,zero,10009638 <__alt_data_end+0xf8009638>
1000968c:	180ed0fa 	srli	r7,r3,3
10009690:	3880022c 	andhi	r2,r7,8
10009694:	103fe81e 	bne	r2,zero,10009638 <__alt_data_end+0xf8009638>
10009698:	300cd0fa 	srli	r6,r6,3
1000969c:	1804977a 	slli	r2,r3,29
100096a0:	3809883a 	mov	r4,r7
100096a4:	11a2b03a 	or	r17,r2,r6
100096a8:	003fe306 	br	10009638 <__alt_data_end+0xf8009638>
100096ac:	0401ffc4 	movi	r16,2047
100096b0:	003e1e06 	br	10008f2c <__alt_data_end+0xf8008f2c>
100096b4:	0005883a 	mov	r2,zero
100096b8:	003f8306 	br	100094c8 <__alt_data_end+0xf80094c8>
100096bc:	113ff804 	addi	r4,r2,-32
100096c0:	02000804 	movi	r8,32
100096c4:	2908d83a 	srl	r4,r5,r4
100096c8:	12002526 	beq	r2,r8,10009760 <__subdf3+0x8c0>
100096cc:	02001004 	movi	r8,64
100096d0:	4085c83a 	sub	r2,r8,r2
100096d4:	288a983a 	sll	r5,r5,r2
100096d8:	2c62b03a 	or	r17,r5,r17
100096dc:	8822c03a 	cmpne	r17,r17,zero
100096e0:	8922b03a 	or	r17,r17,r4
100096e4:	0005883a 	mov	r2,zero
100096e8:	003f2406 	br	1000937c <__alt_data_end+0xf800937c>
100096ec:	01402034 	movhi	r5,128
100096f0:	0011883a 	mov	r8,zero
100096f4:	297fffc4 	addi	r5,r5,-1
100096f8:	047ffe04 	movi	r17,-8
100096fc:	0401ffc4 	movi	r16,2047
10009700:	003e6a06 	br	100090ac <__alt_data_end+0xf80090ac>
10009704:	2c62b03a 	or	r17,r5,r17
10009708:	8822c03a 	cmpne	r17,r17,zero
1000970c:	0005883a 	mov	r2,zero
10009710:	003fa506 	br	100095a8 <__alt_data_end+0xf80095a8>
10009714:	180b883a 	mov	r5,r3
10009718:	3023883a 	mov	r17,r6
1000971c:	003e0306 	br	10008f2c <__alt_data_end+0xf8008f2c>
10009720:	180b883a 	mov	r5,r3
10009724:	3023883a 	mov	r17,r6
10009728:	0401ffc4 	movi	r16,2047
1000972c:	003dff06 	br	10008f2c <__alt_data_end+0xf8008f2c>
10009730:	113ff804 	addi	r4,r2,-32
10009734:	01c00804 	movi	r7,32
10009738:	2908d83a 	srl	r4,r5,r4
1000973c:	11c00a26 	beq	r2,r7,10009768 <__subdf3+0x8c8>
10009740:	01c01004 	movi	r7,64
10009744:	3885c83a 	sub	r2,r7,r2
10009748:	288a983a 	sll	r5,r5,r2
1000974c:	2c62b03a 	or	r17,r5,r17
10009750:	8822c03a 	cmpne	r17,r17,zero
10009754:	8922b03a 	or	r17,r17,r4
10009758:	0005883a 	mov	r2,zero
1000975c:	003f9206 	br	100095a8 <__alt_data_end+0xf80095a8>
10009760:	000b883a 	mov	r5,zero
10009764:	003fdc06 	br	100096d8 <__alt_data_end+0xf80096d8>
10009768:	000b883a 	mov	r5,zero
1000976c:	003ff706 	br	1000974c <__alt_data_end+0xf800974c>

10009770 <__extendsfdf2>:
10009770:	200ad5fa 	srli	r5,r4,23
10009774:	defffd04 	addi	sp,sp,-12
10009778:	dc400115 	stw	r17,4(sp)
1000977c:	29403fcc 	andi	r5,r5,255
10009780:	29800044 	addi	r6,r5,1
10009784:	04402034 	movhi	r17,128
10009788:	dc000015 	stw	r16,0(sp)
1000978c:	8c7fffc4 	addi	r17,r17,-1
10009790:	dfc00215 	stw	ra,8(sp)
10009794:	31803fcc 	andi	r6,r6,255
10009798:	00800044 	movi	r2,1
1000979c:	8922703a 	and	r17,r17,r4
100097a0:	2020d7fa 	srli	r16,r4,31
100097a4:	1180110e 	bge	r2,r6,100097ec <__extendsfdf2+0x7c>
100097a8:	880ed0fa 	srli	r7,r17,3
100097ac:	8822977a 	slli	r17,r17,29
100097b0:	2940e004 	addi	r5,r5,896
100097b4:	2941ffcc 	andi	r5,r5,2047
100097b8:	280c953a 	slli	r6,r5,20
100097bc:	01400434 	movhi	r5,16
100097c0:	800697fa 	slli	r3,r16,31
100097c4:	297fffc4 	addi	r5,r5,-1
100097c8:	394a703a 	and	r5,r7,r5
100097cc:	298ab03a 	or	r5,r5,r6
100097d0:	8805883a 	mov	r2,r17
100097d4:	28c6b03a 	or	r3,r5,r3
100097d8:	dfc00217 	ldw	ra,8(sp)
100097dc:	dc400117 	ldw	r17,4(sp)
100097e0:	dc000017 	ldw	r16,0(sp)
100097e4:	dec00304 	addi	sp,sp,12
100097e8:	f800283a 	ret
100097ec:	2800111e 	bne	r5,zero,10009834 <__extendsfdf2+0xc4>
100097f0:	88001c26 	beq	r17,zero,10009864 <__extendsfdf2+0xf4>
100097f4:	8809883a 	mov	r4,r17
100097f8:	0009a180 	call	10009a18 <__clzsi2>
100097fc:	00c00284 	movi	r3,10
10009800:	18801b16 	blt	r3,r2,10009870 <__extendsfdf2+0x100>
10009804:	01c002c4 	movi	r7,11
10009808:	388fc83a 	sub	r7,r7,r2
1000980c:	10c00544 	addi	r3,r2,21
10009810:	89ced83a 	srl	r7,r17,r7
10009814:	88e2983a 	sll	r17,r17,r3
10009818:	0180e244 	movi	r6,905
1000981c:	308bc83a 	sub	r5,r6,r2
10009820:	01800434 	movhi	r6,16
10009824:	31bfffc4 	addi	r6,r6,-1
10009828:	398e703a 	and	r7,r7,r6
1000982c:	2941ffcc 	andi	r5,r5,2047
10009830:	003fe006 	br	100097b4 <__alt_data_end+0xf80097b4>
10009834:	88000826 	beq	r17,zero,10009858 <__extendsfdf2+0xe8>
10009838:	880ed0fa 	srli	r7,r17,3
1000983c:	00800434 	movhi	r2,16
10009840:	10bfffc4 	addi	r2,r2,-1
10009844:	39c00234 	orhi	r7,r7,8
10009848:	8822977a 	slli	r17,r17,29
1000984c:	388e703a 	and	r7,r7,r2
10009850:	0141ffc4 	movi	r5,2047
10009854:	003fd706 	br	100097b4 <__alt_data_end+0xf80097b4>
10009858:	0141ffc4 	movi	r5,2047
1000985c:	000f883a 	mov	r7,zero
10009860:	003fd406 	br	100097b4 <__alt_data_end+0xf80097b4>
10009864:	000b883a 	mov	r5,zero
10009868:	000f883a 	mov	r7,zero
1000986c:	003fd106 	br	100097b4 <__alt_data_end+0xf80097b4>
10009870:	11fffd44 	addi	r7,r2,-11
10009874:	89ce983a 	sll	r7,r17,r7
10009878:	0023883a 	mov	r17,zero
1000987c:	003fe606 	br	10009818 <__alt_data_end+0xf8009818>

10009880 <__truncdfsf2>:
10009880:	2810d53a 	srli	r8,r5,20
10009884:	01c00434 	movhi	r7,16
10009888:	39ffffc4 	addi	r7,r7,-1
1000988c:	29ce703a 	and	r7,r5,r7
10009890:	380e90fa 	slli	r7,r7,3
10009894:	4201ffcc 	andi	r8,r8,2047
10009898:	200cd77a 	srli	r6,r4,29
1000989c:	42400044 	addi	r9,r8,1
100098a0:	4a41ffcc 	andi	r9,r9,2047
100098a4:	00800044 	movi	r2,1
100098a8:	398cb03a 	or	r6,r7,r6
100098ac:	280ad7fa 	srli	r5,r5,31
100098b0:	200e90fa 	slli	r7,r4,3
100098b4:	1240230e 	bge	r2,r9,10009944 <__truncdfsf2+0xc4>
100098b8:	40ff2004 	addi	r3,r8,-896
100098bc:	00803f84 	movi	r2,254
100098c0:	10c01516 	blt	r2,r3,10009918 <__truncdfsf2+0x98>
100098c4:	00c02d0e 	bge	zero,r3,1000997c <__truncdfsf2+0xfc>
100098c8:	200891ba 	slli	r4,r4,6
100098cc:	300c90fa 	slli	r6,r6,3
100098d0:	380ed77a 	srli	r7,r7,29
100098d4:	2008c03a 	cmpne	r4,r4,zero
100098d8:	310cb03a 	or	r6,r6,r4
100098dc:	31ccb03a 	or	r6,r6,r7
100098e0:	308001cc 	andi	r2,r6,7
100098e4:	10000426 	beq	r2,zero,100098f8 <__truncdfsf2+0x78>
100098e8:	310003cc 	andi	r4,r6,15
100098ec:	00800104 	movi	r2,4
100098f0:	20800126 	beq	r4,r2,100098f8 <__truncdfsf2+0x78>
100098f4:	31800104 	addi	r6,r6,4
100098f8:	3081002c 	andhi	r2,r6,1024
100098fc:	10002326 	beq	r2,zero,1000998c <__truncdfsf2+0x10c>
10009900:	18c00044 	addi	r3,r3,1
10009904:	00803fc4 	movi	r2,255
10009908:	18800326 	beq	r3,r2,10009918 <__truncdfsf2+0x98>
1000990c:	300c91ba 	slli	r6,r6,6
10009910:	300cd27a 	srli	r6,r6,9
10009914:	00000206 	br	10009920 <__truncdfsf2+0xa0>
10009918:	00ffffc4 	movi	r3,-1
1000991c:	000d883a 	mov	r6,zero
10009920:	18c03fcc 	andi	r3,r3,255
10009924:	180895fa 	slli	r4,r3,23
10009928:	00c02034 	movhi	r3,128
1000992c:	280a97fa 	slli	r5,r5,31
10009930:	18ffffc4 	addi	r3,r3,-1
10009934:	30c6703a 	and	r3,r6,r3
10009938:	1906b03a 	or	r3,r3,r4
1000993c:	1944b03a 	or	r2,r3,r5
10009940:	f800283a 	ret
10009944:	4000071e 	bne	r8,zero,10009964 <__truncdfsf2+0xe4>
10009948:	31ccb03a 	or	r6,r6,r7
1000994c:	30000d1e 	bne	r6,zero,10009984 <__truncdfsf2+0x104>
10009950:	0007883a 	mov	r3,zero
10009954:	00802034 	movhi	r2,128
10009958:	10bfffc4 	addi	r2,r2,-1
1000995c:	308c703a 	and	r6,r6,r2
10009960:	003fef06 	br	10009920 <__alt_data_end+0xf8009920>
10009964:	31c8b03a 	or	r4,r6,r7
10009968:	203feb26 	beq	r4,zero,10009918 <__alt_data_end+0xf8009918>
1000996c:	300c90fa 	slli	r6,r6,3
10009970:	00c03fc4 	movi	r3,255
10009974:	31808034 	orhi	r6,r6,512
10009978:	003fd906 	br	100098e0 <__alt_data_end+0xf80098e0>
1000997c:	00bffa44 	movi	r2,-23
10009980:	1880090e 	bge	r3,r2,100099a8 <__truncdfsf2+0x128>
10009984:	01800144 	movi	r6,5
10009988:	0007883a 	mov	r3,zero
1000998c:	00803fc4 	movi	r2,255
10009990:	300cd0fa 	srli	r6,r6,3
10009994:	18bfef1e 	bne	r3,r2,10009954 <__alt_data_end+0xf8009954>
10009998:	303fdf26 	beq	r6,zero,10009918 <__alt_data_end+0xf8009918>
1000999c:	31801034 	orhi	r6,r6,64
100099a0:	00ffffc4 	movi	r3,-1
100099a4:	003feb06 	br	10009954 <__alt_data_end+0xf8009954>
100099a8:	0080e784 	movi	r2,926
100099ac:	1205c83a 	sub	r2,r2,r8
100099b0:	00c007c4 	movi	r3,31
100099b4:	31802034 	orhi	r6,r6,128
100099b8:	18800916 	blt	r3,r2,100099e0 <__truncdfsf2+0x160>
100099bc:	423f2084 	addi	r8,r8,-894
100099c0:	3a06983a 	sll	r3,r7,r8
100099c4:	3210983a 	sll	r8,r6,r8
100099c8:	388ed83a 	srl	r7,r7,r2
100099cc:	180cc03a 	cmpne	r6,r3,zero
100099d0:	418cb03a 	or	r6,r8,r6
100099d4:	31ccb03a 	or	r6,r6,r7
100099d8:	0007883a 	mov	r3,zero
100099dc:	003fc006 	br	100098e0 <__alt_data_end+0xf80098e0>
100099e0:	00c0df84 	movi	r3,894
100099e4:	1a07c83a 	sub	r3,r3,r8
100099e8:	01000804 	movi	r4,32
100099ec:	30c6d83a 	srl	r3,r6,r3
100099f0:	11000726 	beq	r2,r4,10009a10 <__truncdfsf2+0x190>
100099f4:	423f2884 	addi	r8,r8,-862
100099f8:	3210983a 	sll	r8,r6,r8
100099fc:	41ceb03a 	or	r7,r8,r7
10009a00:	380ec03a 	cmpne	r7,r7,zero
10009a04:	38ccb03a 	or	r6,r7,r3
10009a08:	0007883a 	mov	r3,zero
10009a0c:	003fb406 	br	100098e0 <__alt_data_end+0xf80098e0>
10009a10:	0011883a 	mov	r8,zero
10009a14:	003ff906 	br	100099fc <__alt_data_end+0xf80099fc>

10009a18 <__clzsi2>:
10009a18:	00bfffd4 	movui	r2,65535
10009a1c:	11000b36 	bltu	r2,r4,10009a4c <__clzsi2+0x34>
10009a20:	00803fc4 	movi	r2,255
10009a24:	1100122e 	bgeu	r2,r4,10009a70 <__clzsi2+0x58>
10009a28:	00c00204 	movi	r3,8
10009a2c:	01400604 	movi	r5,24
10009a30:	20c8d83a 	srl	r4,r4,r3
10009a34:	008400b4 	movhi	r2,4098
10009a38:	10a71e04 	addi	r2,r2,-25480
10009a3c:	1109883a 	add	r4,r2,r4
10009a40:	20800003 	ldbu	r2,0(r4)
10009a44:	2885c83a 	sub	r2,r5,r2
10009a48:	f800283a 	ret
10009a4c:	00804034 	movhi	r2,256
10009a50:	10bfffc4 	addi	r2,r2,-1
10009a54:	11000336 	bltu	r2,r4,10009a64 <__clzsi2+0x4c>
10009a58:	00c00404 	movi	r3,16
10009a5c:	180b883a 	mov	r5,r3
10009a60:	003ff306 	br	10009a30 <__alt_data_end+0xf8009a30>
10009a64:	00c00604 	movi	r3,24
10009a68:	01400204 	movi	r5,8
10009a6c:	003ff006 	br	10009a30 <__alt_data_end+0xf8009a30>
10009a70:	0007883a 	mov	r3,zero
10009a74:	01400804 	movi	r5,32
10009a78:	003fed06 	br	10009a30 <__alt_data_end+0xf8009a30>

10009a7c <memcpy>:
10009a7c:	deffff04 	addi	sp,sp,-4
10009a80:	dc000015 	stw	r16,0(sp)
10009a84:	00c003c4 	movi	r3,15
10009a88:	2005883a 	mov	r2,r4
10009a8c:	1980432e 	bgeu	r3,r6,10009b9c <memcpy+0x120>
10009a90:	2146b03a 	or	r3,r4,r5
10009a94:	18c000cc 	andi	r3,r3,3
10009a98:	1800421e 	bne	r3,zero,10009ba4 <memcpy+0x128>
10009a9c:	343ffc04 	addi	r16,r6,-16
10009aa0:	8020d13a 	srli	r16,r16,4
10009aa4:	28c00104 	addi	r3,r5,4
10009aa8:	23400104 	addi	r13,r4,4
10009aac:	801e913a 	slli	r15,r16,4
10009ab0:	2b000204 	addi	r12,r5,8
10009ab4:	22c00204 	addi	r11,r4,8
10009ab8:	7bc00504 	addi	r15,r15,20
10009abc:	2a800304 	addi	r10,r5,12
10009ac0:	22400304 	addi	r9,r4,12
10009ac4:	2bdf883a 	add	r15,r5,r15
10009ac8:	2811883a 	mov	r8,r5
10009acc:	200f883a 	mov	r7,r4
10009ad0:	41000017 	ldw	r4,0(r8)
10009ad4:	39c00404 	addi	r7,r7,16
10009ad8:	18c00404 	addi	r3,r3,16
10009adc:	393ffc15 	stw	r4,-16(r7)
10009ae0:	1bbffc17 	ldw	r14,-16(r3)
10009ae4:	6b400404 	addi	r13,r13,16
10009ae8:	5ac00404 	addi	r11,r11,16
10009aec:	6bbffc15 	stw	r14,-16(r13)
10009af0:	63800017 	ldw	r14,0(r12)
10009af4:	4a400404 	addi	r9,r9,16
10009af8:	42000404 	addi	r8,r8,16
10009afc:	5bbffc15 	stw	r14,-16(r11)
10009b00:	53800017 	ldw	r14,0(r10)
10009b04:	63000404 	addi	r12,r12,16
10009b08:	52800404 	addi	r10,r10,16
10009b0c:	4bbffc15 	stw	r14,-16(r9)
10009b10:	1bffef1e 	bne	r3,r15,10009ad0 <__alt_data_end+0xf8009ad0>
10009b14:	81c00044 	addi	r7,r16,1
10009b18:	380e913a 	slli	r7,r7,4
10009b1c:	310003cc 	andi	r4,r6,15
10009b20:	02c000c4 	movi	r11,3
10009b24:	11c7883a 	add	r3,r2,r7
10009b28:	29cb883a 	add	r5,r5,r7
10009b2c:	59001f2e 	bgeu	r11,r4,10009bac <memcpy+0x130>
10009b30:	1813883a 	mov	r9,r3
10009b34:	2811883a 	mov	r8,r5
10009b38:	200f883a 	mov	r7,r4
10009b3c:	42800017 	ldw	r10,0(r8)
10009b40:	4a400104 	addi	r9,r9,4
10009b44:	39ffff04 	addi	r7,r7,-4
10009b48:	4abfff15 	stw	r10,-4(r9)
10009b4c:	42000104 	addi	r8,r8,4
10009b50:	59fffa36 	bltu	r11,r7,10009b3c <__alt_data_end+0xf8009b3c>
10009b54:	213fff04 	addi	r4,r4,-4
10009b58:	2008d0ba 	srli	r4,r4,2
10009b5c:	318000cc 	andi	r6,r6,3
10009b60:	21000044 	addi	r4,r4,1
10009b64:	2109883a 	add	r4,r4,r4
10009b68:	2109883a 	add	r4,r4,r4
10009b6c:	1907883a 	add	r3,r3,r4
10009b70:	290b883a 	add	r5,r5,r4
10009b74:	30000626 	beq	r6,zero,10009b90 <memcpy+0x114>
10009b78:	198d883a 	add	r6,r3,r6
10009b7c:	29c00003 	ldbu	r7,0(r5)
10009b80:	18c00044 	addi	r3,r3,1
10009b84:	29400044 	addi	r5,r5,1
10009b88:	19ffffc5 	stb	r7,-1(r3)
10009b8c:	19bffb1e 	bne	r3,r6,10009b7c <__alt_data_end+0xf8009b7c>
10009b90:	dc000017 	ldw	r16,0(sp)
10009b94:	dec00104 	addi	sp,sp,4
10009b98:	f800283a 	ret
10009b9c:	2007883a 	mov	r3,r4
10009ba0:	003ff406 	br	10009b74 <__alt_data_end+0xf8009b74>
10009ba4:	2007883a 	mov	r3,r4
10009ba8:	003ff306 	br	10009b78 <__alt_data_end+0xf8009b78>
10009bac:	200d883a 	mov	r6,r4
10009bb0:	003ff006 	br	10009b74 <__alt_data_end+0xf8009b74>

10009bb4 <_printf_r>:
10009bb4:	defffd04 	addi	sp,sp,-12
10009bb8:	dfc00015 	stw	ra,0(sp)
10009bbc:	d9800115 	stw	r6,4(sp)
10009bc0:	d9c00215 	stw	r7,8(sp)
10009bc4:	280d883a 	mov	r6,r5
10009bc8:	21400217 	ldw	r5,8(r4)
10009bcc:	d9c00104 	addi	r7,sp,4
10009bd0:	0009dfc0 	call	10009dfc <___vfprintf_internal_r>
10009bd4:	dfc00017 	ldw	ra,0(sp)
10009bd8:	dec00304 	addi	sp,sp,12
10009bdc:	f800283a 	ret

10009be0 <printf>:
10009be0:	defffc04 	addi	sp,sp,-16
10009be4:	dfc00015 	stw	ra,0(sp)
10009be8:	d9400115 	stw	r5,4(sp)
10009bec:	d9800215 	stw	r6,8(sp)
10009bf0:	d9c00315 	stw	r7,12(sp)
10009bf4:	008400b4 	movhi	r2,4098
10009bf8:	10ae8a04 	addi	r2,r2,-17880
10009bfc:	10800017 	ldw	r2,0(r2)
10009c00:	200b883a 	mov	r5,r4
10009c04:	d9800104 	addi	r6,sp,4
10009c08:	11000217 	ldw	r4,8(r2)
10009c0c:	000bef80 	call	1000bef8 <__vfprintf_internal>
10009c10:	dfc00017 	ldw	ra,0(sp)
10009c14:	dec00404 	addi	sp,sp,16
10009c18:	f800283a 	ret

10009c1c <_puts_r>:
10009c1c:	defff604 	addi	sp,sp,-40
10009c20:	dc000715 	stw	r16,28(sp)
10009c24:	2021883a 	mov	r16,r4
10009c28:	2809883a 	mov	r4,r5
10009c2c:	dc400815 	stw	r17,32(sp)
10009c30:	dfc00915 	stw	ra,36(sp)
10009c34:	2823883a 	mov	r17,r5
10009c38:	0009d640 	call	10009d64 <strlen>
10009c3c:	00c400b4 	movhi	r3,4098
10009c40:	18ee8a04 	addi	r3,r3,-17880
10009c44:	18c00017 	ldw	r3,0(r3)
10009c48:	11000044 	addi	r4,r2,1
10009c4c:	d8800115 	stw	r2,4(sp)
10009c50:	18c00217 	ldw	r3,8(r3)
10009c54:	014400b4 	movhi	r5,4098
10009c58:	29675e04 	addi	r5,r5,-25224
10009c5c:	1880030b 	ldhu	r2,12(r3)
10009c60:	d9400215 	stw	r5,8(sp)
10009c64:	d9000615 	stw	r4,24(sp)
10009c68:	01400044 	movi	r5,1
10009c6c:	01000084 	movi	r4,2
10009c70:	d9000515 	stw	r4,20(sp)
10009c74:	dc400015 	stw	r17,0(sp)
10009c78:	d9400315 	stw	r5,12(sp)
10009c7c:	dec00415 	stw	sp,16(sp)
10009c80:	1108000c 	andi	r4,r2,8192
10009c84:	2000061e 	bne	r4,zero,10009ca0 <_puts_r+0x84>
10009c88:	19401917 	ldw	r5,100(r3)
10009c8c:	0137ffc4 	movi	r4,-8193
10009c90:	10880014 	ori	r2,r2,8192
10009c94:	2908703a 	and	r4,r5,r4
10009c98:	1880030d 	sth	r2,12(r3)
10009c9c:	19001915 	stw	r4,100(r3)
10009ca0:	81400217 	ldw	r5,8(r16)
10009ca4:	8009883a 	mov	r4,r16
10009ca8:	d9800404 	addi	r6,sp,16
10009cac:	000e3bc0 	call	1000e3bc <__sfvwrite_r>
10009cb0:	1000061e 	bne	r2,zero,10009ccc <_puts_r+0xb0>
10009cb4:	00800284 	movi	r2,10
10009cb8:	dfc00917 	ldw	ra,36(sp)
10009cbc:	dc400817 	ldw	r17,32(sp)
10009cc0:	dc000717 	ldw	r16,28(sp)
10009cc4:	dec00a04 	addi	sp,sp,40
10009cc8:	f800283a 	ret
10009ccc:	00bfffc4 	movi	r2,-1
10009cd0:	003ff906 	br	10009cb8 <__alt_data_end+0xf8009cb8>

10009cd4 <puts>:
10009cd4:	008400b4 	movhi	r2,4098
10009cd8:	10ae8a04 	addi	r2,r2,-17880
10009cdc:	200b883a 	mov	r5,r4
10009ce0:	11000017 	ldw	r4,0(r2)
10009ce4:	0009c1c1 	jmpi	10009c1c <_puts_r>

10009ce8 <srand>:
10009ce8:	008400b4 	movhi	r2,4098
10009cec:	10ae8a04 	addi	r2,r2,-17880
10009cf0:	10800017 	ldw	r2,0(r2)
10009cf4:	11002915 	stw	r4,164(r2)
10009cf8:	10002a15 	stw	zero,168(r2)
10009cfc:	f800283a 	ret

10009d00 <rand>:
10009d00:	008400b4 	movhi	r2,4098
10009d04:	defffe04 	addi	sp,sp,-8
10009d08:	10ae8a04 	addi	r2,r2,-17880
10009d0c:	dc000015 	stw	r16,0(sp)
10009d10:	14000017 	ldw	r16,0(r2)
10009d14:	dfc00115 	stw	ra,4(sp)
10009d18:	01932574 	movhi	r6,19605
10009d1c:	81002917 	ldw	r4,164(r16)
10009d20:	81402a17 	ldw	r5,168(r16)
10009d24:	01d614b4 	movhi	r7,22610
10009d28:	319fcb44 	addi	r6,r6,32557
10009d2c:	39fd0b44 	addi	r7,r7,-3027
10009d30:	0012eb00 	call	10012eb0 <__muldi3>
10009d34:	11000044 	addi	r4,r2,1
10009d38:	2085803a 	cmpltu	r2,r4,r2
10009d3c:	10c7883a 	add	r3,r2,r3
10009d40:	00a00034 	movhi	r2,32768
10009d44:	10bfffc4 	addi	r2,r2,-1
10009d48:	1884703a 	and	r2,r3,r2
10009d4c:	81002915 	stw	r4,164(r16)
10009d50:	80c02a15 	stw	r3,168(r16)
10009d54:	dfc00117 	ldw	ra,4(sp)
10009d58:	dc000017 	ldw	r16,0(sp)
10009d5c:	dec00204 	addi	sp,sp,8
10009d60:	f800283a 	ret

10009d64 <strlen>:
10009d64:	208000cc 	andi	r2,r4,3
10009d68:	10002026 	beq	r2,zero,10009dec <strlen+0x88>
10009d6c:	20800007 	ldb	r2,0(r4)
10009d70:	10002026 	beq	r2,zero,10009df4 <strlen+0x90>
10009d74:	2005883a 	mov	r2,r4
10009d78:	00000206 	br	10009d84 <strlen+0x20>
10009d7c:	10c00007 	ldb	r3,0(r2)
10009d80:	18001826 	beq	r3,zero,10009de4 <strlen+0x80>
10009d84:	10800044 	addi	r2,r2,1
10009d88:	10c000cc 	andi	r3,r2,3
10009d8c:	183ffb1e 	bne	r3,zero,10009d7c <__alt_data_end+0xf8009d7c>
10009d90:	10c00017 	ldw	r3,0(r2)
10009d94:	01ffbff4 	movhi	r7,65279
10009d98:	39ffbfc4 	addi	r7,r7,-257
10009d9c:	00ca303a 	nor	r5,zero,r3
10009da0:	01a02074 	movhi	r6,32897
10009da4:	19c7883a 	add	r3,r3,r7
10009da8:	31a02004 	addi	r6,r6,-32640
10009dac:	1946703a 	and	r3,r3,r5
10009db0:	1986703a 	and	r3,r3,r6
10009db4:	1800091e 	bne	r3,zero,10009ddc <strlen+0x78>
10009db8:	10800104 	addi	r2,r2,4
10009dbc:	10c00017 	ldw	r3,0(r2)
10009dc0:	19cb883a 	add	r5,r3,r7
10009dc4:	00c6303a 	nor	r3,zero,r3
10009dc8:	28c6703a 	and	r3,r5,r3
10009dcc:	1986703a 	and	r3,r3,r6
10009dd0:	183ff926 	beq	r3,zero,10009db8 <__alt_data_end+0xf8009db8>
10009dd4:	00000106 	br	10009ddc <strlen+0x78>
10009dd8:	10800044 	addi	r2,r2,1
10009ddc:	10c00007 	ldb	r3,0(r2)
10009de0:	183ffd1e 	bne	r3,zero,10009dd8 <__alt_data_end+0xf8009dd8>
10009de4:	1105c83a 	sub	r2,r2,r4
10009de8:	f800283a 	ret
10009dec:	2005883a 	mov	r2,r4
10009df0:	003fe706 	br	10009d90 <__alt_data_end+0xf8009d90>
10009df4:	0005883a 	mov	r2,zero
10009df8:	f800283a 	ret

10009dfc <___vfprintf_internal_r>:
10009dfc:	defeb604 	addi	sp,sp,-1320
10009e00:	dfc14915 	stw	ra,1316(sp)
10009e04:	ddc14715 	stw	r23,1308(sp)
10009e08:	dd814615 	stw	r22,1304(sp)
10009e0c:	202f883a 	mov	r23,r4
10009e10:	282d883a 	mov	r22,r5
10009e14:	d9812a15 	stw	r6,1192(sp)
10009e18:	d9c12d15 	stw	r7,1204(sp)
10009e1c:	df014815 	stw	fp,1312(sp)
10009e20:	dd414515 	stw	r21,1300(sp)
10009e24:	dd014415 	stw	r20,1296(sp)
10009e28:	dcc14315 	stw	r19,1292(sp)
10009e2c:	dc814215 	stw	r18,1288(sp)
10009e30:	dc414115 	stw	r17,1284(sp)
10009e34:	dc014015 	stw	r16,1280(sp)
10009e38:	000ea7c0 	call	1000ea7c <_localeconv_r>
10009e3c:	10800017 	ldw	r2,0(r2)
10009e40:	1009883a 	mov	r4,r2
10009e44:	d8813515 	stw	r2,1236(sp)
10009e48:	0009d640 	call	10009d64 <strlen>
10009e4c:	d8813815 	stw	r2,1248(sp)
10009e50:	b8000226 	beq	r23,zero,10009e5c <___vfprintf_internal_r+0x60>
10009e54:	b8800e17 	ldw	r2,56(r23)
10009e58:	10010526 	beq	r2,zero,1000a270 <___vfprintf_internal_r+0x474>
10009e5c:	b0c0030b 	ldhu	r3,12(r22)
10009e60:	1908000c 	andi	r4,r3,8192
10009e64:	1805883a 	mov	r2,r3
10009e68:	2000071e 	bne	r4,zero,10009e88 <___vfprintf_internal_r+0x8c>
10009e6c:	b1001917 	ldw	r4,100(r22)
10009e70:	18880014 	ori	r2,r3,8192
10009e74:	00f7ffc4 	movi	r3,-8193
10009e78:	20c8703a 	and	r4,r4,r3
10009e7c:	b080030d 	sth	r2,12(r22)
10009e80:	1007883a 	mov	r3,r2
10009e84:	b1001915 	stw	r4,100(r22)
10009e88:	1100020c 	andi	r4,r2,8
10009e8c:	2000a826 	beq	r4,zero,1000a130 <___vfprintf_internal_r+0x334>
10009e90:	b1000417 	ldw	r4,16(r22)
10009e94:	2000a626 	beq	r4,zero,1000a130 <___vfprintf_internal_r+0x334>
10009e98:	1080068c 	andi	r2,r2,26
10009e9c:	01000284 	movi	r4,10
10009ea0:	1100ac26 	beq	r2,r4,1000a154 <___vfprintf_internal_r+0x358>
10009ea4:	d8c10e04 	addi	r3,sp,1080
10009ea8:	d9010dc4 	addi	r4,sp,1079
10009eac:	d9400404 	addi	r5,sp,16
10009eb0:	050400b4 	movhi	r20,4098
10009eb4:	1905c83a 	sub	r2,r3,r4
10009eb8:	a5276f84 	addi	r20,r20,-25154
10009ebc:	d8c12815 	stw	r3,1184(sp)
10009ec0:	d9012915 	stw	r4,1188(sp)
10009ec4:	d9411e15 	stw	r5,1144(sp)
10009ec8:	d8012015 	stw	zero,1152(sp)
10009ecc:	d8011f15 	stw	zero,1148(sp)
10009ed0:	d8013315 	stw	zero,1228(sp)
10009ed4:	d8013715 	stw	zero,1244(sp)
10009ed8:	d8013915 	stw	zero,1252(sp)
10009edc:	d8013b15 	stw	zero,1260(sp)
10009ee0:	d8013a15 	stw	zero,1256(sp)
10009ee4:	d8012f15 	stw	zero,1212(sp)
10009ee8:	2811883a 	mov	r8,r5
10009eec:	d8813c15 	stw	r2,1264(sp)
10009ef0:	d8c12a17 	ldw	r3,1192(sp)
10009ef4:	18800007 	ldb	r2,0(r3)
10009ef8:	10021326 	beq	r2,zero,1000a748 <___vfprintf_internal_r+0x94c>
10009efc:	00c00944 	movi	r3,37
10009f00:	dc012a17 	ldw	r16,1192(sp)
10009f04:	10c0021e 	bne	r2,r3,10009f10 <___vfprintf_internal_r+0x114>
10009f08:	00001606 	br	10009f64 <___vfprintf_internal_r+0x168>
10009f0c:	10c08526 	beq	r2,r3,1000a124 <___vfprintf_internal_r+0x328>
10009f10:	84000044 	addi	r16,r16,1
10009f14:	80800007 	ldb	r2,0(r16)
10009f18:	103ffc1e 	bne	r2,zero,10009f0c <__alt_data_end+0xf8009f0c>
10009f1c:	d9012a17 	ldw	r4,1192(sp)
10009f20:	8123c83a 	sub	r17,r16,r4
10009f24:	88000f26 	beq	r17,zero,10009f64 <___vfprintf_internal_r+0x168>
10009f28:	d8812a17 	ldw	r2,1192(sp)
10009f2c:	d8c12017 	ldw	r3,1152(sp)
10009f30:	44400115 	stw	r17,4(r8)
10009f34:	40800015 	stw	r2,0(r8)
10009f38:	d8811f17 	ldw	r2,1148(sp)
10009f3c:	1c47883a 	add	r3,r3,r17
10009f40:	d8c12015 	stw	r3,1152(sp)
10009f44:	10800044 	addi	r2,r2,1
10009f48:	d8811f15 	stw	r2,1148(sp)
10009f4c:	00c001c4 	movi	r3,7
10009f50:	1880b516 	blt	r3,r2,1000a228 <___vfprintf_internal_r+0x42c>
10009f54:	42000204 	addi	r8,r8,8
10009f58:	d8c12f17 	ldw	r3,1212(sp)
10009f5c:	1c47883a 	add	r3,r3,r17
10009f60:	d8c12f15 	stw	r3,1212(sp)
10009f64:	80800007 	ldb	r2,0(r16)
10009f68:	1000b626 	beq	r2,zero,1000a244 <___vfprintf_internal_r+0x448>
10009f6c:	80800044 	addi	r2,r16,1
10009f70:	84000047 	ldb	r16,1(r16)
10009f74:	0027883a 	mov	r19,zero
10009f78:	0039883a 	mov	fp,zero
10009f7c:	dcc12b05 	stb	r19,1196(sp)
10009f80:	d8012785 	stb	zero,1182(sp)
10009f84:	027fffc4 	movi	r9,-1
10009f88:	d8012e15 	stw	zero,1208(sp)
10009f8c:	04401604 	movi	r17,88
10009f90:	04800244 	movi	r18,9
10009f94:	da012a15 	stw	r8,1192(sp)
10009f98:	e027883a 	mov	r19,fp
10009f9c:	17000044 	addi	fp,r2,1
10009fa0:	80bff804 	addi	r2,r16,-32
10009fa4:	88831236 	bltu	r17,r2,1000abf0 <___vfprintf_internal_r+0xdf4>
10009fa8:	100490ba 	slli	r2,r2,2
10009fac:	01040074 	movhi	r4,4097
10009fb0:	2127f004 	addi	r4,r4,-24640
10009fb4:	1105883a 	add	r2,r2,r4
10009fb8:	10800017 	ldw	r2,0(r2)
10009fbc:	1000683a 	jmp	r2
10009fc0:	1000ab0c 	andi	zero,r2,684
10009fc4:	1000abf0 	cmpltui	zero,r2,687
10009fc8:	1000abf0 	cmpltui	zero,r2,687
10009fcc:	1000ab28 	cmpgeui	zero,r2,684
10009fd0:	1000abf0 	cmpltui	zero,r2,687
10009fd4:	1000abf0 	cmpltui	zero,r2,687
10009fd8:	1000abf0 	cmpltui	zero,r2,687
10009fdc:	1000abf0 	cmpltui	zero,r2,687
10009fe0:	1000abf0 	cmpltui	zero,r2,687
10009fe4:	1000abf0 	cmpltui	zero,r2,687
10009fe8:	1000ab38 	rdprs	zero,r2,684
10009fec:	1000ab60 	cmpeqi	zero,r2,685
10009ff0:	1000abf0 	cmpltui	zero,r2,687
10009ff4:	1000a27c 	xorhi	zero,r2,649
10009ff8:	1000a28c 	andi	zero,r2,650
10009ffc:	1000abf0 	cmpltui	zero,r2,687
1000a000:	1000a2dc 	xori	zero,r2,651
1000a004:	1000a2ec 	andhi	zero,r2,651
1000a008:	1000a2ec 	andhi	zero,r2,651
1000a00c:	1000a2ec 	andhi	zero,r2,651
1000a010:	1000a2ec 	andhi	zero,r2,651
1000a014:	1000a2ec 	andhi	zero,r2,651
1000a018:	1000a2ec 	andhi	zero,r2,651
1000a01c:	1000a2ec 	andhi	zero,r2,651
1000a020:	1000a2ec 	andhi	zero,r2,651
1000a024:	1000a2ec 	andhi	zero,r2,651
1000a028:	1000abf0 	cmpltui	zero,r2,687
1000a02c:	1000abf0 	cmpltui	zero,r2,687
1000a030:	1000abf0 	cmpltui	zero,r2,687
1000a034:	1000abf0 	cmpltui	zero,r2,687
1000a038:	1000abf0 	cmpltui	zero,r2,687
1000a03c:	1000abf0 	cmpltui	zero,r2,687
1000a040:	1000abf0 	cmpltui	zero,r2,687
1000a044:	1000abf0 	cmpltui	zero,r2,687
1000a048:	1000abf0 	cmpltui	zero,r2,687
1000a04c:	1000abf0 	cmpltui	zero,r2,687
1000a050:	1000a330 	cmpltui	zero,r2,652
1000a054:	1000a750 	cmplti	zero,r2,669
1000a058:	1000abf0 	cmpltui	zero,r2,687
1000a05c:	1000a750 	cmplti	zero,r2,669
1000a060:	1000abf0 	cmpltui	zero,r2,687
1000a064:	1000abf0 	cmpltui	zero,r2,687
1000a068:	1000abf0 	cmpltui	zero,r2,687
1000a06c:	1000abf0 	cmpltui	zero,r2,687
1000a070:	1000a7f8 	rdprs	zero,r2,671
1000a074:	1000abf0 	cmpltui	zero,r2,687
1000a078:	1000abf0 	cmpltui	zero,r2,687
1000a07c:	1000a808 	cmpgei	zero,r2,672
1000a080:	1000abf0 	cmpltui	zero,r2,687
1000a084:	1000abf0 	cmpltui	zero,r2,687
1000a088:	1000abf0 	cmpltui	zero,r2,687
1000a08c:	1000abf0 	cmpltui	zero,r2,687
1000a090:	1000abf0 	cmpltui	zero,r2,687
1000a094:	1000a84c 	andi	zero,r2,673
1000a098:	1000abf0 	cmpltui	zero,r2,687
1000a09c:	1000abf0 	cmpltui	zero,r2,687
1000a0a0:	1000a884 	addi	zero,r2,674
1000a0a4:	1000abf0 	cmpltui	zero,r2,687
1000a0a8:	1000abf0 	cmpltui	zero,r2,687
1000a0ac:	1000abf0 	cmpltui	zero,r2,687
1000a0b0:	1000abf0 	cmpltui	zero,r2,687
1000a0b4:	1000abf0 	cmpltui	zero,r2,687
1000a0b8:	1000abf0 	cmpltui	zero,r2,687
1000a0bc:	1000abf0 	cmpltui	zero,r2,687
1000a0c0:	1000abf0 	cmpltui	zero,r2,687
1000a0c4:	1000abf0 	cmpltui	zero,r2,687
1000a0c8:	1000abf0 	cmpltui	zero,r2,687
1000a0cc:	1000aac0 	call	11000aac <_gp+0xfdd088>
1000a0d0:	1000aa6c 	andhi	zero,r2,681
1000a0d4:	1000a750 	cmplti	zero,r2,669
1000a0d8:	1000a750 	cmplti	zero,r2,669
1000a0dc:	1000a750 	cmplti	zero,r2,669
1000a0e0:	1000aab0 	cmpltui	zero,r2,682
1000a0e4:	1000aa6c 	andhi	zero,r2,681
1000a0e8:	1000abf0 	cmpltui	zero,r2,687
1000a0ec:	1000abf0 	cmpltui	zero,r2,687
1000a0f0:	1000a988 	cmpgei	zero,r2,678
1000a0f4:	1000abf0 	cmpltui	zero,r2,687
1000a0f8:	1000a9a0 	cmpeqi	zero,r2,678
1000a0fc:	1000a9e0 	cmpeqi	zero,r2,679
1000a100:	1000aa20 	cmpeqi	zero,r2,680
1000a104:	1000a8ec 	andhi	zero,r2,675
1000a108:	1000abf0 	cmpltui	zero,r2,687
1000a10c:	1000ab74 	orhi	zero,r2,685
1000a110:	1000abf0 	cmpltui	zero,r2,687
1000a114:	1000a8fc 	xorhi	zero,r2,675
1000a118:	1000abf0 	cmpltui	zero,r2,687
1000a11c:	1000abf0 	cmpltui	zero,r2,687
1000a120:	1000a93c 	xorhi	zero,r2,676
1000a124:	d9412a17 	ldw	r5,1192(sp)
1000a128:	8163c83a 	sub	r17,r16,r5
1000a12c:	003f7d06 	br	10009f24 <__alt_data_end+0xf8009f24>
1000a130:	b809883a 	mov	r4,r23
1000a134:	b00b883a 	mov	r5,r22
1000a138:	000bf1c0 	call	1000bf1c <__swsetup_r>
1000a13c:	10002d1e 	bne	r2,zero,1000a1f4 <___vfprintf_internal_r+0x3f8>
1000a140:	b0c0030b 	ldhu	r3,12(r22)
1000a144:	01000284 	movi	r4,10
1000a148:	1805883a 	mov	r2,r3
1000a14c:	1080068c 	andi	r2,r2,26
1000a150:	113f541e 	bne	r2,r4,10009ea4 <__alt_data_end+0xf8009ea4>
1000a154:	b080038b 	ldhu	r2,14(r22)
1000a158:	113fffcc 	andi	r4,r2,65535
1000a15c:	2120001c 	xori	r4,r4,32768
1000a160:	21200004 	addi	r4,r4,-32768
1000a164:	203f4f16 	blt	r4,zero,10009ea4 <__alt_data_end+0xf8009ea4>
1000a168:	b2c01917 	ldw	r11,100(r22)
1000a16c:	b2800717 	ldw	r10,28(r22)
1000a170:	b2400917 	ldw	r9,36(r22)
1000a174:	d9812a17 	ldw	r6,1192(sp)
1000a178:	d9c12d17 	ldw	r7,1204(sp)
1000a17c:	02010004 	movi	r8,1024
1000a180:	18ffff4c 	andi	r3,r3,65533
1000a184:	d881078d 	sth	r2,1054(sp)
1000a188:	b809883a 	mov	r4,r23
1000a18c:	d8800404 	addi	r2,sp,16
1000a190:	d9410404 	addi	r5,sp,1040
1000a194:	d8c1070d 	sth	r3,1052(sp)
1000a198:	dac11d15 	stw	r11,1140(sp)
1000a19c:	da810b15 	stw	r10,1068(sp)
1000a1a0:	da410d15 	stw	r9,1076(sp)
1000a1a4:	d8810415 	stw	r2,1040(sp)
1000a1a8:	d8810815 	stw	r2,1056(sp)
1000a1ac:	da010615 	stw	r8,1048(sp)
1000a1b0:	da010915 	stw	r8,1060(sp)
1000a1b4:	d8010a15 	stw	zero,1064(sp)
1000a1b8:	0009dfc0 	call	10009dfc <___vfprintf_internal_r>
1000a1bc:	1021883a 	mov	r16,r2
1000a1c0:	10000416 	blt	r2,zero,1000a1d4 <___vfprintf_internal_r+0x3d8>
1000a1c4:	b809883a 	mov	r4,r23
1000a1c8:	d9410404 	addi	r5,sp,1040
1000a1cc:	000d99c0 	call	1000d99c <_fflush_r>
1000a1d0:	1007301e 	bne	r2,zero,1000be94 <___vfprintf_internal_r+0x2098>
1000a1d4:	d881070b 	ldhu	r2,1052(sp)
1000a1d8:	1080100c 	andi	r2,r2,64
1000a1dc:	10000326 	beq	r2,zero,1000a1ec <___vfprintf_internal_r+0x3f0>
1000a1e0:	b080030b 	ldhu	r2,12(r22)
1000a1e4:	10801014 	ori	r2,r2,64
1000a1e8:	b080030d 	sth	r2,12(r22)
1000a1ec:	8005883a 	mov	r2,r16
1000a1f0:	00000106 	br	1000a1f8 <___vfprintf_internal_r+0x3fc>
1000a1f4:	00bfffc4 	movi	r2,-1
1000a1f8:	dfc14917 	ldw	ra,1316(sp)
1000a1fc:	df014817 	ldw	fp,1312(sp)
1000a200:	ddc14717 	ldw	r23,1308(sp)
1000a204:	dd814617 	ldw	r22,1304(sp)
1000a208:	dd414517 	ldw	r21,1300(sp)
1000a20c:	dd014417 	ldw	r20,1296(sp)
1000a210:	dcc14317 	ldw	r19,1292(sp)
1000a214:	dc814217 	ldw	r18,1288(sp)
1000a218:	dc414117 	ldw	r17,1284(sp)
1000a21c:	dc014017 	ldw	r16,1280(sp)
1000a220:	dec14a04 	addi	sp,sp,1320
1000a224:	f800283a 	ret
1000a228:	b809883a 	mov	r4,r23
1000a22c:	b00b883a 	mov	r5,r22
1000a230:	d9811e04 	addi	r6,sp,1144
1000a234:	00111040 	call	10011104 <__sprint_r>
1000a238:	1000081e 	bne	r2,zero,1000a25c <___vfprintf_internal_r+0x460>
1000a23c:	da000404 	addi	r8,sp,16
1000a240:	003f4506 	br	10009f58 <__alt_data_end+0xf8009f58>
1000a244:	d8812017 	ldw	r2,1152(sp)
1000a248:	10000426 	beq	r2,zero,1000a25c <___vfprintf_internal_r+0x460>
1000a24c:	b809883a 	mov	r4,r23
1000a250:	b00b883a 	mov	r5,r22
1000a254:	d9811e04 	addi	r6,sp,1144
1000a258:	00111040 	call	10011104 <__sprint_r>
1000a25c:	b080030b 	ldhu	r2,12(r22)
1000a260:	1080100c 	andi	r2,r2,64
1000a264:	103fe31e 	bne	r2,zero,1000a1f4 <__alt_data_end+0xf800a1f4>
1000a268:	d8812f17 	ldw	r2,1212(sp)
1000a26c:	003fe206 	br	1000a1f8 <__alt_data_end+0xf800a1f8>
1000a270:	b809883a 	mov	r4,r23
1000a274:	000df580 	call	1000df58 <__sinit>
1000a278:	003ef806 	br	10009e5c <__alt_data_end+0xf8009e5c>
1000a27c:	e005883a 	mov	r2,fp
1000a280:	9cc00114 	ori	r19,r19,4
1000a284:	e4000007 	ldb	r16,0(fp)
1000a288:	003f4406 	br	10009f9c <__alt_data_end+0xf8009f9c>
1000a28c:	e4000007 	ldb	r16,0(fp)
1000a290:	01000a84 	movi	r4,42
1000a294:	e0800044 	addi	r2,fp,1
1000a298:	8106f626 	beq	r16,r4,1000be74 <___vfprintf_internal_r+0x2078>
1000a29c:	857ff404 	addi	r21,r16,-48
1000a2a0:	1039883a 	mov	fp,r2
1000a2a4:	0013883a 	mov	r9,zero
1000a2a8:	957f3d36 	bltu	r18,r21,10009fa0 <__alt_data_end+0xf8009fa0>
1000a2ac:	0009883a 	mov	r4,zero
1000a2b0:	01400284 	movi	r5,10
1000a2b4:	00074c40 	call	100074c4 <__mulsi3>
1000a2b8:	e4000007 	ldb	r16,0(fp)
1000a2bc:	a889883a 	add	r4,r21,r2
1000a2c0:	e7000044 	addi	fp,fp,1
1000a2c4:	857ff404 	addi	r21,r16,-48
1000a2c8:	957ff92e 	bgeu	r18,r21,1000a2b0 <__alt_data_end+0xf800a2b0>
1000a2cc:	2013883a 	mov	r9,r4
1000a2d0:	203f330e 	bge	r4,zero,10009fa0 <__alt_data_end+0xf8009fa0>
1000a2d4:	027fffc4 	movi	r9,-1
1000a2d8:	003f3106 	br	10009fa0 <__alt_data_end+0xf8009fa0>
1000a2dc:	9cc02014 	ori	r19,r19,128
1000a2e0:	e005883a 	mov	r2,fp
1000a2e4:	e4000007 	ldb	r16,0(fp)
1000a2e8:	003f2c06 	br	10009f9c <__alt_data_end+0xf8009f9c>
1000a2ec:	857ff404 	addi	r21,r16,-48
1000a2f0:	d8012e15 	stw	zero,1208(sp)
1000a2f4:	e021883a 	mov	r16,fp
1000a2f8:	0009883a 	mov	r4,zero
1000a2fc:	da412c15 	stw	r9,1200(sp)
1000a300:	01400284 	movi	r5,10
1000a304:	00074c40 	call	100074c4 <__mulsi3>
1000a308:	81400007 	ldb	r5,0(r16)
1000a30c:	1549883a 	add	r4,r2,r21
1000a310:	e7000044 	addi	fp,fp,1
1000a314:	2d7ff404 	addi	r21,r5,-48
1000a318:	e021883a 	mov	r16,fp
1000a31c:	957ff82e 	bgeu	r18,r21,1000a300 <__alt_data_end+0xf800a300>
1000a320:	2821883a 	mov	r16,r5
1000a324:	d9012e15 	stw	r4,1208(sp)
1000a328:	da412c17 	ldw	r9,1200(sp)
1000a32c:	003f1c06 	br	10009fa0 <__alt_data_end+0xf8009fa0>
1000a330:	da012a17 	ldw	r8,1192(sp)
1000a334:	df012a15 	stw	fp,1192(sp)
1000a338:	9839883a 	mov	fp,r19
1000a33c:	dcc12b03 	ldbu	r19,1196(sp)
1000a340:	e7000414 	ori	fp,fp,16
1000a344:	e080080c 	andi	r2,fp,32
1000a348:	dcc12785 	stb	r19,1182(sp)
1000a34c:	d8c12d17 	ldw	r3,1204(sp)
1000a350:	1001ce26 	beq	r2,zero,1000aa8c <___vfprintf_internal_r+0xc90>
1000a354:	d9012d17 	ldw	r4,1204(sp)
1000a358:	18800117 	ldw	r2,4(r3)
1000a35c:	1c800017 	ldw	r18,0(r3)
1000a360:	21000204 	addi	r4,r4,8
1000a364:	d9012d15 	stw	r4,1204(sp)
1000a368:	102b883a 	mov	r21,r2
1000a36c:	10044916 	blt	r2,zero,1000b494 <___vfprintf_internal_r+0x1698>
1000a370:	dcc12783 	ldbu	r19,1182(sp)
1000a374:	da413215 	stw	r9,1224(sp)
1000a378:	00800044 	movi	r2,1
1000a37c:	9546b03a 	or	r3,r18,r21
1000a380:	48000216 	blt	r9,zero,1000a38c <___vfprintf_internal_r+0x590>
1000a384:	013fdfc4 	movi	r4,-129
1000a388:	e138703a 	and	fp,fp,r4
1000a38c:	1802251e 	bne	r3,zero,1000ac24 <___vfprintf_internal_r+0xe28>
1000a390:	48031726 	beq	r9,zero,1000aff0 <___vfprintf_internal_r+0x11f4>
1000a394:	10803fcc 	andi	r2,r2,255
1000a398:	00c00044 	movi	r3,1
1000a39c:	10c24526 	beq	r2,r3,1000acb4 <___vfprintf_internal_r+0xeb8>
1000a3a0:	00c00084 	movi	r3,2
1000a3a4:	10c33426 	beq	r2,r3,1000b078 <___vfprintf_internal_r+0x127c>
1000a3a8:	d8c10e04 	addi	r3,sp,1080
1000a3ac:	9008d0fa 	srli	r4,r18,3
1000a3b0:	a80a977a 	slli	r5,r21,29
1000a3b4:	a82ad0fa 	srli	r21,r21,3
1000a3b8:	948001cc 	andi	r18,r18,7
1000a3bc:	90800c04 	addi	r2,r18,48
1000a3c0:	18ffffc4 	addi	r3,r3,-1
1000a3c4:	2924b03a 	or	r18,r5,r4
1000a3c8:	18800005 	stb	r2,0(r3)
1000a3cc:	9548b03a 	or	r4,r18,r21
1000a3d0:	203ff61e 	bne	r4,zero,1000a3ac <__alt_data_end+0xf800a3ac>
1000a3d4:	e100004c 	andi	r4,fp,1
1000a3d8:	d8c13115 	stw	r3,1220(sp)
1000a3dc:	20039a1e 	bne	r4,zero,1000b248 <___vfprintf_internal_r+0x144c>
1000a3e0:	d8812817 	ldw	r2,1184(sp)
1000a3e4:	10e3c83a 	sub	r17,r2,r3
1000a3e8:	8805883a 	mov	r2,r17
1000a3ec:	8a40010e 	bge	r17,r9,1000a3f4 <___vfprintf_internal_r+0x5f8>
1000a3f0:	4805883a 	mov	r2,r9
1000a3f4:	d8812b15 	stw	r2,1196(sp)
1000a3f8:	d8013415 	stw	zero,1232(sp)
1000a3fc:	98803fcc 	andi	r2,r19,255
1000a400:	1080201c 	xori	r2,r2,128
1000a404:	10bfe004 	addi	r2,r2,-128
1000a408:	10000326 	beq	r2,zero,1000a418 <___vfprintf_internal_r+0x61c>
1000a40c:	d8c12b17 	ldw	r3,1196(sp)
1000a410:	18c00044 	addi	r3,r3,1
1000a414:	d8c12b15 	stw	r3,1196(sp)
1000a418:	e0c0008c 	andi	r3,fp,2
1000a41c:	d8c12c15 	stw	r3,1200(sp)
1000a420:	18000326 	beq	r3,zero,1000a430 <___vfprintf_internal_r+0x634>
1000a424:	d8c12b17 	ldw	r3,1196(sp)
1000a428:	18c00084 	addi	r3,r3,2
1000a42c:	d8c12b15 	stw	r3,1196(sp)
1000a430:	e0c0210c 	andi	r3,fp,132
1000a434:	d8c13015 	stw	r3,1216(sp)
1000a438:	1801f81e 	bne	r3,zero,1000ac1c <___vfprintf_internal_r+0xe20>
1000a43c:	d9012e17 	ldw	r4,1208(sp)
1000a440:	d8c12b17 	ldw	r3,1196(sp)
1000a444:	20ebc83a 	sub	r21,r4,r3
1000a448:	0541f40e 	bge	zero,r21,1000ac1c <___vfprintf_internal_r+0xe20>
1000a44c:	02400404 	movi	r9,16
1000a450:	d8c12017 	ldw	r3,1152(sp)
1000a454:	d8811f17 	ldw	r2,1148(sp)
1000a458:	4d45750e 	bge	r9,r21,1000ba30 <___vfprintf_internal_r+0x1c34>
1000a45c:	014400b4 	movhi	r5,4098
1000a460:	29677384 	addi	r5,r5,-25138
1000a464:	d9413615 	stw	r5,1240(sp)
1000a468:	4827883a 	mov	r19,r9
1000a46c:	048001c4 	movi	r18,7
1000a470:	00000306 	br	1000a480 <___vfprintf_internal_r+0x684>
1000a474:	ad7ffc04 	addi	r21,r21,-16
1000a478:	42000204 	addi	r8,r8,8
1000a47c:	9d40130e 	bge	r19,r21,1000a4cc <___vfprintf_internal_r+0x6d0>
1000a480:	010400b4 	movhi	r4,4098
1000a484:	18c00404 	addi	r3,r3,16
1000a488:	10800044 	addi	r2,r2,1
1000a48c:	21277384 	addi	r4,r4,-25138
1000a490:	41000015 	stw	r4,0(r8)
1000a494:	44c00115 	stw	r19,4(r8)
1000a498:	d8c12015 	stw	r3,1152(sp)
1000a49c:	d8811f15 	stw	r2,1148(sp)
1000a4a0:	90bff40e 	bge	r18,r2,1000a474 <__alt_data_end+0xf800a474>
1000a4a4:	b809883a 	mov	r4,r23
1000a4a8:	b00b883a 	mov	r5,r22
1000a4ac:	d9811e04 	addi	r6,sp,1144
1000a4b0:	00111040 	call	10011104 <__sprint_r>
1000a4b4:	103f691e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000a4b8:	ad7ffc04 	addi	r21,r21,-16
1000a4bc:	d8c12017 	ldw	r3,1152(sp)
1000a4c0:	d8811f17 	ldw	r2,1148(sp)
1000a4c4:	da000404 	addi	r8,sp,16
1000a4c8:	9d7fed16 	blt	r19,r21,1000a480 <__alt_data_end+0xf800a480>
1000a4cc:	d9413617 	ldw	r5,1240(sp)
1000a4d0:	a8c7883a 	add	r3,r21,r3
1000a4d4:	10800044 	addi	r2,r2,1
1000a4d8:	41400015 	stw	r5,0(r8)
1000a4dc:	45400115 	stw	r21,4(r8)
1000a4e0:	d8c12015 	stw	r3,1152(sp)
1000a4e4:	d8811f15 	stw	r2,1148(sp)
1000a4e8:	010001c4 	movi	r4,7
1000a4ec:	20832b16 	blt	r4,r2,1000b19c <___vfprintf_internal_r+0x13a0>
1000a4f0:	d8812787 	ldb	r2,1182(sp)
1000a4f4:	42000204 	addi	r8,r8,8
1000a4f8:	10000c26 	beq	r2,zero,1000a52c <___vfprintf_internal_r+0x730>
1000a4fc:	d8811f17 	ldw	r2,1148(sp)
1000a500:	d9012784 	addi	r4,sp,1182
1000a504:	18c00044 	addi	r3,r3,1
1000a508:	10800044 	addi	r2,r2,1
1000a50c:	41000015 	stw	r4,0(r8)
1000a510:	01000044 	movi	r4,1
1000a514:	41000115 	stw	r4,4(r8)
1000a518:	d8c12015 	stw	r3,1152(sp)
1000a51c:	d8811f15 	stw	r2,1148(sp)
1000a520:	010001c4 	movi	r4,7
1000a524:	2082c416 	blt	r4,r2,1000b038 <___vfprintf_internal_r+0x123c>
1000a528:	42000204 	addi	r8,r8,8
1000a52c:	d8812c17 	ldw	r2,1200(sp)
1000a530:	10000c26 	beq	r2,zero,1000a564 <___vfprintf_internal_r+0x768>
1000a534:	d8811f17 	ldw	r2,1148(sp)
1000a538:	d9012704 	addi	r4,sp,1180
1000a53c:	18c00084 	addi	r3,r3,2
1000a540:	10800044 	addi	r2,r2,1
1000a544:	41000015 	stw	r4,0(r8)
1000a548:	01000084 	movi	r4,2
1000a54c:	41000115 	stw	r4,4(r8)
1000a550:	d8c12015 	stw	r3,1152(sp)
1000a554:	d8811f15 	stw	r2,1148(sp)
1000a558:	010001c4 	movi	r4,7
1000a55c:	2082be16 	blt	r4,r2,1000b058 <___vfprintf_internal_r+0x125c>
1000a560:	42000204 	addi	r8,r8,8
1000a564:	d9013017 	ldw	r4,1216(sp)
1000a568:	00802004 	movi	r2,128
1000a56c:	20822026 	beq	r4,r2,1000adf0 <___vfprintf_internal_r+0xff4>
1000a570:	d9413217 	ldw	r5,1224(sp)
1000a574:	2c67c83a 	sub	r19,r5,r17
1000a578:	04c0260e 	bge	zero,r19,1000a614 <___vfprintf_internal_r+0x818>
1000a57c:	05400404 	movi	r21,16
1000a580:	d8811f17 	ldw	r2,1148(sp)
1000a584:	acc4720e 	bge	r21,r19,1000b750 <___vfprintf_internal_r+0x1954>
1000a588:	014400b4 	movhi	r5,4098
1000a58c:	29676f84 	addi	r5,r5,-25154
1000a590:	d9412c15 	stw	r5,1200(sp)
1000a594:	048001c4 	movi	r18,7
1000a598:	00000306 	br	1000a5a8 <___vfprintf_internal_r+0x7ac>
1000a59c:	9cfffc04 	addi	r19,r19,-16
1000a5a0:	42000204 	addi	r8,r8,8
1000a5a4:	acc0110e 	bge	r21,r19,1000a5ec <___vfprintf_internal_r+0x7f0>
1000a5a8:	18c00404 	addi	r3,r3,16
1000a5ac:	10800044 	addi	r2,r2,1
1000a5b0:	45000015 	stw	r20,0(r8)
1000a5b4:	45400115 	stw	r21,4(r8)
1000a5b8:	d8c12015 	stw	r3,1152(sp)
1000a5bc:	d8811f15 	stw	r2,1148(sp)
1000a5c0:	90bff60e 	bge	r18,r2,1000a59c <__alt_data_end+0xf800a59c>
1000a5c4:	b809883a 	mov	r4,r23
1000a5c8:	b00b883a 	mov	r5,r22
1000a5cc:	d9811e04 	addi	r6,sp,1144
1000a5d0:	00111040 	call	10011104 <__sprint_r>
1000a5d4:	103f211e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000a5d8:	9cfffc04 	addi	r19,r19,-16
1000a5dc:	d8c12017 	ldw	r3,1152(sp)
1000a5e0:	d8811f17 	ldw	r2,1148(sp)
1000a5e4:	da000404 	addi	r8,sp,16
1000a5e8:	acffef16 	blt	r21,r19,1000a5a8 <__alt_data_end+0xf800a5a8>
1000a5ec:	d9012c17 	ldw	r4,1200(sp)
1000a5f0:	1cc7883a 	add	r3,r3,r19
1000a5f4:	10800044 	addi	r2,r2,1
1000a5f8:	41000015 	stw	r4,0(r8)
1000a5fc:	44c00115 	stw	r19,4(r8)
1000a600:	d8c12015 	stw	r3,1152(sp)
1000a604:	d8811f15 	stw	r2,1148(sp)
1000a608:	010001c4 	movi	r4,7
1000a60c:	20828216 	blt	r4,r2,1000b018 <___vfprintf_internal_r+0x121c>
1000a610:	42000204 	addi	r8,r8,8
1000a614:	e080400c 	andi	r2,fp,256
1000a618:	1001ac1e 	bne	r2,zero,1000accc <___vfprintf_internal_r+0xed0>
1000a61c:	d8811f17 	ldw	r2,1148(sp)
1000a620:	d9413117 	ldw	r5,1220(sp)
1000a624:	1c47883a 	add	r3,r3,r17
1000a628:	10800044 	addi	r2,r2,1
1000a62c:	41400015 	stw	r5,0(r8)
1000a630:	44400115 	stw	r17,4(r8)
1000a634:	d8c12015 	stw	r3,1152(sp)
1000a638:	d8811f15 	stw	r2,1148(sp)
1000a63c:	010001c4 	movi	r4,7
1000a640:	20825d16 	blt	r4,r2,1000afb8 <___vfprintf_internal_r+0x11bc>
1000a644:	42000204 	addi	r8,r8,8
1000a648:	e080010c 	andi	r2,fp,4
1000a64c:	10003126 	beq	r2,zero,1000a714 <___vfprintf_internal_r+0x918>
1000a650:	d8812e17 	ldw	r2,1208(sp)
1000a654:	d9012b17 	ldw	r4,1196(sp)
1000a658:	1121c83a 	sub	r16,r2,r4
1000a65c:	04002d0e 	bge	zero,r16,1000a714 <___vfprintf_internal_r+0x918>
1000a660:	04400404 	movi	r17,16
1000a664:	d8811f17 	ldw	r2,1148(sp)
1000a668:	8c05340e 	bge	r17,r16,1000bb3c <___vfprintf_internal_r+0x1d40>
1000a66c:	010400b4 	movhi	r4,4098
1000a670:	21277384 	addi	r4,r4,-25138
1000a674:	d9013615 	stw	r4,1240(sp)
1000a678:	048001c4 	movi	r18,7
1000a67c:	00000306 	br	1000a68c <___vfprintf_internal_r+0x890>
1000a680:	843ffc04 	addi	r16,r16,-16
1000a684:	42000204 	addi	r8,r8,8
1000a688:	8c00130e 	bge	r17,r16,1000a6d8 <___vfprintf_internal_r+0x8dc>
1000a68c:	014400b4 	movhi	r5,4098
1000a690:	18c00404 	addi	r3,r3,16
1000a694:	10800044 	addi	r2,r2,1
1000a698:	29677384 	addi	r5,r5,-25138
1000a69c:	41400015 	stw	r5,0(r8)
1000a6a0:	44400115 	stw	r17,4(r8)
1000a6a4:	d8c12015 	stw	r3,1152(sp)
1000a6a8:	d8811f15 	stw	r2,1148(sp)
1000a6ac:	90bff40e 	bge	r18,r2,1000a680 <__alt_data_end+0xf800a680>
1000a6b0:	b809883a 	mov	r4,r23
1000a6b4:	b00b883a 	mov	r5,r22
1000a6b8:	d9811e04 	addi	r6,sp,1144
1000a6bc:	00111040 	call	10011104 <__sprint_r>
1000a6c0:	103ee61e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000a6c4:	843ffc04 	addi	r16,r16,-16
1000a6c8:	d8c12017 	ldw	r3,1152(sp)
1000a6cc:	d8811f17 	ldw	r2,1148(sp)
1000a6d0:	da000404 	addi	r8,sp,16
1000a6d4:	8c3fed16 	blt	r17,r16,1000a68c <__alt_data_end+0xf800a68c>
1000a6d8:	d9013617 	ldw	r4,1240(sp)
1000a6dc:	1c07883a 	add	r3,r3,r16
1000a6e0:	10800044 	addi	r2,r2,1
1000a6e4:	41000015 	stw	r4,0(r8)
1000a6e8:	44000115 	stw	r16,4(r8)
1000a6ec:	d8c12015 	stw	r3,1152(sp)
1000a6f0:	d8811f15 	stw	r2,1148(sp)
1000a6f4:	010001c4 	movi	r4,7
1000a6f8:	2080060e 	bge	r4,r2,1000a714 <___vfprintf_internal_r+0x918>
1000a6fc:	b809883a 	mov	r4,r23
1000a700:	b00b883a 	mov	r5,r22
1000a704:	d9811e04 	addi	r6,sp,1144
1000a708:	00111040 	call	10011104 <__sprint_r>
1000a70c:	103ed31e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000a710:	d8c12017 	ldw	r3,1152(sp)
1000a714:	df012b17 	ldw	fp,1196(sp)
1000a718:	d9412e17 	ldw	r5,1208(sp)
1000a71c:	e140010e 	bge	fp,r5,1000a724 <___vfprintf_internal_r+0x928>
1000a720:	2839883a 	mov	fp,r5
1000a724:	d8812f17 	ldw	r2,1212(sp)
1000a728:	1705883a 	add	r2,r2,fp
1000a72c:	d8812f15 	stw	r2,1212(sp)
1000a730:	1802291e 	bne	r3,zero,1000afd8 <___vfprintf_internal_r+0x11dc>
1000a734:	d8c12a17 	ldw	r3,1192(sp)
1000a738:	d8011f15 	stw	zero,1148(sp)
1000a73c:	da000404 	addi	r8,sp,16
1000a740:	18800007 	ldb	r2,0(r3)
1000a744:	103ded1e 	bne	r2,zero,10009efc <__alt_data_end+0xf8009efc>
1000a748:	dc012a17 	ldw	r16,1192(sp)
1000a74c:	003e0506 	br	10009f64 <__alt_data_end+0xf8009f64>
1000a750:	d9012d17 	ldw	r4,1204(sp)
1000a754:	d9412d17 	ldw	r5,1204(sp)
1000a758:	da012a17 	ldw	r8,1192(sp)
1000a75c:	21000017 	ldw	r4,0(r4)
1000a760:	29400117 	ldw	r5,4(r5)
1000a764:	df012a15 	stw	fp,1192(sp)
1000a768:	9839883a 	mov	fp,r19
1000a76c:	dcc12b03 	ldbu	r19,1196(sp)
1000a770:	d9013715 	stw	r4,1244(sp)
1000a774:	d9413915 	stw	r5,1252(sp)
1000a778:	da013f15 	stw	r8,1276(sp)
1000a77c:	da413e15 	stw	r9,1272(sp)
1000a780:	dcc12785 	stb	r19,1182(sp)
1000a784:	0010d600 	call	10010d60 <__fpclassifyd>
1000a788:	d8c12d17 	ldw	r3,1204(sp)
1000a78c:	04400044 	movi	r17,1
1000a790:	da013f17 	ldw	r8,1276(sp)
1000a794:	1c800204 	addi	r18,r3,8
1000a798:	da413e17 	ldw	r9,1272(sp)
1000a79c:	d9013717 	ldw	r4,1244(sp)
1000a7a0:	d9413917 	ldw	r5,1252(sp)
1000a7a4:	1443451e 	bne	r2,r17,1000b4bc <___vfprintf_internal_r+0x16c0>
1000a7a8:	000d883a 	mov	r6,zero
1000a7ac:	000f883a 	mov	r7,zero
1000a7b0:	0014f980 	call	10014f98 <__ledf2>
1000a7b4:	da013f17 	ldw	r8,1276(sp)
1000a7b8:	1004fe16 	blt	r2,zero,1000bbb4 <___vfprintf_internal_r+0x1db8>
1000a7bc:	dcc12783 	ldbu	r19,1182(sp)
1000a7c0:	008011c4 	movi	r2,71
1000a7c4:	14045d0e 	bge	r2,r16,1000b93c <___vfprintf_internal_r+0x1b40>
1000a7c8:	014400b4 	movhi	r5,4098
1000a7cc:	29676004 	addi	r5,r5,-25216
1000a7d0:	d9413115 	stw	r5,1220(sp)
1000a7d4:	00c000c4 	movi	r3,3
1000a7d8:	00bfdfc4 	movi	r2,-129
1000a7dc:	d8c12b15 	stw	r3,1196(sp)
1000a7e0:	e0b8703a 	and	fp,fp,r2
1000a7e4:	dc812d15 	stw	r18,1204(sp)
1000a7e8:	1823883a 	mov	r17,r3
1000a7ec:	d8013215 	stw	zero,1224(sp)
1000a7f0:	d8013415 	stw	zero,1232(sp)
1000a7f4:	003f0106 	br	1000a3fc <__alt_data_end+0xf800a3fc>
1000a7f8:	9cc00214 	ori	r19,r19,8
1000a7fc:	e005883a 	mov	r2,fp
1000a800:	e4000007 	ldb	r16,0(fp)
1000a804:	003de506 	br	10009f9c <__alt_data_end+0xf8009f9c>
1000a808:	da012a17 	ldw	r8,1192(sp)
1000a80c:	df012a15 	stw	fp,1192(sp)
1000a810:	9f000414 	ori	fp,r19,16
1000a814:	e0c0080c 	andi	r3,fp,32
1000a818:	d8812d17 	ldw	r2,1204(sp)
1000a81c:	18007626 	beq	r3,zero,1000a9f8 <___vfprintf_internal_r+0xbfc>
1000a820:	d9412d17 	ldw	r5,1204(sp)
1000a824:	14800017 	ldw	r18,0(r2)
1000a828:	15400117 	ldw	r21,4(r2)
1000a82c:	29400204 	addi	r5,r5,8
1000a830:	d9412d15 	stw	r5,1204(sp)
1000a834:	0005883a 	mov	r2,zero
1000a838:	9546b03a 	or	r3,r18,r21
1000a83c:	d8012785 	stb	zero,1182(sp)
1000a840:	da413215 	stw	r9,1224(sp)
1000a844:	0027883a 	mov	r19,zero
1000a848:	003ecd06 	br	1000a380 <__alt_data_end+0xf800a380>
1000a84c:	da012a17 	ldw	r8,1192(sp)
1000a850:	df012a15 	stw	fp,1192(sp)
1000a854:	9f000414 	ori	fp,r19,16
1000a858:	e0c0080c 	andi	r3,fp,32
1000a85c:	d8812d17 	ldw	r2,1204(sp)
1000a860:	18002c26 	beq	r3,zero,1000a914 <___vfprintf_internal_r+0xb18>
1000a864:	d9012d17 	ldw	r4,1204(sp)
1000a868:	14800017 	ldw	r18,0(r2)
1000a86c:	15400117 	ldw	r21,4(r2)
1000a870:	21000204 	addi	r4,r4,8
1000a874:	d9012d15 	stw	r4,1204(sp)
1000a878:	00800044 	movi	r2,1
1000a87c:	9546b03a 	or	r3,r18,r21
1000a880:	003fee06 	br	1000a83c <__alt_data_end+0xf800a83c>
1000a884:	da012a17 	ldw	r8,1192(sp)
1000a888:	df012a15 	stw	fp,1192(sp)
1000a88c:	9839883a 	mov	fp,r19
1000a890:	dcc12b03 	ldbu	r19,1196(sp)
1000a894:	014400b4 	movhi	r5,4098
1000a898:	29676304 	addi	r5,r5,-25204
1000a89c:	dcc12785 	stb	r19,1182(sp)
1000a8a0:	d9413b15 	stw	r5,1260(sp)
1000a8a4:	e0c0080c 	andi	r3,fp,32
1000a8a8:	d8812d17 	ldw	r2,1204(sp)
1000a8ac:	18002e26 	beq	r3,zero,1000a968 <___vfprintf_internal_r+0xb6c>
1000a8b0:	d9412d17 	ldw	r5,1204(sp)
1000a8b4:	14800017 	ldw	r18,0(r2)
1000a8b8:	15400117 	ldw	r21,4(r2)
1000a8bc:	29400204 	addi	r5,r5,8
1000a8c0:	d9412d15 	stw	r5,1204(sp)
1000a8c4:	e080004c 	andi	r2,fp,1
1000a8c8:	10025c26 	beq	r2,zero,1000b23c <___vfprintf_internal_r+0x1440>
1000a8cc:	9546b03a 	or	r3,r18,r21
1000a8d0:	18038f26 	beq	r3,zero,1000b710 <___vfprintf_internal_r+0x1914>
1000a8d4:	00800c04 	movi	r2,48
1000a8d8:	d8812705 	stb	r2,1180(sp)
1000a8dc:	dc012745 	stb	r16,1181(sp)
1000a8e0:	e7000094 	ori	fp,fp,2
1000a8e4:	00800084 	movi	r2,2
1000a8e8:	003fd406 	br	1000a83c <__alt_data_end+0xf800a83c>
1000a8ec:	9cc00814 	ori	r19,r19,32
1000a8f0:	e005883a 	mov	r2,fp
1000a8f4:	e4000007 	ldb	r16,0(fp)
1000a8f8:	003da806 	br	10009f9c <__alt_data_end+0xf8009f9c>
1000a8fc:	da012a17 	ldw	r8,1192(sp)
1000a900:	df012a15 	stw	fp,1192(sp)
1000a904:	9839883a 	mov	fp,r19
1000a908:	e0c0080c 	andi	r3,fp,32
1000a90c:	d8812d17 	ldw	r2,1204(sp)
1000a910:	183fd41e 	bne	r3,zero,1000a864 <__alt_data_end+0xf800a864>
1000a914:	e0c0040c 	andi	r3,fp,16
1000a918:	18035f26 	beq	r3,zero,1000b698 <___vfprintf_internal_r+0x189c>
1000a91c:	d9412d17 	ldw	r5,1204(sp)
1000a920:	14800017 	ldw	r18,0(r2)
1000a924:	002b883a 	mov	r21,zero
1000a928:	29400104 	addi	r5,r5,4
1000a92c:	d9412d15 	stw	r5,1204(sp)
1000a930:	00800044 	movi	r2,1
1000a934:	9007883a 	mov	r3,r18
1000a938:	003fc006 	br	1000a83c <__alt_data_end+0xf800a83c>
1000a93c:	da012a17 	ldw	r8,1192(sp)
1000a940:	df012a15 	stw	fp,1192(sp)
1000a944:	9839883a 	mov	fp,r19
1000a948:	dcc12b03 	ldbu	r19,1196(sp)
1000a94c:	010400b4 	movhi	r4,4098
1000a950:	21276804 	addi	r4,r4,-25184
1000a954:	d9013b15 	stw	r4,1260(sp)
1000a958:	dcc12785 	stb	r19,1182(sp)
1000a95c:	e0c0080c 	andi	r3,fp,32
1000a960:	d8812d17 	ldw	r2,1204(sp)
1000a964:	183fd21e 	bne	r3,zero,1000a8b0 <__alt_data_end+0xf800a8b0>
1000a968:	e0c0040c 	andi	r3,fp,16
1000a96c:	18035426 	beq	r3,zero,1000b6c0 <___vfprintf_internal_r+0x18c4>
1000a970:	d8c12d17 	ldw	r3,1204(sp)
1000a974:	14800017 	ldw	r18,0(r2)
1000a978:	002b883a 	mov	r21,zero
1000a97c:	18c00104 	addi	r3,r3,4
1000a980:	d8c12d15 	stw	r3,1204(sp)
1000a984:	003fcf06 	br	1000a8c4 <__alt_data_end+0xf800a8c4>
1000a988:	e4000007 	ldb	r16,0(fp)
1000a98c:	00801b04 	movi	r2,108
1000a990:	8083f726 	beq	r16,r2,1000b970 <___vfprintf_internal_r+0x1b74>
1000a994:	9cc00414 	ori	r19,r19,16
1000a998:	e005883a 	mov	r2,fp
1000a99c:	003d7f06 	br	10009f9c <__alt_data_end+0xf8009f9c>
1000a9a0:	da012a17 	ldw	r8,1192(sp)
1000a9a4:	df012a15 	stw	fp,1192(sp)
1000a9a8:	9839883a 	mov	fp,r19
1000a9ac:	dcc12b03 	ldbu	r19,1196(sp)
1000a9b0:	e080080c 	andi	r2,fp,32
1000a9b4:	dcc12785 	stb	r19,1182(sp)
1000a9b8:	10032226 	beq	r2,zero,1000b644 <___vfprintf_internal_r+0x1848>
1000a9bc:	d9412d17 	ldw	r5,1204(sp)
1000a9c0:	d9012f17 	ldw	r4,1212(sp)
1000a9c4:	28800017 	ldw	r2,0(r5)
1000a9c8:	2007d7fa 	srai	r3,r4,31
1000a9cc:	29400104 	addi	r5,r5,4
1000a9d0:	d9412d15 	stw	r5,1204(sp)
1000a9d4:	11000015 	stw	r4,0(r2)
1000a9d8:	10c00115 	stw	r3,4(r2)
1000a9dc:	003d4406 	br	10009ef0 <__alt_data_end+0xf8009ef0>
1000a9e0:	da012a17 	ldw	r8,1192(sp)
1000a9e4:	df012a15 	stw	fp,1192(sp)
1000a9e8:	9839883a 	mov	fp,r19
1000a9ec:	e0c0080c 	andi	r3,fp,32
1000a9f0:	d8812d17 	ldw	r2,1204(sp)
1000a9f4:	183f8a1e 	bne	r3,zero,1000a820 <__alt_data_end+0xf800a820>
1000a9f8:	e0c0040c 	andi	r3,fp,16
1000a9fc:	18031c26 	beq	r3,zero,1000b670 <___vfprintf_internal_r+0x1874>
1000aa00:	14800017 	ldw	r18,0(r2)
1000aa04:	d8812d17 	ldw	r2,1204(sp)
1000aa08:	002b883a 	mov	r21,zero
1000aa0c:	9007883a 	mov	r3,r18
1000aa10:	10800104 	addi	r2,r2,4
1000aa14:	d8812d15 	stw	r2,1204(sp)
1000aa18:	0005883a 	mov	r2,zero
1000aa1c:	003f8706 	br	1000a83c <__alt_data_end+0xf800a83c>
1000aa20:	d9412d17 	ldw	r5,1204(sp)
1000aa24:	00800c04 	movi	r2,48
1000aa28:	d8812705 	stb	r2,1180(sp)
1000aa2c:	2c800017 	ldw	r18,0(r5)
1000aa30:	00801e04 	movi	r2,120
1000aa34:	d8812745 	stb	r2,1181(sp)
1000aa38:	008400b4 	movhi	r2,4098
1000aa3c:	10a76804 	addi	r2,r2,-25184
1000aa40:	29400104 	addi	r5,r5,4
1000aa44:	da012a17 	ldw	r8,1192(sp)
1000aa48:	d8813b15 	stw	r2,1260(sp)
1000aa4c:	df012a15 	stw	fp,1192(sp)
1000aa50:	002b883a 	mov	r21,zero
1000aa54:	9f000094 	ori	fp,r19,2
1000aa58:	d9412d15 	stw	r5,1204(sp)
1000aa5c:	00800084 	movi	r2,2
1000aa60:	04001e04 	movi	r16,120
1000aa64:	9007883a 	mov	r3,r18
1000aa68:	003f7406 	br	1000a83c <__alt_data_end+0xf800a83c>
1000aa6c:	da012a17 	ldw	r8,1192(sp)
1000aa70:	df012a15 	stw	fp,1192(sp)
1000aa74:	9839883a 	mov	fp,r19
1000aa78:	dcc12b03 	ldbu	r19,1196(sp)
1000aa7c:	e080080c 	andi	r2,fp,32
1000aa80:	d8c12d17 	ldw	r3,1204(sp)
1000aa84:	dcc12785 	stb	r19,1182(sp)
1000aa88:	103e321e 	bne	r2,zero,1000a354 <__alt_data_end+0xf800a354>
1000aa8c:	e080040c 	andi	r2,fp,16
1000aa90:	10031326 	beq	r2,zero,1000b6e0 <___vfprintf_internal_r+0x18e4>
1000aa94:	1c800017 	ldw	r18,0(r3)
1000aa98:	d9412d17 	ldw	r5,1204(sp)
1000aa9c:	902bd7fa 	srai	r21,r18,31
1000aaa0:	29400104 	addi	r5,r5,4
1000aaa4:	d9412d15 	stw	r5,1204(sp)
1000aaa8:	a805883a 	mov	r2,r21
1000aaac:	003e2f06 	br	1000a36c <__alt_data_end+0xf800a36c>
1000aab0:	9cc01014 	ori	r19,r19,64
1000aab4:	e005883a 	mov	r2,fp
1000aab8:	e4000007 	ldb	r16,0(fp)
1000aabc:	003d3706 	br	10009f9c <__alt_data_end+0xf8009f9c>
1000aac0:	d8c12d17 	ldw	r3,1204(sp)
1000aac4:	d9012d17 	ldw	r4,1204(sp)
1000aac8:	da012a17 	ldw	r8,1192(sp)
1000aacc:	18800017 	ldw	r2,0(r3)
1000aad0:	21000104 	addi	r4,r4,4
1000aad4:	00c00044 	movi	r3,1
1000aad8:	df012a15 	stw	fp,1192(sp)
1000aadc:	d8c12b15 	stw	r3,1196(sp)
1000aae0:	9839883a 	mov	fp,r19
1000aae4:	d8012785 	stb	zero,1182(sp)
1000aae8:	d8810405 	stb	r2,1040(sp)
1000aaec:	d9012d15 	stw	r4,1204(sp)
1000aaf0:	1823883a 	mov	r17,r3
1000aaf4:	d8c10404 	addi	r3,sp,1040
1000aaf8:	d8013215 	stw	zero,1224(sp)
1000aafc:	d8013415 	stw	zero,1232(sp)
1000ab00:	d8c13115 	stw	r3,1220(sp)
1000ab04:	0005883a 	mov	r2,zero
1000ab08:	003e4306 	br	1000a418 <__alt_data_end+0xf800a418>
1000ab0c:	d8812b07 	ldb	r2,1196(sp)
1000ab10:	1002fc1e 	bne	r2,zero,1000b704 <___vfprintf_internal_r+0x1908>
1000ab14:	00c00804 	movi	r3,32
1000ab18:	d8c12b05 	stb	r3,1196(sp)
1000ab1c:	e005883a 	mov	r2,fp
1000ab20:	e4000007 	ldb	r16,0(fp)
1000ab24:	003d1d06 	br	10009f9c <__alt_data_end+0xf8009f9c>
1000ab28:	9cc00054 	ori	r19,r19,1
1000ab2c:	e005883a 	mov	r2,fp
1000ab30:	e4000007 	ldb	r16,0(fp)
1000ab34:	003d1906 	br	10009f9c <__alt_data_end+0xf8009f9c>
1000ab38:	d9012d17 	ldw	r4,1204(sp)
1000ab3c:	d9412d17 	ldw	r5,1204(sp)
1000ab40:	21000017 	ldw	r4,0(r4)
1000ab44:	28c00104 	addi	r3,r5,4
1000ab48:	d9012e15 	stw	r4,1208(sp)
1000ab4c:	20038c16 	blt	r4,zero,1000b980 <___vfprintf_internal_r+0x1b84>
1000ab50:	d8c12d15 	stw	r3,1204(sp)
1000ab54:	e005883a 	mov	r2,fp
1000ab58:	e4000007 	ldb	r16,0(fp)
1000ab5c:	003d0f06 	br	10009f9c <__alt_data_end+0xf8009f9c>
1000ab60:	00c00ac4 	movi	r3,43
1000ab64:	d8c12b05 	stb	r3,1196(sp)
1000ab68:	e005883a 	mov	r2,fp
1000ab6c:	e4000007 	ldb	r16,0(fp)
1000ab70:	003d0a06 	br	10009f9c <__alt_data_end+0xf8009f9c>
1000ab74:	d8c12d17 	ldw	r3,1204(sp)
1000ab78:	d9012d17 	ldw	r4,1204(sp)
1000ab7c:	da012a17 	ldw	r8,1192(sp)
1000ab80:	18c00017 	ldw	r3,0(r3)
1000ab84:	df012a15 	stw	fp,1192(sp)
1000ab88:	d8012785 	stb	zero,1182(sp)
1000ab8c:	d8c13115 	stw	r3,1220(sp)
1000ab90:	9839883a 	mov	fp,r19
1000ab94:	24800104 	addi	r18,r4,4
1000ab98:	1803f726 	beq	r3,zero,1000bb78 <___vfprintf_internal_r+0x1d7c>
1000ab9c:	d9013117 	ldw	r4,1220(sp)
1000aba0:	48038916 	blt	r9,zero,1000b9c8 <___vfprintf_internal_r+0x1bcc>
1000aba4:	480d883a 	mov	r6,r9
1000aba8:	000b883a 	mov	r5,zero
1000abac:	da013f15 	stw	r8,1276(sp)
1000abb0:	da413e15 	stw	r9,1272(sp)
1000abb4:	000f4100 	call	1000f410 <memchr>
1000abb8:	da013f17 	ldw	r8,1276(sp)
1000abbc:	da413e17 	ldw	r9,1272(sp)
1000abc0:	10045926 	beq	r2,zero,1000bd28 <___vfprintf_internal_r+0x1f2c>
1000abc4:	d8c13117 	ldw	r3,1220(sp)
1000abc8:	10e3c83a 	sub	r17,r2,r3
1000abcc:	4c433516 	blt	r9,r17,1000b8a4 <___vfprintf_internal_r+0x1aa8>
1000abd0:	8805883a 	mov	r2,r17
1000abd4:	88038116 	blt	r17,zero,1000b9dc <___vfprintf_internal_r+0x1be0>
1000abd8:	dcc12783 	ldbu	r19,1182(sp)
1000abdc:	d8812b15 	stw	r2,1196(sp)
1000abe0:	dc812d15 	stw	r18,1204(sp)
1000abe4:	d8013215 	stw	zero,1224(sp)
1000abe8:	d8013415 	stw	zero,1232(sp)
1000abec:	003e0306 	br	1000a3fc <__alt_data_end+0xf800a3fc>
1000abf0:	da012a17 	ldw	r8,1192(sp)
1000abf4:	df012a15 	stw	fp,1192(sp)
1000abf8:	9839883a 	mov	fp,r19
1000abfc:	dcc12b03 	ldbu	r19,1196(sp)
1000ac00:	dcc12785 	stb	r19,1182(sp)
1000ac04:	803d8f26 	beq	r16,zero,1000a244 <__alt_data_end+0xf800a244>
1000ac08:	00c00044 	movi	r3,1
1000ac0c:	d8c12b15 	stw	r3,1196(sp)
1000ac10:	dc010405 	stb	r16,1040(sp)
1000ac14:	d8012785 	stb	zero,1182(sp)
1000ac18:	003fb506 	br	1000aaf0 <__alt_data_end+0xf800aaf0>
1000ac1c:	d8c12017 	ldw	r3,1152(sp)
1000ac20:	003e3506 	br	1000a4f8 <__alt_data_end+0xf800a4f8>
1000ac24:	10803fcc 	andi	r2,r2,255
1000ac28:	00c00044 	movi	r3,1
1000ac2c:	10fddc1e 	bne	r2,r3,1000a3a0 <__alt_data_end+0xf800a3a0>
1000ac30:	a800021e 	bne	r21,zero,1000ac3c <___vfprintf_internal_r+0xe40>
1000ac34:	00800244 	movi	r2,9
1000ac38:	14801e2e 	bgeu	r2,r18,1000acb4 <___vfprintf_internal_r+0xeb8>
1000ac3c:	dc012b15 	stw	r16,1196(sp)
1000ac40:	dc410e04 	addi	r17,sp,1080
1000ac44:	9021883a 	mov	r16,r18
1000ac48:	da012c15 	stw	r8,1200(sp)
1000ac4c:	a825883a 	mov	r18,r21
1000ac50:	482b883a 	mov	r21,r9
1000ac54:	8009883a 	mov	r4,r16
1000ac58:	900b883a 	mov	r5,r18
1000ac5c:	01800284 	movi	r6,10
1000ac60:	000f883a 	mov	r7,zero
1000ac64:	00135fc0 	call	100135fc <__umoddi3>
1000ac68:	10800c04 	addi	r2,r2,48
1000ac6c:	8c7fffc4 	addi	r17,r17,-1
1000ac70:	8009883a 	mov	r4,r16
1000ac74:	900b883a 	mov	r5,r18
1000ac78:	01800284 	movi	r6,10
1000ac7c:	000f883a 	mov	r7,zero
1000ac80:	88800005 	stb	r2,0(r17)
1000ac84:	0012fbc0 	call	10012fbc <__udivdi3>
1000ac88:	1021883a 	mov	r16,r2
1000ac8c:	10c4b03a 	or	r2,r2,r3
1000ac90:	1825883a 	mov	r18,r3
1000ac94:	103fef1e 	bne	r2,zero,1000ac54 <__alt_data_end+0xf800ac54>
1000ac98:	d9012817 	ldw	r4,1184(sp)
1000ac9c:	dc413115 	stw	r17,1220(sp)
1000aca0:	dc012b17 	ldw	r16,1196(sp)
1000aca4:	da012c17 	ldw	r8,1200(sp)
1000aca8:	a813883a 	mov	r9,r21
1000acac:	2463c83a 	sub	r17,r4,r17
1000acb0:	003dcd06 	br	1000a3e8 <__alt_data_end+0xf800a3e8>
1000acb4:	94800c04 	addi	r18,r18,48
1000acb8:	d8c10dc4 	addi	r3,sp,1079
1000acbc:	dc810dc5 	stb	r18,1079(sp)
1000acc0:	dc413c17 	ldw	r17,1264(sp)
1000acc4:	d8c13115 	stw	r3,1220(sp)
1000acc8:	003dc706 	br	1000a3e8 <__alt_data_end+0xf800a3e8>
1000accc:	00801944 	movi	r2,101
1000acd0:	1400720e 	bge	r2,r16,1000ae9c <___vfprintf_internal_r+0x10a0>
1000acd4:	d9013717 	ldw	r4,1244(sp)
1000acd8:	d9413917 	ldw	r5,1252(sp)
1000acdc:	000d883a 	mov	r6,zero
1000ace0:	000f883a 	mov	r7,zero
1000ace4:	d8c13d15 	stw	r3,1268(sp)
1000ace8:	da013f15 	stw	r8,1276(sp)
1000acec:	0014e340 	call	10014e34 <__eqdf2>
1000acf0:	d8c13d17 	ldw	r3,1268(sp)
1000acf4:	da013f17 	ldw	r8,1276(sp)
1000acf8:	1000f41e 	bne	r2,zero,1000b0cc <___vfprintf_internal_r+0x12d0>
1000acfc:	d8811f17 	ldw	r2,1148(sp)
1000ad00:	010400b4 	movhi	r4,4098
1000ad04:	21276f04 	addi	r4,r4,-25156
1000ad08:	18c00044 	addi	r3,r3,1
1000ad0c:	10800044 	addi	r2,r2,1
1000ad10:	41000015 	stw	r4,0(r8)
1000ad14:	01000044 	movi	r4,1
1000ad18:	41000115 	stw	r4,4(r8)
1000ad1c:	d8c12015 	stw	r3,1152(sp)
1000ad20:	d8811f15 	stw	r2,1148(sp)
1000ad24:	010001c4 	movi	r4,7
1000ad28:	20828d16 	blt	r4,r2,1000b760 <___vfprintf_internal_r+0x1964>
1000ad2c:	42000204 	addi	r8,r8,8
1000ad30:	d8812617 	ldw	r2,1176(sp)
1000ad34:	d9413317 	ldw	r5,1228(sp)
1000ad38:	11400216 	blt	r2,r5,1000ad44 <___vfprintf_internal_r+0xf48>
1000ad3c:	e080004c 	andi	r2,fp,1
1000ad40:	103e4126 	beq	r2,zero,1000a648 <__alt_data_end+0xf800a648>
1000ad44:	d8813817 	ldw	r2,1248(sp)
1000ad48:	d9013517 	ldw	r4,1236(sp)
1000ad4c:	d9413817 	ldw	r5,1248(sp)
1000ad50:	1887883a 	add	r3,r3,r2
1000ad54:	d8811f17 	ldw	r2,1148(sp)
1000ad58:	41000015 	stw	r4,0(r8)
1000ad5c:	41400115 	stw	r5,4(r8)
1000ad60:	10800044 	addi	r2,r2,1
1000ad64:	d8c12015 	stw	r3,1152(sp)
1000ad68:	d8811f15 	stw	r2,1148(sp)
1000ad6c:	010001c4 	movi	r4,7
1000ad70:	20830916 	blt	r4,r2,1000b998 <___vfprintf_internal_r+0x1b9c>
1000ad74:	42000204 	addi	r8,r8,8
1000ad78:	d8813317 	ldw	r2,1228(sp)
1000ad7c:	143fffc4 	addi	r16,r2,-1
1000ad80:	043e310e 	bge	zero,r16,1000a648 <__alt_data_end+0xf800a648>
1000ad84:	04400404 	movi	r17,16
1000ad88:	d8811f17 	ldw	r2,1148(sp)
1000ad8c:	8c007e0e 	bge	r17,r16,1000af88 <___vfprintf_internal_r+0x118c>
1000ad90:	014400b4 	movhi	r5,4098
1000ad94:	29676f84 	addi	r5,r5,-25154
1000ad98:	d9412c15 	stw	r5,1200(sp)
1000ad9c:	04c001c4 	movi	r19,7
1000ada0:	00000306 	br	1000adb0 <___vfprintf_internal_r+0xfb4>
1000ada4:	42000204 	addi	r8,r8,8
1000ada8:	843ffc04 	addi	r16,r16,-16
1000adac:	8c00790e 	bge	r17,r16,1000af94 <___vfprintf_internal_r+0x1198>
1000adb0:	18c00404 	addi	r3,r3,16
1000adb4:	10800044 	addi	r2,r2,1
1000adb8:	45000015 	stw	r20,0(r8)
1000adbc:	44400115 	stw	r17,4(r8)
1000adc0:	d8c12015 	stw	r3,1152(sp)
1000adc4:	d8811f15 	stw	r2,1148(sp)
1000adc8:	98bff60e 	bge	r19,r2,1000ada4 <__alt_data_end+0xf800ada4>
1000adcc:	b809883a 	mov	r4,r23
1000add0:	b00b883a 	mov	r5,r22
1000add4:	d9811e04 	addi	r6,sp,1144
1000add8:	00111040 	call	10011104 <__sprint_r>
1000addc:	103d1f1e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000ade0:	d8c12017 	ldw	r3,1152(sp)
1000ade4:	d8811f17 	ldw	r2,1148(sp)
1000ade8:	da000404 	addi	r8,sp,16
1000adec:	003fee06 	br	1000ada8 <__alt_data_end+0xf800ada8>
1000adf0:	d9412e17 	ldw	r5,1208(sp)
1000adf4:	d8812b17 	ldw	r2,1196(sp)
1000adf8:	28a7c83a 	sub	r19,r5,r2
1000adfc:	04fddc0e 	bge	zero,r19,1000a570 <__alt_data_end+0xf800a570>
1000ae00:	05400404 	movi	r21,16
1000ae04:	d8811f17 	ldw	r2,1148(sp)
1000ae08:	acc3870e 	bge	r21,r19,1000bc28 <___vfprintf_internal_r+0x1e2c>
1000ae0c:	014400b4 	movhi	r5,4098
1000ae10:	29676f84 	addi	r5,r5,-25154
1000ae14:	d9412c15 	stw	r5,1200(sp)
1000ae18:	048001c4 	movi	r18,7
1000ae1c:	00000306 	br	1000ae2c <___vfprintf_internal_r+0x1030>
1000ae20:	9cfffc04 	addi	r19,r19,-16
1000ae24:	42000204 	addi	r8,r8,8
1000ae28:	acc0110e 	bge	r21,r19,1000ae70 <___vfprintf_internal_r+0x1074>
1000ae2c:	18c00404 	addi	r3,r3,16
1000ae30:	10800044 	addi	r2,r2,1
1000ae34:	45000015 	stw	r20,0(r8)
1000ae38:	45400115 	stw	r21,4(r8)
1000ae3c:	d8c12015 	stw	r3,1152(sp)
1000ae40:	d8811f15 	stw	r2,1148(sp)
1000ae44:	90bff60e 	bge	r18,r2,1000ae20 <__alt_data_end+0xf800ae20>
1000ae48:	b809883a 	mov	r4,r23
1000ae4c:	b00b883a 	mov	r5,r22
1000ae50:	d9811e04 	addi	r6,sp,1144
1000ae54:	00111040 	call	10011104 <__sprint_r>
1000ae58:	103d001e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000ae5c:	9cfffc04 	addi	r19,r19,-16
1000ae60:	d8c12017 	ldw	r3,1152(sp)
1000ae64:	d8811f17 	ldw	r2,1148(sp)
1000ae68:	da000404 	addi	r8,sp,16
1000ae6c:	acffef16 	blt	r21,r19,1000ae2c <__alt_data_end+0xf800ae2c>
1000ae70:	d9012c17 	ldw	r4,1200(sp)
1000ae74:	1cc7883a 	add	r3,r3,r19
1000ae78:	10800044 	addi	r2,r2,1
1000ae7c:	41000015 	stw	r4,0(r8)
1000ae80:	44c00115 	stw	r19,4(r8)
1000ae84:	d8c12015 	stw	r3,1152(sp)
1000ae88:	d8811f15 	stw	r2,1148(sp)
1000ae8c:	010001c4 	movi	r4,7
1000ae90:	20817816 	blt	r4,r2,1000b474 <___vfprintf_internal_r+0x1678>
1000ae94:	42000204 	addi	r8,r8,8
1000ae98:	003db506 	br	1000a570 <__alt_data_end+0xf800a570>
1000ae9c:	d9413317 	ldw	r5,1228(sp)
1000aea0:	00800044 	movi	r2,1
1000aea4:	18c00044 	addi	r3,r3,1
1000aea8:	11413e0e 	bge	r2,r5,1000b3a4 <___vfprintf_internal_r+0x15a8>
1000aeac:	dc011f17 	ldw	r16,1148(sp)
1000aeb0:	d8813117 	ldw	r2,1220(sp)
1000aeb4:	d8c12015 	stw	r3,1152(sp)
1000aeb8:	84000044 	addi	r16,r16,1
1000aebc:	40800015 	stw	r2,0(r8)
1000aec0:	00800044 	movi	r2,1
1000aec4:	40800115 	stw	r2,4(r8)
1000aec8:	dc011f15 	stw	r16,1148(sp)
1000aecc:	008001c4 	movi	r2,7
1000aed0:	14015616 	blt	r2,r16,1000b42c <___vfprintf_internal_r+0x1630>
1000aed4:	42000204 	addi	r8,r8,8
1000aed8:	d9013817 	ldw	r4,1248(sp)
1000aedc:	d9413517 	ldw	r5,1236(sp)
1000aee0:	84000044 	addi	r16,r16,1
1000aee4:	1907883a 	add	r3,r3,r4
1000aee8:	41400015 	stw	r5,0(r8)
1000aeec:	41000115 	stw	r4,4(r8)
1000aef0:	d8c12015 	stw	r3,1152(sp)
1000aef4:	dc011f15 	stw	r16,1148(sp)
1000aef8:	008001c4 	movi	r2,7
1000aefc:	14015416 	blt	r2,r16,1000b450 <___vfprintf_internal_r+0x1654>
1000af00:	44400204 	addi	r17,r8,8
1000af04:	d9013717 	ldw	r4,1244(sp)
1000af08:	d9413917 	ldw	r5,1252(sp)
1000af0c:	000d883a 	mov	r6,zero
1000af10:	000f883a 	mov	r7,zero
1000af14:	d8c13d15 	stw	r3,1268(sp)
1000af18:	0014e340 	call	10014e34 <__eqdf2>
1000af1c:	d8c13d17 	ldw	r3,1268(sp)
1000af20:	1000a726 	beq	r2,zero,1000b1c0 <___vfprintf_internal_r+0x13c4>
1000af24:	d9013317 	ldw	r4,1228(sp)
1000af28:	d9413117 	ldw	r5,1220(sp)
1000af2c:	84000044 	addi	r16,r16,1
1000af30:	20bfffc4 	addi	r2,r4,-1
1000af34:	1887883a 	add	r3,r3,r2
1000af38:	29000044 	addi	r4,r5,1
1000af3c:	88800115 	stw	r2,4(r17)
1000af40:	89000015 	stw	r4,0(r17)
1000af44:	d8c12015 	stw	r3,1152(sp)
1000af48:	dc011f15 	stw	r16,1148(sp)
1000af4c:	008001c4 	movi	r2,7
1000af50:	14012d16 	blt	r2,r16,1000b408 <___vfprintf_internal_r+0x160c>
1000af54:	8c400204 	addi	r17,r17,8
1000af58:	d9413a17 	ldw	r5,1256(sp)
1000af5c:	dcc122c4 	addi	r19,sp,1163
1000af60:	84000044 	addi	r16,r16,1
1000af64:	28c7883a 	add	r3,r5,r3
1000af68:	8cc00015 	stw	r19,0(r17)
1000af6c:	89400115 	stw	r5,4(r17)
1000af70:	d8c12015 	stw	r3,1152(sp)
1000af74:	dc011f15 	stw	r16,1148(sp)
1000af78:	008001c4 	movi	r2,7
1000af7c:	14000e16 	blt	r2,r16,1000afb8 <___vfprintf_internal_r+0x11bc>
1000af80:	8a000204 	addi	r8,r17,8
1000af84:	003db006 	br	1000a648 <__alt_data_end+0xf800a648>
1000af88:	010400b4 	movhi	r4,4098
1000af8c:	21276f84 	addi	r4,r4,-25154
1000af90:	d9012c15 	stw	r4,1200(sp)
1000af94:	d9012c17 	ldw	r4,1200(sp)
1000af98:	1c07883a 	add	r3,r3,r16
1000af9c:	44000115 	stw	r16,4(r8)
1000afa0:	41000015 	stw	r4,0(r8)
1000afa4:	10800044 	addi	r2,r2,1
1000afa8:	d8c12015 	stw	r3,1152(sp)
1000afac:	d8811f15 	stw	r2,1148(sp)
1000afb0:	010001c4 	movi	r4,7
1000afb4:	20bda30e 	bge	r4,r2,1000a644 <__alt_data_end+0xf800a644>
1000afb8:	b809883a 	mov	r4,r23
1000afbc:	b00b883a 	mov	r5,r22
1000afc0:	d9811e04 	addi	r6,sp,1144
1000afc4:	00111040 	call	10011104 <__sprint_r>
1000afc8:	103ca41e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000afcc:	d8c12017 	ldw	r3,1152(sp)
1000afd0:	da000404 	addi	r8,sp,16
1000afd4:	003d9c06 	br	1000a648 <__alt_data_end+0xf800a648>
1000afd8:	b809883a 	mov	r4,r23
1000afdc:	b00b883a 	mov	r5,r22
1000afe0:	d9811e04 	addi	r6,sp,1144
1000afe4:	00111040 	call	10011104 <__sprint_r>
1000afe8:	103dd226 	beq	r2,zero,1000a734 <__alt_data_end+0xf800a734>
1000afec:	003c9b06 	br	1000a25c <__alt_data_end+0xf800a25c>
1000aff0:	10803fcc 	andi	r2,r2,255
1000aff4:	1000311e 	bne	r2,zero,1000b0bc <___vfprintf_internal_r+0x12c0>
1000aff8:	e080004c 	andi	r2,fp,1
1000affc:	10002f26 	beq	r2,zero,1000b0bc <___vfprintf_internal_r+0x12c0>
1000b000:	00800c04 	movi	r2,48
1000b004:	d8c10dc4 	addi	r3,sp,1079
1000b008:	d8810dc5 	stb	r2,1079(sp)
1000b00c:	dc413c17 	ldw	r17,1264(sp)
1000b010:	d8c13115 	stw	r3,1220(sp)
1000b014:	003cf406 	br	1000a3e8 <__alt_data_end+0xf800a3e8>
1000b018:	b809883a 	mov	r4,r23
1000b01c:	b00b883a 	mov	r5,r22
1000b020:	d9811e04 	addi	r6,sp,1144
1000b024:	00111040 	call	10011104 <__sprint_r>
1000b028:	103c8c1e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000b02c:	d8c12017 	ldw	r3,1152(sp)
1000b030:	da000404 	addi	r8,sp,16
1000b034:	003d7706 	br	1000a614 <__alt_data_end+0xf800a614>
1000b038:	b809883a 	mov	r4,r23
1000b03c:	b00b883a 	mov	r5,r22
1000b040:	d9811e04 	addi	r6,sp,1144
1000b044:	00111040 	call	10011104 <__sprint_r>
1000b048:	103c841e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000b04c:	d8c12017 	ldw	r3,1152(sp)
1000b050:	da000404 	addi	r8,sp,16
1000b054:	003d3506 	br	1000a52c <__alt_data_end+0xf800a52c>
1000b058:	b809883a 	mov	r4,r23
1000b05c:	b00b883a 	mov	r5,r22
1000b060:	d9811e04 	addi	r6,sp,1144
1000b064:	00111040 	call	10011104 <__sprint_r>
1000b068:	103c7c1e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000b06c:	d8c12017 	ldw	r3,1152(sp)
1000b070:	da000404 	addi	r8,sp,16
1000b074:	003d3b06 	br	1000a564 <__alt_data_end+0xf800a564>
1000b078:	d9413b17 	ldw	r5,1260(sp)
1000b07c:	d8c10e04 	addi	r3,sp,1080
1000b080:	908003cc 	andi	r2,r18,15
1000b084:	a808973a 	slli	r4,r21,28
1000b088:	2885883a 	add	r2,r5,r2
1000b08c:	9024d13a 	srli	r18,r18,4
1000b090:	10800003 	ldbu	r2,0(r2)
1000b094:	a82ad13a 	srli	r21,r21,4
1000b098:	18ffffc4 	addi	r3,r3,-1
1000b09c:	24a4b03a 	or	r18,r4,r18
1000b0a0:	18800005 	stb	r2,0(r3)
1000b0a4:	9544b03a 	or	r2,r18,r21
1000b0a8:	103ff51e 	bne	r2,zero,1000b080 <__alt_data_end+0xf800b080>
1000b0ac:	d9412817 	ldw	r5,1184(sp)
1000b0b0:	d8c13115 	stw	r3,1220(sp)
1000b0b4:	28e3c83a 	sub	r17,r5,r3
1000b0b8:	003ccb06 	br	1000a3e8 <__alt_data_end+0xf800a3e8>
1000b0bc:	d8c10e04 	addi	r3,sp,1080
1000b0c0:	0023883a 	mov	r17,zero
1000b0c4:	d8c13115 	stw	r3,1220(sp)
1000b0c8:	003cc706 	br	1000a3e8 <__alt_data_end+0xf800a3e8>
1000b0cc:	dc012617 	ldw	r16,1176(sp)
1000b0d0:	0401ab0e 	bge	zero,r16,1000b780 <___vfprintf_internal_r+0x1984>
1000b0d4:	d8813317 	ldw	r2,1228(sp)
1000b0d8:	d9413117 	ldw	r5,1220(sp)
1000b0dc:	d9013417 	ldw	r4,1232(sp)
1000b0e0:	1023883a 	mov	r17,r2
1000b0e4:	28a1883a 	add	r16,r5,r2
1000b0e8:	2080010e 	bge	r4,r2,1000b0f0 <___vfprintf_internal_r+0x12f4>
1000b0ec:	2023883a 	mov	r17,r4
1000b0f0:	04400b0e 	bge	zero,r17,1000b120 <___vfprintf_internal_r+0x1324>
1000b0f4:	d8811f17 	ldw	r2,1148(sp)
1000b0f8:	d9413117 	ldw	r5,1220(sp)
1000b0fc:	1c47883a 	add	r3,r3,r17
1000b100:	10800044 	addi	r2,r2,1
1000b104:	41400015 	stw	r5,0(r8)
1000b108:	44400115 	stw	r17,4(r8)
1000b10c:	d8c12015 	stw	r3,1152(sp)
1000b110:	d8811f15 	stw	r2,1148(sp)
1000b114:	010001c4 	movi	r4,7
1000b118:	20826716 	blt	r4,r2,1000bab8 <___vfprintf_internal_r+0x1cbc>
1000b11c:	42000204 	addi	r8,r8,8
1000b120:	88026316 	blt	r17,zero,1000bab0 <___vfprintf_internal_r+0x1cb4>
1000b124:	d8813417 	ldw	r2,1232(sp)
1000b128:	1463c83a 	sub	r17,r2,r17
1000b12c:	0440590e 	bge	zero,r17,1000b294 <___vfprintf_internal_r+0x1498>
1000b130:	04c00404 	movi	r19,16
1000b134:	d8811f17 	ldw	r2,1148(sp)
1000b138:	9c41770e 	bge	r19,r17,1000b718 <___vfprintf_internal_r+0x191c>
1000b13c:	014400b4 	movhi	r5,4098
1000b140:	29676f84 	addi	r5,r5,-25154
1000b144:	d9412c15 	stw	r5,1200(sp)
1000b148:	054001c4 	movi	r21,7
1000b14c:	00000306 	br	1000b15c <___vfprintf_internal_r+0x1360>
1000b150:	42000204 	addi	r8,r8,8
1000b154:	8c7ffc04 	addi	r17,r17,-16
1000b158:	9c41720e 	bge	r19,r17,1000b724 <___vfprintf_internal_r+0x1928>
1000b15c:	18c00404 	addi	r3,r3,16
1000b160:	10800044 	addi	r2,r2,1
1000b164:	45000015 	stw	r20,0(r8)
1000b168:	44c00115 	stw	r19,4(r8)
1000b16c:	d8c12015 	stw	r3,1152(sp)
1000b170:	d8811f15 	stw	r2,1148(sp)
1000b174:	a8bff60e 	bge	r21,r2,1000b150 <__alt_data_end+0xf800b150>
1000b178:	b809883a 	mov	r4,r23
1000b17c:	b00b883a 	mov	r5,r22
1000b180:	d9811e04 	addi	r6,sp,1144
1000b184:	00111040 	call	10011104 <__sprint_r>
1000b188:	103c341e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000b18c:	d8c12017 	ldw	r3,1152(sp)
1000b190:	d8811f17 	ldw	r2,1148(sp)
1000b194:	da000404 	addi	r8,sp,16
1000b198:	003fee06 	br	1000b154 <__alt_data_end+0xf800b154>
1000b19c:	b809883a 	mov	r4,r23
1000b1a0:	b00b883a 	mov	r5,r22
1000b1a4:	d9811e04 	addi	r6,sp,1144
1000b1a8:	00111040 	call	10011104 <__sprint_r>
1000b1ac:	103c2b1e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000b1b0:	d8c12017 	ldw	r3,1152(sp)
1000b1b4:	d8812787 	ldb	r2,1182(sp)
1000b1b8:	da000404 	addi	r8,sp,16
1000b1bc:	003cce06 	br	1000a4f8 <__alt_data_end+0xf800a4f8>
1000b1c0:	d8813317 	ldw	r2,1228(sp)
1000b1c4:	14ffffc4 	addi	r19,r2,-1
1000b1c8:	04ff630e 	bge	zero,r19,1000af58 <__alt_data_end+0xf800af58>
1000b1cc:	05400404 	movi	r21,16
1000b1d0:	acc0810e 	bge	r21,r19,1000b3d8 <___vfprintf_internal_r+0x15dc>
1000b1d4:	014400b4 	movhi	r5,4098
1000b1d8:	29676f84 	addi	r5,r5,-25154
1000b1dc:	d9412c15 	stw	r5,1200(sp)
1000b1e0:	01c001c4 	movi	r7,7
1000b1e4:	00000306 	br	1000b1f4 <___vfprintf_internal_r+0x13f8>
1000b1e8:	8c400204 	addi	r17,r17,8
1000b1ec:	9cfffc04 	addi	r19,r19,-16
1000b1f0:	acc07c0e 	bge	r21,r19,1000b3e4 <___vfprintf_internal_r+0x15e8>
1000b1f4:	18c00404 	addi	r3,r3,16
1000b1f8:	84000044 	addi	r16,r16,1
1000b1fc:	8d000015 	stw	r20,0(r17)
1000b200:	8d400115 	stw	r21,4(r17)
1000b204:	d8c12015 	stw	r3,1152(sp)
1000b208:	dc011f15 	stw	r16,1148(sp)
1000b20c:	3c3ff60e 	bge	r7,r16,1000b1e8 <__alt_data_end+0xf800b1e8>
1000b210:	b809883a 	mov	r4,r23
1000b214:	b00b883a 	mov	r5,r22
1000b218:	d9811e04 	addi	r6,sp,1144
1000b21c:	d9c13d15 	stw	r7,1268(sp)
1000b220:	00111040 	call	10011104 <__sprint_r>
1000b224:	d9c13d17 	ldw	r7,1268(sp)
1000b228:	103c0c1e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000b22c:	d8c12017 	ldw	r3,1152(sp)
1000b230:	dc011f17 	ldw	r16,1148(sp)
1000b234:	dc400404 	addi	r17,sp,16
1000b238:	003fec06 	br	1000b1ec <__alt_data_end+0xf800b1ec>
1000b23c:	00800084 	movi	r2,2
1000b240:	9546b03a 	or	r3,r18,r21
1000b244:	003d7d06 	br	1000a83c <__alt_data_end+0xf800a83c>
1000b248:	10803fcc 	andi	r2,r2,255
1000b24c:	1080201c 	xori	r2,r2,128
1000b250:	10bfe004 	addi	r2,r2,-128
1000b254:	01000c04 	movi	r4,48
1000b258:	1101d726 	beq	r2,r4,1000b9b8 <___vfprintf_internal_r+0x1bbc>
1000b25c:	d9413117 	ldw	r5,1220(sp)
1000b260:	d8812817 	ldw	r2,1184(sp)
1000b264:	193fffc5 	stb	r4,-1(r3)
1000b268:	297fffc4 	addi	r5,r5,-1
1000b26c:	d9413115 	stw	r5,1220(sp)
1000b270:	1163c83a 	sub	r17,r2,r5
1000b274:	003c5c06 	br	1000a3e8 <__alt_data_end+0xf800a3e8>
1000b278:	b809883a 	mov	r4,r23
1000b27c:	b00b883a 	mov	r5,r22
1000b280:	d9811e04 	addi	r6,sp,1144
1000b284:	00111040 	call	10011104 <__sprint_r>
1000b288:	103bf41e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000b28c:	d8c12017 	ldw	r3,1152(sp)
1000b290:	da000404 	addi	r8,sp,16
1000b294:	d9413117 	ldw	r5,1220(sp)
1000b298:	d9013417 	ldw	r4,1232(sp)
1000b29c:	d8812617 	ldw	r2,1176(sp)
1000b2a0:	2923883a 	add	r17,r5,r4
1000b2a4:	d9413317 	ldw	r5,1228(sp)
1000b2a8:	11400216 	blt	r2,r5,1000b2b4 <___vfprintf_internal_r+0x14b8>
1000b2ac:	e100004c 	andi	r4,fp,1
1000b2b0:	20000d26 	beq	r4,zero,1000b2e8 <___vfprintf_internal_r+0x14ec>
1000b2b4:	d9013817 	ldw	r4,1248(sp)
1000b2b8:	d9413517 	ldw	r5,1236(sp)
1000b2bc:	1907883a 	add	r3,r3,r4
1000b2c0:	d9011f17 	ldw	r4,1148(sp)
1000b2c4:	41400015 	stw	r5,0(r8)
1000b2c8:	d9413817 	ldw	r5,1248(sp)
1000b2cc:	21000044 	addi	r4,r4,1
1000b2d0:	d8c12015 	stw	r3,1152(sp)
1000b2d4:	41400115 	stw	r5,4(r8)
1000b2d8:	d9011f15 	stw	r4,1148(sp)
1000b2dc:	014001c4 	movi	r5,7
1000b2e0:	2901fd16 	blt	r5,r4,1000bad8 <___vfprintf_internal_r+0x1cdc>
1000b2e4:	42000204 	addi	r8,r8,8
1000b2e8:	d9013317 	ldw	r4,1228(sp)
1000b2ec:	2085c83a 	sub	r2,r4,r2
1000b2f0:	8449c83a 	sub	r4,r16,r17
1000b2f4:	1021883a 	mov	r16,r2
1000b2f8:	2080010e 	bge	r4,r2,1000b300 <___vfprintf_internal_r+0x1504>
1000b2fc:	2021883a 	mov	r16,r4
1000b300:	04000a0e 	bge	zero,r16,1000b32c <___vfprintf_internal_r+0x1530>
1000b304:	d9011f17 	ldw	r4,1148(sp)
1000b308:	1c07883a 	add	r3,r3,r16
1000b30c:	44400015 	stw	r17,0(r8)
1000b310:	21000044 	addi	r4,r4,1
1000b314:	44000115 	stw	r16,4(r8)
1000b318:	d8c12015 	stw	r3,1152(sp)
1000b31c:	d9011f15 	stw	r4,1148(sp)
1000b320:	014001c4 	movi	r5,7
1000b324:	29020916 	blt	r5,r4,1000bb4c <___vfprintf_internal_r+0x1d50>
1000b328:	42000204 	addi	r8,r8,8
1000b32c:	80020116 	blt	r16,zero,1000bb34 <___vfprintf_internal_r+0x1d38>
1000b330:	1421c83a 	sub	r16,r2,r16
1000b334:	043cc40e 	bge	zero,r16,1000a648 <__alt_data_end+0xf800a648>
1000b338:	04400404 	movi	r17,16
1000b33c:	d8811f17 	ldw	r2,1148(sp)
1000b340:	8c3f110e 	bge	r17,r16,1000af88 <__alt_data_end+0xf800af88>
1000b344:	014400b4 	movhi	r5,4098
1000b348:	29676f84 	addi	r5,r5,-25154
1000b34c:	d9412c15 	stw	r5,1200(sp)
1000b350:	04c001c4 	movi	r19,7
1000b354:	00000306 	br	1000b364 <___vfprintf_internal_r+0x1568>
1000b358:	42000204 	addi	r8,r8,8
1000b35c:	843ffc04 	addi	r16,r16,-16
1000b360:	8c3f0c0e 	bge	r17,r16,1000af94 <__alt_data_end+0xf800af94>
1000b364:	18c00404 	addi	r3,r3,16
1000b368:	10800044 	addi	r2,r2,1
1000b36c:	45000015 	stw	r20,0(r8)
1000b370:	44400115 	stw	r17,4(r8)
1000b374:	d8c12015 	stw	r3,1152(sp)
1000b378:	d8811f15 	stw	r2,1148(sp)
1000b37c:	98bff60e 	bge	r19,r2,1000b358 <__alt_data_end+0xf800b358>
1000b380:	b809883a 	mov	r4,r23
1000b384:	b00b883a 	mov	r5,r22
1000b388:	d9811e04 	addi	r6,sp,1144
1000b38c:	00111040 	call	10011104 <__sprint_r>
1000b390:	103bb21e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000b394:	d8c12017 	ldw	r3,1152(sp)
1000b398:	d8811f17 	ldw	r2,1148(sp)
1000b39c:	da000404 	addi	r8,sp,16
1000b3a0:	003fee06 	br	1000b35c <__alt_data_end+0xf800b35c>
1000b3a4:	e088703a 	and	r4,fp,r2
1000b3a8:	203ec01e 	bne	r4,zero,1000aeac <__alt_data_end+0xf800aeac>
1000b3ac:	dc011f17 	ldw	r16,1148(sp)
1000b3b0:	d9013117 	ldw	r4,1220(sp)
1000b3b4:	40800115 	stw	r2,4(r8)
1000b3b8:	84000044 	addi	r16,r16,1
1000b3bc:	41000015 	stw	r4,0(r8)
1000b3c0:	d8c12015 	stw	r3,1152(sp)
1000b3c4:	dc011f15 	stw	r16,1148(sp)
1000b3c8:	008001c4 	movi	r2,7
1000b3cc:	14000e16 	blt	r2,r16,1000b408 <___vfprintf_internal_r+0x160c>
1000b3d0:	44400204 	addi	r17,r8,8
1000b3d4:	003ee006 	br	1000af58 <__alt_data_end+0xf800af58>
1000b3d8:	010400b4 	movhi	r4,4098
1000b3dc:	21276f84 	addi	r4,r4,-25154
1000b3e0:	d9012c15 	stw	r4,1200(sp)
1000b3e4:	d8812c17 	ldw	r2,1200(sp)
1000b3e8:	1cc7883a 	add	r3,r3,r19
1000b3ec:	84000044 	addi	r16,r16,1
1000b3f0:	88800015 	stw	r2,0(r17)
1000b3f4:	8cc00115 	stw	r19,4(r17)
1000b3f8:	d8c12015 	stw	r3,1152(sp)
1000b3fc:	dc011f15 	stw	r16,1148(sp)
1000b400:	008001c4 	movi	r2,7
1000b404:	143ed30e 	bge	r2,r16,1000af54 <__alt_data_end+0xf800af54>
1000b408:	b809883a 	mov	r4,r23
1000b40c:	b00b883a 	mov	r5,r22
1000b410:	d9811e04 	addi	r6,sp,1144
1000b414:	00111040 	call	10011104 <__sprint_r>
1000b418:	103b901e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000b41c:	d8c12017 	ldw	r3,1152(sp)
1000b420:	dc011f17 	ldw	r16,1148(sp)
1000b424:	dc400404 	addi	r17,sp,16
1000b428:	003ecb06 	br	1000af58 <__alt_data_end+0xf800af58>
1000b42c:	b809883a 	mov	r4,r23
1000b430:	b00b883a 	mov	r5,r22
1000b434:	d9811e04 	addi	r6,sp,1144
1000b438:	00111040 	call	10011104 <__sprint_r>
1000b43c:	103b871e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000b440:	d8c12017 	ldw	r3,1152(sp)
1000b444:	dc011f17 	ldw	r16,1148(sp)
1000b448:	da000404 	addi	r8,sp,16
1000b44c:	003ea206 	br	1000aed8 <__alt_data_end+0xf800aed8>
1000b450:	b809883a 	mov	r4,r23
1000b454:	b00b883a 	mov	r5,r22
1000b458:	d9811e04 	addi	r6,sp,1144
1000b45c:	00111040 	call	10011104 <__sprint_r>
1000b460:	103b7e1e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000b464:	d8c12017 	ldw	r3,1152(sp)
1000b468:	dc011f17 	ldw	r16,1148(sp)
1000b46c:	dc400404 	addi	r17,sp,16
1000b470:	003ea406 	br	1000af04 <__alt_data_end+0xf800af04>
1000b474:	b809883a 	mov	r4,r23
1000b478:	b00b883a 	mov	r5,r22
1000b47c:	d9811e04 	addi	r6,sp,1144
1000b480:	00111040 	call	10011104 <__sprint_r>
1000b484:	103b751e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000b488:	d8c12017 	ldw	r3,1152(sp)
1000b48c:	da000404 	addi	r8,sp,16
1000b490:	003c3706 	br	1000a570 <__alt_data_end+0xf800a570>
1000b494:	04a5c83a 	sub	r18,zero,r18
1000b498:	9004c03a 	cmpne	r2,r18,zero
1000b49c:	056bc83a 	sub	r21,zero,r21
1000b4a0:	a8abc83a 	sub	r21,r21,r2
1000b4a4:	04c00b44 	movi	r19,45
1000b4a8:	dcc12785 	stb	r19,1182(sp)
1000b4ac:	da413215 	stw	r9,1224(sp)
1000b4b0:	00800044 	movi	r2,1
1000b4b4:	9546b03a 	or	r3,r18,r21
1000b4b8:	003bb106 	br	1000a380 <__alt_data_end+0xf800a380>
1000b4bc:	da013f15 	stw	r8,1276(sp)
1000b4c0:	da413e15 	stw	r9,1272(sp)
1000b4c4:	0010d600 	call	10010d60 <__fpclassifyd>
1000b4c8:	da013f17 	ldw	r8,1276(sp)
1000b4cc:	da413e17 	ldw	r9,1272(sp)
1000b4d0:	1000e526 	beq	r2,zero,1000b868 <___vfprintf_internal_r+0x1a6c>
1000b4d4:	04fff7c4 	movi	r19,-33
1000b4d8:	00bfffc4 	movi	r2,-1
1000b4dc:	84e6703a 	and	r19,r16,r19
1000b4e0:	48822926 	beq	r9,r2,1000bd88 <___vfprintf_internal_r+0x1f8c>
1000b4e4:	008011c4 	movi	r2,71
1000b4e8:	98821626 	beq	r19,r2,1000bd44 <___vfprintf_internal_r+0x1f48>
1000b4ec:	d9013917 	ldw	r4,1252(sp)
1000b4f0:	e0c04014 	ori	r3,fp,256
1000b4f4:	d8c12d15 	stw	r3,1204(sp)
1000b4f8:	20021f16 	blt	r4,zero,1000bd78 <___vfprintf_internal_r+0x1f7c>
1000b4fc:	dc413917 	ldw	r17,1252(sp)
1000b500:	d8012b05 	stb	zero,1196(sp)
1000b504:	00801984 	movi	r2,102
1000b508:	80814d26 	beq	r16,r2,1000ba40 <___vfprintf_internal_r+0x1c44>
1000b50c:	00801184 	movi	r2,70
1000b510:	80814b26 	beq	r16,r2,1000ba40 <___vfprintf_internal_r+0x1c44>
1000b514:	00801144 	movi	r2,69
1000b518:	98821d26 	beq	r19,r2,1000bd90 <___vfprintf_internal_r+0x1f94>
1000b51c:	482b883a 	mov	r21,r9
1000b520:	d8812604 	addi	r2,sp,1176
1000b524:	d8800115 	stw	r2,4(sp)
1000b528:	d9413717 	ldw	r5,1244(sp)
1000b52c:	d8812504 	addi	r2,sp,1172
1000b530:	d8800215 	stw	r2,8(sp)
1000b534:	d8812104 	addi	r2,sp,1156
1000b538:	dd400015 	stw	r21,0(sp)
1000b53c:	d8800315 	stw	r2,12(sp)
1000b540:	b809883a 	mov	r4,r23
1000b544:	880d883a 	mov	r6,r17
1000b548:	01c00084 	movi	r7,2
1000b54c:	da013f15 	stw	r8,1276(sp)
1000b550:	da413e15 	stw	r9,1272(sp)
1000b554:	000c2740 	call	1000c274 <_dtoa_r>
1000b558:	d8813115 	stw	r2,1220(sp)
1000b55c:	008019c4 	movi	r2,103
1000b560:	da013f17 	ldw	r8,1276(sp)
1000b564:	da413e17 	ldw	r9,1272(sp)
1000b568:	80800226 	beq	r16,r2,1000b574 <___vfprintf_internal_r+0x1778>
1000b56c:	008011c4 	movi	r2,71
1000b570:	8081451e 	bne	r16,r2,1000ba88 <___vfprintf_internal_r+0x1c8c>
1000b574:	e080004c 	andi	r2,fp,1
1000b578:	10021e26 	beq	r2,zero,1000bdf4 <___vfprintf_internal_r+0x1ff8>
1000b57c:	d8c13117 	ldw	r3,1220(sp)
1000b580:	1d55883a 	add	r10,r3,r21
1000b584:	d9013717 	ldw	r4,1244(sp)
1000b588:	880b883a 	mov	r5,r17
1000b58c:	000d883a 	mov	r6,zero
1000b590:	000f883a 	mov	r7,zero
1000b594:	da013f15 	stw	r8,1276(sp)
1000b598:	da413e15 	stw	r9,1272(sp)
1000b59c:	da813d15 	stw	r10,1268(sp)
1000b5a0:	0014e340 	call	10014e34 <__eqdf2>
1000b5a4:	da013f17 	ldw	r8,1276(sp)
1000b5a8:	da413e17 	ldw	r9,1272(sp)
1000b5ac:	da813d17 	ldw	r10,1268(sp)
1000b5b0:	1001a126 	beq	r2,zero,1000bc38 <___vfprintf_internal_r+0x1e3c>
1000b5b4:	d8812117 	ldw	r2,1156(sp)
1000b5b8:	1280062e 	bgeu	r2,r10,1000b5d4 <___vfprintf_internal_r+0x17d8>
1000b5bc:	01000c04 	movi	r4,48
1000b5c0:	10c00044 	addi	r3,r2,1
1000b5c4:	d8c12115 	stw	r3,1156(sp)
1000b5c8:	11000005 	stb	r4,0(r2)
1000b5cc:	d8812117 	ldw	r2,1156(sp)
1000b5d0:	12bffb36 	bltu	r2,r10,1000b5c0 <__alt_data_end+0xf800b5c0>
1000b5d4:	d8c13117 	ldw	r3,1220(sp)
1000b5d8:	10c5c83a 	sub	r2,r2,r3
1000b5dc:	d8813315 	stw	r2,1228(sp)
1000b5e0:	008011c4 	movi	r2,71
1000b5e4:	98818926 	beq	r19,r2,1000bc0c <___vfprintf_internal_r+0x1e10>
1000b5e8:	00801944 	movi	r2,101
1000b5ec:	14023c0e 	bge	r2,r16,1000bee0 <___vfprintf_internal_r+0x20e4>
1000b5f0:	d8c12617 	ldw	r3,1176(sp)
1000b5f4:	00801984 	movi	r2,102
1000b5f8:	d8c13415 	stw	r3,1232(sp)
1000b5fc:	8081ef26 	beq	r16,r2,1000bdbc <___vfprintf_internal_r+0x1fc0>
1000b600:	d8c13417 	ldw	r3,1232(sp)
1000b604:	d9013317 	ldw	r4,1228(sp)
1000b608:	1901e316 	blt	r3,r4,1000bd98 <___vfprintf_internal_r+0x1f9c>
1000b60c:	e080004c 	andi	r2,fp,1
1000b610:	1001f426 	beq	r2,zero,1000bde4 <___vfprintf_internal_r+0x1fe8>
1000b614:	d8c13417 	ldw	r3,1232(sp)
1000b618:	1c400044 	addi	r17,r3,1
1000b61c:	8839883a 	mov	fp,r17
1000b620:	8801e416 	blt	r17,zero,1000bdb4 <___vfprintf_internal_r+0x1fb8>
1000b624:	dd412b07 	ldb	r21,1196(sp)
1000b628:	a801701e 	bne	r21,zero,1000bbec <___vfprintf_internal_r+0x1df0>
1000b62c:	df012b15 	stw	fp,1196(sp)
1000b630:	dcc12783 	ldbu	r19,1182(sp)
1000b634:	df012d17 	ldw	fp,1204(sp)
1000b638:	d8013215 	stw	zero,1224(sp)
1000b63c:	dc812d15 	stw	r18,1204(sp)
1000b640:	003b6e06 	br	1000a3fc <__alt_data_end+0xf800a3fc>
1000b644:	e080040c 	andi	r2,fp,16
1000b648:	1000b51e 	bne	r2,zero,1000b920 <___vfprintf_internal_r+0x1b24>
1000b64c:	e080100c 	andi	r2,fp,64
1000b650:	10015b26 	beq	r2,zero,1000bbc0 <___vfprintf_internal_r+0x1dc4>
1000b654:	d9012d17 	ldw	r4,1204(sp)
1000b658:	d9412f17 	ldw	r5,1212(sp)
1000b65c:	20800017 	ldw	r2,0(r4)
1000b660:	21000104 	addi	r4,r4,4
1000b664:	d9012d15 	stw	r4,1204(sp)
1000b668:	1140000d 	sth	r5,0(r2)
1000b66c:	003a2006 	br	10009ef0 <__alt_data_end+0xf8009ef0>
1000b670:	e0c0100c 	andi	r3,fp,64
1000b674:	1800a226 	beq	r3,zero,1000b900 <___vfprintf_internal_r+0x1b04>
1000b678:	d8c12d17 	ldw	r3,1204(sp)
1000b67c:	1480000b 	ldhu	r18,0(r2)
1000b680:	002b883a 	mov	r21,zero
1000b684:	18c00104 	addi	r3,r3,4
1000b688:	d8c12d15 	stw	r3,1204(sp)
1000b68c:	0005883a 	mov	r2,zero
1000b690:	9007883a 	mov	r3,r18
1000b694:	003c6906 	br	1000a83c <__alt_data_end+0xf800a83c>
1000b698:	e0c0100c 	andi	r3,fp,64
1000b69c:	18009026 	beq	r3,zero,1000b8e0 <___vfprintf_internal_r+0x1ae4>
1000b6a0:	1480000b 	ldhu	r18,0(r2)
1000b6a4:	d8812d17 	ldw	r2,1204(sp)
1000b6a8:	002b883a 	mov	r21,zero
1000b6ac:	9007883a 	mov	r3,r18
1000b6b0:	10800104 	addi	r2,r2,4
1000b6b4:	d8812d15 	stw	r2,1204(sp)
1000b6b8:	00800044 	movi	r2,1
1000b6bc:	003c5f06 	br	1000a83c <__alt_data_end+0xf800a83c>
1000b6c0:	e0c0100c 	andi	r3,fp,64
1000b6c4:	18008026 	beq	r3,zero,1000b8c8 <___vfprintf_internal_r+0x1acc>
1000b6c8:	d9012d17 	ldw	r4,1204(sp)
1000b6cc:	1480000b 	ldhu	r18,0(r2)
1000b6d0:	002b883a 	mov	r21,zero
1000b6d4:	21000104 	addi	r4,r4,4
1000b6d8:	d9012d15 	stw	r4,1204(sp)
1000b6dc:	003c7906 	br	1000a8c4 <__alt_data_end+0xf800a8c4>
1000b6e0:	e080100c 	andi	r2,fp,64
1000b6e4:	10007126 	beq	r2,zero,1000b8ac <___vfprintf_internal_r+0x1ab0>
1000b6e8:	1c80000f 	ldh	r18,0(r3)
1000b6ec:	d8812d17 	ldw	r2,1204(sp)
1000b6f0:	902bd7fa 	srai	r21,r18,31
1000b6f4:	10800104 	addi	r2,r2,4
1000b6f8:	d8812d15 	stw	r2,1204(sp)
1000b6fc:	a805883a 	mov	r2,r21
1000b700:	003b1a06 	br	1000a36c <__alt_data_end+0xf800a36c>
1000b704:	e4000007 	ldb	r16,0(fp)
1000b708:	e005883a 	mov	r2,fp
1000b70c:	003a2306 	br	10009f9c <__alt_data_end+0xf8009f9c>
1000b710:	00800084 	movi	r2,2
1000b714:	003c4906 	br	1000a83c <__alt_data_end+0xf800a83c>
1000b718:	010400b4 	movhi	r4,4098
1000b71c:	21276f84 	addi	r4,r4,-25154
1000b720:	d9012c15 	stw	r4,1200(sp)
1000b724:	d9012c17 	ldw	r4,1200(sp)
1000b728:	1c47883a 	add	r3,r3,r17
1000b72c:	10800044 	addi	r2,r2,1
1000b730:	41000015 	stw	r4,0(r8)
1000b734:	44400115 	stw	r17,4(r8)
1000b738:	d8c12015 	stw	r3,1152(sp)
1000b73c:	d8811f15 	stw	r2,1148(sp)
1000b740:	010001c4 	movi	r4,7
1000b744:	20becc16 	blt	r4,r2,1000b278 <__alt_data_end+0xf800b278>
1000b748:	42000204 	addi	r8,r8,8
1000b74c:	003ed106 	br	1000b294 <__alt_data_end+0xf800b294>
1000b750:	010400b4 	movhi	r4,4098
1000b754:	21276f84 	addi	r4,r4,-25154
1000b758:	d9012c15 	stw	r4,1200(sp)
1000b75c:	003ba306 	br	1000a5ec <__alt_data_end+0xf800a5ec>
1000b760:	b809883a 	mov	r4,r23
1000b764:	b00b883a 	mov	r5,r22
1000b768:	d9811e04 	addi	r6,sp,1144
1000b76c:	00111040 	call	10011104 <__sprint_r>
1000b770:	103aba1e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000b774:	d8c12017 	ldw	r3,1152(sp)
1000b778:	da000404 	addi	r8,sp,16
1000b77c:	003d6c06 	br	1000ad30 <__alt_data_end+0xf800ad30>
1000b780:	d8811f17 	ldw	r2,1148(sp)
1000b784:	014400b4 	movhi	r5,4098
1000b788:	01000044 	movi	r4,1
1000b78c:	18c00044 	addi	r3,r3,1
1000b790:	10800044 	addi	r2,r2,1
1000b794:	29676f04 	addi	r5,r5,-25156
1000b798:	41000115 	stw	r4,4(r8)
1000b79c:	41400015 	stw	r5,0(r8)
1000b7a0:	d8c12015 	stw	r3,1152(sp)
1000b7a4:	d8811f15 	stw	r2,1148(sp)
1000b7a8:	010001c4 	movi	r4,7
1000b7ac:	20806716 	blt	r4,r2,1000b94c <___vfprintf_internal_r+0x1b50>
1000b7b0:	42000204 	addi	r8,r8,8
1000b7b4:	8000041e 	bne	r16,zero,1000b7c8 <___vfprintf_internal_r+0x19cc>
1000b7b8:	d8813317 	ldw	r2,1228(sp)
1000b7bc:	1000021e 	bne	r2,zero,1000b7c8 <___vfprintf_internal_r+0x19cc>
1000b7c0:	e080004c 	andi	r2,fp,1
1000b7c4:	103ba026 	beq	r2,zero,1000a648 <__alt_data_end+0xf800a648>
1000b7c8:	d9013817 	ldw	r4,1248(sp)
1000b7cc:	d8811f17 	ldw	r2,1148(sp)
1000b7d0:	d9413517 	ldw	r5,1236(sp)
1000b7d4:	1907883a 	add	r3,r3,r4
1000b7d8:	10800044 	addi	r2,r2,1
1000b7dc:	41000115 	stw	r4,4(r8)
1000b7e0:	41400015 	stw	r5,0(r8)
1000b7e4:	d8c12015 	stw	r3,1152(sp)
1000b7e8:	d8811f15 	stw	r2,1148(sp)
1000b7ec:	010001c4 	movi	r4,7
1000b7f0:	20815716 	blt	r4,r2,1000bd50 <___vfprintf_internal_r+0x1f54>
1000b7f4:	42000204 	addi	r8,r8,8
1000b7f8:	0421c83a 	sub	r16,zero,r16
1000b7fc:	0400810e 	bge	zero,r16,1000ba04 <___vfprintf_internal_r+0x1c08>
1000b800:	04400404 	movi	r17,16
1000b804:	8c00bd0e 	bge	r17,r16,1000bafc <___vfprintf_internal_r+0x1d00>
1000b808:	014400b4 	movhi	r5,4098
1000b80c:	29676f84 	addi	r5,r5,-25154
1000b810:	d9412c15 	stw	r5,1200(sp)
1000b814:	04c001c4 	movi	r19,7
1000b818:	00000306 	br	1000b828 <___vfprintf_internal_r+0x1a2c>
1000b81c:	42000204 	addi	r8,r8,8
1000b820:	843ffc04 	addi	r16,r16,-16
1000b824:	8c00b80e 	bge	r17,r16,1000bb08 <___vfprintf_internal_r+0x1d0c>
1000b828:	18c00404 	addi	r3,r3,16
1000b82c:	10800044 	addi	r2,r2,1
1000b830:	45000015 	stw	r20,0(r8)
1000b834:	44400115 	stw	r17,4(r8)
1000b838:	d8c12015 	stw	r3,1152(sp)
1000b83c:	d8811f15 	stw	r2,1148(sp)
1000b840:	98bff60e 	bge	r19,r2,1000b81c <__alt_data_end+0xf800b81c>
1000b844:	b809883a 	mov	r4,r23
1000b848:	b00b883a 	mov	r5,r22
1000b84c:	d9811e04 	addi	r6,sp,1144
1000b850:	00111040 	call	10011104 <__sprint_r>
1000b854:	103a811e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000b858:	d8c12017 	ldw	r3,1152(sp)
1000b85c:	d8811f17 	ldw	r2,1148(sp)
1000b860:	da000404 	addi	r8,sp,16
1000b864:	003fee06 	br	1000b820 <__alt_data_end+0xf800b820>
1000b868:	008011c4 	movi	r2,71
1000b86c:	1400db16 	blt	r2,r16,1000bbdc <___vfprintf_internal_r+0x1de0>
1000b870:	010400b4 	movhi	r4,4098
1000b874:	21276104 	addi	r4,r4,-25212
1000b878:	d9013115 	stw	r4,1220(sp)
1000b87c:	00c000c4 	movi	r3,3
1000b880:	00bfdfc4 	movi	r2,-129
1000b884:	d8c12b15 	stw	r3,1196(sp)
1000b888:	e0b8703a 	and	fp,fp,r2
1000b88c:	dcc12783 	ldbu	r19,1182(sp)
1000b890:	dc812d15 	stw	r18,1204(sp)
1000b894:	1823883a 	mov	r17,r3
1000b898:	d8013215 	stw	zero,1224(sp)
1000b89c:	d8013415 	stw	zero,1232(sp)
1000b8a0:	003ad606 	br	1000a3fc <__alt_data_end+0xf800a3fc>
1000b8a4:	4823883a 	mov	r17,r9
1000b8a8:	003cc906 	br	1000abd0 <__alt_data_end+0xf800abd0>
1000b8ac:	1c800017 	ldw	r18,0(r3)
1000b8b0:	d8c12d17 	ldw	r3,1204(sp)
1000b8b4:	902bd7fa 	srai	r21,r18,31
1000b8b8:	18c00104 	addi	r3,r3,4
1000b8bc:	d8c12d15 	stw	r3,1204(sp)
1000b8c0:	a805883a 	mov	r2,r21
1000b8c4:	003aa906 	br	1000a36c <__alt_data_end+0xf800a36c>
1000b8c8:	d9412d17 	ldw	r5,1204(sp)
1000b8cc:	14800017 	ldw	r18,0(r2)
1000b8d0:	002b883a 	mov	r21,zero
1000b8d4:	29400104 	addi	r5,r5,4
1000b8d8:	d9412d15 	stw	r5,1204(sp)
1000b8dc:	003bf906 	br	1000a8c4 <__alt_data_end+0xf800a8c4>
1000b8e0:	d8c12d17 	ldw	r3,1204(sp)
1000b8e4:	14800017 	ldw	r18,0(r2)
1000b8e8:	002b883a 	mov	r21,zero
1000b8ec:	18c00104 	addi	r3,r3,4
1000b8f0:	d8c12d15 	stw	r3,1204(sp)
1000b8f4:	00800044 	movi	r2,1
1000b8f8:	9007883a 	mov	r3,r18
1000b8fc:	003bcf06 	br	1000a83c <__alt_data_end+0xf800a83c>
1000b900:	d9012d17 	ldw	r4,1204(sp)
1000b904:	14800017 	ldw	r18,0(r2)
1000b908:	002b883a 	mov	r21,zero
1000b90c:	21000104 	addi	r4,r4,4
1000b910:	d9012d15 	stw	r4,1204(sp)
1000b914:	0005883a 	mov	r2,zero
1000b918:	9007883a 	mov	r3,r18
1000b91c:	003bc706 	br	1000a83c <__alt_data_end+0xf800a83c>
1000b920:	d9412d17 	ldw	r5,1204(sp)
1000b924:	d8c12f17 	ldw	r3,1212(sp)
1000b928:	28800017 	ldw	r2,0(r5)
1000b92c:	29400104 	addi	r5,r5,4
1000b930:	d9412d15 	stw	r5,1204(sp)
1000b934:	10c00015 	stw	r3,0(r2)
1000b938:	00396d06 	br	10009ef0 <__alt_data_end+0xf8009ef0>
1000b93c:	010400b4 	movhi	r4,4098
1000b940:	21275f04 	addi	r4,r4,-25220
1000b944:	d9013115 	stw	r4,1220(sp)
1000b948:	003ba206 	br	1000a7d4 <__alt_data_end+0xf800a7d4>
1000b94c:	b809883a 	mov	r4,r23
1000b950:	b00b883a 	mov	r5,r22
1000b954:	d9811e04 	addi	r6,sp,1144
1000b958:	00111040 	call	10011104 <__sprint_r>
1000b95c:	103a3f1e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000b960:	dc012617 	ldw	r16,1176(sp)
1000b964:	d8c12017 	ldw	r3,1152(sp)
1000b968:	da000404 	addi	r8,sp,16
1000b96c:	003f9106 	br	1000b7b4 <__alt_data_end+0xf800b7b4>
1000b970:	e0800044 	addi	r2,fp,1
1000b974:	9cc00814 	ori	r19,r19,32
1000b978:	e4000047 	ldb	r16,1(fp)
1000b97c:	00398706 	br	10009f9c <__alt_data_end+0xf8009f9c>
1000b980:	d8812e17 	ldw	r2,1208(sp)
1000b984:	d8c12d15 	stw	r3,1204(sp)
1000b988:	0085c83a 	sub	r2,zero,r2
1000b98c:	d8812e15 	stw	r2,1208(sp)
1000b990:	e005883a 	mov	r2,fp
1000b994:	003a3a06 	br	1000a280 <__alt_data_end+0xf800a280>
1000b998:	b809883a 	mov	r4,r23
1000b99c:	b00b883a 	mov	r5,r22
1000b9a0:	d9811e04 	addi	r6,sp,1144
1000b9a4:	00111040 	call	10011104 <__sprint_r>
1000b9a8:	103a2c1e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000b9ac:	d8c12017 	ldw	r3,1152(sp)
1000b9b0:	da000404 	addi	r8,sp,16
1000b9b4:	003cf006 	br	1000ad78 <__alt_data_end+0xf800ad78>
1000b9b8:	d8c12817 	ldw	r3,1184(sp)
1000b9bc:	d9013117 	ldw	r4,1220(sp)
1000b9c0:	1923c83a 	sub	r17,r3,r4
1000b9c4:	003a8806 	br	1000a3e8 <__alt_data_end+0xf800a3e8>
1000b9c8:	da013f15 	stw	r8,1276(sp)
1000b9cc:	0009d640 	call	10009d64 <strlen>
1000b9d0:	1023883a 	mov	r17,r2
1000b9d4:	da013f17 	ldw	r8,1276(sp)
1000b9d8:	883c7f0e 	bge	r17,zero,1000abd8 <__alt_data_end+0xf800abd8>
1000b9dc:	0005883a 	mov	r2,zero
1000b9e0:	003c7d06 	br	1000abd8 <__alt_data_end+0xf800abd8>
1000b9e4:	b809883a 	mov	r4,r23
1000b9e8:	b00b883a 	mov	r5,r22
1000b9ec:	d9811e04 	addi	r6,sp,1144
1000b9f0:	00111040 	call	10011104 <__sprint_r>
1000b9f4:	103a191e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000b9f8:	d8c12017 	ldw	r3,1152(sp)
1000b9fc:	d8811f17 	ldw	r2,1148(sp)
1000ba00:	da000404 	addi	r8,sp,16
1000ba04:	d9413317 	ldw	r5,1228(sp)
1000ba08:	d9013117 	ldw	r4,1220(sp)
1000ba0c:	10800044 	addi	r2,r2,1
1000ba10:	28c7883a 	add	r3,r5,r3
1000ba14:	41000015 	stw	r4,0(r8)
1000ba18:	41400115 	stw	r5,4(r8)
1000ba1c:	d8c12015 	stw	r3,1152(sp)
1000ba20:	d8811f15 	stw	r2,1148(sp)
1000ba24:	010001c4 	movi	r4,7
1000ba28:	20bb060e 	bge	r4,r2,1000a644 <__alt_data_end+0xf800a644>
1000ba2c:	003d6206 	br	1000afb8 <__alt_data_end+0xf800afb8>
1000ba30:	010400b4 	movhi	r4,4098
1000ba34:	21277384 	addi	r4,r4,-25138
1000ba38:	d9013615 	stw	r4,1240(sp)
1000ba3c:	003aa306 	br	1000a4cc <__alt_data_end+0xf800a4cc>
1000ba40:	d8812604 	addi	r2,sp,1176
1000ba44:	d8800115 	stw	r2,4(sp)
1000ba48:	d9413717 	ldw	r5,1244(sp)
1000ba4c:	d8812504 	addi	r2,sp,1172
1000ba50:	d8800215 	stw	r2,8(sp)
1000ba54:	d8812104 	addi	r2,sp,1156
1000ba58:	da400015 	stw	r9,0(sp)
1000ba5c:	d8800315 	stw	r2,12(sp)
1000ba60:	b809883a 	mov	r4,r23
1000ba64:	880d883a 	mov	r6,r17
1000ba68:	01c000c4 	movi	r7,3
1000ba6c:	da013f15 	stw	r8,1276(sp)
1000ba70:	da413e15 	stw	r9,1272(sp)
1000ba74:	000c2740 	call	1000c274 <_dtoa_r>
1000ba78:	da413e17 	ldw	r9,1272(sp)
1000ba7c:	da013f17 	ldw	r8,1276(sp)
1000ba80:	d8813115 	stw	r2,1220(sp)
1000ba84:	482b883a 	mov	r21,r9
1000ba88:	d8c13117 	ldw	r3,1220(sp)
1000ba8c:	00801184 	movi	r2,70
1000ba90:	1d55883a 	add	r10,r3,r21
1000ba94:	98bebb1e 	bne	r19,r2,1000b584 <__alt_data_end+0xf800b584>
1000ba98:	19000007 	ldb	r4,0(r3)
1000ba9c:	00800c04 	movi	r2,48
1000baa0:	2080dd26 	beq	r4,r2,1000be18 <___vfprintf_internal_r+0x201c>
1000baa4:	d8c12617 	ldw	r3,1176(sp)
1000baa8:	50d5883a 	add	r10,r10,r3
1000baac:	003eb506 	br	1000b584 <__alt_data_end+0xf800b584>
1000bab0:	0023883a 	mov	r17,zero
1000bab4:	003d9b06 	br	1000b124 <__alt_data_end+0xf800b124>
1000bab8:	b809883a 	mov	r4,r23
1000babc:	b00b883a 	mov	r5,r22
1000bac0:	d9811e04 	addi	r6,sp,1144
1000bac4:	00111040 	call	10011104 <__sprint_r>
1000bac8:	1039e41e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000bacc:	d8c12017 	ldw	r3,1152(sp)
1000bad0:	da000404 	addi	r8,sp,16
1000bad4:	003d9206 	br	1000b120 <__alt_data_end+0xf800b120>
1000bad8:	b809883a 	mov	r4,r23
1000badc:	b00b883a 	mov	r5,r22
1000bae0:	d9811e04 	addi	r6,sp,1144
1000bae4:	00111040 	call	10011104 <__sprint_r>
1000bae8:	1039dc1e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000baec:	d8812617 	ldw	r2,1176(sp)
1000baf0:	d8c12017 	ldw	r3,1152(sp)
1000baf4:	da000404 	addi	r8,sp,16
1000baf8:	003dfb06 	br	1000b2e8 <__alt_data_end+0xf800b2e8>
1000bafc:	010400b4 	movhi	r4,4098
1000bb00:	21276f84 	addi	r4,r4,-25154
1000bb04:	d9012c15 	stw	r4,1200(sp)
1000bb08:	d9012c17 	ldw	r4,1200(sp)
1000bb0c:	1c07883a 	add	r3,r3,r16
1000bb10:	10800044 	addi	r2,r2,1
1000bb14:	41000015 	stw	r4,0(r8)
1000bb18:	44000115 	stw	r16,4(r8)
1000bb1c:	d8c12015 	stw	r3,1152(sp)
1000bb20:	d8811f15 	stw	r2,1148(sp)
1000bb24:	010001c4 	movi	r4,7
1000bb28:	20bfae16 	blt	r4,r2,1000b9e4 <__alt_data_end+0xf800b9e4>
1000bb2c:	42000204 	addi	r8,r8,8
1000bb30:	003fb406 	br	1000ba04 <__alt_data_end+0xf800ba04>
1000bb34:	0021883a 	mov	r16,zero
1000bb38:	003dfd06 	br	1000b330 <__alt_data_end+0xf800b330>
1000bb3c:	014400b4 	movhi	r5,4098
1000bb40:	29677384 	addi	r5,r5,-25138
1000bb44:	d9413615 	stw	r5,1240(sp)
1000bb48:	003ae306 	br	1000a6d8 <__alt_data_end+0xf800a6d8>
1000bb4c:	b809883a 	mov	r4,r23
1000bb50:	b00b883a 	mov	r5,r22
1000bb54:	d9811e04 	addi	r6,sp,1144
1000bb58:	00111040 	call	10011104 <__sprint_r>
1000bb5c:	1039bf1e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000bb60:	d8812617 	ldw	r2,1176(sp)
1000bb64:	d9413317 	ldw	r5,1228(sp)
1000bb68:	d8c12017 	ldw	r3,1152(sp)
1000bb6c:	da000404 	addi	r8,sp,16
1000bb70:	2885c83a 	sub	r2,r5,r2
1000bb74:	003ded06 	br	1000b32c <__alt_data_end+0xf800b32c>
1000bb78:	00800184 	movi	r2,6
1000bb7c:	1240012e 	bgeu	r2,r9,1000bb84 <___vfprintf_internal_r+0x1d88>
1000bb80:	1013883a 	mov	r9,r2
1000bb84:	4823883a 	mov	r17,r9
1000bb88:	4805883a 	mov	r2,r9
1000bb8c:	4800b216 	blt	r9,zero,1000be58 <___vfprintf_internal_r+0x205c>
1000bb90:	014400b4 	movhi	r5,4098
1000bb94:	29676d04 	addi	r5,r5,-25164
1000bb98:	d8812b15 	stw	r2,1196(sp)
1000bb9c:	dc812d15 	stw	r18,1204(sp)
1000bba0:	d8013215 	stw	zero,1224(sp)
1000bba4:	d8013415 	stw	zero,1232(sp)
1000bba8:	d9413115 	stw	r5,1220(sp)
1000bbac:	0005883a 	mov	r2,zero
1000bbb0:	003a1906 	br	1000a418 <__alt_data_end+0xf800a418>
1000bbb4:	04c00b44 	movi	r19,45
1000bbb8:	dcc12785 	stb	r19,1182(sp)
1000bbbc:	003b0006 	br	1000a7c0 <__alt_data_end+0xf800a7c0>
1000bbc0:	d8c12d17 	ldw	r3,1204(sp)
1000bbc4:	d9012f17 	ldw	r4,1212(sp)
1000bbc8:	18800017 	ldw	r2,0(r3)
1000bbcc:	18c00104 	addi	r3,r3,4
1000bbd0:	d8c12d15 	stw	r3,1204(sp)
1000bbd4:	11000015 	stw	r4,0(r2)
1000bbd8:	0038c506 	br	10009ef0 <__alt_data_end+0xf8009ef0>
1000bbdc:	014400b4 	movhi	r5,4098
1000bbe0:	29676204 	addi	r5,r5,-25208
1000bbe4:	d9413115 	stw	r5,1220(sp)
1000bbe8:	003f2406 	br	1000b87c <__alt_data_end+0xf800b87c>
1000bbec:	00800b44 	movi	r2,45
1000bbf0:	d8812785 	stb	r2,1182(sp)
1000bbf4:	df012b15 	stw	fp,1196(sp)
1000bbf8:	d8013215 	stw	zero,1224(sp)
1000bbfc:	df012d17 	ldw	fp,1204(sp)
1000bc00:	00800b44 	movi	r2,45
1000bc04:	dc812d15 	stw	r18,1204(sp)
1000bc08:	003a0006 	br	1000a40c <__alt_data_end+0xf800a40c>
1000bc0c:	d8c12617 	ldw	r3,1176(sp)
1000bc10:	00bfff44 	movi	r2,-3
1000bc14:	18800a16 	blt	r3,r2,1000bc40 <___vfprintf_internal_r+0x1e44>
1000bc18:	48c00916 	blt	r9,r3,1000bc40 <___vfprintf_internal_r+0x1e44>
1000bc1c:	d8c13415 	stw	r3,1232(sp)
1000bc20:	040019c4 	movi	r16,103
1000bc24:	003e7606 	br	1000b600 <__alt_data_end+0xf800b600>
1000bc28:	010400b4 	movhi	r4,4098
1000bc2c:	21276f84 	addi	r4,r4,-25154
1000bc30:	d9012c15 	stw	r4,1200(sp)
1000bc34:	003c8e06 	br	1000ae70 <__alt_data_end+0xf800ae70>
1000bc38:	5005883a 	mov	r2,r10
1000bc3c:	003e6506 	br	1000b5d4 <__alt_data_end+0xf800b5d4>
1000bc40:	843fff84 	addi	r16,r16,-2
1000bc44:	1d7fffc4 	addi	r21,r3,-1
1000bc48:	dd412615 	stw	r21,1176(sp)
1000bc4c:	dc0122c5 	stb	r16,1163(sp)
1000bc50:	a8009216 	blt	r21,zero,1000be9c <___vfprintf_internal_r+0x20a0>
1000bc54:	00800ac4 	movi	r2,43
1000bc58:	d8812305 	stb	r2,1164(sp)
1000bc5c:	00800244 	movi	r2,9
1000bc60:	1540660e 	bge	r2,r21,1000bdfc <___vfprintf_internal_r+0x2000>
1000bc64:	dcc122c4 	addi	r19,sp,1163
1000bc68:	dc012c15 	stw	r16,1200(sp)
1000bc6c:	4023883a 	mov	r17,r8
1000bc70:	9821883a 	mov	r16,r19
1000bc74:	a809883a 	mov	r4,r21
1000bc78:	01400284 	movi	r5,10
1000bc7c:	00074580 	call	10007458 <__modsi3>
1000bc80:	10800c04 	addi	r2,r2,48
1000bc84:	843fffc4 	addi	r16,r16,-1
1000bc88:	a809883a 	mov	r4,r21
1000bc8c:	01400284 	movi	r5,10
1000bc90:	80800005 	stb	r2,0(r16)
1000bc94:	00074040 	call	10007404 <__divsi3>
1000bc98:	01000244 	movi	r4,9
1000bc9c:	102b883a 	mov	r21,r2
1000bca0:	20bff416 	blt	r4,r2,1000bc74 <__alt_data_end+0xf800bc74>
1000bca4:	8811883a 	mov	r8,r17
1000bca8:	10800c04 	addi	r2,r2,48
1000bcac:	8023883a 	mov	r17,r16
1000bcb0:	897fffc4 	addi	r5,r17,-1
1000bcb4:	88bfffc5 	stb	r2,-1(r17)
1000bcb8:	dc012c17 	ldw	r16,1200(sp)
1000bcbc:	2cc08a2e 	bgeu	r5,r19,1000bee8 <___vfprintf_internal_r+0x20ec>
1000bcc0:	d9812384 	addi	r6,sp,1166
1000bcc4:	344dc83a 	sub	r6,r6,r17
1000bcc8:	d9012344 	addi	r4,sp,1165
1000bccc:	998d883a 	add	r6,r19,r6
1000bcd0:	00000106 	br	1000bcd8 <___vfprintf_internal_r+0x1edc>
1000bcd4:	28800003 	ldbu	r2,0(r5)
1000bcd8:	20800005 	stb	r2,0(r4)
1000bcdc:	21000044 	addi	r4,r4,1
1000bce0:	29400044 	addi	r5,r5,1
1000bce4:	21bffb1e 	bne	r4,r6,1000bcd4 <__alt_data_end+0xf800bcd4>
1000bce8:	d8812304 	addi	r2,sp,1164
1000bcec:	1445c83a 	sub	r2,r2,r17
1000bcf0:	d9412344 	addi	r5,sp,1165
1000bcf4:	2885883a 	add	r2,r5,r2
1000bcf8:	14e7c83a 	sub	r19,r2,r19
1000bcfc:	d8813317 	ldw	r2,1228(sp)
1000bd00:	d8c13317 	ldw	r3,1228(sp)
1000bd04:	dcc13a15 	stw	r19,1256(sp)
1000bd08:	14e3883a 	add	r17,r2,r19
1000bd0c:	00800044 	movi	r2,1
1000bd10:	10c0550e 	bge	r2,r3,1000be68 <___vfprintf_internal_r+0x206c>
1000bd14:	8c400044 	addi	r17,r17,1
1000bd18:	8839883a 	mov	fp,r17
1000bd1c:	88005016 	blt	r17,zero,1000be60 <___vfprintf_internal_r+0x2064>
1000bd20:	d8013415 	stw	zero,1232(sp)
1000bd24:	003e3f06 	br	1000b624 <__alt_data_end+0xf800b624>
1000bd28:	da412b15 	stw	r9,1196(sp)
1000bd2c:	dcc12783 	ldbu	r19,1182(sp)
1000bd30:	4823883a 	mov	r17,r9
1000bd34:	dc812d15 	stw	r18,1204(sp)
1000bd38:	d8013215 	stw	zero,1224(sp)
1000bd3c:	d8013415 	stw	zero,1232(sp)
1000bd40:	0039ae06 	br	1000a3fc <__alt_data_end+0xf800a3fc>
1000bd44:	483de91e 	bne	r9,zero,1000b4ec <__alt_data_end+0xf800b4ec>
1000bd48:	8813883a 	mov	r9,r17
1000bd4c:	003de706 	br	1000b4ec <__alt_data_end+0xf800b4ec>
1000bd50:	b809883a 	mov	r4,r23
1000bd54:	b00b883a 	mov	r5,r22
1000bd58:	d9811e04 	addi	r6,sp,1144
1000bd5c:	00111040 	call	10011104 <__sprint_r>
1000bd60:	10393e1e 	bne	r2,zero,1000a25c <__alt_data_end+0xf800a25c>
1000bd64:	dc012617 	ldw	r16,1176(sp)
1000bd68:	d8c12017 	ldw	r3,1152(sp)
1000bd6c:	d8811f17 	ldw	r2,1148(sp)
1000bd70:	da000404 	addi	r8,sp,16
1000bd74:	003ea006 	br	1000b7f8 <__alt_data_end+0xf800b7f8>
1000bd78:	00c00b44 	movi	r3,45
1000bd7c:	2460003c 	xorhi	r17,r4,32768
1000bd80:	d8c12b05 	stb	r3,1196(sp)
1000bd84:	003ddf06 	br	1000b504 <__alt_data_end+0xf800b504>
1000bd88:	02400184 	movi	r9,6
1000bd8c:	003dd706 	br	1000b4ec <__alt_data_end+0xf800b4ec>
1000bd90:	4d400044 	addi	r21,r9,1
1000bd94:	003de206 	br	1000b520 <__alt_data_end+0xf800b520>
1000bd98:	d8c13417 	ldw	r3,1232(sp)
1000bd9c:	00c0490e 	bge	zero,r3,1000bec4 <___vfprintf_internal_r+0x20c8>
1000bda0:	04400044 	movi	r17,1
1000bda4:	d9013317 	ldw	r4,1228(sp)
1000bda8:	8923883a 	add	r17,r17,r4
1000bdac:	8839883a 	mov	fp,r17
1000bdb0:	883e1c0e 	bge	r17,zero,1000b624 <__alt_data_end+0xf800b624>
1000bdb4:	0039883a 	mov	fp,zero
1000bdb8:	003e1a06 	br	1000b624 <__alt_data_end+0xf800b624>
1000bdbc:	00c03b0e 	bge	zero,r3,1000beac <___vfprintf_internal_r+0x20b0>
1000bdc0:	4800021e 	bne	r9,zero,1000bdcc <___vfprintf_internal_r+0x1fd0>
1000bdc4:	e080004c 	andi	r2,fp,1
1000bdc8:	10000626 	beq	r2,zero,1000bde4 <___vfprintf_internal_r+0x1fe8>
1000bdcc:	d8c13417 	ldw	r3,1232(sp)
1000bdd0:	4a400044 	addi	r9,r9,1
1000bdd4:	1a63883a 	add	r17,r3,r9
1000bdd8:	8839883a 	mov	fp,r17
1000bddc:	883e110e 	bge	r17,zero,1000b624 <__alt_data_end+0xf800b624>
1000bde0:	003ff406 	br	1000bdb4 <__alt_data_end+0xf800bdb4>
1000bde4:	1839883a 	mov	fp,r3
1000bde8:	18004116 	blt	r3,zero,1000bef0 <___vfprintf_internal_r+0x20f4>
1000bdec:	dc413417 	ldw	r17,1232(sp)
1000bdf0:	003e0c06 	br	1000b624 <__alt_data_end+0xf800b624>
1000bdf4:	d8812117 	ldw	r2,1156(sp)
1000bdf8:	003df606 	br	1000b5d4 <__alt_data_end+0xf800b5d4>
1000bdfc:	00800c04 	movi	r2,48
1000be00:	a8c00c04 	addi	r3,r21,48
1000be04:	d8812345 	stb	r2,1165(sp)
1000be08:	d8c12385 	stb	r3,1166(sp)
1000be0c:	d88123c4 	addi	r2,sp,1167
1000be10:	dcc122c4 	addi	r19,sp,1163
1000be14:	003fb806 	br	1000bcf8 <__alt_data_end+0xf800bcf8>
1000be18:	d9013717 	ldw	r4,1244(sp)
1000be1c:	880b883a 	mov	r5,r17
1000be20:	000d883a 	mov	r6,zero
1000be24:	000f883a 	mov	r7,zero
1000be28:	da013f15 	stw	r8,1276(sp)
1000be2c:	da413e15 	stw	r9,1272(sp)
1000be30:	da813d15 	stw	r10,1268(sp)
1000be34:	0014e340 	call	10014e34 <__eqdf2>
1000be38:	da013f17 	ldw	r8,1276(sp)
1000be3c:	da413e17 	ldw	r9,1272(sp)
1000be40:	da813d17 	ldw	r10,1268(sp)
1000be44:	103f1726 	beq	r2,zero,1000baa4 <__alt_data_end+0xf800baa4>
1000be48:	00800044 	movi	r2,1
1000be4c:	1547c83a 	sub	r3,r2,r21
1000be50:	d8c12615 	stw	r3,1176(sp)
1000be54:	003f1406 	br	1000baa8 <__alt_data_end+0xf800baa8>
1000be58:	0005883a 	mov	r2,zero
1000be5c:	003f4c06 	br	1000bb90 <__alt_data_end+0xf800bb90>
1000be60:	0039883a 	mov	fp,zero
1000be64:	003fae06 	br	1000bd20 <__alt_data_end+0xf800bd20>
1000be68:	e084703a 	and	r2,fp,r2
1000be6c:	103faa26 	beq	r2,zero,1000bd18 <__alt_data_end+0xf800bd18>
1000be70:	003fa806 	br	1000bd14 <__alt_data_end+0xf800bd14>
1000be74:	d9412d17 	ldw	r5,1204(sp)
1000be78:	2a400017 	ldw	r9,0(r5)
1000be7c:	28c00104 	addi	r3,r5,4
1000be80:	d8c12d15 	stw	r3,1204(sp)
1000be84:	483ebc0e 	bge	r9,zero,1000b978 <__alt_data_end+0xf800b978>
1000be88:	027fffc4 	movi	r9,-1
1000be8c:	e4000047 	ldb	r16,1(fp)
1000be90:	00384206 	br	10009f9c <__alt_data_end+0xf8009f9c>
1000be94:	043fffc4 	movi	r16,-1
1000be98:	0038ce06 	br	1000a1d4 <__alt_data_end+0xf800a1d4>
1000be9c:	00800b44 	movi	r2,45
1000bea0:	056bc83a 	sub	r21,zero,r21
1000bea4:	d8812305 	stb	r2,1164(sp)
1000bea8:	003f6c06 	br	1000bc5c <__alt_data_end+0xf800bc5c>
1000beac:	4800081e 	bne	r9,zero,1000bed0 <___vfprintf_internal_r+0x20d4>
1000beb0:	e080004c 	andi	r2,fp,1
1000beb4:	1000061e 	bne	r2,zero,1000bed0 <___vfprintf_internal_r+0x20d4>
1000beb8:	07000044 	movi	fp,1
1000bebc:	e023883a 	mov	r17,fp
1000bec0:	003dd806 	br	1000b624 <__alt_data_end+0xf800b624>
1000bec4:	04400084 	movi	r17,2
1000bec8:	88e3c83a 	sub	r17,r17,r3
1000becc:	003fb506 	br	1000bda4 <__alt_data_end+0xf800bda4>
1000bed0:	4c400084 	addi	r17,r9,2
1000bed4:	8839883a 	mov	fp,r17
1000bed8:	883dd20e 	bge	r17,zero,1000b624 <__alt_data_end+0xf800b624>
1000bedc:	003fb506 	br	1000bdb4 <__alt_data_end+0xf800bdb4>
1000bee0:	d8c12617 	ldw	r3,1176(sp)
1000bee4:	003f5706 	br	1000bc44 <__alt_data_end+0xf800bc44>
1000bee8:	d8812344 	addi	r2,sp,1165
1000beec:	003f8206 	br	1000bcf8 <__alt_data_end+0xf800bcf8>
1000bef0:	0039883a 	mov	fp,zero
1000bef4:	003fbd06 	br	1000bdec <__alt_data_end+0xf800bdec>

1000bef8 <__vfprintf_internal>:
1000bef8:	2007883a 	mov	r3,r4
1000befc:	010400b4 	movhi	r4,4098
1000bf00:	212e8a04 	addi	r4,r4,-17880
1000bf04:	21000017 	ldw	r4,0(r4)
1000bf08:	2805883a 	mov	r2,r5
1000bf0c:	300f883a 	mov	r7,r6
1000bf10:	180b883a 	mov	r5,r3
1000bf14:	100d883a 	mov	r6,r2
1000bf18:	0009dfc1 	jmpi	10009dfc <___vfprintf_internal_r>

1000bf1c <__swsetup_r>:
1000bf1c:	008400b4 	movhi	r2,4098
1000bf20:	defffd04 	addi	sp,sp,-12
1000bf24:	10ae8a04 	addi	r2,r2,-17880
1000bf28:	dc400115 	stw	r17,4(sp)
1000bf2c:	2023883a 	mov	r17,r4
1000bf30:	11000017 	ldw	r4,0(r2)
1000bf34:	dc000015 	stw	r16,0(sp)
1000bf38:	dfc00215 	stw	ra,8(sp)
1000bf3c:	2821883a 	mov	r16,r5
1000bf40:	20000226 	beq	r4,zero,1000bf4c <__swsetup_r+0x30>
1000bf44:	20c00e17 	ldw	r3,56(r4)
1000bf48:	18002e26 	beq	r3,zero,1000c004 <__swsetup_r+0xe8>
1000bf4c:	8080030b 	ldhu	r2,12(r16)
1000bf50:	10c0020c 	andi	r3,r2,8
1000bf54:	100d883a 	mov	r6,r2
1000bf58:	18000f26 	beq	r3,zero,1000bf98 <__swsetup_r+0x7c>
1000bf5c:	80c00417 	ldw	r3,16(r16)
1000bf60:	18001526 	beq	r3,zero,1000bfb8 <__swsetup_r+0x9c>
1000bf64:	1100004c 	andi	r4,r2,1
1000bf68:	20001c1e 	bne	r4,zero,1000bfdc <__swsetup_r+0xc0>
1000bf6c:	1080008c 	andi	r2,r2,2
1000bf70:	1000261e 	bne	r2,zero,1000c00c <__swsetup_r+0xf0>
1000bf74:	80800517 	ldw	r2,20(r16)
1000bf78:	80800215 	stw	r2,8(r16)
1000bf7c:	18001c26 	beq	r3,zero,1000bff0 <__swsetup_r+0xd4>
1000bf80:	0005883a 	mov	r2,zero
1000bf84:	dfc00217 	ldw	ra,8(sp)
1000bf88:	dc400117 	ldw	r17,4(sp)
1000bf8c:	dc000017 	ldw	r16,0(sp)
1000bf90:	dec00304 	addi	sp,sp,12
1000bf94:	f800283a 	ret
1000bf98:	3080040c 	andi	r2,r6,16
1000bf9c:	10001726 	beq	r2,zero,1000bffc <__swsetup_r+0xe0>
1000bfa0:	3080010c 	andi	r2,r6,4
1000bfa4:	10001b1e 	bne	r2,zero,1000c014 <__swsetup_r+0xf8>
1000bfa8:	80c00417 	ldw	r3,16(r16)
1000bfac:	30800214 	ori	r2,r6,8
1000bfb0:	8080030d 	sth	r2,12(r16)
1000bfb4:	183feb1e 	bne	r3,zero,1000bf64 <__alt_data_end+0xf800bf64>
1000bfb8:	1140a00c 	andi	r5,r2,640
1000bfbc:	01008004 	movi	r4,512
1000bfc0:	293fe826 	beq	r5,r4,1000bf64 <__alt_data_end+0xf800bf64>
1000bfc4:	8809883a 	mov	r4,r17
1000bfc8:	800b883a 	mov	r5,r16
1000bfcc:	000eab00 	call	1000eab0 <__smakebuf_r>
1000bfd0:	8080030b 	ldhu	r2,12(r16)
1000bfd4:	80c00417 	ldw	r3,16(r16)
1000bfd8:	003fe206 	br	1000bf64 <__alt_data_end+0xf800bf64>
1000bfdc:	80800517 	ldw	r2,20(r16)
1000bfe0:	80000215 	stw	zero,8(r16)
1000bfe4:	0085c83a 	sub	r2,zero,r2
1000bfe8:	80800615 	stw	r2,24(r16)
1000bfec:	183fe41e 	bne	r3,zero,1000bf80 <__alt_data_end+0xf800bf80>
1000bff0:	8080030b 	ldhu	r2,12(r16)
1000bff4:	1080200c 	andi	r2,r2,128
1000bff8:	103fe226 	beq	r2,zero,1000bf84 <__alt_data_end+0xf800bf84>
1000bffc:	00bfffc4 	movi	r2,-1
1000c000:	003fe006 	br	1000bf84 <__alt_data_end+0xf800bf84>
1000c004:	000df580 	call	1000df58 <__sinit>
1000c008:	003fd006 	br	1000bf4c <__alt_data_end+0xf800bf4c>
1000c00c:	0005883a 	mov	r2,zero
1000c010:	003fd906 	br	1000bf78 <__alt_data_end+0xf800bf78>
1000c014:	81400c17 	ldw	r5,48(r16)
1000c018:	28000626 	beq	r5,zero,1000c034 <__swsetup_r+0x118>
1000c01c:	80801004 	addi	r2,r16,64
1000c020:	28800326 	beq	r5,r2,1000c030 <__swsetup_r+0x114>
1000c024:	8809883a 	mov	r4,r17
1000c028:	000e0cc0 	call	1000e0cc <_free_r>
1000c02c:	8180030b 	ldhu	r6,12(r16)
1000c030:	80000c15 	stw	zero,48(r16)
1000c034:	80c00417 	ldw	r3,16(r16)
1000c038:	00bff6c4 	movi	r2,-37
1000c03c:	118c703a 	and	r6,r2,r6
1000c040:	80000115 	stw	zero,4(r16)
1000c044:	80c00015 	stw	r3,0(r16)
1000c048:	003fd806 	br	1000bfac <__alt_data_end+0xf800bfac>

1000c04c <quorem>:
1000c04c:	defff204 	addi	sp,sp,-56
1000c050:	ddc00b15 	stw	r23,44(sp)
1000c054:	20800417 	ldw	r2,16(r4)
1000c058:	2dc00417 	ldw	r23,16(r5)
1000c05c:	dfc00d15 	stw	ra,52(sp)
1000c060:	df000c15 	stw	fp,48(sp)
1000c064:	dd800a15 	stw	r22,40(sp)
1000c068:	dd400915 	stw	r21,36(sp)
1000c06c:	dd000815 	stw	r20,32(sp)
1000c070:	dcc00715 	stw	r19,28(sp)
1000c074:	dc800615 	stw	r18,24(sp)
1000c078:	dc400515 	stw	r17,20(sp)
1000c07c:	dc000415 	stw	r16,16(sp)
1000c080:	15c07a16 	blt	r2,r23,1000c26c <quorem+0x220>
1000c084:	bdffffc4 	addi	r23,r23,-1
1000c088:	bde9883a 	add	r20,r23,r23
1000c08c:	28c00504 	addi	r3,r5,20
1000c090:	a529883a 	add	r20,r20,r20
1000c094:	1d39883a 	add	fp,r3,r20
1000c098:	24c00504 	addi	r19,r4,20
1000c09c:	d9400215 	stw	r5,8(sp)
1000c0a0:	9d29883a 	add	r20,r19,r20
1000c0a4:	e1400017 	ldw	r5,0(fp)
1000c0a8:	d9000015 	stw	r4,0(sp)
1000c0ac:	a1000017 	ldw	r4,0(r20)
1000c0b0:	29400044 	addi	r5,r5,1
1000c0b4:	d8c00115 	stw	r3,4(sp)
1000c0b8:	dd000315 	stw	r20,12(sp)
1000c0bc:	00074b40 	call	100074b4 <__udivsi3>
1000c0c0:	1025883a 	mov	r18,r2
1000c0c4:	10003026 	beq	r2,zero,1000c188 <quorem+0x13c>
1000c0c8:	dc400117 	ldw	r17,4(sp)
1000c0cc:	9829883a 	mov	r20,r19
1000c0d0:	002d883a 	mov	r22,zero
1000c0d4:	0021883a 	mov	r16,zero
1000c0d8:	8d400017 	ldw	r21,0(r17)
1000c0dc:	900b883a 	mov	r5,r18
1000c0e0:	8c400104 	addi	r17,r17,4
1000c0e4:	a93fffcc 	andi	r4,r21,65535
1000c0e8:	00074c40 	call	100074c4 <__mulsi3>
1000c0ec:	a808d43a 	srli	r4,r21,16
1000c0f0:	900b883a 	mov	r5,r18
1000c0f4:	b0ad883a 	add	r22,r22,r2
1000c0f8:	00074c40 	call	100074c4 <__mulsi3>
1000c0fc:	a1000017 	ldw	r4,0(r20)
1000c100:	b00cd43a 	srli	r6,r22,16
1000c104:	b0ffffcc 	andi	r3,r22,65535
1000c108:	217fffcc 	andi	r5,r4,65535
1000c10c:	2c21883a 	add	r16,r5,r16
1000c110:	80c7c83a 	sub	r3,r16,r3
1000c114:	2008d43a 	srli	r4,r4,16
1000c118:	3085883a 	add	r2,r6,r2
1000c11c:	1821d43a 	srai	r16,r3,16
1000c120:	117fffcc 	andi	r5,r2,65535
1000c124:	2149c83a 	sub	r4,r4,r5
1000c128:	2421883a 	add	r16,r4,r16
1000c12c:	8008943a 	slli	r4,r16,16
1000c130:	18ffffcc 	andi	r3,r3,65535
1000c134:	102cd43a 	srli	r22,r2,16
1000c138:	20c8b03a 	or	r4,r4,r3
1000c13c:	a1000015 	stw	r4,0(r20)
1000c140:	8021d43a 	srai	r16,r16,16
1000c144:	a5000104 	addi	r20,r20,4
1000c148:	e47fe32e 	bgeu	fp,r17,1000c0d8 <__alt_data_end+0xf800c0d8>
1000c14c:	d8c00317 	ldw	r3,12(sp)
1000c150:	18800017 	ldw	r2,0(r3)
1000c154:	10000c1e 	bne	r2,zero,1000c188 <quorem+0x13c>
1000c158:	18bfff04 	addi	r2,r3,-4
1000c15c:	9880082e 	bgeu	r19,r2,1000c180 <quorem+0x134>
1000c160:	18ffff17 	ldw	r3,-4(r3)
1000c164:	18000326 	beq	r3,zero,1000c174 <quorem+0x128>
1000c168:	00000506 	br	1000c180 <quorem+0x134>
1000c16c:	10c00017 	ldw	r3,0(r2)
1000c170:	1800031e 	bne	r3,zero,1000c180 <quorem+0x134>
1000c174:	10bfff04 	addi	r2,r2,-4
1000c178:	bdffffc4 	addi	r23,r23,-1
1000c17c:	98bffb36 	bltu	r19,r2,1000c16c <__alt_data_end+0xf800c16c>
1000c180:	d8c00017 	ldw	r3,0(sp)
1000c184:	1dc00415 	stw	r23,16(r3)
1000c188:	d9000017 	ldw	r4,0(sp)
1000c18c:	d9400217 	ldw	r5,8(sp)
1000c190:	00100f40 	call	100100f4 <__mcmp>
1000c194:	10002816 	blt	r2,zero,1000c238 <quorem+0x1ec>
1000c198:	dc400117 	ldw	r17,4(sp)
1000c19c:	94800044 	addi	r18,r18,1
1000c1a0:	980d883a 	mov	r6,r19
1000c1a4:	0007883a 	mov	r3,zero
1000c1a8:	31000017 	ldw	r4,0(r6)
1000c1ac:	89400017 	ldw	r5,0(r17)
1000c1b0:	31800104 	addi	r6,r6,4
1000c1b4:	20bfffcc 	andi	r2,r4,65535
1000c1b8:	10c7883a 	add	r3,r2,r3
1000c1bc:	28bfffcc 	andi	r2,r5,65535
1000c1c0:	1885c83a 	sub	r2,r3,r2
1000c1c4:	280ad43a 	srli	r5,r5,16
1000c1c8:	2008d43a 	srli	r4,r4,16
1000c1cc:	1007d43a 	srai	r3,r2,16
1000c1d0:	10bfffcc 	andi	r2,r2,65535
1000c1d4:	2149c83a 	sub	r4,r4,r5
1000c1d8:	20c9883a 	add	r4,r4,r3
1000c1dc:	200a943a 	slli	r5,r4,16
1000c1e0:	8c400104 	addi	r17,r17,4
1000c1e4:	2007d43a 	srai	r3,r4,16
1000c1e8:	2884b03a 	or	r2,r5,r2
1000c1ec:	30bfff15 	stw	r2,-4(r6)
1000c1f0:	e47fed2e 	bgeu	fp,r17,1000c1a8 <__alt_data_end+0xf800c1a8>
1000c1f4:	bdc5883a 	add	r2,r23,r23
1000c1f8:	1085883a 	add	r2,r2,r2
1000c1fc:	9887883a 	add	r3,r19,r2
1000c200:	18800017 	ldw	r2,0(r3)
1000c204:	10000c1e 	bne	r2,zero,1000c238 <quorem+0x1ec>
1000c208:	18bfff04 	addi	r2,r3,-4
1000c20c:	9880082e 	bgeu	r19,r2,1000c230 <quorem+0x1e4>
1000c210:	18ffff17 	ldw	r3,-4(r3)
1000c214:	18000326 	beq	r3,zero,1000c224 <quorem+0x1d8>
1000c218:	00000506 	br	1000c230 <quorem+0x1e4>
1000c21c:	10c00017 	ldw	r3,0(r2)
1000c220:	1800031e 	bne	r3,zero,1000c230 <quorem+0x1e4>
1000c224:	10bfff04 	addi	r2,r2,-4
1000c228:	bdffffc4 	addi	r23,r23,-1
1000c22c:	98bffb36 	bltu	r19,r2,1000c21c <__alt_data_end+0xf800c21c>
1000c230:	d8c00017 	ldw	r3,0(sp)
1000c234:	1dc00415 	stw	r23,16(r3)
1000c238:	9005883a 	mov	r2,r18
1000c23c:	dfc00d17 	ldw	ra,52(sp)
1000c240:	df000c17 	ldw	fp,48(sp)
1000c244:	ddc00b17 	ldw	r23,44(sp)
1000c248:	dd800a17 	ldw	r22,40(sp)
1000c24c:	dd400917 	ldw	r21,36(sp)
1000c250:	dd000817 	ldw	r20,32(sp)
1000c254:	dcc00717 	ldw	r19,28(sp)
1000c258:	dc800617 	ldw	r18,24(sp)
1000c25c:	dc400517 	ldw	r17,20(sp)
1000c260:	dc000417 	ldw	r16,16(sp)
1000c264:	dec00e04 	addi	sp,sp,56
1000c268:	f800283a 	ret
1000c26c:	0005883a 	mov	r2,zero
1000c270:	003ff206 	br	1000c23c <__alt_data_end+0xf800c23c>

1000c274 <_dtoa_r>:
1000c274:	20801017 	ldw	r2,64(r4)
1000c278:	deffde04 	addi	sp,sp,-136
1000c27c:	dd401d15 	stw	r21,116(sp)
1000c280:	dcc01b15 	stw	r19,108(sp)
1000c284:	dc801a15 	stw	r18,104(sp)
1000c288:	dc401915 	stw	r17,100(sp)
1000c28c:	dc001815 	stw	r16,96(sp)
1000c290:	dfc02115 	stw	ra,132(sp)
1000c294:	df002015 	stw	fp,128(sp)
1000c298:	ddc01f15 	stw	r23,124(sp)
1000c29c:	dd801e15 	stw	r22,120(sp)
1000c2a0:	dd001c15 	stw	r20,112(sp)
1000c2a4:	d9c00315 	stw	r7,12(sp)
1000c2a8:	2021883a 	mov	r16,r4
1000c2ac:	302b883a 	mov	r21,r6
1000c2b0:	2825883a 	mov	r18,r5
1000c2b4:	dc402417 	ldw	r17,144(sp)
1000c2b8:	3027883a 	mov	r19,r6
1000c2bc:	10000826 	beq	r2,zero,1000c2e0 <_dtoa_r+0x6c>
1000c2c0:	21801117 	ldw	r6,68(r4)
1000c2c4:	00c00044 	movi	r3,1
1000c2c8:	100b883a 	mov	r5,r2
1000c2cc:	1986983a 	sll	r3,r3,r6
1000c2d0:	11800115 	stw	r6,4(r2)
1000c2d4:	10c00215 	stw	r3,8(r2)
1000c2d8:	000f8200 	call	1000f820 <_Bfree>
1000c2dc:	80001015 	stw	zero,64(r16)
1000c2e0:	a8002d16 	blt	r21,zero,1000c398 <_dtoa_r+0x124>
1000c2e4:	88000015 	stw	zero,0(r17)
1000c2e8:	a8dffc2c 	andhi	r3,r21,32752
1000c2ec:	009ffc34 	movhi	r2,32752
1000c2f0:	18801b26 	beq	r3,r2,1000c360 <_dtoa_r+0xec>
1000c2f4:	9009883a 	mov	r4,r18
1000c2f8:	980b883a 	mov	r5,r19
1000c2fc:	000d883a 	mov	r6,zero
1000c300:	000f883a 	mov	r7,zero
1000c304:	0014e340 	call	10014e34 <__eqdf2>
1000c308:	10002a1e 	bne	r2,zero,1000c3b4 <_dtoa_r+0x140>
1000c30c:	d8c02317 	ldw	r3,140(sp)
1000c310:	d9002517 	ldw	r4,148(sp)
1000c314:	00800044 	movi	r2,1
1000c318:	18800015 	stw	r2,0(r3)
1000c31c:	2001a226 	beq	r4,zero,1000c9a8 <_dtoa_r+0x734>
1000c320:	008400b4 	movhi	r2,4098
1000c324:	10a76f44 	addi	r2,r2,-25155
1000c328:	20800015 	stw	r2,0(r4)
1000c32c:	10bfffc4 	addi	r2,r2,-1
1000c330:	dfc02117 	ldw	ra,132(sp)
1000c334:	df002017 	ldw	fp,128(sp)
1000c338:	ddc01f17 	ldw	r23,124(sp)
1000c33c:	dd801e17 	ldw	r22,120(sp)
1000c340:	dd401d17 	ldw	r21,116(sp)
1000c344:	dd001c17 	ldw	r20,112(sp)
1000c348:	dcc01b17 	ldw	r19,108(sp)
1000c34c:	dc801a17 	ldw	r18,104(sp)
1000c350:	dc401917 	ldw	r17,100(sp)
1000c354:	dc001817 	ldw	r16,96(sp)
1000c358:	dec02204 	addi	sp,sp,136
1000c35c:	f800283a 	ret
1000c360:	d8c02317 	ldw	r3,140(sp)
1000c364:	0089c3c4 	movi	r2,9999
1000c368:	18800015 	stw	r2,0(r3)
1000c36c:	90017c26 	beq	r18,zero,1000c960 <_dtoa_r+0x6ec>
1000c370:	008400b4 	movhi	r2,4098
1000c374:	10a77b04 	addi	r2,r2,-25108
1000c378:	d9002517 	ldw	r4,148(sp)
1000c37c:	203fec26 	beq	r4,zero,1000c330 <__alt_data_end+0xf800c330>
1000c380:	10c000c7 	ldb	r3,3(r2)
1000c384:	18017d1e 	bne	r3,zero,1000c97c <_dtoa_r+0x708>
1000c388:	10c000c4 	addi	r3,r2,3
1000c38c:	d9802517 	ldw	r6,148(sp)
1000c390:	30c00015 	stw	r3,0(r6)
1000c394:	003fe606 	br	1000c330 <__alt_data_end+0xf800c330>
1000c398:	04e00034 	movhi	r19,32768
1000c39c:	9cffffc4 	addi	r19,r19,-1
1000c3a0:	00800044 	movi	r2,1
1000c3a4:	ace6703a 	and	r19,r21,r19
1000c3a8:	88800015 	stw	r2,0(r17)
1000c3ac:	982b883a 	mov	r21,r19
1000c3b0:	003fcd06 	br	1000c2e8 <__alt_data_end+0xf800c2e8>
1000c3b4:	d8800204 	addi	r2,sp,8
1000c3b8:	a822d53a 	srli	r17,r21,20
1000c3bc:	d8800015 	stw	r2,0(sp)
1000c3c0:	8009883a 	mov	r4,r16
1000c3c4:	900b883a 	mov	r5,r18
1000c3c8:	980d883a 	mov	r6,r19
1000c3cc:	d9c00104 	addi	r7,sp,4
1000c3d0:	00104680 	call	10010468 <__d2b>
1000c3d4:	1039883a 	mov	fp,r2
1000c3d8:	88016a1e 	bne	r17,zero,1000c984 <_dtoa_r+0x710>
1000c3dc:	dd000217 	ldw	r20,8(sp)
1000c3e0:	dc400117 	ldw	r17,4(sp)
1000c3e4:	00befbc4 	movi	r2,-1041
1000c3e8:	a463883a 	add	r17,r20,r17
1000c3ec:	8882ea16 	blt	r17,r2,1000cf98 <_dtoa_r+0xd24>
1000c3f0:	00bf0384 	movi	r2,-1010
1000c3f4:	1445c83a 	sub	r2,r2,r17
1000c3f8:	89010484 	addi	r4,r17,1042
1000c3fc:	a8aa983a 	sll	r21,r21,r2
1000c400:	9108d83a 	srl	r4,r18,r4
1000c404:	a908b03a 	or	r4,r21,r4
1000c408:	00151d00 	call	100151d0 <__floatunsidf>
1000c40c:	017f8434 	movhi	r5,65040
1000c410:	01800044 	movi	r6,1
1000c414:	1009883a 	mov	r4,r2
1000c418:	194b883a 	add	r5,r3,r5
1000c41c:	8c7fffc4 	addi	r17,r17,-1
1000c420:	d9800f15 	stw	r6,60(sp)
1000c424:	000d883a 	mov	r6,zero
1000c428:	01cffe34 	movhi	r7,16376
1000c42c:	0008ea00 	call	10008ea0 <__subdf3>
1000c430:	0198dbf4 	movhi	r6,25455
1000c434:	01cff4f4 	movhi	r7,16339
1000c438:	1009883a 	mov	r4,r2
1000c43c:	180b883a 	mov	r5,r3
1000c440:	3190d844 	addi	r6,r6,17249
1000c444:	39e1e9c4 	addi	r7,r7,-30809
1000c448:	00086340 	call	10008634 <__muldf3>
1000c44c:	01a2d874 	movhi	r6,35681
1000c450:	01cff1f4 	movhi	r7,16327
1000c454:	180b883a 	mov	r5,r3
1000c458:	31b22cc4 	addi	r6,r6,-14157
1000c45c:	39e28a04 	addi	r7,r7,-30168
1000c460:	1009883a 	mov	r4,r2
1000c464:	0013c180 	call	10013c18 <__adddf3>
1000c468:	8809883a 	mov	r4,r17
1000c46c:	102d883a 	mov	r22,r2
1000c470:	182b883a 	mov	r21,r3
1000c474:	00151000 	call	10015100 <__floatsidf>
1000c478:	019427f4 	movhi	r6,20639
1000c47c:	01cff4f4 	movhi	r7,16339
1000c480:	1009883a 	mov	r4,r2
1000c484:	180b883a 	mov	r5,r3
1000c488:	319e7ec4 	addi	r6,r6,31227
1000c48c:	39d104c4 	addi	r7,r7,17427
1000c490:	00086340 	call	10008634 <__muldf3>
1000c494:	b009883a 	mov	r4,r22
1000c498:	a80b883a 	mov	r5,r21
1000c49c:	100d883a 	mov	r6,r2
1000c4a0:	180f883a 	mov	r7,r3
1000c4a4:	0013c180 	call	10013c18 <__adddf3>
1000c4a8:	1009883a 	mov	r4,r2
1000c4ac:	180b883a 	mov	r5,r3
1000c4b0:	102d883a 	mov	r22,r2
1000c4b4:	182b883a 	mov	r21,r3
1000c4b8:	00150780 	call	10015078 <__fixdfsi>
1000c4bc:	b009883a 	mov	r4,r22
1000c4c0:	a80b883a 	mov	r5,r21
1000c4c4:	000d883a 	mov	r6,zero
1000c4c8:	000f883a 	mov	r7,zero
1000c4cc:	d8800515 	stw	r2,20(sp)
1000c4d0:	0014f980 	call	10014f98 <__ledf2>
1000c4d4:	10023116 	blt	r2,zero,1000cd9c <_dtoa_r+0xb28>
1000c4d8:	d8c00517 	ldw	r3,20(sp)
1000c4dc:	00800584 	movi	r2,22
1000c4e0:	10c21f36 	bltu	r2,r3,1000cd60 <_dtoa_r+0xaec>
1000c4e4:	180490fa 	slli	r2,r3,3
1000c4e8:	00c400b4 	movhi	r3,4098
1000c4ec:	18e79704 	addi	r3,r3,-24996
1000c4f0:	1885883a 	add	r2,r3,r2
1000c4f4:	11000017 	ldw	r4,0(r2)
1000c4f8:	11400117 	ldw	r5,4(r2)
1000c4fc:	900d883a 	mov	r6,r18
1000c500:	980f883a 	mov	r7,r19
1000c504:	0014eb80 	call	10014eb8 <__gedf2>
1000c508:	0082a70e 	bge	zero,r2,1000cfa8 <_dtoa_r+0xd34>
1000c50c:	d9000517 	ldw	r4,20(sp)
1000c510:	d8000c15 	stw	zero,48(sp)
1000c514:	213fffc4 	addi	r4,r4,-1
1000c518:	d9000515 	stw	r4,20(sp)
1000c51c:	a463c83a 	sub	r17,r20,r17
1000c520:	8dbfffc4 	addi	r22,r17,-1
1000c524:	b0021916 	blt	r22,zero,1000cd8c <_dtoa_r+0xb18>
1000c528:	d8000815 	stw	zero,32(sp)
1000c52c:	d8800517 	ldw	r2,20(sp)
1000c530:	10020e16 	blt	r2,zero,1000cd6c <_dtoa_r+0xaf8>
1000c534:	b0ad883a 	add	r22,r22,r2
1000c538:	d8800a15 	stw	r2,40(sp)
1000c53c:	d8000915 	stw	zero,36(sp)
1000c540:	d8c00317 	ldw	r3,12(sp)
1000c544:	00800244 	movi	r2,9
1000c548:	10c11a36 	bltu	r2,r3,1000c9b4 <_dtoa_r+0x740>
1000c54c:	00800144 	movi	r2,5
1000c550:	10c4fc0e 	bge	r2,r3,1000d944 <_dtoa_r+0x16d0>
1000c554:	18ffff04 	addi	r3,r3,-4
1000c558:	d8c00315 	stw	r3,12(sp)
1000c55c:	0029883a 	mov	r20,zero
1000c560:	d9800317 	ldw	r6,12(sp)
1000c564:	008000c4 	movi	r2,3
1000c568:	3083bd26 	beq	r6,r2,1000d460 <_dtoa_r+0x11ec>
1000c56c:	1183670e 	bge	r2,r6,1000d30c <_dtoa_r+0x1098>
1000c570:	d8c00317 	ldw	r3,12(sp)
1000c574:	00800104 	movi	r2,4
1000c578:	1882e726 	beq	r3,r2,1000d118 <_dtoa_r+0xea4>
1000c57c:	00800144 	movi	r2,5
1000c580:	1884f21e 	bne	r3,r2,1000d94c <_dtoa_r+0x16d8>
1000c584:	00800044 	movi	r2,1
1000c588:	d8800b15 	stw	r2,44(sp)
1000c58c:	d8c02217 	ldw	r3,136(sp)
1000c590:	d9000517 	ldw	r4,20(sp)
1000c594:	1907883a 	add	r3,r3,r4
1000c598:	19800044 	addi	r6,r3,1
1000c59c:	d8c00d15 	stw	r3,52(sp)
1000c5a0:	d9800615 	stw	r6,24(sp)
1000c5a4:	0183c30e 	bge	zero,r6,1000d4b4 <_dtoa_r+0x1240>
1000c5a8:	d9800617 	ldw	r6,24(sp)
1000c5ac:	3023883a 	mov	r17,r6
1000c5b0:	80001115 	stw	zero,68(r16)
1000c5b4:	008005c4 	movi	r2,23
1000c5b8:	1184f62e 	bgeu	r2,r6,1000d994 <_dtoa_r+0x1720>
1000c5bc:	00c00044 	movi	r3,1
1000c5c0:	00800104 	movi	r2,4
1000c5c4:	1085883a 	add	r2,r2,r2
1000c5c8:	11000504 	addi	r4,r2,20
1000c5cc:	180b883a 	mov	r5,r3
1000c5d0:	18c00044 	addi	r3,r3,1
1000c5d4:	313ffb2e 	bgeu	r6,r4,1000c5c4 <__alt_data_end+0xf800c5c4>
1000c5d8:	81401115 	stw	r5,68(r16)
1000c5dc:	8009883a 	mov	r4,r16
1000c5e0:	000f7780 	call	1000f778 <_Balloc>
1000c5e4:	d8800715 	stw	r2,28(sp)
1000c5e8:	80801015 	stw	r2,64(r16)
1000c5ec:	00800384 	movi	r2,14
1000c5f0:	1440fd36 	bltu	r2,r17,1000c9e8 <_dtoa_r+0x774>
1000c5f4:	a000fc26 	beq	r20,zero,1000c9e8 <_dtoa_r+0x774>
1000c5f8:	d8800517 	ldw	r2,20(sp)
1000c5fc:	0083b90e 	bge	zero,r2,1000d4e4 <_dtoa_r+0x1270>
1000c600:	d8c00517 	ldw	r3,20(sp)
1000c604:	108003cc 	andi	r2,r2,15
1000c608:	100490fa 	slli	r2,r2,3
1000c60c:	182fd13a 	srai	r23,r3,4
1000c610:	00c400b4 	movhi	r3,4098
1000c614:	18e79704 	addi	r3,r3,-24996
1000c618:	1885883a 	add	r2,r3,r2
1000c61c:	b8c0040c 	andi	r3,r23,16
1000c620:	12c00017 	ldw	r11,0(r2)
1000c624:	12800117 	ldw	r10,4(r2)
1000c628:	18039726 	beq	r3,zero,1000d488 <_dtoa_r+0x1214>
1000c62c:	008400b4 	movhi	r2,4098
1000c630:	10a78d04 	addi	r2,r2,-25036
1000c634:	11800817 	ldw	r6,32(r2)
1000c638:	11c00917 	ldw	r7,36(r2)
1000c63c:	9009883a 	mov	r4,r18
1000c640:	980b883a 	mov	r5,r19
1000c644:	da801615 	stw	r10,88(sp)
1000c648:	dac01515 	stw	r11,84(sp)
1000c64c:	00144b40 	call	100144b4 <__divdf3>
1000c650:	da801617 	ldw	r10,88(sp)
1000c654:	dac01517 	ldw	r11,84(sp)
1000c658:	bdc003cc 	andi	r23,r23,15
1000c65c:	044000c4 	movi	r17,3
1000c660:	d8800e15 	stw	r2,56(sp)
1000c664:	182b883a 	mov	r21,r3
1000c668:	b8001126 	beq	r23,zero,1000c6b0 <_dtoa_r+0x43c>
1000c66c:	050400b4 	movhi	r20,4098
1000c670:	a5278d04 	addi	r20,r20,-25036
1000c674:	5805883a 	mov	r2,r11
1000c678:	5007883a 	mov	r3,r10
1000c67c:	b980004c 	andi	r6,r23,1
1000c680:	1009883a 	mov	r4,r2
1000c684:	b82fd07a 	srai	r23,r23,1
1000c688:	180b883a 	mov	r5,r3
1000c68c:	30000426 	beq	r6,zero,1000c6a0 <_dtoa_r+0x42c>
1000c690:	a1800017 	ldw	r6,0(r20)
1000c694:	a1c00117 	ldw	r7,4(r20)
1000c698:	8c400044 	addi	r17,r17,1
1000c69c:	00086340 	call	10008634 <__muldf3>
1000c6a0:	a5000204 	addi	r20,r20,8
1000c6a4:	b83ff51e 	bne	r23,zero,1000c67c <__alt_data_end+0xf800c67c>
1000c6a8:	1017883a 	mov	r11,r2
1000c6ac:	1815883a 	mov	r10,r3
1000c6b0:	d9000e17 	ldw	r4,56(sp)
1000c6b4:	a80b883a 	mov	r5,r21
1000c6b8:	580d883a 	mov	r6,r11
1000c6bc:	500f883a 	mov	r7,r10
1000c6c0:	00144b40 	call	100144b4 <__divdf3>
1000c6c4:	1029883a 	mov	r20,r2
1000c6c8:	182b883a 	mov	r21,r3
1000c6cc:	d9800c17 	ldw	r6,48(sp)
1000c6d0:	30000626 	beq	r6,zero,1000c6ec <_dtoa_r+0x478>
1000c6d4:	a009883a 	mov	r4,r20
1000c6d8:	a80b883a 	mov	r5,r21
1000c6dc:	000d883a 	mov	r6,zero
1000c6e0:	01cffc34 	movhi	r7,16368
1000c6e4:	0014f980 	call	10014f98 <__ledf2>
1000c6e8:	10043216 	blt	r2,zero,1000d7b4 <_dtoa_r+0x1540>
1000c6ec:	8809883a 	mov	r4,r17
1000c6f0:	00151000 	call	10015100 <__floatsidf>
1000c6f4:	1009883a 	mov	r4,r2
1000c6f8:	180b883a 	mov	r5,r3
1000c6fc:	a00d883a 	mov	r6,r20
1000c700:	a80f883a 	mov	r7,r21
1000c704:	00086340 	call	10008634 <__muldf3>
1000c708:	000d883a 	mov	r6,zero
1000c70c:	1009883a 	mov	r4,r2
1000c710:	180b883a 	mov	r5,r3
1000c714:	01d00734 	movhi	r7,16412
1000c718:	0013c180 	call	10013c18 <__adddf3>
1000c71c:	1023883a 	mov	r17,r2
1000c720:	d9800617 	ldw	r6,24(sp)
1000c724:	00bf3034 	movhi	r2,64704
1000c728:	1885883a 	add	r2,r3,r2
1000c72c:	d8800e15 	stw	r2,56(sp)
1000c730:	30032e26 	beq	r6,zero,1000d3ec <_dtoa_r+0x1178>
1000c734:	d8c00517 	ldw	r3,20(sp)
1000c738:	da800617 	ldw	r10,24(sp)
1000c73c:	d8c01215 	stw	r3,72(sp)
1000c740:	d9000b17 	ldw	r4,44(sp)
1000c744:	2003b026 	beq	r4,zero,1000d608 <_dtoa_r+0x1394>
1000c748:	50bfffc4 	addi	r2,r10,-1
1000c74c:	100490fa 	slli	r2,r2,3
1000c750:	00c400b4 	movhi	r3,4098
1000c754:	18e79704 	addi	r3,r3,-24996
1000c758:	1885883a 	add	r2,r3,r2
1000c75c:	11800017 	ldw	r6,0(r2)
1000c760:	11c00117 	ldw	r7,4(r2)
1000c764:	d8800717 	ldw	r2,28(sp)
1000c768:	0009883a 	mov	r4,zero
1000c76c:	014ff834 	movhi	r5,16352
1000c770:	da801615 	stw	r10,88(sp)
1000c774:	15c00044 	addi	r23,r2,1
1000c778:	00144b40 	call	100144b4 <__divdf3>
1000c77c:	d9c00e17 	ldw	r7,56(sp)
1000c780:	880d883a 	mov	r6,r17
1000c784:	1009883a 	mov	r4,r2
1000c788:	180b883a 	mov	r5,r3
1000c78c:	0008ea00 	call	10008ea0 <__subdf3>
1000c790:	a80b883a 	mov	r5,r21
1000c794:	a009883a 	mov	r4,r20
1000c798:	d8c01015 	stw	r3,64(sp)
1000c79c:	d8800e15 	stw	r2,56(sp)
1000c7a0:	00150780 	call	10015078 <__fixdfsi>
1000c7a4:	1009883a 	mov	r4,r2
1000c7a8:	d8801715 	stw	r2,92(sp)
1000c7ac:	00151000 	call	10015100 <__floatsidf>
1000c7b0:	a009883a 	mov	r4,r20
1000c7b4:	a80b883a 	mov	r5,r21
1000c7b8:	100d883a 	mov	r6,r2
1000c7bc:	180f883a 	mov	r7,r3
1000c7c0:	0008ea00 	call	10008ea0 <__subdf3>
1000c7c4:	da001717 	ldw	r8,92(sp)
1000c7c8:	1829883a 	mov	r20,r3
1000c7cc:	d8c00717 	ldw	r3,28(sp)
1000c7d0:	d9000e17 	ldw	r4,56(sp)
1000c7d4:	d9401017 	ldw	r5,64(sp)
1000c7d8:	42000c04 	addi	r8,r8,48
1000c7dc:	1023883a 	mov	r17,r2
1000c7e0:	1a000005 	stb	r8,0(r3)
1000c7e4:	880d883a 	mov	r6,r17
1000c7e8:	a00f883a 	mov	r7,r20
1000c7ec:	402b883a 	mov	r21,r8
1000c7f0:	0014eb80 	call	10014eb8 <__gedf2>
1000c7f4:	00844516 	blt	zero,r2,1000d90c <_dtoa_r+0x1698>
1000c7f8:	0009883a 	mov	r4,zero
1000c7fc:	014ffc34 	movhi	r5,16368
1000c800:	880d883a 	mov	r6,r17
1000c804:	a00f883a 	mov	r7,r20
1000c808:	0008ea00 	call	10008ea0 <__subdf3>
1000c80c:	d9000e17 	ldw	r4,56(sp)
1000c810:	d9401017 	ldw	r5,64(sp)
1000c814:	100d883a 	mov	r6,r2
1000c818:	180f883a 	mov	r7,r3
1000c81c:	0014eb80 	call	10014eb8 <__gedf2>
1000c820:	da801617 	ldw	r10,88(sp)
1000c824:	00843616 	blt	zero,r2,1000d900 <_dtoa_r+0x168c>
1000c828:	00800044 	movi	r2,1
1000c82c:	12806e0e 	bge	r2,r10,1000c9e8 <_dtoa_r+0x774>
1000c830:	d9000717 	ldw	r4,28(sp)
1000c834:	dd801315 	stw	r22,76(sp)
1000c838:	dc001115 	stw	r16,68(sp)
1000c83c:	2295883a 	add	r10,r4,r10
1000c840:	dcc01415 	stw	r19,80(sp)
1000c844:	502d883a 	mov	r22,r10
1000c848:	dcc01017 	ldw	r19,64(sp)
1000c84c:	b821883a 	mov	r16,r23
1000c850:	dc801015 	stw	r18,64(sp)
1000c854:	dc800e17 	ldw	r18,56(sp)
1000c858:	00000906 	br	1000c880 <_dtoa_r+0x60c>
1000c85c:	0008ea00 	call	10008ea0 <__subdf3>
1000c860:	1009883a 	mov	r4,r2
1000c864:	180b883a 	mov	r5,r3
1000c868:	900d883a 	mov	r6,r18
1000c86c:	980f883a 	mov	r7,r19
1000c870:	0014f980 	call	10014f98 <__ledf2>
1000c874:	10040e16 	blt	r2,zero,1000d8b0 <_dtoa_r+0x163c>
1000c878:	b821883a 	mov	r16,r23
1000c87c:	bd841026 	beq	r23,r22,1000d8c0 <_dtoa_r+0x164c>
1000c880:	9009883a 	mov	r4,r18
1000c884:	980b883a 	mov	r5,r19
1000c888:	000d883a 	mov	r6,zero
1000c88c:	01d00934 	movhi	r7,16420
1000c890:	00086340 	call	10008634 <__muldf3>
1000c894:	000d883a 	mov	r6,zero
1000c898:	01d00934 	movhi	r7,16420
1000c89c:	8809883a 	mov	r4,r17
1000c8a0:	a00b883a 	mov	r5,r20
1000c8a4:	1025883a 	mov	r18,r2
1000c8a8:	1827883a 	mov	r19,r3
1000c8ac:	00086340 	call	10008634 <__muldf3>
1000c8b0:	180b883a 	mov	r5,r3
1000c8b4:	1009883a 	mov	r4,r2
1000c8b8:	1823883a 	mov	r17,r3
1000c8bc:	1029883a 	mov	r20,r2
1000c8c0:	00150780 	call	10015078 <__fixdfsi>
1000c8c4:	1009883a 	mov	r4,r2
1000c8c8:	102b883a 	mov	r21,r2
1000c8cc:	00151000 	call	10015100 <__floatsidf>
1000c8d0:	a009883a 	mov	r4,r20
1000c8d4:	880b883a 	mov	r5,r17
1000c8d8:	100d883a 	mov	r6,r2
1000c8dc:	180f883a 	mov	r7,r3
1000c8e0:	0008ea00 	call	10008ea0 <__subdf3>
1000c8e4:	ad400c04 	addi	r21,r21,48
1000c8e8:	1009883a 	mov	r4,r2
1000c8ec:	180b883a 	mov	r5,r3
1000c8f0:	900d883a 	mov	r6,r18
1000c8f4:	980f883a 	mov	r7,r19
1000c8f8:	85400005 	stb	r21,0(r16)
1000c8fc:	1023883a 	mov	r17,r2
1000c900:	1829883a 	mov	r20,r3
1000c904:	0014f980 	call	10014f98 <__ledf2>
1000c908:	bdc00044 	addi	r23,r23,1
1000c90c:	0009883a 	mov	r4,zero
1000c910:	014ffc34 	movhi	r5,16368
1000c914:	880d883a 	mov	r6,r17
1000c918:	a00f883a 	mov	r7,r20
1000c91c:	103fcf0e 	bge	r2,zero,1000c85c <__alt_data_end+0xf800c85c>
1000c920:	d9801217 	ldw	r6,72(sp)
1000c924:	dc001117 	ldw	r16,68(sp)
1000c928:	d9800515 	stw	r6,20(sp)
1000c92c:	8009883a 	mov	r4,r16
1000c930:	e00b883a 	mov	r5,fp
1000c934:	000f8200 	call	1000f820 <_Bfree>
1000c938:	d8c00517 	ldw	r3,20(sp)
1000c93c:	d9002317 	ldw	r4,140(sp)
1000c940:	d9802517 	ldw	r6,148(sp)
1000c944:	b8000005 	stb	zero,0(r23)
1000c948:	18800044 	addi	r2,r3,1
1000c94c:	20800015 	stw	r2,0(r4)
1000c950:	30027226 	beq	r6,zero,1000d31c <_dtoa_r+0x10a8>
1000c954:	35c00015 	stw	r23,0(r6)
1000c958:	d8800717 	ldw	r2,28(sp)
1000c95c:	003e7406 	br	1000c330 <__alt_data_end+0xf800c330>
1000c960:	00800434 	movhi	r2,16
1000c964:	10bfffc4 	addi	r2,r2,-1
1000c968:	a8aa703a 	and	r21,r21,r2
1000c96c:	a83e801e 	bne	r21,zero,1000c370 <__alt_data_end+0xf800c370>
1000c970:	008400b4 	movhi	r2,4098
1000c974:	10a77804 	addi	r2,r2,-25120
1000c978:	003e7f06 	br	1000c378 <__alt_data_end+0xf800c378>
1000c97c:	10c00204 	addi	r3,r2,8
1000c980:	003e8206 	br	1000c38c <__alt_data_end+0xf800c38c>
1000c984:	01400434 	movhi	r5,16
1000c988:	297fffc4 	addi	r5,r5,-1
1000c98c:	994a703a 	and	r5,r19,r5
1000c990:	9009883a 	mov	r4,r18
1000c994:	8c7f0044 	addi	r17,r17,-1023
1000c998:	294ffc34 	orhi	r5,r5,16368
1000c99c:	dd000217 	ldw	r20,8(sp)
1000c9a0:	d8000f15 	stw	zero,60(sp)
1000c9a4:	003e9f06 	br	1000c424 <__alt_data_end+0xf800c424>
1000c9a8:	008400b4 	movhi	r2,4098
1000c9ac:	10a76f04 	addi	r2,r2,-25156
1000c9b0:	003e5f06 	br	1000c330 <__alt_data_end+0xf800c330>
1000c9b4:	80001115 	stw	zero,68(r16)
1000c9b8:	8009883a 	mov	r4,r16
1000c9bc:	000b883a 	mov	r5,zero
1000c9c0:	000f7780 	call	1000f778 <_Balloc>
1000c9c4:	01bfffc4 	movi	r6,-1
1000c9c8:	d8800715 	stw	r2,28(sp)
1000c9cc:	80801015 	stw	r2,64(r16)
1000c9d0:	00800044 	movi	r2,1
1000c9d4:	d9800615 	stw	r6,24(sp)
1000c9d8:	d8800b15 	stw	r2,44(sp)
1000c9dc:	d8002215 	stw	zero,136(sp)
1000c9e0:	d9800d15 	stw	r6,52(sp)
1000c9e4:	d8000315 	stw	zero,12(sp)
1000c9e8:	d8800117 	ldw	r2,4(sp)
1000c9ec:	10008e16 	blt	r2,zero,1000cc28 <_dtoa_r+0x9b4>
1000c9f0:	d9000517 	ldw	r4,20(sp)
1000c9f4:	00c00384 	movi	r3,14
1000c9f8:	19008b16 	blt	r3,r4,1000cc28 <_dtoa_r+0x9b4>
1000c9fc:	200490fa 	slli	r2,r4,3
1000ca00:	00c400b4 	movhi	r3,4098
1000ca04:	d9802217 	ldw	r6,136(sp)
1000ca08:	18e79704 	addi	r3,r3,-24996
1000ca0c:	1885883a 	add	r2,r3,r2
1000ca10:	14400017 	ldw	r17,0(r2)
1000ca14:	15000117 	ldw	r20,4(r2)
1000ca18:	3001c716 	blt	r6,zero,1000d138 <_dtoa_r+0xec4>
1000ca1c:	880d883a 	mov	r6,r17
1000ca20:	a00f883a 	mov	r7,r20
1000ca24:	9009883a 	mov	r4,r18
1000ca28:	980b883a 	mov	r5,r19
1000ca2c:	00144b40 	call	100144b4 <__divdf3>
1000ca30:	180b883a 	mov	r5,r3
1000ca34:	1009883a 	mov	r4,r2
1000ca38:	00150780 	call	10015078 <__fixdfsi>
1000ca3c:	1009883a 	mov	r4,r2
1000ca40:	102d883a 	mov	r22,r2
1000ca44:	00151000 	call	10015100 <__floatsidf>
1000ca48:	1009883a 	mov	r4,r2
1000ca4c:	180b883a 	mov	r5,r3
1000ca50:	880d883a 	mov	r6,r17
1000ca54:	a00f883a 	mov	r7,r20
1000ca58:	00086340 	call	10008634 <__muldf3>
1000ca5c:	9009883a 	mov	r4,r18
1000ca60:	980b883a 	mov	r5,r19
1000ca64:	100d883a 	mov	r6,r2
1000ca68:	180f883a 	mov	r7,r3
1000ca6c:	0008ea00 	call	10008ea0 <__subdf3>
1000ca70:	d9000717 	ldw	r4,28(sp)
1000ca74:	d9800617 	ldw	r6,24(sp)
1000ca78:	180b883a 	mov	r5,r3
1000ca7c:	b0c00c04 	addi	r3,r22,48
1000ca80:	20c00005 	stb	r3,0(r4)
1000ca84:	25c00044 	addi	r23,r4,1
1000ca88:	01000044 	movi	r4,1
1000ca8c:	1011883a 	mov	r8,r2
1000ca90:	2807883a 	mov	r3,r5
1000ca94:	31003d26 	beq	r6,r4,1000cb8c <_dtoa_r+0x918>
1000ca98:	000d883a 	mov	r6,zero
1000ca9c:	01d00934 	movhi	r7,16420
1000caa0:	1009883a 	mov	r4,r2
1000caa4:	00086340 	call	10008634 <__muldf3>
1000caa8:	1009883a 	mov	r4,r2
1000caac:	180b883a 	mov	r5,r3
1000cab0:	000d883a 	mov	r6,zero
1000cab4:	000f883a 	mov	r7,zero
1000cab8:	1027883a 	mov	r19,r2
1000cabc:	182b883a 	mov	r21,r3
1000cac0:	0014e340 	call	10014e34 <__eqdf2>
1000cac4:	103f9926 	beq	r2,zero,1000c92c <__alt_data_end+0xf800c92c>
1000cac8:	d8c00617 	ldw	r3,24(sp)
1000cacc:	d9000717 	ldw	r4,28(sp)
1000cad0:	b825883a 	mov	r18,r23
1000cad4:	18bfffc4 	addi	r2,r3,-1
1000cad8:	20ad883a 	add	r22,r4,r2
1000cadc:	dc000315 	stw	r16,12(sp)
1000cae0:	00000a06 	br	1000cb0c <_dtoa_r+0x898>
1000cae4:	00086340 	call	10008634 <__muldf3>
1000cae8:	1009883a 	mov	r4,r2
1000caec:	180b883a 	mov	r5,r3
1000caf0:	000d883a 	mov	r6,zero
1000caf4:	000f883a 	mov	r7,zero
1000caf8:	1027883a 	mov	r19,r2
1000cafc:	182b883a 	mov	r21,r3
1000cb00:	b825883a 	mov	r18,r23
1000cb04:	0014e340 	call	10014e34 <__eqdf2>
1000cb08:	10022626 	beq	r2,zero,1000d3a4 <_dtoa_r+0x1130>
1000cb0c:	880d883a 	mov	r6,r17
1000cb10:	a00f883a 	mov	r7,r20
1000cb14:	9809883a 	mov	r4,r19
1000cb18:	a80b883a 	mov	r5,r21
1000cb1c:	00144b40 	call	100144b4 <__divdf3>
1000cb20:	180b883a 	mov	r5,r3
1000cb24:	1009883a 	mov	r4,r2
1000cb28:	00150780 	call	10015078 <__fixdfsi>
1000cb2c:	1009883a 	mov	r4,r2
1000cb30:	1021883a 	mov	r16,r2
1000cb34:	00151000 	call	10015100 <__floatsidf>
1000cb38:	1009883a 	mov	r4,r2
1000cb3c:	180b883a 	mov	r5,r3
1000cb40:	880d883a 	mov	r6,r17
1000cb44:	a00f883a 	mov	r7,r20
1000cb48:	00086340 	call	10008634 <__muldf3>
1000cb4c:	9809883a 	mov	r4,r19
1000cb50:	a80b883a 	mov	r5,r21
1000cb54:	100d883a 	mov	r6,r2
1000cb58:	180f883a 	mov	r7,r3
1000cb5c:	0008ea00 	call	10008ea0 <__subdf3>
1000cb60:	82000c04 	addi	r8,r16,48
1000cb64:	92000005 	stb	r8,0(r18)
1000cb68:	1009883a 	mov	r4,r2
1000cb6c:	180b883a 	mov	r5,r3
1000cb70:	000d883a 	mov	r6,zero
1000cb74:	01d00934 	movhi	r7,16420
1000cb78:	1011883a 	mov	r8,r2
1000cb7c:	bdc00044 	addi	r23,r23,1
1000cb80:	95bfd81e 	bne	r18,r22,1000cae4 <__alt_data_end+0xf800cae4>
1000cb84:	802d883a 	mov	r22,r16
1000cb88:	dc000317 	ldw	r16,12(sp)
1000cb8c:	4009883a 	mov	r4,r8
1000cb90:	180b883a 	mov	r5,r3
1000cb94:	400d883a 	mov	r6,r8
1000cb98:	180f883a 	mov	r7,r3
1000cb9c:	0013c180 	call	10013c18 <__adddf3>
1000cba0:	8809883a 	mov	r4,r17
1000cba4:	a00b883a 	mov	r5,r20
1000cba8:	100d883a 	mov	r6,r2
1000cbac:	180f883a 	mov	r7,r3
1000cbb0:	1027883a 	mov	r19,r2
1000cbb4:	1825883a 	mov	r18,r3
1000cbb8:	0014f980 	call	10014f98 <__ledf2>
1000cbbc:	10000816 	blt	r2,zero,1000cbe0 <_dtoa_r+0x96c>
1000cbc0:	8809883a 	mov	r4,r17
1000cbc4:	a00b883a 	mov	r5,r20
1000cbc8:	980d883a 	mov	r6,r19
1000cbcc:	900f883a 	mov	r7,r18
1000cbd0:	0014e340 	call	10014e34 <__eqdf2>
1000cbd4:	103f551e 	bne	r2,zero,1000c92c <__alt_data_end+0xf800c92c>
1000cbd8:	b580004c 	andi	r22,r22,1
1000cbdc:	b03f5326 	beq	r22,zero,1000c92c <__alt_data_end+0xf800c92c>
1000cbe0:	bd7fffc3 	ldbu	r21,-1(r23)
1000cbe4:	b8bfffc4 	addi	r2,r23,-1
1000cbe8:	1007883a 	mov	r3,r2
1000cbec:	01400e44 	movi	r5,57
1000cbf0:	d9800717 	ldw	r6,28(sp)
1000cbf4:	00000506 	br	1000cc0c <_dtoa_r+0x998>
1000cbf8:	18ffffc4 	addi	r3,r3,-1
1000cbfc:	30825e26 	beq	r6,r2,1000d578 <_dtoa_r+0x1304>
1000cc00:	1d400003 	ldbu	r21,0(r3)
1000cc04:	102f883a 	mov	r23,r2
1000cc08:	10bfffc4 	addi	r2,r2,-1
1000cc0c:	a9003fcc 	andi	r4,r21,255
1000cc10:	2100201c 	xori	r4,r4,128
1000cc14:	213fe004 	addi	r4,r4,-128
1000cc18:	217ff726 	beq	r4,r5,1000cbf8 <__alt_data_end+0xf800cbf8>
1000cc1c:	aa000044 	addi	r8,r21,1
1000cc20:	12000005 	stb	r8,0(r2)
1000cc24:	003f4106 	br	1000c92c <__alt_data_end+0xf800c92c>
1000cc28:	d8c00b17 	ldw	r3,44(sp)
1000cc2c:	18006726 	beq	r3,zero,1000cdcc <_dtoa_r+0xb58>
1000cc30:	d9000317 	ldw	r4,12(sp)
1000cc34:	00c00044 	movi	r3,1
1000cc38:	19016a0e 	bge	r3,r4,1000d1e4 <_dtoa_r+0xf70>
1000cc3c:	d8800617 	ldw	r2,24(sp)
1000cc40:	d8c00917 	ldw	r3,36(sp)
1000cc44:	157fffc4 	addi	r21,r2,-1
1000cc48:	1d420716 	blt	r3,r21,1000d468 <_dtoa_r+0x11f4>
1000cc4c:	1d6bc83a 	sub	r21,r3,r21
1000cc50:	d8800617 	ldw	r2,24(sp)
1000cc54:	1002c716 	blt	r2,zero,1000d774 <_dtoa_r+0x1500>
1000cc58:	dd000817 	ldw	r20,32(sp)
1000cc5c:	d8800617 	ldw	r2,24(sp)
1000cc60:	d9800817 	ldw	r6,32(sp)
1000cc64:	8009883a 	mov	r4,r16
1000cc68:	01400044 	movi	r5,1
1000cc6c:	308d883a 	add	r6,r6,r2
1000cc70:	d9800815 	stw	r6,32(sp)
1000cc74:	b0ad883a 	add	r22,r22,r2
1000cc78:	000fba00 	call	1000fba0 <__i2b>
1000cc7c:	1023883a 	mov	r17,r2
1000cc80:	a0000826 	beq	r20,zero,1000cca4 <_dtoa_r+0xa30>
1000cc84:	0580070e 	bge	zero,r22,1000cca4 <_dtoa_r+0xa30>
1000cc88:	b005883a 	mov	r2,r22
1000cc8c:	a5812016 	blt	r20,r22,1000d110 <_dtoa_r+0xe9c>
1000cc90:	d8c00817 	ldw	r3,32(sp)
1000cc94:	a0a9c83a 	sub	r20,r20,r2
1000cc98:	b0adc83a 	sub	r22,r22,r2
1000cc9c:	1887c83a 	sub	r3,r3,r2
1000cca0:	d8c00815 	stw	r3,32(sp)
1000cca4:	d9000917 	ldw	r4,36(sp)
1000cca8:	0100140e 	bge	zero,r4,1000ccfc <_dtoa_r+0xa88>
1000ccac:	d9800b17 	ldw	r6,44(sp)
1000ccb0:	3001e526 	beq	r6,zero,1000d448 <_dtoa_r+0x11d4>
1000ccb4:	05400e0e 	bge	zero,r21,1000ccf0 <_dtoa_r+0xa7c>
1000ccb8:	880b883a 	mov	r5,r17
1000ccbc:	8009883a 	mov	r4,r16
1000ccc0:	a80d883a 	mov	r6,r21
1000ccc4:	000fe6c0 	call	1000fe6c <__pow5mult>
1000ccc8:	e00d883a 	mov	r6,fp
1000cccc:	8009883a 	mov	r4,r16
1000ccd0:	100b883a 	mov	r5,r2
1000ccd4:	1023883a 	mov	r17,r2
1000ccd8:	000fbdc0 	call	1000fbdc <__multiply>
1000ccdc:	102f883a 	mov	r23,r2
1000cce0:	e00b883a 	mov	r5,fp
1000cce4:	8009883a 	mov	r4,r16
1000cce8:	000f8200 	call	1000f820 <_Bfree>
1000ccec:	b839883a 	mov	fp,r23
1000ccf0:	d8800917 	ldw	r2,36(sp)
1000ccf4:	154dc83a 	sub	r6,r2,r21
1000ccf8:	3001281e 	bne	r6,zero,1000d19c <_dtoa_r+0xf28>
1000ccfc:	05c00044 	movi	r23,1
1000cd00:	8009883a 	mov	r4,r16
1000cd04:	b80b883a 	mov	r5,r23
1000cd08:	000fba00 	call	1000fba0 <__i2b>
1000cd0c:	d8c00a17 	ldw	r3,40(sp)
1000cd10:	102b883a 	mov	r21,r2
1000cd14:	00c0310e 	bge	zero,r3,1000cddc <_dtoa_r+0xb68>
1000cd18:	8009883a 	mov	r4,r16
1000cd1c:	100b883a 	mov	r5,r2
1000cd20:	180d883a 	mov	r6,r3
1000cd24:	000fe6c0 	call	1000fe6c <__pow5mult>
1000cd28:	d9000317 	ldw	r4,12(sp)
1000cd2c:	102b883a 	mov	r21,r2
1000cd30:	b9011f0e 	bge	r23,r4,1000d1b0 <_dtoa_r+0xf3c>
1000cd34:	0027883a 	mov	r19,zero
1000cd38:	a8800417 	ldw	r2,16(r21)
1000cd3c:	10800104 	addi	r2,r2,4
1000cd40:	1085883a 	add	r2,r2,r2
1000cd44:	1085883a 	add	r2,r2,r2
1000cd48:	a885883a 	add	r2,r21,r2
1000cd4c:	11000017 	ldw	r4,0(r2)
1000cd50:	000fa880 	call	1000fa88 <__hi0bits>
1000cd54:	00c00804 	movi	r3,32
1000cd58:	1885c83a 	sub	r2,r3,r2
1000cd5c:	00002506 	br	1000cdf4 <_dtoa_r+0xb80>
1000cd60:	01800044 	movi	r6,1
1000cd64:	d9800c15 	stw	r6,48(sp)
1000cd68:	003dec06 	br	1000c51c <__alt_data_end+0xf800c51c>
1000cd6c:	d8c00817 	ldw	r3,32(sp)
1000cd70:	d9000517 	ldw	r4,20(sp)
1000cd74:	d8000a15 	stw	zero,40(sp)
1000cd78:	1907c83a 	sub	r3,r3,r4
1000cd7c:	010dc83a 	sub	r6,zero,r4
1000cd80:	d8c00815 	stw	r3,32(sp)
1000cd84:	d9800915 	stw	r6,36(sp)
1000cd88:	003ded06 	br	1000c540 <__alt_data_end+0xf800c540>
1000cd8c:	05adc83a 	sub	r22,zero,r22
1000cd90:	dd800815 	stw	r22,32(sp)
1000cd94:	002d883a 	mov	r22,zero
1000cd98:	003de406 	br	1000c52c <__alt_data_end+0xf800c52c>
1000cd9c:	d9000517 	ldw	r4,20(sp)
1000cda0:	00151000 	call	10015100 <__floatsidf>
1000cda4:	1009883a 	mov	r4,r2
1000cda8:	180b883a 	mov	r5,r3
1000cdac:	b00d883a 	mov	r6,r22
1000cdb0:	a80f883a 	mov	r7,r21
1000cdb4:	0014e340 	call	10014e34 <__eqdf2>
1000cdb8:	103dc726 	beq	r2,zero,1000c4d8 <__alt_data_end+0xf800c4d8>
1000cdbc:	d8800517 	ldw	r2,20(sp)
1000cdc0:	10bfffc4 	addi	r2,r2,-1
1000cdc4:	d8800515 	stw	r2,20(sp)
1000cdc8:	003dc306 	br	1000c4d8 <__alt_data_end+0xf800c4d8>
1000cdcc:	dd400917 	ldw	r21,36(sp)
1000cdd0:	dd000817 	ldw	r20,32(sp)
1000cdd4:	0023883a 	mov	r17,zero
1000cdd8:	003fa906 	br	1000cc80 <__alt_data_end+0xf800cc80>
1000cddc:	d9800317 	ldw	r6,12(sp)
1000cde0:	b981670e 	bge	r23,r6,1000d380 <_dtoa_r+0x110c>
1000cde4:	0027883a 	mov	r19,zero
1000cde8:	d8c00a17 	ldw	r3,40(sp)
1000cdec:	183fd21e 	bne	r3,zero,1000cd38 <__alt_data_end+0xf800cd38>
1000cdf0:	00800044 	movi	r2,1
1000cdf4:	1585883a 	add	r2,r2,r22
1000cdf8:	108007cc 	andi	r2,r2,31
1000cdfc:	10005f26 	beq	r2,zero,1000cf7c <_dtoa_r+0xd08>
1000ce00:	00c00804 	movi	r3,32
1000ce04:	1887c83a 	sub	r3,r3,r2
1000ce08:	01000104 	movi	r4,4
1000ce0c:	20c2dd0e 	bge	r4,r3,1000d984 <_dtoa_r+0x1710>
1000ce10:	d9000817 	ldw	r4,32(sp)
1000ce14:	00c00704 	movi	r3,28
1000ce18:	1885c83a 	sub	r2,r3,r2
1000ce1c:	2089883a 	add	r4,r4,r2
1000ce20:	d9000815 	stw	r4,32(sp)
1000ce24:	a0a9883a 	add	r20,r20,r2
1000ce28:	b0ad883a 	add	r22,r22,r2
1000ce2c:	d8800817 	ldw	r2,32(sp)
1000ce30:	0080050e 	bge	zero,r2,1000ce48 <_dtoa_r+0xbd4>
1000ce34:	e00b883a 	mov	r5,fp
1000ce38:	8009883a 	mov	r4,r16
1000ce3c:	100d883a 	mov	r6,r2
1000ce40:	000ffac0 	call	1000ffac <__lshift>
1000ce44:	1039883a 	mov	fp,r2
1000ce48:	0580050e 	bge	zero,r22,1000ce60 <_dtoa_r+0xbec>
1000ce4c:	a80b883a 	mov	r5,r21
1000ce50:	8009883a 	mov	r4,r16
1000ce54:	b00d883a 	mov	r6,r22
1000ce58:	000ffac0 	call	1000ffac <__lshift>
1000ce5c:	102b883a 	mov	r21,r2
1000ce60:	d8c00c17 	ldw	r3,48(sp)
1000ce64:	1801161e 	bne	r3,zero,1000d2c0 <_dtoa_r+0x104c>
1000ce68:	d8c00617 	ldw	r3,24(sp)
1000ce6c:	00c12d0e 	bge	zero,r3,1000d324 <_dtoa_r+0x10b0>
1000ce70:	d8c00b17 	ldw	r3,44(sp)
1000ce74:	1800571e 	bne	r3,zero,1000cfd4 <_dtoa_r+0xd60>
1000ce78:	dc800717 	ldw	r18,28(sp)
1000ce7c:	dcc00617 	ldw	r19,24(sp)
1000ce80:	9029883a 	mov	r20,r18
1000ce84:	00000206 	br	1000ce90 <_dtoa_r+0xc1c>
1000ce88:	000f8480 	call	1000f848 <__multadd>
1000ce8c:	1039883a 	mov	fp,r2
1000ce90:	e009883a 	mov	r4,fp
1000ce94:	a80b883a 	mov	r5,r21
1000ce98:	000c04c0 	call	1000c04c <quorem>
1000ce9c:	10800c04 	addi	r2,r2,48
1000cea0:	90800005 	stb	r2,0(r18)
1000cea4:	94800044 	addi	r18,r18,1
1000cea8:	9507c83a 	sub	r3,r18,r20
1000ceac:	8009883a 	mov	r4,r16
1000ceb0:	e00b883a 	mov	r5,fp
1000ceb4:	01800284 	movi	r6,10
1000ceb8:	000f883a 	mov	r7,zero
1000cebc:	1cfff216 	blt	r3,r19,1000ce88 <__alt_data_end+0xf800ce88>
1000cec0:	1011883a 	mov	r8,r2
1000cec4:	d8800617 	ldw	r2,24(sp)
1000cec8:	00822e0e 	bge	zero,r2,1000d784 <_dtoa_r+0x1510>
1000cecc:	d9000717 	ldw	r4,28(sp)
1000ced0:	0025883a 	mov	r18,zero
1000ced4:	20af883a 	add	r23,r4,r2
1000ced8:	e00b883a 	mov	r5,fp
1000cedc:	01800044 	movi	r6,1
1000cee0:	8009883a 	mov	r4,r16
1000cee4:	da001715 	stw	r8,92(sp)
1000cee8:	000ffac0 	call	1000ffac <__lshift>
1000ceec:	1009883a 	mov	r4,r2
1000cef0:	a80b883a 	mov	r5,r21
1000cef4:	1039883a 	mov	fp,r2
1000cef8:	00100f40 	call	100100f4 <__mcmp>
1000cefc:	da001717 	ldw	r8,92(sp)
1000cf00:	00816e0e 	bge	zero,r2,1000d4bc <_dtoa_r+0x1248>
1000cf04:	b93fffc3 	ldbu	r4,-1(r23)
1000cf08:	b8bfffc4 	addi	r2,r23,-1
1000cf0c:	1007883a 	mov	r3,r2
1000cf10:	01800e44 	movi	r6,57
1000cf14:	d9c00717 	ldw	r7,28(sp)
1000cf18:	00000506 	br	1000cf30 <_dtoa_r+0xcbc>
1000cf1c:	18ffffc4 	addi	r3,r3,-1
1000cf20:	38811926 	beq	r7,r2,1000d388 <_dtoa_r+0x1114>
1000cf24:	19000003 	ldbu	r4,0(r3)
1000cf28:	102f883a 	mov	r23,r2
1000cf2c:	10bfffc4 	addi	r2,r2,-1
1000cf30:	21403fcc 	andi	r5,r4,255
1000cf34:	2940201c 	xori	r5,r5,128
1000cf38:	297fe004 	addi	r5,r5,-128
1000cf3c:	29bff726 	beq	r5,r6,1000cf1c <__alt_data_end+0xf800cf1c>
1000cf40:	21000044 	addi	r4,r4,1
1000cf44:	11000005 	stb	r4,0(r2)
1000cf48:	8009883a 	mov	r4,r16
1000cf4c:	a80b883a 	mov	r5,r21
1000cf50:	000f8200 	call	1000f820 <_Bfree>
1000cf54:	883e7526 	beq	r17,zero,1000c92c <__alt_data_end+0xf800c92c>
1000cf58:	90000426 	beq	r18,zero,1000cf6c <_dtoa_r+0xcf8>
1000cf5c:	94400326 	beq	r18,r17,1000cf6c <_dtoa_r+0xcf8>
1000cf60:	8009883a 	mov	r4,r16
1000cf64:	900b883a 	mov	r5,r18
1000cf68:	000f8200 	call	1000f820 <_Bfree>
1000cf6c:	8009883a 	mov	r4,r16
1000cf70:	880b883a 	mov	r5,r17
1000cf74:	000f8200 	call	1000f820 <_Bfree>
1000cf78:	003e6c06 	br	1000c92c <__alt_data_end+0xf800c92c>
1000cf7c:	00800704 	movi	r2,28
1000cf80:	d9800817 	ldw	r6,32(sp)
1000cf84:	a0a9883a 	add	r20,r20,r2
1000cf88:	b0ad883a 	add	r22,r22,r2
1000cf8c:	308d883a 	add	r6,r6,r2
1000cf90:	d9800815 	stw	r6,32(sp)
1000cf94:	003fa506 	br	1000ce2c <__alt_data_end+0xf800ce2c>
1000cf98:	013efb84 	movi	r4,-1042
1000cf9c:	246bc83a 	sub	r21,r4,r17
1000cfa0:	9548983a 	sll	r4,r18,r21
1000cfa4:	003d1806 	br	1000c408 <__alt_data_end+0xf800c408>
1000cfa8:	d8000c15 	stw	zero,48(sp)
1000cfac:	003d5b06 	br	1000c51c <__alt_data_end+0xf800c51c>
1000cfb0:	880b883a 	mov	r5,r17
1000cfb4:	8009883a 	mov	r4,r16
1000cfb8:	01800284 	movi	r6,10
1000cfbc:	000f883a 	mov	r7,zero
1000cfc0:	000f8480 	call	1000f848 <__multadd>
1000cfc4:	1023883a 	mov	r17,r2
1000cfc8:	d8800d17 	ldw	r2,52(sp)
1000cfcc:	0082550e 	bge	zero,r2,1000d924 <_dtoa_r+0x16b0>
1000cfd0:	d8800615 	stw	r2,24(sp)
1000cfd4:	0500050e 	bge	zero,r20,1000cfec <_dtoa_r+0xd78>
1000cfd8:	880b883a 	mov	r5,r17
1000cfdc:	8009883a 	mov	r4,r16
1000cfe0:	a00d883a 	mov	r6,r20
1000cfe4:	000ffac0 	call	1000ffac <__lshift>
1000cfe8:	1023883a 	mov	r17,r2
1000cfec:	98016a1e 	bne	r19,zero,1000d598 <_dtoa_r+0x1324>
1000cff0:	8829883a 	mov	r20,r17
1000cff4:	d9000617 	ldw	r4,24(sp)
1000cff8:	dcc00717 	ldw	r19,28(sp)
1000cffc:	9480004c 	andi	r18,r18,1
1000d000:	20bfffc4 	addi	r2,r4,-1
1000d004:	9885883a 	add	r2,r19,r2
1000d008:	d8800415 	stw	r2,16(sp)
1000d00c:	dc800615 	stw	r18,24(sp)
1000d010:	e009883a 	mov	r4,fp
1000d014:	a80b883a 	mov	r5,r21
1000d018:	000c04c0 	call	1000c04c <quorem>
1000d01c:	e009883a 	mov	r4,fp
1000d020:	880b883a 	mov	r5,r17
1000d024:	102f883a 	mov	r23,r2
1000d028:	00100f40 	call	100100f4 <__mcmp>
1000d02c:	8009883a 	mov	r4,r16
1000d030:	a80b883a 	mov	r5,r21
1000d034:	a00d883a 	mov	r6,r20
1000d038:	102d883a 	mov	r22,r2
1000d03c:	00101540 	call	10010154 <__mdiff>
1000d040:	1007883a 	mov	r3,r2
1000d044:	10800317 	ldw	r2,12(r2)
1000d048:	bc800c04 	addi	r18,r23,48
1000d04c:	1000971e 	bne	r2,zero,1000d2ac <_dtoa_r+0x1038>
1000d050:	180b883a 	mov	r5,r3
1000d054:	e009883a 	mov	r4,fp
1000d058:	d8c01515 	stw	r3,84(sp)
1000d05c:	00100f40 	call	100100f4 <__mcmp>
1000d060:	d8c01517 	ldw	r3,84(sp)
1000d064:	8009883a 	mov	r4,r16
1000d068:	d8801515 	stw	r2,84(sp)
1000d06c:	180b883a 	mov	r5,r3
1000d070:	000f8200 	call	1000f820 <_Bfree>
1000d074:	d8801517 	ldw	r2,84(sp)
1000d078:	1000041e 	bne	r2,zero,1000d08c <_dtoa_r+0xe18>
1000d07c:	d9800317 	ldw	r6,12(sp)
1000d080:	3000021e 	bne	r6,zero,1000d08c <_dtoa_r+0xe18>
1000d084:	d8c00617 	ldw	r3,24(sp)
1000d088:	18007626 	beq	r3,zero,1000d264 <_dtoa_r+0xff0>
1000d08c:	b0005b16 	blt	r22,zero,1000d1fc <_dtoa_r+0xf88>
1000d090:	b000041e 	bne	r22,zero,1000d0a4 <_dtoa_r+0xe30>
1000d094:	d9000317 	ldw	r4,12(sp)
1000d098:	2000021e 	bne	r4,zero,1000d0a4 <_dtoa_r+0xe30>
1000d09c:	d8c00617 	ldw	r3,24(sp)
1000d0a0:	18005626 	beq	r3,zero,1000d1fc <_dtoa_r+0xf88>
1000d0a4:	00814d16 	blt	zero,r2,1000d5dc <_dtoa_r+0x1368>
1000d0a8:	d8c00417 	ldw	r3,16(sp)
1000d0ac:	9d800044 	addi	r22,r19,1
1000d0b0:	9c800005 	stb	r18,0(r19)
1000d0b4:	b02f883a 	mov	r23,r22
1000d0b8:	98c14c26 	beq	r19,r3,1000d5ec <_dtoa_r+0x1378>
1000d0bc:	e00b883a 	mov	r5,fp
1000d0c0:	8009883a 	mov	r4,r16
1000d0c4:	01800284 	movi	r6,10
1000d0c8:	000f883a 	mov	r7,zero
1000d0cc:	000f8480 	call	1000f848 <__multadd>
1000d0d0:	1039883a 	mov	fp,r2
1000d0d4:	8d006d26 	beq	r17,r20,1000d28c <_dtoa_r+0x1018>
1000d0d8:	880b883a 	mov	r5,r17
1000d0dc:	01800284 	movi	r6,10
1000d0e0:	000f883a 	mov	r7,zero
1000d0e4:	8009883a 	mov	r4,r16
1000d0e8:	000f8480 	call	1000f848 <__multadd>
1000d0ec:	a00b883a 	mov	r5,r20
1000d0f0:	8009883a 	mov	r4,r16
1000d0f4:	01800284 	movi	r6,10
1000d0f8:	000f883a 	mov	r7,zero
1000d0fc:	1023883a 	mov	r17,r2
1000d100:	000f8480 	call	1000f848 <__multadd>
1000d104:	1029883a 	mov	r20,r2
1000d108:	b027883a 	mov	r19,r22
1000d10c:	003fc006 	br	1000d010 <__alt_data_end+0xf800d010>
1000d110:	a005883a 	mov	r2,r20
1000d114:	003ede06 	br	1000cc90 <__alt_data_end+0xf800cc90>
1000d118:	01000044 	movi	r4,1
1000d11c:	d9000b15 	stw	r4,44(sp)
1000d120:	d9802217 	ldw	r6,136(sp)
1000d124:	0180dc0e 	bge	zero,r6,1000d498 <_dtoa_r+0x1224>
1000d128:	3023883a 	mov	r17,r6
1000d12c:	d9800d15 	stw	r6,52(sp)
1000d130:	d9800615 	stw	r6,24(sp)
1000d134:	003d1e06 	br	1000c5b0 <__alt_data_end+0xf800c5b0>
1000d138:	d8800617 	ldw	r2,24(sp)
1000d13c:	00be3716 	blt	zero,r2,1000ca1c <__alt_data_end+0xf800ca1c>
1000d140:	1000be1e 	bne	r2,zero,1000d43c <_dtoa_r+0x11c8>
1000d144:	8809883a 	mov	r4,r17
1000d148:	a00b883a 	mov	r5,r20
1000d14c:	000d883a 	mov	r6,zero
1000d150:	01d00534 	movhi	r7,16404
1000d154:	00086340 	call	10008634 <__muldf3>
1000d158:	1009883a 	mov	r4,r2
1000d15c:	180b883a 	mov	r5,r3
1000d160:	900d883a 	mov	r6,r18
1000d164:	980f883a 	mov	r7,r19
1000d168:	0014eb80 	call	10014eb8 <__gedf2>
1000d16c:	002b883a 	mov	r21,zero
1000d170:	0023883a 	mov	r17,zero
1000d174:	10007a16 	blt	r2,zero,1000d360 <_dtoa_r+0x10ec>
1000d178:	d9002217 	ldw	r4,136(sp)
1000d17c:	ddc00717 	ldw	r23,28(sp)
1000d180:	0108303a 	nor	r4,zero,r4
1000d184:	d9000515 	stw	r4,20(sp)
1000d188:	8009883a 	mov	r4,r16
1000d18c:	a80b883a 	mov	r5,r21
1000d190:	000f8200 	call	1000f820 <_Bfree>
1000d194:	883f751e 	bne	r17,zero,1000cf6c <__alt_data_end+0xf800cf6c>
1000d198:	003de406 	br	1000c92c <__alt_data_end+0xf800c92c>
1000d19c:	e00b883a 	mov	r5,fp
1000d1a0:	8009883a 	mov	r4,r16
1000d1a4:	000fe6c0 	call	1000fe6c <__pow5mult>
1000d1a8:	1039883a 	mov	fp,r2
1000d1ac:	003ed306 	br	1000ccfc <__alt_data_end+0xf800ccfc>
1000d1b0:	903ee01e 	bne	r18,zero,1000cd34 <__alt_data_end+0xf800cd34>
1000d1b4:	00800434 	movhi	r2,16
1000d1b8:	10bfffc4 	addi	r2,r2,-1
1000d1bc:	9884703a 	and	r2,r19,r2
1000d1c0:	103f081e 	bne	r2,zero,1000cde4 <__alt_data_end+0xf800cde4>
1000d1c4:	9cdffc2c 	andhi	r19,r19,32752
1000d1c8:	983f0626 	beq	r19,zero,1000cde4 <__alt_data_end+0xf800cde4>
1000d1cc:	d8800817 	ldw	r2,32(sp)
1000d1d0:	b5800044 	addi	r22,r22,1
1000d1d4:	04c00044 	movi	r19,1
1000d1d8:	10800044 	addi	r2,r2,1
1000d1dc:	d8800815 	stw	r2,32(sp)
1000d1e0:	003f0106 	br	1000cde8 <__alt_data_end+0xf800cde8>
1000d1e4:	d9800f17 	ldw	r6,60(sp)
1000d1e8:	30016826 	beq	r6,zero,1000d78c <_dtoa_r+0x1518>
1000d1ec:	10810cc4 	addi	r2,r2,1075
1000d1f0:	dd400917 	ldw	r21,36(sp)
1000d1f4:	dd000817 	ldw	r20,32(sp)
1000d1f8:	003e9906 	br	1000cc60 <__alt_data_end+0xf800cc60>
1000d1fc:	9011883a 	mov	r8,r18
1000d200:	4007883a 	mov	r3,r8
1000d204:	e02d883a 	mov	r22,fp
1000d208:	0080100e 	bge	zero,r2,1000d24c <_dtoa_r+0xfd8>
1000d20c:	01800044 	movi	r6,1
1000d210:	8009883a 	mov	r4,r16
1000d214:	e00b883a 	mov	r5,fp
1000d218:	da001515 	stw	r8,84(sp)
1000d21c:	da001715 	stw	r8,92(sp)
1000d220:	000ffac0 	call	1000ffac <__lshift>
1000d224:	1009883a 	mov	r4,r2
1000d228:	a80b883a 	mov	r5,r21
1000d22c:	102d883a 	mov	r22,r2
1000d230:	00100f40 	call	100100f4 <__mcmp>
1000d234:	d8c01517 	ldw	r3,84(sp)
1000d238:	da001717 	ldw	r8,92(sp)
1000d23c:	0081a50e 	bge	zero,r2,1000d8d4 <_dtoa_r+0x1660>
1000d240:	00800e44 	movi	r2,57
1000d244:	40817b26 	beq	r8,r2,1000d834 <_dtoa_r+0x15c0>
1000d248:	40c00044 	addi	r3,r8,1
1000d24c:	8825883a 	mov	r18,r17
1000d250:	9dc00044 	addi	r23,r19,1
1000d254:	98c00005 	stb	r3,0(r19)
1000d258:	a023883a 	mov	r17,r20
1000d25c:	b039883a 	mov	fp,r22
1000d260:	003f3906 	br	1000cf48 <__alt_data_end+0xf800cf48>
1000d264:	00800e44 	movi	r2,57
1000d268:	9011883a 	mov	r8,r18
1000d26c:	90817226 	beq	r18,r2,1000d838 <_dtoa_r+0x15c4>
1000d270:	0580010e 	bge	zero,r22,1000d278 <_dtoa_r+0x1004>
1000d274:	ba000c44 	addi	r8,r23,49
1000d278:	8825883a 	mov	r18,r17
1000d27c:	9dc00044 	addi	r23,r19,1
1000d280:	9a000005 	stb	r8,0(r19)
1000d284:	a023883a 	mov	r17,r20
1000d288:	003f2f06 	br	1000cf48 <__alt_data_end+0xf800cf48>
1000d28c:	880b883a 	mov	r5,r17
1000d290:	8009883a 	mov	r4,r16
1000d294:	01800284 	movi	r6,10
1000d298:	000f883a 	mov	r7,zero
1000d29c:	000f8480 	call	1000f848 <__multadd>
1000d2a0:	1023883a 	mov	r17,r2
1000d2a4:	1029883a 	mov	r20,r2
1000d2a8:	003f9706 	br	1000d108 <__alt_data_end+0xf800d108>
1000d2ac:	8009883a 	mov	r4,r16
1000d2b0:	180b883a 	mov	r5,r3
1000d2b4:	000f8200 	call	1000f820 <_Bfree>
1000d2b8:	00800044 	movi	r2,1
1000d2bc:	003f7306 	br	1000d08c <__alt_data_end+0xf800d08c>
1000d2c0:	e009883a 	mov	r4,fp
1000d2c4:	a80b883a 	mov	r5,r21
1000d2c8:	00100f40 	call	100100f4 <__mcmp>
1000d2cc:	103ee60e 	bge	r2,zero,1000ce68 <__alt_data_end+0xf800ce68>
1000d2d0:	8009883a 	mov	r4,r16
1000d2d4:	e00b883a 	mov	r5,fp
1000d2d8:	01800284 	movi	r6,10
1000d2dc:	000f883a 	mov	r7,zero
1000d2e0:	000f8480 	call	1000f848 <__multadd>
1000d2e4:	d9000517 	ldw	r4,20(sp)
1000d2e8:	d9800b17 	ldw	r6,44(sp)
1000d2ec:	1039883a 	mov	fp,r2
1000d2f0:	213fffc4 	addi	r4,r4,-1
1000d2f4:	d9000515 	stw	r4,20(sp)
1000d2f8:	303f2d1e 	bne	r6,zero,1000cfb0 <__alt_data_end+0xf800cfb0>
1000d2fc:	d9000d17 	ldw	r4,52(sp)
1000d300:	0101780e 	bge	zero,r4,1000d8e4 <_dtoa_r+0x1670>
1000d304:	d9000615 	stw	r4,24(sp)
1000d308:	003edb06 	br	1000ce78 <__alt_data_end+0xf800ce78>
1000d30c:	00800084 	movi	r2,2
1000d310:	30818e1e 	bne	r6,r2,1000d94c <_dtoa_r+0x16d8>
1000d314:	d8000b15 	stw	zero,44(sp)
1000d318:	003f8106 	br	1000d120 <__alt_data_end+0xf800d120>
1000d31c:	d8800717 	ldw	r2,28(sp)
1000d320:	003c0306 	br	1000c330 <__alt_data_end+0xf800c330>
1000d324:	d9000317 	ldw	r4,12(sp)
1000d328:	00800084 	movi	r2,2
1000d32c:	113ed00e 	bge	r2,r4,1000ce70 <__alt_data_end+0xf800ce70>
1000d330:	d8c00617 	ldw	r3,24(sp)
1000d334:	183f901e 	bne	r3,zero,1000d178 <__alt_data_end+0xf800d178>
1000d338:	a80b883a 	mov	r5,r21
1000d33c:	8009883a 	mov	r4,r16
1000d340:	01800144 	movi	r6,5
1000d344:	000f883a 	mov	r7,zero
1000d348:	000f8480 	call	1000f848 <__multadd>
1000d34c:	e009883a 	mov	r4,fp
1000d350:	100b883a 	mov	r5,r2
1000d354:	102b883a 	mov	r21,r2
1000d358:	00100f40 	call	100100f4 <__mcmp>
1000d35c:	00bf860e 	bge	zero,r2,1000d178 <__alt_data_end+0xf800d178>
1000d360:	d9800717 	ldw	r6,28(sp)
1000d364:	00800c44 	movi	r2,49
1000d368:	30800005 	stb	r2,0(r6)
1000d36c:	d8800517 	ldw	r2,20(sp)
1000d370:	35c00044 	addi	r23,r6,1
1000d374:	10800044 	addi	r2,r2,1
1000d378:	d8800515 	stw	r2,20(sp)
1000d37c:	003f8206 	br	1000d188 <__alt_data_end+0xf800d188>
1000d380:	903e981e 	bne	r18,zero,1000cde4 <__alt_data_end+0xf800cde4>
1000d384:	003f8b06 	br	1000d1b4 <__alt_data_end+0xf800d1b4>
1000d388:	d9800517 	ldw	r6,20(sp)
1000d38c:	d8c00717 	ldw	r3,28(sp)
1000d390:	00800c44 	movi	r2,49
1000d394:	31800044 	addi	r6,r6,1
1000d398:	d9800515 	stw	r6,20(sp)
1000d39c:	18800005 	stb	r2,0(r3)
1000d3a0:	003ee906 	br	1000cf48 <__alt_data_end+0xf800cf48>
1000d3a4:	dc000317 	ldw	r16,12(sp)
1000d3a8:	003d6006 	br	1000c92c <__alt_data_end+0xf800c92c>
1000d3ac:	8809883a 	mov	r4,r17
1000d3b0:	00151000 	call	10015100 <__floatsidf>
1000d3b4:	a009883a 	mov	r4,r20
1000d3b8:	a80b883a 	mov	r5,r21
1000d3bc:	100d883a 	mov	r6,r2
1000d3c0:	180f883a 	mov	r7,r3
1000d3c4:	00086340 	call	10008634 <__muldf3>
1000d3c8:	1009883a 	mov	r4,r2
1000d3cc:	180b883a 	mov	r5,r3
1000d3d0:	000d883a 	mov	r6,zero
1000d3d4:	01d00734 	movhi	r7,16412
1000d3d8:	0013c180 	call	10013c18 <__adddf3>
1000d3dc:	1023883a 	mov	r17,r2
1000d3e0:	00bf3034 	movhi	r2,64704
1000d3e4:	1885883a 	add	r2,r3,r2
1000d3e8:	d8800e15 	stw	r2,56(sp)
1000d3ec:	a009883a 	mov	r4,r20
1000d3f0:	a80b883a 	mov	r5,r21
1000d3f4:	000d883a 	mov	r6,zero
1000d3f8:	01d00534 	movhi	r7,16404
1000d3fc:	0008ea00 	call	10008ea0 <__subdf3>
1000d400:	d9c00e17 	ldw	r7,56(sp)
1000d404:	1009883a 	mov	r4,r2
1000d408:	180b883a 	mov	r5,r3
1000d40c:	880d883a 	mov	r6,r17
1000d410:	102b883a 	mov	r21,r2
1000d414:	1829883a 	mov	r20,r3
1000d418:	0014eb80 	call	10014eb8 <__gedf2>
1000d41c:	00807716 	blt	zero,r2,1000d5fc <_dtoa_r+0x1388>
1000d420:	d8800e17 	ldw	r2,56(sp)
1000d424:	a809883a 	mov	r4,r21
1000d428:	a00b883a 	mov	r5,r20
1000d42c:	11e0003c 	xorhi	r7,r2,32768
1000d430:	880d883a 	mov	r6,r17
1000d434:	0014f980 	call	10014f98 <__ledf2>
1000d438:	103d6b0e 	bge	r2,zero,1000c9e8 <__alt_data_end+0xf800c9e8>
1000d43c:	002b883a 	mov	r21,zero
1000d440:	0023883a 	mov	r17,zero
1000d444:	003f4c06 	br	1000d178 <__alt_data_end+0xf800d178>
1000d448:	d9800917 	ldw	r6,36(sp)
1000d44c:	e00b883a 	mov	r5,fp
1000d450:	8009883a 	mov	r4,r16
1000d454:	000fe6c0 	call	1000fe6c <__pow5mult>
1000d458:	1039883a 	mov	fp,r2
1000d45c:	003e2706 	br	1000ccfc <__alt_data_end+0xf800ccfc>
1000d460:	d8000b15 	stw	zero,44(sp)
1000d464:	003c4906 	br	1000c58c <__alt_data_end+0xf800c58c>
1000d468:	d9000917 	ldw	r4,36(sp)
1000d46c:	d9800a17 	ldw	r6,40(sp)
1000d470:	dd400915 	stw	r21,36(sp)
1000d474:	a905c83a 	sub	r2,r21,r4
1000d478:	308d883a 	add	r6,r6,r2
1000d47c:	d9800a15 	stw	r6,40(sp)
1000d480:	002b883a 	mov	r21,zero
1000d484:	003df206 	br	1000cc50 <__alt_data_end+0xf800cc50>
1000d488:	dc800e15 	stw	r18,56(sp)
1000d48c:	982b883a 	mov	r21,r19
1000d490:	04400084 	movi	r17,2
1000d494:	003c7406 	br	1000c668 <__alt_data_end+0xf800c668>
1000d498:	04400044 	movi	r17,1
1000d49c:	dc400d15 	stw	r17,52(sp)
1000d4a0:	dc400615 	stw	r17,24(sp)
1000d4a4:	dc402215 	stw	r17,136(sp)
1000d4a8:	80001115 	stw	zero,68(r16)
1000d4ac:	000b883a 	mov	r5,zero
1000d4b0:	003c4a06 	br	1000c5dc <__alt_data_end+0xf800c5dc>
1000d4b4:	3023883a 	mov	r17,r6
1000d4b8:	003ffb06 	br	1000d4a8 <__alt_data_end+0xf800d4a8>
1000d4bc:	1000021e 	bne	r2,zero,1000d4c8 <_dtoa_r+0x1254>
1000d4c0:	4200004c 	andi	r8,r8,1
1000d4c4:	403e8f1e 	bne	r8,zero,1000cf04 <__alt_data_end+0xf800cf04>
1000d4c8:	01000c04 	movi	r4,48
1000d4cc:	00000106 	br	1000d4d4 <_dtoa_r+0x1260>
1000d4d0:	102f883a 	mov	r23,r2
1000d4d4:	b8bfffc4 	addi	r2,r23,-1
1000d4d8:	10c00007 	ldb	r3,0(r2)
1000d4dc:	193ffc26 	beq	r3,r4,1000d4d0 <__alt_data_end+0xf800d4d0>
1000d4e0:	003e9906 	br	1000cf48 <__alt_data_end+0xf800cf48>
1000d4e4:	d9000517 	ldw	r4,20(sp)
1000d4e8:	012fc83a 	sub	r23,zero,r4
1000d4ec:	b800ad26 	beq	r23,zero,1000d7a4 <_dtoa_r+0x1530>
1000d4f0:	b88003cc 	andi	r2,r23,15
1000d4f4:	100490fa 	slli	r2,r2,3
1000d4f8:	00c400b4 	movhi	r3,4098
1000d4fc:	18e79704 	addi	r3,r3,-24996
1000d500:	1885883a 	add	r2,r3,r2
1000d504:	11800017 	ldw	r6,0(r2)
1000d508:	11c00117 	ldw	r7,4(r2)
1000d50c:	b82fd13a 	srai	r23,r23,4
1000d510:	9009883a 	mov	r4,r18
1000d514:	980b883a 	mov	r5,r19
1000d518:	00086340 	call	10008634 <__muldf3>
1000d51c:	1029883a 	mov	r20,r2
1000d520:	182b883a 	mov	r21,r3
1000d524:	b800f426 	beq	r23,zero,1000d8f8 <_dtoa_r+0x1684>
1000d528:	020400b4 	movhi	r8,4098
1000d52c:	42278d04 	addi	r8,r8,-25036
1000d530:	8029883a 	mov	r20,r16
1000d534:	04400084 	movi	r17,2
1000d538:	4021883a 	mov	r16,r8
1000d53c:	b980004c 	andi	r6,r23,1
1000d540:	1009883a 	mov	r4,r2
1000d544:	b82fd07a 	srai	r23,r23,1
1000d548:	180b883a 	mov	r5,r3
1000d54c:	30000426 	beq	r6,zero,1000d560 <_dtoa_r+0x12ec>
1000d550:	81800017 	ldw	r6,0(r16)
1000d554:	81c00117 	ldw	r7,4(r16)
1000d558:	8c400044 	addi	r17,r17,1
1000d55c:	00086340 	call	10008634 <__muldf3>
1000d560:	84000204 	addi	r16,r16,8
1000d564:	b83ff51e 	bne	r23,zero,1000d53c <__alt_data_end+0xf800d53c>
1000d568:	a021883a 	mov	r16,r20
1000d56c:	182b883a 	mov	r21,r3
1000d570:	1029883a 	mov	r20,r2
1000d574:	003c5506 	br	1000c6cc <__alt_data_end+0xf800c6cc>
1000d578:	d9800517 	ldw	r6,20(sp)
1000d57c:	d9000717 	ldw	r4,28(sp)
1000d580:	00c00c04 	movi	r3,48
1000d584:	31800044 	addi	r6,r6,1
1000d588:	d9800515 	stw	r6,20(sp)
1000d58c:	20c00005 	stb	r3,0(r4)
1000d590:	02000c44 	movi	r8,49
1000d594:	003da206 	br	1000cc20 <__alt_data_end+0xf800cc20>
1000d598:	89400117 	ldw	r5,4(r17)
1000d59c:	8009883a 	mov	r4,r16
1000d5a0:	000f7780 	call	1000f778 <_Balloc>
1000d5a4:	89800417 	ldw	r6,16(r17)
1000d5a8:	11000304 	addi	r4,r2,12
1000d5ac:	89400304 	addi	r5,r17,12
1000d5b0:	31800084 	addi	r6,r6,2
1000d5b4:	318d883a 	add	r6,r6,r6
1000d5b8:	318d883a 	add	r6,r6,r6
1000d5bc:	1027883a 	mov	r19,r2
1000d5c0:	0009a7c0 	call	10009a7c <memcpy>
1000d5c4:	8009883a 	mov	r4,r16
1000d5c8:	980b883a 	mov	r5,r19
1000d5cc:	01800044 	movi	r6,1
1000d5d0:	000ffac0 	call	1000ffac <__lshift>
1000d5d4:	1029883a 	mov	r20,r2
1000d5d8:	003e8606 	br	1000cff4 <__alt_data_end+0xf800cff4>
1000d5dc:	00800e44 	movi	r2,57
1000d5e0:	90809526 	beq	r18,r2,1000d838 <_dtoa_r+0x15c4>
1000d5e4:	92000044 	addi	r8,r18,1
1000d5e8:	003f2306 	br	1000d278 <__alt_data_end+0xf800d278>
1000d5ec:	9011883a 	mov	r8,r18
1000d5f0:	8825883a 	mov	r18,r17
1000d5f4:	a023883a 	mov	r17,r20
1000d5f8:	003e3706 	br	1000ced8 <__alt_data_end+0xf800ced8>
1000d5fc:	002b883a 	mov	r21,zero
1000d600:	0023883a 	mov	r17,zero
1000d604:	003f5606 	br	1000d360 <__alt_data_end+0xf800d360>
1000d608:	51bfffc4 	addi	r6,r10,-1
1000d60c:	300490fa 	slli	r2,r6,3
1000d610:	00c400b4 	movhi	r3,4098
1000d614:	18e79704 	addi	r3,r3,-24996
1000d618:	1885883a 	add	r2,r3,r2
1000d61c:	d9c00e17 	ldw	r7,56(sp)
1000d620:	11000017 	ldw	r4,0(r2)
1000d624:	11400117 	ldw	r5,4(r2)
1000d628:	d8800717 	ldw	r2,28(sp)
1000d62c:	d9801015 	stw	r6,64(sp)
1000d630:	880d883a 	mov	r6,r17
1000d634:	da801615 	stw	r10,88(sp)
1000d638:	15c00044 	addi	r23,r2,1
1000d63c:	00086340 	call	10008634 <__muldf3>
1000d640:	a80b883a 	mov	r5,r21
1000d644:	a009883a 	mov	r4,r20
1000d648:	d8c01115 	stw	r3,68(sp)
1000d64c:	d8800e15 	stw	r2,56(sp)
1000d650:	00150780 	call	10015078 <__fixdfsi>
1000d654:	1009883a 	mov	r4,r2
1000d658:	1023883a 	mov	r17,r2
1000d65c:	00151000 	call	10015100 <__floatsidf>
1000d660:	a009883a 	mov	r4,r20
1000d664:	a80b883a 	mov	r5,r21
1000d668:	100d883a 	mov	r6,r2
1000d66c:	180f883a 	mov	r7,r3
1000d670:	0008ea00 	call	10008ea0 <__subdf3>
1000d674:	1813883a 	mov	r9,r3
1000d678:	d8c00717 	ldw	r3,28(sp)
1000d67c:	8c400c04 	addi	r17,r17,48
1000d680:	1011883a 	mov	r8,r2
1000d684:	1c400005 	stb	r17,0(r3)
1000d688:	da801617 	ldw	r10,88(sp)
1000d68c:	00800044 	movi	r2,1
1000d690:	50802326 	beq	r10,r2,1000d720 <_dtoa_r+0x14ac>
1000d694:	d8800717 	ldw	r2,28(sp)
1000d698:	b82b883a 	mov	r21,r23
1000d69c:	dc001315 	stw	r16,76(sp)
1000d6a0:	12a9883a 	add	r20,r2,r10
1000d6a4:	4807883a 	mov	r3,r9
1000d6a8:	4005883a 	mov	r2,r8
1000d6ac:	dc801415 	stw	r18,80(sp)
1000d6b0:	000d883a 	mov	r6,zero
1000d6b4:	01d00934 	movhi	r7,16420
1000d6b8:	1009883a 	mov	r4,r2
1000d6bc:	180b883a 	mov	r5,r3
1000d6c0:	00086340 	call	10008634 <__muldf3>
1000d6c4:	180b883a 	mov	r5,r3
1000d6c8:	1009883a 	mov	r4,r2
1000d6cc:	1821883a 	mov	r16,r3
1000d6d0:	1025883a 	mov	r18,r2
1000d6d4:	00150780 	call	10015078 <__fixdfsi>
1000d6d8:	1009883a 	mov	r4,r2
1000d6dc:	1023883a 	mov	r17,r2
1000d6e0:	00151000 	call	10015100 <__floatsidf>
1000d6e4:	9009883a 	mov	r4,r18
1000d6e8:	800b883a 	mov	r5,r16
1000d6ec:	100d883a 	mov	r6,r2
1000d6f0:	180f883a 	mov	r7,r3
1000d6f4:	8c400c04 	addi	r17,r17,48
1000d6f8:	0008ea00 	call	10008ea0 <__subdf3>
1000d6fc:	ad400044 	addi	r21,r21,1
1000d700:	ac7fffc5 	stb	r17,-1(r21)
1000d704:	ad3fea1e 	bne	r21,r20,1000d6b0 <__alt_data_end+0xf800d6b0>
1000d708:	1813883a 	mov	r9,r3
1000d70c:	d8c01017 	ldw	r3,64(sp)
1000d710:	dc001317 	ldw	r16,76(sp)
1000d714:	dc801417 	ldw	r18,80(sp)
1000d718:	1011883a 	mov	r8,r2
1000d71c:	b8ef883a 	add	r23,r23,r3
1000d720:	d9000e17 	ldw	r4,56(sp)
1000d724:	d9401117 	ldw	r5,68(sp)
1000d728:	000d883a 	mov	r6,zero
1000d72c:	01cff834 	movhi	r7,16352
1000d730:	da001715 	stw	r8,92(sp)
1000d734:	da401515 	stw	r9,84(sp)
1000d738:	0013c180 	call	10013c18 <__adddf3>
1000d73c:	da001717 	ldw	r8,92(sp)
1000d740:	da401517 	ldw	r9,84(sp)
1000d744:	1009883a 	mov	r4,r2
1000d748:	400d883a 	mov	r6,r8
1000d74c:	480f883a 	mov	r7,r9
1000d750:	180b883a 	mov	r5,r3
1000d754:	0014f980 	call	10014f98 <__ledf2>
1000d758:	da001717 	ldw	r8,92(sp)
1000d75c:	da401517 	ldw	r9,84(sp)
1000d760:	10003b0e 	bge	r2,zero,1000d850 <_dtoa_r+0x15dc>
1000d764:	d9001217 	ldw	r4,72(sp)
1000d768:	bd7fffc3 	ldbu	r21,-1(r23)
1000d76c:	d9000515 	stw	r4,20(sp)
1000d770:	003d1c06 	br	1000cbe4 <__alt_data_end+0xf800cbe4>
1000d774:	d8c00817 	ldw	r3,32(sp)
1000d778:	18a9c83a 	sub	r20,r3,r2
1000d77c:	0005883a 	mov	r2,zero
1000d780:	003d3706 	br	1000cc60 <__alt_data_end+0xf800cc60>
1000d784:	00800044 	movi	r2,1
1000d788:	003dd006 	br	1000cecc <__alt_data_end+0xf800cecc>
1000d78c:	d8c00217 	ldw	r3,8(sp)
1000d790:	00800d84 	movi	r2,54
1000d794:	dd400917 	ldw	r21,36(sp)
1000d798:	10c5c83a 	sub	r2,r2,r3
1000d79c:	dd000817 	ldw	r20,32(sp)
1000d7a0:	003d2f06 	br	1000cc60 <__alt_data_end+0xf800cc60>
1000d7a4:	9029883a 	mov	r20,r18
1000d7a8:	982b883a 	mov	r21,r19
1000d7ac:	04400084 	movi	r17,2
1000d7b0:	003bc606 	br	1000c6cc <__alt_data_end+0xf800c6cc>
1000d7b4:	d8800617 	ldw	r2,24(sp)
1000d7b8:	103efc26 	beq	r2,zero,1000d3ac <__alt_data_end+0xf800d3ac>
1000d7bc:	d8c00d17 	ldw	r3,52(sp)
1000d7c0:	00fc890e 	bge	zero,r3,1000c9e8 <__alt_data_end+0xf800c9e8>
1000d7c4:	a80b883a 	mov	r5,r21
1000d7c8:	a009883a 	mov	r4,r20
1000d7cc:	000d883a 	mov	r6,zero
1000d7d0:	01d00934 	movhi	r7,16420
1000d7d4:	00086340 	call	10008634 <__muldf3>
1000d7d8:	89000044 	addi	r4,r17,1
1000d7dc:	1029883a 	mov	r20,r2
1000d7e0:	182b883a 	mov	r21,r3
1000d7e4:	00151000 	call	10015100 <__floatsidf>
1000d7e8:	a009883a 	mov	r4,r20
1000d7ec:	a80b883a 	mov	r5,r21
1000d7f0:	100d883a 	mov	r6,r2
1000d7f4:	180f883a 	mov	r7,r3
1000d7f8:	00086340 	call	10008634 <__muldf3>
1000d7fc:	1009883a 	mov	r4,r2
1000d800:	180b883a 	mov	r5,r3
1000d804:	000d883a 	mov	r6,zero
1000d808:	01d00734 	movhi	r7,16412
1000d80c:	0013c180 	call	10013c18 <__adddf3>
1000d810:	d9000517 	ldw	r4,20(sp)
1000d814:	1023883a 	mov	r17,r2
1000d818:	00bf3034 	movhi	r2,64704
1000d81c:	213fffc4 	addi	r4,r4,-1
1000d820:	1885883a 	add	r2,r3,r2
1000d824:	d9001215 	stw	r4,72(sp)
1000d828:	d8800e15 	stw	r2,56(sp)
1000d82c:	da800d17 	ldw	r10,52(sp)
1000d830:	003bc306 	br	1000c740 <__alt_data_end+0xf800c740>
1000d834:	b039883a 	mov	fp,r22
1000d838:	01000e44 	movi	r4,57
1000d83c:	8825883a 	mov	r18,r17
1000d840:	9dc00044 	addi	r23,r19,1
1000d844:	99000005 	stb	r4,0(r19)
1000d848:	a023883a 	mov	r17,r20
1000d84c:	003dae06 	br	1000cf08 <__alt_data_end+0xf800cf08>
1000d850:	d9800e17 	ldw	r6,56(sp)
1000d854:	d9c01117 	ldw	r7,68(sp)
1000d858:	0009883a 	mov	r4,zero
1000d85c:	014ff834 	movhi	r5,16352
1000d860:	da001715 	stw	r8,92(sp)
1000d864:	da401515 	stw	r9,84(sp)
1000d868:	0008ea00 	call	10008ea0 <__subdf3>
1000d86c:	da001717 	ldw	r8,92(sp)
1000d870:	da401517 	ldw	r9,84(sp)
1000d874:	1009883a 	mov	r4,r2
1000d878:	180b883a 	mov	r5,r3
1000d87c:	400d883a 	mov	r6,r8
1000d880:	480f883a 	mov	r7,r9
1000d884:	0014eb80 	call	10014eb8 <__gedf2>
1000d888:	00bc570e 	bge	zero,r2,1000c9e8 <__alt_data_end+0xf800c9e8>
1000d88c:	01000c04 	movi	r4,48
1000d890:	00000106 	br	1000d898 <_dtoa_r+0x1624>
1000d894:	102f883a 	mov	r23,r2
1000d898:	b8bfffc4 	addi	r2,r23,-1
1000d89c:	10c00007 	ldb	r3,0(r2)
1000d8a0:	193ffc26 	beq	r3,r4,1000d894 <__alt_data_end+0xf800d894>
1000d8a4:	d9801217 	ldw	r6,72(sp)
1000d8a8:	d9800515 	stw	r6,20(sp)
1000d8ac:	003c1f06 	br	1000c92c <__alt_data_end+0xf800c92c>
1000d8b0:	d8801217 	ldw	r2,72(sp)
1000d8b4:	dc001117 	ldw	r16,68(sp)
1000d8b8:	d8800515 	stw	r2,20(sp)
1000d8bc:	003cc906 	br	1000cbe4 <__alt_data_end+0xf800cbe4>
1000d8c0:	dd801317 	ldw	r22,76(sp)
1000d8c4:	dc001117 	ldw	r16,68(sp)
1000d8c8:	dcc01417 	ldw	r19,80(sp)
1000d8cc:	dc801017 	ldw	r18,64(sp)
1000d8d0:	003c4506 	br	1000c9e8 <__alt_data_end+0xf800c9e8>
1000d8d4:	103e5d1e 	bne	r2,zero,1000d24c <__alt_data_end+0xf800d24c>
1000d8d8:	4080004c 	andi	r2,r8,1
1000d8dc:	103e5b26 	beq	r2,zero,1000d24c <__alt_data_end+0xf800d24c>
1000d8e0:	003e5706 	br	1000d240 <__alt_data_end+0xf800d240>
1000d8e4:	d8c00317 	ldw	r3,12(sp)
1000d8e8:	00800084 	movi	r2,2
1000d8ec:	10c00a16 	blt	r2,r3,1000d918 <_dtoa_r+0x16a4>
1000d8f0:	d9000d17 	ldw	r4,52(sp)
1000d8f4:	003e8306 	br	1000d304 <__alt_data_end+0xf800d304>
1000d8f8:	04400084 	movi	r17,2
1000d8fc:	003b7306 	br	1000c6cc <__alt_data_end+0xf800c6cc>
1000d900:	d9801217 	ldw	r6,72(sp)
1000d904:	d9800515 	stw	r6,20(sp)
1000d908:	003cb606 	br	1000cbe4 <__alt_data_end+0xf800cbe4>
1000d90c:	d9001217 	ldw	r4,72(sp)
1000d910:	d9000515 	stw	r4,20(sp)
1000d914:	003c0506 	br	1000c92c <__alt_data_end+0xf800c92c>
1000d918:	d9800d17 	ldw	r6,52(sp)
1000d91c:	d9800615 	stw	r6,24(sp)
1000d920:	003e8306 	br	1000d330 <__alt_data_end+0xf800d330>
1000d924:	d9800317 	ldw	r6,12(sp)
1000d928:	00800084 	movi	r2,2
1000d92c:	11800216 	blt	r2,r6,1000d938 <_dtoa_r+0x16c4>
1000d930:	d8800d17 	ldw	r2,52(sp)
1000d934:	003da606 	br	1000cfd0 <__alt_data_end+0xf800cfd0>
1000d938:	d8800d17 	ldw	r2,52(sp)
1000d93c:	d8800615 	stw	r2,24(sp)
1000d940:	003e7b06 	br	1000d330 <__alt_data_end+0xf800d330>
1000d944:	05000044 	movi	r20,1
1000d948:	003b0506 	br	1000c560 <__alt_data_end+0xf800c560>
1000d94c:	8009883a 	mov	r4,r16
1000d950:	80001115 	stw	zero,68(r16)
1000d954:	000b883a 	mov	r5,zero
1000d958:	000f7780 	call	1000f778 <_Balloc>
1000d95c:	d8800715 	stw	r2,28(sp)
1000d960:	d8c00717 	ldw	r3,28(sp)
1000d964:	00bfffc4 	movi	r2,-1
1000d968:	01000044 	movi	r4,1
1000d96c:	d8800615 	stw	r2,24(sp)
1000d970:	80c01015 	stw	r3,64(r16)
1000d974:	d9000b15 	stw	r4,44(sp)
1000d978:	d8002215 	stw	zero,136(sp)
1000d97c:	d8800d15 	stw	r2,52(sp)
1000d980:	003c1906 	br	1000c9e8 <__alt_data_end+0xf800c9e8>
1000d984:	193d2926 	beq	r3,r4,1000ce2c <__alt_data_end+0xf800ce2c>
1000d988:	00c00f04 	movi	r3,60
1000d98c:	1885c83a 	sub	r2,r3,r2
1000d990:	003d7b06 	br	1000cf80 <__alt_data_end+0xf800cf80>
1000d994:	000b883a 	mov	r5,zero
1000d998:	003b1006 	br	1000c5dc <__alt_data_end+0xf800c5dc>

1000d99c <_fflush_r>:
1000d99c:	defffb04 	addi	sp,sp,-20
1000d9a0:	dcc00315 	stw	r19,12(sp)
1000d9a4:	dc000015 	stw	r16,0(sp)
1000d9a8:	dfc00415 	stw	ra,16(sp)
1000d9ac:	dc800215 	stw	r18,8(sp)
1000d9b0:	dc400115 	stw	r17,4(sp)
1000d9b4:	2027883a 	mov	r19,r4
1000d9b8:	2821883a 	mov	r16,r5
1000d9bc:	20000226 	beq	r4,zero,1000d9c8 <_fflush_r+0x2c>
1000d9c0:	20800e17 	ldw	r2,56(r4)
1000d9c4:	10005326 	beq	r2,zero,1000db14 <_fflush_r+0x178>
1000d9c8:	8080030b 	ldhu	r2,12(r16)
1000d9cc:	10ffffcc 	andi	r3,r2,65535
1000d9d0:	18e0001c 	xori	r3,r3,32768
1000d9d4:	18e00004 	addi	r3,r3,-32768
1000d9d8:	18002c26 	beq	r3,zero,1000da8c <_fflush_r+0xf0>
1000d9dc:	10c0020c 	andi	r3,r2,8
1000d9e0:	1800321e 	bne	r3,zero,1000daac <_fflush_r+0x110>
1000d9e4:	80c00117 	ldw	r3,4(r16)
1000d9e8:	10820014 	ori	r2,r2,2048
1000d9ec:	8080030d 	sth	r2,12(r16)
1000d9f0:	00c0570e 	bge	zero,r3,1000db50 <_fflush_r+0x1b4>
1000d9f4:	82000a17 	ldw	r8,40(r16)
1000d9f8:	40002426 	beq	r8,zero,1000da8c <_fflush_r+0xf0>
1000d9fc:	9c400017 	ldw	r17,0(r19)
1000da00:	10c4000c 	andi	r3,r2,4096
1000da04:	98000015 	stw	zero,0(r19)
1000da08:	18004626 	beq	r3,zero,1000db24 <_fflush_r+0x188>
1000da0c:	81801417 	ldw	r6,80(r16)
1000da10:	10c0010c 	andi	r3,r2,4
1000da14:	18000626 	beq	r3,zero,1000da30 <_fflush_r+0x94>
1000da18:	80c00117 	ldw	r3,4(r16)
1000da1c:	80800c17 	ldw	r2,48(r16)
1000da20:	30cdc83a 	sub	r6,r6,r3
1000da24:	10000226 	beq	r2,zero,1000da30 <_fflush_r+0x94>
1000da28:	80800f17 	ldw	r2,60(r16)
1000da2c:	308dc83a 	sub	r6,r6,r2
1000da30:	81400717 	ldw	r5,28(r16)
1000da34:	9809883a 	mov	r4,r19
1000da38:	000f883a 	mov	r7,zero
1000da3c:	403ee83a 	callr	r8
1000da40:	00ffffc4 	movi	r3,-1
1000da44:	10c04526 	beq	r2,r3,1000db5c <_fflush_r+0x1c0>
1000da48:	80c0030b 	ldhu	r3,12(r16)
1000da4c:	81000417 	ldw	r4,16(r16)
1000da50:	80000115 	stw	zero,4(r16)
1000da54:	197dffcc 	andi	r5,r3,63487
1000da58:	8140030d 	sth	r5,12(r16)
1000da5c:	81000015 	stw	r4,0(r16)
1000da60:	18c4000c 	andi	r3,r3,4096
1000da64:	18000126 	beq	r3,zero,1000da6c <_fflush_r+0xd0>
1000da68:	80801415 	stw	r2,80(r16)
1000da6c:	81400c17 	ldw	r5,48(r16)
1000da70:	9c400015 	stw	r17,0(r19)
1000da74:	28000526 	beq	r5,zero,1000da8c <_fflush_r+0xf0>
1000da78:	80801004 	addi	r2,r16,64
1000da7c:	28800226 	beq	r5,r2,1000da88 <_fflush_r+0xec>
1000da80:	9809883a 	mov	r4,r19
1000da84:	000e0cc0 	call	1000e0cc <_free_r>
1000da88:	80000c15 	stw	zero,48(r16)
1000da8c:	0005883a 	mov	r2,zero
1000da90:	dfc00417 	ldw	ra,16(sp)
1000da94:	dcc00317 	ldw	r19,12(sp)
1000da98:	dc800217 	ldw	r18,8(sp)
1000da9c:	dc400117 	ldw	r17,4(sp)
1000daa0:	dc000017 	ldw	r16,0(sp)
1000daa4:	dec00504 	addi	sp,sp,20
1000daa8:	f800283a 	ret
1000daac:	84800417 	ldw	r18,16(r16)
1000dab0:	903ff626 	beq	r18,zero,1000da8c <__alt_data_end+0xf800da8c>
1000dab4:	84400017 	ldw	r17,0(r16)
1000dab8:	108000cc 	andi	r2,r2,3
1000dabc:	84800015 	stw	r18,0(r16)
1000dac0:	8ca3c83a 	sub	r17,r17,r18
1000dac4:	10001526 	beq	r2,zero,1000db1c <_fflush_r+0x180>
1000dac8:	0005883a 	mov	r2,zero
1000dacc:	80800215 	stw	r2,8(r16)
1000dad0:	04400316 	blt	zero,r17,1000dae0 <_fflush_r+0x144>
1000dad4:	003fed06 	br	1000da8c <__alt_data_end+0xf800da8c>
1000dad8:	90a5883a 	add	r18,r18,r2
1000dadc:	047feb0e 	bge	zero,r17,1000da8c <__alt_data_end+0xf800da8c>
1000dae0:	80800917 	ldw	r2,36(r16)
1000dae4:	81400717 	ldw	r5,28(r16)
1000dae8:	880f883a 	mov	r7,r17
1000daec:	900d883a 	mov	r6,r18
1000daf0:	9809883a 	mov	r4,r19
1000daf4:	103ee83a 	callr	r2
1000daf8:	88a3c83a 	sub	r17,r17,r2
1000dafc:	00bff616 	blt	zero,r2,1000dad8 <__alt_data_end+0xf800dad8>
1000db00:	80c0030b 	ldhu	r3,12(r16)
1000db04:	00bfffc4 	movi	r2,-1
1000db08:	18c01014 	ori	r3,r3,64
1000db0c:	80c0030d 	sth	r3,12(r16)
1000db10:	003fdf06 	br	1000da90 <__alt_data_end+0xf800da90>
1000db14:	000df580 	call	1000df58 <__sinit>
1000db18:	003fab06 	br	1000d9c8 <__alt_data_end+0xf800d9c8>
1000db1c:	80800517 	ldw	r2,20(r16)
1000db20:	003fea06 	br	1000dacc <__alt_data_end+0xf800dacc>
1000db24:	81400717 	ldw	r5,28(r16)
1000db28:	000d883a 	mov	r6,zero
1000db2c:	9809883a 	mov	r4,r19
1000db30:	01c00044 	movi	r7,1
1000db34:	403ee83a 	callr	r8
1000db38:	100d883a 	mov	r6,r2
1000db3c:	00bfffc4 	movi	r2,-1
1000db40:	30801326 	beq	r6,r2,1000db90 <_fflush_r+0x1f4>
1000db44:	8080030b 	ldhu	r2,12(r16)
1000db48:	82000a17 	ldw	r8,40(r16)
1000db4c:	003fb006 	br	1000da10 <__alt_data_end+0xf800da10>
1000db50:	80c00f17 	ldw	r3,60(r16)
1000db54:	00ffa716 	blt	zero,r3,1000d9f4 <__alt_data_end+0xf800d9f4>
1000db58:	003fcc06 	br	1000da8c <__alt_data_end+0xf800da8c>
1000db5c:	98c00017 	ldw	r3,0(r19)
1000db60:	183fb926 	beq	r3,zero,1000da48 <__alt_data_end+0xf800da48>
1000db64:	01000744 	movi	r4,29
1000db68:	19000226 	beq	r3,r4,1000db74 <_fflush_r+0x1d8>
1000db6c:	01000584 	movi	r4,22
1000db70:	1900101e 	bne	r3,r4,1000dbb4 <_fflush_r+0x218>
1000db74:	8080030b 	ldhu	r2,12(r16)
1000db78:	80c00417 	ldw	r3,16(r16)
1000db7c:	80000115 	stw	zero,4(r16)
1000db80:	10bdffcc 	andi	r2,r2,63487
1000db84:	8080030d 	sth	r2,12(r16)
1000db88:	80c00015 	stw	r3,0(r16)
1000db8c:	003fb706 	br	1000da6c <__alt_data_end+0xf800da6c>
1000db90:	98800017 	ldw	r2,0(r19)
1000db94:	103feb26 	beq	r2,zero,1000db44 <__alt_data_end+0xf800db44>
1000db98:	00c00744 	movi	r3,29
1000db9c:	10c00226 	beq	r2,r3,1000dba8 <_fflush_r+0x20c>
1000dba0:	00c00584 	movi	r3,22
1000dba4:	10ffd61e 	bne	r2,r3,1000db00 <__alt_data_end+0xf800db00>
1000dba8:	9c400015 	stw	r17,0(r19)
1000dbac:	0005883a 	mov	r2,zero
1000dbb0:	003fb706 	br	1000da90 <__alt_data_end+0xf800da90>
1000dbb4:	80c0030b 	ldhu	r3,12(r16)
1000dbb8:	18c01014 	ori	r3,r3,64
1000dbbc:	80c0030d 	sth	r3,12(r16)
1000dbc0:	003fb306 	br	1000da90 <__alt_data_end+0xf800da90>

1000dbc4 <fflush>:
1000dbc4:	20000526 	beq	r4,zero,1000dbdc <fflush+0x18>
1000dbc8:	008400b4 	movhi	r2,4098
1000dbcc:	10ae8a04 	addi	r2,r2,-17880
1000dbd0:	200b883a 	mov	r5,r4
1000dbd4:	11000017 	ldw	r4,0(r2)
1000dbd8:	000d99c1 	jmpi	1000d99c <_fflush_r>
1000dbdc:	008400b4 	movhi	r2,4098
1000dbe0:	10ae8904 	addi	r2,r2,-17884
1000dbe4:	11000017 	ldw	r4,0(r2)
1000dbe8:	01440074 	movhi	r5,4097
1000dbec:	29766704 	addi	r5,r5,-9828
1000dbf0:	000e9181 	jmpi	1000e918 <_fwalk_reent>

1000dbf4 <__fp_lock>:
1000dbf4:	0005883a 	mov	r2,zero
1000dbf8:	f800283a 	ret

1000dbfc <__fp_unlock>:
1000dbfc:	0005883a 	mov	r2,zero
1000dc00:	f800283a 	ret

1000dc04 <_cleanup_r>:
1000dc04:	01440074 	movhi	r5,4097
1000dc08:	2949fb04 	addi	r5,r5,10220
1000dc0c:	000e8601 	jmpi	1000e860 <_fwalk>

1000dc10 <__sinit.part.1>:
1000dc10:	defff604 	addi	sp,sp,-40
1000dc14:	00c40074 	movhi	r3,4097
1000dc18:	dfc00915 	stw	ra,36(sp)
1000dc1c:	df000815 	stw	fp,32(sp)
1000dc20:	ddc00715 	stw	r23,28(sp)
1000dc24:	dd800615 	stw	r22,24(sp)
1000dc28:	dd400515 	stw	r21,20(sp)
1000dc2c:	dd000415 	stw	r20,16(sp)
1000dc30:	dcc00315 	stw	r19,12(sp)
1000dc34:	dc800215 	stw	r18,8(sp)
1000dc38:	dc400115 	stw	r17,4(sp)
1000dc3c:	dc000015 	stw	r16,0(sp)
1000dc40:	18f70104 	addi	r3,r3,-9212
1000dc44:	24000117 	ldw	r16,4(r4)
1000dc48:	20c00f15 	stw	r3,60(r4)
1000dc4c:	07000044 	movi	fp,1
1000dc50:	00c000c4 	movi	r3,3
1000dc54:	2080bb04 	addi	r2,r4,748
1000dc58:	20c0b915 	stw	r3,740(r4)
1000dc5c:	27000e15 	stw	fp,56(r4)
1000dc60:	2080ba15 	stw	r2,744(r4)
1000dc64:	2000b815 	stw	zero,736(r4)
1000dc68:	05c00204 	movi	r23,8
1000dc6c:	00800104 	movi	r2,4
1000dc70:	2025883a 	mov	r18,r4
1000dc74:	b80d883a 	mov	r6,r23
1000dc78:	81001704 	addi	r4,r16,92
1000dc7c:	000b883a 	mov	r5,zero
1000dc80:	80000015 	stw	zero,0(r16)
1000dc84:	80000115 	stw	zero,4(r16)
1000dc88:	80000215 	stw	zero,8(r16)
1000dc8c:	8080030d 	sth	r2,12(r16)
1000dc90:	80001915 	stw	zero,100(r16)
1000dc94:	8000038d 	sth	zero,14(r16)
1000dc98:	80000415 	stw	zero,16(r16)
1000dc9c:	80000515 	stw	zero,20(r16)
1000dca0:	80000615 	stw	zero,24(r16)
1000dca4:	000f6540 	call	1000f654 <memset>
1000dca8:	05840074 	movhi	r22,4097
1000dcac:	94400217 	ldw	r17,8(r18)
1000dcb0:	05440074 	movhi	r21,4097
1000dcb4:	05040074 	movhi	r20,4097
1000dcb8:	04c40074 	movhi	r19,4097
1000dcbc:	b5838a04 	addi	r22,r22,3624
1000dcc0:	ad43a104 	addi	r21,r21,3716
1000dcc4:	a503c004 	addi	r20,r20,3840
1000dcc8:	9cc3d704 	addi	r19,r19,3932
1000dccc:	85800815 	stw	r22,32(r16)
1000dcd0:	85400915 	stw	r21,36(r16)
1000dcd4:	85000a15 	stw	r20,40(r16)
1000dcd8:	84c00b15 	stw	r19,44(r16)
1000dcdc:	84000715 	stw	r16,28(r16)
1000dce0:	00800284 	movi	r2,10
1000dce4:	89001704 	addi	r4,r17,92
1000dce8:	b80d883a 	mov	r6,r23
1000dcec:	000b883a 	mov	r5,zero
1000dcf0:	88000015 	stw	zero,0(r17)
1000dcf4:	88000115 	stw	zero,4(r17)
1000dcf8:	88000215 	stw	zero,8(r17)
1000dcfc:	8880030d 	sth	r2,12(r17)
1000dd00:	88001915 	stw	zero,100(r17)
1000dd04:	8f00038d 	sth	fp,14(r17)
1000dd08:	88000415 	stw	zero,16(r17)
1000dd0c:	88000515 	stw	zero,20(r17)
1000dd10:	88000615 	stw	zero,24(r17)
1000dd14:	000f6540 	call	1000f654 <memset>
1000dd18:	94000317 	ldw	r16,12(r18)
1000dd1c:	00800484 	movi	r2,18
1000dd20:	8c400715 	stw	r17,28(r17)
1000dd24:	8d800815 	stw	r22,32(r17)
1000dd28:	8d400915 	stw	r21,36(r17)
1000dd2c:	8d000a15 	stw	r20,40(r17)
1000dd30:	8cc00b15 	stw	r19,44(r17)
1000dd34:	8080030d 	sth	r2,12(r16)
1000dd38:	00800084 	movi	r2,2
1000dd3c:	80000015 	stw	zero,0(r16)
1000dd40:	80000115 	stw	zero,4(r16)
1000dd44:	80000215 	stw	zero,8(r16)
1000dd48:	80001915 	stw	zero,100(r16)
1000dd4c:	8080038d 	sth	r2,14(r16)
1000dd50:	80000415 	stw	zero,16(r16)
1000dd54:	80000515 	stw	zero,20(r16)
1000dd58:	80000615 	stw	zero,24(r16)
1000dd5c:	81001704 	addi	r4,r16,92
1000dd60:	000b883a 	mov	r5,zero
1000dd64:	b80d883a 	mov	r6,r23
1000dd68:	000f6540 	call	1000f654 <memset>
1000dd6c:	84000715 	stw	r16,28(r16)
1000dd70:	85800815 	stw	r22,32(r16)
1000dd74:	85400915 	stw	r21,36(r16)
1000dd78:	85000a15 	stw	r20,40(r16)
1000dd7c:	84c00b15 	stw	r19,44(r16)
1000dd80:	dfc00917 	ldw	ra,36(sp)
1000dd84:	df000817 	ldw	fp,32(sp)
1000dd88:	ddc00717 	ldw	r23,28(sp)
1000dd8c:	dd800617 	ldw	r22,24(sp)
1000dd90:	dd400517 	ldw	r21,20(sp)
1000dd94:	dd000417 	ldw	r20,16(sp)
1000dd98:	dcc00317 	ldw	r19,12(sp)
1000dd9c:	dc800217 	ldw	r18,8(sp)
1000dda0:	dc400117 	ldw	r17,4(sp)
1000dda4:	dc000017 	ldw	r16,0(sp)
1000dda8:	dec00a04 	addi	sp,sp,40
1000ddac:	f800283a 	ret

1000ddb0 <__sfmoreglue>:
1000ddb0:	defffc04 	addi	sp,sp,-16
1000ddb4:	dc800215 	stw	r18,8(sp)
1000ddb8:	2825883a 	mov	r18,r5
1000ddbc:	dc000015 	stw	r16,0(sp)
1000ddc0:	01401a04 	movi	r5,104
1000ddc4:	2021883a 	mov	r16,r4
1000ddc8:	9009883a 	mov	r4,r18
1000ddcc:	dfc00315 	stw	ra,12(sp)
1000ddd0:	dc400115 	stw	r17,4(sp)
1000ddd4:	00074c40 	call	100074c4 <__mulsi3>
1000ddd8:	8009883a 	mov	r4,r16
1000dddc:	11400304 	addi	r5,r2,12
1000dde0:	1023883a 	mov	r17,r2
1000dde4:	000ec680 	call	1000ec68 <_malloc_r>
1000dde8:	1021883a 	mov	r16,r2
1000ddec:	10000726 	beq	r2,zero,1000de0c <__sfmoreglue+0x5c>
1000ddf0:	11000304 	addi	r4,r2,12
1000ddf4:	10000015 	stw	zero,0(r2)
1000ddf8:	14800115 	stw	r18,4(r2)
1000ddfc:	11000215 	stw	r4,8(r2)
1000de00:	000b883a 	mov	r5,zero
1000de04:	880d883a 	mov	r6,r17
1000de08:	000f6540 	call	1000f654 <memset>
1000de0c:	8005883a 	mov	r2,r16
1000de10:	dfc00317 	ldw	ra,12(sp)
1000de14:	dc800217 	ldw	r18,8(sp)
1000de18:	dc400117 	ldw	r17,4(sp)
1000de1c:	dc000017 	ldw	r16,0(sp)
1000de20:	dec00404 	addi	sp,sp,16
1000de24:	f800283a 	ret

1000de28 <__sfp>:
1000de28:	008400b4 	movhi	r2,4098
1000de2c:	defffb04 	addi	sp,sp,-20
1000de30:	10ae8904 	addi	r2,r2,-17884
1000de34:	dc800215 	stw	r18,8(sp)
1000de38:	14800017 	ldw	r18,0(r2)
1000de3c:	dcc00315 	stw	r19,12(sp)
1000de40:	dfc00415 	stw	ra,16(sp)
1000de44:	90800e17 	ldw	r2,56(r18)
1000de48:	dc400115 	stw	r17,4(sp)
1000de4c:	dc000015 	stw	r16,0(sp)
1000de50:	2027883a 	mov	r19,r4
1000de54:	1000021e 	bne	r2,zero,1000de60 <__sfp+0x38>
1000de58:	9009883a 	mov	r4,r18
1000de5c:	000dc100 	call	1000dc10 <__sinit.part.1>
1000de60:	9480b804 	addi	r18,r18,736
1000de64:	047fffc4 	movi	r17,-1
1000de68:	91400117 	ldw	r5,4(r18)
1000de6c:	94000217 	ldw	r16,8(r18)
1000de70:	297fffc4 	addi	r5,r5,-1
1000de74:	28000a16 	blt	r5,zero,1000dea0 <__sfp+0x78>
1000de78:	8080030f 	ldh	r2,12(r16)
1000de7c:	10000c26 	beq	r2,zero,1000deb0 <__sfp+0x88>
1000de80:	80c01d04 	addi	r3,r16,116
1000de84:	00000206 	br	1000de90 <__sfp+0x68>
1000de88:	18bfe60f 	ldh	r2,-104(r3)
1000de8c:	10000826 	beq	r2,zero,1000deb0 <__sfp+0x88>
1000de90:	297fffc4 	addi	r5,r5,-1
1000de94:	1c3ffd04 	addi	r16,r3,-12
1000de98:	18c01a04 	addi	r3,r3,104
1000de9c:	2c7ffa1e 	bne	r5,r17,1000de88 <__alt_data_end+0xf800de88>
1000dea0:	90800017 	ldw	r2,0(r18)
1000dea4:	10001d26 	beq	r2,zero,1000df1c <__sfp+0xf4>
1000dea8:	1025883a 	mov	r18,r2
1000deac:	003fee06 	br	1000de68 <__alt_data_end+0xf800de68>
1000deb0:	00bfffc4 	movi	r2,-1
1000deb4:	8080038d 	sth	r2,14(r16)
1000deb8:	00800044 	movi	r2,1
1000debc:	8080030d 	sth	r2,12(r16)
1000dec0:	80001915 	stw	zero,100(r16)
1000dec4:	80000015 	stw	zero,0(r16)
1000dec8:	80000215 	stw	zero,8(r16)
1000decc:	80000115 	stw	zero,4(r16)
1000ded0:	80000415 	stw	zero,16(r16)
1000ded4:	80000515 	stw	zero,20(r16)
1000ded8:	80000615 	stw	zero,24(r16)
1000dedc:	81001704 	addi	r4,r16,92
1000dee0:	000b883a 	mov	r5,zero
1000dee4:	01800204 	movi	r6,8
1000dee8:	000f6540 	call	1000f654 <memset>
1000deec:	8005883a 	mov	r2,r16
1000def0:	80000c15 	stw	zero,48(r16)
1000def4:	80000d15 	stw	zero,52(r16)
1000def8:	80001115 	stw	zero,68(r16)
1000defc:	80001215 	stw	zero,72(r16)
1000df00:	dfc00417 	ldw	ra,16(sp)
1000df04:	dcc00317 	ldw	r19,12(sp)
1000df08:	dc800217 	ldw	r18,8(sp)
1000df0c:	dc400117 	ldw	r17,4(sp)
1000df10:	dc000017 	ldw	r16,0(sp)
1000df14:	dec00504 	addi	sp,sp,20
1000df18:	f800283a 	ret
1000df1c:	9809883a 	mov	r4,r19
1000df20:	01400104 	movi	r5,4
1000df24:	000ddb00 	call	1000ddb0 <__sfmoreglue>
1000df28:	90800015 	stw	r2,0(r18)
1000df2c:	103fde1e 	bne	r2,zero,1000dea8 <__alt_data_end+0xf800dea8>
1000df30:	00800304 	movi	r2,12
1000df34:	98800015 	stw	r2,0(r19)
1000df38:	0005883a 	mov	r2,zero
1000df3c:	003ff006 	br	1000df00 <__alt_data_end+0xf800df00>

1000df40 <_cleanup>:
1000df40:	008400b4 	movhi	r2,4098
1000df44:	10ae8904 	addi	r2,r2,-17884
1000df48:	11000017 	ldw	r4,0(r2)
1000df4c:	01440074 	movhi	r5,4097
1000df50:	2949fb04 	addi	r5,r5,10220
1000df54:	000e8601 	jmpi	1000e860 <_fwalk>

1000df58 <__sinit>:
1000df58:	20800e17 	ldw	r2,56(r4)
1000df5c:	10000126 	beq	r2,zero,1000df64 <__sinit+0xc>
1000df60:	f800283a 	ret
1000df64:	000dc101 	jmpi	1000dc10 <__sinit.part.1>

1000df68 <__sfp_lock_acquire>:
1000df68:	f800283a 	ret

1000df6c <__sfp_lock_release>:
1000df6c:	f800283a 	ret

1000df70 <__sinit_lock_acquire>:
1000df70:	f800283a 	ret

1000df74 <__sinit_lock_release>:
1000df74:	f800283a 	ret

1000df78 <__fp_lock_all>:
1000df78:	008400b4 	movhi	r2,4098
1000df7c:	10ae8a04 	addi	r2,r2,-17880
1000df80:	11000017 	ldw	r4,0(r2)
1000df84:	01440074 	movhi	r5,4097
1000df88:	2976fd04 	addi	r5,r5,-9228
1000df8c:	000e8601 	jmpi	1000e860 <_fwalk>

1000df90 <__fp_unlock_all>:
1000df90:	008400b4 	movhi	r2,4098
1000df94:	10ae8a04 	addi	r2,r2,-17880
1000df98:	11000017 	ldw	r4,0(r2)
1000df9c:	01440074 	movhi	r5,4097
1000dfa0:	2976ff04 	addi	r5,r5,-9220
1000dfa4:	000e8601 	jmpi	1000e860 <_fwalk>

1000dfa8 <_malloc_trim_r>:
1000dfa8:	defffb04 	addi	sp,sp,-20
1000dfac:	dcc00315 	stw	r19,12(sp)
1000dfb0:	04c400b4 	movhi	r19,4098
1000dfb4:	dc800215 	stw	r18,8(sp)
1000dfb8:	dc400115 	stw	r17,4(sp)
1000dfbc:	dc000015 	stw	r16,0(sp)
1000dfc0:	dfc00415 	stw	ra,16(sp)
1000dfc4:	2821883a 	mov	r16,r5
1000dfc8:	9ce90504 	addi	r19,r19,-23532
1000dfcc:	2025883a 	mov	r18,r4
1000dfd0:	001585c0 	call	1001585c <__malloc_lock>
1000dfd4:	98800217 	ldw	r2,8(r19)
1000dfd8:	14400117 	ldw	r17,4(r2)
1000dfdc:	00bfff04 	movi	r2,-4
1000dfe0:	88a2703a 	and	r17,r17,r2
1000dfe4:	8c21c83a 	sub	r16,r17,r16
1000dfe8:	8403fbc4 	addi	r16,r16,4079
1000dfec:	8020d33a 	srli	r16,r16,12
1000dff0:	0083ffc4 	movi	r2,4095
1000dff4:	843fffc4 	addi	r16,r16,-1
1000dff8:	8020933a 	slli	r16,r16,12
1000dffc:	1400060e 	bge	r2,r16,1000e018 <_malloc_trim_r+0x70>
1000e000:	9009883a 	mov	r4,r18
1000e004:	000b883a 	mov	r5,zero
1000e008:	0010dd40 	call	10010dd4 <_sbrk_r>
1000e00c:	98c00217 	ldw	r3,8(r19)
1000e010:	1c47883a 	add	r3,r3,r17
1000e014:	10c00a26 	beq	r2,r3,1000e040 <_malloc_trim_r+0x98>
1000e018:	9009883a 	mov	r4,r18
1000e01c:	00158800 	call	10015880 <__malloc_unlock>
1000e020:	0005883a 	mov	r2,zero
1000e024:	dfc00417 	ldw	ra,16(sp)
1000e028:	dcc00317 	ldw	r19,12(sp)
1000e02c:	dc800217 	ldw	r18,8(sp)
1000e030:	dc400117 	ldw	r17,4(sp)
1000e034:	dc000017 	ldw	r16,0(sp)
1000e038:	dec00504 	addi	sp,sp,20
1000e03c:	f800283a 	ret
1000e040:	9009883a 	mov	r4,r18
1000e044:	040bc83a 	sub	r5,zero,r16
1000e048:	0010dd40 	call	10010dd4 <_sbrk_r>
1000e04c:	00ffffc4 	movi	r3,-1
1000e050:	10c00d26 	beq	r2,r3,1000e088 <_malloc_trim_r+0xe0>
1000e054:	00c400b4 	movhi	r3,4098
1000e058:	18f56204 	addi	r3,r3,-10872
1000e05c:	18800017 	ldw	r2,0(r3)
1000e060:	99000217 	ldw	r4,8(r19)
1000e064:	8c23c83a 	sub	r17,r17,r16
1000e068:	8c400054 	ori	r17,r17,1
1000e06c:	1421c83a 	sub	r16,r2,r16
1000e070:	24400115 	stw	r17,4(r4)
1000e074:	9009883a 	mov	r4,r18
1000e078:	1c000015 	stw	r16,0(r3)
1000e07c:	00158800 	call	10015880 <__malloc_unlock>
1000e080:	00800044 	movi	r2,1
1000e084:	003fe706 	br	1000e024 <__alt_data_end+0xf800e024>
1000e088:	9009883a 	mov	r4,r18
1000e08c:	000b883a 	mov	r5,zero
1000e090:	0010dd40 	call	10010dd4 <_sbrk_r>
1000e094:	99000217 	ldw	r4,8(r19)
1000e098:	014003c4 	movi	r5,15
1000e09c:	1107c83a 	sub	r3,r2,r4
1000e0a0:	28ffdd0e 	bge	r5,r3,1000e018 <__alt_data_end+0xf800e018>
1000e0a4:	014400b4 	movhi	r5,4098
1000e0a8:	296e8c04 	addi	r5,r5,-17872
1000e0ac:	29400017 	ldw	r5,0(r5)
1000e0b0:	18c00054 	ori	r3,r3,1
1000e0b4:	20c00115 	stw	r3,4(r4)
1000e0b8:	00c400b4 	movhi	r3,4098
1000e0bc:	1145c83a 	sub	r2,r2,r5
1000e0c0:	18f56204 	addi	r3,r3,-10872
1000e0c4:	18800015 	stw	r2,0(r3)
1000e0c8:	003fd306 	br	1000e018 <__alt_data_end+0xf800e018>

1000e0cc <_free_r>:
1000e0cc:	28004c26 	beq	r5,zero,1000e200 <_free_r+0x134>
1000e0d0:	defffd04 	addi	sp,sp,-12
1000e0d4:	dc400115 	stw	r17,4(sp)
1000e0d8:	dc000015 	stw	r16,0(sp)
1000e0dc:	2023883a 	mov	r17,r4
1000e0e0:	2821883a 	mov	r16,r5
1000e0e4:	dfc00215 	stw	ra,8(sp)
1000e0e8:	001585c0 	call	1001585c <__malloc_lock>
1000e0ec:	813fff17 	ldw	r4,-4(r16)
1000e0f0:	00bfff84 	movi	r2,-2
1000e0f4:	024400b4 	movhi	r9,4098
1000e0f8:	81bffe04 	addi	r6,r16,-8
1000e0fc:	2084703a 	and	r2,r4,r2
1000e100:	4a690504 	addi	r9,r9,-23532
1000e104:	308b883a 	add	r5,r6,r2
1000e108:	2a000117 	ldw	r8,4(r5)
1000e10c:	49c00217 	ldw	r7,8(r9)
1000e110:	00ffff04 	movi	r3,-4
1000e114:	40c6703a 	and	r3,r8,r3
1000e118:	39405326 	beq	r7,r5,1000e268 <_free_r+0x19c>
1000e11c:	28c00115 	stw	r3,4(r5)
1000e120:	2100004c 	andi	r4,r4,1
1000e124:	2000091e 	bne	r4,zero,1000e14c <_free_r+0x80>
1000e128:	81fffe17 	ldw	r7,-8(r16)
1000e12c:	4a000204 	addi	r8,r9,8
1000e130:	31cdc83a 	sub	r6,r6,r7
1000e134:	31000217 	ldw	r4,8(r6)
1000e138:	11c5883a 	add	r2,r2,r7
1000e13c:	22006126 	beq	r4,r8,1000e2c4 <_free_r+0x1f8>
1000e140:	31c00317 	ldw	r7,12(r6)
1000e144:	21c00315 	stw	r7,12(r4)
1000e148:	39000215 	stw	r4,8(r7)
1000e14c:	28c9883a 	add	r4,r5,r3
1000e150:	21c00117 	ldw	r7,4(r4)
1000e154:	39c0004c 	andi	r7,r7,1
1000e158:	38000d1e 	bne	r7,zero,1000e190 <_free_r+0xc4>
1000e15c:	29000217 	ldw	r4,8(r5)
1000e160:	10c5883a 	add	r2,r2,r3
1000e164:	00c400b4 	movhi	r3,4098
1000e168:	18e90704 	addi	r3,r3,-23524
1000e16c:	20c07526 	beq	r4,r3,1000e344 <_free_r+0x278>
1000e170:	29c00317 	ldw	r7,12(r5)
1000e174:	11400054 	ori	r5,r2,1
1000e178:	3087883a 	add	r3,r6,r2
1000e17c:	21c00315 	stw	r7,12(r4)
1000e180:	39000215 	stw	r4,8(r7)
1000e184:	31400115 	stw	r5,4(r6)
1000e188:	18800015 	stw	r2,0(r3)
1000e18c:	00000406 	br	1000e1a0 <_free_r+0xd4>
1000e190:	10c00054 	ori	r3,r2,1
1000e194:	30c00115 	stw	r3,4(r6)
1000e198:	3087883a 	add	r3,r6,r2
1000e19c:	18800015 	stw	r2,0(r3)
1000e1a0:	00c07fc4 	movi	r3,511
1000e1a4:	18801736 	bltu	r3,r2,1000e204 <_free_r+0x138>
1000e1a8:	1004d0fa 	srli	r2,r2,3
1000e1ac:	01400044 	movi	r5,1
1000e1b0:	49000117 	ldw	r4,4(r9)
1000e1b4:	1087883a 	add	r3,r2,r2
1000e1b8:	18c7883a 	add	r3,r3,r3
1000e1bc:	1005d0ba 	srai	r2,r2,2
1000e1c0:	18c7883a 	add	r3,r3,r3
1000e1c4:	1a47883a 	add	r3,r3,r9
1000e1c8:	19c00217 	ldw	r7,8(r3)
1000e1cc:	2884983a 	sll	r2,r5,r2
1000e1d0:	30c00315 	stw	r3,12(r6)
1000e1d4:	31c00215 	stw	r7,8(r6)
1000e1d8:	1104b03a 	or	r2,r2,r4
1000e1dc:	19800215 	stw	r6,8(r3)
1000e1e0:	48800115 	stw	r2,4(r9)
1000e1e4:	39800315 	stw	r6,12(r7)
1000e1e8:	8809883a 	mov	r4,r17
1000e1ec:	dfc00217 	ldw	ra,8(sp)
1000e1f0:	dc400117 	ldw	r17,4(sp)
1000e1f4:	dc000017 	ldw	r16,0(sp)
1000e1f8:	dec00304 	addi	sp,sp,12
1000e1fc:	00158801 	jmpi	10015880 <__malloc_unlock>
1000e200:	f800283a 	ret
1000e204:	1006d27a 	srli	r3,r2,9
1000e208:	01000104 	movi	r4,4
1000e20c:	20c04036 	bltu	r4,r3,1000e310 <_free_r+0x244>
1000e210:	1006d1ba 	srli	r3,r2,6
1000e214:	19400e04 	addi	r5,r3,56
1000e218:	2947883a 	add	r3,r5,r5
1000e21c:	18c7883a 	add	r3,r3,r3
1000e220:	18c7883a 	add	r3,r3,r3
1000e224:	1a49883a 	add	r4,r3,r9
1000e228:	20c00217 	ldw	r3,8(r4)
1000e22c:	01c400b4 	movhi	r7,4098
1000e230:	39e90504 	addi	r7,r7,-23532
1000e234:	19003b26 	beq	r3,r4,1000e324 <_free_r+0x258>
1000e238:	01ffff04 	movi	r7,-4
1000e23c:	19400117 	ldw	r5,4(r3)
1000e240:	29ca703a 	and	r5,r5,r7
1000e244:	1140022e 	bgeu	r2,r5,1000e250 <_free_r+0x184>
1000e248:	18c00217 	ldw	r3,8(r3)
1000e24c:	20fffb1e 	bne	r4,r3,1000e23c <__alt_data_end+0xf800e23c>
1000e250:	18800317 	ldw	r2,12(r3)
1000e254:	30800315 	stw	r2,12(r6)
1000e258:	30c00215 	stw	r3,8(r6)
1000e25c:	11800215 	stw	r6,8(r2)
1000e260:	19800315 	stw	r6,12(r3)
1000e264:	003fe006 	br	1000e1e8 <__alt_data_end+0xf800e1e8>
1000e268:	2100004c 	andi	r4,r4,1
1000e26c:	1885883a 	add	r2,r3,r2
1000e270:	2000071e 	bne	r4,zero,1000e290 <_free_r+0x1c4>
1000e274:	817ffe17 	ldw	r5,-8(r16)
1000e278:	314dc83a 	sub	r6,r6,r5
1000e27c:	30c00317 	ldw	r3,12(r6)
1000e280:	31000217 	ldw	r4,8(r6)
1000e284:	1145883a 	add	r2,r2,r5
1000e288:	20c00315 	stw	r3,12(r4)
1000e28c:	19000215 	stw	r4,8(r3)
1000e290:	10c00054 	ori	r3,r2,1
1000e294:	30c00115 	stw	r3,4(r6)
1000e298:	00c400b4 	movhi	r3,4098
1000e29c:	18ee8d04 	addi	r3,r3,-17868
1000e2a0:	18c00017 	ldw	r3,0(r3)
1000e2a4:	49800215 	stw	r6,8(r9)
1000e2a8:	10ffcf36 	bltu	r2,r3,1000e1e8 <__alt_data_end+0xf800e1e8>
1000e2ac:	008400b4 	movhi	r2,4098
1000e2b0:	10b55a04 	addi	r2,r2,-10904
1000e2b4:	11400017 	ldw	r5,0(r2)
1000e2b8:	8809883a 	mov	r4,r17
1000e2bc:	000dfa80 	call	1000dfa8 <_malloc_trim_r>
1000e2c0:	003fc906 	br	1000e1e8 <__alt_data_end+0xf800e1e8>
1000e2c4:	28c9883a 	add	r4,r5,r3
1000e2c8:	21000117 	ldw	r4,4(r4)
1000e2cc:	2100004c 	andi	r4,r4,1
1000e2d0:	20000a1e 	bne	r4,zero,1000e2fc <_free_r+0x230>
1000e2d4:	29000317 	ldw	r4,12(r5)
1000e2d8:	29400217 	ldw	r5,8(r5)
1000e2dc:	10c5883a 	add	r2,r2,r3
1000e2e0:	10c00054 	ori	r3,r2,1
1000e2e4:	29000315 	stw	r4,12(r5)
1000e2e8:	21400215 	stw	r5,8(r4)
1000e2ec:	30c00115 	stw	r3,4(r6)
1000e2f0:	308d883a 	add	r6,r6,r2
1000e2f4:	30800015 	stw	r2,0(r6)
1000e2f8:	003fbb06 	br	1000e1e8 <__alt_data_end+0xf800e1e8>
1000e2fc:	10c00054 	ori	r3,r2,1
1000e300:	30c00115 	stw	r3,4(r6)
1000e304:	308d883a 	add	r6,r6,r2
1000e308:	30800015 	stw	r2,0(r6)
1000e30c:	003fb606 	br	1000e1e8 <__alt_data_end+0xf800e1e8>
1000e310:	01000504 	movi	r4,20
1000e314:	20c01436 	bltu	r4,r3,1000e368 <_free_r+0x29c>
1000e318:	194016c4 	addi	r5,r3,91
1000e31c:	2947883a 	add	r3,r5,r5
1000e320:	003fbe06 	br	1000e21c <__alt_data_end+0xf800e21c>
1000e324:	280bd0ba 	srai	r5,r5,2
1000e328:	00800044 	movi	r2,1
1000e32c:	39000117 	ldw	r4,4(r7)
1000e330:	114a983a 	sll	r5,r2,r5
1000e334:	1805883a 	mov	r2,r3
1000e338:	2908b03a 	or	r4,r5,r4
1000e33c:	39000115 	stw	r4,4(r7)
1000e340:	003fc406 	br	1000e254 <__alt_data_end+0xf800e254>
1000e344:	49800515 	stw	r6,20(r9)
1000e348:	49800415 	stw	r6,16(r9)
1000e34c:	10c00054 	ori	r3,r2,1
1000e350:	31000315 	stw	r4,12(r6)
1000e354:	31000215 	stw	r4,8(r6)
1000e358:	30c00115 	stw	r3,4(r6)
1000e35c:	308d883a 	add	r6,r6,r2
1000e360:	30800015 	stw	r2,0(r6)
1000e364:	003fa006 	br	1000e1e8 <__alt_data_end+0xf800e1e8>
1000e368:	01001504 	movi	r4,84
1000e36c:	20c00436 	bltu	r4,r3,1000e380 <_free_r+0x2b4>
1000e370:	1006d33a 	srli	r3,r2,12
1000e374:	19401b84 	addi	r5,r3,110
1000e378:	2947883a 	add	r3,r5,r5
1000e37c:	003fa706 	br	1000e21c <__alt_data_end+0xf800e21c>
1000e380:	01005504 	movi	r4,340
1000e384:	20c00436 	bltu	r4,r3,1000e398 <_free_r+0x2cc>
1000e388:	1006d3fa 	srli	r3,r2,15
1000e38c:	19401dc4 	addi	r5,r3,119
1000e390:	2947883a 	add	r3,r5,r5
1000e394:	003fa106 	br	1000e21c <__alt_data_end+0xf800e21c>
1000e398:	01015504 	movi	r4,1364
1000e39c:	20c00436 	bltu	r4,r3,1000e3b0 <_free_r+0x2e4>
1000e3a0:	1006d4ba 	srli	r3,r2,18
1000e3a4:	19401f04 	addi	r5,r3,124
1000e3a8:	2947883a 	add	r3,r5,r5
1000e3ac:	003f9b06 	br	1000e21c <__alt_data_end+0xf800e21c>
1000e3b0:	00c03f04 	movi	r3,252
1000e3b4:	01401f84 	movi	r5,126
1000e3b8:	003f9806 	br	1000e21c <__alt_data_end+0xf800e21c>

1000e3bc <__sfvwrite_r>:
1000e3bc:	30800217 	ldw	r2,8(r6)
1000e3c0:	10004526 	beq	r2,zero,1000e4d8 <__sfvwrite_r+0x11c>
1000e3c4:	28c0030b 	ldhu	r3,12(r5)
1000e3c8:	defff404 	addi	sp,sp,-48
1000e3cc:	dd400715 	stw	r21,28(sp)
1000e3d0:	dcc00515 	stw	r19,20(sp)
1000e3d4:	dc000215 	stw	r16,8(sp)
1000e3d8:	dfc00b15 	stw	ra,44(sp)
1000e3dc:	df000a15 	stw	fp,40(sp)
1000e3e0:	ddc00915 	stw	r23,36(sp)
1000e3e4:	dd800815 	stw	r22,32(sp)
1000e3e8:	dd000615 	stw	r20,24(sp)
1000e3ec:	dc800415 	stw	r18,16(sp)
1000e3f0:	dc400315 	stw	r17,12(sp)
1000e3f4:	1880020c 	andi	r2,r3,8
1000e3f8:	2821883a 	mov	r16,r5
1000e3fc:	202b883a 	mov	r21,r4
1000e400:	3027883a 	mov	r19,r6
1000e404:	10002526 	beq	r2,zero,1000e49c <__sfvwrite_r+0xe0>
1000e408:	28800417 	ldw	r2,16(r5)
1000e40c:	10002326 	beq	r2,zero,1000e49c <__sfvwrite_r+0xe0>
1000e410:	1880008c 	andi	r2,r3,2
1000e414:	9c400017 	ldw	r17,0(r19)
1000e418:	10003126 	beq	r2,zero,1000e4e0 <__sfvwrite_r+0x124>
1000e41c:	0029883a 	mov	r20,zero
1000e420:	0025883a 	mov	r18,zero
1000e424:	05810004 	movi	r22,1024
1000e428:	a00d883a 	mov	r6,r20
1000e42c:	a809883a 	mov	r4,r21
1000e430:	90002526 	beq	r18,zero,1000e4c8 <__sfvwrite_r+0x10c>
1000e434:	900f883a 	mov	r7,r18
1000e438:	81400717 	ldw	r5,28(r16)
1000e43c:	b480012e 	bgeu	r22,r18,1000e444 <__sfvwrite_r+0x88>
1000e440:	01c10004 	movi	r7,1024
1000e444:	80800917 	ldw	r2,36(r16)
1000e448:	103ee83a 	callr	r2
1000e44c:	0080510e 	bge	zero,r2,1000e594 <__sfvwrite_r+0x1d8>
1000e450:	98c00217 	ldw	r3,8(r19)
1000e454:	a0a9883a 	add	r20,r20,r2
1000e458:	90a5c83a 	sub	r18,r18,r2
1000e45c:	1885c83a 	sub	r2,r3,r2
1000e460:	98800215 	stw	r2,8(r19)
1000e464:	103ff01e 	bne	r2,zero,1000e428 <__alt_data_end+0xf800e428>
1000e468:	0005883a 	mov	r2,zero
1000e46c:	dfc00b17 	ldw	ra,44(sp)
1000e470:	df000a17 	ldw	fp,40(sp)
1000e474:	ddc00917 	ldw	r23,36(sp)
1000e478:	dd800817 	ldw	r22,32(sp)
1000e47c:	dd400717 	ldw	r21,28(sp)
1000e480:	dd000617 	ldw	r20,24(sp)
1000e484:	dcc00517 	ldw	r19,20(sp)
1000e488:	dc800417 	ldw	r18,16(sp)
1000e48c:	dc400317 	ldw	r17,12(sp)
1000e490:	dc000217 	ldw	r16,8(sp)
1000e494:	dec00c04 	addi	sp,sp,48
1000e498:	f800283a 	ret
1000e49c:	a809883a 	mov	r4,r21
1000e4a0:	800b883a 	mov	r5,r16
1000e4a4:	000bf1c0 	call	1000bf1c <__swsetup_r>
1000e4a8:	80c0030b 	ldhu	r3,12(r16)
1000e4ac:	103fd826 	beq	r2,zero,1000e410 <__alt_data_end+0xf800e410>
1000e4b0:	18c01014 	ori	r3,r3,64
1000e4b4:	80c0030d 	sth	r3,12(r16)
1000e4b8:	00c00244 	movi	r3,9
1000e4bc:	00bfffc4 	movi	r2,-1
1000e4c0:	a8c00015 	stw	r3,0(r21)
1000e4c4:	003fe906 	br	1000e46c <__alt_data_end+0xf800e46c>
1000e4c8:	8d000017 	ldw	r20,0(r17)
1000e4cc:	8c800117 	ldw	r18,4(r17)
1000e4d0:	8c400204 	addi	r17,r17,8
1000e4d4:	003fd406 	br	1000e428 <__alt_data_end+0xf800e428>
1000e4d8:	0005883a 	mov	r2,zero
1000e4dc:	f800283a 	ret
1000e4e0:	1880004c 	andi	r2,r3,1
1000e4e4:	1000301e 	bne	r2,zero,1000e5a8 <__sfvwrite_r+0x1ec>
1000e4e8:	002f883a 	mov	r23,zero
1000e4ec:	0025883a 	mov	r18,zero
1000e4f0:	90001c26 	beq	r18,zero,1000e564 <__sfvwrite_r+0x1a8>
1000e4f4:	1880800c 	andi	r2,r3,512
1000e4f8:	85000217 	ldw	r20,8(r16)
1000e4fc:	10006c26 	beq	r2,zero,1000e6b0 <__sfvwrite_r+0x2f4>
1000e500:	a02d883a 	mov	r22,r20
1000e504:	95008536 	bltu	r18,r20,1000e71c <__sfvwrite_r+0x360>
1000e508:	1881200c 	andi	r2,r3,1152
1000e50c:	10009d1e 	bne	r2,zero,1000e784 <__sfvwrite_r+0x3c8>
1000e510:	81000017 	ldw	r4,0(r16)
1000e514:	a039883a 	mov	fp,r20
1000e518:	9029883a 	mov	r20,r18
1000e51c:	b80b883a 	mov	r5,r23
1000e520:	b00d883a 	mov	r6,r22
1000e524:	000f4f80 	call	1000f4f8 <memmove>
1000e528:	80c00217 	ldw	r3,8(r16)
1000e52c:	81000017 	ldw	r4,0(r16)
1000e530:	9005883a 	mov	r2,r18
1000e534:	1f39c83a 	sub	fp,r3,fp
1000e538:	258f883a 	add	r7,r4,r22
1000e53c:	87000215 	stw	fp,8(r16)
1000e540:	81c00015 	stw	r7,0(r16)
1000e544:	98c00217 	ldw	r3,8(r19)
1000e548:	b8af883a 	add	r23,r23,r2
1000e54c:	90a5c83a 	sub	r18,r18,r2
1000e550:	1d05c83a 	sub	r2,r3,r20
1000e554:	98800215 	stw	r2,8(r19)
1000e558:	103fc326 	beq	r2,zero,1000e468 <__alt_data_end+0xf800e468>
1000e55c:	80c0030b 	ldhu	r3,12(r16)
1000e560:	903fe41e 	bne	r18,zero,1000e4f4 <__alt_data_end+0xf800e4f4>
1000e564:	8dc00017 	ldw	r23,0(r17)
1000e568:	8c800117 	ldw	r18,4(r17)
1000e56c:	8c400204 	addi	r17,r17,8
1000e570:	003fdf06 	br	1000e4f0 <__alt_data_end+0xf800e4f0>
1000e574:	00107c00 	call	100107c0 <_realloc_r>
1000e578:	102d883a 	mov	r22,r2
1000e57c:	1000a01e 	bne	r2,zero,1000e800 <__sfvwrite_r+0x444>
1000e580:	81400417 	ldw	r5,16(r16)
1000e584:	a809883a 	mov	r4,r21
1000e588:	000e0cc0 	call	1000e0cc <_free_r>
1000e58c:	00800304 	movi	r2,12
1000e590:	a8800015 	stw	r2,0(r21)
1000e594:	80c0030b 	ldhu	r3,12(r16)
1000e598:	00bfffc4 	movi	r2,-1
1000e59c:	18c01014 	ori	r3,r3,64
1000e5a0:	80c0030d 	sth	r3,12(r16)
1000e5a4:	003fb106 	br	1000e46c <__alt_data_end+0xf800e46c>
1000e5a8:	0029883a 	mov	r20,zero
1000e5ac:	0011883a 	mov	r8,zero
1000e5b0:	0039883a 	mov	fp,zero
1000e5b4:	0025883a 	mov	r18,zero
1000e5b8:	90001f26 	beq	r18,zero,1000e638 <__sfvwrite_r+0x27c>
1000e5bc:	40006826 	beq	r8,zero,1000e760 <__sfvwrite_r+0x3a4>
1000e5c0:	a02f883a 	mov	r23,r20
1000e5c4:	9500012e 	bgeu	r18,r20,1000e5cc <__sfvwrite_r+0x210>
1000e5c8:	902f883a 	mov	r23,r18
1000e5cc:	81000017 	ldw	r4,0(r16)
1000e5d0:	80800417 	ldw	r2,16(r16)
1000e5d4:	b82d883a 	mov	r22,r23
1000e5d8:	81800217 	ldw	r6,8(r16)
1000e5dc:	81c00517 	ldw	r7,20(r16)
1000e5e0:	1100022e 	bgeu	r2,r4,1000e5ec <__sfvwrite_r+0x230>
1000e5e4:	31c7883a 	add	r3,r6,r7
1000e5e8:	1dc01816 	blt	r3,r23,1000e64c <__sfvwrite_r+0x290>
1000e5ec:	b9c03f16 	blt	r23,r7,1000e6ec <__sfvwrite_r+0x330>
1000e5f0:	80800917 	ldw	r2,36(r16)
1000e5f4:	81400717 	ldw	r5,28(r16)
1000e5f8:	a809883a 	mov	r4,r21
1000e5fc:	da000115 	stw	r8,4(sp)
1000e600:	e00d883a 	mov	r6,fp
1000e604:	103ee83a 	callr	r2
1000e608:	102d883a 	mov	r22,r2
1000e60c:	da000117 	ldw	r8,4(sp)
1000e610:	00bfe00e 	bge	zero,r2,1000e594 <__alt_data_end+0xf800e594>
1000e614:	a5a9c83a 	sub	r20,r20,r22
1000e618:	a0001f26 	beq	r20,zero,1000e698 <__sfvwrite_r+0x2dc>
1000e61c:	98800217 	ldw	r2,8(r19)
1000e620:	e5b9883a 	add	fp,fp,r22
1000e624:	95a5c83a 	sub	r18,r18,r22
1000e628:	15adc83a 	sub	r22,r2,r22
1000e62c:	9d800215 	stw	r22,8(r19)
1000e630:	b03f8d26 	beq	r22,zero,1000e468 <__alt_data_end+0xf800e468>
1000e634:	903fe11e 	bne	r18,zero,1000e5bc <__alt_data_end+0xf800e5bc>
1000e638:	8f000017 	ldw	fp,0(r17)
1000e63c:	8c800117 	ldw	r18,4(r17)
1000e640:	0011883a 	mov	r8,zero
1000e644:	8c400204 	addi	r17,r17,8
1000e648:	003fdb06 	br	1000e5b8 <__alt_data_end+0xf800e5b8>
1000e64c:	180d883a 	mov	r6,r3
1000e650:	e00b883a 	mov	r5,fp
1000e654:	da000115 	stw	r8,4(sp)
1000e658:	d8c00015 	stw	r3,0(sp)
1000e65c:	000f4f80 	call	1000f4f8 <memmove>
1000e660:	d8c00017 	ldw	r3,0(sp)
1000e664:	80800017 	ldw	r2,0(r16)
1000e668:	a809883a 	mov	r4,r21
1000e66c:	800b883a 	mov	r5,r16
1000e670:	10c5883a 	add	r2,r2,r3
1000e674:	80800015 	stw	r2,0(r16)
1000e678:	d8c00015 	stw	r3,0(sp)
1000e67c:	000d99c0 	call	1000d99c <_fflush_r>
1000e680:	d8c00017 	ldw	r3,0(sp)
1000e684:	da000117 	ldw	r8,4(sp)
1000e688:	103fc21e 	bne	r2,zero,1000e594 <__alt_data_end+0xf800e594>
1000e68c:	182d883a 	mov	r22,r3
1000e690:	a5a9c83a 	sub	r20,r20,r22
1000e694:	a03fe11e 	bne	r20,zero,1000e61c <__alt_data_end+0xf800e61c>
1000e698:	a809883a 	mov	r4,r21
1000e69c:	800b883a 	mov	r5,r16
1000e6a0:	000d99c0 	call	1000d99c <_fflush_r>
1000e6a4:	103fbb1e 	bne	r2,zero,1000e594 <__alt_data_end+0xf800e594>
1000e6a8:	0011883a 	mov	r8,zero
1000e6ac:	003fdb06 	br	1000e61c <__alt_data_end+0xf800e61c>
1000e6b0:	81000017 	ldw	r4,0(r16)
1000e6b4:	80800417 	ldw	r2,16(r16)
1000e6b8:	1100012e 	bgeu	r2,r4,1000e6c0 <__sfvwrite_r+0x304>
1000e6bc:	a4805a36 	bltu	r20,r18,1000e828 <__sfvwrite_r+0x46c>
1000e6c0:	81c00517 	ldw	r7,20(r16)
1000e6c4:	91c01a36 	bltu	r18,r7,1000e730 <__sfvwrite_r+0x374>
1000e6c8:	80800917 	ldw	r2,36(r16)
1000e6cc:	81400717 	ldw	r5,28(r16)
1000e6d0:	a809883a 	mov	r4,r21
1000e6d4:	b80d883a 	mov	r6,r23
1000e6d8:	103ee83a 	callr	r2
1000e6dc:	1029883a 	mov	r20,r2
1000e6e0:	00bfac0e 	bge	zero,r2,1000e594 <__alt_data_end+0xf800e594>
1000e6e4:	a005883a 	mov	r2,r20
1000e6e8:	003f9606 	br	1000e544 <__alt_data_end+0xf800e544>
1000e6ec:	b80d883a 	mov	r6,r23
1000e6f0:	e00b883a 	mov	r5,fp
1000e6f4:	da000115 	stw	r8,4(sp)
1000e6f8:	000f4f80 	call	1000f4f8 <memmove>
1000e6fc:	80800217 	ldw	r2,8(r16)
1000e700:	80c00017 	ldw	r3,0(r16)
1000e704:	da000117 	ldw	r8,4(sp)
1000e708:	15c5c83a 	sub	r2,r2,r23
1000e70c:	1def883a 	add	r23,r3,r23
1000e710:	80800215 	stw	r2,8(r16)
1000e714:	85c00015 	stw	r23,0(r16)
1000e718:	003fbe06 	br	1000e614 <__alt_data_end+0xf800e614>
1000e71c:	81000017 	ldw	r4,0(r16)
1000e720:	9039883a 	mov	fp,r18
1000e724:	9029883a 	mov	r20,r18
1000e728:	902d883a 	mov	r22,r18
1000e72c:	003f7b06 	br	1000e51c <__alt_data_end+0xf800e51c>
1000e730:	b80b883a 	mov	r5,r23
1000e734:	900d883a 	mov	r6,r18
1000e738:	000f4f80 	call	1000f4f8 <memmove>
1000e73c:	80c00217 	ldw	r3,8(r16)
1000e740:	80800017 	ldw	r2,0(r16)
1000e744:	9029883a 	mov	r20,r18
1000e748:	1c87c83a 	sub	r3,r3,r18
1000e74c:	1485883a 	add	r2,r2,r18
1000e750:	80800015 	stw	r2,0(r16)
1000e754:	80c00215 	stw	r3,8(r16)
1000e758:	9005883a 	mov	r2,r18
1000e75c:	003f7906 	br	1000e544 <__alt_data_end+0xf800e544>
1000e760:	e009883a 	mov	r4,fp
1000e764:	01400284 	movi	r5,10
1000e768:	900d883a 	mov	r6,r18
1000e76c:	000f4100 	call	1000f410 <memchr>
1000e770:	10003826 	beq	r2,zero,1000e854 <__sfvwrite_r+0x498>
1000e774:	10800044 	addi	r2,r2,1
1000e778:	1729c83a 	sub	r20,r2,fp
1000e77c:	02000044 	movi	r8,1
1000e780:	003f8f06 	br	1000e5c0 <__alt_data_end+0xf800e5c0>
1000e784:	80800517 	ldw	r2,20(r16)
1000e788:	81400417 	ldw	r5,16(r16)
1000e78c:	87000017 	ldw	fp,0(r16)
1000e790:	10a9883a 	add	r20,r2,r2
1000e794:	a085883a 	add	r2,r20,r2
1000e798:	1028d7fa 	srli	r20,r2,31
1000e79c:	e179c83a 	sub	fp,fp,r5
1000e7a0:	e1000044 	addi	r4,fp,1
1000e7a4:	a085883a 	add	r2,r20,r2
1000e7a8:	1029d07a 	srai	r20,r2,1
1000e7ac:	2485883a 	add	r2,r4,r18
1000e7b0:	a00d883a 	mov	r6,r20
1000e7b4:	a080022e 	bgeu	r20,r2,1000e7c0 <__sfvwrite_r+0x404>
1000e7b8:	1029883a 	mov	r20,r2
1000e7bc:	100d883a 	mov	r6,r2
1000e7c0:	18c1000c 	andi	r3,r3,1024
1000e7c4:	a809883a 	mov	r4,r21
1000e7c8:	183f6a26 	beq	r3,zero,1000e574 <__alt_data_end+0xf800e574>
1000e7cc:	300b883a 	mov	r5,r6
1000e7d0:	000ec680 	call	1000ec68 <_malloc_r>
1000e7d4:	102d883a 	mov	r22,r2
1000e7d8:	103f6c26 	beq	r2,zero,1000e58c <__alt_data_end+0xf800e58c>
1000e7dc:	81400417 	ldw	r5,16(r16)
1000e7e0:	1009883a 	mov	r4,r2
1000e7e4:	e00d883a 	mov	r6,fp
1000e7e8:	0009a7c0 	call	10009a7c <memcpy>
1000e7ec:	8080030b 	ldhu	r2,12(r16)
1000e7f0:	00fedfc4 	movi	r3,-1153
1000e7f4:	10c4703a 	and	r2,r2,r3
1000e7f8:	10802014 	ori	r2,r2,128
1000e7fc:	8080030d 	sth	r2,12(r16)
1000e800:	b709883a 	add	r4,r22,fp
1000e804:	a707c83a 	sub	r3,r20,fp
1000e808:	85800415 	stw	r22,16(r16)
1000e80c:	85000515 	stw	r20,20(r16)
1000e810:	81000015 	stw	r4,0(r16)
1000e814:	9039883a 	mov	fp,r18
1000e818:	80c00215 	stw	r3,8(r16)
1000e81c:	9029883a 	mov	r20,r18
1000e820:	902d883a 	mov	r22,r18
1000e824:	003f3d06 	br	1000e51c <__alt_data_end+0xf800e51c>
1000e828:	b80b883a 	mov	r5,r23
1000e82c:	a00d883a 	mov	r6,r20
1000e830:	000f4f80 	call	1000f4f8 <memmove>
1000e834:	80800017 	ldw	r2,0(r16)
1000e838:	a809883a 	mov	r4,r21
1000e83c:	800b883a 	mov	r5,r16
1000e840:	1505883a 	add	r2,r2,r20
1000e844:	80800015 	stw	r2,0(r16)
1000e848:	000d99c0 	call	1000d99c <_fflush_r>
1000e84c:	103fa526 	beq	r2,zero,1000e6e4 <__alt_data_end+0xf800e6e4>
1000e850:	003f5006 	br	1000e594 <__alt_data_end+0xf800e594>
1000e854:	95000044 	addi	r20,r18,1
1000e858:	02000044 	movi	r8,1
1000e85c:	003f5806 	br	1000e5c0 <__alt_data_end+0xf800e5c0>

1000e860 <_fwalk>:
1000e860:	defff804 	addi	sp,sp,-32
1000e864:	dd400515 	stw	r21,20(sp)
1000e868:	2540b804 	addi	r21,r4,736
1000e86c:	dd800615 	stw	r22,24(sp)
1000e870:	dd000415 	stw	r20,16(sp)
1000e874:	dfc00715 	stw	ra,28(sp)
1000e878:	dcc00315 	stw	r19,12(sp)
1000e87c:	dc800215 	stw	r18,8(sp)
1000e880:	dc400115 	stw	r17,4(sp)
1000e884:	dc000015 	stw	r16,0(sp)
1000e888:	2829883a 	mov	r20,r5
1000e88c:	002d883a 	mov	r22,zero
1000e890:	000df680 	call	1000df68 <__sfp_lock_acquire>
1000e894:	a8001426 	beq	r21,zero,1000e8e8 <_fwalk+0x88>
1000e898:	04ffffc4 	movi	r19,-1
1000e89c:	ac400117 	ldw	r17,4(r21)
1000e8a0:	ac800217 	ldw	r18,8(r21)
1000e8a4:	8c7fffc4 	addi	r17,r17,-1
1000e8a8:	88000d16 	blt	r17,zero,1000e8e0 <_fwalk+0x80>
1000e8ac:	94000304 	addi	r16,r18,12
1000e8b0:	94800384 	addi	r18,r18,14
1000e8b4:	80c0000f 	ldh	r3,0(r16)
1000e8b8:	8c7fffc4 	addi	r17,r17,-1
1000e8bc:	813ffd04 	addi	r4,r16,-12
1000e8c0:	18000426 	beq	r3,zero,1000e8d4 <_fwalk+0x74>
1000e8c4:	90c0000f 	ldh	r3,0(r18)
1000e8c8:	1cc00226 	beq	r3,r19,1000e8d4 <_fwalk+0x74>
1000e8cc:	a03ee83a 	callr	r20
1000e8d0:	b0acb03a 	or	r22,r22,r2
1000e8d4:	84001a04 	addi	r16,r16,104
1000e8d8:	94801a04 	addi	r18,r18,104
1000e8dc:	8cfff51e 	bne	r17,r19,1000e8b4 <__alt_data_end+0xf800e8b4>
1000e8e0:	ad400017 	ldw	r21,0(r21)
1000e8e4:	a83fed1e 	bne	r21,zero,1000e89c <__alt_data_end+0xf800e89c>
1000e8e8:	000df6c0 	call	1000df6c <__sfp_lock_release>
1000e8ec:	b005883a 	mov	r2,r22
1000e8f0:	dfc00717 	ldw	ra,28(sp)
1000e8f4:	dd800617 	ldw	r22,24(sp)
1000e8f8:	dd400517 	ldw	r21,20(sp)
1000e8fc:	dd000417 	ldw	r20,16(sp)
1000e900:	dcc00317 	ldw	r19,12(sp)
1000e904:	dc800217 	ldw	r18,8(sp)
1000e908:	dc400117 	ldw	r17,4(sp)
1000e90c:	dc000017 	ldw	r16,0(sp)
1000e910:	dec00804 	addi	sp,sp,32
1000e914:	f800283a 	ret

1000e918 <_fwalk_reent>:
1000e918:	defff804 	addi	sp,sp,-32
1000e91c:	dd400515 	stw	r21,20(sp)
1000e920:	2540b804 	addi	r21,r4,736
1000e924:	dd800615 	stw	r22,24(sp)
1000e928:	dd000415 	stw	r20,16(sp)
1000e92c:	dcc00315 	stw	r19,12(sp)
1000e930:	dfc00715 	stw	ra,28(sp)
1000e934:	dc800215 	stw	r18,8(sp)
1000e938:	dc400115 	stw	r17,4(sp)
1000e93c:	dc000015 	stw	r16,0(sp)
1000e940:	2027883a 	mov	r19,r4
1000e944:	2829883a 	mov	r20,r5
1000e948:	002d883a 	mov	r22,zero
1000e94c:	000df680 	call	1000df68 <__sfp_lock_acquire>
1000e950:	a8001326 	beq	r21,zero,1000e9a0 <_fwalk_reent+0x88>
1000e954:	04bfffc4 	movi	r18,-1
1000e958:	ac400117 	ldw	r17,4(r21)
1000e95c:	ac000217 	ldw	r16,8(r21)
1000e960:	8c7fffc4 	addi	r17,r17,-1
1000e964:	88000c16 	blt	r17,zero,1000e998 <_fwalk_reent+0x80>
1000e968:	84000304 	addi	r16,r16,12
1000e96c:	80c0000f 	ldh	r3,0(r16)
1000e970:	8c7fffc4 	addi	r17,r17,-1
1000e974:	817ffd04 	addi	r5,r16,-12
1000e978:	18000526 	beq	r3,zero,1000e990 <_fwalk_reent+0x78>
1000e97c:	80c0008f 	ldh	r3,2(r16)
1000e980:	9809883a 	mov	r4,r19
1000e984:	1c800226 	beq	r3,r18,1000e990 <_fwalk_reent+0x78>
1000e988:	a03ee83a 	callr	r20
1000e98c:	b0acb03a 	or	r22,r22,r2
1000e990:	84001a04 	addi	r16,r16,104
1000e994:	8cbff51e 	bne	r17,r18,1000e96c <__alt_data_end+0xf800e96c>
1000e998:	ad400017 	ldw	r21,0(r21)
1000e99c:	a83fee1e 	bne	r21,zero,1000e958 <__alt_data_end+0xf800e958>
1000e9a0:	000df6c0 	call	1000df6c <__sfp_lock_release>
1000e9a4:	b005883a 	mov	r2,r22
1000e9a8:	dfc00717 	ldw	ra,28(sp)
1000e9ac:	dd800617 	ldw	r22,24(sp)
1000e9b0:	dd400517 	ldw	r21,20(sp)
1000e9b4:	dd000417 	ldw	r20,16(sp)
1000e9b8:	dcc00317 	ldw	r19,12(sp)
1000e9bc:	dc800217 	ldw	r18,8(sp)
1000e9c0:	dc400117 	ldw	r17,4(sp)
1000e9c4:	dc000017 	ldw	r16,0(sp)
1000e9c8:	dec00804 	addi	sp,sp,32
1000e9cc:	f800283a 	ret

1000e9d0 <_setlocale_r>:
1000e9d0:	30001b26 	beq	r6,zero,1000ea40 <_setlocale_r+0x70>
1000e9d4:	014400b4 	movhi	r5,4098
1000e9d8:	defffe04 	addi	sp,sp,-8
1000e9dc:	29677d04 	addi	r5,r5,-25100
1000e9e0:	3009883a 	mov	r4,r6
1000e9e4:	dc000015 	stw	r16,0(sp)
1000e9e8:	dfc00115 	stw	ra,4(sp)
1000e9ec:	3021883a 	mov	r16,r6
1000e9f0:	0010f640 	call	10010f64 <strcmp>
1000e9f4:	1000061e 	bne	r2,zero,1000ea10 <_setlocale_r+0x40>
1000e9f8:	008400b4 	movhi	r2,4098
1000e9fc:	10a77c04 	addi	r2,r2,-25104
1000ea00:	dfc00117 	ldw	ra,4(sp)
1000ea04:	dc000017 	ldw	r16,0(sp)
1000ea08:	dec00204 	addi	sp,sp,8
1000ea0c:	f800283a 	ret
1000ea10:	014400b4 	movhi	r5,4098
1000ea14:	29677c04 	addi	r5,r5,-25104
1000ea18:	8009883a 	mov	r4,r16
1000ea1c:	0010f640 	call	10010f64 <strcmp>
1000ea20:	103ff526 	beq	r2,zero,1000e9f8 <__alt_data_end+0xf800e9f8>
1000ea24:	014400b4 	movhi	r5,4098
1000ea28:	29676704 	addi	r5,r5,-25188
1000ea2c:	8009883a 	mov	r4,r16
1000ea30:	0010f640 	call	10010f64 <strcmp>
1000ea34:	103ff026 	beq	r2,zero,1000e9f8 <__alt_data_end+0xf800e9f8>
1000ea38:	0005883a 	mov	r2,zero
1000ea3c:	003ff006 	br	1000ea00 <__alt_data_end+0xf800ea00>
1000ea40:	008400b4 	movhi	r2,4098
1000ea44:	10a77c04 	addi	r2,r2,-25104
1000ea48:	f800283a 	ret

1000ea4c <__locale_charset>:
1000ea4c:	008400b4 	movhi	r2,4098
1000ea50:	10a8ef04 	addi	r2,r2,-23620
1000ea54:	f800283a 	ret

1000ea58 <__locale_mb_cur_max>:
1000ea58:	008400b4 	movhi	r2,4098
1000ea5c:	10ae8b04 	addi	r2,r2,-17876
1000ea60:	10800017 	ldw	r2,0(r2)
1000ea64:	f800283a 	ret

1000ea68 <__locale_msgcharset>:
1000ea68:	008400b4 	movhi	r2,4098
1000ea6c:	10a8e704 	addi	r2,r2,-23652
1000ea70:	f800283a 	ret

1000ea74 <__locale_cjk_lang>:
1000ea74:	0005883a 	mov	r2,zero
1000ea78:	f800283a 	ret

1000ea7c <_localeconv_r>:
1000ea7c:	008400b4 	movhi	r2,4098
1000ea80:	10a8f704 	addi	r2,r2,-23588
1000ea84:	f800283a 	ret

1000ea88 <setlocale>:
1000ea88:	00c400b4 	movhi	r3,4098
1000ea8c:	18ee8a04 	addi	r3,r3,-17880
1000ea90:	2005883a 	mov	r2,r4
1000ea94:	19000017 	ldw	r4,0(r3)
1000ea98:	280d883a 	mov	r6,r5
1000ea9c:	100b883a 	mov	r5,r2
1000eaa0:	000e9d01 	jmpi	1000e9d0 <_setlocale_r>

1000eaa4 <localeconv>:
1000eaa4:	008400b4 	movhi	r2,4098
1000eaa8:	10a8f704 	addi	r2,r2,-23588
1000eaac:	f800283a 	ret

1000eab0 <__smakebuf_r>:
1000eab0:	2880030b 	ldhu	r2,12(r5)
1000eab4:	10c0008c 	andi	r3,r2,2
1000eab8:	1800401e 	bne	r3,zero,1000ebbc <__smakebuf_r+0x10c>
1000eabc:	deffec04 	addi	sp,sp,-80
1000eac0:	dc000f15 	stw	r16,60(sp)
1000eac4:	2821883a 	mov	r16,r5
1000eac8:	2940038f 	ldh	r5,14(r5)
1000eacc:	dc401015 	stw	r17,64(sp)
1000ead0:	dfc01315 	stw	ra,76(sp)
1000ead4:	dcc01215 	stw	r19,72(sp)
1000ead8:	dc801115 	stw	r18,68(sp)
1000eadc:	2023883a 	mov	r17,r4
1000eae0:	28001b16 	blt	r5,zero,1000eb50 <__smakebuf_r+0xa0>
1000eae4:	d80d883a 	mov	r6,sp
1000eae8:	00129dc0 	call	100129dc <_fstat_r>
1000eaec:	10001716 	blt	r2,zero,1000eb4c <__smakebuf_r+0x9c>
1000eaf0:	d8800117 	ldw	r2,4(sp)
1000eaf4:	00e00014 	movui	r3,32768
1000eaf8:	10bc000c 	andi	r2,r2,61440
1000eafc:	10c03726 	beq	r2,r3,1000ebdc <__smakebuf_r+0x12c>
1000eb00:	80c0030b 	ldhu	r3,12(r16)
1000eb04:	18c20014 	ori	r3,r3,2048
1000eb08:	80c0030d 	sth	r3,12(r16)
1000eb0c:	00c80004 	movi	r3,8192
1000eb10:	10c03c1e 	bne	r2,r3,1000ec04 <__smakebuf_r+0x154>
1000eb14:	8140038f 	ldh	r5,14(r16)
1000eb18:	8809883a 	mov	r4,r17
1000eb1c:	0012a340 	call	10012a34 <_isatty_r>
1000eb20:	10004e26 	beq	r2,zero,1000ec5c <__smakebuf_r+0x1ac>
1000eb24:	8080030b 	ldhu	r2,12(r16)
1000eb28:	04c00044 	movi	r19,1
1000eb2c:	80c010c4 	addi	r3,r16,67
1000eb30:	14c4b03a 	or	r2,r2,r19
1000eb34:	8080030d 	sth	r2,12(r16)
1000eb38:	80c00015 	stw	r3,0(r16)
1000eb3c:	80c00415 	stw	r3,16(r16)
1000eb40:	84c00515 	stw	r19,20(r16)
1000eb44:	04810004 	movi	r18,1024
1000eb48:	00000706 	br	1000eb68 <__smakebuf_r+0xb8>
1000eb4c:	8080030b 	ldhu	r2,12(r16)
1000eb50:	10c0200c 	andi	r3,r2,128
1000eb54:	18001f1e 	bne	r3,zero,1000ebd4 <__smakebuf_r+0x124>
1000eb58:	04810004 	movi	r18,1024
1000eb5c:	10820014 	ori	r2,r2,2048
1000eb60:	8080030d 	sth	r2,12(r16)
1000eb64:	0027883a 	mov	r19,zero
1000eb68:	8809883a 	mov	r4,r17
1000eb6c:	900b883a 	mov	r5,r18
1000eb70:	000ec680 	call	1000ec68 <_malloc_r>
1000eb74:	10002e26 	beq	r2,zero,1000ec30 <__smakebuf_r+0x180>
1000eb78:	80c0030b 	ldhu	r3,12(r16)
1000eb7c:	01040074 	movhi	r4,4097
1000eb80:	21370104 	addi	r4,r4,-9212
1000eb84:	89000f15 	stw	r4,60(r17)
1000eb88:	18c02014 	ori	r3,r3,128
1000eb8c:	80c0030d 	sth	r3,12(r16)
1000eb90:	80800015 	stw	r2,0(r16)
1000eb94:	80800415 	stw	r2,16(r16)
1000eb98:	84800515 	stw	r18,20(r16)
1000eb9c:	98001c1e 	bne	r19,zero,1000ec10 <__smakebuf_r+0x160>
1000eba0:	dfc01317 	ldw	ra,76(sp)
1000eba4:	dcc01217 	ldw	r19,72(sp)
1000eba8:	dc801117 	ldw	r18,68(sp)
1000ebac:	dc401017 	ldw	r17,64(sp)
1000ebb0:	dc000f17 	ldw	r16,60(sp)
1000ebb4:	dec01404 	addi	sp,sp,80
1000ebb8:	f800283a 	ret
1000ebbc:	288010c4 	addi	r2,r5,67
1000ebc0:	28800015 	stw	r2,0(r5)
1000ebc4:	28800415 	stw	r2,16(r5)
1000ebc8:	00800044 	movi	r2,1
1000ebcc:	28800515 	stw	r2,20(r5)
1000ebd0:	f800283a 	ret
1000ebd4:	04801004 	movi	r18,64
1000ebd8:	003fe006 	br	1000eb5c <__alt_data_end+0xf800eb5c>
1000ebdc:	81000a17 	ldw	r4,40(r16)
1000ebe0:	00c40074 	movhi	r3,4097
1000ebe4:	18c3c004 	addi	r3,r3,3840
1000ebe8:	20ffc51e 	bne	r4,r3,1000eb00 <__alt_data_end+0xf800eb00>
1000ebec:	80c0030b 	ldhu	r3,12(r16)
1000ebf0:	01010004 	movi	r4,1024
1000ebf4:	81001315 	stw	r4,76(r16)
1000ebf8:	1906b03a 	or	r3,r3,r4
1000ebfc:	80c0030d 	sth	r3,12(r16)
1000ec00:	003fc206 	br	1000eb0c <__alt_data_end+0xf800eb0c>
1000ec04:	0027883a 	mov	r19,zero
1000ec08:	04810004 	movi	r18,1024
1000ec0c:	003fd606 	br	1000eb68 <__alt_data_end+0xf800eb68>
1000ec10:	8140038f 	ldh	r5,14(r16)
1000ec14:	8809883a 	mov	r4,r17
1000ec18:	0012a340 	call	10012a34 <_isatty_r>
1000ec1c:	103fe026 	beq	r2,zero,1000eba0 <__alt_data_end+0xf800eba0>
1000ec20:	8080030b 	ldhu	r2,12(r16)
1000ec24:	10800054 	ori	r2,r2,1
1000ec28:	8080030d 	sth	r2,12(r16)
1000ec2c:	003fdc06 	br	1000eba0 <__alt_data_end+0xf800eba0>
1000ec30:	8080030b 	ldhu	r2,12(r16)
1000ec34:	10c0800c 	andi	r3,r2,512
1000ec38:	183fd91e 	bne	r3,zero,1000eba0 <__alt_data_end+0xf800eba0>
1000ec3c:	10800094 	ori	r2,r2,2
1000ec40:	80c010c4 	addi	r3,r16,67
1000ec44:	8080030d 	sth	r2,12(r16)
1000ec48:	00800044 	movi	r2,1
1000ec4c:	80c00015 	stw	r3,0(r16)
1000ec50:	80c00415 	stw	r3,16(r16)
1000ec54:	80800515 	stw	r2,20(r16)
1000ec58:	003fd106 	br	1000eba0 <__alt_data_end+0xf800eba0>
1000ec5c:	04c00044 	movi	r19,1
1000ec60:	04810004 	movi	r18,1024
1000ec64:	003fc006 	br	1000eb68 <__alt_data_end+0xf800eb68>

1000ec68 <_malloc_r>:
1000ec68:	defff504 	addi	sp,sp,-44
1000ec6c:	dc800315 	stw	r18,12(sp)
1000ec70:	dfc00a15 	stw	ra,40(sp)
1000ec74:	df000915 	stw	fp,36(sp)
1000ec78:	ddc00815 	stw	r23,32(sp)
1000ec7c:	dd800715 	stw	r22,28(sp)
1000ec80:	dd400615 	stw	r21,24(sp)
1000ec84:	dd000515 	stw	r20,20(sp)
1000ec88:	dcc00415 	stw	r19,16(sp)
1000ec8c:	dc400215 	stw	r17,8(sp)
1000ec90:	dc000115 	stw	r16,4(sp)
1000ec94:	288002c4 	addi	r2,r5,11
1000ec98:	00c00584 	movi	r3,22
1000ec9c:	2025883a 	mov	r18,r4
1000eca0:	18802a2e 	bgeu	r3,r2,1000ed4c <_malloc_r+0xe4>
1000eca4:	047ffe04 	movi	r17,-8
1000eca8:	1462703a 	and	r17,r2,r17
1000ecac:	88009e16 	blt	r17,zero,1000ef28 <_malloc_r+0x2c0>
1000ecb0:	89409d36 	bltu	r17,r5,1000ef28 <_malloc_r+0x2c0>
1000ecb4:	001585c0 	call	1001585c <__malloc_lock>
1000ecb8:	00807dc4 	movi	r2,503
1000ecbc:	14402736 	bltu	r2,r17,1000ed5c <_malloc_r+0xf4>
1000ecc0:	8806d0fa 	srli	r3,r17,3
1000ecc4:	04c400b4 	movhi	r19,4098
1000ecc8:	9ce90504 	addi	r19,r19,-23532
1000eccc:	18c5883a 	add	r2,r3,r3
1000ecd0:	1085883a 	add	r2,r2,r2
1000ecd4:	1085883a 	add	r2,r2,r2
1000ecd8:	9885883a 	add	r2,r19,r2
1000ecdc:	14000317 	ldw	r16,12(r2)
1000ece0:	80814a26 	beq	r16,r2,1000f20c <_malloc_r+0x5a4>
1000ece4:	80c00117 	ldw	r3,4(r16)
1000ece8:	81000317 	ldw	r4,12(r16)
1000ecec:	00bfff04 	movi	r2,-4
1000ecf0:	1884703a 	and	r2,r3,r2
1000ecf4:	81400217 	ldw	r5,8(r16)
1000ecf8:	8085883a 	add	r2,r16,r2
1000ecfc:	10c00117 	ldw	r3,4(r2)
1000ed00:	29000315 	stw	r4,12(r5)
1000ed04:	21400215 	stw	r5,8(r4)
1000ed08:	18c00054 	ori	r3,r3,1
1000ed0c:	10c00115 	stw	r3,4(r2)
1000ed10:	9009883a 	mov	r4,r18
1000ed14:	00158800 	call	10015880 <__malloc_unlock>
1000ed18:	80800204 	addi	r2,r16,8
1000ed1c:	dfc00a17 	ldw	ra,40(sp)
1000ed20:	df000917 	ldw	fp,36(sp)
1000ed24:	ddc00817 	ldw	r23,32(sp)
1000ed28:	dd800717 	ldw	r22,28(sp)
1000ed2c:	dd400617 	ldw	r21,24(sp)
1000ed30:	dd000517 	ldw	r20,20(sp)
1000ed34:	dcc00417 	ldw	r19,16(sp)
1000ed38:	dc800317 	ldw	r18,12(sp)
1000ed3c:	dc400217 	ldw	r17,8(sp)
1000ed40:	dc000117 	ldw	r16,4(sp)
1000ed44:	dec00b04 	addi	sp,sp,44
1000ed48:	f800283a 	ret
1000ed4c:	04400404 	movi	r17,16
1000ed50:	89407536 	bltu	r17,r5,1000ef28 <_malloc_r+0x2c0>
1000ed54:	001585c0 	call	1001585c <__malloc_lock>
1000ed58:	003fd906 	br	1000ecc0 <__alt_data_end+0xf800ecc0>
1000ed5c:	8806d27a 	srli	r3,r17,9
1000ed60:	18007526 	beq	r3,zero,1000ef38 <_malloc_r+0x2d0>
1000ed64:	00800104 	movi	r2,4
1000ed68:	10c0ef36 	bltu	r2,r3,1000f128 <_malloc_r+0x4c0>
1000ed6c:	8806d1ba 	srli	r3,r17,6
1000ed70:	19c00e04 	addi	r7,r3,56
1000ed74:	39cb883a 	add	r5,r7,r7
1000ed78:	04c400b4 	movhi	r19,4098
1000ed7c:	294b883a 	add	r5,r5,r5
1000ed80:	9ce90504 	addi	r19,r19,-23532
1000ed84:	294b883a 	add	r5,r5,r5
1000ed88:	994b883a 	add	r5,r19,r5
1000ed8c:	2c000317 	ldw	r16,12(r5)
1000ed90:	2c000e26 	beq	r5,r16,1000edcc <_malloc_r+0x164>
1000ed94:	80800117 	ldw	r2,4(r16)
1000ed98:	01bfff04 	movi	r6,-4
1000ed9c:	010003c4 	movi	r4,15
1000eda0:	1184703a 	and	r2,r2,r6
1000eda4:	1447c83a 	sub	r3,r2,r17
1000eda8:	20c00716 	blt	r4,r3,1000edc8 <_malloc_r+0x160>
1000edac:	1800650e 	bge	r3,zero,1000ef44 <_malloc_r+0x2dc>
1000edb0:	84000317 	ldw	r16,12(r16)
1000edb4:	2c000526 	beq	r5,r16,1000edcc <_malloc_r+0x164>
1000edb8:	80800117 	ldw	r2,4(r16)
1000edbc:	1184703a 	and	r2,r2,r6
1000edc0:	1447c83a 	sub	r3,r2,r17
1000edc4:	20fff90e 	bge	r4,r3,1000edac <__alt_data_end+0xf800edac>
1000edc8:	39ffffc4 	addi	r7,r7,-1
1000edcc:	38c00044 	addi	r3,r7,1
1000edd0:	018400b4 	movhi	r6,4098
1000edd4:	9c000417 	ldw	r16,16(r19)
1000edd8:	31a90504 	addi	r6,r6,-23532
1000eddc:	32400204 	addi	r9,r6,8
1000ede0:	82410326 	beq	r16,r9,1000f1f0 <_malloc_r+0x588>
1000ede4:	81000117 	ldw	r4,4(r16)
1000ede8:	00bfff04 	movi	r2,-4
1000edec:	208e703a 	and	r7,r4,r2
1000edf0:	3c45c83a 	sub	r2,r7,r17
1000edf4:	010003c4 	movi	r4,15
1000edf8:	2080ee16 	blt	r4,r2,1000f1b4 <_malloc_r+0x54c>
1000edfc:	32400515 	stw	r9,20(r6)
1000ee00:	32400415 	stw	r9,16(r6)
1000ee04:	1000510e 	bge	r2,zero,1000ef4c <_malloc_r+0x2e4>
1000ee08:	00807fc4 	movi	r2,511
1000ee0c:	11c0ce36 	bltu	r2,r7,1000f148 <_malloc_r+0x4e0>
1000ee10:	3808d0fa 	srli	r4,r7,3
1000ee14:	01c00044 	movi	r7,1
1000ee18:	30800117 	ldw	r2,4(r6)
1000ee1c:	210b883a 	add	r5,r4,r4
1000ee20:	294b883a 	add	r5,r5,r5
1000ee24:	2009d0ba 	srai	r4,r4,2
1000ee28:	294b883a 	add	r5,r5,r5
1000ee2c:	298b883a 	add	r5,r5,r6
1000ee30:	2a000217 	ldw	r8,8(r5)
1000ee34:	3908983a 	sll	r4,r7,r4
1000ee38:	81400315 	stw	r5,12(r16)
1000ee3c:	82000215 	stw	r8,8(r16)
1000ee40:	2088b03a 	or	r4,r4,r2
1000ee44:	2c000215 	stw	r16,8(r5)
1000ee48:	31000115 	stw	r4,4(r6)
1000ee4c:	44000315 	stw	r16,12(r8)
1000ee50:	1805d0ba 	srai	r2,r3,2
1000ee54:	01400044 	movi	r5,1
1000ee58:	288a983a 	sll	r5,r5,r2
1000ee5c:	21404336 	bltu	r4,r5,1000ef6c <_malloc_r+0x304>
1000ee60:	2144703a 	and	r2,r4,r5
1000ee64:	10000a1e 	bne	r2,zero,1000ee90 <_malloc_r+0x228>
1000ee68:	00bfff04 	movi	r2,-4
1000ee6c:	294b883a 	add	r5,r5,r5
1000ee70:	1886703a 	and	r3,r3,r2
1000ee74:	2144703a 	and	r2,r4,r5
1000ee78:	18c00104 	addi	r3,r3,4
1000ee7c:	1000041e 	bne	r2,zero,1000ee90 <_malloc_r+0x228>
1000ee80:	294b883a 	add	r5,r5,r5
1000ee84:	2144703a 	and	r2,r4,r5
1000ee88:	18c00104 	addi	r3,r3,4
1000ee8c:	103ffc26 	beq	r2,zero,1000ee80 <__alt_data_end+0xf800ee80>
1000ee90:	023fff04 	movi	r8,-4
1000ee94:	01c003c4 	movi	r7,15
1000ee98:	18c5883a 	add	r2,r3,r3
1000ee9c:	1085883a 	add	r2,r2,r2
1000eea0:	1085883a 	add	r2,r2,r2
1000eea4:	9895883a 	add	r10,r19,r2
1000eea8:	52c00304 	addi	r11,r10,12
1000eeac:	1819883a 	mov	r12,r3
1000eeb0:	5c000017 	ldw	r16,0(r11)
1000eeb4:	59bffd04 	addi	r6,r11,-12
1000eeb8:	8180041e 	bne	r16,r6,1000eecc <_malloc_r+0x264>
1000eebc:	0000ce06 	br	1000f1f8 <_malloc_r+0x590>
1000eec0:	2000d70e 	bge	r4,zero,1000f220 <_malloc_r+0x5b8>
1000eec4:	84000317 	ldw	r16,12(r16)
1000eec8:	8180cb26 	beq	r16,r6,1000f1f8 <_malloc_r+0x590>
1000eecc:	80800117 	ldw	r2,4(r16)
1000eed0:	1204703a 	and	r2,r2,r8
1000eed4:	1449c83a 	sub	r4,r2,r17
1000eed8:	393ff90e 	bge	r7,r4,1000eec0 <__alt_data_end+0xf800eec0>
1000eedc:	80800317 	ldw	r2,12(r16)
1000eee0:	80c00217 	ldw	r3,8(r16)
1000eee4:	89400054 	ori	r5,r17,1
1000eee8:	81400115 	stw	r5,4(r16)
1000eeec:	18800315 	stw	r2,12(r3)
1000eef0:	10c00215 	stw	r3,8(r2)
1000eef4:	8463883a 	add	r17,r16,r17
1000eef8:	9c400515 	stw	r17,20(r19)
1000eefc:	9c400415 	stw	r17,16(r19)
1000ef00:	20800054 	ori	r2,r4,1
1000ef04:	88800115 	stw	r2,4(r17)
1000ef08:	8a400315 	stw	r9,12(r17)
1000ef0c:	8a400215 	stw	r9,8(r17)
1000ef10:	8923883a 	add	r17,r17,r4
1000ef14:	89000015 	stw	r4,0(r17)
1000ef18:	9009883a 	mov	r4,r18
1000ef1c:	00158800 	call	10015880 <__malloc_unlock>
1000ef20:	80800204 	addi	r2,r16,8
1000ef24:	003f7d06 	br	1000ed1c <__alt_data_end+0xf800ed1c>
1000ef28:	00800304 	movi	r2,12
1000ef2c:	90800015 	stw	r2,0(r18)
1000ef30:	0005883a 	mov	r2,zero
1000ef34:	003f7906 	br	1000ed1c <__alt_data_end+0xf800ed1c>
1000ef38:	01401f84 	movi	r5,126
1000ef3c:	01c00fc4 	movi	r7,63
1000ef40:	003f8d06 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000ef44:	81000317 	ldw	r4,12(r16)
1000ef48:	003f6a06 	br	1000ecf4 <__alt_data_end+0xf800ecf4>
1000ef4c:	81c5883a 	add	r2,r16,r7
1000ef50:	10c00117 	ldw	r3,4(r2)
1000ef54:	9009883a 	mov	r4,r18
1000ef58:	18c00054 	ori	r3,r3,1
1000ef5c:	10c00115 	stw	r3,4(r2)
1000ef60:	00158800 	call	10015880 <__malloc_unlock>
1000ef64:	80800204 	addi	r2,r16,8
1000ef68:	003f6c06 	br	1000ed1c <__alt_data_end+0xf800ed1c>
1000ef6c:	9c000217 	ldw	r16,8(r19)
1000ef70:	00bfff04 	movi	r2,-4
1000ef74:	85800117 	ldw	r22,4(r16)
1000ef78:	b0ac703a 	and	r22,r22,r2
1000ef7c:	b4400336 	bltu	r22,r17,1000ef8c <_malloc_r+0x324>
1000ef80:	b445c83a 	sub	r2,r22,r17
1000ef84:	00c003c4 	movi	r3,15
1000ef88:	18805d16 	blt	r3,r2,1000f100 <_malloc_r+0x498>
1000ef8c:	05c400b4 	movhi	r23,4098
1000ef90:	008400b4 	movhi	r2,4098
1000ef94:	bdee8c04 	addi	r23,r23,-17872
1000ef98:	10b55a04 	addi	r2,r2,-10904
1000ef9c:	15400017 	ldw	r21,0(r2)
1000efa0:	b9000017 	ldw	r4,0(r23)
1000efa4:	00ffffc4 	movi	r3,-1
1000efa8:	858d883a 	add	r6,r16,r22
1000efac:	8d6b883a 	add	r21,r17,r21
1000efb0:	20c0e426 	beq	r4,r3,1000f344 <_malloc_r+0x6dc>
1000efb4:	ad4403c4 	addi	r21,r21,4111
1000efb8:	00fc0004 	movi	r3,-4096
1000efbc:	a8ea703a 	and	r21,r21,r3
1000efc0:	9009883a 	mov	r4,r18
1000efc4:	a80b883a 	mov	r5,r21
1000efc8:	d9800015 	stw	r6,0(sp)
1000efcc:	0010dd40 	call	10010dd4 <_sbrk_r>
1000efd0:	00ffffc4 	movi	r3,-1
1000efd4:	1029883a 	mov	r20,r2
1000efd8:	d9800017 	ldw	r6,0(sp)
1000efdc:	10c0a426 	beq	r2,r3,1000f270 <_malloc_r+0x608>
1000efe0:	1180a236 	bltu	r2,r6,1000f26c <_malloc_r+0x604>
1000efe4:	070400b4 	movhi	fp,4098
1000efe8:	e7356204 	addi	fp,fp,-10872
1000efec:	e0c00017 	ldw	r3,0(fp)
1000eff0:	a8c7883a 	add	r3,r21,r3
1000eff4:	e0c00015 	stw	r3,0(fp)
1000eff8:	3500da26 	beq	r6,r20,1000f364 <_malloc_r+0x6fc>
1000effc:	b9000017 	ldw	r4,0(r23)
1000f000:	00bfffc4 	movi	r2,-1
1000f004:	2080e426 	beq	r4,r2,1000f398 <_malloc_r+0x730>
1000f008:	a185c83a 	sub	r2,r20,r6
1000f00c:	1885883a 	add	r2,r3,r2
1000f010:	e0800015 	stw	r2,0(fp)
1000f014:	a0c001cc 	andi	r3,r20,7
1000f018:	1800b526 	beq	r3,zero,1000f2f0 <_malloc_r+0x688>
1000f01c:	a0e9c83a 	sub	r20,r20,r3
1000f020:	00840204 	movi	r2,4104
1000f024:	a5000204 	addi	r20,r20,8
1000f028:	10c7c83a 	sub	r3,r2,r3
1000f02c:	a545883a 	add	r2,r20,r21
1000f030:	1083ffcc 	andi	r2,r2,4095
1000f034:	18abc83a 	sub	r21,r3,r2
1000f038:	9009883a 	mov	r4,r18
1000f03c:	a80b883a 	mov	r5,r21
1000f040:	0010dd40 	call	10010dd4 <_sbrk_r>
1000f044:	00ffffc4 	movi	r3,-1
1000f048:	10c0d026 	beq	r2,r3,1000f38c <_malloc_r+0x724>
1000f04c:	1507c83a 	sub	r3,r2,r20
1000f050:	a8c7883a 	add	r3,r21,r3
1000f054:	18c00054 	ori	r3,r3,1
1000f058:	e0800017 	ldw	r2,0(fp)
1000f05c:	9d000215 	stw	r20,8(r19)
1000f060:	a0c00115 	stw	r3,4(r20)
1000f064:	a887883a 	add	r3,r21,r2
1000f068:	e0c00015 	stw	r3,0(fp)
1000f06c:	84c00e26 	beq	r16,r19,1000f0a8 <_malloc_r+0x440>
1000f070:	018003c4 	movi	r6,15
1000f074:	3580a02e 	bgeu	r6,r22,1000f2f8 <_malloc_r+0x690>
1000f078:	81400117 	ldw	r5,4(r16)
1000f07c:	013ffe04 	movi	r4,-8
1000f080:	b0bffd04 	addi	r2,r22,-12
1000f084:	1104703a 	and	r2,r2,r4
1000f088:	2900004c 	andi	r4,r5,1
1000f08c:	1108b03a 	or	r4,r2,r4
1000f090:	81000115 	stw	r4,4(r16)
1000f094:	01400144 	movi	r5,5
1000f098:	8089883a 	add	r4,r16,r2
1000f09c:	21400115 	stw	r5,4(r4)
1000f0a0:	21400215 	stw	r5,8(r4)
1000f0a4:	3080c036 	bltu	r6,r2,1000f3a8 <_malloc_r+0x740>
1000f0a8:	008400b4 	movhi	r2,4098
1000f0ac:	10b55904 	addi	r2,r2,-10908
1000f0b0:	11000017 	ldw	r4,0(r2)
1000f0b4:	20c0012e 	bgeu	r4,r3,1000f0bc <_malloc_r+0x454>
1000f0b8:	10c00015 	stw	r3,0(r2)
1000f0bc:	008400b4 	movhi	r2,4098
1000f0c0:	10b55804 	addi	r2,r2,-10912
1000f0c4:	11000017 	ldw	r4,0(r2)
1000f0c8:	9c000217 	ldw	r16,8(r19)
1000f0cc:	20c0012e 	bgeu	r4,r3,1000f0d4 <_malloc_r+0x46c>
1000f0d0:	10c00015 	stw	r3,0(r2)
1000f0d4:	80c00117 	ldw	r3,4(r16)
1000f0d8:	00bfff04 	movi	r2,-4
1000f0dc:	1886703a 	and	r3,r3,r2
1000f0e0:	1c45c83a 	sub	r2,r3,r17
1000f0e4:	1c400236 	bltu	r3,r17,1000f0f0 <_malloc_r+0x488>
1000f0e8:	00c003c4 	movi	r3,15
1000f0ec:	18800416 	blt	r3,r2,1000f100 <_malloc_r+0x498>
1000f0f0:	9009883a 	mov	r4,r18
1000f0f4:	00158800 	call	10015880 <__malloc_unlock>
1000f0f8:	0005883a 	mov	r2,zero
1000f0fc:	003f0706 	br	1000ed1c <__alt_data_end+0xf800ed1c>
1000f100:	88c00054 	ori	r3,r17,1
1000f104:	80c00115 	stw	r3,4(r16)
1000f108:	8463883a 	add	r17,r16,r17
1000f10c:	10800054 	ori	r2,r2,1
1000f110:	9c400215 	stw	r17,8(r19)
1000f114:	88800115 	stw	r2,4(r17)
1000f118:	9009883a 	mov	r4,r18
1000f11c:	00158800 	call	10015880 <__malloc_unlock>
1000f120:	80800204 	addi	r2,r16,8
1000f124:	003efd06 	br	1000ed1c <__alt_data_end+0xf800ed1c>
1000f128:	00800504 	movi	r2,20
1000f12c:	10c0482e 	bgeu	r2,r3,1000f250 <_malloc_r+0x5e8>
1000f130:	00801504 	movi	r2,84
1000f134:	10c06836 	bltu	r2,r3,1000f2d8 <_malloc_r+0x670>
1000f138:	8806d33a 	srli	r3,r17,12
1000f13c:	19c01b84 	addi	r7,r3,110
1000f140:	39cb883a 	add	r5,r7,r7
1000f144:	003f0c06 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f148:	3804d27a 	srli	r2,r7,9
1000f14c:	01000104 	movi	r4,4
1000f150:	2080422e 	bgeu	r4,r2,1000f25c <_malloc_r+0x5f4>
1000f154:	01000504 	movi	r4,20
1000f158:	20807c36 	bltu	r4,r2,1000f34c <_malloc_r+0x6e4>
1000f15c:	110016c4 	addi	r4,r2,91
1000f160:	210b883a 	add	r5,r4,r4
1000f164:	294b883a 	add	r5,r5,r5
1000f168:	294b883a 	add	r5,r5,r5
1000f16c:	994b883a 	add	r5,r19,r5
1000f170:	28800217 	ldw	r2,8(r5)
1000f174:	020400b4 	movhi	r8,4098
1000f178:	42290504 	addi	r8,r8,-23532
1000f17c:	11406326 	beq	r2,r5,1000f30c <_malloc_r+0x6a4>
1000f180:	01bfff04 	movi	r6,-4
1000f184:	11000117 	ldw	r4,4(r2)
1000f188:	2188703a 	and	r4,r4,r6
1000f18c:	3900022e 	bgeu	r7,r4,1000f198 <_malloc_r+0x530>
1000f190:	10800217 	ldw	r2,8(r2)
1000f194:	28bffb1e 	bne	r5,r2,1000f184 <__alt_data_end+0xf800f184>
1000f198:	11800317 	ldw	r6,12(r2)
1000f19c:	99000117 	ldw	r4,4(r19)
1000f1a0:	81800315 	stw	r6,12(r16)
1000f1a4:	80800215 	stw	r2,8(r16)
1000f1a8:	34000215 	stw	r16,8(r6)
1000f1ac:	14000315 	stw	r16,12(r2)
1000f1b0:	003f2706 	br	1000ee50 <__alt_data_end+0xf800ee50>
1000f1b4:	88c00054 	ori	r3,r17,1
1000f1b8:	80c00115 	stw	r3,4(r16)
1000f1bc:	8463883a 	add	r17,r16,r17
1000f1c0:	34400515 	stw	r17,20(r6)
1000f1c4:	34400415 	stw	r17,16(r6)
1000f1c8:	10c00054 	ori	r3,r2,1
1000f1cc:	8a400315 	stw	r9,12(r17)
1000f1d0:	8a400215 	stw	r9,8(r17)
1000f1d4:	88c00115 	stw	r3,4(r17)
1000f1d8:	88a3883a 	add	r17,r17,r2
1000f1dc:	88800015 	stw	r2,0(r17)
1000f1e0:	9009883a 	mov	r4,r18
1000f1e4:	00158800 	call	10015880 <__malloc_unlock>
1000f1e8:	80800204 	addi	r2,r16,8
1000f1ec:	003ecb06 	br	1000ed1c <__alt_data_end+0xf800ed1c>
1000f1f0:	31000117 	ldw	r4,4(r6)
1000f1f4:	003f1606 	br	1000ee50 <__alt_data_end+0xf800ee50>
1000f1f8:	63000044 	addi	r12,r12,1
1000f1fc:	608000cc 	andi	r2,r12,3
1000f200:	5ac00204 	addi	r11,r11,8
1000f204:	103f2a1e 	bne	r2,zero,1000eeb0 <__alt_data_end+0xf800eeb0>
1000f208:	00002106 	br	1000f290 <_malloc_r+0x628>
1000f20c:	80800204 	addi	r2,r16,8
1000f210:	84000517 	ldw	r16,20(r16)
1000f214:	143eb31e 	bne	r2,r16,1000ece4 <__alt_data_end+0xf800ece4>
1000f218:	18c00084 	addi	r3,r3,2
1000f21c:	003eec06 	br	1000edd0 <__alt_data_end+0xf800edd0>
1000f220:	8085883a 	add	r2,r16,r2
1000f224:	10c00117 	ldw	r3,4(r2)
1000f228:	81000317 	ldw	r4,12(r16)
1000f22c:	81400217 	ldw	r5,8(r16)
1000f230:	18c00054 	ori	r3,r3,1
1000f234:	10c00115 	stw	r3,4(r2)
1000f238:	29000315 	stw	r4,12(r5)
1000f23c:	21400215 	stw	r5,8(r4)
1000f240:	9009883a 	mov	r4,r18
1000f244:	00158800 	call	10015880 <__malloc_unlock>
1000f248:	80800204 	addi	r2,r16,8
1000f24c:	003eb306 	br	1000ed1c <__alt_data_end+0xf800ed1c>
1000f250:	19c016c4 	addi	r7,r3,91
1000f254:	39cb883a 	add	r5,r7,r7
1000f258:	003ec706 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f25c:	3804d1ba 	srli	r2,r7,6
1000f260:	11000e04 	addi	r4,r2,56
1000f264:	210b883a 	add	r5,r4,r4
1000f268:	003fbe06 	br	1000f164 <__alt_data_end+0xf800f164>
1000f26c:	84ff5d26 	beq	r16,r19,1000efe4 <__alt_data_end+0xf800efe4>
1000f270:	9c000217 	ldw	r16,8(r19)
1000f274:	00bfff04 	movi	r2,-4
1000f278:	80c00117 	ldw	r3,4(r16)
1000f27c:	1886703a 	and	r3,r3,r2
1000f280:	003f9706 	br	1000f0e0 <__alt_data_end+0xf800f0e0>
1000f284:	52800017 	ldw	r10,0(r10)
1000f288:	18ffffc4 	addi	r3,r3,-1
1000f28c:	50805c1e 	bne	r10,r2,1000f400 <_malloc_r+0x798>
1000f290:	190000cc 	andi	r4,r3,3
1000f294:	50bffe04 	addi	r2,r10,-8
1000f298:	203ffa1e 	bne	r4,zero,1000f284 <__alt_data_end+0xf800f284>
1000f29c:	98800117 	ldw	r2,4(r19)
1000f2a0:	0146303a 	nor	r3,zero,r5
1000f2a4:	1884703a 	and	r2,r3,r2
1000f2a8:	98800115 	stw	r2,4(r19)
1000f2ac:	294b883a 	add	r5,r5,r5
1000f2b0:	117f2e36 	bltu	r2,r5,1000ef6c <__alt_data_end+0xf800ef6c>
1000f2b4:	283f2d26 	beq	r5,zero,1000ef6c <__alt_data_end+0xf800ef6c>
1000f2b8:	1146703a 	and	r3,r2,r5
1000f2bc:	1800521e 	bne	r3,zero,1000f408 <_malloc_r+0x7a0>
1000f2c0:	6007883a 	mov	r3,r12
1000f2c4:	294b883a 	add	r5,r5,r5
1000f2c8:	1148703a 	and	r4,r2,r5
1000f2cc:	18c00104 	addi	r3,r3,4
1000f2d0:	203ffc26 	beq	r4,zero,1000f2c4 <__alt_data_end+0xf800f2c4>
1000f2d4:	003ef006 	br	1000ee98 <__alt_data_end+0xf800ee98>
1000f2d8:	00805504 	movi	r2,340
1000f2dc:	10c01336 	bltu	r2,r3,1000f32c <_malloc_r+0x6c4>
1000f2e0:	8806d3fa 	srli	r3,r17,15
1000f2e4:	19c01dc4 	addi	r7,r3,119
1000f2e8:	39cb883a 	add	r5,r7,r7
1000f2ec:	003ea206 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f2f0:	00c40004 	movi	r3,4096
1000f2f4:	003f4d06 	br	1000f02c <__alt_data_end+0xf800f02c>
1000f2f8:	00800044 	movi	r2,1
1000f2fc:	a0800115 	stw	r2,4(r20)
1000f300:	a021883a 	mov	r16,r20
1000f304:	0007883a 	mov	r3,zero
1000f308:	003f7506 	br	1000f0e0 <__alt_data_end+0xf800f0e0>
1000f30c:	200bd0ba 	srai	r5,r4,2
1000f310:	01800044 	movi	r6,1
1000f314:	41000117 	ldw	r4,4(r8)
1000f318:	314a983a 	sll	r5,r6,r5
1000f31c:	100d883a 	mov	r6,r2
1000f320:	2908b03a 	or	r4,r5,r4
1000f324:	41000115 	stw	r4,4(r8)
1000f328:	003f9d06 	br	1000f1a0 <__alt_data_end+0xf800f1a0>
1000f32c:	00815504 	movi	r2,1364
1000f330:	10c01336 	bltu	r2,r3,1000f380 <_malloc_r+0x718>
1000f334:	8806d4ba 	srli	r3,r17,18
1000f338:	19c01f04 	addi	r7,r3,124
1000f33c:	39cb883a 	add	r5,r7,r7
1000f340:	003e8d06 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f344:	ad400404 	addi	r21,r21,16
1000f348:	003f1d06 	br	1000efc0 <__alt_data_end+0xf800efc0>
1000f34c:	01001504 	movi	r4,84
1000f350:	20801c36 	bltu	r4,r2,1000f3c4 <_malloc_r+0x75c>
1000f354:	3804d33a 	srli	r2,r7,12
1000f358:	11001b84 	addi	r4,r2,110
1000f35c:	210b883a 	add	r5,r4,r4
1000f360:	003f8006 	br	1000f164 <__alt_data_end+0xf800f164>
1000f364:	3083ffcc 	andi	r2,r6,4095
1000f368:	103f241e 	bne	r2,zero,1000effc <__alt_data_end+0xf800effc>
1000f36c:	99000217 	ldw	r4,8(r19)
1000f370:	ad85883a 	add	r2,r21,r22
1000f374:	10800054 	ori	r2,r2,1
1000f378:	20800115 	stw	r2,4(r4)
1000f37c:	003f4a06 	br	1000f0a8 <__alt_data_end+0xf800f0a8>
1000f380:	01403f04 	movi	r5,252
1000f384:	01c01f84 	movi	r7,126
1000f388:	003e7b06 	br	1000ed78 <__alt_data_end+0xf800ed78>
1000f38c:	00c00044 	movi	r3,1
1000f390:	002b883a 	mov	r21,zero
1000f394:	003f3006 	br	1000f058 <__alt_data_end+0xf800f058>
1000f398:	008400b4 	movhi	r2,4098
1000f39c:	10ae8c04 	addi	r2,r2,-17872
1000f3a0:	15000015 	stw	r20,0(r2)
1000f3a4:	003f1b06 	br	1000f014 <__alt_data_end+0xf800f014>
1000f3a8:	9009883a 	mov	r4,r18
1000f3ac:	81400204 	addi	r5,r16,8
1000f3b0:	000e0cc0 	call	1000e0cc <_free_r>
1000f3b4:	008400b4 	movhi	r2,4098
1000f3b8:	10b56204 	addi	r2,r2,-10872
1000f3bc:	10c00017 	ldw	r3,0(r2)
1000f3c0:	003f3906 	br	1000f0a8 <__alt_data_end+0xf800f0a8>
1000f3c4:	01005504 	movi	r4,340
1000f3c8:	20800436 	bltu	r4,r2,1000f3dc <_malloc_r+0x774>
1000f3cc:	3804d3fa 	srli	r2,r7,15
1000f3d0:	11001dc4 	addi	r4,r2,119
1000f3d4:	210b883a 	add	r5,r4,r4
1000f3d8:	003f6206 	br	1000f164 <__alt_data_end+0xf800f164>
1000f3dc:	01015504 	movi	r4,1364
1000f3e0:	20800436 	bltu	r4,r2,1000f3f4 <_malloc_r+0x78c>
1000f3e4:	3804d4ba 	srli	r2,r7,18
1000f3e8:	11001f04 	addi	r4,r2,124
1000f3ec:	210b883a 	add	r5,r4,r4
1000f3f0:	003f5c06 	br	1000f164 <__alt_data_end+0xf800f164>
1000f3f4:	01403f04 	movi	r5,252
1000f3f8:	01001f84 	movi	r4,126
1000f3fc:	003f5906 	br	1000f164 <__alt_data_end+0xf800f164>
1000f400:	98800117 	ldw	r2,4(r19)
1000f404:	003fa906 	br	1000f2ac <__alt_data_end+0xf800f2ac>
1000f408:	6007883a 	mov	r3,r12
1000f40c:	003ea206 	br	1000ee98 <__alt_data_end+0xf800ee98>

1000f410 <memchr>:
1000f410:	208000cc 	andi	r2,r4,3
1000f414:	280f883a 	mov	r7,r5
1000f418:	10003526 	beq	r2,zero,1000f4f0 <memchr+0xe0>
1000f41c:	30bfffc4 	addi	r2,r6,-1
1000f420:	30001b26 	beq	r6,zero,1000f490 <memchr+0x80>
1000f424:	21800003 	ldbu	r6,0(r4)
1000f428:	28c03fcc 	andi	r3,r5,255
1000f42c:	30c01a26 	beq	r6,r3,1000f498 <memchr+0x88>
1000f430:	180d883a 	mov	r6,r3
1000f434:	00000406 	br	1000f448 <memchr+0x38>
1000f438:	10001526 	beq	r2,zero,1000f490 <memchr+0x80>
1000f43c:	20c00003 	ldbu	r3,0(r4)
1000f440:	10bfffc4 	addi	r2,r2,-1
1000f444:	19801426 	beq	r3,r6,1000f498 <memchr+0x88>
1000f448:	21000044 	addi	r4,r4,1
1000f44c:	20c000cc 	andi	r3,r4,3
1000f450:	183ff91e 	bne	r3,zero,1000f438 <__alt_data_end+0xf800f438>
1000f454:	024000c4 	movi	r9,3
1000f458:	48801136 	bltu	r9,r2,1000f4a0 <memchr+0x90>
1000f45c:	10000c26 	beq	r2,zero,1000f490 <memchr+0x80>
1000f460:	20c00003 	ldbu	r3,0(r4)
1000f464:	29403fcc 	andi	r5,r5,255
1000f468:	19400b26 	beq	r3,r5,1000f498 <memchr+0x88>
1000f46c:	20c00044 	addi	r3,r4,1
1000f470:	2085883a 	add	r2,r4,r2
1000f474:	39803fcc 	andi	r6,r7,255
1000f478:	00000306 	br	1000f488 <memchr+0x78>
1000f47c:	18c00044 	addi	r3,r3,1
1000f480:	197fffc3 	ldbu	r5,-1(r3)
1000f484:	29800426 	beq	r5,r6,1000f498 <memchr+0x88>
1000f488:	1809883a 	mov	r4,r3
1000f48c:	18bffb1e 	bne	r3,r2,1000f47c <__alt_data_end+0xf800f47c>
1000f490:	0005883a 	mov	r2,zero
1000f494:	f800283a 	ret
1000f498:	2005883a 	mov	r2,r4
1000f49c:	f800283a 	ret
1000f4a0:	28c03fcc 	andi	r3,r5,255
1000f4a4:	1810923a 	slli	r8,r3,8
1000f4a8:	02ffbff4 	movhi	r11,65279
1000f4ac:	02a02074 	movhi	r10,32897
1000f4b0:	40c6b03a 	or	r3,r8,r3
1000f4b4:	1810943a 	slli	r8,r3,16
1000f4b8:	5affbfc4 	addi	r11,r11,-257
1000f4bc:	52a02004 	addi	r10,r10,-32640
1000f4c0:	40d0b03a 	or	r8,r8,r3
1000f4c4:	20c00017 	ldw	r3,0(r4)
1000f4c8:	40c6f03a 	xor	r3,r8,r3
1000f4cc:	1acd883a 	add	r6,r3,r11
1000f4d0:	00c6303a 	nor	r3,zero,r3
1000f4d4:	30c6703a 	and	r3,r6,r3
1000f4d8:	1a86703a 	and	r3,r3,r10
1000f4dc:	183fdf1e 	bne	r3,zero,1000f45c <__alt_data_end+0xf800f45c>
1000f4e0:	10bfff04 	addi	r2,r2,-4
1000f4e4:	21000104 	addi	r4,r4,4
1000f4e8:	48bff636 	bltu	r9,r2,1000f4c4 <__alt_data_end+0xf800f4c4>
1000f4ec:	003fdb06 	br	1000f45c <__alt_data_end+0xf800f45c>
1000f4f0:	3005883a 	mov	r2,r6
1000f4f4:	003fd706 	br	1000f454 <__alt_data_end+0xf800f454>

1000f4f8 <memmove>:
1000f4f8:	2005883a 	mov	r2,r4
1000f4fc:	29000b2e 	bgeu	r5,r4,1000f52c <memmove+0x34>
1000f500:	298f883a 	add	r7,r5,r6
1000f504:	21c0092e 	bgeu	r4,r7,1000f52c <memmove+0x34>
1000f508:	2187883a 	add	r3,r4,r6
1000f50c:	198bc83a 	sub	r5,r3,r6
1000f510:	30004b26 	beq	r6,zero,1000f640 <memmove+0x148>
1000f514:	39ffffc4 	addi	r7,r7,-1
1000f518:	39000003 	ldbu	r4,0(r7)
1000f51c:	18ffffc4 	addi	r3,r3,-1
1000f520:	19000005 	stb	r4,0(r3)
1000f524:	197ffb1e 	bne	r3,r5,1000f514 <__alt_data_end+0xf800f514>
1000f528:	f800283a 	ret
1000f52c:	00c003c4 	movi	r3,15
1000f530:	1980412e 	bgeu	r3,r6,1000f638 <memmove+0x140>
1000f534:	1146b03a 	or	r3,r2,r5
1000f538:	18c000cc 	andi	r3,r3,3
1000f53c:	1800411e 	bne	r3,zero,1000f644 <memmove+0x14c>
1000f540:	33fffc04 	addi	r15,r6,-16
1000f544:	781ed13a 	srli	r15,r15,4
1000f548:	28c00104 	addi	r3,r5,4
1000f54c:	13400104 	addi	r13,r2,4
1000f550:	781c913a 	slli	r14,r15,4
1000f554:	2b000204 	addi	r12,r5,8
1000f558:	12c00204 	addi	r11,r2,8
1000f55c:	73800504 	addi	r14,r14,20
1000f560:	2a800304 	addi	r10,r5,12
1000f564:	12400304 	addi	r9,r2,12
1000f568:	2b9d883a 	add	r14,r5,r14
1000f56c:	2811883a 	mov	r8,r5
1000f570:	100f883a 	mov	r7,r2
1000f574:	41000017 	ldw	r4,0(r8)
1000f578:	39c00404 	addi	r7,r7,16
1000f57c:	18c00404 	addi	r3,r3,16
1000f580:	393ffc15 	stw	r4,-16(r7)
1000f584:	193ffc17 	ldw	r4,-16(r3)
1000f588:	6b400404 	addi	r13,r13,16
1000f58c:	5ac00404 	addi	r11,r11,16
1000f590:	693ffc15 	stw	r4,-16(r13)
1000f594:	61000017 	ldw	r4,0(r12)
1000f598:	4a400404 	addi	r9,r9,16
1000f59c:	42000404 	addi	r8,r8,16
1000f5a0:	593ffc15 	stw	r4,-16(r11)
1000f5a4:	51000017 	ldw	r4,0(r10)
1000f5a8:	63000404 	addi	r12,r12,16
1000f5ac:	52800404 	addi	r10,r10,16
1000f5b0:	493ffc15 	stw	r4,-16(r9)
1000f5b4:	1bbfef1e 	bne	r3,r14,1000f574 <__alt_data_end+0xf800f574>
1000f5b8:	79000044 	addi	r4,r15,1
1000f5bc:	2008913a 	slli	r4,r4,4
1000f5c0:	328003cc 	andi	r10,r6,15
1000f5c4:	02c000c4 	movi	r11,3
1000f5c8:	1107883a 	add	r3,r2,r4
1000f5cc:	290b883a 	add	r5,r5,r4
1000f5d0:	5a801e2e 	bgeu	r11,r10,1000f64c <memmove+0x154>
1000f5d4:	1813883a 	mov	r9,r3
1000f5d8:	2811883a 	mov	r8,r5
1000f5dc:	500f883a 	mov	r7,r10
1000f5e0:	41000017 	ldw	r4,0(r8)
1000f5e4:	4a400104 	addi	r9,r9,4
1000f5e8:	39ffff04 	addi	r7,r7,-4
1000f5ec:	493fff15 	stw	r4,-4(r9)
1000f5f0:	42000104 	addi	r8,r8,4
1000f5f4:	59fffa36 	bltu	r11,r7,1000f5e0 <__alt_data_end+0xf800f5e0>
1000f5f8:	513fff04 	addi	r4,r10,-4
1000f5fc:	2008d0ba 	srli	r4,r4,2
1000f600:	318000cc 	andi	r6,r6,3
1000f604:	21000044 	addi	r4,r4,1
1000f608:	2109883a 	add	r4,r4,r4
1000f60c:	2109883a 	add	r4,r4,r4
1000f610:	1907883a 	add	r3,r3,r4
1000f614:	290b883a 	add	r5,r5,r4
1000f618:	30000926 	beq	r6,zero,1000f640 <memmove+0x148>
1000f61c:	198d883a 	add	r6,r3,r6
1000f620:	29c00003 	ldbu	r7,0(r5)
1000f624:	18c00044 	addi	r3,r3,1
1000f628:	29400044 	addi	r5,r5,1
1000f62c:	19ffffc5 	stb	r7,-1(r3)
1000f630:	19bffb1e 	bne	r3,r6,1000f620 <__alt_data_end+0xf800f620>
1000f634:	f800283a 	ret
1000f638:	1007883a 	mov	r3,r2
1000f63c:	003ff606 	br	1000f618 <__alt_data_end+0xf800f618>
1000f640:	f800283a 	ret
1000f644:	1007883a 	mov	r3,r2
1000f648:	003ff406 	br	1000f61c <__alt_data_end+0xf800f61c>
1000f64c:	500d883a 	mov	r6,r10
1000f650:	003ff106 	br	1000f618 <__alt_data_end+0xf800f618>

1000f654 <memset>:
1000f654:	20c000cc 	andi	r3,r4,3
1000f658:	2005883a 	mov	r2,r4
1000f65c:	18004326 	beq	r3,zero,1000f76c <memset+0x118>
1000f660:	31ffffc4 	addi	r7,r6,-1
1000f664:	30004026 	beq	r6,zero,1000f768 <memset+0x114>
1000f668:	2813883a 	mov	r9,r5
1000f66c:	200d883a 	mov	r6,r4
1000f670:	2007883a 	mov	r3,r4
1000f674:	00000406 	br	1000f688 <memset+0x34>
1000f678:	3a3fffc4 	addi	r8,r7,-1
1000f67c:	31800044 	addi	r6,r6,1
1000f680:	38003926 	beq	r7,zero,1000f768 <memset+0x114>
1000f684:	400f883a 	mov	r7,r8
1000f688:	18c00044 	addi	r3,r3,1
1000f68c:	32400005 	stb	r9,0(r6)
1000f690:	1a0000cc 	andi	r8,r3,3
1000f694:	403ff81e 	bne	r8,zero,1000f678 <__alt_data_end+0xf800f678>
1000f698:	010000c4 	movi	r4,3
1000f69c:	21c02d2e 	bgeu	r4,r7,1000f754 <memset+0x100>
1000f6a0:	29803fcc 	andi	r6,r5,255
1000f6a4:	3008923a 	slli	r4,r6,8
1000f6a8:	218cb03a 	or	r6,r4,r6
1000f6ac:	3008943a 	slli	r4,r6,16
1000f6b0:	218cb03a 	or	r6,r4,r6
1000f6b4:	010003c4 	movi	r4,15
1000f6b8:	21c0182e 	bgeu	r4,r7,1000f71c <memset+0xc8>
1000f6bc:	3b3ffc04 	addi	r12,r7,-16
1000f6c0:	6018d13a 	srli	r12,r12,4
1000f6c4:	1a000104 	addi	r8,r3,4
1000f6c8:	1ac00204 	addi	r11,r3,8
1000f6cc:	6008913a 	slli	r4,r12,4
1000f6d0:	1a800304 	addi	r10,r3,12
1000f6d4:	1813883a 	mov	r9,r3
1000f6d8:	21000504 	addi	r4,r4,20
1000f6dc:	1909883a 	add	r4,r3,r4
1000f6e0:	49800015 	stw	r6,0(r9)
1000f6e4:	41800015 	stw	r6,0(r8)
1000f6e8:	59800015 	stw	r6,0(r11)
1000f6ec:	51800015 	stw	r6,0(r10)
1000f6f0:	42000404 	addi	r8,r8,16
1000f6f4:	4a400404 	addi	r9,r9,16
1000f6f8:	5ac00404 	addi	r11,r11,16
1000f6fc:	52800404 	addi	r10,r10,16
1000f700:	413ff71e 	bne	r8,r4,1000f6e0 <__alt_data_end+0xf800f6e0>
1000f704:	63000044 	addi	r12,r12,1
1000f708:	6018913a 	slli	r12,r12,4
1000f70c:	39c003cc 	andi	r7,r7,15
1000f710:	010000c4 	movi	r4,3
1000f714:	1b07883a 	add	r3,r3,r12
1000f718:	21c00e2e 	bgeu	r4,r7,1000f754 <memset+0x100>
1000f71c:	1813883a 	mov	r9,r3
1000f720:	3811883a 	mov	r8,r7
1000f724:	010000c4 	movi	r4,3
1000f728:	49800015 	stw	r6,0(r9)
1000f72c:	423fff04 	addi	r8,r8,-4
1000f730:	4a400104 	addi	r9,r9,4
1000f734:	223ffc36 	bltu	r4,r8,1000f728 <__alt_data_end+0xf800f728>
1000f738:	393fff04 	addi	r4,r7,-4
1000f73c:	2008d0ba 	srli	r4,r4,2
1000f740:	39c000cc 	andi	r7,r7,3
1000f744:	21000044 	addi	r4,r4,1
1000f748:	2109883a 	add	r4,r4,r4
1000f74c:	2109883a 	add	r4,r4,r4
1000f750:	1907883a 	add	r3,r3,r4
1000f754:	38000426 	beq	r7,zero,1000f768 <memset+0x114>
1000f758:	19cf883a 	add	r7,r3,r7
1000f75c:	19400005 	stb	r5,0(r3)
1000f760:	18c00044 	addi	r3,r3,1
1000f764:	19fffd1e 	bne	r3,r7,1000f75c <__alt_data_end+0xf800f75c>
1000f768:	f800283a 	ret
1000f76c:	2007883a 	mov	r3,r4
1000f770:	300f883a 	mov	r7,r6
1000f774:	003fc806 	br	1000f698 <__alt_data_end+0xf800f698>

1000f778 <_Balloc>:
1000f778:	20801317 	ldw	r2,76(r4)
1000f77c:	defffc04 	addi	sp,sp,-16
1000f780:	dc400115 	stw	r17,4(sp)
1000f784:	dc000015 	stw	r16,0(sp)
1000f788:	dfc00315 	stw	ra,12(sp)
1000f78c:	dc800215 	stw	r18,8(sp)
1000f790:	2023883a 	mov	r17,r4
1000f794:	2821883a 	mov	r16,r5
1000f798:	10000f26 	beq	r2,zero,1000f7d8 <_Balloc+0x60>
1000f79c:	8407883a 	add	r3,r16,r16
1000f7a0:	18c7883a 	add	r3,r3,r3
1000f7a4:	10c7883a 	add	r3,r2,r3
1000f7a8:	18800017 	ldw	r2,0(r3)
1000f7ac:	10001126 	beq	r2,zero,1000f7f4 <_Balloc+0x7c>
1000f7b0:	11000017 	ldw	r4,0(r2)
1000f7b4:	19000015 	stw	r4,0(r3)
1000f7b8:	10000415 	stw	zero,16(r2)
1000f7bc:	10000315 	stw	zero,12(r2)
1000f7c0:	dfc00317 	ldw	ra,12(sp)
1000f7c4:	dc800217 	ldw	r18,8(sp)
1000f7c8:	dc400117 	ldw	r17,4(sp)
1000f7cc:	dc000017 	ldw	r16,0(sp)
1000f7d0:	dec00404 	addi	sp,sp,16
1000f7d4:	f800283a 	ret
1000f7d8:	01400104 	movi	r5,4
1000f7dc:	01800844 	movi	r6,33
1000f7e0:	00126140 	call	10012614 <_calloc_r>
1000f7e4:	88801315 	stw	r2,76(r17)
1000f7e8:	103fec1e 	bne	r2,zero,1000f79c <__alt_data_end+0xf800f79c>
1000f7ec:	0005883a 	mov	r2,zero
1000f7f0:	003ff306 	br	1000f7c0 <__alt_data_end+0xf800f7c0>
1000f7f4:	01400044 	movi	r5,1
1000f7f8:	2c24983a 	sll	r18,r5,r16
1000f7fc:	8809883a 	mov	r4,r17
1000f800:	91800144 	addi	r6,r18,5
1000f804:	318d883a 	add	r6,r6,r6
1000f808:	318d883a 	add	r6,r6,r6
1000f80c:	00126140 	call	10012614 <_calloc_r>
1000f810:	103ff626 	beq	r2,zero,1000f7ec <__alt_data_end+0xf800f7ec>
1000f814:	14000115 	stw	r16,4(r2)
1000f818:	14800215 	stw	r18,8(r2)
1000f81c:	003fe606 	br	1000f7b8 <__alt_data_end+0xf800f7b8>

1000f820 <_Bfree>:
1000f820:	28000826 	beq	r5,zero,1000f844 <_Bfree+0x24>
1000f824:	28c00117 	ldw	r3,4(r5)
1000f828:	20801317 	ldw	r2,76(r4)
1000f82c:	18c7883a 	add	r3,r3,r3
1000f830:	18c7883a 	add	r3,r3,r3
1000f834:	10c5883a 	add	r2,r2,r3
1000f838:	10c00017 	ldw	r3,0(r2)
1000f83c:	28c00015 	stw	r3,0(r5)
1000f840:	11400015 	stw	r5,0(r2)
1000f844:	f800283a 	ret

1000f848 <__multadd>:
1000f848:	defff704 	addi	sp,sp,-36
1000f84c:	dc800215 	stw	r18,8(sp)
1000f850:	2c800417 	ldw	r18,16(r5)
1000f854:	ddc00715 	stw	r23,28(sp)
1000f858:	dd800615 	stw	r22,24(sp)
1000f85c:	dd000415 	stw	r20,16(sp)
1000f860:	dcc00315 	stw	r19,12(sp)
1000f864:	dc400115 	stw	r17,4(sp)
1000f868:	dc000015 	stw	r16,0(sp)
1000f86c:	dfc00815 	stw	ra,32(sp)
1000f870:	dd400515 	stw	r21,20(sp)
1000f874:	2827883a 	mov	r19,r5
1000f878:	2029883a 	mov	r20,r4
1000f87c:	3023883a 	mov	r17,r6
1000f880:	3821883a 	mov	r16,r7
1000f884:	2d800504 	addi	r22,r5,20
1000f888:	002f883a 	mov	r23,zero
1000f88c:	b5400017 	ldw	r21,0(r22)
1000f890:	880b883a 	mov	r5,r17
1000f894:	bdc00044 	addi	r23,r23,1
1000f898:	a93fffcc 	andi	r4,r21,65535
1000f89c:	00074c40 	call	100074c4 <__mulsi3>
1000f8a0:	1421883a 	add	r16,r2,r16
1000f8a4:	a808d43a 	srli	r4,r21,16
1000f8a8:	802ad43a 	srli	r21,r16,16
1000f8ac:	880b883a 	mov	r5,r17
1000f8b0:	00074c40 	call	100074c4 <__mulsi3>
1000f8b4:	a88f883a 	add	r7,r21,r2
1000f8b8:	3804943a 	slli	r2,r7,16
1000f8bc:	80ffffcc 	andi	r3,r16,65535
1000f8c0:	b5800104 	addi	r22,r22,4
1000f8c4:	10c7883a 	add	r3,r2,r3
1000f8c8:	b0ffff15 	stw	r3,-4(r22)
1000f8cc:	3820d43a 	srli	r16,r7,16
1000f8d0:	bcbfee16 	blt	r23,r18,1000f88c <__alt_data_end+0xf800f88c>
1000f8d4:	80000926 	beq	r16,zero,1000f8fc <__multadd+0xb4>
1000f8d8:	98800217 	ldw	r2,8(r19)
1000f8dc:	9080130e 	bge	r18,r2,1000f92c <__multadd+0xe4>
1000f8e0:	90800144 	addi	r2,r18,5
1000f8e4:	1085883a 	add	r2,r2,r2
1000f8e8:	1085883a 	add	r2,r2,r2
1000f8ec:	9885883a 	add	r2,r19,r2
1000f8f0:	14000015 	stw	r16,0(r2)
1000f8f4:	94800044 	addi	r18,r18,1
1000f8f8:	9c800415 	stw	r18,16(r19)
1000f8fc:	9805883a 	mov	r2,r19
1000f900:	dfc00817 	ldw	ra,32(sp)
1000f904:	ddc00717 	ldw	r23,28(sp)
1000f908:	dd800617 	ldw	r22,24(sp)
1000f90c:	dd400517 	ldw	r21,20(sp)
1000f910:	dd000417 	ldw	r20,16(sp)
1000f914:	dcc00317 	ldw	r19,12(sp)
1000f918:	dc800217 	ldw	r18,8(sp)
1000f91c:	dc400117 	ldw	r17,4(sp)
1000f920:	dc000017 	ldw	r16,0(sp)
1000f924:	dec00904 	addi	sp,sp,36
1000f928:	f800283a 	ret
1000f92c:	99400117 	ldw	r5,4(r19)
1000f930:	a009883a 	mov	r4,r20
1000f934:	29400044 	addi	r5,r5,1
1000f938:	000f7780 	call	1000f778 <_Balloc>
1000f93c:	99800417 	ldw	r6,16(r19)
1000f940:	99400304 	addi	r5,r19,12
1000f944:	11000304 	addi	r4,r2,12
1000f948:	31800084 	addi	r6,r6,2
1000f94c:	318d883a 	add	r6,r6,r6
1000f950:	318d883a 	add	r6,r6,r6
1000f954:	1023883a 	mov	r17,r2
1000f958:	0009a7c0 	call	10009a7c <memcpy>
1000f95c:	99000117 	ldw	r4,4(r19)
1000f960:	a0c01317 	ldw	r3,76(r20)
1000f964:	2109883a 	add	r4,r4,r4
1000f968:	2109883a 	add	r4,r4,r4
1000f96c:	1907883a 	add	r3,r3,r4
1000f970:	18800017 	ldw	r2,0(r3)
1000f974:	98800015 	stw	r2,0(r19)
1000f978:	1cc00015 	stw	r19,0(r3)
1000f97c:	8827883a 	mov	r19,r17
1000f980:	003fd706 	br	1000f8e0 <__alt_data_end+0xf800f8e0>

1000f984 <__s2b>:
1000f984:	defff904 	addi	sp,sp,-28
1000f988:	dc400115 	stw	r17,4(sp)
1000f98c:	dc000015 	stw	r16,0(sp)
1000f990:	2023883a 	mov	r17,r4
1000f994:	2821883a 	mov	r16,r5
1000f998:	39000204 	addi	r4,r7,8
1000f99c:	01400244 	movi	r5,9
1000f9a0:	dcc00315 	stw	r19,12(sp)
1000f9a4:	dc800215 	stw	r18,8(sp)
1000f9a8:	dfc00615 	stw	ra,24(sp)
1000f9ac:	dd400515 	stw	r21,20(sp)
1000f9b0:	dd000415 	stw	r20,16(sp)
1000f9b4:	3825883a 	mov	r18,r7
1000f9b8:	3027883a 	mov	r19,r6
1000f9bc:	00074040 	call	10007404 <__divsi3>
1000f9c0:	00c00044 	movi	r3,1
1000f9c4:	000b883a 	mov	r5,zero
1000f9c8:	1880030e 	bge	r3,r2,1000f9d8 <__s2b+0x54>
1000f9cc:	18c7883a 	add	r3,r3,r3
1000f9d0:	29400044 	addi	r5,r5,1
1000f9d4:	18bffd16 	blt	r3,r2,1000f9cc <__alt_data_end+0xf800f9cc>
1000f9d8:	8809883a 	mov	r4,r17
1000f9dc:	000f7780 	call	1000f778 <_Balloc>
1000f9e0:	d8c00717 	ldw	r3,28(sp)
1000f9e4:	10c00515 	stw	r3,20(r2)
1000f9e8:	00c00044 	movi	r3,1
1000f9ec:	10c00415 	stw	r3,16(r2)
1000f9f0:	00c00244 	movi	r3,9
1000f9f4:	1cc0210e 	bge	r3,r19,1000fa7c <__s2b+0xf8>
1000f9f8:	80eb883a 	add	r21,r16,r3
1000f9fc:	a829883a 	mov	r20,r21
1000fa00:	84e1883a 	add	r16,r16,r19
1000fa04:	a1c00007 	ldb	r7,0(r20)
1000fa08:	8809883a 	mov	r4,r17
1000fa0c:	a5000044 	addi	r20,r20,1
1000fa10:	100b883a 	mov	r5,r2
1000fa14:	01800284 	movi	r6,10
1000fa18:	39fff404 	addi	r7,r7,-48
1000fa1c:	000f8480 	call	1000f848 <__multadd>
1000fa20:	a43ff81e 	bne	r20,r16,1000fa04 <__alt_data_end+0xf800fa04>
1000fa24:	ace1883a 	add	r16,r21,r19
1000fa28:	843ffe04 	addi	r16,r16,-8
1000fa2c:	9c800a0e 	bge	r19,r18,1000fa58 <__s2b+0xd4>
1000fa30:	94e5c83a 	sub	r18,r18,r19
1000fa34:	84a5883a 	add	r18,r16,r18
1000fa38:	81c00007 	ldb	r7,0(r16)
1000fa3c:	8809883a 	mov	r4,r17
1000fa40:	84000044 	addi	r16,r16,1
1000fa44:	100b883a 	mov	r5,r2
1000fa48:	01800284 	movi	r6,10
1000fa4c:	39fff404 	addi	r7,r7,-48
1000fa50:	000f8480 	call	1000f848 <__multadd>
1000fa54:	84bff81e 	bne	r16,r18,1000fa38 <__alt_data_end+0xf800fa38>
1000fa58:	dfc00617 	ldw	ra,24(sp)
1000fa5c:	dd400517 	ldw	r21,20(sp)
1000fa60:	dd000417 	ldw	r20,16(sp)
1000fa64:	dcc00317 	ldw	r19,12(sp)
1000fa68:	dc800217 	ldw	r18,8(sp)
1000fa6c:	dc400117 	ldw	r17,4(sp)
1000fa70:	dc000017 	ldw	r16,0(sp)
1000fa74:	dec00704 	addi	sp,sp,28
1000fa78:	f800283a 	ret
1000fa7c:	84000284 	addi	r16,r16,10
1000fa80:	1827883a 	mov	r19,r3
1000fa84:	003fe906 	br	1000fa2c <__alt_data_end+0xf800fa2c>

1000fa88 <__hi0bits>:
1000fa88:	20bfffec 	andhi	r2,r4,65535
1000fa8c:	1000141e 	bne	r2,zero,1000fae0 <__hi0bits+0x58>
1000fa90:	2008943a 	slli	r4,r4,16
1000fa94:	00800404 	movi	r2,16
1000fa98:	20ffc02c 	andhi	r3,r4,65280
1000fa9c:	1800021e 	bne	r3,zero,1000faa8 <__hi0bits+0x20>
1000faa0:	2008923a 	slli	r4,r4,8
1000faa4:	10800204 	addi	r2,r2,8
1000faa8:	20fc002c 	andhi	r3,r4,61440
1000faac:	1800021e 	bne	r3,zero,1000fab8 <__hi0bits+0x30>
1000fab0:	2008913a 	slli	r4,r4,4
1000fab4:	10800104 	addi	r2,r2,4
1000fab8:	20f0002c 	andhi	r3,r4,49152
1000fabc:	1800031e 	bne	r3,zero,1000facc <__hi0bits+0x44>
1000fac0:	2109883a 	add	r4,r4,r4
1000fac4:	10800084 	addi	r2,r2,2
1000fac8:	2109883a 	add	r4,r4,r4
1000facc:	20000316 	blt	r4,zero,1000fadc <__hi0bits+0x54>
1000fad0:	2110002c 	andhi	r4,r4,16384
1000fad4:	2000041e 	bne	r4,zero,1000fae8 <__hi0bits+0x60>
1000fad8:	00800804 	movi	r2,32
1000fadc:	f800283a 	ret
1000fae0:	0005883a 	mov	r2,zero
1000fae4:	003fec06 	br	1000fa98 <__alt_data_end+0xf800fa98>
1000fae8:	10800044 	addi	r2,r2,1
1000faec:	f800283a 	ret

1000faf0 <__lo0bits>:
1000faf0:	20c00017 	ldw	r3,0(r4)
1000faf4:	188001cc 	andi	r2,r3,7
1000faf8:	10000826 	beq	r2,zero,1000fb1c <__lo0bits+0x2c>
1000fafc:	1880004c 	andi	r2,r3,1
1000fb00:	1000211e 	bne	r2,zero,1000fb88 <__lo0bits+0x98>
1000fb04:	1880008c 	andi	r2,r3,2
1000fb08:	1000211e 	bne	r2,zero,1000fb90 <__lo0bits+0xa0>
1000fb0c:	1806d0ba 	srli	r3,r3,2
1000fb10:	00800084 	movi	r2,2
1000fb14:	20c00015 	stw	r3,0(r4)
1000fb18:	f800283a 	ret
1000fb1c:	18bfffcc 	andi	r2,r3,65535
1000fb20:	10001326 	beq	r2,zero,1000fb70 <__lo0bits+0x80>
1000fb24:	0005883a 	mov	r2,zero
1000fb28:	19403fcc 	andi	r5,r3,255
1000fb2c:	2800021e 	bne	r5,zero,1000fb38 <__lo0bits+0x48>
1000fb30:	1806d23a 	srli	r3,r3,8
1000fb34:	10800204 	addi	r2,r2,8
1000fb38:	194003cc 	andi	r5,r3,15
1000fb3c:	2800021e 	bne	r5,zero,1000fb48 <__lo0bits+0x58>
1000fb40:	1806d13a 	srli	r3,r3,4
1000fb44:	10800104 	addi	r2,r2,4
1000fb48:	194000cc 	andi	r5,r3,3
1000fb4c:	2800021e 	bne	r5,zero,1000fb58 <__lo0bits+0x68>
1000fb50:	1806d0ba 	srli	r3,r3,2
1000fb54:	10800084 	addi	r2,r2,2
1000fb58:	1940004c 	andi	r5,r3,1
1000fb5c:	2800081e 	bne	r5,zero,1000fb80 <__lo0bits+0x90>
1000fb60:	1806d07a 	srli	r3,r3,1
1000fb64:	1800051e 	bne	r3,zero,1000fb7c <__lo0bits+0x8c>
1000fb68:	00800804 	movi	r2,32
1000fb6c:	f800283a 	ret
1000fb70:	1806d43a 	srli	r3,r3,16
1000fb74:	00800404 	movi	r2,16
1000fb78:	003feb06 	br	1000fb28 <__alt_data_end+0xf800fb28>
1000fb7c:	10800044 	addi	r2,r2,1
1000fb80:	20c00015 	stw	r3,0(r4)
1000fb84:	f800283a 	ret
1000fb88:	0005883a 	mov	r2,zero
1000fb8c:	f800283a 	ret
1000fb90:	1806d07a 	srli	r3,r3,1
1000fb94:	00800044 	movi	r2,1
1000fb98:	20c00015 	stw	r3,0(r4)
1000fb9c:	f800283a 	ret

1000fba0 <__i2b>:
1000fba0:	defffd04 	addi	sp,sp,-12
1000fba4:	dc000015 	stw	r16,0(sp)
1000fba8:	04000044 	movi	r16,1
1000fbac:	dc400115 	stw	r17,4(sp)
1000fbb0:	2823883a 	mov	r17,r5
1000fbb4:	800b883a 	mov	r5,r16
1000fbb8:	dfc00215 	stw	ra,8(sp)
1000fbbc:	000f7780 	call	1000f778 <_Balloc>
1000fbc0:	14400515 	stw	r17,20(r2)
1000fbc4:	14000415 	stw	r16,16(r2)
1000fbc8:	dfc00217 	ldw	ra,8(sp)
1000fbcc:	dc400117 	ldw	r17,4(sp)
1000fbd0:	dc000017 	ldw	r16,0(sp)
1000fbd4:	dec00304 	addi	sp,sp,12
1000fbd8:	f800283a 	ret

1000fbdc <__multiply>:
1000fbdc:	deffef04 	addi	sp,sp,-68
1000fbe0:	dc400815 	stw	r17,32(sp)
1000fbe4:	dc000715 	stw	r16,28(sp)
1000fbe8:	2c400417 	ldw	r17,16(r5)
1000fbec:	34000417 	ldw	r16,16(r6)
1000fbf0:	dd800d15 	stw	r22,52(sp)
1000fbf4:	dc800915 	stw	r18,36(sp)
1000fbf8:	dfc01015 	stw	ra,64(sp)
1000fbfc:	df000f15 	stw	fp,60(sp)
1000fc00:	ddc00e15 	stw	r23,56(sp)
1000fc04:	dd400c15 	stw	r21,48(sp)
1000fc08:	dd000b15 	stw	r20,44(sp)
1000fc0c:	dcc00a15 	stw	r19,40(sp)
1000fc10:	2825883a 	mov	r18,r5
1000fc14:	302d883a 	mov	r22,r6
1000fc18:	8c009116 	blt	r17,r16,1000fe60 <__multiply+0x284>
1000fc1c:	8005883a 	mov	r2,r16
1000fc20:	8821883a 	mov	r16,r17
1000fc24:	1023883a 	mov	r17,r2
1000fc28:	90800217 	ldw	r2,8(r18)
1000fc2c:	8447883a 	add	r3,r16,r17
1000fc30:	d8c00215 	stw	r3,8(sp)
1000fc34:	91400117 	ldw	r5,4(r18)
1000fc38:	10c0010e 	bge	r2,r3,1000fc40 <__multiply+0x64>
1000fc3c:	29400044 	addi	r5,r5,1
1000fc40:	000f7780 	call	1000f778 <_Balloc>
1000fc44:	d8c00217 	ldw	r3,8(sp)
1000fc48:	d8800615 	stw	r2,24(sp)
1000fc4c:	18eb883a 	add	r21,r3,r3
1000fc50:	ad6b883a 	add	r21,r21,r21
1000fc54:	10c00504 	addi	r3,r2,20
1000fc58:	1d6b883a 	add	r21,r3,r21
1000fc5c:	d8c00115 	stw	r3,4(sp)
1000fc60:	dd400315 	stw	r21,12(sp)
1000fc64:	1805883a 	mov	r2,r3
1000fc68:	1d40042e 	bgeu	r3,r21,1000fc7c <__multiply+0xa0>
1000fc6c:	d8c00317 	ldw	r3,12(sp)
1000fc70:	10000015 	stw	zero,0(r2)
1000fc74:	10800104 	addi	r2,r2,4
1000fc78:	10fffc36 	bltu	r2,r3,1000fc6c <__alt_data_end+0xf800fc6c>
1000fc7c:	8c63883a 	add	r17,r17,r17
1000fc80:	b5800504 	addi	r22,r22,20
1000fc84:	8c63883a 	add	r17,r17,r17
1000fc88:	94800504 	addi	r18,r18,20
1000fc8c:	8421883a 	add	r16,r16,r16
1000fc90:	b463883a 	add	r17,r22,r17
1000fc94:	8421883a 	add	r16,r16,r16
1000fc98:	dd800015 	stw	r22,0(sp)
1000fc9c:	dc800415 	stw	r18,16(sp)
1000fca0:	dc400515 	stw	r17,20(sp)
1000fca4:	9429883a 	add	r20,r18,r16
1000fca8:	b4404f2e 	bgeu	r22,r17,1000fde8 <__multiply+0x20c>
1000fcac:	d8c00017 	ldw	r3,0(sp)
1000fcb0:	1c800017 	ldw	r18,0(r3)
1000fcb4:	943fffcc 	andi	r16,r18,65535
1000fcb8:	80001e26 	beq	r16,zero,1000fd34 <__multiply+0x158>
1000fcbc:	dd800117 	ldw	r22,4(sp)
1000fcc0:	dd400417 	ldw	r21,16(sp)
1000fcc4:	0025883a 	mov	r18,zero
1000fcc8:	adc00017 	ldw	r23,0(r21)
1000fccc:	b4c00017 	ldw	r19,0(r22)
1000fcd0:	800b883a 	mov	r5,r16
1000fcd4:	b93fffcc 	andi	r4,r23,65535
1000fcd8:	00074c40 	call	100074c4 <__mulsi3>
1000fcdc:	9c7fffcc 	andi	r17,r19,65535
1000fce0:	8885883a 	add	r2,r17,r2
1000fce4:	b808d43a 	srli	r4,r23,16
1000fce8:	14a3883a 	add	r17,r2,r18
1000fcec:	9826d43a 	srli	r19,r19,16
1000fcf0:	8824d43a 	srli	r18,r17,16
1000fcf4:	800b883a 	mov	r5,r16
1000fcf8:	00074c40 	call	100074c4 <__mulsi3>
1000fcfc:	9885883a 	add	r2,r19,r2
1000fd00:	14a7883a 	add	r19,r2,r18
1000fd04:	88ffffcc 	andi	r3,r17,65535
1000fd08:	9822943a 	slli	r17,r19,16
1000fd0c:	ad400104 	addi	r21,r21,4
1000fd10:	b005883a 	mov	r2,r22
1000fd14:	88c6b03a 	or	r3,r17,r3
1000fd18:	b0c00015 	stw	r3,0(r22)
1000fd1c:	9824d43a 	srli	r18,r19,16
1000fd20:	b5800104 	addi	r22,r22,4
1000fd24:	ad3fe836 	bltu	r21,r20,1000fcc8 <__alt_data_end+0xf800fcc8>
1000fd28:	d8c00017 	ldw	r3,0(sp)
1000fd2c:	14800115 	stw	r18,4(r2)
1000fd30:	1c800017 	ldw	r18,0(r3)
1000fd34:	9024d43a 	srli	r18,r18,16
1000fd38:	90002226 	beq	r18,zero,1000fdc4 <__multiply+0x1e8>
1000fd3c:	d8c00117 	ldw	r3,4(sp)
1000fd40:	dd800417 	ldw	r22,16(sp)
1000fd44:	002f883a 	mov	r23,zero
1000fd48:	1f000017 	ldw	fp,0(r3)
1000fd4c:	1823883a 	mov	r17,r3
1000fd50:	182b883a 	mov	r21,r3
1000fd54:	e021883a 	mov	r16,fp
1000fd58:	00000106 	br	1000fd60 <__multiply+0x184>
1000fd5c:	982b883a 	mov	r21,r19
1000fd60:	b100000b 	ldhu	r4,0(r22)
1000fd64:	8020d43a 	srli	r16,r16,16
1000fd68:	900b883a 	mov	r5,r18
1000fd6c:	00074c40 	call	100074c4 <__mulsi3>
1000fd70:	1405883a 	add	r2,r2,r16
1000fd74:	15ef883a 	add	r23,r2,r23
1000fd78:	b804943a 	slli	r2,r23,16
1000fd7c:	e0ffffcc 	andi	r3,fp,65535
1000fd80:	8c400104 	addi	r17,r17,4
1000fd84:	10c6b03a 	or	r3,r2,r3
1000fd88:	88ffff15 	stw	r3,-4(r17)
1000fd8c:	b5800104 	addi	r22,r22,4
1000fd90:	b13fff17 	ldw	r4,-4(r22)
1000fd94:	acc00104 	addi	r19,r21,4
1000fd98:	900b883a 	mov	r5,r18
1000fd9c:	2008d43a 	srli	r4,r4,16
1000fda0:	9c000017 	ldw	r16,0(r19)
1000fda4:	00074c40 	call	100074c4 <__mulsi3>
1000fda8:	b806d43a 	srli	r3,r23,16
1000fdac:	813fffcc 	andi	r4,r16,65535
1000fdb0:	1105883a 	add	r2,r2,r4
1000fdb4:	10f9883a 	add	fp,r2,r3
1000fdb8:	e02ed43a 	srli	r23,fp,16
1000fdbc:	b53fe736 	bltu	r22,r20,1000fd5c <__alt_data_end+0xf800fd5c>
1000fdc0:	af000115 	stw	fp,4(r21)
1000fdc4:	d8c00017 	ldw	r3,0(sp)
1000fdc8:	d9000517 	ldw	r4,20(sp)
1000fdcc:	18c00104 	addi	r3,r3,4
1000fdd0:	d8c00015 	stw	r3,0(sp)
1000fdd4:	d8c00117 	ldw	r3,4(sp)
1000fdd8:	18c00104 	addi	r3,r3,4
1000fddc:	d8c00115 	stw	r3,4(sp)
1000fde0:	d8c00017 	ldw	r3,0(sp)
1000fde4:	193fb136 	bltu	r3,r4,1000fcac <__alt_data_end+0xf800fcac>
1000fde8:	d8c00217 	ldw	r3,8(sp)
1000fdec:	00c00c0e 	bge	zero,r3,1000fe20 <__multiply+0x244>
1000fdf0:	d8c00317 	ldw	r3,12(sp)
1000fdf4:	18bfff17 	ldw	r2,-4(r3)
1000fdf8:	1d7fff04 	addi	r21,r3,-4
1000fdfc:	10000326 	beq	r2,zero,1000fe0c <__multiply+0x230>
1000fe00:	00000706 	br	1000fe20 <__multiply+0x244>
1000fe04:	a8800017 	ldw	r2,0(r21)
1000fe08:	1000051e 	bne	r2,zero,1000fe20 <__multiply+0x244>
1000fe0c:	d8c00217 	ldw	r3,8(sp)
1000fe10:	ad7fff04 	addi	r21,r21,-4
1000fe14:	18ffffc4 	addi	r3,r3,-1
1000fe18:	d8c00215 	stw	r3,8(sp)
1000fe1c:	183ff91e 	bne	r3,zero,1000fe04 <__alt_data_end+0xf800fe04>
1000fe20:	d8c00617 	ldw	r3,24(sp)
1000fe24:	d9000217 	ldw	r4,8(sp)
1000fe28:	1805883a 	mov	r2,r3
1000fe2c:	19000415 	stw	r4,16(r3)
1000fe30:	dfc01017 	ldw	ra,64(sp)
1000fe34:	df000f17 	ldw	fp,60(sp)
1000fe38:	ddc00e17 	ldw	r23,56(sp)
1000fe3c:	dd800d17 	ldw	r22,52(sp)
1000fe40:	dd400c17 	ldw	r21,48(sp)
1000fe44:	dd000b17 	ldw	r20,44(sp)
1000fe48:	dcc00a17 	ldw	r19,40(sp)
1000fe4c:	dc800917 	ldw	r18,36(sp)
1000fe50:	dc400817 	ldw	r17,32(sp)
1000fe54:	dc000717 	ldw	r16,28(sp)
1000fe58:	dec01104 	addi	sp,sp,68
1000fe5c:	f800283a 	ret
1000fe60:	3025883a 	mov	r18,r6
1000fe64:	282d883a 	mov	r22,r5
1000fe68:	003f6f06 	br	1000fc28 <__alt_data_end+0xf800fc28>

1000fe6c <__pow5mult>:
1000fe6c:	defffa04 	addi	sp,sp,-24
1000fe70:	dcc00315 	stw	r19,12(sp)
1000fe74:	dc800215 	stw	r18,8(sp)
1000fe78:	dc000015 	stw	r16,0(sp)
1000fe7c:	dfc00515 	stw	ra,20(sp)
1000fe80:	dd000415 	stw	r20,16(sp)
1000fe84:	dc400115 	stw	r17,4(sp)
1000fe88:	308000cc 	andi	r2,r6,3
1000fe8c:	3021883a 	mov	r16,r6
1000fe90:	2027883a 	mov	r19,r4
1000fe94:	2825883a 	mov	r18,r5
1000fe98:	10002e1e 	bne	r2,zero,1000ff54 <__pow5mult+0xe8>
1000fe9c:	8021d0ba 	srai	r16,r16,2
1000fea0:	80001a26 	beq	r16,zero,1000ff0c <__pow5mult+0xa0>
1000fea4:	9c401217 	ldw	r17,72(r19)
1000fea8:	8800061e 	bne	r17,zero,1000fec4 <__pow5mult+0x58>
1000feac:	00003406 	br	1000ff80 <__pow5mult+0x114>
1000feb0:	8021d07a 	srai	r16,r16,1
1000feb4:	80001526 	beq	r16,zero,1000ff0c <__pow5mult+0xa0>
1000feb8:	88800017 	ldw	r2,0(r17)
1000febc:	10001c26 	beq	r2,zero,1000ff30 <__pow5mult+0xc4>
1000fec0:	1023883a 	mov	r17,r2
1000fec4:	80c0004c 	andi	r3,r16,1
1000fec8:	183ff926 	beq	r3,zero,1000feb0 <__alt_data_end+0xf800feb0>
1000fecc:	900b883a 	mov	r5,r18
1000fed0:	880d883a 	mov	r6,r17
1000fed4:	9809883a 	mov	r4,r19
1000fed8:	000fbdc0 	call	1000fbdc <__multiply>
1000fedc:	90001b26 	beq	r18,zero,1000ff4c <__pow5mult+0xe0>
1000fee0:	91c00117 	ldw	r7,4(r18)
1000fee4:	98c01317 	ldw	r3,76(r19)
1000fee8:	8021d07a 	srai	r16,r16,1
1000feec:	39cf883a 	add	r7,r7,r7
1000fef0:	39cf883a 	add	r7,r7,r7
1000fef4:	19c7883a 	add	r3,r3,r7
1000fef8:	19000017 	ldw	r4,0(r3)
1000fefc:	91000015 	stw	r4,0(r18)
1000ff00:	1c800015 	stw	r18,0(r3)
1000ff04:	1025883a 	mov	r18,r2
1000ff08:	803feb1e 	bne	r16,zero,1000feb8 <__alt_data_end+0xf800feb8>
1000ff0c:	9005883a 	mov	r2,r18
1000ff10:	dfc00517 	ldw	ra,20(sp)
1000ff14:	dd000417 	ldw	r20,16(sp)
1000ff18:	dcc00317 	ldw	r19,12(sp)
1000ff1c:	dc800217 	ldw	r18,8(sp)
1000ff20:	dc400117 	ldw	r17,4(sp)
1000ff24:	dc000017 	ldw	r16,0(sp)
1000ff28:	dec00604 	addi	sp,sp,24
1000ff2c:	f800283a 	ret
1000ff30:	9809883a 	mov	r4,r19
1000ff34:	880b883a 	mov	r5,r17
1000ff38:	880d883a 	mov	r6,r17
1000ff3c:	000fbdc0 	call	1000fbdc <__multiply>
1000ff40:	88800015 	stw	r2,0(r17)
1000ff44:	10000015 	stw	zero,0(r2)
1000ff48:	003fdd06 	br	1000fec0 <__alt_data_end+0xf800fec0>
1000ff4c:	1025883a 	mov	r18,r2
1000ff50:	003fd706 	br	1000feb0 <__alt_data_end+0xf800feb0>
1000ff54:	10bfffc4 	addi	r2,r2,-1
1000ff58:	1085883a 	add	r2,r2,r2
1000ff5c:	00c400b4 	movhi	r3,4098
1000ff60:	18e78004 	addi	r3,r3,-25088
1000ff64:	1085883a 	add	r2,r2,r2
1000ff68:	1885883a 	add	r2,r3,r2
1000ff6c:	11800017 	ldw	r6,0(r2)
1000ff70:	000f883a 	mov	r7,zero
1000ff74:	000f8480 	call	1000f848 <__multadd>
1000ff78:	1025883a 	mov	r18,r2
1000ff7c:	003fc706 	br	1000fe9c <__alt_data_end+0xf800fe9c>
1000ff80:	05000044 	movi	r20,1
1000ff84:	9809883a 	mov	r4,r19
1000ff88:	a00b883a 	mov	r5,r20
1000ff8c:	000f7780 	call	1000f778 <_Balloc>
1000ff90:	1023883a 	mov	r17,r2
1000ff94:	00809c44 	movi	r2,625
1000ff98:	88800515 	stw	r2,20(r17)
1000ff9c:	8d000415 	stw	r20,16(r17)
1000ffa0:	9c401215 	stw	r17,72(r19)
1000ffa4:	88000015 	stw	zero,0(r17)
1000ffa8:	003fc606 	br	1000fec4 <__alt_data_end+0xf800fec4>

1000ffac <__lshift>:
1000ffac:	defff904 	addi	sp,sp,-28
1000ffb0:	dd000415 	stw	r20,16(sp)
1000ffb4:	dcc00315 	stw	r19,12(sp)
1000ffb8:	3029d17a 	srai	r20,r6,5
1000ffbc:	2cc00417 	ldw	r19,16(r5)
1000ffc0:	28800217 	ldw	r2,8(r5)
1000ffc4:	dd400515 	stw	r21,20(sp)
1000ffc8:	a4e7883a 	add	r19,r20,r19
1000ffcc:	dc800215 	stw	r18,8(sp)
1000ffd0:	dc400115 	stw	r17,4(sp)
1000ffd4:	dc000015 	stw	r16,0(sp)
1000ffd8:	dfc00615 	stw	ra,24(sp)
1000ffdc:	9c000044 	addi	r16,r19,1
1000ffe0:	2823883a 	mov	r17,r5
1000ffe4:	302b883a 	mov	r21,r6
1000ffe8:	2025883a 	mov	r18,r4
1000ffec:	29400117 	ldw	r5,4(r5)
1000fff0:	1400030e 	bge	r2,r16,10010000 <__lshift+0x54>
1000fff4:	1085883a 	add	r2,r2,r2
1000fff8:	29400044 	addi	r5,r5,1
1000fffc:	143ffd16 	blt	r2,r16,1000fff4 <__alt_data_end+0xf800fff4>
10010000:	9009883a 	mov	r4,r18
10010004:	000f7780 	call	1000f778 <_Balloc>
10010008:	11c00504 	addi	r7,r2,20
1001000c:	0500090e 	bge	zero,r20,10010034 <__lshift+0x88>
10010010:	3811883a 	mov	r8,r7
10010014:	0007883a 	mov	r3,zero
10010018:	40000015 	stw	zero,0(r8)
1001001c:	18c00044 	addi	r3,r3,1
10010020:	42000104 	addi	r8,r8,4
10010024:	1d3ffc1e 	bne	r3,r20,10010018 <__alt_data_end+0xf8010018>
10010028:	18c7883a 	add	r3,r3,r3
1001002c:	18c7883a 	add	r3,r3,r3
10010030:	38cf883a 	add	r7,r7,r3
10010034:	89000417 	ldw	r4,16(r17)
10010038:	88c00504 	addi	r3,r17,20
1001003c:	a98007cc 	andi	r6,r21,31
10010040:	2109883a 	add	r4,r4,r4
10010044:	2109883a 	add	r4,r4,r4
10010048:	1909883a 	add	r4,r3,r4
1001004c:	30002326 	beq	r6,zero,100100dc <__lshift+0x130>
10010050:	01400804 	movi	r5,32
10010054:	298bc83a 	sub	r5,r5,r6
10010058:	0013883a 	mov	r9,zero
1001005c:	1a000017 	ldw	r8,0(r3)
10010060:	3815883a 	mov	r10,r7
10010064:	39c00104 	addi	r7,r7,4
10010068:	4190983a 	sll	r8,r8,r6
1001006c:	18c00104 	addi	r3,r3,4
10010070:	4a10b03a 	or	r8,r9,r8
10010074:	3a3fff15 	stw	r8,-4(r7)
10010078:	1a3fff17 	ldw	r8,-4(r3)
1001007c:	4152d83a 	srl	r9,r8,r5
10010080:	193ff636 	bltu	r3,r4,1001005c <__alt_data_end+0xf801005c>
10010084:	52400115 	stw	r9,4(r10)
10010088:	48000126 	beq	r9,zero,10010090 <__lshift+0xe4>
1001008c:	9c000084 	addi	r16,r19,2
10010090:	89000117 	ldw	r4,4(r17)
10010094:	90c01317 	ldw	r3,76(r18)
10010098:	843fffc4 	addi	r16,r16,-1
1001009c:	2109883a 	add	r4,r4,r4
100100a0:	2109883a 	add	r4,r4,r4
100100a4:	1907883a 	add	r3,r3,r4
100100a8:	19000017 	ldw	r4,0(r3)
100100ac:	14000415 	stw	r16,16(r2)
100100b0:	89000015 	stw	r4,0(r17)
100100b4:	1c400015 	stw	r17,0(r3)
100100b8:	dfc00617 	ldw	ra,24(sp)
100100bc:	dd400517 	ldw	r21,20(sp)
100100c0:	dd000417 	ldw	r20,16(sp)
100100c4:	dcc00317 	ldw	r19,12(sp)
100100c8:	dc800217 	ldw	r18,8(sp)
100100cc:	dc400117 	ldw	r17,4(sp)
100100d0:	dc000017 	ldw	r16,0(sp)
100100d4:	dec00704 	addi	sp,sp,28
100100d8:	f800283a 	ret
100100dc:	19400017 	ldw	r5,0(r3)
100100e0:	39c00104 	addi	r7,r7,4
100100e4:	18c00104 	addi	r3,r3,4
100100e8:	397fff15 	stw	r5,-4(r7)
100100ec:	193ffb36 	bltu	r3,r4,100100dc <__alt_data_end+0xf80100dc>
100100f0:	003fe706 	br	10010090 <__alt_data_end+0xf8010090>

100100f4 <__mcmp>:
100100f4:	20800417 	ldw	r2,16(r4)
100100f8:	28c00417 	ldw	r3,16(r5)
100100fc:	10c5c83a 	sub	r2,r2,r3
10010100:	1000111e 	bne	r2,zero,10010148 <__mcmp+0x54>
10010104:	18c7883a 	add	r3,r3,r3
10010108:	18c7883a 	add	r3,r3,r3
1001010c:	21000504 	addi	r4,r4,20
10010110:	29400504 	addi	r5,r5,20
10010114:	20c5883a 	add	r2,r4,r3
10010118:	28cb883a 	add	r5,r5,r3
1001011c:	00000106 	br	10010124 <__mcmp+0x30>
10010120:	20800a2e 	bgeu	r4,r2,1001014c <__mcmp+0x58>
10010124:	10bfff04 	addi	r2,r2,-4
10010128:	297fff04 	addi	r5,r5,-4
1001012c:	11800017 	ldw	r6,0(r2)
10010130:	28c00017 	ldw	r3,0(r5)
10010134:	30fffa26 	beq	r6,r3,10010120 <__alt_data_end+0xf8010120>
10010138:	30c00236 	bltu	r6,r3,10010144 <__mcmp+0x50>
1001013c:	00800044 	movi	r2,1
10010140:	f800283a 	ret
10010144:	00bfffc4 	movi	r2,-1
10010148:	f800283a 	ret
1001014c:	0005883a 	mov	r2,zero
10010150:	f800283a 	ret

10010154 <__mdiff>:
10010154:	defffb04 	addi	sp,sp,-20
10010158:	dc000015 	stw	r16,0(sp)
1001015c:	2821883a 	mov	r16,r5
10010160:	dcc00315 	stw	r19,12(sp)
10010164:	300b883a 	mov	r5,r6
10010168:	2027883a 	mov	r19,r4
1001016c:	8009883a 	mov	r4,r16
10010170:	dc800215 	stw	r18,8(sp)
10010174:	dfc00415 	stw	ra,16(sp)
10010178:	dc400115 	stw	r17,4(sp)
1001017c:	3025883a 	mov	r18,r6
10010180:	00100f40 	call	100100f4 <__mcmp>
10010184:	10005226 	beq	r2,zero,100102d0 <__mdiff+0x17c>
10010188:	10004c16 	blt	r2,zero,100102bc <__mdiff+0x168>
1001018c:	0023883a 	mov	r17,zero
10010190:	81400117 	ldw	r5,4(r16)
10010194:	9809883a 	mov	r4,r19
10010198:	000f7780 	call	1000f778 <_Balloc>
1001019c:	83400417 	ldw	r13,16(r16)
100101a0:	93800417 	ldw	r14,16(r18)
100101a4:	81000504 	addi	r4,r16,20
100101a8:	6b59883a 	add	r12,r13,r13
100101ac:	739d883a 	add	r14,r14,r14
100101b0:	6319883a 	add	r12,r12,r12
100101b4:	91800504 	addi	r6,r18,20
100101b8:	739d883a 	add	r14,r14,r14
100101bc:	14400315 	stw	r17,12(r2)
100101c0:	2319883a 	add	r12,r4,r12
100101c4:	339d883a 	add	r14,r6,r14
100101c8:	12400504 	addi	r9,r2,20
100101cc:	0007883a 	mov	r3,zero
100101d0:	22000017 	ldw	r8,0(r4)
100101d4:	32800017 	ldw	r10,0(r6)
100101d8:	4ac00104 	addi	r11,r9,4
100101dc:	41ffffcc 	andi	r7,r8,65535
100101e0:	38c7883a 	add	r3,r7,r3
100101e4:	51ffffcc 	andi	r7,r10,65535
100101e8:	19cfc83a 	sub	r7,r3,r7
100101ec:	4010d43a 	srli	r8,r8,16
100101f0:	5014d43a 	srli	r10,r10,16
100101f4:	3807d43a 	srai	r3,r7,16
100101f8:	39ffffcc 	andi	r7,r7,65535
100101fc:	4291c83a 	sub	r8,r8,r10
10010200:	40c7883a 	add	r3,r8,r3
10010204:	1810943a 	slli	r8,r3,16
10010208:	31800104 	addi	r6,r6,4
1001020c:	21000104 	addi	r4,r4,4
10010210:	41ceb03a 	or	r7,r8,r7
10010214:	49c00015 	stw	r7,0(r9)
10010218:	1807d43a 	srai	r3,r3,16
1001021c:	580b883a 	mov	r5,r11
10010220:	5813883a 	mov	r9,r11
10010224:	33bfea36 	bltu	r6,r14,100101d0 <__alt_data_end+0xf80101d0>
10010228:	2011883a 	mov	r8,r4
1001022c:	2300152e 	bgeu	r4,r12,10010284 <__mdiff+0x130>
10010230:	21400017 	ldw	r5,0(r4)
10010234:	4a400104 	addi	r9,r9,4
10010238:	21000104 	addi	r4,r4,4
1001023c:	29ffffcc 	andi	r7,r5,65535
10010240:	38c7883a 	add	r3,r7,r3
10010244:	280ad43a 	srli	r5,r5,16
10010248:	180dd43a 	srai	r6,r3,16
1001024c:	19ffffcc 	andi	r7,r3,65535
10010250:	3147883a 	add	r3,r6,r5
10010254:	180a943a 	slli	r5,r3,16
10010258:	1807d43a 	srai	r3,r3,16
1001025c:	29ceb03a 	or	r7,r5,r7
10010260:	49ffff15 	stw	r7,-4(r9)
10010264:	233ff236 	bltu	r4,r12,10010230 <__alt_data_end+0xf8010230>
10010268:	0206303a 	nor	r3,zero,r8
1001026c:	1b07883a 	add	r3,r3,r12
10010270:	1806d0ba 	srli	r3,r3,2
10010274:	18c00044 	addi	r3,r3,1
10010278:	18c7883a 	add	r3,r3,r3
1001027c:	18c7883a 	add	r3,r3,r3
10010280:	58cb883a 	add	r5,r11,r3
10010284:	28ffff04 	addi	r3,r5,-4
10010288:	3800041e 	bne	r7,zero,1001029c <__mdiff+0x148>
1001028c:	18ffff04 	addi	r3,r3,-4
10010290:	19000017 	ldw	r4,0(r3)
10010294:	6b7fffc4 	addi	r13,r13,-1
10010298:	203ffc26 	beq	r4,zero,1001028c <__alt_data_end+0xf801028c>
1001029c:	13400415 	stw	r13,16(r2)
100102a0:	dfc00417 	ldw	ra,16(sp)
100102a4:	dcc00317 	ldw	r19,12(sp)
100102a8:	dc800217 	ldw	r18,8(sp)
100102ac:	dc400117 	ldw	r17,4(sp)
100102b0:	dc000017 	ldw	r16,0(sp)
100102b4:	dec00504 	addi	sp,sp,20
100102b8:	f800283a 	ret
100102bc:	8005883a 	mov	r2,r16
100102c0:	04400044 	movi	r17,1
100102c4:	9021883a 	mov	r16,r18
100102c8:	1025883a 	mov	r18,r2
100102cc:	003fb006 	br	10010190 <__alt_data_end+0xf8010190>
100102d0:	9809883a 	mov	r4,r19
100102d4:	000b883a 	mov	r5,zero
100102d8:	000f7780 	call	1000f778 <_Balloc>
100102dc:	00c00044 	movi	r3,1
100102e0:	10c00415 	stw	r3,16(r2)
100102e4:	10000515 	stw	zero,20(r2)
100102e8:	003fed06 	br	100102a0 <__alt_data_end+0xf80102a0>

100102ec <__ulp>:
100102ec:	295ffc2c 	andhi	r5,r5,32752
100102f0:	00bf3034 	movhi	r2,64704
100102f4:	2887883a 	add	r3,r5,r2
100102f8:	00c0020e 	bge	zero,r3,10010304 <__ulp+0x18>
100102fc:	0005883a 	mov	r2,zero
10010300:	f800283a 	ret
10010304:	00c7c83a 	sub	r3,zero,r3
10010308:	180bd53a 	srai	r5,r3,20
1001030c:	008004c4 	movi	r2,19
10010310:	11400a0e 	bge	r2,r5,1001033c <__ulp+0x50>
10010314:	00800c84 	movi	r2,50
10010318:	0007883a 	mov	r3,zero
1001031c:	11400516 	blt	r2,r5,10010334 <__ulp+0x48>
10010320:	00800cc4 	movi	r2,51
10010324:	114bc83a 	sub	r5,r2,r5
10010328:	00800044 	movi	r2,1
1001032c:	1144983a 	sll	r2,r2,r5
10010330:	f800283a 	ret
10010334:	00800044 	movi	r2,1
10010338:	f800283a 	ret
1001033c:	00800234 	movhi	r2,8
10010340:	1147d83a 	sra	r3,r2,r5
10010344:	0005883a 	mov	r2,zero
10010348:	f800283a 	ret

1001034c <__b2d>:
1001034c:	defffa04 	addi	sp,sp,-24
10010350:	dc000015 	stw	r16,0(sp)
10010354:	24000417 	ldw	r16,16(r4)
10010358:	dc400115 	stw	r17,4(sp)
1001035c:	24400504 	addi	r17,r4,20
10010360:	8421883a 	add	r16,r16,r16
10010364:	8421883a 	add	r16,r16,r16
10010368:	8c21883a 	add	r16,r17,r16
1001036c:	dc800215 	stw	r18,8(sp)
10010370:	84bfff17 	ldw	r18,-4(r16)
10010374:	dd000415 	stw	r20,16(sp)
10010378:	dcc00315 	stw	r19,12(sp)
1001037c:	9009883a 	mov	r4,r18
10010380:	2829883a 	mov	r20,r5
10010384:	dfc00515 	stw	ra,20(sp)
10010388:	000fa880 	call	1000fa88 <__hi0bits>
1001038c:	00c00804 	movi	r3,32
10010390:	1887c83a 	sub	r3,r3,r2
10010394:	a0c00015 	stw	r3,0(r20)
10010398:	00c00284 	movi	r3,10
1001039c:	84ffff04 	addi	r19,r16,-4
100103a0:	18801216 	blt	r3,r2,100103ec <__b2d+0xa0>
100103a4:	014002c4 	movi	r5,11
100103a8:	2889c83a 	sub	r4,r5,r2
100103ac:	9106d83a 	srl	r3,r18,r4
100103b0:	18cffc34 	orhi	r3,r3,16368
100103b4:	8cc0282e 	bgeu	r17,r19,10010458 <__b2d+0x10c>
100103b8:	817ffe17 	ldw	r5,-8(r16)
100103bc:	290ad83a 	srl	r5,r5,r4
100103c0:	10800544 	addi	r2,r2,21
100103c4:	9084983a 	sll	r2,r18,r2
100103c8:	2884b03a 	or	r2,r5,r2
100103cc:	dfc00517 	ldw	ra,20(sp)
100103d0:	dd000417 	ldw	r20,16(sp)
100103d4:	dcc00317 	ldw	r19,12(sp)
100103d8:	dc800217 	ldw	r18,8(sp)
100103dc:	dc400117 	ldw	r17,4(sp)
100103e0:	dc000017 	ldw	r16,0(sp)
100103e4:	dec00604 	addi	sp,sp,24
100103e8:	f800283a 	ret
100103ec:	113ffd44 	addi	r4,r2,-11
100103f0:	8cc00f2e 	bgeu	r17,r19,10010430 <__b2d+0xe4>
100103f4:	81bffe04 	addi	r6,r16,-8
100103f8:	817ffe17 	ldw	r5,-8(r16)
100103fc:	20001326 	beq	r4,zero,1001044c <__b2d+0x100>
10010400:	00c00ac4 	movi	r3,43
10010404:	1885c83a 	sub	r2,r3,r2
10010408:	2886d83a 	srl	r3,r5,r2
1001040c:	9124983a 	sll	r18,r18,r4
10010410:	90e4b03a 	or	r18,r18,r3
10010414:	90cffc34 	orhi	r3,r18,16368
10010418:	8980112e 	bgeu	r17,r6,10010460 <__b2d+0x114>
1001041c:	81bffd17 	ldw	r6,-12(r16)
10010420:	308cd83a 	srl	r6,r6,r2
10010424:	2904983a 	sll	r2,r5,r4
10010428:	1184b03a 	or	r2,r2,r6
1001042c:	003fe706 	br	100103cc <__alt_data_end+0xf80103cc>
10010430:	20000526 	beq	r4,zero,10010448 <__b2d+0xfc>
10010434:	9124983a 	sll	r18,r18,r4
10010438:	000d883a 	mov	r6,zero
1001043c:	000b883a 	mov	r5,zero
10010440:	90cffc34 	orhi	r3,r18,16368
10010444:	003ff706 	br	10010424 <__alt_data_end+0xf8010424>
10010448:	000b883a 	mov	r5,zero
1001044c:	90cffc34 	orhi	r3,r18,16368
10010450:	2805883a 	mov	r2,r5
10010454:	003fdd06 	br	100103cc <__alt_data_end+0xf80103cc>
10010458:	000b883a 	mov	r5,zero
1001045c:	003fd806 	br	100103c0 <__alt_data_end+0xf80103c0>
10010460:	000d883a 	mov	r6,zero
10010464:	003fef06 	br	10010424 <__alt_data_end+0xf8010424>

10010468 <__d2b>:
10010468:	defff704 	addi	sp,sp,-36
1001046c:	dc000215 	stw	r16,8(sp)
10010470:	3021883a 	mov	r16,r6
10010474:	dc400315 	stw	r17,12(sp)
10010478:	8022907a 	slli	r17,r16,1
1001047c:	dd400715 	stw	r21,28(sp)
10010480:	282b883a 	mov	r21,r5
10010484:	01400044 	movi	r5,1
10010488:	dd000615 	stw	r20,24(sp)
1001048c:	dcc00515 	stw	r19,20(sp)
10010490:	dc800415 	stw	r18,16(sp)
10010494:	dfc00815 	stw	ra,32(sp)
10010498:	3829883a 	mov	r20,r7
1001049c:	dc800917 	ldw	r18,36(sp)
100104a0:	8822d57a 	srli	r17,r17,21
100104a4:	000f7780 	call	1000f778 <_Balloc>
100104a8:	1027883a 	mov	r19,r2
100104ac:	00800434 	movhi	r2,16
100104b0:	10bfffc4 	addi	r2,r2,-1
100104b4:	808c703a 	and	r6,r16,r2
100104b8:	88000126 	beq	r17,zero,100104c0 <__d2b+0x58>
100104bc:	31800434 	orhi	r6,r6,16
100104c0:	d9800015 	stw	r6,0(sp)
100104c4:	a8001f26 	beq	r21,zero,10010544 <__d2b+0xdc>
100104c8:	d9000104 	addi	r4,sp,4
100104cc:	dd400115 	stw	r21,4(sp)
100104d0:	000faf00 	call	1000faf0 <__lo0bits>
100104d4:	d8c00017 	ldw	r3,0(sp)
100104d8:	1000291e 	bne	r2,zero,10010580 <__d2b+0x118>
100104dc:	d9000117 	ldw	r4,4(sp)
100104e0:	99000515 	stw	r4,20(r19)
100104e4:	1820c03a 	cmpne	r16,r3,zero
100104e8:	84000044 	addi	r16,r16,1
100104ec:	98c00615 	stw	r3,24(r19)
100104f0:	9c000415 	stw	r16,16(r19)
100104f4:	88001b1e 	bne	r17,zero,10010564 <__d2b+0xfc>
100104f8:	800690ba 	slli	r3,r16,2
100104fc:	10bef384 	addi	r2,r2,-1074
10010500:	a0800015 	stw	r2,0(r20)
10010504:	98c5883a 	add	r2,r19,r3
10010508:	11000417 	ldw	r4,16(r2)
1001050c:	8020917a 	slli	r16,r16,5
10010510:	000fa880 	call	1000fa88 <__hi0bits>
10010514:	8085c83a 	sub	r2,r16,r2
10010518:	90800015 	stw	r2,0(r18)
1001051c:	9805883a 	mov	r2,r19
10010520:	dfc00817 	ldw	ra,32(sp)
10010524:	dd400717 	ldw	r21,28(sp)
10010528:	dd000617 	ldw	r20,24(sp)
1001052c:	dcc00517 	ldw	r19,20(sp)
10010530:	dc800417 	ldw	r18,16(sp)
10010534:	dc400317 	ldw	r17,12(sp)
10010538:	dc000217 	ldw	r16,8(sp)
1001053c:	dec00904 	addi	sp,sp,36
10010540:	f800283a 	ret
10010544:	d809883a 	mov	r4,sp
10010548:	000faf00 	call	1000faf0 <__lo0bits>
1001054c:	d8c00017 	ldw	r3,0(sp)
10010550:	04000044 	movi	r16,1
10010554:	9c000415 	stw	r16,16(r19)
10010558:	98c00515 	stw	r3,20(r19)
1001055c:	10800804 	addi	r2,r2,32
10010560:	883fe526 	beq	r17,zero,100104f8 <__alt_data_end+0xf80104f8>
10010564:	8c7ef344 	addi	r17,r17,-1075
10010568:	88a3883a 	add	r17,r17,r2
1001056c:	00c00d44 	movi	r3,53
10010570:	a4400015 	stw	r17,0(r20)
10010574:	1885c83a 	sub	r2,r3,r2
10010578:	90800015 	stw	r2,0(r18)
1001057c:	003fe706 	br	1001051c <__alt_data_end+0xf801051c>
10010580:	01000804 	movi	r4,32
10010584:	2089c83a 	sub	r4,r4,r2
10010588:	1908983a 	sll	r4,r3,r4
1001058c:	d9400117 	ldw	r5,4(sp)
10010590:	1886d83a 	srl	r3,r3,r2
10010594:	2148b03a 	or	r4,r4,r5
10010598:	99000515 	stw	r4,20(r19)
1001059c:	d8c00015 	stw	r3,0(sp)
100105a0:	003fd006 	br	100104e4 <__alt_data_end+0xf80104e4>

100105a4 <__ratio>:
100105a4:	defff904 	addi	sp,sp,-28
100105a8:	dc400315 	stw	r17,12(sp)
100105ac:	2823883a 	mov	r17,r5
100105b0:	d9400104 	addi	r5,sp,4
100105b4:	dfc00615 	stw	ra,24(sp)
100105b8:	dcc00515 	stw	r19,20(sp)
100105bc:	dc800415 	stw	r18,16(sp)
100105c0:	2027883a 	mov	r19,r4
100105c4:	dc000215 	stw	r16,8(sp)
100105c8:	001034c0 	call	1001034c <__b2d>
100105cc:	8809883a 	mov	r4,r17
100105d0:	d80b883a 	mov	r5,sp
100105d4:	1025883a 	mov	r18,r2
100105d8:	1821883a 	mov	r16,r3
100105dc:	001034c0 	call	1001034c <__b2d>
100105e0:	8a400417 	ldw	r9,16(r17)
100105e4:	9a000417 	ldw	r8,16(r19)
100105e8:	100d883a 	mov	r6,r2
100105ec:	d8800017 	ldw	r2,0(sp)
100105f0:	4251c83a 	sub	r8,r8,r9
100105f4:	4012917a 	slli	r9,r8,5
100105f8:	da000117 	ldw	r8,4(sp)
100105fc:	4091c83a 	sub	r8,r8,r2
10010600:	4251883a 	add	r8,r8,r9
10010604:	02000d0e 	bge	zero,r8,1001063c <__ratio+0x98>
10010608:	4010953a 	slli	r8,r8,20
1001060c:	4421883a 	add	r16,r8,r16
10010610:	9009883a 	mov	r4,r18
10010614:	800b883a 	mov	r5,r16
10010618:	180f883a 	mov	r7,r3
1001061c:	00144b40 	call	100144b4 <__divdf3>
10010620:	dfc00617 	ldw	ra,24(sp)
10010624:	dcc00517 	ldw	r19,20(sp)
10010628:	dc800417 	ldw	r18,16(sp)
1001062c:	dc400317 	ldw	r17,12(sp)
10010630:	dc000217 	ldw	r16,8(sp)
10010634:	dec00704 	addi	sp,sp,28
10010638:	f800283a 	ret
1001063c:	4010953a 	slli	r8,r8,20
10010640:	1a07c83a 	sub	r3,r3,r8
10010644:	003ff206 	br	10010610 <__alt_data_end+0xf8010610>

10010648 <_mprec_log10>:
10010648:	defffe04 	addi	sp,sp,-8
1001064c:	dc000015 	stw	r16,0(sp)
10010650:	dfc00115 	stw	ra,4(sp)
10010654:	008005c4 	movi	r2,23
10010658:	2021883a 	mov	r16,r4
1001065c:	11000d0e 	bge	r2,r4,10010694 <_mprec_log10+0x4c>
10010660:	0005883a 	mov	r2,zero
10010664:	00cffc34 	movhi	r3,16368
10010668:	843fffc4 	addi	r16,r16,-1
1001066c:	1009883a 	mov	r4,r2
10010670:	180b883a 	mov	r5,r3
10010674:	000d883a 	mov	r6,zero
10010678:	01d00934 	movhi	r7,16420
1001067c:	00086340 	call	10008634 <__muldf3>
10010680:	803ff91e 	bne	r16,zero,10010668 <__alt_data_end+0xf8010668>
10010684:	dfc00117 	ldw	ra,4(sp)
10010688:	dc000017 	ldw	r16,0(sp)
1001068c:	dec00204 	addi	sp,sp,8
10010690:	f800283a 	ret
10010694:	202090fa 	slli	r16,r4,3
10010698:	008400b4 	movhi	r2,4098
1001069c:	10a79704 	addi	r2,r2,-24996
100106a0:	1421883a 	add	r16,r2,r16
100106a4:	80800017 	ldw	r2,0(r16)
100106a8:	80c00117 	ldw	r3,4(r16)
100106ac:	dfc00117 	ldw	ra,4(sp)
100106b0:	dc000017 	ldw	r16,0(sp)
100106b4:	dec00204 	addi	sp,sp,8
100106b8:	f800283a 	ret

100106bc <__copybits>:
100106bc:	297fffc4 	addi	r5,r5,-1
100106c0:	280fd17a 	srai	r7,r5,5
100106c4:	30c00417 	ldw	r3,16(r6)
100106c8:	30800504 	addi	r2,r6,20
100106cc:	39c00044 	addi	r7,r7,1
100106d0:	18c7883a 	add	r3,r3,r3
100106d4:	39cf883a 	add	r7,r7,r7
100106d8:	18c7883a 	add	r3,r3,r3
100106dc:	39cf883a 	add	r7,r7,r7
100106e0:	10c7883a 	add	r3,r2,r3
100106e4:	21cf883a 	add	r7,r4,r7
100106e8:	10c00d2e 	bgeu	r2,r3,10010720 <__copybits+0x64>
100106ec:	200b883a 	mov	r5,r4
100106f0:	12000017 	ldw	r8,0(r2)
100106f4:	29400104 	addi	r5,r5,4
100106f8:	10800104 	addi	r2,r2,4
100106fc:	2a3fff15 	stw	r8,-4(r5)
10010700:	10fffb36 	bltu	r2,r3,100106f0 <__alt_data_end+0xf80106f0>
10010704:	1985c83a 	sub	r2,r3,r6
10010708:	10bffac4 	addi	r2,r2,-21
1001070c:	1004d0ba 	srli	r2,r2,2
10010710:	10800044 	addi	r2,r2,1
10010714:	1085883a 	add	r2,r2,r2
10010718:	1085883a 	add	r2,r2,r2
1001071c:	2089883a 	add	r4,r4,r2
10010720:	21c0032e 	bgeu	r4,r7,10010730 <__copybits+0x74>
10010724:	20000015 	stw	zero,0(r4)
10010728:	21000104 	addi	r4,r4,4
1001072c:	21fffd36 	bltu	r4,r7,10010724 <__alt_data_end+0xf8010724>
10010730:	f800283a 	ret

10010734 <__any_on>:
10010734:	20c00417 	ldw	r3,16(r4)
10010738:	2805d17a 	srai	r2,r5,5
1001073c:	21000504 	addi	r4,r4,20
10010740:	18800d0e 	bge	r3,r2,10010778 <__any_on+0x44>
10010744:	18c7883a 	add	r3,r3,r3
10010748:	18c7883a 	add	r3,r3,r3
1001074c:	20c7883a 	add	r3,r4,r3
10010750:	20c0192e 	bgeu	r4,r3,100107b8 <__any_on+0x84>
10010754:	18bfff17 	ldw	r2,-4(r3)
10010758:	18ffff04 	addi	r3,r3,-4
1001075c:	1000041e 	bne	r2,zero,10010770 <__any_on+0x3c>
10010760:	20c0142e 	bgeu	r4,r3,100107b4 <__any_on+0x80>
10010764:	18ffff04 	addi	r3,r3,-4
10010768:	19400017 	ldw	r5,0(r3)
1001076c:	283ffc26 	beq	r5,zero,10010760 <__alt_data_end+0xf8010760>
10010770:	00800044 	movi	r2,1
10010774:	f800283a 	ret
10010778:	10c00a0e 	bge	r2,r3,100107a4 <__any_on+0x70>
1001077c:	1085883a 	add	r2,r2,r2
10010780:	1085883a 	add	r2,r2,r2
10010784:	294007cc 	andi	r5,r5,31
10010788:	2087883a 	add	r3,r4,r2
1001078c:	283ff026 	beq	r5,zero,10010750 <__alt_data_end+0xf8010750>
10010790:	19800017 	ldw	r6,0(r3)
10010794:	3144d83a 	srl	r2,r6,r5
10010798:	114a983a 	sll	r5,r2,r5
1001079c:	29bff41e 	bne	r5,r6,10010770 <__alt_data_end+0xf8010770>
100107a0:	003feb06 	br	10010750 <__alt_data_end+0xf8010750>
100107a4:	1085883a 	add	r2,r2,r2
100107a8:	1085883a 	add	r2,r2,r2
100107ac:	2087883a 	add	r3,r4,r2
100107b0:	003fe706 	br	10010750 <__alt_data_end+0xf8010750>
100107b4:	f800283a 	ret
100107b8:	0005883a 	mov	r2,zero
100107bc:	f800283a 	ret

100107c0 <_realloc_r>:
100107c0:	defff604 	addi	sp,sp,-40
100107c4:	dcc00315 	stw	r19,12(sp)
100107c8:	dc400115 	stw	r17,4(sp)
100107cc:	dfc00915 	stw	ra,36(sp)
100107d0:	df000815 	stw	fp,32(sp)
100107d4:	ddc00715 	stw	r23,28(sp)
100107d8:	dd800615 	stw	r22,24(sp)
100107dc:	dd400515 	stw	r21,20(sp)
100107e0:	dd000415 	stw	r20,16(sp)
100107e4:	dc800215 	stw	r18,8(sp)
100107e8:	dc000015 	stw	r16,0(sp)
100107ec:	2827883a 	mov	r19,r5
100107f0:	3023883a 	mov	r17,r6
100107f4:	2800bf26 	beq	r5,zero,10010af4 <_realloc_r+0x334>
100107f8:	2025883a 	mov	r18,r4
100107fc:	001585c0 	call	1001585c <__malloc_lock>
10010800:	98ffff17 	ldw	r3,-4(r19)
10010804:	01bfff04 	movi	r6,-4
10010808:	890002c4 	addi	r4,r17,11
1001080c:	01c00584 	movi	r7,22
10010810:	9d7ffe04 	addi	r21,r19,-8
10010814:	19a0703a 	and	r16,r3,r6
10010818:	39003f2e 	bgeu	r7,r4,10010918 <_realloc_r+0x158>
1001081c:	053ffe04 	movi	r20,-8
10010820:	2528703a 	and	r20,r4,r20
10010824:	a00f883a 	mov	r7,r20
10010828:	a0008216 	blt	r20,zero,10010a34 <_realloc_r+0x274>
1001082c:	a4408136 	bltu	r20,r17,10010a34 <_realloc_r+0x274>
10010830:	81c03c0e 	bge	r16,r7,10010924 <_realloc_r+0x164>
10010834:	070400b4 	movhi	fp,4098
10010838:	e7290504 	addi	fp,fp,-23532
1001083c:	e1000217 	ldw	r4,8(fp)
10010840:	ac05883a 	add	r2,r21,r16
10010844:	2080bf26 	beq	r4,r2,10010b44 <_realloc_r+0x384>
10010848:	11000117 	ldw	r4,4(r2)
1001084c:	023fff84 	movi	r8,-2
10010850:	2210703a 	and	r8,r4,r8
10010854:	1211883a 	add	r8,r2,r8
10010858:	41400117 	ldw	r5,4(r8)
1001085c:	2940004c 	andi	r5,r5,1
10010860:	28004a1e 	bne	r5,zero,1001098c <_realloc_r+0x1cc>
10010864:	017fff04 	movi	r5,-4
10010868:	2148703a 	and	r4,r4,r5
1001086c:	2409883a 	add	r4,r4,r16
10010870:	21c0ad0e 	bge	r4,r7,10010b28 <_realloc_r+0x368>
10010874:	18c0004c 	andi	r3,r3,1
10010878:	18007f1e 	bne	r3,zero,10010a78 <_realloc_r+0x2b8>
1001087c:	9dfffe17 	ldw	r23,-8(r19)
10010880:	adefc83a 	sub	r23,r21,r23
10010884:	bd800117 	ldw	r22,4(r23)
10010888:	b14a703a 	and	r5,r22,r5
1001088c:	216d883a 	add	r22,r4,r5
10010890:	b1c04516 	blt	r22,r7,100109a8 <_realloc_r+0x1e8>
10010894:	10c00317 	ldw	r3,12(r2)
10010898:	10800217 	ldw	r2,8(r2)
1001089c:	81bfff04 	addi	r6,r16,-4
100108a0:	bc400204 	addi	r17,r23,8
100108a4:	10c00315 	stw	r3,12(r2)
100108a8:	18800215 	stw	r2,8(r3)
100108ac:	b9400217 	ldw	r5,8(r23)
100108b0:	b8c00317 	ldw	r3,12(r23)
100108b4:	00800904 	movi	r2,36
100108b8:	28c00315 	stw	r3,12(r5)
100108bc:	19400215 	stw	r5,8(r3)
100108c0:	1180ef36 	bltu	r2,r6,10010c80 <_realloc_r+0x4c0>
100108c4:	008004c4 	movi	r2,19
100108c8:	1180da2e 	bgeu	r2,r6,10010c34 <_realloc_r+0x474>
100108cc:	98800017 	ldw	r2,0(r19)
100108d0:	b8800215 	stw	r2,8(r23)
100108d4:	98800117 	ldw	r2,4(r19)
100108d8:	b8800315 	stw	r2,12(r23)
100108dc:	008006c4 	movi	r2,27
100108e0:	1180fc2e 	bgeu	r2,r6,10010cd4 <_realloc_r+0x514>
100108e4:	98800217 	ldw	r2,8(r19)
100108e8:	b8800415 	stw	r2,16(r23)
100108ec:	98800317 	ldw	r2,12(r19)
100108f0:	b8800515 	stw	r2,20(r23)
100108f4:	00800904 	movi	r2,36
100108f8:	3080421e 	bne	r6,r2,10010a04 <_realloc_r+0x244>
100108fc:	98800417 	ldw	r2,16(r19)
10010900:	9cc00604 	addi	r19,r19,24
10010904:	b8c00804 	addi	r3,r23,32
10010908:	b8800615 	stw	r2,24(r23)
1001090c:	98bfff17 	ldw	r2,-4(r19)
10010910:	b8800715 	stw	r2,28(r23)
10010914:	00003d06 	br	10010a0c <_realloc_r+0x24c>
10010918:	01c00404 	movi	r7,16
1001091c:	3829883a 	mov	r20,r7
10010920:	003fc206 	br	1001082c <__alt_data_end+0xf801082c>
10010924:	9823883a 	mov	r17,r19
10010928:	850fc83a 	sub	r7,r16,r20
1001092c:	008003c4 	movi	r2,15
10010930:	18c0004c 	andi	r3,r3,1
10010934:	11c04336 	bltu	r2,r7,10010a44 <_realloc_r+0x284>
10010938:	1c06b03a 	or	r3,r3,r16
1001093c:	a8c00115 	stw	r3,4(r21)
10010940:	ac21883a 	add	r16,r21,r16
10010944:	80c00117 	ldw	r3,4(r16)
10010948:	18c00054 	ori	r3,r3,1
1001094c:	80c00115 	stw	r3,4(r16)
10010950:	9009883a 	mov	r4,r18
10010954:	00158800 	call	10015880 <__malloc_unlock>
10010958:	8805883a 	mov	r2,r17
1001095c:	dfc00917 	ldw	ra,36(sp)
10010960:	df000817 	ldw	fp,32(sp)
10010964:	ddc00717 	ldw	r23,28(sp)
10010968:	dd800617 	ldw	r22,24(sp)
1001096c:	dd400517 	ldw	r21,20(sp)
10010970:	dd000417 	ldw	r20,16(sp)
10010974:	dcc00317 	ldw	r19,12(sp)
10010978:	dc800217 	ldw	r18,8(sp)
1001097c:	dc400117 	ldw	r17,4(sp)
10010980:	dc000017 	ldw	r16,0(sp)
10010984:	dec00a04 	addi	sp,sp,40
10010988:	f800283a 	ret
1001098c:	18c0004c 	andi	r3,r3,1
10010990:	1800391e 	bne	r3,zero,10010a78 <_realloc_r+0x2b8>
10010994:	9dfffe17 	ldw	r23,-8(r19)
10010998:	00bfff04 	movi	r2,-4
1001099c:	adefc83a 	sub	r23,r21,r23
100109a0:	b9400117 	ldw	r5,4(r23)
100109a4:	288a703a 	and	r5,r5,r2
100109a8:	2c2d883a 	add	r22,r5,r16
100109ac:	b1c03216 	blt	r22,r7,10010a78 <_realloc_r+0x2b8>
100109b0:	b8800317 	ldw	r2,12(r23)
100109b4:	b8c00217 	ldw	r3,8(r23)
100109b8:	81bfff04 	addi	r6,r16,-4
100109bc:	01000904 	movi	r4,36
100109c0:	18800315 	stw	r2,12(r3)
100109c4:	10c00215 	stw	r3,8(r2)
100109c8:	bc400204 	addi	r17,r23,8
100109cc:	2180ac36 	bltu	r4,r6,10010c80 <_realloc_r+0x4c0>
100109d0:	008004c4 	movi	r2,19
100109d4:	1180972e 	bgeu	r2,r6,10010c34 <_realloc_r+0x474>
100109d8:	98800017 	ldw	r2,0(r19)
100109dc:	b8800215 	stw	r2,8(r23)
100109e0:	98800117 	ldw	r2,4(r19)
100109e4:	b8800315 	stw	r2,12(r23)
100109e8:	008006c4 	movi	r2,27
100109ec:	1180b92e 	bgeu	r2,r6,10010cd4 <_realloc_r+0x514>
100109f0:	98800217 	ldw	r2,8(r19)
100109f4:	b8800415 	stw	r2,16(r23)
100109f8:	98800317 	ldw	r2,12(r19)
100109fc:	b8800515 	stw	r2,20(r23)
10010a00:	313fbe26 	beq	r6,r4,100108fc <__alt_data_end+0xf80108fc>
10010a04:	b8c00604 	addi	r3,r23,24
10010a08:	9cc00404 	addi	r19,r19,16
10010a0c:	98800017 	ldw	r2,0(r19)
10010a10:	b021883a 	mov	r16,r22
10010a14:	b82b883a 	mov	r21,r23
10010a18:	18800015 	stw	r2,0(r3)
10010a1c:	98800117 	ldw	r2,4(r19)
10010a20:	18800115 	stw	r2,4(r3)
10010a24:	98800217 	ldw	r2,8(r19)
10010a28:	18800215 	stw	r2,8(r3)
10010a2c:	b8c00117 	ldw	r3,4(r23)
10010a30:	003fbd06 	br	10010928 <__alt_data_end+0xf8010928>
10010a34:	00800304 	movi	r2,12
10010a38:	90800015 	stw	r2,0(r18)
10010a3c:	0005883a 	mov	r2,zero
10010a40:	003fc606 	br	1001095c <__alt_data_end+0xf801095c>
10010a44:	1d06b03a 	or	r3,r3,r20
10010a48:	ad0b883a 	add	r5,r21,r20
10010a4c:	a8c00115 	stw	r3,4(r21)
10010a50:	38800054 	ori	r2,r7,1
10010a54:	28800115 	stw	r2,4(r5)
10010a58:	29cf883a 	add	r7,r5,r7
10010a5c:	38800117 	ldw	r2,4(r7)
10010a60:	9009883a 	mov	r4,r18
10010a64:	29400204 	addi	r5,r5,8
10010a68:	10800054 	ori	r2,r2,1
10010a6c:	38800115 	stw	r2,4(r7)
10010a70:	000e0cc0 	call	1000e0cc <_free_r>
10010a74:	003fb606 	br	10010950 <__alt_data_end+0xf8010950>
10010a78:	880b883a 	mov	r5,r17
10010a7c:	9009883a 	mov	r4,r18
10010a80:	000ec680 	call	1000ec68 <_malloc_r>
10010a84:	1023883a 	mov	r17,r2
10010a88:	1000aa26 	beq	r2,zero,10010d34 <_realloc_r+0x574>
10010a8c:	98ffff17 	ldw	r3,-4(r19)
10010a90:	113ffe04 	addi	r4,r2,-8
10010a94:	00bfff84 	movi	r2,-2
10010a98:	1884703a 	and	r2,r3,r2
10010a9c:	a885883a 	add	r2,r21,r2
10010aa0:	20808626 	beq	r4,r2,10010cbc <_realloc_r+0x4fc>
10010aa4:	81bfff04 	addi	r6,r16,-4
10010aa8:	00800904 	movi	r2,36
10010aac:	11807036 	bltu	r2,r6,10010c70 <_realloc_r+0x4b0>
10010ab0:	00c004c4 	movi	r3,19
10010ab4:	19805636 	bltu	r3,r6,10010c10 <_realloc_r+0x450>
10010ab8:	8805883a 	mov	r2,r17
10010abc:	9807883a 	mov	r3,r19
10010ac0:	19000017 	ldw	r4,0(r3)
10010ac4:	11000015 	stw	r4,0(r2)
10010ac8:	19000117 	ldw	r4,4(r3)
10010acc:	11000115 	stw	r4,4(r2)
10010ad0:	18c00217 	ldw	r3,8(r3)
10010ad4:	10c00215 	stw	r3,8(r2)
10010ad8:	980b883a 	mov	r5,r19
10010adc:	9009883a 	mov	r4,r18
10010ae0:	000e0cc0 	call	1000e0cc <_free_r>
10010ae4:	9009883a 	mov	r4,r18
10010ae8:	00158800 	call	10015880 <__malloc_unlock>
10010aec:	8805883a 	mov	r2,r17
10010af0:	003f9a06 	br	1001095c <__alt_data_end+0xf801095c>
10010af4:	300b883a 	mov	r5,r6
10010af8:	dfc00917 	ldw	ra,36(sp)
10010afc:	df000817 	ldw	fp,32(sp)
10010b00:	ddc00717 	ldw	r23,28(sp)
10010b04:	dd800617 	ldw	r22,24(sp)
10010b08:	dd400517 	ldw	r21,20(sp)
10010b0c:	dd000417 	ldw	r20,16(sp)
10010b10:	dcc00317 	ldw	r19,12(sp)
10010b14:	dc800217 	ldw	r18,8(sp)
10010b18:	dc400117 	ldw	r17,4(sp)
10010b1c:	dc000017 	ldw	r16,0(sp)
10010b20:	dec00a04 	addi	sp,sp,40
10010b24:	000ec681 	jmpi	1000ec68 <_malloc_r>
10010b28:	11400317 	ldw	r5,12(r2)
10010b2c:	10800217 	ldw	r2,8(r2)
10010b30:	9823883a 	mov	r17,r19
10010b34:	2021883a 	mov	r16,r4
10010b38:	11400315 	stw	r5,12(r2)
10010b3c:	28800215 	stw	r2,8(r5)
10010b40:	003f7906 	br	10010928 <__alt_data_end+0xf8010928>
10010b44:	21000117 	ldw	r4,4(r4)
10010b48:	00bfff04 	movi	r2,-4
10010b4c:	a1800404 	addi	r6,r20,16
10010b50:	2088703a 	and	r4,r4,r2
10010b54:	2409883a 	add	r4,r4,r16
10010b58:	2180380e 	bge	r4,r6,10010c3c <_realloc_r+0x47c>
10010b5c:	18c0004c 	andi	r3,r3,1
10010b60:	183fc51e 	bne	r3,zero,10010a78 <__alt_data_end+0xf8010a78>
10010b64:	9dfffe17 	ldw	r23,-8(r19)
10010b68:	adefc83a 	sub	r23,r21,r23
10010b6c:	b9400117 	ldw	r5,4(r23)
10010b70:	288a703a 	and	r5,r5,r2
10010b74:	216d883a 	add	r22,r4,r5
10010b78:	b1bf8b16 	blt	r22,r6,100109a8 <__alt_data_end+0xf80109a8>
10010b7c:	b8800317 	ldw	r2,12(r23)
10010b80:	b8c00217 	ldw	r3,8(r23)
10010b84:	81bfff04 	addi	r6,r16,-4
10010b88:	01000904 	movi	r4,36
10010b8c:	18800315 	stw	r2,12(r3)
10010b90:	10c00215 	stw	r3,8(r2)
10010b94:	bc400204 	addi	r17,r23,8
10010b98:	21805a36 	bltu	r4,r6,10010d04 <_realloc_r+0x544>
10010b9c:	008004c4 	movi	r2,19
10010ba0:	1180562e 	bgeu	r2,r6,10010cfc <_realloc_r+0x53c>
10010ba4:	98800017 	ldw	r2,0(r19)
10010ba8:	b8800215 	stw	r2,8(r23)
10010bac:	98800117 	ldw	r2,4(r19)
10010bb0:	b8800315 	stw	r2,12(r23)
10010bb4:	008006c4 	movi	r2,27
10010bb8:	11805636 	bltu	r2,r6,10010d14 <_realloc_r+0x554>
10010bbc:	b8800404 	addi	r2,r23,16
10010bc0:	9cc00204 	addi	r19,r19,8
10010bc4:	98c00017 	ldw	r3,0(r19)
10010bc8:	10c00015 	stw	r3,0(r2)
10010bcc:	98c00117 	ldw	r3,4(r19)
10010bd0:	10c00115 	stw	r3,4(r2)
10010bd4:	98c00217 	ldw	r3,8(r19)
10010bd8:	10c00215 	stw	r3,8(r2)
10010bdc:	bd07883a 	add	r3,r23,r20
10010be0:	b505c83a 	sub	r2,r22,r20
10010be4:	e0c00215 	stw	r3,8(fp)
10010be8:	10800054 	ori	r2,r2,1
10010bec:	18800115 	stw	r2,4(r3)
10010bf0:	b8800117 	ldw	r2,4(r23)
10010bf4:	9009883a 	mov	r4,r18
10010bf8:	1080004c 	andi	r2,r2,1
10010bfc:	a0a8b03a 	or	r20,r20,r2
10010c00:	bd000115 	stw	r20,4(r23)
10010c04:	00158800 	call	10015880 <__malloc_unlock>
10010c08:	8805883a 	mov	r2,r17
10010c0c:	003f5306 	br	1001095c <__alt_data_end+0xf801095c>
10010c10:	98c00017 	ldw	r3,0(r19)
10010c14:	88c00015 	stw	r3,0(r17)
10010c18:	98c00117 	ldw	r3,4(r19)
10010c1c:	88c00115 	stw	r3,4(r17)
10010c20:	00c006c4 	movi	r3,27
10010c24:	19801d36 	bltu	r3,r6,10010c9c <_realloc_r+0x4dc>
10010c28:	88800204 	addi	r2,r17,8
10010c2c:	98c00204 	addi	r3,r19,8
10010c30:	003fa306 	br	10010ac0 <__alt_data_end+0xf8010ac0>
10010c34:	8807883a 	mov	r3,r17
10010c38:	003f7406 	br	10010a0c <__alt_data_end+0xf8010a0c>
10010c3c:	ad2b883a 	add	r21,r21,r20
10010c40:	2505c83a 	sub	r2,r4,r20
10010c44:	e5400215 	stw	r21,8(fp)
10010c48:	10800054 	ori	r2,r2,1
10010c4c:	a8800115 	stw	r2,4(r21)
10010c50:	98bfff17 	ldw	r2,-4(r19)
10010c54:	9009883a 	mov	r4,r18
10010c58:	1080004c 	andi	r2,r2,1
10010c5c:	a0a8b03a 	or	r20,r20,r2
10010c60:	9d3fff15 	stw	r20,-4(r19)
10010c64:	00158800 	call	10015880 <__malloc_unlock>
10010c68:	9805883a 	mov	r2,r19
10010c6c:	003f3b06 	br	1001095c <__alt_data_end+0xf801095c>
10010c70:	8809883a 	mov	r4,r17
10010c74:	980b883a 	mov	r5,r19
10010c78:	000f4f80 	call	1000f4f8 <memmove>
10010c7c:	003f9606 	br	10010ad8 <__alt_data_end+0xf8010ad8>
10010c80:	8809883a 	mov	r4,r17
10010c84:	980b883a 	mov	r5,r19
10010c88:	000f4f80 	call	1000f4f8 <memmove>
10010c8c:	b8c00117 	ldw	r3,4(r23)
10010c90:	b021883a 	mov	r16,r22
10010c94:	b82b883a 	mov	r21,r23
10010c98:	003f2306 	br	10010928 <__alt_data_end+0xf8010928>
10010c9c:	98c00217 	ldw	r3,8(r19)
10010ca0:	88c00215 	stw	r3,8(r17)
10010ca4:	98c00317 	ldw	r3,12(r19)
10010ca8:	88c00315 	stw	r3,12(r17)
10010cac:	30800c26 	beq	r6,r2,10010ce0 <_realloc_r+0x520>
10010cb0:	88800404 	addi	r2,r17,16
10010cb4:	98c00404 	addi	r3,r19,16
10010cb8:	003f8106 	br	10010ac0 <__alt_data_end+0xf8010ac0>
10010cbc:	893fff17 	ldw	r4,-4(r17)
10010cc0:	00bfff04 	movi	r2,-4
10010cc4:	9823883a 	mov	r17,r19
10010cc8:	2084703a 	and	r2,r4,r2
10010ccc:	80a1883a 	add	r16,r16,r2
10010cd0:	003f1506 	br	10010928 <__alt_data_end+0xf8010928>
10010cd4:	b8c00404 	addi	r3,r23,16
10010cd8:	9cc00204 	addi	r19,r19,8
10010cdc:	003f4b06 	br	10010a0c <__alt_data_end+0xf8010a0c>
10010ce0:	99000417 	ldw	r4,16(r19)
10010ce4:	88800604 	addi	r2,r17,24
10010ce8:	98c00604 	addi	r3,r19,24
10010cec:	89000415 	stw	r4,16(r17)
10010cf0:	99000517 	ldw	r4,20(r19)
10010cf4:	89000515 	stw	r4,20(r17)
10010cf8:	003f7106 	br	10010ac0 <__alt_data_end+0xf8010ac0>
10010cfc:	8805883a 	mov	r2,r17
10010d00:	003fb006 	br	10010bc4 <__alt_data_end+0xf8010bc4>
10010d04:	8809883a 	mov	r4,r17
10010d08:	980b883a 	mov	r5,r19
10010d0c:	000f4f80 	call	1000f4f8 <memmove>
10010d10:	003fb206 	br	10010bdc <__alt_data_end+0xf8010bdc>
10010d14:	98800217 	ldw	r2,8(r19)
10010d18:	b8800415 	stw	r2,16(r23)
10010d1c:	98800317 	ldw	r2,12(r19)
10010d20:	b8800515 	stw	r2,20(r23)
10010d24:	31000726 	beq	r6,r4,10010d44 <_realloc_r+0x584>
10010d28:	b8800604 	addi	r2,r23,24
10010d2c:	9cc00404 	addi	r19,r19,16
10010d30:	003fa406 	br	10010bc4 <__alt_data_end+0xf8010bc4>
10010d34:	9009883a 	mov	r4,r18
10010d38:	00158800 	call	10015880 <__malloc_unlock>
10010d3c:	0005883a 	mov	r2,zero
10010d40:	003f0606 	br	1001095c <__alt_data_end+0xf801095c>
10010d44:	98c00417 	ldw	r3,16(r19)
10010d48:	9cc00604 	addi	r19,r19,24
10010d4c:	b8800804 	addi	r2,r23,32
10010d50:	b8c00615 	stw	r3,24(r23)
10010d54:	98ffff17 	ldw	r3,-4(r19)
10010d58:	b8c00715 	stw	r3,28(r23)
10010d5c:	003f9906 	br	10010bc4 <__alt_data_end+0xf8010bc4>

10010d60 <__fpclassifyd>:
10010d60:	00a00034 	movhi	r2,32768
10010d64:	10bfffc4 	addi	r2,r2,-1
10010d68:	2884703a 	and	r2,r5,r2
10010d6c:	10000726 	beq	r2,zero,10010d8c <__fpclassifyd+0x2c>
10010d70:	00fffc34 	movhi	r3,65520
10010d74:	019ff834 	movhi	r6,32736
10010d78:	28c7883a 	add	r3,r5,r3
10010d7c:	31bfffc4 	addi	r6,r6,-1
10010d80:	30c00536 	bltu	r6,r3,10010d98 <__fpclassifyd+0x38>
10010d84:	00800104 	movi	r2,4
10010d88:	f800283a 	ret
10010d8c:	2000021e 	bne	r4,zero,10010d98 <__fpclassifyd+0x38>
10010d90:	00800084 	movi	r2,2
10010d94:	f800283a 	ret
10010d98:	00dffc34 	movhi	r3,32752
10010d9c:	019ff834 	movhi	r6,32736
10010da0:	28cb883a 	add	r5,r5,r3
10010da4:	31bfffc4 	addi	r6,r6,-1
10010da8:	317ff62e 	bgeu	r6,r5,10010d84 <__alt_data_end+0xf8010d84>
10010dac:	01400434 	movhi	r5,16
10010db0:	297fffc4 	addi	r5,r5,-1
10010db4:	28800236 	bltu	r5,r2,10010dc0 <__fpclassifyd+0x60>
10010db8:	008000c4 	movi	r2,3
10010dbc:	f800283a 	ret
10010dc0:	10c00226 	beq	r2,r3,10010dcc <__fpclassifyd+0x6c>
10010dc4:	0005883a 	mov	r2,zero
10010dc8:	f800283a 	ret
10010dcc:	2005003a 	cmpeq	r2,r4,zero
10010dd0:	f800283a 	ret

10010dd4 <_sbrk_r>:
10010dd4:	defffd04 	addi	sp,sp,-12
10010dd8:	dc000015 	stw	r16,0(sp)
10010ddc:	040400b4 	movhi	r16,4098
10010de0:	dc400115 	stw	r17,4(sp)
10010de4:	84355b04 	addi	r16,r16,-10900
10010de8:	2023883a 	mov	r17,r4
10010dec:	2809883a 	mov	r4,r5
10010df0:	dfc00215 	stw	ra,8(sp)
10010df4:	80000015 	stw	zero,0(r16)
10010df8:	0015a780 	call	10015a78 <sbrk>
10010dfc:	00ffffc4 	movi	r3,-1
10010e00:	10c00526 	beq	r2,r3,10010e18 <_sbrk_r+0x44>
10010e04:	dfc00217 	ldw	ra,8(sp)
10010e08:	dc400117 	ldw	r17,4(sp)
10010e0c:	dc000017 	ldw	r16,0(sp)
10010e10:	dec00304 	addi	sp,sp,12
10010e14:	f800283a 	ret
10010e18:	80c00017 	ldw	r3,0(r16)
10010e1c:	183ff926 	beq	r3,zero,10010e04 <__alt_data_end+0xf8010e04>
10010e20:	88c00015 	stw	r3,0(r17)
10010e24:	003ff706 	br	10010e04 <__alt_data_end+0xf8010e04>

10010e28 <__sread>:
10010e28:	defffe04 	addi	sp,sp,-8
10010e2c:	dc000015 	stw	r16,0(sp)
10010e30:	2821883a 	mov	r16,r5
10010e34:	2940038f 	ldh	r5,14(r5)
10010e38:	dfc00115 	stw	ra,4(sp)
10010e3c:	0012ae40 	call	10012ae4 <_read_r>
10010e40:	10000716 	blt	r2,zero,10010e60 <__sread+0x38>
10010e44:	80c01417 	ldw	r3,80(r16)
10010e48:	1887883a 	add	r3,r3,r2
10010e4c:	80c01415 	stw	r3,80(r16)
10010e50:	dfc00117 	ldw	ra,4(sp)
10010e54:	dc000017 	ldw	r16,0(sp)
10010e58:	dec00204 	addi	sp,sp,8
10010e5c:	f800283a 	ret
10010e60:	80c0030b 	ldhu	r3,12(r16)
10010e64:	18fbffcc 	andi	r3,r3,61439
10010e68:	80c0030d 	sth	r3,12(r16)
10010e6c:	dfc00117 	ldw	ra,4(sp)
10010e70:	dc000017 	ldw	r16,0(sp)
10010e74:	dec00204 	addi	sp,sp,8
10010e78:	f800283a 	ret

10010e7c <__seofread>:
10010e7c:	0005883a 	mov	r2,zero
10010e80:	f800283a 	ret

10010e84 <__swrite>:
10010e84:	2880030b 	ldhu	r2,12(r5)
10010e88:	defffb04 	addi	sp,sp,-20
10010e8c:	dcc00315 	stw	r19,12(sp)
10010e90:	dc800215 	stw	r18,8(sp)
10010e94:	dc400115 	stw	r17,4(sp)
10010e98:	dc000015 	stw	r16,0(sp)
10010e9c:	dfc00415 	stw	ra,16(sp)
10010ea0:	10c0400c 	andi	r3,r2,256
10010ea4:	2821883a 	mov	r16,r5
10010ea8:	2027883a 	mov	r19,r4
10010eac:	3025883a 	mov	r18,r6
10010eb0:	3823883a 	mov	r17,r7
10010eb4:	18000526 	beq	r3,zero,10010ecc <__swrite+0x48>
10010eb8:	2940038f 	ldh	r5,14(r5)
10010ebc:	000d883a 	mov	r6,zero
10010ec0:	01c00084 	movi	r7,2
10010ec4:	0012a880 	call	10012a88 <_lseek_r>
10010ec8:	8080030b 	ldhu	r2,12(r16)
10010ecc:	8140038f 	ldh	r5,14(r16)
10010ed0:	10bbffcc 	andi	r2,r2,61439
10010ed4:	9809883a 	mov	r4,r19
10010ed8:	900d883a 	mov	r6,r18
10010edc:	880f883a 	mov	r7,r17
10010ee0:	8080030d 	sth	r2,12(r16)
10010ee4:	dfc00417 	ldw	ra,16(sp)
10010ee8:	dcc00317 	ldw	r19,12(sp)
10010eec:	dc800217 	ldw	r18,8(sp)
10010ef0:	dc400117 	ldw	r17,4(sp)
10010ef4:	dc000017 	ldw	r16,0(sp)
10010ef8:	dec00504 	addi	sp,sp,20
10010efc:	00125641 	jmpi	10012564 <_write_r>

10010f00 <__sseek>:
10010f00:	defffe04 	addi	sp,sp,-8
10010f04:	dc000015 	stw	r16,0(sp)
10010f08:	2821883a 	mov	r16,r5
10010f0c:	2940038f 	ldh	r5,14(r5)
10010f10:	dfc00115 	stw	ra,4(sp)
10010f14:	0012a880 	call	10012a88 <_lseek_r>
10010f18:	00ffffc4 	movi	r3,-1
10010f1c:	10c00826 	beq	r2,r3,10010f40 <__sseek+0x40>
10010f20:	80c0030b 	ldhu	r3,12(r16)
10010f24:	80801415 	stw	r2,80(r16)
10010f28:	18c40014 	ori	r3,r3,4096
10010f2c:	80c0030d 	sth	r3,12(r16)
10010f30:	dfc00117 	ldw	ra,4(sp)
10010f34:	dc000017 	ldw	r16,0(sp)
10010f38:	dec00204 	addi	sp,sp,8
10010f3c:	f800283a 	ret
10010f40:	80c0030b 	ldhu	r3,12(r16)
10010f44:	18fbffcc 	andi	r3,r3,61439
10010f48:	80c0030d 	sth	r3,12(r16)
10010f4c:	dfc00117 	ldw	ra,4(sp)
10010f50:	dc000017 	ldw	r16,0(sp)
10010f54:	dec00204 	addi	sp,sp,8
10010f58:	f800283a 	ret

10010f5c <__sclose>:
10010f5c:	2940038f 	ldh	r5,14(r5)
10010f60:	00125c01 	jmpi	100125c0 <_close_r>

10010f64 <strcmp>:
10010f64:	2144b03a 	or	r2,r4,r5
10010f68:	108000cc 	andi	r2,r2,3
10010f6c:	1000171e 	bne	r2,zero,10010fcc <strcmp+0x68>
10010f70:	20800017 	ldw	r2,0(r4)
10010f74:	28c00017 	ldw	r3,0(r5)
10010f78:	10c0141e 	bne	r2,r3,10010fcc <strcmp+0x68>
10010f7c:	027fbff4 	movhi	r9,65279
10010f80:	4a7fbfc4 	addi	r9,r9,-257
10010f84:	0086303a 	nor	r3,zero,r2
10010f88:	02202074 	movhi	r8,32897
10010f8c:	1245883a 	add	r2,r2,r9
10010f90:	42202004 	addi	r8,r8,-32640
10010f94:	10c4703a 	and	r2,r2,r3
10010f98:	1204703a 	and	r2,r2,r8
10010f9c:	10000226 	beq	r2,zero,10010fa8 <strcmp+0x44>
10010fa0:	00001706 	br	10011000 <strcmp+0x9c>
10010fa4:	1000161e 	bne	r2,zero,10011000 <strcmp+0x9c>
10010fa8:	21000104 	addi	r4,r4,4
10010fac:	20c00017 	ldw	r3,0(r4)
10010fb0:	29400104 	addi	r5,r5,4
10010fb4:	29800017 	ldw	r6,0(r5)
10010fb8:	1a4f883a 	add	r7,r3,r9
10010fbc:	00c4303a 	nor	r2,zero,r3
10010fc0:	3884703a 	and	r2,r7,r2
10010fc4:	1204703a 	and	r2,r2,r8
10010fc8:	19bff626 	beq	r3,r6,10010fa4 <__alt_data_end+0xf8010fa4>
10010fcc:	20800007 	ldb	r2,0(r4)
10010fd0:	1000051e 	bne	r2,zero,10010fe8 <strcmp+0x84>
10010fd4:	00000606 	br	10010ff0 <strcmp+0x8c>
10010fd8:	21000044 	addi	r4,r4,1
10010fdc:	20800007 	ldb	r2,0(r4)
10010fe0:	29400044 	addi	r5,r5,1
10010fe4:	10000226 	beq	r2,zero,10010ff0 <strcmp+0x8c>
10010fe8:	28c00007 	ldb	r3,0(r5)
10010fec:	10fffa26 	beq	r2,r3,10010fd8 <__alt_data_end+0xf8010fd8>
10010ff0:	20800003 	ldbu	r2,0(r4)
10010ff4:	28c00003 	ldbu	r3,0(r5)
10010ff8:	10c5c83a 	sub	r2,r2,r3
10010ffc:	f800283a 	ret
10011000:	0005883a 	mov	r2,zero
10011004:	f800283a 	ret

10011008 <__sprint_r.part.0>:
10011008:	28801917 	ldw	r2,100(r5)
1001100c:	defff604 	addi	sp,sp,-40
10011010:	dd400515 	stw	r21,20(sp)
10011014:	dcc00315 	stw	r19,12(sp)
10011018:	dfc00915 	stw	ra,36(sp)
1001101c:	df000815 	stw	fp,32(sp)
10011020:	ddc00715 	stw	r23,28(sp)
10011024:	dd800615 	stw	r22,24(sp)
10011028:	dd000415 	stw	r20,16(sp)
1001102c:	dc800215 	stw	r18,8(sp)
10011030:	dc400115 	stw	r17,4(sp)
10011034:	dc000015 	stw	r16,0(sp)
10011038:	1088000c 	andi	r2,r2,8192
1001103c:	2827883a 	mov	r19,r5
10011040:	302b883a 	mov	r21,r6
10011044:	10002d26 	beq	r2,zero,100110fc <__sprint_r.part.0+0xf4>
10011048:	30800217 	ldw	r2,8(r6)
1001104c:	35800017 	ldw	r22,0(r6)
10011050:	10002826 	beq	r2,zero,100110f4 <__sprint_r.part.0+0xec>
10011054:	2029883a 	mov	r20,r4
10011058:	b5c00104 	addi	r23,r22,4
1001105c:	04bfffc4 	movi	r18,-1
10011060:	bc400017 	ldw	r17,0(r23)
10011064:	b4000017 	ldw	r16,0(r22)
10011068:	0039883a 	mov	fp,zero
1001106c:	8822d0ba 	srli	r17,r17,2
10011070:	04400316 	blt	zero,r17,10011080 <__sprint_r.part.0+0x78>
10011074:	00001706 	br	100110d4 <__sprint_r.part.0+0xcc>
10011078:	84000104 	addi	r16,r16,4
1001107c:	8f001526 	beq	r17,fp,100110d4 <__sprint_r.part.0+0xcc>
10011080:	81400017 	ldw	r5,0(r16)
10011084:	a009883a 	mov	r4,r20
10011088:	980d883a 	mov	r6,r19
1001108c:	00128000 	call	10012800 <_fputwc_r>
10011090:	e7000044 	addi	fp,fp,1
10011094:	14bff81e 	bne	r2,r18,10011078 <__alt_data_end+0xf8011078>
10011098:	9005883a 	mov	r2,r18
1001109c:	a8000215 	stw	zero,8(r21)
100110a0:	a8000115 	stw	zero,4(r21)
100110a4:	dfc00917 	ldw	ra,36(sp)
100110a8:	df000817 	ldw	fp,32(sp)
100110ac:	ddc00717 	ldw	r23,28(sp)
100110b0:	dd800617 	ldw	r22,24(sp)
100110b4:	dd400517 	ldw	r21,20(sp)
100110b8:	dd000417 	ldw	r20,16(sp)
100110bc:	dcc00317 	ldw	r19,12(sp)
100110c0:	dc800217 	ldw	r18,8(sp)
100110c4:	dc400117 	ldw	r17,4(sp)
100110c8:	dc000017 	ldw	r16,0(sp)
100110cc:	dec00a04 	addi	sp,sp,40
100110d0:	f800283a 	ret
100110d4:	a8c00217 	ldw	r3,8(r21)
100110d8:	8c63883a 	add	r17,r17,r17
100110dc:	8c63883a 	add	r17,r17,r17
100110e0:	1c45c83a 	sub	r2,r3,r17
100110e4:	a8800215 	stw	r2,8(r21)
100110e8:	b5800204 	addi	r22,r22,8
100110ec:	bdc00204 	addi	r23,r23,8
100110f0:	103fdb1e 	bne	r2,zero,10011060 <__alt_data_end+0xf8011060>
100110f4:	0005883a 	mov	r2,zero
100110f8:	003fe806 	br	1001109c <__alt_data_end+0xf801109c>
100110fc:	000e3bc0 	call	1000e3bc <__sfvwrite_r>
10011100:	003fe606 	br	1001109c <__alt_data_end+0xf801109c>

10011104 <__sprint_r>:
10011104:	30c00217 	ldw	r3,8(r6)
10011108:	18000126 	beq	r3,zero,10011110 <__sprint_r+0xc>
1001110c:	00110081 	jmpi	10011008 <__sprint_r.part.0>
10011110:	30000115 	stw	zero,4(r6)
10011114:	0005883a 	mov	r2,zero
10011118:	f800283a 	ret

1001111c <___vfiprintf_internal_r>:
1001111c:	defeca04 	addi	sp,sp,-1240
10011120:	dcc12f15 	stw	r19,1212(sp)
10011124:	dfc13515 	stw	ra,1236(sp)
10011128:	df013415 	stw	fp,1232(sp)
1001112c:	ddc13315 	stw	r23,1228(sp)
10011130:	dd813215 	stw	r22,1224(sp)
10011134:	dd413115 	stw	r21,1220(sp)
10011138:	dd013015 	stw	r20,1216(sp)
1001113c:	dc812e15 	stw	r18,1208(sp)
10011140:	dc412d15 	stw	r17,1204(sp)
10011144:	dc012c15 	stw	r16,1200(sp)
10011148:	d9012115 	stw	r4,1156(sp)
1001114c:	d9412015 	stw	r5,1152(sp)
10011150:	d9c12315 	stw	r7,1164(sp)
10011154:	3027883a 	mov	r19,r6
10011158:	20000226 	beq	r4,zero,10011164 <___vfiprintf_internal_r+0x48>
1001115c:	20800e17 	ldw	r2,56(r4)
10011160:	1000f726 	beq	r2,zero,10011540 <___vfiprintf_internal_r+0x424>
10011164:	d8812017 	ldw	r2,1152(sp)
10011168:	10c0030b 	ldhu	r3,12(r2)
1001116c:	1908000c 	andi	r4,r3,8192
10011170:	1805883a 	mov	r2,r3
10011174:	2000081e 	bne	r4,zero,10011198 <___vfiprintf_internal_r+0x7c>
10011178:	d9412017 	ldw	r5,1152(sp)
1001117c:	18880014 	ori	r2,r3,8192
10011180:	00f7ffc4 	movi	r3,-8193
10011184:	29001917 	ldw	r4,100(r5)
10011188:	2880030d 	sth	r2,12(r5)
1001118c:	20c8703a 	and	r4,r4,r3
10011190:	29001915 	stw	r4,100(r5)
10011194:	1007883a 	mov	r3,r2
10011198:	1100020c 	andi	r4,r2,8
1001119c:	2000a726 	beq	r4,zero,1001143c <___vfiprintf_internal_r+0x320>
100111a0:	d9412017 	ldw	r5,1152(sp)
100111a4:	29000417 	ldw	r4,16(r5)
100111a8:	2000a426 	beq	r4,zero,1001143c <___vfiprintf_internal_r+0x320>
100111ac:	1080068c 	andi	r2,r2,26
100111b0:	01000284 	movi	r4,10
100111b4:	1100ab26 	beq	r2,r4,10011464 <___vfiprintf_internal_r+0x348>
100111b8:	d9010a04 	addi	r4,sp,1064
100111bc:	d94109c4 	addi	r5,sp,1063
100111c0:	070400b4 	movhi	fp,4098
100111c4:	044400b4 	movhi	r17,4098
100111c8:	2145c83a 	sub	r2,r4,r5
100111cc:	e727cd04 	addi	fp,fp,-24780
100111d0:	8c67c904 	addi	r17,r17,-24796
100111d4:	d9011e15 	stw	r4,1144(sp)
100111d8:	d9411f15 	stw	r5,1148(sp)
100111dc:	dec11a15 	stw	sp,1128(sp)
100111e0:	d8011c15 	stw	zero,1136(sp)
100111e4:	d8011b15 	stw	zero,1132(sp)
100111e8:	d8012715 	stw	zero,1180(sp)
100111ec:	d8012515 	stw	zero,1172(sp)
100111f0:	d811883a 	mov	r8,sp
100111f4:	d8812815 	stw	r2,1184(sp)
100111f8:	982f883a 	mov	r23,r19
100111fc:	b8800007 	ldb	r2,0(r23)
10011200:	1003b026 	beq	r2,zero,100120c4 <___vfiprintf_internal_r+0xfa8>
10011204:	01000944 	movi	r4,37
10011208:	1103ae26 	beq	r2,r4,100120c4 <___vfiprintf_internal_r+0xfa8>
1001120c:	b805883a 	mov	r2,r23
10011210:	00000106 	br	10011218 <___vfiprintf_internal_r+0xfc>
10011214:	19000326 	beq	r3,r4,10011224 <___vfiprintf_internal_r+0x108>
10011218:	10800044 	addi	r2,r2,1
1001121c:	10c00007 	ldb	r3,0(r2)
10011220:	183ffc1e 	bne	r3,zero,10011214 <__alt_data_end+0xf8011214>
10011224:	15e1c83a 	sub	r16,r2,r23
10011228:	1029883a 	mov	r20,r2
1001122c:	80001026 	beq	r16,zero,10011270 <___vfiprintf_internal_r+0x154>
10011230:	d8c11c17 	ldw	r3,1136(sp)
10011234:	d8811b17 	ldw	r2,1132(sp)
10011238:	45c00015 	stw	r23,0(r8)
1001123c:	80c7883a 	add	r3,r16,r3
10011240:	10800044 	addi	r2,r2,1
10011244:	44000115 	stw	r16,4(r8)
10011248:	d8c11c15 	stw	r3,1136(sp)
1001124c:	d8811b15 	stw	r2,1132(sp)
10011250:	010001c4 	movi	r4,7
10011254:	2080740e 	bge	r4,r2,10011428 <___vfiprintf_internal_r+0x30c>
10011258:	1803a71e 	bne	r3,zero,100120f8 <___vfiprintf_internal_r+0xfdc>
1001125c:	d8c12517 	ldw	r3,1172(sp)
10011260:	d8011b15 	stw	zero,1132(sp)
10011264:	d811883a 	mov	r8,sp
10011268:	1c07883a 	add	r3,r3,r16
1001126c:	d8c12515 	stw	r3,1172(sp)
10011270:	a0800007 	ldb	r2,0(r20)
10011274:	1002bf26 	beq	r2,zero,10011d74 <___vfiprintf_internal_r+0xc58>
10011278:	a5c00044 	addi	r23,r20,1
1001127c:	a1800047 	ldb	r6,1(r20)
10011280:	d8011d85 	stb	zero,1142(sp)
10011284:	d8012205 	stb	zero,1160(sp)
10011288:	043fffc4 	movi	r16,-1
1001128c:	d8012415 	stw	zero,1168(sp)
10011290:	0025883a 	mov	r18,zero
10011294:	05001604 	movi	r20,88
10011298:	05400244 	movi	r21,9
1001129c:	4027883a 	mov	r19,r8
100112a0:	bdc00044 	addi	r23,r23,1
100112a4:	30bff804 	addi	r2,r6,-32
100112a8:	a0825636 	bltu	r20,r2,10011c04 <___vfiprintf_internal_r+0xae8>
100112ac:	100490ba 	slli	r2,r2,2
100112b0:	01040074 	movhi	r4,4097
100112b4:	2104b104 	addi	r4,r4,4804
100112b8:	1105883a 	add	r2,r2,r4
100112bc:	10800017 	ldw	r2,0(r2)
100112c0:	1000683a 	jmp	r2
100112c4:	10011b94 	ori	zero,r2,1134
100112c8:	10011c04 	addi	zero,r2,1136
100112cc:	10011c04 	addi	zero,r2,1136
100112d0:	10011bf8 	rdprs	zero,r2,1135
100112d4:	10011c04 	addi	zero,r2,1136
100112d8:	10011c04 	addi	zero,r2,1136
100112dc:	10011c04 	addi	zero,r2,1136
100112e0:	10011c04 	addi	zero,r2,1136
100112e4:	10011c04 	addi	zero,r2,1136
100112e8:	10011c04 	addi	zero,r2,1136
100112ec:	10011984 	addi	zero,r2,1126
100112f0:	10011bac 	andhi	zero,r2,1134
100112f4:	10011c04 	addi	zero,r2,1136
100112f8:	10011558 	cmpnei	zero,r2,1109
100112fc:	100119a8 	cmpgeui	zero,r2,1126
10011300:	10011c04 	addi	zero,r2,1136
10011304:	10011564 	muli	zero,r2,1109
10011308:	10011570 	cmpltui	zero,r2,1109
1001130c:	10011570 	cmpltui	zero,r2,1109
10011310:	10011570 	cmpltui	zero,r2,1109
10011314:	10011570 	cmpltui	zero,r2,1109
10011318:	10011570 	cmpltui	zero,r2,1109
1001131c:	10011570 	cmpltui	zero,r2,1109
10011320:	10011570 	cmpltui	zero,r2,1109
10011324:	10011570 	cmpltui	zero,r2,1109
10011328:	10011570 	cmpltui	zero,r2,1109
1001132c:	10011c04 	addi	zero,r2,1136
10011330:	10011c04 	addi	zero,r2,1136
10011334:	10011c04 	addi	zero,r2,1136
10011338:	10011c04 	addi	zero,r2,1136
1001133c:	10011c04 	addi	zero,r2,1136
10011340:	10011c04 	addi	zero,r2,1136
10011344:	10011c04 	addi	zero,r2,1136
10011348:	10011c04 	addi	zero,r2,1136
1001134c:	10011c04 	addi	zero,r2,1136
10011350:	10011c04 	addi	zero,r2,1136
10011354:	100115b0 	cmpltui	zero,r2,1110
10011358:	10011c04 	addi	zero,r2,1136
1001135c:	10011c04 	addi	zero,r2,1136
10011360:	10011c04 	addi	zero,r2,1136
10011364:	10011c04 	addi	zero,r2,1136
10011368:	10011c04 	addi	zero,r2,1136
1001136c:	10011c04 	addi	zero,r2,1136
10011370:	10011c04 	addi	zero,r2,1136
10011374:	10011c04 	addi	zero,r2,1136
10011378:	10011c04 	addi	zero,r2,1136
1001137c:	10011c04 	addi	zero,r2,1136
10011380:	100118a0 	cmpeqi	zero,r2,1122
10011384:	10011c04 	addi	zero,r2,1136
10011388:	10011c04 	addi	zero,r2,1136
1001138c:	10011c04 	addi	zero,r2,1136
10011390:	10011c04 	addi	zero,r2,1136
10011394:	10011c04 	addi	zero,r2,1136
10011398:	100118e0 	cmpeqi	zero,r2,1123
1001139c:	10011c04 	addi	zero,r2,1136
100113a0:	10011c04 	addi	zero,r2,1136
100113a4:	10011924 	muli	zero,r2,1124
100113a8:	10011c04 	addi	zero,r2,1136
100113ac:	10011c04 	addi	zero,r2,1136
100113b0:	10011c04 	addi	zero,r2,1136
100113b4:	10011c04 	addi	zero,r2,1136
100113b8:	10011c04 	addi	zero,r2,1136
100113bc:	10011c04 	addi	zero,r2,1136
100113c0:	10011c04 	addi	zero,r2,1136
100113c4:	10011c04 	addi	zero,r2,1136
100113c8:	10011c04 	addi	zero,r2,1136
100113cc:	10011c04 	addi	zero,r2,1136
100113d0:	1001186c 	andhi	zero,r2,1121
100113d4:	10011bbc 	xorhi	zero,r2,1134
100113d8:	10011c04 	addi	zero,r2,1136
100113dc:	10011c04 	addi	zero,r2,1136
100113e0:	10011c04 	addi	zero,r2,1136
100113e4:	100119f8 	rdprs	zero,r2,1127
100113e8:	10011bbc 	xorhi	zero,r2,1134
100113ec:	10011c04 	addi	zero,r2,1136
100113f0:	10011c04 	addi	zero,r2,1136
100113f4:	10011910 	cmplti	zero,r2,1124
100113f8:	10011c04 	addi	zero,r2,1136
100113fc:	10011b5c 	xori	zero,r2,1133
10011400:	10011ae4 	muli	zero,r2,1131
10011404:	10011b18 	cmpnei	zero,r2,1132
10011408:	10011a04 	addi	zero,r2,1128
1001140c:	10011c04 	addi	zero,r2,1136
10011410:	10011a10 	cmplti	zero,r2,1128
10011414:	10011c04 	addi	zero,r2,1136
10011418:	10011a6c 	andhi	zero,r2,1129
1001141c:	10011c04 	addi	zero,r2,1136
10011420:	10011c04 	addi	zero,r2,1136
10011424:	10011aa0 	cmpeqi	zero,r2,1130
10011428:	42000204 	addi	r8,r8,8
1001142c:	d8c12517 	ldw	r3,1172(sp)
10011430:	1c07883a 	add	r3,r3,r16
10011434:	d8c12515 	stw	r3,1172(sp)
10011438:	003f8d06 	br	10011270 <__alt_data_end+0xf8011270>
1001143c:	d9012117 	ldw	r4,1156(sp)
10011440:	d9412017 	ldw	r5,1152(sp)
10011444:	000bf1c0 	call	1000bf1c <__swsetup_r>
10011448:	1000301e 	bne	r2,zero,1001150c <___vfiprintf_internal_r+0x3f0>
1001144c:	d8812017 	ldw	r2,1152(sp)
10011450:	01000284 	movi	r4,10
10011454:	10c0030b 	ldhu	r3,12(r2)
10011458:	1805883a 	mov	r2,r3
1001145c:	1080068c 	andi	r2,r2,26
10011460:	113f551e 	bne	r2,r4,100111b8 <__alt_data_end+0xf80111b8>
10011464:	d9012017 	ldw	r4,1152(sp)
10011468:	2080038b 	ldhu	r2,14(r4)
1001146c:	113fffcc 	andi	r4,r2,65535
10011470:	2120001c 	xori	r4,r4,32768
10011474:	21200004 	addi	r4,r4,-32768
10011478:	203f4f16 	blt	r4,zero,100111b8 <__alt_data_end+0xf80111b8>
1001147c:	d9412017 	ldw	r5,1152(sp)
10011480:	d9012117 	ldw	r4,1156(sp)
10011484:	d9c12317 	ldw	r7,1164(sp)
10011488:	2b001917 	ldw	r12,100(r5)
1001148c:	2ac00717 	ldw	r11,28(r5)
10011490:	2a800917 	ldw	r10,36(r5)
10011494:	02010004 	movi	r8,1024
10011498:	18ffff4c 	andi	r3,r3,65533
1001149c:	da0b883a 	add	r5,sp,r8
100114a0:	980d883a 	mov	r6,r19
100114a4:	d8c1030d 	sth	r3,1036(sp)
100114a8:	db011915 	stw	r12,1124(sp)
100114ac:	d881038d 	sth	r2,1038(sp)
100114b0:	dac10715 	stw	r11,1052(sp)
100114b4:	da810915 	stw	r10,1060(sp)
100114b8:	dec10015 	stw	sp,1024(sp)
100114bc:	dec10415 	stw	sp,1040(sp)
100114c0:	da010215 	stw	r8,1032(sp)
100114c4:	da010515 	stw	r8,1044(sp)
100114c8:	d8010615 	stw	zero,1048(sp)
100114cc:	001111c0 	call	1001111c <___vfiprintf_internal_r>
100114d0:	1021883a 	mov	r16,r2
100114d4:	10000416 	blt	r2,zero,100114e8 <___vfiprintf_internal_r+0x3cc>
100114d8:	d9012117 	ldw	r4,1156(sp)
100114dc:	d9410004 	addi	r5,sp,1024
100114e0:	000d99c0 	call	1000d99c <_fflush_r>
100114e4:	10040f1e 	bne	r2,zero,10012524 <___vfiprintf_internal_r+0x1408>
100114e8:	d881030b 	ldhu	r2,1036(sp)
100114ec:	1080100c 	andi	r2,r2,64
100114f0:	10000426 	beq	r2,zero,10011504 <___vfiprintf_internal_r+0x3e8>
100114f4:	d8c12017 	ldw	r3,1152(sp)
100114f8:	1880030b 	ldhu	r2,12(r3)
100114fc:	10801014 	ori	r2,r2,64
10011500:	1880030d 	sth	r2,12(r3)
10011504:	8005883a 	mov	r2,r16
10011508:	00000106 	br	10011510 <___vfiprintf_internal_r+0x3f4>
1001150c:	00bfffc4 	movi	r2,-1
10011510:	dfc13517 	ldw	ra,1236(sp)
10011514:	df013417 	ldw	fp,1232(sp)
10011518:	ddc13317 	ldw	r23,1228(sp)
1001151c:	dd813217 	ldw	r22,1224(sp)
10011520:	dd413117 	ldw	r21,1220(sp)
10011524:	dd013017 	ldw	r20,1216(sp)
10011528:	dcc12f17 	ldw	r19,1212(sp)
1001152c:	dc812e17 	ldw	r18,1208(sp)
10011530:	dc412d17 	ldw	r17,1204(sp)
10011534:	dc012c17 	ldw	r16,1200(sp)
10011538:	dec13604 	addi	sp,sp,1240
1001153c:	f800283a 	ret
10011540:	000df580 	call	1000df58 <__sinit>
10011544:	003f0706 	br	10011164 <__alt_data_end+0xf8011164>
10011548:	d8c12417 	ldw	r3,1168(sp)
1001154c:	d8812315 	stw	r2,1164(sp)
10011550:	00c7c83a 	sub	r3,zero,r3
10011554:	d8c12415 	stw	r3,1168(sp)
10011558:	94800114 	ori	r18,r18,4
1001155c:	b9800007 	ldb	r6,0(r23)
10011560:	003f4f06 	br	100112a0 <__alt_data_end+0xf80112a0>
10011564:	94802014 	ori	r18,r18,128
10011568:	b9800007 	ldb	r6,0(r23)
1001156c:	003f4c06 	br	100112a0 <__alt_data_end+0xf80112a0>
10011570:	dc012615 	stw	r16,1176(sp)
10011574:	d8012415 	stw	zero,1168(sp)
10011578:	35bff404 	addi	r22,r6,-48
1001157c:	0009883a 	mov	r4,zero
10011580:	b821883a 	mov	r16,r23
10011584:	01400284 	movi	r5,10
10011588:	00074c40 	call	100074c4 <__mulsi3>
1001158c:	81800007 	ldb	r6,0(r16)
10011590:	1589883a 	add	r4,r2,r22
10011594:	bdc00044 	addi	r23,r23,1
10011598:	35bff404 	addi	r22,r6,-48
1001159c:	b821883a 	mov	r16,r23
100115a0:	adbff82e 	bgeu	r21,r22,10011584 <__alt_data_end+0xf8011584>
100115a4:	d9012415 	stw	r4,1168(sp)
100115a8:	dc012617 	ldw	r16,1176(sp)
100115ac:	003f3d06 	br	100112a4 <__alt_data_end+0xf80112a4>
100115b0:	d8c12203 	ldbu	r3,1160(sp)
100115b4:	94800414 	ori	r18,r18,16
100115b8:	9080080c 	andi	r2,r18,32
100115bc:	d8c11d85 	stb	r3,1142(sp)
100115c0:	9811883a 	mov	r8,r19
100115c4:	d8c12317 	ldw	r3,1164(sp)
100115c8:	10018226 	beq	r2,zero,10011bd4 <___vfiprintf_internal_r+0xab8>
100115cc:	d9012317 	ldw	r4,1164(sp)
100115d0:	18800117 	ldw	r2,4(r3)
100115d4:	1cc00017 	ldw	r19,0(r3)
100115d8:	21000204 	addi	r4,r4,8
100115dc:	d9012315 	stw	r4,1164(sp)
100115e0:	102b883a 	mov	r21,r2
100115e4:	10030016 	blt	r2,zero,100121e8 <___vfiprintf_internal_r+0x10cc>
100115e8:	dd811d83 	ldbu	r22,1142(sp)
100115ec:	8029883a 	mov	r20,r16
100115f0:	00800044 	movi	r2,1
100115f4:	9d46b03a 	or	r3,r19,r21
100115f8:	80000216 	blt	r16,zero,10011604 <___vfiprintf_internal_r+0x4e8>
100115fc:	013fdfc4 	movi	r4,-129
10011600:	9124703a 	and	r18,r18,r4
10011604:	1801b41e 	bne	r3,zero,10011cd8 <___vfiprintf_internal_r+0xbbc>
10011608:	80028126 	beq	r16,zero,10012010 <___vfiprintf_internal_r+0xef4>
1001160c:	10803fcc 	andi	r2,r2,255
10011610:	00c00044 	movi	r3,1
10011614:	10c1d126 	beq	r2,r3,10011d5c <___vfiprintf_internal_r+0xc40>
10011618:	00c00084 	movi	r3,2
1001161c:	10c28626 	beq	r2,r3,10012038 <___vfiprintf_internal_r+0xf1c>
10011620:	d8c10a04 	addi	r3,sp,1064
10011624:	9808d0fa 	srli	r4,r19,3
10011628:	a80a977a 	slli	r5,r21,29
1001162c:	a82ad0fa 	srli	r21,r21,3
10011630:	9cc001cc 	andi	r19,r19,7
10011634:	98800c04 	addi	r2,r19,48
10011638:	18ffffc4 	addi	r3,r3,-1
1001163c:	2926b03a 	or	r19,r5,r4
10011640:	18800005 	stb	r2,0(r3)
10011644:	9d48b03a 	or	r4,r19,r21
10011648:	203ff61e 	bne	r4,zero,10011624 <__alt_data_end+0xf8011624>
1001164c:	9100004c 	andi	r4,r18,1
10011650:	d8c12215 	stw	r3,1160(sp)
10011654:	2002b31e 	bne	r4,zero,10012124 <___vfiprintf_internal_r+0x1008>
10011658:	d9411e17 	ldw	r5,1144(sp)
1001165c:	28e9c83a 	sub	r20,r5,r3
10011660:	a02b883a 	mov	r21,r20
10011664:	a400010e 	bge	r20,r16,1001166c <___vfiprintf_internal_r+0x550>
10011668:	802b883a 	mov	r21,r16
1001166c:	b5803fcc 	andi	r22,r22,255
10011670:	b580201c 	xori	r22,r22,128
10011674:	b5bfe004 	addi	r22,r22,-128
10011678:	b0000126 	beq	r22,zero,10011680 <___vfiprintf_internal_r+0x564>
1001167c:	ad400044 	addi	r21,r21,1
10011680:	9280008c 	andi	r10,r18,2
10011684:	50000126 	beq	r10,zero,1001168c <___vfiprintf_internal_r+0x570>
10011688:	ad400084 	addi	r21,r21,2
1001168c:	9580210c 	andi	r22,r18,132
10011690:	b001751e 	bne	r22,zero,10011c68 <___vfiprintf_internal_r+0xb4c>
10011694:	d9012417 	ldw	r4,1168(sp)
10011698:	2567c83a 	sub	r19,r4,r21
1001169c:	04c1720e 	bge	zero,r19,10011c68 <___vfiprintf_internal_r+0xb4c>
100116a0:	01c00404 	movi	r7,16
100116a4:	d8c11c17 	ldw	r3,1136(sp)
100116a8:	3cc36b0e 	bge	r7,r19,10012458 <___vfiprintf_internal_r+0x133c>
100116ac:	008400b4 	movhi	r2,4098
100116b0:	10a7cd04 	addi	r2,r2,-24780
100116b4:	dc012915 	stw	r16,1188(sp)
100116b8:	d9011b17 	ldw	r4,1132(sp)
100116bc:	9821883a 	mov	r16,r19
100116c0:	d8812615 	stw	r2,1176(sp)
100116c4:	030001c4 	movi	r12,7
100116c8:	5027883a 	mov	r19,r10
100116cc:	00000506 	br	100116e4 <___vfiprintf_internal_r+0x5c8>
100116d0:	21400084 	addi	r5,r4,2
100116d4:	42000204 	addi	r8,r8,8
100116d8:	1009883a 	mov	r4,r2
100116dc:	843ffc04 	addi	r16,r16,-16
100116e0:	3c000d0e 	bge	r7,r16,10011718 <___vfiprintf_internal_r+0x5fc>
100116e4:	18c00404 	addi	r3,r3,16
100116e8:	20800044 	addi	r2,r4,1
100116ec:	47000015 	stw	fp,0(r8)
100116f0:	41c00115 	stw	r7,4(r8)
100116f4:	d8c11c15 	stw	r3,1136(sp)
100116f8:	d8811b15 	stw	r2,1132(sp)
100116fc:	60bff40e 	bge	r12,r2,100116d0 <__alt_data_end+0xf80116d0>
10011700:	18014b1e 	bne	r3,zero,10011c30 <___vfiprintf_internal_r+0xb14>
10011704:	843ffc04 	addi	r16,r16,-16
10011708:	0009883a 	mov	r4,zero
1001170c:	01400044 	movi	r5,1
10011710:	d811883a 	mov	r8,sp
10011714:	3c3ff316 	blt	r7,r16,100116e4 <__alt_data_end+0xf80116e4>
10011718:	9815883a 	mov	r10,r19
1001171c:	8027883a 	mov	r19,r16
10011720:	dc012917 	ldw	r16,1188(sp)
10011724:	d9012617 	ldw	r4,1176(sp)
10011728:	98c7883a 	add	r3,r19,r3
1001172c:	44c00115 	stw	r19,4(r8)
10011730:	41000015 	stw	r4,0(r8)
10011734:	d8c11c15 	stw	r3,1136(sp)
10011738:	d9411b15 	stw	r5,1132(sp)
1001173c:	008001c4 	movi	r2,7
10011740:	11425116 	blt	r2,r5,10012088 <___vfiprintf_internal_r+0xf6c>
10011744:	d9011d87 	ldb	r4,1142(sp)
10011748:	42000204 	addi	r8,r8,8
1001174c:	28800044 	addi	r2,r5,1
10011750:	20014a1e 	bne	r4,zero,10011c7c <___vfiprintf_internal_r+0xb60>
10011754:	50000c26 	beq	r10,zero,10011788 <___vfiprintf_internal_r+0x66c>
10011758:	d9011d04 	addi	r4,sp,1140
1001175c:	18c00084 	addi	r3,r3,2
10011760:	41000015 	stw	r4,0(r8)
10011764:	01000084 	movi	r4,2
10011768:	41000115 	stw	r4,4(r8)
1001176c:	d8c11c15 	stw	r3,1136(sp)
10011770:	d8811b15 	stw	r2,1132(sp)
10011774:	010001c4 	movi	r4,7
10011778:	20822016 	blt	r4,r2,10011ffc <___vfiprintf_internal_r+0xee0>
1001177c:	100b883a 	mov	r5,r2
10011780:	42000204 	addi	r8,r8,8
10011784:	10800044 	addi	r2,r2,1
10011788:	01002004 	movi	r4,128
1001178c:	b101de26 	beq	r22,r4,10011f08 <___vfiprintf_internal_r+0xdec>
10011790:	8521c83a 	sub	r16,r16,r20
10011794:	0400230e 	bge	zero,r16,10011824 <___vfiprintf_internal_r+0x708>
10011798:	04c00404 	movi	r19,16
1001179c:	9c030d0e 	bge	r19,r16,100123d4 <___vfiprintf_internal_r+0x12b8>
100117a0:	008400b4 	movhi	r2,4098
100117a4:	10a7c904 	addi	r2,r2,-24796
100117a8:	d8812615 	stw	r2,1176(sp)
100117ac:	058001c4 	movi	r22,7
100117b0:	00000506 	br	100117c8 <___vfiprintf_internal_r+0x6ac>
100117b4:	28800084 	addi	r2,r5,2
100117b8:	42000204 	addi	r8,r8,8
100117bc:	200b883a 	mov	r5,r4
100117c0:	843ffc04 	addi	r16,r16,-16
100117c4:	9c000d0e 	bge	r19,r16,100117fc <___vfiprintf_internal_r+0x6e0>
100117c8:	18c00404 	addi	r3,r3,16
100117cc:	29000044 	addi	r4,r5,1
100117d0:	44400015 	stw	r17,0(r8)
100117d4:	44c00115 	stw	r19,4(r8)
100117d8:	d8c11c15 	stw	r3,1136(sp)
100117dc:	d9011b15 	stw	r4,1132(sp)
100117e0:	b13ff40e 	bge	r22,r4,100117b4 <__alt_data_end+0xf80117b4>
100117e4:	1801321e 	bne	r3,zero,10011cb0 <___vfiprintf_internal_r+0xb94>
100117e8:	843ffc04 	addi	r16,r16,-16
100117ec:	000b883a 	mov	r5,zero
100117f0:	00800044 	movi	r2,1
100117f4:	d811883a 	mov	r8,sp
100117f8:	9c3ff316 	blt	r19,r16,100117c8 <__alt_data_end+0xf80117c8>
100117fc:	d9012617 	ldw	r4,1176(sp)
10011800:	1c07883a 	add	r3,r3,r16
10011804:	44000115 	stw	r16,4(r8)
10011808:	41000015 	stw	r4,0(r8)
1001180c:	d8c11c15 	stw	r3,1136(sp)
10011810:	d8811b15 	stw	r2,1132(sp)
10011814:	010001c4 	movi	r4,7
10011818:	20816216 	blt	r4,r2,10011da4 <___vfiprintf_internal_r+0xc88>
1001181c:	42000204 	addi	r8,r8,8
10011820:	10800044 	addi	r2,r2,1
10011824:	d9012217 	ldw	r4,1160(sp)
10011828:	1d07883a 	add	r3,r3,r20
1001182c:	45000115 	stw	r20,4(r8)
10011830:	41000015 	stw	r4,0(r8)
10011834:	d8c11c15 	stw	r3,1136(sp)
10011838:	d8811b15 	stw	r2,1132(sp)
1001183c:	010001c4 	movi	r4,7
10011840:	2081610e 	bge	r4,r2,10011dc8 <___vfiprintf_internal_r+0xcac>
10011844:	1802211e 	bne	r3,zero,100120cc <___vfiprintf_internal_r+0xfb0>
10011848:	d8011b15 	stw	zero,1132(sp)
1001184c:	9480010c 	andi	r18,r18,4
10011850:	9002171e 	bne	r18,zero,100120b0 <___vfiprintf_internal_r+0xf94>
10011854:	d9412417 	ldw	r5,1168(sp)
10011858:	a9433716 	blt	r21,r5,10012538 <___vfiprintf_internal_r+0x141c>
1001185c:	d8812517 	ldw	r2,1172(sp)
10011860:	1545883a 	add	r2,r2,r21
10011864:	d8812515 	stw	r2,1172(sp)
10011868:	00019a06 	br	10011ed4 <___vfiprintf_internal_r+0xdb8>
1001186c:	d8c12317 	ldw	r3,1164(sp)
10011870:	05400044 	movi	r21,1
10011874:	9811883a 	mov	r8,r19
10011878:	18800017 	ldw	r2,0(r3)
1001187c:	18c00104 	addi	r3,r3,4
10011880:	d8c12315 	stw	r3,1164(sp)
10011884:	d8c10004 	addi	r3,sp,1024
10011888:	d8011d85 	stb	zero,1142(sp)
1001188c:	d8810005 	stb	r2,1024(sp)
10011890:	a829883a 	mov	r20,r21
10011894:	d8c12215 	stw	r3,1160(sp)
10011898:	0021883a 	mov	r16,zero
1001189c:	003f7806 	br	10011680 <__alt_data_end+0xf8011680>
100118a0:	94800414 	ori	r18,r18,16
100118a4:	9080080c 	andi	r2,r18,32
100118a8:	9811883a 	mov	r8,r19
100118ac:	10009026 	beq	r2,zero,10011af0 <___vfiprintf_internal_r+0x9d4>
100118b0:	d8812317 	ldw	r2,1164(sp)
100118b4:	d8c12317 	ldw	r3,1164(sp)
100118b8:	14c00017 	ldw	r19,0(r2)
100118bc:	15400117 	ldw	r21,4(r2)
100118c0:	18c00204 	addi	r3,r3,8
100118c4:	d8c12315 	stw	r3,1164(sp)
100118c8:	0005883a 	mov	r2,zero
100118cc:	9d46b03a 	or	r3,r19,r21
100118d0:	d8011d85 	stb	zero,1142(sp)
100118d4:	8029883a 	mov	r20,r16
100118d8:	002d883a 	mov	r22,zero
100118dc:	003f4606 	br	100115f8 <__alt_data_end+0xf80115f8>
100118e0:	94800414 	ori	r18,r18,16
100118e4:	9080080c 	andi	r2,r18,32
100118e8:	9811883a 	mov	r8,r19
100118ec:	10006226 	beq	r2,zero,10011a78 <___vfiprintf_internal_r+0x95c>
100118f0:	d9012317 	ldw	r4,1164(sp)
100118f4:	00800044 	movi	r2,1
100118f8:	24c00017 	ldw	r19,0(r4)
100118fc:	25400117 	ldw	r21,4(r4)
10011900:	21000204 	addi	r4,r4,8
10011904:	d9012315 	stw	r4,1164(sp)
10011908:	9d46b03a 	or	r3,r19,r21
1001190c:	003ff006 	br	100118d0 <__alt_data_end+0xf80118d0>
10011910:	b9800007 	ldb	r6,0(r23)
10011914:	00801b04 	movi	r2,108
10011918:	3082b226 	beq	r6,r2,100123e4 <___vfiprintf_internal_r+0x12c8>
1001191c:	94800414 	ori	r18,r18,16
10011920:	003e5f06 	br	100112a0 <__alt_data_end+0xf80112a0>
10011924:	d8c12203 	ldbu	r3,1160(sp)
10011928:	010400b4 	movhi	r4,4098
1001192c:	21276304 	addi	r4,r4,-25204
10011930:	d8c11d85 	stb	r3,1142(sp)
10011934:	d9012715 	stw	r4,1180(sp)
10011938:	90c0080c 	andi	r3,r18,32
1001193c:	9811883a 	mov	r8,r19
10011940:	d8812317 	ldw	r2,1164(sp)
10011944:	18005f26 	beq	r3,zero,10011ac4 <___vfiprintf_internal_r+0x9a8>
10011948:	d9012317 	ldw	r4,1164(sp)
1001194c:	14c00017 	ldw	r19,0(r2)
10011950:	15400117 	ldw	r21,4(r2)
10011954:	21000204 	addi	r4,r4,8
10011958:	d9012315 	stw	r4,1164(sp)
1001195c:	9080004c 	andi	r2,r18,1
10011960:	1001e226 	beq	r2,zero,100120ec <___vfiprintf_internal_r+0xfd0>
10011964:	9d46b03a 	or	r3,r19,r21
10011968:	18024e26 	beq	r3,zero,100122a4 <___vfiprintf_internal_r+0x1188>
1001196c:	00800c04 	movi	r2,48
10011970:	d8811d05 	stb	r2,1140(sp)
10011974:	d9811d45 	stb	r6,1141(sp)
10011978:	94800094 	ori	r18,r18,2
1001197c:	00800084 	movi	r2,2
10011980:	003fd306 	br	100118d0 <__alt_data_end+0xf80118d0>
10011984:	d9012317 	ldw	r4,1164(sp)
10011988:	d9412317 	ldw	r5,1164(sp)
1001198c:	21000017 	ldw	r4,0(r4)
10011990:	28800104 	addi	r2,r5,4
10011994:	d9012415 	stw	r4,1168(sp)
10011998:	203eeb16 	blt	r4,zero,10011548 <__alt_data_end+0xf8011548>
1001199c:	d8812315 	stw	r2,1164(sp)
100119a0:	b9800007 	ldb	r6,0(r23)
100119a4:	003e3e06 	br	100112a0 <__alt_data_end+0xf80112a0>
100119a8:	b9800007 	ldb	r6,0(r23)
100119ac:	01000a84 	movi	r4,42
100119b0:	b8800044 	addi	r2,r23,1
100119b4:	3102d226 	beq	r6,r4,10012500 <___vfiprintf_internal_r+0x13e4>
100119b8:	35bff404 	addi	r22,r6,-48
100119bc:	102f883a 	mov	r23,r2
100119c0:	0021883a 	mov	r16,zero
100119c4:	adbe3736 	bltu	r21,r22,100112a4 <__alt_data_end+0xf80112a4>
100119c8:	0009883a 	mov	r4,zero
100119cc:	01400284 	movi	r5,10
100119d0:	00074c40 	call	100074c4 <__mulsi3>
100119d4:	b9800007 	ldb	r6,0(r23)
100119d8:	b089883a 	add	r4,r22,r2
100119dc:	bdc00044 	addi	r23,r23,1
100119e0:	35bff404 	addi	r22,r6,-48
100119e4:	adbff92e 	bgeu	r21,r22,100119cc <__alt_data_end+0xf80119cc>
100119e8:	2021883a 	mov	r16,r4
100119ec:	203e2d0e 	bge	r4,zero,100112a4 <__alt_data_end+0xf80112a4>
100119f0:	043fffc4 	movi	r16,-1
100119f4:	003e2b06 	br	100112a4 <__alt_data_end+0xf80112a4>
100119f8:	94801014 	ori	r18,r18,64
100119fc:	b9800007 	ldb	r6,0(r23)
10011a00:	003e2706 	br	100112a0 <__alt_data_end+0xf80112a0>
10011a04:	94800814 	ori	r18,r18,32
10011a08:	b9800007 	ldb	r6,0(r23)
10011a0c:	003e2406 	br	100112a0 <__alt_data_end+0xf80112a0>
10011a10:	d9412317 	ldw	r5,1164(sp)
10011a14:	d8812317 	ldw	r2,1164(sp)
10011a18:	d8011d85 	stb	zero,1142(sp)
10011a1c:	29400017 	ldw	r5,0(r5)
10011a20:	9811883a 	mov	r8,r19
10011a24:	14c00104 	addi	r19,r2,4
10011a28:	d9412215 	stw	r5,1160(sp)
10011a2c:	28029026 	beq	r5,zero,10012470 <___vfiprintf_internal_r+0x1354>
10011a30:	d9012217 	ldw	r4,1160(sp)
10011a34:	80027616 	blt	r16,zero,10012410 <___vfiprintf_internal_r+0x12f4>
10011a38:	000b883a 	mov	r5,zero
10011a3c:	800d883a 	mov	r6,r16
10011a40:	da012a15 	stw	r8,1192(sp)
10011a44:	000f4100 	call	1000f410 <memchr>
10011a48:	da012a17 	ldw	r8,1192(sp)
10011a4c:	1002a026 	beq	r2,zero,100124d0 <___vfiprintf_internal_r+0x13b4>
10011a50:	d8c12217 	ldw	r3,1160(sp)
10011a54:	10e9c83a 	sub	r20,r2,r3
10011a58:	85023816 	blt	r16,r20,1001233c <___vfiprintf_internal_r+0x1220>
10011a5c:	dd811d83 	ldbu	r22,1142(sp)
10011a60:	dcc12315 	stw	r19,1164(sp)
10011a64:	0021883a 	mov	r16,zero
10011a68:	003efd06 	br	10011660 <__alt_data_end+0xf8011660>
10011a6c:	9080080c 	andi	r2,r18,32
10011a70:	9811883a 	mov	r8,r19
10011a74:	103f9e1e 	bne	r2,zero,100118f0 <__alt_data_end+0xf80118f0>
10011a78:	9080040c 	andi	r2,r18,16
10011a7c:	10021726 	beq	r2,zero,100122dc <___vfiprintf_internal_r+0x11c0>
10011a80:	d9412317 	ldw	r5,1164(sp)
10011a84:	002b883a 	mov	r21,zero
10011a88:	00800044 	movi	r2,1
10011a8c:	2cc00017 	ldw	r19,0(r5)
10011a90:	29400104 	addi	r5,r5,4
10011a94:	d9412315 	stw	r5,1164(sp)
10011a98:	9807883a 	mov	r3,r19
10011a9c:	003f8c06 	br	100118d0 <__alt_data_end+0xf80118d0>
10011aa0:	d8c12203 	ldbu	r3,1160(sp)
10011aa4:	010400b4 	movhi	r4,4098
10011aa8:	21276804 	addi	r4,r4,-25184
10011aac:	d8c11d85 	stb	r3,1142(sp)
10011ab0:	d9012715 	stw	r4,1180(sp)
10011ab4:	90c0080c 	andi	r3,r18,32
10011ab8:	9811883a 	mov	r8,r19
10011abc:	d8812317 	ldw	r2,1164(sp)
10011ac0:	183fa11e 	bne	r3,zero,10011948 <__alt_data_end+0xf8011948>
10011ac4:	90c0040c 	andi	r3,r18,16
10011ac8:	1801e526 	beq	r3,zero,10012260 <___vfiprintf_internal_r+0x1144>
10011acc:	d9412317 	ldw	r5,1164(sp)
10011ad0:	14c00017 	ldw	r19,0(r2)
10011ad4:	002b883a 	mov	r21,zero
10011ad8:	29400104 	addi	r5,r5,4
10011adc:	d9412315 	stw	r5,1164(sp)
10011ae0:	003f9e06 	br	1001195c <__alt_data_end+0xf801195c>
10011ae4:	9080080c 	andi	r2,r18,32
10011ae8:	9811883a 	mov	r8,r19
10011aec:	103f701e 	bne	r2,zero,100118b0 <__alt_data_end+0xf80118b0>
10011af0:	9080040c 	andi	r2,r18,16
10011af4:	1001ef26 	beq	r2,zero,100122b4 <___vfiprintf_internal_r+0x1198>
10011af8:	d9012317 	ldw	r4,1164(sp)
10011afc:	002b883a 	mov	r21,zero
10011b00:	0005883a 	mov	r2,zero
10011b04:	24c00017 	ldw	r19,0(r4)
10011b08:	21000104 	addi	r4,r4,4
10011b0c:	d9012315 	stw	r4,1164(sp)
10011b10:	9807883a 	mov	r3,r19
10011b14:	003f6e06 	br	100118d0 <__alt_data_end+0xf80118d0>
10011b18:	d8c12317 	ldw	r3,1164(sp)
10011b1c:	9811883a 	mov	r8,r19
10011b20:	00800c04 	movi	r2,48
10011b24:	1cc00017 	ldw	r19,0(r3)
10011b28:	010400b4 	movhi	r4,4098
10011b2c:	18c00104 	addi	r3,r3,4
10011b30:	d8811d05 	stb	r2,1140(sp)
10011b34:	21276804 	addi	r4,r4,-25184
10011b38:	00801e04 	movi	r2,120
10011b3c:	d8811d45 	stb	r2,1141(sp)
10011b40:	d8c12315 	stw	r3,1164(sp)
10011b44:	002b883a 	mov	r21,zero
10011b48:	94800094 	ori	r18,r18,2
10011b4c:	d9012715 	stw	r4,1180(sp)
10011b50:	00800084 	movi	r2,2
10011b54:	9807883a 	mov	r3,r19
10011b58:	003f5d06 	br	100118d0 <__alt_data_end+0xf80118d0>
10011b5c:	d8c12203 	ldbu	r3,1160(sp)
10011b60:	9080080c 	andi	r2,r18,32
10011b64:	9811883a 	mov	r8,r19
10011b68:	d8c11d85 	stb	r3,1142(sp)
10011b6c:	1001b126 	beq	r2,zero,10012234 <___vfiprintf_internal_r+0x1118>
10011b70:	d9012317 	ldw	r4,1164(sp)
10011b74:	d9412517 	ldw	r5,1172(sp)
10011b78:	20800017 	ldw	r2,0(r4)
10011b7c:	2807d7fa 	srai	r3,r5,31
10011b80:	21000104 	addi	r4,r4,4
10011b84:	d9012315 	stw	r4,1164(sp)
10011b88:	11400015 	stw	r5,0(r2)
10011b8c:	10c00115 	stw	r3,4(r2)
10011b90:	003d9a06 	br	100111fc <__alt_data_end+0xf80111fc>
10011b94:	d8812207 	ldb	r2,1160(sp)
10011b98:	1001c41e 	bne	r2,zero,100122ac <___vfiprintf_internal_r+0x1190>
10011b9c:	00c00804 	movi	r3,32
10011ba0:	d8c12205 	stb	r3,1160(sp)
10011ba4:	b9800007 	ldb	r6,0(r23)
10011ba8:	003dbd06 	br	100112a0 <__alt_data_end+0xf80112a0>
10011bac:	00c00ac4 	movi	r3,43
10011bb0:	d8c12205 	stb	r3,1160(sp)
10011bb4:	b9800007 	ldb	r6,0(r23)
10011bb8:	003db906 	br	100112a0 <__alt_data_end+0xf80112a0>
10011bbc:	d8c12203 	ldbu	r3,1160(sp)
10011bc0:	9080080c 	andi	r2,r18,32
10011bc4:	9811883a 	mov	r8,r19
10011bc8:	d8c11d85 	stb	r3,1142(sp)
10011bcc:	d8c12317 	ldw	r3,1164(sp)
10011bd0:	103e7e1e 	bne	r2,zero,100115cc <__alt_data_end+0xf80115cc>
10011bd4:	9080040c 	andi	r2,r18,16
10011bd8:	1001a926 	beq	r2,zero,10012280 <___vfiprintf_internal_r+0x1164>
10011bdc:	1cc00017 	ldw	r19,0(r3)
10011be0:	d9412317 	ldw	r5,1164(sp)
10011be4:	982bd7fa 	srai	r21,r19,31
10011be8:	29400104 	addi	r5,r5,4
10011bec:	d9412315 	stw	r5,1164(sp)
10011bf0:	a805883a 	mov	r2,r21
10011bf4:	003e7b06 	br	100115e4 <__alt_data_end+0xf80115e4>
10011bf8:	94800054 	ori	r18,r18,1
10011bfc:	b9800007 	ldb	r6,0(r23)
10011c00:	003da706 	br	100112a0 <__alt_data_end+0xf80112a0>
10011c04:	d8c12203 	ldbu	r3,1160(sp)
10011c08:	9811883a 	mov	r8,r19
10011c0c:	d8c11d85 	stb	r3,1142(sp)
10011c10:	30005826 	beq	r6,zero,10011d74 <___vfiprintf_internal_r+0xc58>
10011c14:	05400044 	movi	r21,1
10011c18:	d8c10004 	addi	r3,sp,1024
10011c1c:	d9810005 	stb	r6,1024(sp)
10011c20:	d8011d85 	stb	zero,1142(sp)
10011c24:	a829883a 	mov	r20,r21
10011c28:	d8c12215 	stw	r3,1160(sp)
10011c2c:	003f1a06 	br	10011898 <__alt_data_end+0xf8011898>
10011c30:	d9012117 	ldw	r4,1156(sp)
10011c34:	d9412017 	ldw	r5,1152(sp)
10011c38:	d9811a04 	addi	r6,sp,1128
10011c3c:	d9c12a15 	stw	r7,1192(sp)
10011c40:	db012b15 	stw	r12,1196(sp)
10011c44:	00110080 	call	10011008 <__sprint_r.part.0>
10011c48:	d9c12a17 	ldw	r7,1192(sp)
10011c4c:	db012b17 	ldw	r12,1196(sp)
10011c50:	10004e1e 	bne	r2,zero,10011d8c <___vfiprintf_internal_r+0xc70>
10011c54:	d9011b17 	ldw	r4,1132(sp)
10011c58:	d8c11c17 	ldw	r3,1136(sp)
10011c5c:	d811883a 	mov	r8,sp
10011c60:	21400044 	addi	r5,r4,1
10011c64:	003e9d06 	br	100116dc <__alt_data_end+0xf80116dc>
10011c68:	d9411b17 	ldw	r5,1132(sp)
10011c6c:	d8c11c17 	ldw	r3,1136(sp)
10011c70:	28800044 	addi	r2,r5,1
10011c74:	d9011d87 	ldb	r4,1142(sp)
10011c78:	203eb626 	beq	r4,zero,10011754 <__alt_data_end+0xf8011754>
10011c7c:	01000044 	movi	r4,1
10011c80:	d9411d84 	addi	r5,sp,1142
10011c84:	1907883a 	add	r3,r3,r4
10011c88:	41400015 	stw	r5,0(r8)
10011c8c:	41000115 	stw	r4,4(r8)
10011c90:	d8c11c15 	stw	r3,1136(sp)
10011c94:	d8811b15 	stw	r2,1132(sp)
10011c98:	014001c4 	movi	r5,7
10011c9c:	2880ce16 	blt	r5,r2,10011fd8 <___vfiprintf_internal_r+0xebc>
10011ca0:	100b883a 	mov	r5,r2
10011ca4:	42000204 	addi	r8,r8,8
10011ca8:	10800044 	addi	r2,r2,1
10011cac:	003ea906 	br	10011754 <__alt_data_end+0xf8011754>
10011cb0:	d9012117 	ldw	r4,1156(sp)
10011cb4:	d9412017 	ldw	r5,1152(sp)
10011cb8:	d9811a04 	addi	r6,sp,1128
10011cbc:	00110080 	call	10011008 <__sprint_r.part.0>
10011cc0:	1000321e 	bne	r2,zero,10011d8c <___vfiprintf_internal_r+0xc70>
10011cc4:	d9411b17 	ldw	r5,1132(sp)
10011cc8:	d8c11c17 	ldw	r3,1136(sp)
10011ccc:	d811883a 	mov	r8,sp
10011cd0:	28800044 	addi	r2,r5,1
10011cd4:	003eba06 	br	100117c0 <__alt_data_end+0xf80117c0>
10011cd8:	10803fcc 	andi	r2,r2,255
10011cdc:	00c00044 	movi	r3,1
10011ce0:	10fe4d1e 	bne	r2,r3,10011618 <__alt_data_end+0xf8011618>
10011ce4:	a800021e 	bne	r21,zero,10011cf0 <___vfiprintf_internal_r+0xbd4>
10011ce8:	00800244 	movi	r2,9
10011cec:	14c01b2e 	bgeu	r2,r19,10011d5c <___vfiprintf_internal_r+0xc40>
10011cf0:	dc012215 	stw	r16,1160(sp)
10011cf4:	dd010a04 	addi	r20,sp,1064
10011cf8:	a821883a 	mov	r16,r21
10011cfc:	402b883a 	mov	r21,r8
10011d00:	9809883a 	mov	r4,r19
10011d04:	800b883a 	mov	r5,r16
10011d08:	01800284 	movi	r6,10
10011d0c:	000f883a 	mov	r7,zero
10011d10:	00135fc0 	call	100135fc <__umoddi3>
10011d14:	10800c04 	addi	r2,r2,48
10011d18:	a53fffc4 	addi	r20,r20,-1
10011d1c:	9809883a 	mov	r4,r19
10011d20:	800b883a 	mov	r5,r16
10011d24:	01800284 	movi	r6,10
10011d28:	000f883a 	mov	r7,zero
10011d2c:	a0800005 	stb	r2,0(r20)
10011d30:	0012fbc0 	call	10012fbc <__udivdi3>
10011d34:	1027883a 	mov	r19,r2
10011d38:	10c4b03a 	or	r2,r2,r3
10011d3c:	1821883a 	mov	r16,r3
10011d40:	103fef1e 	bne	r2,zero,10011d00 <__alt_data_end+0xf8011d00>
10011d44:	d9011e17 	ldw	r4,1144(sp)
10011d48:	dc012217 	ldw	r16,1160(sp)
10011d4c:	a811883a 	mov	r8,r21
10011d50:	dd012215 	stw	r20,1160(sp)
10011d54:	2529c83a 	sub	r20,r4,r20
10011d58:	003e4106 	br	10011660 <__alt_data_end+0xf8011660>
10011d5c:	9cc00c04 	addi	r19,r19,48
10011d60:	d8c109c4 	addi	r3,sp,1063
10011d64:	dcc109c5 	stb	r19,1063(sp)
10011d68:	dd012817 	ldw	r20,1184(sp)
10011d6c:	d8c12215 	stw	r3,1160(sp)
10011d70:	003e3b06 	br	10011660 <__alt_data_end+0xf8011660>
10011d74:	d8811c17 	ldw	r2,1136(sp)
10011d78:	10000426 	beq	r2,zero,10011d8c <___vfiprintf_internal_r+0xc70>
10011d7c:	d9012117 	ldw	r4,1156(sp)
10011d80:	d9412017 	ldw	r5,1152(sp)
10011d84:	d9811a04 	addi	r6,sp,1128
10011d88:	00110080 	call	10011008 <__sprint_r.part.0>
10011d8c:	d9412017 	ldw	r5,1152(sp)
10011d90:	2880030b 	ldhu	r2,12(r5)
10011d94:	1080100c 	andi	r2,r2,64
10011d98:	103ddc1e 	bne	r2,zero,1001150c <__alt_data_end+0xf801150c>
10011d9c:	d8812517 	ldw	r2,1172(sp)
10011da0:	003ddb06 	br	10011510 <__alt_data_end+0xf8011510>
10011da4:	1801061e 	bne	r3,zero,100121c0 <___vfiprintf_internal_r+0x10a4>
10011da8:	d8c12217 	ldw	r3,1160(sp)
10011dac:	00800044 	movi	r2,1
10011db0:	dd000115 	stw	r20,4(sp)
10011db4:	d8c00015 	stw	r3,0(sp)
10011db8:	dd011c15 	stw	r20,1136(sp)
10011dbc:	d8811b15 	stw	r2,1132(sp)
10011dc0:	a007883a 	mov	r3,r20
10011dc4:	d811883a 	mov	r8,sp
10011dc8:	42000204 	addi	r8,r8,8
10011dcc:	9480010c 	andi	r18,r18,4
10011dd0:	90003426 	beq	r18,zero,10011ea4 <___vfiprintf_internal_r+0xd88>
10011dd4:	d9412417 	ldw	r5,1168(sp)
10011dd8:	2d65c83a 	sub	r18,r5,r21
10011ddc:	0480310e 	bge	zero,r18,10011ea4 <___vfiprintf_internal_r+0xd88>
10011de0:	04000404 	movi	r16,16
10011de4:	8481ad0e 	bge	r16,r18,1001249c <___vfiprintf_internal_r+0x1380>
10011de8:	014400b4 	movhi	r5,4098
10011dec:	2967cd04 	addi	r5,r5,-24780
10011df0:	d9011b17 	ldw	r4,1132(sp)
10011df4:	d9412615 	stw	r5,1176(sp)
10011df8:	04c001c4 	movi	r19,7
10011dfc:	dd012117 	ldw	r20,1156(sp)
10011e00:	dd812017 	ldw	r22,1152(sp)
10011e04:	00000506 	br	10011e1c <___vfiprintf_internal_r+0xd00>
10011e08:	21400084 	addi	r5,r4,2
10011e0c:	42000204 	addi	r8,r8,8
10011e10:	1009883a 	mov	r4,r2
10011e14:	94bffc04 	addi	r18,r18,-16
10011e18:	84800d0e 	bge	r16,r18,10011e50 <___vfiprintf_internal_r+0xd34>
10011e1c:	18c00404 	addi	r3,r3,16
10011e20:	20800044 	addi	r2,r4,1
10011e24:	47000015 	stw	fp,0(r8)
10011e28:	44000115 	stw	r16,4(r8)
10011e2c:	d8c11c15 	stw	r3,1136(sp)
10011e30:	d8811b15 	stw	r2,1132(sp)
10011e34:	98bff40e 	bge	r19,r2,10011e08 <__alt_data_end+0xf8011e08>
10011e38:	1800291e 	bne	r3,zero,10011ee0 <___vfiprintf_internal_r+0xdc4>
10011e3c:	94bffc04 	addi	r18,r18,-16
10011e40:	0009883a 	mov	r4,zero
10011e44:	01400044 	movi	r5,1
10011e48:	d811883a 	mov	r8,sp
10011e4c:	84bff316 	blt	r16,r18,10011e1c <__alt_data_end+0xf8011e1c>
10011e50:	d8812617 	ldw	r2,1176(sp)
10011e54:	1c87883a 	add	r3,r3,r18
10011e58:	44800115 	stw	r18,4(r8)
10011e5c:	40800015 	stw	r2,0(r8)
10011e60:	d8c11c15 	stw	r3,1136(sp)
10011e64:	d9411b15 	stw	r5,1132(sp)
10011e68:	008001c4 	movi	r2,7
10011e6c:	11400d0e 	bge	r2,r5,10011ea4 <___vfiprintf_internal_r+0xd88>
10011e70:	1800061e 	bne	r3,zero,10011e8c <___vfiprintf_internal_r+0xd70>
10011e74:	d8c12417 	ldw	r3,1168(sp)
10011e78:	a8c12e16 	blt	r21,r3,10012334 <___vfiprintf_internal_r+0x1218>
10011e7c:	d9012517 	ldw	r4,1172(sp)
10011e80:	2549883a 	add	r4,r4,r21
10011e84:	d9012515 	stw	r4,1172(sp)
10011e88:	00001206 	br	10011ed4 <___vfiprintf_internal_r+0xdb8>
10011e8c:	d9012117 	ldw	r4,1156(sp)
10011e90:	d9412017 	ldw	r5,1152(sp)
10011e94:	d9811a04 	addi	r6,sp,1128
10011e98:	00110080 	call	10011008 <__sprint_r.part.0>
10011e9c:	103fbb1e 	bne	r2,zero,10011d8c <__alt_data_end+0xf8011d8c>
10011ea0:	d8c11c17 	ldw	r3,1136(sp)
10011ea4:	d8812417 	ldw	r2,1168(sp)
10011ea8:	a880010e 	bge	r21,r2,10011eb0 <___vfiprintf_internal_r+0xd94>
10011eac:	102b883a 	mov	r21,r2
10011eb0:	d9012517 	ldw	r4,1172(sp)
10011eb4:	2549883a 	add	r4,r4,r21
10011eb8:	d9012515 	stw	r4,1172(sp)
10011ebc:	18000526 	beq	r3,zero,10011ed4 <___vfiprintf_internal_r+0xdb8>
10011ec0:	d9012117 	ldw	r4,1156(sp)
10011ec4:	d9412017 	ldw	r5,1152(sp)
10011ec8:	d9811a04 	addi	r6,sp,1128
10011ecc:	00110080 	call	10011008 <__sprint_r.part.0>
10011ed0:	103fae1e 	bne	r2,zero,10011d8c <__alt_data_end+0xf8011d8c>
10011ed4:	d8011b15 	stw	zero,1132(sp)
10011ed8:	d811883a 	mov	r8,sp
10011edc:	003cc706 	br	100111fc <__alt_data_end+0xf80111fc>
10011ee0:	a009883a 	mov	r4,r20
10011ee4:	b00b883a 	mov	r5,r22
10011ee8:	d9811a04 	addi	r6,sp,1128
10011eec:	00110080 	call	10011008 <__sprint_r.part.0>
10011ef0:	103fa61e 	bne	r2,zero,10011d8c <__alt_data_end+0xf8011d8c>
10011ef4:	d9011b17 	ldw	r4,1132(sp)
10011ef8:	d8c11c17 	ldw	r3,1136(sp)
10011efc:	d811883a 	mov	r8,sp
10011f00:	21400044 	addi	r5,r4,1
10011f04:	003fc306 	br	10011e14 <__alt_data_end+0xf8011e14>
10011f08:	d9012417 	ldw	r4,1168(sp)
10011f0c:	256dc83a 	sub	r22,r4,r21
10011f10:	05be1f0e 	bge	zero,r22,10011790 <__alt_data_end+0xf8011790>
10011f14:	04c00404 	movi	r19,16
10011f18:	9d81720e 	bge	r19,r22,100124e4 <___vfiprintf_internal_r+0x13c8>
10011f1c:	008400b4 	movhi	r2,4098
10011f20:	10a7c904 	addi	r2,r2,-24796
10011f24:	d8812615 	stw	r2,1176(sp)
10011f28:	028001c4 	movi	r10,7
10011f2c:	00000506 	br	10011f44 <___vfiprintf_internal_r+0xe28>
10011f30:	29000084 	addi	r4,r5,2
10011f34:	42000204 	addi	r8,r8,8
10011f38:	100b883a 	mov	r5,r2
10011f3c:	b5bffc04 	addi	r22,r22,-16
10011f40:	9d800d0e 	bge	r19,r22,10011f78 <___vfiprintf_internal_r+0xe5c>
10011f44:	18c00404 	addi	r3,r3,16
10011f48:	28800044 	addi	r2,r5,1
10011f4c:	44400015 	stw	r17,0(r8)
10011f50:	44c00115 	stw	r19,4(r8)
10011f54:	d8c11c15 	stw	r3,1136(sp)
10011f58:	d8811b15 	stw	r2,1132(sp)
10011f5c:	50bff40e 	bge	r10,r2,10011f30 <__alt_data_end+0xf8011f30>
10011f60:	1800111e 	bne	r3,zero,10011fa8 <___vfiprintf_internal_r+0xe8c>
10011f64:	b5bffc04 	addi	r22,r22,-16
10011f68:	000b883a 	mov	r5,zero
10011f6c:	01000044 	movi	r4,1
10011f70:	d811883a 	mov	r8,sp
10011f74:	9dbff316 	blt	r19,r22,10011f44 <__alt_data_end+0xf8011f44>
10011f78:	d9412617 	ldw	r5,1176(sp)
10011f7c:	1d87883a 	add	r3,r3,r22
10011f80:	45800115 	stw	r22,4(r8)
10011f84:	41400015 	stw	r5,0(r8)
10011f88:	d8c11c15 	stw	r3,1136(sp)
10011f8c:	d9011b15 	stw	r4,1132(sp)
10011f90:	008001c4 	movi	r2,7
10011f94:	11008516 	blt	r2,r4,100121ac <___vfiprintf_internal_r+0x1090>
10011f98:	42000204 	addi	r8,r8,8
10011f9c:	20800044 	addi	r2,r4,1
10011fa0:	200b883a 	mov	r5,r4
10011fa4:	003dfa06 	br	10011790 <__alt_data_end+0xf8011790>
10011fa8:	d9012117 	ldw	r4,1156(sp)
10011fac:	d9412017 	ldw	r5,1152(sp)
10011fb0:	d9811a04 	addi	r6,sp,1128
10011fb4:	da812a15 	stw	r10,1192(sp)
10011fb8:	00110080 	call	10011008 <__sprint_r.part.0>
10011fbc:	da812a17 	ldw	r10,1192(sp)
10011fc0:	103f721e 	bne	r2,zero,10011d8c <__alt_data_end+0xf8011d8c>
10011fc4:	d9411b17 	ldw	r5,1132(sp)
10011fc8:	d8c11c17 	ldw	r3,1136(sp)
10011fcc:	d811883a 	mov	r8,sp
10011fd0:	29000044 	addi	r4,r5,1
10011fd4:	003fd906 	br	10011f3c <__alt_data_end+0xf8011f3c>
10011fd8:	1800681e 	bne	r3,zero,1001217c <___vfiprintf_internal_r+0x1060>
10011fdc:	50004d26 	beq	r10,zero,10012114 <___vfiprintf_internal_r+0xff8>
10011fe0:	d8811d04 	addi	r2,sp,1140
10011fe4:	00c00084 	movi	r3,2
10011fe8:	d8800015 	stw	r2,0(sp)
10011fec:	d8c00115 	stw	r3,4(sp)
10011ff0:	2005883a 	mov	r2,r4
10011ff4:	d811883a 	mov	r8,sp
10011ff8:	003de006 	br	1001177c <__alt_data_end+0xf801177c>
10011ffc:	1800551e 	bne	r3,zero,10012154 <___vfiprintf_internal_r+0x1038>
10012000:	000b883a 	mov	r5,zero
10012004:	00800044 	movi	r2,1
10012008:	d811883a 	mov	r8,sp
1001200c:	003dde06 	br	10011788 <__alt_data_end+0xf8011788>
10012010:	10803fcc 	andi	r2,r2,255
10012014:	1000191e 	bne	r2,zero,1001207c <___vfiprintf_internal_r+0xf60>
10012018:	9080004c 	andi	r2,r18,1
1001201c:	10001726 	beq	r2,zero,1001207c <___vfiprintf_internal_r+0xf60>
10012020:	00800c04 	movi	r2,48
10012024:	d8c109c4 	addi	r3,sp,1063
10012028:	d88109c5 	stb	r2,1063(sp)
1001202c:	dd012817 	ldw	r20,1184(sp)
10012030:	d8c12215 	stw	r3,1160(sp)
10012034:	003d8a06 	br	10011660 <__alt_data_end+0xf8011660>
10012038:	d9012717 	ldw	r4,1180(sp)
1001203c:	dd010a04 	addi	r20,sp,1064
10012040:	988003cc 	andi	r2,r19,15
10012044:	a806973a 	slli	r3,r21,28
10012048:	2085883a 	add	r2,r4,r2
1001204c:	9826d13a 	srli	r19,r19,4
10012050:	10800003 	ldbu	r2,0(r2)
10012054:	a82ad13a 	srli	r21,r21,4
10012058:	a53fffc4 	addi	r20,r20,-1
1001205c:	1ce6b03a 	or	r19,r3,r19
10012060:	a0800005 	stb	r2,0(r20)
10012064:	9d44b03a 	or	r2,r19,r21
10012068:	103ff51e 	bne	r2,zero,10012040 <__alt_data_end+0xf8012040>
1001206c:	d9411e17 	ldw	r5,1144(sp)
10012070:	dd012215 	stw	r20,1160(sp)
10012074:	2d29c83a 	sub	r20,r5,r20
10012078:	003d7906 	br	10011660 <__alt_data_end+0xf8011660>
1001207c:	d8c10a04 	addi	r3,sp,1064
10012080:	d8c12215 	stw	r3,1160(sp)
10012084:	003d7606 	br	10011660 <__alt_data_end+0xf8011660>
10012088:	18009e1e 	bne	r3,zero,10012304 <___vfiprintf_internal_r+0x11e8>
1001208c:	d8811d87 	ldb	r2,1142(sp)
10012090:	10005f26 	beq	r2,zero,10012210 <___vfiprintf_internal_r+0x10f4>
10012094:	00c00044 	movi	r3,1
10012098:	d9011d84 	addi	r4,sp,1142
1001209c:	1805883a 	mov	r2,r3
100120a0:	d9000015 	stw	r4,0(sp)
100120a4:	d8c00115 	stw	r3,4(sp)
100120a8:	d811883a 	mov	r8,sp
100120ac:	003efc06 	br	10011ca0 <__alt_data_end+0xf8011ca0>
100120b0:	d9412417 	ldw	r5,1168(sp)
100120b4:	d811883a 	mov	r8,sp
100120b8:	2d65c83a 	sub	r18,r5,r21
100120bc:	04bf4816 	blt	zero,r18,10011de0 <__alt_data_end+0xf8011de0>
100120c0:	003f6c06 	br	10011e74 <__alt_data_end+0xf8011e74>
100120c4:	b829883a 	mov	r20,r23
100120c8:	003c6906 	br	10011270 <__alt_data_end+0xf8011270>
100120cc:	d9012117 	ldw	r4,1156(sp)
100120d0:	d9412017 	ldw	r5,1152(sp)
100120d4:	d9811a04 	addi	r6,sp,1128
100120d8:	00110080 	call	10011008 <__sprint_r.part.0>
100120dc:	103f2b1e 	bne	r2,zero,10011d8c <__alt_data_end+0xf8011d8c>
100120e0:	d8c11c17 	ldw	r3,1136(sp)
100120e4:	d811883a 	mov	r8,sp
100120e8:	003f3806 	br	10011dcc <__alt_data_end+0xf8011dcc>
100120ec:	00800084 	movi	r2,2
100120f0:	9d46b03a 	or	r3,r19,r21
100120f4:	003df606 	br	100118d0 <__alt_data_end+0xf80118d0>
100120f8:	d9012117 	ldw	r4,1156(sp)
100120fc:	d9412017 	ldw	r5,1152(sp)
10012100:	d9811a04 	addi	r6,sp,1128
10012104:	00110080 	call	10011008 <__sprint_r.part.0>
10012108:	103f201e 	bne	r2,zero,10011d8c <__alt_data_end+0xf8011d8c>
1001210c:	d811883a 	mov	r8,sp
10012110:	003cc606 	br	1001142c <__alt_data_end+0xf801142c>
10012114:	000b883a 	mov	r5,zero
10012118:	2005883a 	mov	r2,r4
1001211c:	d811883a 	mov	r8,sp
10012120:	003d9906 	br	10011788 <__alt_data_end+0xf8011788>
10012124:	10803fcc 	andi	r2,r2,255
10012128:	1080201c 	xori	r2,r2,128
1001212c:	10bfe004 	addi	r2,r2,-128
10012130:	01000c04 	movi	r4,48
10012134:	1100b226 	beq	r2,r4,10012400 <___vfiprintf_internal_r+0x12e4>
10012138:	d9412217 	ldw	r5,1160(sp)
1001213c:	d8811e17 	ldw	r2,1144(sp)
10012140:	193fffc5 	stb	r4,-1(r3)
10012144:	297fffc4 	addi	r5,r5,-1
10012148:	d9412215 	stw	r5,1160(sp)
1001214c:	1169c83a 	sub	r20,r2,r5
10012150:	003d4306 	br	10011660 <__alt_data_end+0xf8011660>
10012154:	d9012117 	ldw	r4,1156(sp)
10012158:	d9412017 	ldw	r5,1152(sp)
1001215c:	d9811a04 	addi	r6,sp,1128
10012160:	00110080 	call	10011008 <__sprint_r.part.0>
10012164:	103f091e 	bne	r2,zero,10011d8c <__alt_data_end+0xf8011d8c>
10012168:	d9411b17 	ldw	r5,1132(sp)
1001216c:	d8c11c17 	ldw	r3,1136(sp)
10012170:	d811883a 	mov	r8,sp
10012174:	28800044 	addi	r2,r5,1
10012178:	003d8306 	br	10011788 <__alt_data_end+0xf8011788>
1001217c:	d9012117 	ldw	r4,1156(sp)
10012180:	d9412017 	ldw	r5,1152(sp)
10012184:	d9811a04 	addi	r6,sp,1128
10012188:	da812a15 	stw	r10,1192(sp)
1001218c:	00110080 	call	10011008 <__sprint_r.part.0>
10012190:	da812a17 	ldw	r10,1192(sp)
10012194:	103efd1e 	bne	r2,zero,10011d8c <__alt_data_end+0xf8011d8c>
10012198:	d9411b17 	ldw	r5,1132(sp)
1001219c:	d8c11c17 	ldw	r3,1136(sp)
100121a0:	d811883a 	mov	r8,sp
100121a4:	28800044 	addi	r2,r5,1
100121a8:	003d6a06 	br	10011754 <__alt_data_end+0xf8011754>
100121ac:	1800a01e 	bne	r3,zero,10012430 <___vfiprintf_internal_r+0x1314>
100121b0:	000b883a 	mov	r5,zero
100121b4:	00800044 	movi	r2,1
100121b8:	d811883a 	mov	r8,sp
100121bc:	003d7406 	br	10011790 <__alt_data_end+0xf8011790>
100121c0:	d9012117 	ldw	r4,1156(sp)
100121c4:	d9412017 	ldw	r5,1152(sp)
100121c8:	d9811a04 	addi	r6,sp,1128
100121cc:	00110080 	call	10011008 <__sprint_r.part.0>
100121d0:	103eee1e 	bne	r2,zero,10011d8c <__alt_data_end+0xf8011d8c>
100121d4:	d8811b17 	ldw	r2,1132(sp)
100121d8:	d8c11c17 	ldw	r3,1136(sp)
100121dc:	d811883a 	mov	r8,sp
100121e0:	10800044 	addi	r2,r2,1
100121e4:	003d8f06 	br	10011824 <__alt_data_end+0xf8011824>
100121e8:	04e7c83a 	sub	r19,zero,r19
100121ec:	9804c03a 	cmpne	r2,r19,zero
100121f0:	056bc83a 	sub	r21,zero,r21
100121f4:	a8abc83a 	sub	r21,r21,r2
100121f8:	05800b44 	movi	r22,45
100121fc:	dd811d85 	stb	r22,1142(sp)
10012200:	8029883a 	mov	r20,r16
10012204:	00800044 	movi	r2,1
10012208:	9d46b03a 	or	r3,r19,r21
1001220c:	003cfa06 	br	100115f8 <__alt_data_end+0xf80115f8>
10012210:	000b883a 	mov	r5,zero
10012214:	00800044 	movi	r2,1
10012218:	d811883a 	mov	r8,sp
1001221c:	503d5a26 	beq	r10,zero,10011788 <__alt_data_end+0xf8011788>
10012220:	00c00084 	movi	r3,2
10012224:	d9011d04 	addi	r4,sp,1140
10012228:	d9000015 	stw	r4,0(sp)
1001222c:	d8c00115 	stw	r3,4(sp)
10012230:	003d5206 	br	1001177c <__alt_data_end+0xf801177c>
10012234:	9080040c 	andi	r2,r18,16
10012238:	1000421e 	bne	r2,zero,10012344 <___vfiprintf_internal_r+0x1228>
1001223c:	9480100c 	andi	r18,r18,64
10012240:	90009c26 	beq	r18,zero,100124b4 <___vfiprintf_internal_r+0x1398>
10012244:	d9412317 	ldw	r5,1164(sp)
10012248:	d8c12517 	ldw	r3,1172(sp)
1001224c:	28800017 	ldw	r2,0(r5)
10012250:	29400104 	addi	r5,r5,4
10012254:	d9412315 	stw	r5,1164(sp)
10012258:	10c0000d 	sth	r3,0(r2)
1001225c:	003be706 	br	100111fc <__alt_data_end+0xf80111fc>
10012260:	90c0100c 	andi	r3,r18,64
10012264:	18003e26 	beq	r3,zero,10012360 <___vfiprintf_internal_r+0x1244>
10012268:	d8c12317 	ldw	r3,1164(sp)
1001226c:	14c0000b 	ldhu	r19,0(r2)
10012270:	002b883a 	mov	r21,zero
10012274:	18c00104 	addi	r3,r3,4
10012278:	d8c12315 	stw	r3,1164(sp)
1001227c:	003db706 	br	1001195c <__alt_data_end+0xf801195c>
10012280:	9080100c 	andi	r2,r18,64
10012284:	10004c26 	beq	r2,zero,100123b8 <___vfiprintf_internal_r+0x129c>
10012288:	1cc0000f 	ldh	r19,0(r3)
1001228c:	d8812317 	ldw	r2,1164(sp)
10012290:	982bd7fa 	srai	r21,r19,31
10012294:	10800104 	addi	r2,r2,4
10012298:	d8812315 	stw	r2,1164(sp)
1001229c:	a805883a 	mov	r2,r21
100122a0:	003cd006 	br	100115e4 <__alt_data_end+0xf80115e4>
100122a4:	00800084 	movi	r2,2
100122a8:	003d8906 	br	100118d0 <__alt_data_end+0xf80118d0>
100122ac:	b9800007 	ldb	r6,0(r23)
100122b0:	003bfb06 	br	100112a0 <__alt_data_end+0xf80112a0>
100122b4:	9080100c 	andi	r2,r18,64
100122b8:	10003726 	beq	r2,zero,10012398 <___vfiprintf_internal_r+0x127c>
100122bc:	d9412317 	ldw	r5,1164(sp)
100122c0:	002b883a 	mov	r21,zero
100122c4:	0005883a 	mov	r2,zero
100122c8:	2cc0000b 	ldhu	r19,0(r5)
100122cc:	29400104 	addi	r5,r5,4
100122d0:	d9412315 	stw	r5,1164(sp)
100122d4:	9807883a 	mov	r3,r19
100122d8:	003d7d06 	br	100118d0 <__alt_data_end+0xf80118d0>
100122dc:	9080100c 	andi	r2,r18,64
100122e0:	10002526 	beq	r2,zero,10012378 <___vfiprintf_internal_r+0x125c>
100122e4:	d8812317 	ldw	r2,1164(sp)
100122e8:	002b883a 	mov	r21,zero
100122ec:	14c0000b 	ldhu	r19,0(r2)
100122f0:	10800104 	addi	r2,r2,4
100122f4:	d8812315 	stw	r2,1164(sp)
100122f8:	9807883a 	mov	r3,r19
100122fc:	00800044 	movi	r2,1
10012300:	003d7306 	br	100118d0 <__alt_data_end+0xf80118d0>
10012304:	d9012117 	ldw	r4,1156(sp)
10012308:	d9412017 	ldw	r5,1152(sp)
1001230c:	d9811a04 	addi	r6,sp,1128
10012310:	da812a15 	stw	r10,1192(sp)
10012314:	00110080 	call	10011008 <__sprint_r.part.0>
10012318:	da812a17 	ldw	r10,1192(sp)
1001231c:	103e9b1e 	bne	r2,zero,10011d8c <__alt_data_end+0xf8011d8c>
10012320:	d9411b17 	ldw	r5,1132(sp)
10012324:	d8c11c17 	ldw	r3,1136(sp)
10012328:	d811883a 	mov	r8,sp
1001232c:	28800044 	addi	r2,r5,1
10012330:	003e5006 	br	10011c74 <__alt_data_end+0xf8011c74>
10012334:	182b883a 	mov	r21,r3
10012338:	003ed006 	br	10011e7c <__alt_data_end+0xf8011e7c>
1001233c:	8029883a 	mov	r20,r16
10012340:	003dc606 	br	10011a5c <__alt_data_end+0xf8011a5c>
10012344:	d8c12317 	ldw	r3,1164(sp)
10012348:	d9012517 	ldw	r4,1172(sp)
1001234c:	18800017 	ldw	r2,0(r3)
10012350:	18c00104 	addi	r3,r3,4
10012354:	d8c12315 	stw	r3,1164(sp)
10012358:	11000015 	stw	r4,0(r2)
1001235c:	003ba706 	br	100111fc <__alt_data_end+0xf80111fc>
10012360:	d9012317 	ldw	r4,1164(sp)
10012364:	14c00017 	ldw	r19,0(r2)
10012368:	002b883a 	mov	r21,zero
1001236c:	21000104 	addi	r4,r4,4
10012370:	d9012315 	stw	r4,1164(sp)
10012374:	003d7906 	br	1001195c <__alt_data_end+0xf801195c>
10012378:	d8c12317 	ldw	r3,1164(sp)
1001237c:	002b883a 	mov	r21,zero
10012380:	00800044 	movi	r2,1
10012384:	1cc00017 	ldw	r19,0(r3)
10012388:	18c00104 	addi	r3,r3,4
1001238c:	d8c12315 	stw	r3,1164(sp)
10012390:	9807883a 	mov	r3,r19
10012394:	003d4e06 	br	100118d0 <__alt_data_end+0xf80118d0>
10012398:	d8812317 	ldw	r2,1164(sp)
1001239c:	002b883a 	mov	r21,zero
100123a0:	14c00017 	ldw	r19,0(r2)
100123a4:	10800104 	addi	r2,r2,4
100123a8:	d8812315 	stw	r2,1164(sp)
100123ac:	9807883a 	mov	r3,r19
100123b0:	0005883a 	mov	r2,zero
100123b4:	003d4606 	br	100118d0 <__alt_data_end+0xf80118d0>
100123b8:	1cc00017 	ldw	r19,0(r3)
100123bc:	d8c12317 	ldw	r3,1164(sp)
100123c0:	982bd7fa 	srai	r21,r19,31
100123c4:	18c00104 	addi	r3,r3,4
100123c8:	d8c12315 	stw	r3,1164(sp)
100123cc:	a805883a 	mov	r2,r21
100123d0:	003c8406 	br	100115e4 <__alt_data_end+0xf80115e4>
100123d4:	010400b4 	movhi	r4,4098
100123d8:	2127c904 	addi	r4,r4,-24796
100123dc:	d9012615 	stw	r4,1176(sp)
100123e0:	003d0606 	br	100117fc <__alt_data_end+0xf80117fc>
100123e4:	b9800043 	ldbu	r6,1(r23)
100123e8:	94800814 	ori	r18,r18,32
100123ec:	bdc00044 	addi	r23,r23,1
100123f0:	31803fcc 	andi	r6,r6,255
100123f4:	3180201c 	xori	r6,r6,128
100123f8:	31bfe004 	addi	r6,r6,-128
100123fc:	003ba806 	br	100112a0 <__alt_data_end+0xf80112a0>
10012400:	d8811e17 	ldw	r2,1144(sp)
10012404:	d8c12217 	ldw	r3,1160(sp)
10012408:	10e9c83a 	sub	r20,r2,r3
1001240c:	003c9406 	br	10011660 <__alt_data_end+0xf8011660>
10012410:	da012a15 	stw	r8,1192(sp)
10012414:	0009d640 	call	10009d64 <strlen>
10012418:	1029883a 	mov	r20,r2
1001241c:	dd811d83 	ldbu	r22,1142(sp)
10012420:	dcc12315 	stw	r19,1164(sp)
10012424:	0021883a 	mov	r16,zero
10012428:	da012a17 	ldw	r8,1192(sp)
1001242c:	003c8c06 	br	10011660 <__alt_data_end+0xf8011660>
10012430:	d9012117 	ldw	r4,1156(sp)
10012434:	d9412017 	ldw	r5,1152(sp)
10012438:	d9811a04 	addi	r6,sp,1128
1001243c:	00110080 	call	10011008 <__sprint_r.part.0>
10012440:	103e521e 	bne	r2,zero,10011d8c <__alt_data_end+0xf8011d8c>
10012444:	d9411b17 	ldw	r5,1132(sp)
10012448:	d8c11c17 	ldw	r3,1136(sp)
1001244c:	d811883a 	mov	r8,sp
10012450:	28800044 	addi	r2,r5,1
10012454:	003cce06 	br	10011790 <__alt_data_end+0xf8011790>
10012458:	014400b4 	movhi	r5,4098
1001245c:	2967cd04 	addi	r5,r5,-24780
10012460:	d9412615 	stw	r5,1176(sp)
10012464:	d9411b17 	ldw	r5,1132(sp)
10012468:	29400044 	addi	r5,r5,1
1001246c:	003cad06 	br	10011724 <__alt_data_end+0xf8011724>
10012470:	00800184 	movi	r2,6
10012474:	1400012e 	bgeu	r2,r16,1001247c <___vfiprintf_internal_r+0x1360>
10012478:	1021883a 	mov	r16,r2
1001247c:	8029883a 	mov	r20,r16
10012480:	802b883a 	mov	r21,r16
10012484:	80001c16 	blt	r16,zero,100124f8 <___vfiprintf_internal_r+0x13dc>
10012488:	00c400b4 	movhi	r3,4098
1001248c:	18e76d04 	addi	r3,r3,-25164
10012490:	dcc12315 	stw	r19,1164(sp)
10012494:	d8c12215 	stw	r3,1160(sp)
10012498:	003cff06 	br	10011898 <__alt_data_end+0xf8011898>
1001249c:	d9411b17 	ldw	r5,1132(sp)
100124a0:	008400b4 	movhi	r2,4098
100124a4:	10a7cd04 	addi	r2,r2,-24780
100124a8:	d8812615 	stw	r2,1176(sp)
100124ac:	29400044 	addi	r5,r5,1
100124b0:	003e6706 	br	10011e50 <__alt_data_end+0xf8011e50>
100124b4:	d9012317 	ldw	r4,1164(sp)
100124b8:	d9412517 	ldw	r5,1172(sp)
100124bc:	20800017 	ldw	r2,0(r4)
100124c0:	21000104 	addi	r4,r4,4
100124c4:	d9012315 	stw	r4,1164(sp)
100124c8:	11400015 	stw	r5,0(r2)
100124cc:	003b4b06 	br	100111fc <__alt_data_end+0xf80111fc>
100124d0:	8029883a 	mov	r20,r16
100124d4:	dd811d83 	ldbu	r22,1142(sp)
100124d8:	dcc12315 	stw	r19,1164(sp)
100124dc:	0021883a 	mov	r16,zero
100124e0:	003c5f06 	br	10011660 <__alt_data_end+0xf8011660>
100124e4:	010400b4 	movhi	r4,4098
100124e8:	2127c904 	addi	r4,r4,-24796
100124ec:	d9012615 	stw	r4,1176(sp)
100124f0:	1009883a 	mov	r4,r2
100124f4:	003ea006 	br	10011f78 <__alt_data_end+0xf8011f78>
100124f8:	002b883a 	mov	r21,zero
100124fc:	003fe206 	br	10012488 <__alt_data_end+0xf8012488>
10012500:	d9412317 	ldw	r5,1164(sp)
10012504:	b807883a 	mov	r3,r23
10012508:	102f883a 	mov	r23,r2
1001250c:	2c000017 	ldw	r16,0(r5)
10012510:	29000104 	addi	r4,r5,4
10012514:	d9012315 	stw	r4,1164(sp)
10012518:	80000416 	blt	r16,zero,1001252c <___vfiprintf_internal_r+0x1410>
1001251c:	19800047 	ldb	r6,1(r3)
10012520:	003b5f06 	br	100112a0 <__alt_data_end+0xf80112a0>
10012524:	043fffc4 	movi	r16,-1
10012528:	003bef06 	br	100114e8 <__alt_data_end+0xf80114e8>
1001252c:	043fffc4 	movi	r16,-1
10012530:	19800047 	ldb	r6,1(r3)
10012534:	003b5a06 	br	100112a0 <__alt_data_end+0xf80112a0>
10012538:	282b883a 	mov	r21,r5
1001253c:	003cc706 	br	1001185c <__alt_data_end+0xf801185c>

10012540 <__vfiprintf_internal>:
10012540:	2007883a 	mov	r3,r4
10012544:	010400b4 	movhi	r4,4098
10012548:	212e8a04 	addi	r4,r4,-17880
1001254c:	21000017 	ldw	r4,0(r4)
10012550:	2805883a 	mov	r2,r5
10012554:	300f883a 	mov	r7,r6
10012558:	180b883a 	mov	r5,r3
1001255c:	100d883a 	mov	r6,r2
10012560:	001111c1 	jmpi	1001111c <___vfiprintf_internal_r>

10012564 <_write_r>:
10012564:	defffd04 	addi	sp,sp,-12
10012568:	dc000015 	stw	r16,0(sp)
1001256c:	040400b4 	movhi	r16,4098
10012570:	dc400115 	stw	r17,4(sp)
10012574:	84355b04 	addi	r16,r16,-10900
10012578:	2023883a 	mov	r17,r4
1001257c:	2809883a 	mov	r4,r5
10012580:	300b883a 	mov	r5,r6
10012584:	380d883a 	mov	r6,r7
10012588:	dfc00215 	stw	ra,8(sp)
1001258c:	80000015 	stw	zero,0(r16)
10012590:	0015ba80 	call	10015ba8 <write>
10012594:	00ffffc4 	movi	r3,-1
10012598:	10c00526 	beq	r2,r3,100125b0 <_write_r+0x4c>
1001259c:	dfc00217 	ldw	ra,8(sp)
100125a0:	dc400117 	ldw	r17,4(sp)
100125a4:	dc000017 	ldw	r16,0(sp)
100125a8:	dec00304 	addi	sp,sp,12
100125ac:	f800283a 	ret
100125b0:	80c00017 	ldw	r3,0(r16)
100125b4:	183ff926 	beq	r3,zero,1001259c <__alt_data_end+0xf801259c>
100125b8:	88c00015 	stw	r3,0(r17)
100125bc:	003ff706 	br	1001259c <__alt_data_end+0xf801259c>

100125c0 <_close_r>:
100125c0:	defffd04 	addi	sp,sp,-12
100125c4:	dc000015 	stw	r16,0(sp)
100125c8:	040400b4 	movhi	r16,4098
100125cc:	dc400115 	stw	r17,4(sp)
100125d0:	84355b04 	addi	r16,r16,-10900
100125d4:	2023883a 	mov	r17,r4
100125d8:	2809883a 	mov	r4,r5
100125dc:	dfc00215 	stw	ra,8(sp)
100125e0:	80000015 	stw	zero,0(r16)
100125e4:	00152c40 	call	100152c4 <close>
100125e8:	00ffffc4 	movi	r3,-1
100125ec:	10c00526 	beq	r2,r3,10012604 <_close_r+0x44>
100125f0:	dfc00217 	ldw	ra,8(sp)
100125f4:	dc400117 	ldw	r17,4(sp)
100125f8:	dc000017 	ldw	r16,0(sp)
100125fc:	dec00304 	addi	sp,sp,12
10012600:	f800283a 	ret
10012604:	80c00017 	ldw	r3,0(r16)
10012608:	183ff926 	beq	r3,zero,100125f0 <__alt_data_end+0xf80125f0>
1001260c:	88c00015 	stw	r3,0(r17)
10012610:	003ff706 	br	100125f0 <__alt_data_end+0xf80125f0>

10012614 <_calloc_r>:
10012614:	defffe04 	addi	sp,sp,-8
10012618:	dc000015 	stw	r16,0(sp)
1001261c:	2021883a 	mov	r16,r4
10012620:	2809883a 	mov	r4,r5
10012624:	300b883a 	mov	r5,r6
10012628:	dfc00115 	stw	ra,4(sp)
1001262c:	00074c40 	call	100074c4 <__mulsi3>
10012630:	8009883a 	mov	r4,r16
10012634:	100b883a 	mov	r5,r2
10012638:	000ec680 	call	1000ec68 <_malloc_r>
1001263c:	1021883a 	mov	r16,r2
10012640:	10002826 	beq	r2,zero,100126e4 <_calloc_r+0xd0>
10012644:	11bfff17 	ldw	r6,-4(r2)
10012648:	00bfff04 	movi	r2,-4
1001264c:	00c00904 	movi	r3,36
10012650:	308c703a 	and	r6,r6,r2
10012654:	308d883a 	add	r6,r6,r2
10012658:	19801436 	bltu	r3,r6,100126ac <_calloc_r+0x98>
1001265c:	008004c4 	movi	r2,19
10012660:	11800936 	bltu	r2,r6,10012688 <_calloc_r+0x74>
10012664:	8005883a 	mov	r2,r16
10012668:	10000015 	stw	zero,0(r2)
1001266c:	10000115 	stw	zero,4(r2)
10012670:	10000215 	stw	zero,8(r2)
10012674:	8005883a 	mov	r2,r16
10012678:	dfc00117 	ldw	ra,4(sp)
1001267c:	dc000017 	ldw	r16,0(sp)
10012680:	dec00204 	addi	sp,sp,8
10012684:	f800283a 	ret
10012688:	80000015 	stw	zero,0(r16)
1001268c:	80000115 	stw	zero,4(r16)
10012690:	008006c4 	movi	r2,27
10012694:	11800d2e 	bgeu	r2,r6,100126cc <_calloc_r+0xb8>
10012698:	80000215 	stw	zero,8(r16)
1001269c:	80000315 	stw	zero,12(r16)
100126a0:	30c00c26 	beq	r6,r3,100126d4 <_calloc_r+0xc0>
100126a4:	80800404 	addi	r2,r16,16
100126a8:	003fef06 	br	10012668 <__alt_data_end+0xf8012668>
100126ac:	8009883a 	mov	r4,r16
100126b0:	000b883a 	mov	r5,zero
100126b4:	000f6540 	call	1000f654 <memset>
100126b8:	8005883a 	mov	r2,r16
100126bc:	dfc00117 	ldw	ra,4(sp)
100126c0:	dc000017 	ldw	r16,0(sp)
100126c4:	dec00204 	addi	sp,sp,8
100126c8:	f800283a 	ret
100126cc:	80800204 	addi	r2,r16,8
100126d0:	003fe506 	br	10012668 <__alt_data_end+0xf8012668>
100126d4:	80000415 	stw	zero,16(r16)
100126d8:	80800604 	addi	r2,r16,24
100126dc:	80000515 	stw	zero,20(r16)
100126e0:	003fe106 	br	10012668 <__alt_data_end+0xf8012668>
100126e4:	0005883a 	mov	r2,zero
100126e8:	003fe306 	br	10012678 <__alt_data_end+0xf8012678>

100126ec <_fclose_r>:
100126ec:	28003226 	beq	r5,zero,100127b8 <_fclose_r+0xcc>
100126f0:	defffc04 	addi	sp,sp,-16
100126f4:	dc400115 	stw	r17,4(sp)
100126f8:	2023883a 	mov	r17,r4
100126fc:	dc000015 	stw	r16,0(sp)
10012700:	dfc00315 	stw	ra,12(sp)
10012704:	dc800215 	stw	r18,8(sp)
10012708:	2821883a 	mov	r16,r5
1001270c:	000df680 	call	1000df68 <__sfp_lock_acquire>
10012710:	88000226 	beq	r17,zero,1001271c <_fclose_r+0x30>
10012714:	88800e17 	ldw	r2,56(r17)
10012718:	10002926 	beq	r2,zero,100127c0 <_fclose_r+0xd4>
1001271c:	8080030f 	ldh	r2,12(r16)
10012720:	10002226 	beq	r2,zero,100127ac <_fclose_r+0xc0>
10012724:	8809883a 	mov	r4,r17
10012728:	800b883a 	mov	r5,r16
1001272c:	000d99c0 	call	1000d99c <_fflush_r>
10012730:	1025883a 	mov	r18,r2
10012734:	80800b17 	ldw	r2,44(r16)
10012738:	10000426 	beq	r2,zero,1001274c <_fclose_r+0x60>
1001273c:	81400717 	ldw	r5,28(r16)
10012740:	8809883a 	mov	r4,r17
10012744:	103ee83a 	callr	r2
10012748:	10002616 	blt	r2,zero,100127e4 <_fclose_r+0xf8>
1001274c:	8080030b 	ldhu	r2,12(r16)
10012750:	1080200c 	andi	r2,r2,128
10012754:	10001f1e 	bne	r2,zero,100127d4 <_fclose_r+0xe8>
10012758:	81400c17 	ldw	r5,48(r16)
1001275c:	28000526 	beq	r5,zero,10012774 <_fclose_r+0x88>
10012760:	80801004 	addi	r2,r16,64
10012764:	28800226 	beq	r5,r2,10012770 <_fclose_r+0x84>
10012768:	8809883a 	mov	r4,r17
1001276c:	000e0cc0 	call	1000e0cc <_free_r>
10012770:	80000c15 	stw	zero,48(r16)
10012774:	81401117 	ldw	r5,68(r16)
10012778:	28000326 	beq	r5,zero,10012788 <_fclose_r+0x9c>
1001277c:	8809883a 	mov	r4,r17
10012780:	000e0cc0 	call	1000e0cc <_free_r>
10012784:	80001115 	stw	zero,68(r16)
10012788:	8000030d 	sth	zero,12(r16)
1001278c:	000df6c0 	call	1000df6c <__sfp_lock_release>
10012790:	9005883a 	mov	r2,r18
10012794:	dfc00317 	ldw	ra,12(sp)
10012798:	dc800217 	ldw	r18,8(sp)
1001279c:	dc400117 	ldw	r17,4(sp)
100127a0:	dc000017 	ldw	r16,0(sp)
100127a4:	dec00404 	addi	sp,sp,16
100127a8:	f800283a 	ret
100127ac:	000df6c0 	call	1000df6c <__sfp_lock_release>
100127b0:	0005883a 	mov	r2,zero
100127b4:	003ff706 	br	10012794 <__alt_data_end+0xf8012794>
100127b8:	0005883a 	mov	r2,zero
100127bc:	f800283a 	ret
100127c0:	8809883a 	mov	r4,r17
100127c4:	000df580 	call	1000df58 <__sinit>
100127c8:	8080030f 	ldh	r2,12(r16)
100127cc:	103fd51e 	bne	r2,zero,10012724 <__alt_data_end+0xf8012724>
100127d0:	003ff606 	br	100127ac <__alt_data_end+0xf80127ac>
100127d4:	81400417 	ldw	r5,16(r16)
100127d8:	8809883a 	mov	r4,r17
100127dc:	000e0cc0 	call	1000e0cc <_free_r>
100127e0:	003fdd06 	br	10012758 <__alt_data_end+0xf8012758>
100127e4:	04bfffc4 	movi	r18,-1
100127e8:	003fd806 	br	1001274c <__alt_data_end+0xf801274c>

100127ec <fclose>:
100127ec:	008400b4 	movhi	r2,4098
100127f0:	10ae8a04 	addi	r2,r2,-17880
100127f4:	200b883a 	mov	r5,r4
100127f8:	11000017 	ldw	r4,0(r2)
100127fc:	00126ec1 	jmpi	100126ec <_fclose_r>

10012800 <_fputwc_r>:
10012800:	3080030b 	ldhu	r2,12(r6)
10012804:	defff804 	addi	sp,sp,-32
10012808:	dcc00415 	stw	r19,16(sp)
1001280c:	dc800315 	stw	r18,12(sp)
10012810:	dc000115 	stw	r16,4(sp)
10012814:	dfc00715 	stw	ra,28(sp)
10012818:	dd400615 	stw	r21,24(sp)
1001281c:	dd000515 	stw	r20,20(sp)
10012820:	dc400215 	stw	r17,8(sp)
10012824:	10c8000c 	andi	r3,r2,8192
10012828:	3021883a 	mov	r16,r6
1001282c:	2027883a 	mov	r19,r4
10012830:	2825883a 	mov	r18,r5
10012834:	1800051e 	bne	r3,zero,1001284c <_fputwc_r+0x4c>
10012838:	30c01917 	ldw	r3,100(r6)
1001283c:	10880014 	ori	r2,r2,8192
10012840:	3080030d 	sth	r2,12(r6)
10012844:	18880014 	ori	r2,r3,8192
10012848:	30801915 	stw	r2,100(r6)
1001284c:	000ea580 	call	1000ea58 <__locale_mb_cur_max>
10012850:	00c00044 	movi	r3,1
10012854:	10c03e26 	beq	r2,r3,10012950 <_fputwc_r+0x150>
10012858:	9809883a 	mov	r4,r19
1001285c:	d80b883a 	mov	r5,sp
10012860:	900d883a 	mov	r6,r18
10012864:	81c01704 	addi	r7,r16,92
10012868:	0012cb00 	call	10012cb0 <_wcrtomb_r>
1001286c:	1029883a 	mov	r20,r2
10012870:	00bfffc4 	movi	r2,-1
10012874:	a0802026 	beq	r20,r2,100128f8 <_fputwc_r+0xf8>
10012878:	d9400003 	ldbu	r5,0(sp)
1001287c:	a0001c26 	beq	r20,zero,100128f0 <_fputwc_r+0xf0>
10012880:	0023883a 	mov	r17,zero
10012884:	05400284 	movi	r21,10
10012888:	00000906 	br	100128b0 <_fputwc_r+0xb0>
1001288c:	80800017 	ldw	r2,0(r16)
10012890:	11400005 	stb	r5,0(r2)
10012894:	80c00017 	ldw	r3,0(r16)
10012898:	18c00044 	addi	r3,r3,1
1001289c:	80c00015 	stw	r3,0(r16)
100128a0:	8c400044 	addi	r17,r17,1
100128a4:	dc45883a 	add	r2,sp,r17
100128a8:	8d00112e 	bgeu	r17,r20,100128f0 <_fputwc_r+0xf0>
100128ac:	11400003 	ldbu	r5,0(r2)
100128b0:	80c00217 	ldw	r3,8(r16)
100128b4:	18ffffc4 	addi	r3,r3,-1
100128b8:	80c00215 	stw	r3,8(r16)
100128bc:	183ff30e 	bge	r3,zero,1001288c <__alt_data_end+0xf801288c>
100128c0:	80800617 	ldw	r2,24(r16)
100128c4:	18801916 	blt	r3,r2,1001292c <_fputwc_r+0x12c>
100128c8:	80800017 	ldw	r2,0(r16)
100128cc:	11400005 	stb	r5,0(r2)
100128d0:	80800017 	ldw	r2,0(r16)
100128d4:	10c00003 	ldbu	r3,0(r2)
100128d8:	10800044 	addi	r2,r2,1
100128dc:	1d402326 	beq	r3,r21,1001296c <_fputwc_r+0x16c>
100128e0:	80800015 	stw	r2,0(r16)
100128e4:	8c400044 	addi	r17,r17,1
100128e8:	dc45883a 	add	r2,sp,r17
100128ec:	8d3fef36 	bltu	r17,r20,100128ac <__alt_data_end+0xf80128ac>
100128f0:	9005883a 	mov	r2,r18
100128f4:	00000406 	br	10012908 <_fputwc_r+0x108>
100128f8:	80c0030b 	ldhu	r3,12(r16)
100128fc:	a005883a 	mov	r2,r20
10012900:	18c01014 	ori	r3,r3,64
10012904:	80c0030d 	sth	r3,12(r16)
10012908:	dfc00717 	ldw	ra,28(sp)
1001290c:	dd400617 	ldw	r21,24(sp)
10012910:	dd000517 	ldw	r20,20(sp)
10012914:	dcc00417 	ldw	r19,16(sp)
10012918:	dc800317 	ldw	r18,12(sp)
1001291c:	dc400217 	ldw	r17,8(sp)
10012920:	dc000117 	ldw	r16,4(sp)
10012924:	dec00804 	addi	sp,sp,32
10012928:	f800283a 	ret
1001292c:	9809883a 	mov	r4,r19
10012930:	29403fcc 	andi	r5,r5,255
10012934:	800d883a 	mov	r6,r16
10012938:	0012b400 	call	10012b40 <__swbuf_r>
1001293c:	10bfffe0 	cmpeqi	r2,r2,-1
10012940:	10803fcc 	andi	r2,r2,255
10012944:	103fd626 	beq	r2,zero,100128a0 <__alt_data_end+0xf80128a0>
10012948:	00bfffc4 	movi	r2,-1
1001294c:	003fee06 	br	10012908 <__alt_data_end+0xf8012908>
10012950:	90ffffc4 	addi	r3,r18,-1
10012954:	01003f84 	movi	r4,254
10012958:	20ffbf36 	bltu	r4,r3,10012858 <__alt_data_end+0xf8012858>
1001295c:	900b883a 	mov	r5,r18
10012960:	dc800005 	stb	r18,0(sp)
10012964:	1029883a 	mov	r20,r2
10012968:	003fc506 	br	10012880 <__alt_data_end+0xf8012880>
1001296c:	9809883a 	mov	r4,r19
10012970:	a80b883a 	mov	r5,r21
10012974:	800d883a 	mov	r6,r16
10012978:	0012b400 	call	10012b40 <__swbuf_r>
1001297c:	10bfffe0 	cmpeqi	r2,r2,-1
10012980:	003fef06 	br	10012940 <__alt_data_end+0xf8012940>

10012984 <fputwc>:
10012984:	defffc04 	addi	sp,sp,-16
10012988:	dc000115 	stw	r16,4(sp)
1001298c:	040400b4 	movhi	r16,4098
10012990:	842e8a04 	addi	r16,r16,-17880
10012994:	dc400215 	stw	r17,8(sp)
10012998:	2023883a 	mov	r17,r4
1001299c:	81000017 	ldw	r4,0(r16)
100129a0:	dfc00315 	stw	ra,12(sp)
100129a4:	280d883a 	mov	r6,r5
100129a8:	20000626 	beq	r4,zero,100129c4 <fputwc+0x40>
100129ac:	20800e17 	ldw	r2,56(r4)
100129b0:	1000041e 	bne	r2,zero,100129c4 <fputwc+0x40>
100129b4:	d9400015 	stw	r5,0(sp)
100129b8:	000df580 	call	1000df58 <__sinit>
100129bc:	81000017 	ldw	r4,0(r16)
100129c0:	d9800017 	ldw	r6,0(sp)
100129c4:	880b883a 	mov	r5,r17
100129c8:	dfc00317 	ldw	ra,12(sp)
100129cc:	dc400217 	ldw	r17,8(sp)
100129d0:	dc000117 	ldw	r16,4(sp)
100129d4:	dec00404 	addi	sp,sp,16
100129d8:	00128001 	jmpi	10012800 <_fputwc_r>

100129dc <_fstat_r>:
100129dc:	defffd04 	addi	sp,sp,-12
100129e0:	dc000015 	stw	r16,0(sp)
100129e4:	040400b4 	movhi	r16,4098
100129e8:	dc400115 	stw	r17,4(sp)
100129ec:	84355b04 	addi	r16,r16,-10900
100129f0:	2023883a 	mov	r17,r4
100129f4:	2809883a 	mov	r4,r5
100129f8:	300b883a 	mov	r5,r6
100129fc:	dfc00215 	stw	ra,8(sp)
10012a00:	80000015 	stw	zero,0(r16)
10012a04:	00154180 	call	10015418 <fstat>
10012a08:	00ffffc4 	movi	r3,-1
10012a0c:	10c00526 	beq	r2,r3,10012a24 <_fstat_r+0x48>
10012a10:	dfc00217 	ldw	ra,8(sp)
10012a14:	dc400117 	ldw	r17,4(sp)
10012a18:	dc000017 	ldw	r16,0(sp)
10012a1c:	dec00304 	addi	sp,sp,12
10012a20:	f800283a 	ret
10012a24:	80c00017 	ldw	r3,0(r16)
10012a28:	183ff926 	beq	r3,zero,10012a10 <__alt_data_end+0xf8012a10>
10012a2c:	88c00015 	stw	r3,0(r17)
10012a30:	003ff706 	br	10012a10 <__alt_data_end+0xf8012a10>

10012a34 <_isatty_r>:
10012a34:	defffd04 	addi	sp,sp,-12
10012a38:	dc000015 	stw	r16,0(sp)
10012a3c:	040400b4 	movhi	r16,4098
10012a40:	dc400115 	stw	r17,4(sp)
10012a44:	84355b04 	addi	r16,r16,-10900
10012a48:	2023883a 	mov	r17,r4
10012a4c:	2809883a 	mov	r4,r5
10012a50:	dfc00215 	stw	ra,8(sp)
10012a54:	80000015 	stw	zero,0(r16)
10012a58:	00155200 	call	10015520 <isatty>
10012a5c:	00ffffc4 	movi	r3,-1
10012a60:	10c00526 	beq	r2,r3,10012a78 <_isatty_r+0x44>
10012a64:	dfc00217 	ldw	ra,8(sp)
10012a68:	dc400117 	ldw	r17,4(sp)
10012a6c:	dc000017 	ldw	r16,0(sp)
10012a70:	dec00304 	addi	sp,sp,12
10012a74:	f800283a 	ret
10012a78:	80c00017 	ldw	r3,0(r16)
10012a7c:	183ff926 	beq	r3,zero,10012a64 <__alt_data_end+0xf8012a64>
10012a80:	88c00015 	stw	r3,0(r17)
10012a84:	003ff706 	br	10012a64 <__alt_data_end+0xf8012a64>

10012a88 <_lseek_r>:
10012a88:	defffd04 	addi	sp,sp,-12
10012a8c:	dc000015 	stw	r16,0(sp)
10012a90:	040400b4 	movhi	r16,4098
10012a94:	dc400115 	stw	r17,4(sp)
10012a98:	84355b04 	addi	r16,r16,-10900
10012a9c:	2023883a 	mov	r17,r4
10012aa0:	2809883a 	mov	r4,r5
10012aa4:	300b883a 	mov	r5,r6
10012aa8:	380d883a 	mov	r6,r7
10012aac:	dfc00215 	stw	ra,8(sp)
10012ab0:	80000015 	stw	zero,0(r16)
10012ab4:	00157080 	call	10015708 <lseek>
10012ab8:	00ffffc4 	movi	r3,-1
10012abc:	10c00526 	beq	r2,r3,10012ad4 <_lseek_r+0x4c>
10012ac0:	dfc00217 	ldw	ra,8(sp)
10012ac4:	dc400117 	ldw	r17,4(sp)
10012ac8:	dc000017 	ldw	r16,0(sp)
10012acc:	dec00304 	addi	sp,sp,12
10012ad0:	f800283a 	ret
10012ad4:	80c00017 	ldw	r3,0(r16)
10012ad8:	183ff926 	beq	r3,zero,10012ac0 <__alt_data_end+0xf8012ac0>
10012adc:	88c00015 	stw	r3,0(r17)
10012ae0:	003ff706 	br	10012ac0 <__alt_data_end+0xf8012ac0>

10012ae4 <_read_r>:
10012ae4:	defffd04 	addi	sp,sp,-12
10012ae8:	dc000015 	stw	r16,0(sp)
10012aec:	040400b4 	movhi	r16,4098
10012af0:	dc400115 	stw	r17,4(sp)
10012af4:	84355b04 	addi	r16,r16,-10900
10012af8:	2023883a 	mov	r17,r4
10012afc:	2809883a 	mov	r4,r5
10012b00:	300b883a 	mov	r5,r6
10012b04:	380d883a 	mov	r6,r7
10012b08:	dfc00215 	stw	ra,8(sp)
10012b0c:	80000015 	stw	zero,0(r16)
10012b10:	00158f40 	call	100158f4 <read>
10012b14:	00ffffc4 	movi	r3,-1
10012b18:	10c00526 	beq	r2,r3,10012b30 <_read_r+0x4c>
10012b1c:	dfc00217 	ldw	ra,8(sp)
10012b20:	dc400117 	ldw	r17,4(sp)
10012b24:	dc000017 	ldw	r16,0(sp)
10012b28:	dec00304 	addi	sp,sp,12
10012b2c:	f800283a 	ret
10012b30:	80c00017 	ldw	r3,0(r16)
10012b34:	183ff926 	beq	r3,zero,10012b1c <__alt_data_end+0xf8012b1c>
10012b38:	88c00015 	stw	r3,0(r17)
10012b3c:	003ff706 	br	10012b1c <__alt_data_end+0xf8012b1c>

10012b40 <__swbuf_r>:
10012b40:	defffc04 	addi	sp,sp,-16
10012b44:	dc800215 	stw	r18,8(sp)
10012b48:	dc400115 	stw	r17,4(sp)
10012b4c:	dc000015 	stw	r16,0(sp)
10012b50:	dfc00315 	stw	ra,12(sp)
10012b54:	2025883a 	mov	r18,r4
10012b58:	2823883a 	mov	r17,r5
10012b5c:	3021883a 	mov	r16,r6
10012b60:	20000226 	beq	r4,zero,10012b6c <__swbuf_r+0x2c>
10012b64:	20800e17 	ldw	r2,56(r4)
10012b68:	10004126 	beq	r2,zero,10012c70 <__swbuf_r+0x130>
10012b6c:	80c00617 	ldw	r3,24(r16)
10012b70:	8180030b 	ldhu	r6,12(r16)
10012b74:	80c00215 	stw	r3,8(r16)
10012b78:	30c0020c 	andi	r3,r6,8
10012b7c:	18003526 	beq	r3,zero,10012c54 <__swbuf_r+0x114>
10012b80:	80c00417 	ldw	r3,16(r16)
10012b84:	18003326 	beq	r3,zero,10012c54 <__swbuf_r+0x114>
10012b88:	3088000c 	andi	r2,r6,8192
10012b8c:	8c403fcc 	andi	r17,r17,255
10012b90:	10001726 	beq	r2,zero,10012bf0 <__swbuf_r+0xb0>
10012b94:	80800017 	ldw	r2,0(r16)
10012b98:	81000517 	ldw	r4,20(r16)
10012b9c:	10c7c83a 	sub	r3,r2,r3
10012ba0:	19001d0e 	bge	r3,r4,10012c18 <__swbuf_r+0xd8>
10012ba4:	18c00044 	addi	r3,r3,1
10012ba8:	81400217 	ldw	r5,8(r16)
10012bac:	11000044 	addi	r4,r2,1
10012bb0:	81000015 	stw	r4,0(r16)
10012bb4:	297fffc4 	addi	r5,r5,-1
10012bb8:	81400215 	stw	r5,8(r16)
10012bbc:	14400005 	stb	r17,0(r2)
10012bc0:	80800517 	ldw	r2,20(r16)
10012bc4:	10c01d26 	beq	r2,r3,10012c3c <__swbuf_r+0xfc>
10012bc8:	8080030b 	ldhu	r2,12(r16)
10012bcc:	1080004c 	andi	r2,r2,1
10012bd0:	1000181e 	bne	r2,zero,10012c34 <__swbuf_r+0xf4>
10012bd4:	8805883a 	mov	r2,r17
10012bd8:	dfc00317 	ldw	ra,12(sp)
10012bdc:	dc800217 	ldw	r18,8(sp)
10012be0:	dc400117 	ldw	r17,4(sp)
10012be4:	dc000017 	ldw	r16,0(sp)
10012be8:	dec00404 	addi	sp,sp,16
10012bec:	f800283a 	ret
10012bf0:	81001917 	ldw	r4,100(r16)
10012bf4:	00b7ffc4 	movi	r2,-8193
10012bf8:	31880014 	ori	r6,r6,8192
10012bfc:	2084703a 	and	r2,r4,r2
10012c00:	80801915 	stw	r2,100(r16)
10012c04:	80800017 	ldw	r2,0(r16)
10012c08:	81000517 	ldw	r4,20(r16)
10012c0c:	8180030d 	sth	r6,12(r16)
10012c10:	10c7c83a 	sub	r3,r2,r3
10012c14:	193fe316 	blt	r3,r4,10012ba4 <__alt_data_end+0xf8012ba4>
10012c18:	9009883a 	mov	r4,r18
10012c1c:	800b883a 	mov	r5,r16
10012c20:	000d99c0 	call	1000d99c <_fflush_r>
10012c24:	1000091e 	bne	r2,zero,10012c4c <__swbuf_r+0x10c>
10012c28:	80800017 	ldw	r2,0(r16)
10012c2c:	00c00044 	movi	r3,1
10012c30:	003fdd06 	br	10012ba8 <__alt_data_end+0xf8012ba8>
10012c34:	00800284 	movi	r2,10
10012c38:	88bfe61e 	bne	r17,r2,10012bd4 <__alt_data_end+0xf8012bd4>
10012c3c:	9009883a 	mov	r4,r18
10012c40:	800b883a 	mov	r5,r16
10012c44:	000d99c0 	call	1000d99c <_fflush_r>
10012c48:	103fe226 	beq	r2,zero,10012bd4 <__alt_data_end+0xf8012bd4>
10012c4c:	00bfffc4 	movi	r2,-1
10012c50:	003fe106 	br	10012bd8 <__alt_data_end+0xf8012bd8>
10012c54:	9009883a 	mov	r4,r18
10012c58:	800b883a 	mov	r5,r16
10012c5c:	000bf1c0 	call	1000bf1c <__swsetup_r>
10012c60:	1000051e 	bne	r2,zero,10012c78 <__swbuf_r+0x138>
10012c64:	8180030b 	ldhu	r6,12(r16)
10012c68:	80c00417 	ldw	r3,16(r16)
10012c6c:	003fc606 	br	10012b88 <__alt_data_end+0xf8012b88>
10012c70:	000df580 	call	1000df58 <__sinit>
10012c74:	003fbd06 	br	10012b6c <__alt_data_end+0xf8012b6c>
10012c78:	80c0030b 	ldhu	r3,12(r16)
10012c7c:	00bfffc4 	movi	r2,-1
10012c80:	18c01014 	ori	r3,r3,64
10012c84:	80c0030d 	sth	r3,12(r16)
10012c88:	00c00244 	movi	r3,9
10012c8c:	90c00015 	stw	r3,0(r18)
10012c90:	003fd106 	br	10012bd8 <__alt_data_end+0xf8012bd8>

10012c94 <__swbuf>:
10012c94:	00c400b4 	movhi	r3,4098
10012c98:	18ee8a04 	addi	r3,r3,-17880
10012c9c:	2005883a 	mov	r2,r4
10012ca0:	19000017 	ldw	r4,0(r3)
10012ca4:	280d883a 	mov	r6,r5
10012ca8:	100b883a 	mov	r5,r2
10012cac:	0012b401 	jmpi	10012b40 <__swbuf_r>

10012cb0 <_wcrtomb_r>:
10012cb0:	defff604 	addi	sp,sp,-40
10012cb4:	008400b4 	movhi	r2,4098
10012cb8:	dc800815 	stw	r18,32(sp)
10012cbc:	dc400715 	stw	r17,28(sp)
10012cc0:	dc000615 	stw	r16,24(sp)
10012cc4:	10ae8e04 	addi	r2,r2,-17864
10012cc8:	dfc00915 	stw	ra,36(sp)
10012ccc:	2021883a 	mov	r16,r4
10012cd0:	3823883a 	mov	r17,r7
10012cd4:	14800017 	ldw	r18,0(r2)
10012cd8:	28001426 	beq	r5,zero,10012d2c <_wcrtomb_r+0x7c>
10012cdc:	d9400415 	stw	r5,16(sp)
10012ce0:	d9800515 	stw	r6,20(sp)
10012ce4:	000ea4c0 	call	1000ea4c <__locale_charset>
10012ce8:	d9400417 	ldw	r5,16(sp)
10012cec:	d9800517 	ldw	r6,20(sp)
10012cf0:	8009883a 	mov	r4,r16
10012cf4:	dc400015 	stw	r17,0(sp)
10012cf8:	100f883a 	mov	r7,r2
10012cfc:	903ee83a 	callr	r18
10012d00:	00ffffc4 	movi	r3,-1
10012d04:	10c0031e 	bne	r2,r3,10012d14 <_wcrtomb_r+0x64>
10012d08:	88000015 	stw	zero,0(r17)
10012d0c:	00c02284 	movi	r3,138
10012d10:	80c00015 	stw	r3,0(r16)
10012d14:	dfc00917 	ldw	ra,36(sp)
10012d18:	dc800817 	ldw	r18,32(sp)
10012d1c:	dc400717 	ldw	r17,28(sp)
10012d20:	dc000617 	ldw	r16,24(sp)
10012d24:	dec00a04 	addi	sp,sp,40
10012d28:	f800283a 	ret
10012d2c:	000ea4c0 	call	1000ea4c <__locale_charset>
10012d30:	8009883a 	mov	r4,r16
10012d34:	dc400015 	stw	r17,0(sp)
10012d38:	d9400104 	addi	r5,sp,4
10012d3c:	000d883a 	mov	r6,zero
10012d40:	100f883a 	mov	r7,r2
10012d44:	903ee83a 	callr	r18
10012d48:	003fed06 	br	10012d00 <__alt_data_end+0xf8012d00>

10012d4c <wcrtomb>:
10012d4c:	defff504 	addi	sp,sp,-44
10012d50:	dc400515 	stw	r17,20(sp)
10012d54:	dc000415 	stw	r16,16(sp)
10012d58:	dfc00a15 	stw	ra,40(sp)
10012d5c:	dd400915 	stw	r21,36(sp)
10012d60:	dd000815 	stw	r20,32(sp)
10012d64:	dcc00715 	stw	r19,28(sp)
10012d68:	dc800615 	stw	r18,24(sp)
10012d6c:	2021883a 	mov	r16,r4
10012d70:	3023883a 	mov	r17,r6
10012d74:	20001d26 	beq	r4,zero,10012dec <wcrtomb+0xa0>
10012d78:	048400b4 	movhi	r18,4098
10012d7c:	94ae8a04 	addi	r18,r18,-17880
10012d80:	008400b4 	movhi	r2,4098
10012d84:	95400017 	ldw	r21,0(r18)
10012d88:	10ae8e04 	addi	r2,r2,-17864
10012d8c:	15000017 	ldw	r20,0(r2)
10012d90:	2827883a 	mov	r19,r5
10012d94:	000ea4c0 	call	1000ea4c <__locale_charset>
10012d98:	a809883a 	mov	r4,r21
10012d9c:	dc400015 	stw	r17,0(sp)
10012da0:	800b883a 	mov	r5,r16
10012da4:	980d883a 	mov	r6,r19
10012da8:	100f883a 	mov	r7,r2
10012dac:	a03ee83a 	callr	r20
10012db0:	00ffffc4 	movi	r3,-1
10012db4:	10c0041e 	bne	r2,r3,10012dc8 <wcrtomb+0x7c>
10012db8:	90c00017 	ldw	r3,0(r18)
10012dbc:	01002284 	movi	r4,138
10012dc0:	88000015 	stw	zero,0(r17)
10012dc4:	19000015 	stw	r4,0(r3)
10012dc8:	dfc00a17 	ldw	ra,40(sp)
10012dcc:	dd400917 	ldw	r21,36(sp)
10012dd0:	dd000817 	ldw	r20,32(sp)
10012dd4:	dcc00717 	ldw	r19,28(sp)
10012dd8:	dc800617 	ldw	r18,24(sp)
10012ddc:	dc400517 	ldw	r17,20(sp)
10012de0:	dc000417 	ldw	r16,16(sp)
10012de4:	dec00b04 	addi	sp,sp,44
10012de8:	f800283a 	ret
10012dec:	048400b4 	movhi	r18,4098
10012df0:	94ae8a04 	addi	r18,r18,-17880
10012df4:	008400b4 	movhi	r2,4098
10012df8:	94c00017 	ldw	r19,0(r18)
10012dfc:	10ae8e04 	addi	r2,r2,-17864
10012e00:	14000017 	ldw	r16,0(r2)
10012e04:	000ea4c0 	call	1000ea4c <__locale_charset>
10012e08:	9809883a 	mov	r4,r19
10012e0c:	dc400015 	stw	r17,0(sp)
10012e10:	d9400104 	addi	r5,sp,4
10012e14:	000d883a 	mov	r6,zero
10012e18:	100f883a 	mov	r7,r2
10012e1c:	803ee83a 	callr	r16
10012e20:	003fe306 	br	10012db0 <__alt_data_end+0xf8012db0>

10012e24 <__ascii_wctomb>:
10012e24:	28000526 	beq	r5,zero,10012e3c <__ascii_wctomb+0x18>
10012e28:	00803fc4 	movi	r2,255
10012e2c:	11800536 	bltu	r2,r6,10012e44 <__ascii_wctomb+0x20>
10012e30:	29800005 	stb	r6,0(r5)
10012e34:	00800044 	movi	r2,1
10012e38:	f800283a 	ret
10012e3c:	0005883a 	mov	r2,zero
10012e40:	f800283a 	ret
10012e44:	00802284 	movi	r2,138
10012e48:	20800015 	stw	r2,0(r4)
10012e4c:	00bfffc4 	movi	r2,-1
10012e50:	f800283a 	ret

10012e54 <_wctomb_r>:
10012e54:	008400b4 	movhi	r2,4098
10012e58:	defff904 	addi	sp,sp,-28
10012e5c:	10ae8e04 	addi	r2,r2,-17864
10012e60:	dfc00615 	stw	ra,24(sp)
10012e64:	dc400515 	stw	r17,20(sp)
10012e68:	dc000415 	stw	r16,16(sp)
10012e6c:	3823883a 	mov	r17,r7
10012e70:	14000017 	ldw	r16,0(r2)
10012e74:	d9000115 	stw	r4,4(sp)
10012e78:	d9400215 	stw	r5,8(sp)
10012e7c:	d9800315 	stw	r6,12(sp)
10012e80:	000ea4c0 	call	1000ea4c <__locale_charset>
10012e84:	d9000117 	ldw	r4,4(sp)
10012e88:	d9400217 	ldw	r5,8(sp)
10012e8c:	d9800317 	ldw	r6,12(sp)
10012e90:	dc400015 	stw	r17,0(sp)
10012e94:	100f883a 	mov	r7,r2
10012e98:	803ee83a 	callr	r16
10012e9c:	dfc00617 	ldw	ra,24(sp)
10012ea0:	dc400517 	ldw	r17,20(sp)
10012ea4:	dc000417 	ldw	r16,16(sp)
10012ea8:	dec00704 	addi	sp,sp,28
10012eac:	f800283a 	ret

10012eb0 <__muldi3>:
10012eb0:	defff604 	addi	sp,sp,-40
10012eb4:	dd800615 	stw	r22,24(sp)
10012eb8:	dd400515 	stw	r21,20(sp)
10012ebc:	25bfffcc 	andi	r22,r4,65535
10012ec0:	357fffcc 	andi	r21,r6,65535
10012ec4:	dc400115 	stw	r17,4(sp)
10012ec8:	2022d43a 	srli	r17,r4,16
10012ecc:	dcc00315 	stw	r19,12(sp)
10012ed0:	dc800215 	stw	r18,8(sp)
10012ed4:	2027883a 	mov	r19,r4
10012ed8:	2825883a 	mov	r18,r5
10012edc:	a809883a 	mov	r4,r21
10012ee0:	b00b883a 	mov	r5,r22
10012ee4:	dfc00915 	stw	ra,36(sp)
10012ee8:	df000815 	stw	fp,32(sp)
10012eec:	ddc00715 	stw	r23,28(sp)
10012ef0:	3839883a 	mov	fp,r7
10012ef4:	302ed43a 	srli	r23,r6,16
10012ef8:	dd000415 	stw	r20,16(sp)
10012efc:	dc000015 	stw	r16,0(sp)
10012f00:	3029883a 	mov	r20,r6
10012f04:	00074c40 	call	100074c4 <__mulsi3>
10012f08:	a809883a 	mov	r4,r21
10012f0c:	880b883a 	mov	r5,r17
10012f10:	1021883a 	mov	r16,r2
10012f14:	00074c40 	call	100074c4 <__mulsi3>
10012f18:	880b883a 	mov	r5,r17
10012f1c:	b809883a 	mov	r4,r23
10012f20:	102b883a 	mov	r21,r2
10012f24:	00074c40 	call	100074c4 <__mulsi3>
10012f28:	b809883a 	mov	r4,r23
10012f2c:	b00b883a 	mov	r5,r22
10012f30:	1023883a 	mov	r17,r2
10012f34:	00074c40 	call	100074c4 <__mulsi3>
10012f38:	8012d43a 	srli	r9,r16,16
10012f3c:	a885883a 	add	r2,r21,r2
10012f40:	1251883a 	add	r8,r2,r9
10012f44:	4540022e 	bgeu	r8,r21,10012f50 <__muldi3+0xa0>
10012f48:	00800074 	movhi	r2,1
10012f4c:	88a3883a 	add	r17,r17,r2
10012f50:	4006d43a 	srli	r3,r8,16
10012f54:	4010943a 	slli	r8,r8,16
10012f58:	9809883a 	mov	r4,r19
10012f5c:	e00b883a 	mov	r5,fp
10012f60:	843fffcc 	andi	r16,r16,65535
10012f64:	88e3883a 	add	r17,r17,r3
10012f68:	4421883a 	add	r16,r8,r16
10012f6c:	00074c40 	call	100074c4 <__mulsi3>
10012f70:	a009883a 	mov	r4,r20
10012f74:	900b883a 	mov	r5,r18
10012f78:	1027883a 	mov	r19,r2
10012f7c:	00074c40 	call	100074c4 <__mulsi3>
10012f80:	9885883a 	add	r2,r19,r2
10012f84:	1447883a 	add	r3,r2,r17
10012f88:	8005883a 	mov	r2,r16
10012f8c:	dfc00917 	ldw	ra,36(sp)
10012f90:	df000817 	ldw	fp,32(sp)
10012f94:	ddc00717 	ldw	r23,28(sp)
10012f98:	dd800617 	ldw	r22,24(sp)
10012f9c:	dd400517 	ldw	r21,20(sp)
10012fa0:	dd000417 	ldw	r20,16(sp)
10012fa4:	dcc00317 	ldw	r19,12(sp)
10012fa8:	dc800217 	ldw	r18,8(sp)
10012fac:	dc400117 	ldw	r17,4(sp)
10012fb0:	dc000017 	ldw	r16,0(sp)
10012fb4:	dec00a04 	addi	sp,sp,40
10012fb8:	f800283a 	ret

10012fbc <__udivdi3>:
10012fbc:	defff504 	addi	sp,sp,-44
10012fc0:	dcc00415 	stw	r19,16(sp)
10012fc4:	dc000115 	stw	r16,4(sp)
10012fc8:	dfc00a15 	stw	ra,40(sp)
10012fcc:	df000915 	stw	fp,36(sp)
10012fd0:	ddc00815 	stw	r23,32(sp)
10012fd4:	dd800715 	stw	r22,28(sp)
10012fd8:	dd400615 	stw	r21,24(sp)
10012fdc:	dd000515 	stw	r20,20(sp)
10012fe0:	dc800315 	stw	r18,12(sp)
10012fe4:	dc400215 	stw	r17,8(sp)
10012fe8:	2027883a 	mov	r19,r4
10012fec:	2821883a 	mov	r16,r5
10012ff0:	3800471e 	bne	r7,zero,10013110 <__udivdi3+0x154>
10012ff4:	3025883a 	mov	r18,r6
10012ff8:	2023883a 	mov	r17,r4
10012ffc:	2980592e 	bgeu	r5,r6,10013164 <__udivdi3+0x1a8>
10013000:	00bfffd4 	movui	r2,65535
10013004:	2829883a 	mov	r20,r5
10013008:	1180b236 	bltu	r2,r6,100132d4 <__udivdi3+0x318>
1001300c:	00803fc4 	movi	r2,255
10013010:	1181622e 	bgeu	r2,r6,1001359c <__udivdi3+0x5e0>
10013014:	00800204 	movi	r2,8
10013018:	1007883a 	mov	r3,r2
1001301c:	3084d83a 	srl	r2,r6,r2
10013020:	010400b4 	movhi	r4,4098
10013024:	21271e04 	addi	r4,r4,-25480
10013028:	2085883a 	add	r2,r4,r2
1001302c:	11000003 	ldbu	r4,0(r2)
10013030:	20c9883a 	add	r4,r4,r3
10013034:	00c00804 	movi	r3,32
10013038:	1907c83a 	sub	r3,r3,r4
1001303c:	18000526 	beq	r3,zero,10013054 <__udivdi3+0x98>
10013040:	80e0983a 	sll	r16,r16,r3
10013044:	9908d83a 	srl	r4,r19,r4
10013048:	30e4983a 	sll	r18,r6,r3
1001304c:	98e2983a 	sll	r17,r19,r3
10013050:	8128b03a 	or	r20,r16,r4
10013054:	902ad43a 	srli	r21,r18,16
10013058:	a009883a 	mov	r4,r20
1001305c:	95bfffcc 	andi	r22,r18,65535
10013060:	a80b883a 	mov	r5,r21
10013064:	00074bc0 	call	100074bc <__umodsi3>
10013068:	a009883a 	mov	r4,r20
1001306c:	a80b883a 	mov	r5,r21
10013070:	102f883a 	mov	r23,r2
10013074:	00074b40 	call	100074b4 <__udivsi3>
10013078:	1009883a 	mov	r4,r2
1001307c:	b00b883a 	mov	r5,r22
10013080:	1021883a 	mov	r16,r2
10013084:	00074c40 	call	100074c4 <__mulsi3>
10013088:	b82e943a 	slli	r23,r23,16
1001308c:	8808d43a 	srli	r4,r17,16
10013090:	b906b03a 	or	r3,r23,r4
10013094:	1880052e 	bgeu	r3,r2,100130ac <__udivdi3+0xf0>
10013098:	1c87883a 	add	r3,r3,r18
1001309c:	813fffc4 	addi	r4,r16,-1
100130a0:	1c800136 	bltu	r3,r18,100130a8 <__udivdi3+0xec>
100130a4:	18815236 	bltu	r3,r2,100135f0 <__udivdi3+0x634>
100130a8:	2021883a 	mov	r16,r4
100130ac:	18a7c83a 	sub	r19,r3,r2
100130b0:	9809883a 	mov	r4,r19
100130b4:	a80b883a 	mov	r5,r21
100130b8:	00074bc0 	call	100074bc <__umodsi3>
100130bc:	1029883a 	mov	r20,r2
100130c0:	9809883a 	mov	r4,r19
100130c4:	a80b883a 	mov	r5,r21
100130c8:	a028943a 	slli	r20,r20,16
100130cc:	00074b40 	call	100074b4 <__udivsi3>
100130d0:	1009883a 	mov	r4,r2
100130d4:	b00b883a 	mov	r5,r22
100130d8:	8c7fffcc 	andi	r17,r17,65535
100130dc:	1027883a 	mov	r19,r2
100130e0:	a462b03a 	or	r17,r20,r17
100130e4:	00074c40 	call	100074c4 <__mulsi3>
100130e8:	8880052e 	bgeu	r17,r2,10013100 <__udivdi3+0x144>
100130ec:	8ca3883a 	add	r17,r17,r18
100130f0:	98ffffc4 	addi	r3,r19,-1
100130f4:	8c811036 	bltu	r17,r18,10013538 <__udivdi3+0x57c>
100130f8:	88810f2e 	bgeu	r17,r2,10013538 <__udivdi3+0x57c>
100130fc:	9cffff84 	addi	r19,r19,-2
10013100:	8020943a 	slli	r16,r16,16
10013104:	0007883a 	mov	r3,zero
10013108:	9c04b03a 	or	r2,r19,r16
1001310c:	00006006 	br	10013290 <__udivdi3+0x2d4>
10013110:	29c05d36 	bltu	r5,r7,10013288 <__udivdi3+0x2cc>
10013114:	00bfffd4 	movui	r2,65535
10013118:	11c0692e 	bgeu	r2,r7,100132c0 <__udivdi3+0x304>
1001311c:	00804034 	movhi	r2,256
10013120:	10bfffc4 	addi	r2,r2,-1
10013124:	11c10e2e 	bgeu	r2,r7,10013560 <__udivdi3+0x5a4>
10013128:	01400604 	movi	r5,24
1001312c:	2811883a 	mov	r8,r5
10013130:	394ad83a 	srl	r5,r7,r5
10013134:	008400b4 	movhi	r2,4098
10013138:	10a71e04 	addi	r2,r2,-25480
1001313c:	114b883a 	add	r5,r2,r5
10013140:	29400003 	ldbu	r5,0(r5)
10013144:	00c00804 	movi	r3,32
10013148:	2a0b883a 	add	r5,r5,r8
1001314c:	196fc83a 	sub	r23,r3,r5
10013150:	b8006b1e 	bne	r23,zero,10013300 <__udivdi3+0x344>
10013154:	3c011436 	bltu	r7,r16,100135a8 <__udivdi3+0x5ec>
10013158:	9985403a 	cmpgeu	r2,r19,r6
1001315c:	0007883a 	mov	r3,zero
10013160:	00004b06 	br	10013290 <__udivdi3+0x2d4>
10013164:	3000041e 	bne	r6,zero,10013178 <__udivdi3+0x1bc>
10013168:	01000044 	movi	r4,1
1001316c:	000b883a 	mov	r5,zero
10013170:	00074b40 	call	100074b4 <__udivsi3>
10013174:	1025883a 	mov	r18,r2
10013178:	00bfffd4 	movui	r2,65535
1001317c:	14805b2e 	bgeu	r2,r18,100132ec <__udivdi3+0x330>
10013180:	00804034 	movhi	r2,256
10013184:	10bfffc4 	addi	r2,r2,-1
10013188:	1480fe2e 	bgeu	r2,r18,10013584 <__udivdi3+0x5c8>
1001318c:	00800604 	movi	r2,24
10013190:	1007883a 	mov	r3,r2
10013194:	9084d83a 	srl	r2,r18,r2
10013198:	010400b4 	movhi	r4,4098
1001319c:	21271e04 	addi	r4,r4,-25480
100131a0:	2085883a 	add	r2,r4,r2
100131a4:	11800003 	ldbu	r6,0(r2)
100131a8:	01c00804 	movi	r7,32
100131ac:	30c7883a 	add	r3,r6,r3
100131b0:	38cfc83a 	sub	r7,r7,r3
100131b4:	3800a71e 	bne	r7,zero,10013454 <__udivdi3+0x498>
100131b8:	9028d43a 	srli	r20,r18,16
100131bc:	84a1c83a 	sub	r16,r16,r18
100131c0:	957fffcc 	andi	r21,r18,65535
100131c4:	00c00044 	movi	r3,1
100131c8:	8009883a 	mov	r4,r16
100131cc:	a00b883a 	mov	r5,r20
100131d0:	d8c00015 	stw	r3,0(sp)
100131d4:	00074bc0 	call	100074bc <__umodsi3>
100131d8:	8009883a 	mov	r4,r16
100131dc:	a00b883a 	mov	r5,r20
100131e0:	102d883a 	mov	r22,r2
100131e4:	00074b40 	call	100074b4 <__udivsi3>
100131e8:	1009883a 	mov	r4,r2
100131ec:	a80b883a 	mov	r5,r21
100131f0:	1021883a 	mov	r16,r2
100131f4:	00074c40 	call	100074c4 <__mulsi3>
100131f8:	b02c943a 	slli	r22,r22,16
100131fc:	880ed43a 	srli	r7,r17,16
10013200:	d8c00017 	ldw	r3,0(sp)
10013204:	b1ccb03a 	or	r6,r22,r7
10013208:	3080052e 	bgeu	r6,r2,10013220 <__udivdi3+0x264>
1001320c:	348d883a 	add	r6,r6,r18
10013210:	813fffc4 	addi	r4,r16,-1
10013214:	34800136 	bltu	r6,r18,1001321c <__udivdi3+0x260>
10013218:	3080f236 	bltu	r6,r2,100135e4 <__udivdi3+0x628>
1001321c:	2021883a 	mov	r16,r4
10013220:	30a7c83a 	sub	r19,r6,r2
10013224:	9809883a 	mov	r4,r19
10013228:	a00b883a 	mov	r5,r20
1001322c:	d8c00015 	stw	r3,0(sp)
10013230:	00074bc0 	call	100074bc <__umodsi3>
10013234:	102d883a 	mov	r22,r2
10013238:	9809883a 	mov	r4,r19
1001323c:	a00b883a 	mov	r5,r20
10013240:	b02c943a 	slli	r22,r22,16
10013244:	00074b40 	call	100074b4 <__udivsi3>
10013248:	1009883a 	mov	r4,r2
1001324c:	a80b883a 	mov	r5,r21
10013250:	8c7fffcc 	andi	r17,r17,65535
10013254:	1027883a 	mov	r19,r2
10013258:	b462b03a 	or	r17,r22,r17
1001325c:	00074c40 	call	100074c4 <__mulsi3>
10013260:	d8c00017 	ldw	r3,0(sp)
10013264:	8880052e 	bgeu	r17,r2,1001327c <__udivdi3+0x2c0>
10013268:	8ca3883a 	add	r17,r17,r18
1001326c:	993fffc4 	addi	r4,r19,-1
10013270:	8c80af36 	bltu	r17,r18,10013530 <__udivdi3+0x574>
10013274:	8880ae2e 	bgeu	r17,r2,10013530 <__udivdi3+0x574>
10013278:	9cffff84 	addi	r19,r19,-2
1001327c:	8020943a 	slli	r16,r16,16
10013280:	9c04b03a 	or	r2,r19,r16
10013284:	00000206 	br	10013290 <__udivdi3+0x2d4>
10013288:	0007883a 	mov	r3,zero
1001328c:	0005883a 	mov	r2,zero
10013290:	dfc00a17 	ldw	ra,40(sp)
10013294:	df000917 	ldw	fp,36(sp)
10013298:	ddc00817 	ldw	r23,32(sp)
1001329c:	dd800717 	ldw	r22,28(sp)
100132a0:	dd400617 	ldw	r21,24(sp)
100132a4:	dd000517 	ldw	r20,20(sp)
100132a8:	dcc00417 	ldw	r19,16(sp)
100132ac:	dc800317 	ldw	r18,12(sp)
100132b0:	dc400217 	ldw	r17,8(sp)
100132b4:	dc000117 	ldw	r16,4(sp)
100132b8:	dec00b04 	addi	sp,sp,44
100132bc:	f800283a 	ret
100132c0:	00803fc4 	movi	r2,255
100132c4:	11c0a92e 	bgeu	r2,r7,1001356c <__udivdi3+0x5b0>
100132c8:	01400204 	movi	r5,8
100132cc:	2811883a 	mov	r8,r5
100132d0:	003f9706 	br	10013130 <__alt_data_end+0xf8013130>
100132d4:	00804034 	movhi	r2,256
100132d8:	10bfffc4 	addi	r2,r2,-1
100132dc:	1180a62e 	bgeu	r2,r6,10013578 <__udivdi3+0x5bc>
100132e0:	00800604 	movi	r2,24
100132e4:	1007883a 	mov	r3,r2
100132e8:	003f4c06 	br	1001301c <__alt_data_end+0xf801301c>
100132ec:	00803fc4 	movi	r2,255
100132f0:	1480a72e 	bgeu	r2,r18,10013590 <__udivdi3+0x5d4>
100132f4:	00800204 	movi	r2,8
100132f8:	1007883a 	mov	r3,r2
100132fc:	003fa506 	br	10013194 <__alt_data_end+0xf8013194>
10013300:	3178d83a 	srl	fp,r6,r5
10013304:	3dce983a 	sll	r7,r7,r23
10013308:	8168d83a 	srl	r20,r16,r5
1001330c:	9950d83a 	srl	r8,r19,r5
10013310:	3f38b03a 	or	fp,r7,fp
10013314:	e024d43a 	srli	r18,fp,16
10013318:	85e0983a 	sll	r16,r16,r23
1001331c:	a009883a 	mov	r4,r20
10013320:	900b883a 	mov	r5,r18
10013324:	8220b03a 	or	r16,r16,r8
10013328:	35ea983a 	sll	r21,r6,r23
1001332c:	00074bc0 	call	100074bc <__umodsi3>
10013330:	a009883a 	mov	r4,r20
10013334:	900b883a 	mov	r5,r18
10013338:	1023883a 	mov	r17,r2
1001333c:	e5bfffcc 	andi	r22,fp,65535
10013340:	00074b40 	call	100074b4 <__udivsi3>
10013344:	1009883a 	mov	r4,r2
10013348:	b00b883a 	mov	r5,r22
1001334c:	1029883a 	mov	r20,r2
10013350:	00074c40 	call	100074c4 <__mulsi3>
10013354:	8806943a 	slli	r3,r17,16
10013358:	8014d43a 	srli	r10,r16,16
1001335c:	1a92b03a 	or	r9,r3,r10
10013360:	4880042e 	bgeu	r9,r2,10013374 <__udivdi3+0x3b8>
10013364:	4f13883a 	add	r9,r9,fp
10013368:	a0ffffc4 	addi	r3,r20,-1
1001336c:	4f00952e 	bgeu	r9,fp,100135c4 <__udivdi3+0x608>
10013370:	1829883a 	mov	r20,r3
10013374:	48a3c83a 	sub	r17,r9,r2
10013378:	8809883a 	mov	r4,r17
1001337c:	900b883a 	mov	r5,r18
10013380:	00074bc0 	call	100074bc <__umodsi3>
10013384:	8809883a 	mov	r4,r17
10013388:	900b883a 	mov	r5,r18
1001338c:	d8800015 	stw	r2,0(sp)
10013390:	00074b40 	call	100074b4 <__udivsi3>
10013394:	1009883a 	mov	r4,r2
10013398:	b00b883a 	mov	r5,r22
1001339c:	1023883a 	mov	r17,r2
100133a0:	00074c40 	call	100074c4 <__mulsi3>
100133a4:	d8c00017 	ldw	r3,0(sp)
100133a8:	823fffcc 	andi	r8,r16,65535
100133ac:	1806943a 	slli	r3,r3,16
100133b0:	1a20b03a 	or	r16,r3,r8
100133b4:	8080042e 	bgeu	r16,r2,100133c8 <__udivdi3+0x40c>
100133b8:	8721883a 	add	r16,r16,fp
100133bc:	88ffffc4 	addi	r3,r17,-1
100133c0:	87007c2e 	bgeu	r16,fp,100135b4 <__udivdi3+0x5f8>
100133c4:	1823883a 	mov	r17,r3
100133c8:	a028943a 	slli	r20,r20,16
100133cc:	acbfffcc 	andi	r18,r21,65535
100133d0:	900b883a 	mov	r5,r18
100133d4:	8d28b03a 	or	r20,r17,r20
100133d8:	a022d43a 	srli	r17,r20,16
100133dc:	a5bfffcc 	andi	r22,r20,65535
100133e0:	b009883a 	mov	r4,r22
100133e4:	a82ad43a 	srli	r21,r21,16
100133e8:	80a1c83a 	sub	r16,r16,r2
100133ec:	00074c40 	call	100074c4 <__mulsi3>
100133f0:	8809883a 	mov	r4,r17
100133f4:	900b883a 	mov	r5,r18
100133f8:	1039883a 	mov	fp,r2
100133fc:	00074c40 	call	100074c4 <__mulsi3>
10013400:	8809883a 	mov	r4,r17
10013404:	a80b883a 	mov	r5,r21
10013408:	1025883a 	mov	r18,r2
1001340c:	00074c40 	call	100074c4 <__mulsi3>
10013410:	b009883a 	mov	r4,r22
10013414:	a80b883a 	mov	r5,r21
10013418:	1023883a 	mov	r17,r2
1001341c:	00074c40 	call	100074c4 <__mulsi3>
10013420:	e006d43a 	srli	r3,fp,16
10013424:	9085883a 	add	r2,r18,r2
10013428:	10c7883a 	add	r3,r2,r3
1001342c:	1c80022e 	bgeu	r3,r18,10013438 <__udivdi3+0x47c>
10013430:	00800074 	movhi	r2,1
10013434:	88a3883a 	add	r17,r17,r2
10013438:	1808d43a 	srli	r4,r3,16
1001343c:	8909883a 	add	r4,r17,r4
10013440:	81004436 	bltu	r16,r4,10013554 <__udivdi3+0x598>
10013444:	81003e26 	beq	r16,r4,10013540 <__udivdi3+0x584>
10013448:	a005883a 	mov	r2,r20
1001344c:	0007883a 	mov	r3,zero
10013450:	003f8f06 	br	10013290 <__alt_data_end+0xf8013290>
10013454:	91e4983a 	sll	r18,r18,r7
10013458:	80eed83a 	srl	r23,r16,r3
1001345c:	81cc983a 	sll	r6,r16,r7
10013460:	9028d43a 	srli	r20,r18,16
10013464:	98c6d83a 	srl	r3,r19,r3
10013468:	b809883a 	mov	r4,r23
1001346c:	a00b883a 	mov	r5,r20
10013470:	30ecb03a 	or	r22,r6,r3
10013474:	99e2983a 	sll	r17,r19,r7
10013478:	00074bc0 	call	100074bc <__umodsi3>
1001347c:	b809883a 	mov	r4,r23
10013480:	a00b883a 	mov	r5,r20
10013484:	1021883a 	mov	r16,r2
10013488:	957fffcc 	andi	r21,r18,65535
1001348c:	00074b40 	call	100074b4 <__udivsi3>
10013490:	a80b883a 	mov	r5,r21
10013494:	1009883a 	mov	r4,r2
10013498:	102f883a 	mov	r23,r2
1001349c:	00074c40 	call	100074c4 <__mulsi3>
100134a0:	8020943a 	slli	r16,r16,16
100134a4:	b00ad43a 	srli	r5,r22,16
100134a8:	814cb03a 	or	r6,r16,r5
100134ac:	3080062e 	bgeu	r6,r2,100134c8 <__udivdi3+0x50c>
100134b0:	348d883a 	add	r6,r6,r18
100134b4:	b8ffffc4 	addi	r3,r23,-1
100134b8:	34804836 	bltu	r6,r18,100135dc <__udivdi3+0x620>
100134bc:	3080472e 	bgeu	r6,r2,100135dc <__udivdi3+0x620>
100134c0:	bdffff84 	addi	r23,r23,-2
100134c4:	348d883a 	add	r6,r6,r18
100134c8:	30a7c83a 	sub	r19,r6,r2
100134cc:	9809883a 	mov	r4,r19
100134d0:	a00b883a 	mov	r5,r20
100134d4:	00074bc0 	call	100074bc <__umodsi3>
100134d8:	9809883a 	mov	r4,r19
100134dc:	a00b883a 	mov	r5,r20
100134e0:	1039883a 	mov	fp,r2
100134e4:	00074b40 	call	100074b4 <__udivsi3>
100134e8:	1009883a 	mov	r4,r2
100134ec:	a80b883a 	mov	r5,r21
100134f0:	e038943a 	slli	fp,fp,16
100134f4:	1027883a 	mov	r19,r2
100134f8:	00074c40 	call	100074c4 <__mulsi3>
100134fc:	b1bfffcc 	andi	r6,r22,65535
10013500:	e18cb03a 	or	r6,fp,r6
10013504:	3080062e 	bgeu	r6,r2,10013520 <__udivdi3+0x564>
10013508:	348d883a 	add	r6,r6,r18
1001350c:	98ffffc4 	addi	r3,r19,-1
10013510:	34803036 	bltu	r6,r18,100135d4 <__udivdi3+0x618>
10013514:	30802f2e 	bgeu	r6,r2,100135d4 <__udivdi3+0x618>
10013518:	9cffff84 	addi	r19,r19,-2
1001351c:	348d883a 	add	r6,r6,r18
10013520:	b82e943a 	slli	r23,r23,16
10013524:	30a1c83a 	sub	r16,r6,r2
10013528:	9dc6b03a 	or	r3,r19,r23
1001352c:	003f2606 	br	100131c8 <__alt_data_end+0xf80131c8>
10013530:	2027883a 	mov	r19,r4
10013534:	003f5106 	br	1001327c <__alt_data_end+0xf801327c>
10013538:	1827883a 	mov	r19,r3
1001353c:	003ef006 	br	10013100 <__alt_data_end+0xf8013100>
10013540:	1808943a 	slli	r4,r3,16
10013544:	9dc6983a 	sll	r3,r19,r23
10013548:	e73fffcc 	andi	fp,fp,65535
1001354c:	2709883a 	add	r4,r4,fp
10013550:	193fbd2e 	bgeu	r3,r4,10013448 <__alt_data_end+0xf8013448>
10013554:	a0bfffc4 	addi	r2,r20,-1
10013558:	0007883a 	mov	r3,zero
1001355c:	003f4c06 	br	10013290 <__alt_data_end+0xf8013290>
10013560:	01400404 	movi	r5,16
10013564:	2811883a 	mov	r8,r5
10013568:	003ef106 	br	10013130 <__alt_data_end+0xf8013130>
1001356c:	000b883a 	mov	r5,zero
10013570:	0011883a 	mov	r8,zero
10013574:	003eee06 	br	10013130 <__alt_data_end+0xf8013130>
10013578:	00800404 	movi	r2,16
1001357c:	1007883a 	mov	r3,r2
10013580:	003ea606 	br	1001301c <__alt_data_end+0xf801301c>
10013584:	00800404 	movi	r2,16
10013588:	1007883a 	mov	r3,r2
1001358c:	003f0106 	br	10013194 <__alt_data_end+0xf8013194>
10013590:	0005883a 	mov	r2,zero
10013594:	0007883a 	mov	r3,zero
10013598:	003efe06 	br	10013194 <__alt_data_end+0xf8013194>
1001359c:	0005883a 	mov	r2,zero
100135a0:	0007883a 	mov	r3,zero
100135a4:	003e9d06 	br	1001301c <__alt_data_end+0xf801301c>
100135a8:	0007883a 	mov	r3,zero
100135ac:	00800044 	movi	r2,1
100135b0:	003f3706 	br	10013290 <__alt_data_end+0xf8013290>
100135b4:	80bf832e 	bgeu	r16,r2,100133c4 <__alt_data_end+0xf80133c4>
100135b8:	8c7fff84 	addi	r17,r17,-2
100135bc:	8721883a 	add	r16,r16,fp
100135c0:	003f8106 	br	100133c8 <__alt_data_end+0xf80133c8>
100135c4:	48bf6a2e 	bgeu	r9,r2,10013370 <__alt_data_end+0xf8013370>
100135c8:	a53fff84 	addi	r20,r20,-2
100135cc:	4f13883a 	add	r9,r9,fp
100135d0:	003f6806 	br	10013374 <__alt_data_end+0xf8013374>
100135d4:	1827883a 	mov	r19,r3
100135d8:	003fd106 	br	10013520 <__alt_data_end+0xf8013520>
100135dc:	182f883a 	mov	r23,r3
100135e0:	003fb906 	br	100134c8 <__alt_data_end+0xf80134c8>
100135e4:	843fff84 	addi	r16,r16,-2
100135e8:	348d883a 	add	r6,r6,r18
100135ec:	003f0c06 	br	10013220 <__alt_data_end+0xf8013220>
100135f0:	843fff84 	addi	r16,r16,-2
100135f4:	1c87883a 	add	r3,r3,r18
100135f8:	003eac06 	br	100130ac <__alt_data_end+0xf80130ac>

100135fc <__umoddi3>:
100135fc:	defff404 	addi	sp,sp,-48
10013600:	dd800815 	stw	r22,32(sp)
10013604:	dc400315 	stw	r17,12(sp)
10013608:	dc000215 	stw	r16,8(sp)
1001360c:	dfc00b15 	stw	ra,44(sp)
10013610:	df000a15 	stw	fp,40(sp)
10013614:	ddc00915 	stw	r23,36(sp)
10013618:	dd400715 	stw	r21,28(sp)
1001361c:	dd000615 	stw	r20,24(sp)
10013620:	dcc00515 	stw	r19,20(sp)
10013624:	dc800415 	stw	r18,16(sp)
10013628:	2021883a 	mov	r16,r4
1001362c:	2823883a 	mov	r17,r5
10013630:	282d883a 	mov	r22,r5
10013634:	38003c1e 	bne	r7,zero,10013728 <__umoddi3+0x12c>
10013638:	3027883a 	mov	r19,r6
1001363c:	2029883a 	mov	r20,r4
10013640:	2980522e 	bgeu	r5,r6,1001378c <__umoddi3+0x190>
10013644:	00bfffd4 	movui	r2,65535
10013648:	1180a436 	bltu	r2,r6,100138dc <__umoddi3+0x2e0>
1001364c:	00803fc4 	movi	r2,255
10013650:	11815e2e 	bgeu	r2,r6,10013bcc <__umoddi3+0x5d0>
10013654:	01400204 	movi	r5,8
10013658:	2805883a 	mov	r2,r5
1001365c:	314ad83a 	srl	r5,r6,r5
10013660:	00c400b4 	movhi	r3,4098
10013664:	18e71e04 	addi	r3,r3,-25480
10013668:	194b883a 	add	r5,r3,r5
1001366c:	29000003 	ldbu	r4,0(r5)
10013670:	2089883a 	add	r4,r4,r2
10013674:	00800804 	movi	r2,32
10013678:	1105c83a 	sub	r2,r2,r4
1001367c:	10010c26 	beq	r2,zero,10013ab0 <__umoddi3+0x4b4>
10013680:	88a2983a 	sll	r17,r17,r2
10013684:	8108d83a 	srl	r4,r16,r4
10013688:	30a6983a 	sll	r19,r6,r2
1001368c:	80a8983a 	sll	r20,r16,r2
10013690:	1025883a 	mov	r18,r2
10013694:	892cb03a 	or	r22,r17,r4
10013698:	9822d43a 	srli	r17,r19,16
1001369c:	b009883a 	mov	r4,r22
100136a0:	9d7fffcc 	andi	r21,r19,65535
100136a4:	880b883a 	mov	r5,r17
100136a8:	00074bc0 	call	100074bc <__umodsi3>
100136ac:	b009883a 	mov	r4,r22
100136b0:	880b883a 	mov	r5,r17
100136b4:	102f883a 	mov	r23,r2
100136b8:	00074b40 	call	100074b4 <__udivsi3>
100136bc:	1009883a 	mov	r4,r2
100136c0:	a80b883a 	mov	r5,r21
100136c4:	00074c40 	call	100074c4 <__mulsi3>
100136c8:	b82e943a 	slli	r23,r23,16
100136cc:	a008d43a 	srli	r4,r20,16
100136d0:	b906b03a 	or	r3,r23,r4
100136d4:	1880042e 	bgeu	r3,r2,100136e8 <__umoddi3+0xec>
100136d8:	1cc7883a 	add	r3,r3,r19
100136dc:	1cc00236 	bltu	r3,r19,100136e8 <__umoddi3+0xec>
100136e0:	1880012e 	bgeu	r3,r2,100136e8 <__umoddi3+0xec>
100136e4:	1cc7883a 	add	r3,r3,r19
100136e8:	18a1c83a 	sub	r16,r3,r2
100136ec:	8009883a 	mov	r4,r16
100136f0:	880b883a 	mov	r5,r17
100136f4:	00074bc0 	call	100074bc <__umodsi3>
100136f8:	8009883a 	mov	r4,r16
100136fc:	880b883a 	mov	r5,r17
10013700:	102d883a 	mov	r22,r2
10013704:	00074b40 	call	100074b4 <__udivsi3>
10013708:	1009883a 	mov	r4,r2
1001370c:	a80b883a 	mov	r5,r21
10013710:	b02c943a 	slli	r22,r22,16
10013714:	00074c40 	call	100074c4 <__mulsi3>
10013718:	a13fffcc 	andi	r4,r20,65535
1001371c:	b106b03a 	or	r3,r22,r4
10013720:	1880572e 	bgeu	r3,r2,10013880 <__umoddi3+0x284>
10013724:	00005206 	br	10013870 <__umoddi3+0x274>
10013728:	29c05936 	bltu	r5,r7,10013890 <__umoddi3+0x294>
1001372c:	00bfffd4 	movui	r2,65535
10013730:	11c0652e 	bgeu	r2,r7,100138c8 <__umoddi3+0x2cc>
10013734:	00804034 	movhi	r2,256
10013738:	10bfffc4 	addi	r2,r2,-1
1001373c:	11c1172e 	bgeu	r2,r7,10013b9c <__umoddi3+0x5a0>
10013740:	01400604 	movi	r5,24
10013744:	282b883a 	mov	r21,r5
10013748:	394ad83a 	srl	r5,r7,r5
1001374c:	00c400b4 	movhi	r3,4098
10013750:	18e71e04 	addi	r3,r3,-25480
10013754:	194b883a 	add	r5,r3,r5
10013758:	28800003 	ldbu	r2,0(r5)
1001375c:	00c00804 	movi	r3,32
10013760:	156b883a 	add	r21,r2,r21
10013764:	1d69c83a 	sub	r20,r3,r21
10013768:	a000671e 	bne	r20,zero,10013908 <__umoddi3+0x30c>
1001376c:	3c400136 	bltu	r7,r17,10013774 <__umoddi3+0x178>
10013770:	81812336 	bltu	r16,r6,10013c00 <__umoddi3+0x604>
10013774:	8185c83a 	sub	r2,r16,r6
10013778:	89e3c83a 	sub	r17,r17,r7
1001377c:	8087803a 	cmpltu	r3,r16,r2
10013780:	88edc83a 	sub	r22,r17,r3
10013784:	b007883a 	mov	r3,r22
10013788:	00004306 	br	10013898 <__umoddi3+0x29c>
1001378c:	3000041e 	bne	r6,zero,100137a0 <__umoddi3+0x1a4>
10013790:	01000044 	movi	r4,1
10013794:	000b883a 	mov	r5,zero
10013798:	00074b40 	call	100074b4 <__udivsi3>
1001379c:	1027883a 	mov	r19,r2
100137a0:	00bfffd4 	movui	r2,65535
100137a4:	14c0532e 	bgeu	r2,r19,100138f4 <__umoddi3+0x2f8>
100137a8:	00804034 	movhi	r2,256
100137ac:	10bfffc4 	addi	r2,r2,-1
100137b0:	14c1032e 	bgeu	r2,r19,10013bc0 <__umoddi3+0x5c4>
100137b4:	00800604 	movi	r2,24
100137b8:	1007883a 	mov	r3,r2
100137bc:	9884d83a 	srl	r2,r19,r2
100137c0:	010400b4 	movhi	r4,4098
100137c4:	21271e04 	addi	r4,r4,-25480
100137c8:	2085883a 	add	r2,r4,r2
100137cc:	11000003 	ldbu	r4,0(r2)
100137d0:	00800804 	movi	r2,32
100137d4:	20c7883a 	add	r3,r4,r3
100137d8:	10c5c83a 	sub	r2,r2,r3
100137dc:	1000b61e 	bne	r2,zero,10013ab8 <__umoddi3+0x4bc>
100137e0:	982ad43a 	srli	r21,r19,16
100137e4:	8ce3c83a 	sub	r17,r17,r19
100137e8:	9dbfffcc 	andi	r22,r19,65535
100137ec:	0025883a 	mov	r18,zero
100137f0:	8809883a 	mov	r4,r17
100137f4:	a80b883a 	mov	r5,r21
100137f8:	00074bc0 	call	100074bc <__umodsi3>
100137fc:	8809883a 	mov	r4,r17
10013800:	a80b883a 	mov	r5,r21
10013804:	102f883a 	mov	r23,r2
10013808:	00074b40 	call	100074b4 <__udivsi3>
1001380c:	1009883a 	mov	r4,r2
10013810:	b00b883a 	mov	r5,r22
10013814:	00074c40 	call	100074c4 <__mulsi3>
10013818:	b82e943a 	slli	r23,r23,16
1001381c:	a008d43a 	srli	r4,r20,16
10013820:	b906b03a 	or	r3,r23,r4
10013824:	1880032e 	bgeu	r3,r2,10013834 <__umoddi3+0x238>
10013828:	1cc7883a 	add	r3,r3,r19
1001382c:	1cc00136 	bltu	r3,r19,10013834 <__umoddi3+0x238>
10013830:	1880f136 	bltu	r3,r2,10013bf8 <__umoddi3+0x5fc>
10013834:	18a1c83a 	sub	r16,r3,r2
10013838:	8009883a 	mov	r4,r16
1001383c:	a80b883a 	mov	r5,r21
10013840:	00074bc0 	call	100074bc <__umodsi3>
10013844:	8009883a 	mov	r4,r16
10013848:	a80b883a 	mov	r5,r21
1001384c:	1023883a 	mov	r17,r2
10013850:	00074b40 	call	100074b4 <__udivsi3>
10013854:	1009883a 	mov	r4,r2
10013858:	b00b883a 	mov	r5,r22
1001385c:	8822943a 	slli	r17,r17,16
10013860:	00074c40 	call	100074c4 <__mulsi3>
10013864:	a13fffcc 	andi	r4,r20,65535
10013868:	8906b03a 	or	r3,r17,r4
1001386c:	1880042e 	bgeu	r3,r2,10013880 <__umoddi3+0x284>
10013870:	1cc7883a 	add	r3,r3,r19
10013874:	1cc00236 	bltu	r3,r19,10013880 <__umoddi3+0x284>
10013878:	1880012e 	bgeu	r3,r2,10013880 <__umoddi3+0x284>
1001387c:	1cc7883a 	add	r3,r3,r19
10013880:	1887c83a 	sub	r3,r3,r2
10013884:	1c84d83a 	srl	r2,r3,r18
10013888:	0007883a 	mov	r3,zero
1001388c:	00000206 	br	10013898 <__umoddi3+0x29c>
10013890:	2005883a 	mov	r2,r4
10013894:	2807883a 	mov	r3,r5
10013898:	dfc00b17 	ldw	ra,44(sp)
1001389c:	df000a17 	ldw	fp,40(sp)
100138a0:	ddc00917 	ldw	r23,36(sp)
100138a4:	dd800817 	ldw	r22,32(sp)
100138a8:	dd400717 	ldw	r21,28(sp)
100138ac:	dd000617 	ldw	r20,24(sp)
100138b0:	dcc00517 	ldw	r19,20(sp)
100138b4:	dc800417 	ldw	r18,16(sp)
100138b8:	dc400317 	ldw	r17,12(sp)
100138bc:	dc000217 	ldw	r16,8(sp)
100138c0:	dec00c04 	addi	sp,sp,48
100138c4:	f800283a 	ret
100138c8:	00803fc4 	movi	r2,255
100138cc:	11c0b02e 	bgeu	r2,r7,10013b90 <__umoddi3+0x594>
100138d0:	01400204 	movi	r5,8
100138d4:	282b883a 	mov	r21,r5
100138d8:	003f9b06 	br	10013748 <__alt_data_end+0xf8013748>
100138dc:	00804034 	movhi	r2,256
100138e0:	10bfffc4 	addi	r2,r2,-1
100138e4:	1180b02e 	bgeu	r2,r6,10013ba8 <__umoddi3+0x5ac>
100138e8:	01400604 	movi	r5,24
100138ec:	2805883a 	mov	r2,r5
100138f0:	003f5a06 	br	1001365c <__alt_data_end+0xf801365c>
100138f4:	00803fc4 	movi	r2,255
100138f8:	14c0ae2e 	bgeu	r2,r19,10013bb4 <__umoddi3+0x5b8>
100138fc:	00800204 	movi	r2,8
10013900:	1007883a 	mov	r3,r2
10013904:	003fad06 	br	100137bc <__alt_data_end+0xf80137bc>
10013908:	3d0a983a 	sll	r5,r7,r20
1001390c:	356cd83a 	srl	r22,r6,r21
10013910:	8d78d83a 	srl	fp,r17,r21
10013914:	8d10983a 	sll	r8,r17,r20
10013918:	2dacb03a 	or	r22,r5,r22
1001391c:	b02ed43a 	srli	r23,r22,16
10013920:	8564d83a 	srl	r18,r16,r21
10013924:	e009883a 	mov	r4,fp
10013928:	b80b883a 	mov	r5,r23
1001392c:	44a4b03a 	or	r18,r8,r18
10013930:	3526983a 	sll	r19,r6,r20
10013934:	00074bc0 	call	100074bc <__umodsi3>
10013938:	e009883a 	mov	r4,fp
1001393c:	b80b883a 	mov	r5,r23
10013940:	b47fffcc 	andi	r17,r22,65535
10013944:	d8800015 	stw	r2,0(sp)
10013948:	00074b40 	call	100074b4 <__udivsi3>
1001394c:	1009883a 	mov	r4,r2
10013950:	880b883a 	mov	r5,r17
10013954:	1039883a 	mov	fp,r2
10013958:	00074c40 	call	100074c4 <__mulsi3>
1001395c:	d9800017 	ldw	r6,0(sp)
10013960:	9008d43a 	srli	r4,r18,16
10013964:	8520983a 	sll	r16,r16,r20
10013968:	300c943a 	slli	r6,r6,16
1001396c:	3106b03a 	or	r3,r6,r4
10013970:	1880042e 	bgeu	r3,r2,10013984 <__umoddi3+0x388>
10013974:	1d87883a 	add	r3,r3,r22
10013978:	e13fffc4 	addi	r4,fp,-1
1001397c:	1d809a2e 	bgeu	r3,r22,10013be8 <__umoddi3+0x5ec>
10013980:	2039883a 	mov	fp,r4
10013984:	1887c83a 	sub	r3,r3,r2
10013988:	1809883a 	mov	r4,r3
1001398c:	b80b883a 	mov	r5,r23
10013990:	d8c00115 	stw	r3,4(sp)
10013994:	00074bc0 	call	100074bc <__umodsi3>
10013998:	d8c00117 	ldw	r3,4(sp)
1001399c:	b80b883a 	mov	r5,r23
100139a0:	d8800015 	stw	r2,0(sp)
100139a4:	1809883a 	mov	r4,r3
100139a8:	00074b40 	call	100074b4 <__udivsi3>
100139ac:	880b883a 	mov	r5,r17
100139b0:	1009883a 	mov	r4,r2
100139b4:	102f883a 	mov	r23,r2
100139b8:	00074c40 	call	100074c4 <__mulsi3>
100139bc:	d9800017 	ldw	r6,0(sp)
100139c0:	947fffcc 	andi	r17,r18,65535
100139c4:	300c943a 	slli	r6,r6,16
100139c8:	3464b03a 	or	r18,r6,r17
100139cc:	9080042e 	bgeu	r18,r2,100139e0 <__umoddi3+0x3e4>
100139d0:	95a5883a 	add	r18,r18,r22
100139d4:	b8ffffc4 	addi	r3,r23,-1
100139d8:	95807f2e 	bgeu	r18,r22,10013bd8 <__umoddi3+0x5dc>
100139dc:	182f883a 	mov	r23,r3
100139e0:	e038943a 	slli	fp,fp,16
100139e4:	980cd43a 	srli	r6,r19,16
100139e8:	98ffffcc 	andi	r3,r19,65535
100139ec:	bf38b03a 	or	fp,r23,fp
100139f0:	e02ed43a 	srli	r23,fp,16
100139f4:	e73fffcc 	andi	fp,fp,65535
100139f8:	180b883a 	mov	r5,r3
100139fc:	e009883a 	mov	r4,fp
10013a00:	d9800015 	stw	r6,0(sp)
10013a04:	d8c00115 	stw	r3,4(sp)
10013a08:	90a5c83a 	sub	r18,r18,r2
10013a0c:	00074c40 	call	100074c4 <__mulsi3>
10013a10:	d8c00117 	ldw	r3,4(sp)
10013a14:	b809883a 	mov	r4,r23
10013a18:	1023883a 	mov	r17,r2
10013a1c:	180b883a 	mov	r5,r3
10013a20:	00074c40 	call	100074c4 <__mulsi3>
10013a24:	d9800017 	ldw	r6,0(sp)
10013a28:	b809883a 	mov	r4,r23
10013a2c:	d8800115 	stw	r2,4(sp)
10013a30:	300b883a 	mov	r5,r6
10013a34:	302f883a 	mov	r23,r6
10013a38:	00074c40 	call	100074c4 <__mulsi3>
10013a3c:	e009883a 	mov	r4,fp
10013a40:	b80b883a 	mov	r5,r23
10013a44:	d8800015 	stw	r2,0(sp)
10013a48:	00074c40 	call	100074c4 <__mulsi3>
10013a4c:	d8c00117 	ldw	r3,4(sp)
10013a50:	880cd43a 	srli	r6,r17,16
10013a54:	d9c00017 	ldw	r7,0(sp)
10013a58:	1885883a 	add	r2,r3,r2
10013a5c:	118d883a 	add	r6,r2,r6
10013a60:	30c0022e 	bgeu	r6,r3,10013a6c <__umoddi3+0x470>
10013a64:	00800074 	movhi	r2,1
10013a68:	388f883a 	add	r7,r7,r2
10013a6c:	3006d43a 	srli	r3,r6,16
10013a70:	300c943a 	slli	r6,r6,16
10013a74:	8c7fffcc 	andi	r17,r17,65535
10013a78:	38c7883a 	add	r3,r7,r3
10013a7c:	3463883a 	add	r17,r6,r17
10013a80:	90c03d36 	bltu	r18,r3,10013b78 <__umoddi3+0x57c>
10013a84:	90c06026 	beq	r18,r3,10013c08 <__umoddi3+0x60c>
10013a88:	90c9c83a 	sub	r4,r18,r3
10013a8c:	880f883a 	mov	r7,r17
10013a90:	81cfc83a 	sub	r7,r16,r7
10013a94:	81c7803a 	cmpltu	r3,r16,r7
10013a98:	20c7c83a 	sub	r3,r4,r3
10013a9c:	1d44983a 	sll	r2,r3,r21
10013aa0:	3d0ed83a 	srl	r7,r7,r20
10013aa4:	1d06d83a 	srl	r3,r3,r20
10013aa8:	11c4b03a 	or	r2,r2,r7
10013aac:	003f7a06 	br	10013898 <__alt_data_end+0xf8013898>
10013ab0:	0025883a 	mov	r18,zero
10013ab4:	003ef806 	br	10013698 <__alt_data_end+0xf8013698>
10013ab8:	98a6983a 	sll	r19,r19,r2
10013abc:	88e8d83a 	srl	r20,r17,r3
10013ac0:	80c6d83a 	srl	r3,r16,r3
10013ac4:	982ad43a 	srli	r21,r19,16
10013ac8:	88a2983a 	sll	r17,r17,r2
10013acc:	a009883a 	mov	r4,r20
10013ad0:	a80b883a 	mov	r5,r21
10013ad4:	88eeb03a 	or	r23,r17,r3
10013ad8:	1025883a 	mov	r18,r2
10013adc:	00074bc0 	call	100074bc <__umodsi3>
10013ae0:	a009883a 	mov	r4,r20
10013ae4:	a80b883a 	mov	r5,r21
10013ae8:	1023883a 	mov	r17,r2
10013aec:	9dbfffcc 	andi	r22,r19,65535
10013af0:	00074b40 	call	100074b4 <__udivsi3>
10013af4:	1009883a 	mov	r4,r2
10013af8:	b00b883a 	mov	r5,r22
10013afc:	00074c40 	call	100074c4 <__mulsi3>
10013b00:	8822943a 	slli	r17,r17,16
10013b04:	b808d43a 	srli	r4,r23,16
10013b08:	84a8983a 	sll	r20,r16,r18
10013b0c:	8906b03a 	or	r3,r17,r4
10013b10:	1880042e 	bgeu	r3,r2,10013b24 <__umoddi3+0x528>
10013b14:	1cc7883a 	add	r3,r3,r19
10013b18:	1cc00236 	bltu	r3,r19,10013b24 <__umoddi3+0x528>
10013b1c:	1880012e 	bgeu	r3,r2,10013b24 <__umoddi3+0x528>
10013b20:	1cc7883a 	add	r3,r3,r19
10013b24:	18a1c83a 	sub	r16,r3,r2
10013b28:	8009883a 	mov	r4,r16
10013b2c:	a80b883a 	mov	r5,r21
10013b30:	00074bc0 	call	100074bc <__umodsi3>
10013b34:	8009883a 	mov	r4,r16
10013b38:	a80b883a 	mov	r5,r21
10013b3c:	1039883a 	mov	fp,r2
10013b40:	00074b40 	call	100074b4 <__udivsi3>
10013b44:	1009883a 	mov	r4,r2
10013b48:	b00b883a 	mov	r5,r22
10013b4c:	00074c40 	call	100074c4 <__mulsi3>
10013b50:	e006943a 	slli	r3,fp,16
10013b54:	b93fffcc 	andi	r4,r23,65535
10013b58:	1906b03a 	or	r3,r3,r4
10013b5c:	1880042e 	bgeu	r3,r2,10013b70 <__umoddi3+0x574>
10013b60:	1cc7883a 	add	r3,r3,r19
10013b64:	1cc00236 	bltu	r3,r19,10013b70 <__umoddi3+0x574>
10013b68:	1880012e 	bgeu	r3,r2,10013b70 <__umoddi3+0x574>
10013b6c:	1cc7883a 	add	r3,r3,r19
10013b70:	18a3c83a 	sub	r17,r3,r2
10013b74:	003f1e06 	br	100137f0 <__alt_data_end+0xf80137f0>
10013b78:	8ccfc83a 	sub	r7,r17,r19
10013b7c:	1d89c83a 	sub	r4,r3,r22
10013b80:	89e3803a 	cmpltu	r17,r17,r7
10013b84:	2463c83a 	sub	r17,r4,r17
10013b88:	9449c83a 	sub	r4,r18,r17
10013b8c:	003fc006 	br	10013a90 <__alt_data_end+0xf8013a90>
10013b90:	000b883a 	mov	r5,zero
10013b94:	002b883a 	mov	r21,zero
10013b98:	003eeb06 	br	10013748 <__alt_data_end+0xf8013748>
10013b9c:	01400404 	movi	r5,16
10013ba0:	282b883a 	mov	r21,r5
10013ba4:	003ee806 	br	10013748 <__alt_data_end+0xf8013748>
10013ba8:	01400404 	movi	r5,16
10013bac:	2805883a 	mov	r2,r5
10013bb0:	003eaa06 	br	1001365c <__alt_data_end+0xf801365c>
10013bb4:	0005883a 	mov	r2,zero
10013bb8:	0007883a 	mov	r3,zero
10013bbc:	003eff06 	br	100137bc <__alt_data_end+0xf80137bc>
10013bc0:	00800404 	movi	r2,16
10013bc4:	1007883a 	mov	r3,r2
10013bc8:	003efc06 	br	100137bc <__alt_data_end+0xf80137bc>
10013bcc:	000b883a 	mov	r5,zero
10013bd0:	0005883a 	mov	r2,zero
10013bd4:	003ea106 	br	1001365c <__alt_data_end+0xf801365c>
10013bd8:	90bf802e 	bgeu	r18,r2,100139dc <__alt_data_end+0xf80139dc>
10013bdc:	bdffff84 	addi	r23,r23,-2
10013be0:	95a5883a 	add	r18,r18,r22
10013be4:	003f7e06 	br	100139e0 <__alt_data_end+0xf80139e0>
10013be8:	18bf652e 	bgeu	r3,r2,10013980 <__alt_data_end+0xf8013980>
10013bec:	e73fff84 	addi	fp,fp,-2
10013bf0:	1d87883a 	add	r3,r3,r22
10013bf4:	003f6306 	br	10013984 <__alt_data_end+0xf8013984>
10013bf8:	1cc7883a 	add	r3,r3,r19
10013bfc:	003f0d06 	br	10013834 <__alt_data_end+0xf8013834>
10013c00:	8005883a 	mov	r2,r16
10013c04:	003edf06 	br	10013784 <__alt_data_end+0xf8013784>
10013c08:	847fdb36 	bltu	r16,r17,10013b78 <__alt_data_end+0xf8013b78>
10013c0c:	880f883a 	mov	r7,r17
10013c10:	0009883a 	mov	r4,zero
10013c14:	003f9e06 	br	10013a90 <__alt_data_end+0xf8013a90>

10013c18 <__adddf3>:
10013c18:	02000434 	movhi	r8,16
10013c1c:	423fffc4 	addi	r8,r8,-1
10013c20:	defffb04 	addi	sp,sp,-20
10013c24:	2a12703a 	and	r9,r5,r8
10013c28:	2806d7fa 	srli	r3,r5,31
10013c2c:	3a10703a 	and	r8,r7,r8
10013c30:	3804d53a 	srli	r2,r7,20
10013c34:	3014d77a 	srli	r10,r6,29
10013c38:	dc000015 	stw	r16,0(sp)
10013c3c:	481290fa 	slli	r9,r9,3
10013c40:	2820d53a 	srli	r16,r5,20
10013c44:	401090fa 	slli	r8,r8,3
10013c48:	200ad77a 	srli	r5,r4,29
10013c4c:	380ed7fa 	srli	r7,r7,31
10013c50:	dc800215 	stw	r18,8(sp)
10013c54:	dc400115 	stw	r17,4(sp)
10013c58:	dfc00415 	stw	ra,16(sp)
10013c5c:	dcc00315 	stw	r19,12(sp)
10013c60:	1c803fcc 	andi	r18,r3,255
10013c64:	8401ffcc 	andi	r16,r16,2047
10013c68:	494ab03a 	or	r5,r9,r5
10013c6c:	202290fa 	slli	r17,r4,3
10013c70:	1081ffcc 	andi	r2,r2,2047
10013c74:	4290b03a 	or	r8,r8,r10
10013c78:	300c90fa 	slli	r6,r6,3
10013c7c:	91c07026 	beq	r18,r7,10013e40 <__adddf3+0x228>
10013c80:	8087c83a 	sub	r3,r16,r2
10013c84:	00c0b30e 	bge	zero,r3,10013f54 <__adddf3+0x33c>
10013c88:	10002a1e 	bne	r2,zero,10013d34 <__adddf3+0x11c>
10013c8c:	4184b03a 	or	r2,r8,r6
10013c90:	1000991e 	bne	r2,zero,10013ef8 <__adddf3+0x2e0>
10013c94:	888001cc 	andi	r2,r17,7
10013c98:	10005b26 	beq	r2,zero,10013e08 <__adddf3+0x1f0>
10013c9c:	88c003cc 	andi	r3,r17,15
10013ca0:	00800104 	movi	r2,4
10013ca4:	18805826 	beq	r3,r2,10013e08 <__adddf3+0x1f0>
10013ca8:	89800104 	addi	r6,r17,4
10013cac:	3463803a 	cmpltu	r17,r6,r17
10013cb0:	2c4b883a 	add	r5,r5,r17
10013cb4:	2880202c 	andhi	r2,r5,128
10013cb8:	9007883a 	mov	r3,r18
10013cbc:	3023883a 	mov	r17,r6
10013cc0:	10005426 	beq	r2,zero,10013e14 <__adddf3+0x1fc>
10013cc4:	84000044 	addi	r16,r16,1
10013cc8:	0081ffc4 	movi	r2,2047
10013ccc:	8080c126 	beq	r16,r2,10013fd4 <__adddf3+0x3bc>
10013cd0:	013fe034 	movhi	r4,65408
10013cd4:	213fffc4 	addi	r4,r4,-1
10013cd8:	290a703a 	and	r5,r5,r4
10013cdc:	2804977a 	slli	r2,r5,29
10013ce0:	280a927a 	slli	r5,r5,9
10013ce4:	8822d0fa 	srli	r17,r17,3
10013ce8:	8401ffcc 	andi	r16,r16,2047
10013cec:	2808d33a 	srli	r4,r5,12
10013cf0:	1444b03a 	or	r2,r2,r17
10013cf4:	8401ffcc 	andi	r16,r16,2047
10013cf8:	800a953a 	slli	r5,r16,20
10013cfc:	18c03fcc 	andi	r3,r3,255
10013d00:	04000434 	movhi	r16,16
10013d04:	180697fa 	slli	r3,r3,31
10013d08:	843fffc4 	addi	r16,r16,-1
10013d0c:	2420703a 	and	r16,r4,r16
10013d10:	8160b03a 	or	r16,r16,r5
10013d14:	80c6b03a 	or	r3,r16,r3
10013d18:	dfc00417 	ldw	ra,16(sp)
10013d1c:	dcc00317 	ldw	r19,12(sp)
10013d20:	dc800217 	ldw	r18,8(sp)
10013d24:	dc400117 	ldw	r17,4(sp)
10013d28:	dc000017 	ldw	r16,0(sp)
10013d2c:	dec00504 	addi	sp,sp,20
10013d30:	f800283a 	ret
10013d34:	0081ffc4 	movi	r2,2047
10013d38:	80bfd626 	beq	r16,r2,10013c94 <__alt_data_end+0xf8013c94>
10013d3c:	42002034 	orhi	r8,r8,128
10013d40:	00800e04 	movi	r2,56
10013d44:	10c0a616 	blt	r2,r3,10013fe0 <__adddf3+0x3c8>
10013d48:	008007c4 	movi	r2,31
10013d4c:	10c0c916 	blt	r2,r3,10014074 <__adddf3+0x45c>
10013d50:	00800804 	movi	r2,32
10013d54:	10c5c83a 	sub	r2,r2,r3
10013d58:	408e983a 	sll	r7,r8,r2
10013d5c:	30c8d83a 	srl	r4,r6,r3
10013d60:	3084983a 	sll	r2,r6,r2
10013d64:	40c6d83a 	srl	r3,r8,r3
10013d68:	390cb03a 	or	r6,r7,r4
10013d6c:	1004c03a 	cmpne	r2,r2,zero
10013d70:	308cb03a 	or	r6,r6,r2
10013d74:	898dc83a 	sub	r6,r17,r6
10013d78:	89a3803a 	cmpltu	r17,r17,r6
10013d7c:	28cbc83a 	sub	r5,r5,r3
10013d80:	2c4bc83a 	sub	r5,r5,r17
10013d84:	3023883a 	mov	r17,r6
10013d88:	2880202c 	andhi	r2,r5,128
10013d8c:	10006d26 	beq	r2,zero,10013f44 <__adddf3+0x32c>
10013d90:	04c02034 	movhi	r19,128
10013d94:	9cffffc4 	addi	r19,r19,-1
10013d98:	2ce6703a 	and	r19,r5,r19
10013d9c:	98007e26 	beq	r19,zero,10013f98 <__adddf3+0x380>
10013da0:	9809883a 	mov	r4,r19
10013da4:	0009a180 	call	10009a18 <__clzsi2>
10013da8:	10fffe04 	addi	r3,r2,-8
10013dac:	010007c4 	movi	r4,31
10013db0:	20c07f16 	blt	r4,r3,10013fb0 <__adddf3+0x398>
10013db4:	01400a04 	movi	r5,40
10013db8:	2885c83a 	sub	r2,r5,r2
10013dbc:	888ad83a 	srl	r5,r17,r2
10013dc0:	98e6983a 	sll	r19,r19,r3
10013dc4:	88e2983a 	sll	r17,r17,r3
10013dc8:	2ce6b03a 	or	r19,r5,r19
10013dcc:	1c007c16 	blt	r3,r16,10013fc0 <__adddf3+0x3a8>
10013dd0:	1c21c83a 	sub	r16,r3,r16
10013dd4:	81400044 	addi	r5,r16,1
10013dd8:	00c007c4 	movi	r3,31
10013ddc:	19409816 	blt	r3,r5,10014040 <__adddf3+0x428>
10013de0:	1c21c83a 	sub	r16,r3,r16
10013de4:	8c08983a 	sll	r4,r17,r16
10013de8:	8946d83a 	srl	r3,r17,r5
10013dec:	9c20983a 	sll	r16,r19,r16
10013df0:	2008c03a 	cmpne	r4,r4,zero
10013df4:	994ad83a 	srl	r5,r19,r5
10013df8:	1c06b03a 	or	r3,r3,r16
10013dfc:	1922b03a 	or	r17,r3,r4
10013e00:	0021883a 	mov	r16,zero
10013e04:	003fa306 	br	10013c94 <__alt_data_end+0xf8013c94>
10013e08:	2880202c 	andhi	r2,r5,128
10013e0c:	9007883a 	mov	r3,r18
10013e10:	103fac1e 	bne	r2,zero,10013cc4 <__alt_data_end+0xf8013cc4>
10013e14:	2804977a 	slli	r2,r5,29
10013e18:	8822d0fa 	srli	r17,r17,3
10013e1c:	0101ffc4 	movi	r4,2047
10013e20:	280ad0fa 	srli	r5,r5,3
10013e24:	1444b03a 	or	r2,r2,r17
10013e28:	81002c26 	beq	r16,r4,10013edc <__adddf3+0x2c4>
10013e2c:	8120703a 	and	r16,r16,r4
10013e30:	01000434 	movhi	r4,16
10013e34:	213fffc4 	addi	r4,r4,-1
10013e38:	2908703a 	and	r4,r5,r4
10013e3c:	003fad06 	br	10013cf4 <__alt_data_end+0xf8013cf4>
10013e40:	8089c83a 	sub	r4,r16,r2
10013e44:	01006a0e 	bge	zero,r4,10013ff0 <__adddf3+0x3d8>
10013e48:	10003326 	beq	r2,zero,10013f18 <__adddf3+0x300>
10013e4c:	0081ffc4 	movi	r2,2047
10013e50:	80bf9026 	beq	r16,r2,10013c94 <__alt_data_end+0xf8013c94>
10013e54:	42002034 	orhi	r8,r8,128
10013e58:	00800e04 	movi	r2,56
10013e5c:	1100b116 	blt	r2,r4,10014124 <__adddf3+0x50c>
10013e60:	008007c4 	movi	r2,31
10013e64:	1100e216 	blt	r2,r4,100141f0 <__adddf3+0x5d8>
10013e68:	00800804 	movi	r2,32
10013e6c:	1105c83a 	sub	r2,r2,r4
10013e70:	4092983a 	sll	r9,r8,r2
10013e74:	310ed83a 	srl	r7,r6,r4
10013e78:	3084983a 	sll	r2,r6,r2
10013e7c:	4110d83a 	srl	r8,r8,r4
10013e80:	49ccb03a 	or	r6,r9,r7
10013e84:	1004c03a 	cmpne	r2,r2,zero
10013e88:	308cb03a 	or	r6,r6,r2
10013e8c:	344d883a 	add	r6,r6,r17
10013e90:	3463803a 	cmpltu	r17,r6,r17
10013e94:	414b883a 	add	r5,r8,r5
10013e98:	2c4b883a 	add	r5,r5,r17
10013e9c:	3023883a 	mov	r17,r6
10013ea0:	2880202c 	andhi	r2,r5,128
10013ea4:	10002726 	beq	r2,zero,10013f44 <__adddf3+0x32c>
10013ea8:	84000044 	addi	r16,r16,1
10013eac:	0081ffc4 	movi	r2,2047
10013eb0:	8080ae26 	beq	r16,r2,1001416c <__adddf3+0x554>
10013eb4:	00bfe034 	movhi	r2,65408
10013eb8:	10bfffc4 	addi	r2,r2,-1
10013ebc:	288a703a 	and	r5,r5,r2
10013ec0:	880cd07a 	srli	r6,r17,1
10013ec4:	280897fa 	slli	r4,r5,31
10013ec8:	88c0004c 	andi	r3,r17,1
10013ecc:	30e2b03a 	or	r17,r6,r3
10013ed0:	280ad07a 	srli	r5,r5,1
10013ed4:	8922b03a 	or	r17,r17,r4
10013ed8:	003f6e06 	br	10013c94 <__alt_data_end+0xf8013c94>
10013edc:	1148b03a 	or	r4,r2,r5
10013ee0:	20003c26 	beq	r4,zero,10013fd4 <__adddf3+0x3bc>
10013ee4:	29000234 	orhi	r4,r5,8
10013ee8:	01400434 	movhi	r5,16
10013eec:	297fffc4 	addi	r5,r5,-1
10013ef0:	2148703a 	and	r4,r4,r5
10013ef4:	003f7f06 	br	10013cf4 <__alt_data_end+0xf8013cf4>
10013ef8:	18ffffc4 	addi	r3,r3,-1
10013efc:	18004d1e 	bne	r3,zero,10014034 <__adddf3+0x41c>
10013f00:	898dc83a 	sub	r6,r17,r6
10013f04:	89a3803a 	cmpltu	r17,r17,r6
10013f08:	2a0bc83a 	sub	r5,r5,r8
10013f0c:	2c4bc83a 	sub	r5,r5,r17
10013f10:	3023883a 	mov	r17,r6
10013f14:	003f9c06 	br	10013d88 <__alt_data_end+0xf8013d88>
10013f18:	4184b03a 	or	r2,r8,r6
10013f1c:	103f5d26 	beq	r2,zero,10013c94 <__alt_data_end+0xf8013c94>
10013f20:	213fffc4 	addi	r4,r4,-1
10013f24:	203fd926 	beq	r4,zero,10013e8c <__alt_data_end+0xf8013e8c>
10013f28:	0081ffc4 	movi	r2,2047
10013f2c:	80bfca1e 	bne	r16,r2,10013e58 <__alt_data_end+0xf8013e58>
10013f30:	003f5806 	br	10013c94 <__alt_data_end+0xf8013c94>
10013f34:	10c8b03a 	or	r4,r2,r3
10013f38:	20008b26 	beq	r4,zero,10014168 <__adddf3+0x550>
10013f3c:	100b883a 	mov	r5,r2
10013f40:	1823883a 	mov	r17,r3
10013f44:	888001cc 	andi	r2,r17,7
10013f48:	103f541e 	bne	r2,zero,10013c9c <__alt_data_end+0xf8013c9c>
10013f4c:	9007883a 	mov	r3,r18
10013f50:	003fb006 	br	10013e14 <__alt_data_end+0xf8013e14>
10013f54:	1800531e 	bne	r3,zero,100140a4 <__adddf3+0x48c>
10013f58:	80800044 	addi	r2,r16,1
10013f5c:	1081ffcc 	andi	r2,r2,2047
10013f60:	00c00044 	movi	r3,1
10013f64:	1880990e 	bge	r3,r2,100141cc <__adddf3+0x5b4>
10013f68:	8985c83a 	sub	r2,r17,r6
10013f6c:	8887803a 	cmpltu	r3,r17,r2
10013f70:	2a27c83a 	sub	r19,r5,r8
10013f74:	98e7c83a 	sub	r19,r19,r3
10013f78:	98c0202c 	andhi	r3,r19,128
10013f7c:	18006226 	beq	r3,zero,10014108 <__adddf3+0x4f0>
10013f80:	3463c83a 	sub	r17,r6,r17
10013f84:	4151c83a 	sub	r8,r8,r5
10013f88:	344d803a 	cmpltu	r6,r6,r17
10013f8c:	41a7c83a 	sub	r19,r8,r6
10013f90:	3825883a 	mov	r18,r7
10013f94:	983f821e 	bne	r19,zero,10013da0 <__alt_data_end+0xf8013da0>
10013f98:	8809883a 	mov	r4,r17
10013f9c:	0009a180 	call	10009a18 <__clzsi2>
10013fa0:	10800804 	addi	r2,r2,32
10013fa4:	10fffe04 	addi	r3,r2,-8
10013fa8:	010007c4 	movi	r4,31
10013fac:	20ff810e 	bge	r4,r3,10013db4 <__alt_data_end+0xf8013db4>
10013fb0:	14fff604 	addi	r19,r2,-40
10013fb4:	8ce6983a 	sll	r19,r17,r19
10013fb8:	0023883a 	mov	r17,zero
10013fbc:	1c3f840e 	bge	r3,r16,10013dd0 <__alt_data_end+0xf8013dd0>
10013fc0:	017fe034 	movhi	r5,65408
10013fc4:	297fffc4 	addi	r5,r5,-1
10013fc8:	80e1c83a 	sub	r16,r16,r3
10013fcc:	994a703a 	and	r5,r19,r5
10013fd0:	003f3006 	br	10013c94 <__alt_data_end+0xf8013c94>
10013fd4:	0009883a 	mov	r4,zero
10013fd8:	0005883a 	mov	r2,zero
10013fdc:	003f4506 	br	10013cf4 <__alt_data_end+0xf8013cf4>
10013fe0:	418cb03a 	or	r6,r8,r6
10013fe4:	300cc03a 	cmpne	r6,r6,zero
10013fe8:	0007883a 	mov	r3,zero
10013fec:	003f6106 	br	10013d74 <__alt_data_end+0xf8013d74>
10013ff0:	2000921e 	bne	r4,zero,1001423c <__adddf3+0x624>
10013ff4:	80800044 	addi	r2,r16,1
10013ff8:	11c1ffcc 	andi	r7,r2,2047
10013ffc:	01000044 	movi	r4,1
10014000:	21c0610e 	bge	r4,r7,10014188 <__adddf3+0x570>
10014004:	0101ffc4 	movi	r4,2047
10014008:	1100a326 	beq	r2,r4,10014298 <__adddf3+0x680>
1001400c:	344d883a 	add	r6,r6,r17
10014010:	3463803a 	cmpltu	r17,r6,r17
10014014:	414b883a 	add	r5,r8,r5
10014018:	2c4b883a 	add	r5,r5,r17
1001401c:	282297fa 	slli	r17,r5,31
10014020:	300cd07a 	srli	r6,r6,1
10014024:	280ad07a 	srli	r5,r5,1
10014028:	1021883a 	mov	r16,r2
1001402c:	89a2b03a 	or	r17,r17,r6
10014030:	003f1806 	br	10013c94 <__alt_data_end+0xf8013c94>
10014034:	0081ffc4 	movi	r2,2047
10014038:	80bf411e 	bne	r16,r2,10013d40 <__alt_data_end+0xf8013d40>
1001403c:	003f1506 	br	10013c94 <__alt_data_end+0xf8013c94>
10014040:	80bff844 	addi	r2,r16,-31
10014044:	00c00804 	movi	r3,32
10014048:	9884d83a 	srl	r2,r19,r2
1001404c:	28c04a26 	beq	r5,r3,10014178 <__adddf3+0x560>
10014050:	00c00fc4 	movi	r3,63
10014054:	1c21c83a 	sub	r16,r3,r16
10014058:	9c26983a 	sll	r19,r19,r16
1001405c:	9c62b03a 	or	r17,r19,r17
10014060:	8822c03a 	cmpne	r17,r17,zero
10014064:	88a2b03a 	or	r17,r17,r2
10014068:	000b883a 	mov	r5,zero
1001406c:	0021883a 	mov	r16,zero
10014070:	003fb406 	br	10013f44 <__alt_data_end+0xf8013f44>
10014074:	18bff804 	addi	r2,r3,-32
10014078:	01000804 	movi	r4,32
1001407c:	4084d83a 	srl	r2,r8,r2
10014080:	19003f26 	beq	r3,r4,10014180 <__adddf3+0x568>
10014084:	01001004 	movi	r4,64
10014088:	20c7c83a 	sub	r3,r4,r3
1001408c:	40d0983a 	sll	r8,r8,r3
10014090:	418cb03a 	or	r6,r8,r6
10014094:	300cc03a 	cmpne	r6,r6,zero
10014098:	308cb03a 	or	r6,r6,r2
1001409c:	0007883a 	mov	r3,zero
100140a0:	003f3406 	br	10013d74 <__alt_data_end+0xf8013d74>
100140a4:	80002326 	beq	r16,zero,10014134 <__adddf3+0x51c>
100140a8:	0101ffc4 	movi	r4,2047
100140ac:	11005e26 	beq	r2,r4,10014228 <__adddf3+0x610>
100140b0:	00c7c83a 	sub	r3,zero,r3
100140b4:	29402034 	orhi	r5,r5,128
100140b8:	01000e04 	movi	r4,56
100140bc:	20c07216 	blt	r4,r3,10014288 <__adddf3+0x670>
100140c0:	010007c4 	movi	r4,31
100140c4:	20c0ce16 	blt	r4,r3,10014400 <__adddf3+0x7e8>
100140c8:	01000804 	movi	r4,32
100140cc:	20c9c83a 	sub	r4,r4,r3
100140d0:	2914983a 	sll	r10,r5,r4
100140d4:	88d2d83a 	srl	r9,r17,r3
100140d8:	8908983a 	sll	r4,r17,r4
100140dc:	28c6d83a 	srl	r3,r5,r3
100140e0:	5262b03a 	or	r17,r10,r9
100140e4:	2008c03a 	cmpne	r4,r4,zero
100140e8:	8922b03a 	or	r17,r17,r4
100140ec:	3463c83a 	sub	r17,r6,r17
100140f0:	40c7c83a 	sub	r3,r8,r3
100140f4:	344d803a 	cmpltu	r6,r6,r17
100140f8:	198bc83a 	sub	r5,r3,r6
100140fc:	1021883a 	mov	r16,r2
10014100:	3825883a 	mov	r18,r7
10014104:	003f2006 	br	10013d88 <__alt_data_end+0xf8013d88>
10014108:	9886b03a 	or	r3,r19,r2
1001410c:	1800141e 	bne	r3,zero,10014160 <__adddf3+0x548>
10014110:	0007883a 	mov	r3,zero
10014114:	000b883a 	mov	r5,zero
10014118:	0023883a 	mov	r17,zero
1001411c:	0021883a 	mov	r16,zero
10014120:	003f3c06 	br	10013e14 <__alt_data_end+0xf8013e14>
10014124:	418cb03a 	or	r6,r8,r6
10014128:	300cc03a 	cmpne	r6,r6,zero
1001412c:	0011883a 	mov	r8,zero
10014130:	003f5606 	br	10013e8c <__alt_data_end+0xf8013e8c>
10014134:	2c48b03a 	or	r4,r5,r17
10014138:	20003b26 	beq	r4,zero,10014228 <__adddf3+0x610>
1001413c:	00c6303a 	nor	r3,zero,r3
10014140:	1800371e 	bne	r3,zero,10014220 <__adddf3+0x608>
10014144:	3463c83a 	sub	r17,r6,r17
10014148:	414bc83a 	sub	r5,r8,r5
1001414c:	344d803a 	cmpltu	r6,r6,r17
10014150:	298bc83a 	sub	r5,r5,r6
10014154:	1021883a 	mov	r16,r2
10014158:	3825883a 	mov	r18,r7
1001415c:	003f0a06 	br	10013d88 <__alt_data_end+0xf8013d88>
10014160:	1023883a 	mov	r17,r2
10014164:	003f0d06 	br	10013d9c <__alt_data_end+0xf8013d9c>
10014168:	0007883a 	mov	r3,zero
1001416c:	000b883a 	mov	r5,zero
10014170:	0023883a 	mov	r17,zero
10014174:	003f2706 	br	10013e14 <__alt_data_end+0xf8013e14>
10014178:	0027883a 	mov	r19,zero
1001417c:	003fb706 	br	1001405c <__alt_data_end+0xf801405c>
10014180:	0011883a 	mov	r8,zero
10014184:	003fc206 	br	10014090 <__alt_data_end+0xf8014090>
10014188:	2c44b03a 	or	r2,r5,r17
1001418c:	8000871e 	bne	r16,zero,100143ac <__adddf3+0x794>
10014190:	1000b126 	beq	r2,zero,10014458 <__adddf3+0x840>
10014194:	4184b03a 	or	r2,r8,r6
10014198:	103ebe26 	beq	r2,zero,10013c94 <__alt_data_end+0xf8013c94>
1001419c:	3445883a 	add	r2,r6,r17
100141a0:	1463803a 	cmpltu	r17,r2,r17
100141a4:	414b883a 	add	r5,r8,r5
100141a8:	2c4b883a 	add	r5,r5,r17
100141ac:	28c0202c 	andhi	r3,r5,128
100141b0:	1023883a 	mov	r17,r2
100141b4:	183f6326 	beq	r3,zero,10013f44 <__alt_data_end+0xf8013f44>
100141b8:	00bfe034 	movhi	r2,65408
100141bc:	10bfffc4 	addi	r2,r2,-1
100141c0:	2021883a 	mov	r16,r4
100141c4:	288a703a 	and	r5,r5,r2
100141c8:	003eb206 	br	10013c94 <__alt_data_end+0xf8013c94>
100141cc:	2c44b03a 	or	r2,r5,r17
100141d0:	8000251e 	bne	r16,zero,10014268 <__adddf3+0x650>
100141d4:	10004b1e 	bne	r2,zero,10014304 <__adddf3+0x6ec>
100141d8:	4184b03a 	or	r2,r8,r6
100141dc:	103fe226 	beq	r2,zero,10014168 <__alt_data_end+0xf8014168>
100141e0:	400b883a 	mov	r5,r8
100141e4:	3023883a 	mov	r17,r6
100141e8:	3825883a 	mov	r18,r7
100141ec:	003ea906 	br	10013c94 <__alt_data_end+0xf8013c94>
100141f0:	20bff804 	addi	r2,r4,-32
100141f4:	01c00804 	movi	r7,32
100141f8:	4084d83a 	srl	r2,r8,r2
100141fc:	21c07e26 	beq	r4,r7,100143f8 <__adddf3+0x7e0>
10014200:	01c01004 	movi	r7,64
10014204:	3909c83a 	sub	r4,r7,r4
10014208:	4110983a 	sll	r8,r8,r4
1001420c:	418cb03a 	or	r6,r8,r6
10014210:	300cc03a 	cmpne	r6,r6,zero
10014214:	308cb03a 	or	r6,r6,r2
10014218:	0011883a 	mov	r8,zero
1001421c:	003f1b06 	br	10013e8c <__alt_data_end+0xf8013e8c>
10014220:	0101ffc4 	movi	r4,2047
10014224:	113fa41e 	bne	r2,r4,100140b8 <__alt_data_end+0xf80140b8>
10014228:	400b883a 	mov	r5,r8
1001422c:	3023883a 	mov	r17,r6
10014230:	1021883a 	mov	r16,r2
10014234:	3825883a 	mov	r18,r7
10014238:	003e9606 	br	10013c94 <__alt_data_end+0xf8013c94>
1001423c:	80001a1e 	bne	r16,zero,100142a8 <__adddf3+0x690>
10014240:	2c4eb03a 	or	r7,r5,r17
10014244:	38005526 	beq	r7,zero,1001439c <__adddf3+0x784>
10014248:	0108303a 	nor	r4,zero,r4
1001424c:	2000511e 	bne	r4,zero,10014394 <__adddf3+0x77c>
10014250:	89a3883a 	add	r17,r17,r6
10014254:	414b883a 	add	r5,r8,r5
10014258:	898d803a 	cmpltu	r6,r17,r6
1001425c:	298b883a 	add	r5,r5,r6
10014260:	1021883a 	mov	r16,r2
10014264:	003f0e06 	br	10013ea0 <__alt_data_end+0xf8013ea0>
10014268:	1000341e 	bne	r2,zero,1001433c <__adddf3+0x724>
1001426c:	4184b03a 	or	r2,r8,r6
10014270:	10006f26 	beq	r2,zero,10014430 <__adddf3+0x818>
10014274:	400b883a 	mov	r5,r8
10014278:	3023883a 	mov	r17,r6
1001427c:	3825883a 	mov	r18,r7
10014280:	0401ffc4 	movi	r16,2047
10014284:	003e8306 	br	10013c94 <__alt_data_end+0xf8013c94>
10014288:	2c62b03a 	or	r17,r5,r17
1001428c:	8822c03a 	cmpne	r17,r17,zero
10014290:	0007883a 	mov	r3,zero
10014294:	003f9506 	br	100140ec <__alt_data_end+0xf80140ec>
10014298:	1021883a 	mov	r16,r2
1001429c:	000b883a 	mov	r5,zero
100142a0:	0023883a 	mov	r17,zero
100142a4:	003edb06 	br	10013e14 <__alt_data_end+0xf8013e14>
100142a8:	01c1ffc4 	movi	r7,2047
100142ac:	11c03b26 	beq	r2,r7,1001439c <__adddf3+0x784>
100142b0:	0109c83a 	sub	r4,zero,r4
100142b4:	29402034 	orhi	r5,r5,128
100142b8:	01c00e04 	movi	r7,56
100142bc:	39006216 	blt	r7,r4,10014448 <__adddf3+0x830>
100142c0:	01c007c4 	movi	r7,31
100142c4:	39006b16 	blt	r7,r4,10014474 <__adddf3+0x85c>
100142c8:	01c00804 	movi	r7,32
100142cc:	390fc83a 	sub	r7,r7,r4
100142d0:	29d4983a 	sll	r10,r5,r7
100142d4:	8912d83a 	srl	r9,r17,r4
100142d8:	89ce983a 	sll	r7,r17,r7
100142dc:	2908d83a 	srl	r4,r5,r4
100142e0:	5262b03a 	or	r17,r10,r9
100142e4:	380ac03a 	cmpne	r5,r7,zero
100142e8:	8962b03a 	or	r17,r17,r5
100142ec:	89a3883a 	add	r17,r17,r6
100142f0:	2211883a 	add	r8,r4,r8
100142f4:	898d803a 	cmpltu	r6,r17,r6
100142f8:	418b883a 	add	r5,r8,r6
100142fc:	1021883a 	mov	r16,r2
10014300:	003ee706 	br	10013ea0 <__alt_data_end+0xf8013ea0>
10014304:	4184b03a 	or	r2,r8,r6
10014308:	103e6226 	beq	r2,zero,10013c94 <__alt_data_end+0xf8013c94>
1001430c:	8987c83a 	sub	r3,r17,r6
10014310:	88c9803a 	cmpltu	r4,r17,r3
10014314:	2a05c83a 	sub	r2,r5,r8
10014318:	1105c83a 	sub	r2,r2,r4
1001431c:	1100202c 	andhi	r4,r2,128
10014320:	203f0426 	beq	r4,zero,10013f34 <__alt_data_end+0xf8013f34>
10014324:	3463c83a 	sub	r17,r6,r17
10014328:	414bc83a 	sub	r5,r8,r5
1001432c:	344d803a 	cmpltu	r6,r6,r17
10014330:	298bc83a 	sub	r5,r5,r6
10014334:	3825883a 	mov	r18,r7
10014338:	003e5606 	br	10013c94 <__alt_data_end+0xf8013c94>
1001433c:	4184b03a 	or	r2,r8,r6
10014340:	10002b26 	beq	r2,zero,100143f0 <__adddf3+0x7d8>
10014344:	2804d0fa 	srli	r2,r5,3
10014348:	8822d0fa 	srli	r17,r17,3
1001434c:	280a977a 	slli	r5,r5,29
10014350:	10c0022c 	andhi	r3,r2,8
10014354:	2c62b03a 	or	r17,r5,r17
10014358:	18000826 	beq	r3,zero,1001437c <__adddf3+0x764>
1001435c:	4008d0fa 	srli	r4,r8,3
10014360:	20c0022c 	andhi	r3,r4,8
10014364:	1800051e 	bne	r3,zero,1001437c <__adddf3+0x764>
10014368:	300cd0fa 	srli	r6,r6,3
1001436c:	4010977a 	slli	r8,r8,29
10014370:	2005883a 	mov	r2,r4
10014374:	3825883a 	mov	r18,r7
10014378:	41a2b03a 	or	r17,r8,r6
1001437c:	880ad77a 	srli	r5,r17,29
10014380:	100490fa 	slli	r2,r2,3
10014384:	882290fa 	slli	r17,r17,3
10014388:	0401ffc4 	movi	r16,2047
1001438c:	288ab03a 	or	r5,r5,r2
10014390:	003e4006 	br	10013c94 <__alt_data_end+0xf8013c94>
10014394:	01c1ffc4 	movi	r7,2047
10014398:	11ffc71e 	bne	r2,r7,100142b8 <__alt_data_end+0xf80142b8>
1001439c:	400b883a 	mov	r5,r8
100143a0:	3023883a 	mov	r17,r6
100143a4:	1021883a 	mov	r16,r2
100143a8:	003e3a06 	br	10013c94 <__alt_data_end+0xf8013c94>
100143ac:	10002d26 	beq	r2,zero,10014464 <__adddf3+0x84c>
100143b0:	4184b03a 	or	r2,r8,r6
100143b4:	10000e26 	beq	r2,zero,100143f0 <__adddf3+0x7d8>
100143b8:	2804d0fa 	srli	r2,r5,3
100143bc:	8822d0fa 	srli	r17,r17,3
100143c0:	280a977a 	slli	r5,r5,29
100143c4:	10c0022c 	andhi	r3,r2,8
100143c8:	2c62b03a 	or	r17,r5,r17
100143cc:	183feb26 	beq	r3,zero,1001437c <__alt_data_end+0xf801437c>
100143d0:	4008d0fa 	srli	r4,r8,3
100143d4:	20c0022c 	andhi	r3,r4,8
100143d8:	183fe81e 	bne	r3,zero,1001437c <__alt_data_end+0xf801437c>
100143dc:	300cd0fa 	srli	r6,r6,3
100143e0:	4010977a 	slli	r8,r8,29
100143e4:	2005883a 	mov	r2,r4
100143e8:	41a2b03a 	or	r17,r8,r6
100143ec:	003fe306 	br	1001437c <__alt_data_end+0xf801437c>
100143f0:	0401ffc4 	movi	r16,2047
100143f4:	003e2706 	br	10013c94 <__alt_data_end+0xf8013c94>
100143f8:	0011883a 	mov	r8,zero
100143fc:	003f8306 	br	1001420c <__alt_data_end+0xf801420c>
10014400:	193ff804 	addi	r4,r3,-32
10014404:	02400804 	movi	r9,32
10014408:	2908d83a 	srl	r4,r5,r4
1001440c:	1a402526 	beq	r3,r9,100144a4 <__adddf3+0x88c>
10014410:	02401004 	movi	r9,64
10014414:	48c7c83a 	sub	r3,r9,r3
10014418:	28ca983a 	sll	r5,r5,r3
1001441c:	2c62b03a 	or	r17,r5,r17
10014420:	8822c03a 	cmpne	r17,r17,zero
10014424:	8922b03a 	or	r17,r17,r4
10014428:	0007883a 	mov	r3,zero
1001442c:	003f2f06 	br	100140ec <__alt_data_end+0xf80140ec>
10014430:	01402034 	movhi	r5,128
10014434:	0007883a 	mov	r3,zero
10014438:	297fffc4 	addi	r5,r5,-1
1001443c:	047ffe04 	movi	r17,-8
10014440:	0401ffc4 	movi	r16,2047
10014444:	003e7306 	br	10013e14 <__alt_data_end+0xf8013e14>
10014448:	2c62b03a 	or	r17,r5,r17
1001444c:	8822c03a 	cmpne	r17,r17,zero
10014450:	0009883a 	mov	r4,zero
10014454:	003fa506 	br	100142ec <__alt_data_end+0xf80142ec>
10014458:	400b883a 	mov	r5,r8
1001445c:	3023883a 	mov	r17,r6
10014460:	003e0c06 	br	10013c94 <__alt_data_end+0xf8013c94>
10014464:	400b883a 	mov	r5,r8
10014468:	3023883a 	mov	r17,r6
1001446c:	0401ffc4 	movi	r16,2047
10014470:	003e0806 	br	10013c94 <__alt_data_end+0xf8013c94>
10014474:	21fff804 	addi	r7,r4,-32
10014478:	02400804 	movi	r9,32
1001447c:	29ced83a 	srl	r7,r5,r7
10014480:	22400a26 	beq	r4,r9,100144ac <__adddf3+0x894>
10014484:	02401004 	movi	r9,64
10014488:	4909c83a 	sub	r4,r9,r4
1001448c:	290a983a 	sll	r5,r5,r4
10014490:	2c62b03a 	or	r17,r5,r17
10014494:	8822c03a 	cmpne	r17,r17,zero
10014498:	89e2b03a 	or	r17,r17,r7
1001449c:	0009883a 	mov	r4,zero
100144a0:	003f9206 	br	100142ec <__alt_data_end+0xf80142ec>
100144a4:	000b883a 	mov	r5,zero
100144a8:	003fdc06 	br	1001441c <__alt_data_end+0xf801441c>
100144ac:	000b883a 	mov	r5,zero
100144b0:	003ff706 	br	10014490 <__alt_data_end+0xf8014490>

100144b4 <__divdf3>:
100144b4:	defff004 	addi	sp,sp,-64
100144b8:	dc800815 	stw	r18,32(sp)
100144bc:	2824d53a 	srli	r18,r5,20
100144c0:	dd800c15 	stw	r22,48(sp)
100144c4:	282cd7fa 	srli	r22,r5,31
100144c8:	dc000615 	stw	r16,24(sp)
100144cc:	04000434 	movhi	r16,16
100144d0:	df000e15 	stw	fp,56(sp)
100144d4:	dd000a15 	stw	r20,40(sp)
100144d8:	dcc00915 	stw	r19,36(sp)
100144dc:	dc400715 	stw	r17,28(sp)
100144e0:	843fffc4 	addi	r16,r16,-1
100144e4:	dfc00f15 	stw	ra,60(sp)
100144e8:	ddc00d15 	stw	r23,52(sp)
100144ec:	dd400b15 	stw	r21,44(sp)
100144f0:	9481ffcc 	andi	r18,r18,2047
100144f4:	2029883a 	mov	r20,r4
100144f8:	2027883a 	mov	r19,r4
100144fc:	2c22703a 	and	r17,r5,r16
10014500:	b7003fcc 	andi	fp,r22,255
10014504:	90005e26 	beq	r18,zero,10014680 <__divdf3+0x1cc>
10014508:	0081ffc4 	movi	r2,2047
1001450c:	90803526 	beq	r18,r2,100145e4 <__divdf3+0x130>
10014510:	8c000434 	orhi	r16,r17,16
10014514:	2004d77a 	srli	r2,r4,29
10014518:	802090fa 	slli	r16,r16,3
1001451c:	202690fa 	slli	r19,r4,3
10014520:	94bf0044 	addi	r18,r18,-1023
10014524:	80a2b03a 	or	r17,r16,r2
10014528:	0029883a 	mov	r20,zero
1001452c:	0011883a 	mov	r8,zero
10014530:	380ad53a 	srli	r5,r7,20
10014534:	382ed7fa 	srli	r23,r7,31
10014538:	04000434 	movhi	r16,16
1001453c:	843fffc4 	addi	r16,r16,-1
10014540:	2941ffcc 	andi	r5,r5,2047
10014544:	302b883a 	mov	r21,r6
10014548:	3c20703a 	and	r16,r7,r16
1001454c:	ba403fcc 	andi	r9,r23,255
10014550:	28006726 	beq	r5,zero,100146f0 <__divdf3+0x23c>
10014554:	0081ffc4 	movi	r2,2047
10014558:	28805f26 	beq	r5,r2,100146d8 <__divdf3+0x224>
1001455c:	84000434 	orhi	r16,r16,16
10014560:	3004d77a 	srli	r2,r6,29
10014564:	802090fa 	slli	r16,r16,3
10014568:	302a90fa 	slli	r21,r6,3
1001456c:	297f0044 	addi	r5,r5,-1023
10014570:	80a0b03a 	or	r16,r16,r2
10014574:	000f883a 	mov	r7,zero
10014578:	3d06b03a 	or	r3,r7,r20
1001457c:	180690ba 	slli	r3,r3,2
10014580:	00840074 	movhi	r2,4097
10014584:	10916904 	addi	r2,r2,17828
10014588:	1885883a 	add	r2,r3,r2
1001458c:	10800017 	ldw	r2,0(r2)
10014590:	b5c8f03a 	xor	r4,r22,r23
10014594:	200d883a 	mov	r6,r4
10014598:	25003fcc 	andi	r20,r4,255
1001459c:	9165c83a 	sub	r18,r18,r5
100145a0:	1000683a 	jmp	r2
100145a4:	100147ec 	andhi	zero,r2,1311
100145a8:	1001461c 	xori	zero,r2,1304
100145ac:	100147b0 	cmpltui	zero,r2,1310
100145b0:	10014600 	call	11001460 <_gp+0xfdda3c>
100145b4:	100147b0 	cmpltui	zero,r2,1310
100145b8:	10014784 	addi	zero,r2,1310
100145bc:	100147b0 	cmpltui	zero,r2,1310
100145c0:	10014600 	call	11001460 <_gp+0xfdda3c>
100145c4:	1001461c 	xori	zero,r2,1304
100145c8:	1001461c 	xori	zero,r2,1304
100145cc:	10014784 	addi	zero,r2,1310
100145d0:	10014600 	call	11001460 <_gp+0xfdda3c>
100145d4:	10014610 	cmplti	zero,r2,1304
100145d8:	10014610 	cmplti	zero,r2,1304
100145dc:	10014610 	cmplti	zero,r2,1304
100145e0:	100147c0 	call	1100147c <_gp+0xfdda58>
100145e4:	8904b03a 	or	r2,r17,r4
100145e8:	1000631e 	bne	r2,zero,10014778 <__divdf3+0x2c4>
100145ec:	05000204 	movi	r20,8
100145f0:	0023883a 	mov	r17,zero
100145f4:	0027883a 	mov	r19,zero
100145f8:	02000084 	movi	r8,2
100145fc:	003fcc06 	br	10014530 <__alt_data_end+0xf8014530>
10014600:	8023883a 	mov	r17,r16
10014604:	a827883a 	mov	r19,r21
10014608:	4839883a 	mov	fp,r9
1001460c:	3811883a 	mov	r8,r7
10014610:	00800084 	movi	r2,2
10014614:	4081531e 	bne	r8,r2,10014b64 <__divdf3+0x6b0>
10014618:	e029883a 	mov	r20,fp
1001461c:	a180004c 	andi	r6,r20,1
10014620:	0201ffc4 	movi	r8,2047
10014624:	000b883a 	mov	r5,zero
10014628:	0027883a 	mov	r19,zero
1001462c:	4010953a 	slli	r8,r8,20
10014630:	30c03fcc 	andi	r3,r6,255
10014634:	04000434 	movhi	r16,16
10014638:	180697fa 	slli	r3,r3,31
1001463c:	843fffc4 	addi	r16,r16,-1
10014640:	2c20703a 	and	r16,r5,r16
10014644:	8220b03a 	or	r16,r16,r8
10014648:	80c6b03a 	or	r3,r16,r3
1001464c:	9805883a 	mov	r2,r19
10014650:	dfc00f17 	ldw	ra,60(sp)
10014654:	df000e17 	ldw	fp,56(sp)
10014658:	ddc00d17 	ldw	r23,52(sp)
1001465c:	dd800c17 	ldw	r22,48(sp)
10014660:	dd400b17 	ldw	r21,44(sp)
10014664:	dd000a17 	ldw	r20,40(sp)
10014668:	dcc00917 	ldw	r19,36(sp)
1001466c:	dc800817 	ldw	r18,32(sp)
10014670:	dc400717 	ldw	r17,28(sp)
10014674:	dc000617 	ldw	r16,24(sp)
10014678:	dec01004 	addi	sp,sp,64
1001467c:	f800283a 	ret
10014680:	8904b03a 	or	r2,r17,r4
10014684:	10003726 	beq	r2,zero,10014764 <__divdf3+0x2b0>
10014688:	88014d26 	beq	r17,zero,10014bc0 <__divdf3+0x70c>
1001468c:	8809883a 	mov	r4,r17
10014690:	d9800215 	stw	r6,8(sp)
10014694:	d9c00515 	stw	r7,20(sp)
10014698:	0009a180 	call	10009a18 <__clzsi2>
1001469c:	d9800217 	ldw	r6,8(sp)
100146a0:	d9c00517 	ldw	r7,20(sp)
100146a4:	1007883a 	mov	r3,r2
100146a8:	01000a04 	movi	r4,40
100146ac:	1cfffe04 	addi	r19,r3,-8
100146b0:	20c9c83a 	sub	r4,r4,r3
100146b4:	8cca983a 	sll	r5,r17,r19
100146b8:	a108d83a 	srl	r4,r20,r4
100146bc:	a4e6983a 	sll	r19,r20,r19
100146c0:	2162b03a 	or	r17,r4,r5
100146c4:	04bf0344 	movi	r18,-1011
100146c8:	90e5c83a 	sub	r18,r18,r3
100146cc:	0029883a 	mov	r20,zero
100146d0:	0011883a 	mov	r8,zero
100146d4:	003f9606 	br	10014530 <__alt_data_end+0xf8014530>
100146d8:	8184b03a 	or	r2,r16,r6
100146dc:	10001f1e 	bne	r2,zero,1001475c <__divdf3+0x2a8>
100146e0:	0021883a 	mov	r16,zero
100146e4:	002b883a 	mov	r21,zero
100146e8:	01c00084 	movi	r7,2
100146ec:	003fa206 	br	10014578 <__alt_data_end+0xf8014578>
100146f0:	8184b03a 	or	r2,r16,r6
100146f4:	10001526 	beq	r2,zero,1001474c <__divdf3+0x298>
100146f8:	80013d26 	beq	r16,zero,10014bf0 <__divdf3+0x73c>
100146fc:	8009883a 	mov	r4,r16
10014700:	d9800215 	stw	r6,8(sp)
10014704:	da000315 	stw	r8,12(sp)
10014708:	da400415 	stw	r9,16(sp)
1001470c:	0009a180 	call	10009a18 <__clzsi2>
10014710:	d9800217 	ldw	r6,8(sp)
10014714:	da000317 	ldw	r8,12(sp)
10014718:	da400417 	ldw	r9,16(sp)
1001471c:	1007883a 	mov	r3,r2
10014720:	01000a04 	movi	r4,40
10014724:	1d7ffe04 	addi	r21,r3,-8
10014728:	20c9c83a 	sub	r4,r4,r3
1001472c:	8560983a 	sll	r16,r16,r21
10014730:	3108d83a 	srl	r4,r6,r4
10014734:	356a983a 	sll	r21,r6,r21
10014738:	2420b03a 	or	r16,r4,r16
1001473c:	017f0344 	movi	r5,-1011
10014740:	28cbc83a 	sub	r5,r5,r3
10014744:	000f883a 	mov	r7,zero
10014748:	003f8b06 	br	10014578 <__alt_data_end+0xf8014578>
1001474c:	0021883a 	mov	r16,zero
10014750:	002b883a 	mov	r21,zero
10014754:	01c00044 	movi	r7,1
10014758:	003f8706 	br	10014578 <__alt_data_end+0xf8014578>
1001475c:	01c000c4 	movi	r7,3
10014760:	003f8506 	br	10014578 <__alt_data_end+0xf8014578>
10014764:	05000104 	movi	r20,4
10014768:	0023883a 	mov	r17,zero
1001476c:	0027883a 	mov	r19,zero
10014770:	02000044 	movi	r8,1
10014774:	003f6e06 	br	10014530 <__alt_data_end+0xf8014530>
10014778:	05000304 	movi	r20,12
1001477c:	020000c4 	movi	r8,3
10014780:	003f6b06 	br	10014530 <__alt_data_end+0xf8014530>
10014784:	01400434 	movhi	r5,16
10014788:	000d883a 	mov	r6,zero
1001478c:	297fffc4 	addi	r5,r5,-1
10014790:	04ffffc4 	movi	r19,-1
10014794:	0201ffc4 	movi	r8,2047
10014798:	003fa406 	br	1001462c <__alt_data_end+0xf801462c>
1001479c:	043f0084 	movi	r16,-1022
100147a0:	84a1c83a 	sub	r16,r16,r18
100147a4:	00800e04 	movi	r2,56
100147a8:	14014d0e 	bge	r2,r16,10014ce0 <__divdf3+0x82c>
100147ac:	a180004c 	andi	r6,r20,1
100147b0:	0011883a 	mov	r8,zero
100147b4:	000b883a 	mov	r5,zero
100147b8:	0027883a 	mov	r19,zero
100147bc:	003f9b06 	br	1001462c <__alt_data_end+0xf801462c>
100147c0:	8880022c 	andhi	r2,r17,8
100147c4:	1000f026 	beq	r2,zero,10014b88 <__divdf3+0x6d4>
100147c8:	8080022c 	andhi	r2,r16,8
100147cc:	1000ee1e 	bne	r2,zero,10014b88 <__divdf3+0x6d4>
100147d0:	00800434 	movhi	r2,16
100147d4:	81400234 	orhi	r5,r16,8
100147d8:	10bfffc4 	addi	r2,r2,-1
100147dc:	b80d883a 	mov	r6,r23
100147e0:	288a703a 	and	r5,r5,r2
100147e4:	a827883a 	mov	r19,r21
100147e8:	003fea06 	br	10014794 <__alt_data_end+0xf8014794>
100147ec:	84411c36 	bltu	r16,r17,10014c60 <__divdf3+0x7ac>
100147f0:	8c011a26 	beq	r17,r16,10014c5c <__divdf3+0x7a8>
100147f4:	94bfffc4 	addi	r18,r18,-1
100147f8:	dcc00015 	stw	r19,0(sp)
100147fc:	8811883a 	mov	r8,r17
10014800:	002d883a 	mov	r22,zero
10014804:	a80cd63a 	srli	r6,r21,24
10014808:	8020923a 	slli	r16,r16,8
1001480c:	a82a923a 	slli	r21,r21,8
10014810:	4009883a 	mov	r4,r8
10014814:	342eb03a 	or	r23,r6,r16
10014818:	dd400115 	stw	r21,4(sp)
1001481c:	b82ad43a 	srli	r21,r23,16
10014820:	da000315 	stw	r8,12(sp)
10014824:	bcffffcc 	andi	r19,r23,65535
10014828:	a80b883a 	mov	r5,r21
1001482c:	00074b40 	call	100074b4 <__udivsi3>
10014830:	1009883a 	mov	r4,r2
10014834:	980b883a 	mov	r5,r19
10014838:	1023883a 	mov	r17,r2
1001483c:	00074c40 	call	100074c4 <__mulsi3>
10014840:	da000317 	ldw	r8,12(sp)
10014844:	a80b883a 	mov	r5,r21
10014848:	1039883a 	mov	fp,r2
1001484c:	4009883a 	mov	r4,r8
10014850:	00074bc0 	call	100074bc <__umodsi3>
10014854:	d8c00017 	ldw	r3,0(sp)
10014858:	1004943a 	slli	r2,r2,16
1001485c:	1810d43a 	srli	r8,r3,16
10014860:	120eb03a 	or	r7,r2,r8
10014864:	3f00062e 	bgeu	r7,fp,10014880 <__divdf3+0x3cc>
10014868:	3dcf883a 	add	r7,r7,r23
1001486c:	88bfffc4 	addi	r2,r17,-1
10014870:	3dc10a36 	bltu	r7,r23,10014c9c <__divdf3+0x7e8>
10014874:	3f01092e 	bgeu	r7,fp,10014c9c <__divdf3+0x7e8>
10014878:	8c7fff84 	addi	r17,r17,-2
1001487c:	3dcf883a 	add	r7,r7,r23
10014880:	3f39c83a 	sub	fp,r7,fp
10014884:	e009883a 	mov	r4,fp
10014888:	a80b883a 	mov	r5,r21
1001488c:	00074b40 	call	100074b4 <__udivsi3>
10014890:	1009883a 	mov	r4,r2
10014894:	980b883a 	mov	r5,r19
10014898:	1021883a 	mov	r16,r2
1001489c:	00074c40 	call	100074c4 <__mulsi3>
100148a0:	e009883a 	mov	r4,fp
100148a4:	a80b883a 	mov	r5,r21
100148a8:	d8800315 	stw	r2,12(sp)
100148ac:	00074bc0 	call	100074bc <__umodsi3>
100148b0:	d9000017 	ldw	r4,0(sp)
100148b4:	1004943a 	slli	r2,r2,16
100148b8:	da000317 	ldw	r8,12(sp)
100148bc:	20ffffcc 	andi	r3,r4,65535
100148c0:	10ceb03a 	or	r7,r2,r3
100148c4:	3a00062e 	bgeu	r7,r8,100148e0 <__divdf3+0x42c>
100148c8:	3dcf883a 	add	r7,r7,r23
100148cc:	80bfffc4 	addi	r2,r16,-1
100148d0:	3dc0f036 	bltu	r7,r23,10014c94 <__divdf3+0x7e0>
100148d4:	3a00ef2e 	bgeu	r7,r8,10014c94 <__divdf3+0x7e0>
100148d8:	843fff84 	addi	r16,r16,-2
100148dc:	3dcf883a 	add	r7,r7,r23
100148e0:	d8c00117 	ldw	r3,4(sp)
100148e4:	8822943a 	slli	r17,r17,16
100148e8:	3a0fc83a 	sub	r7,r7,r8
100148ec:	1806d43a 	srli	r3,r3,16
100148f0:	8462b03a 	or	r17,r16,r17
100148f4:	8affffcc 	andi	r11,r17,65535
100148f8:	d8c00015 	stw	r3,0(sp)
100148fc:	d8c00117 	ldw	r3,4(sp)
10014900:	8820d43a 	srli	r16,r17,16
10014904:	5809883a 	mov	r4,r11
10014908:	1f3fffcc 	andi	fp,r3,65535
1001490c:	e00b883a 	mov	r5,fp
10014910:	d9c00515 	stw	r7,20(sp)
10014914:	dac00215 	stw	r11,8(sp)
10014918:	00074c40 	call	100074c4 <__mulsi3>
1001491c:	8009883a 	mov	r4,r16
10014920:	e00b883a 	mov	r5,fp
10014924:	d8800415 	stw	r2,16(sp)
10014928:	00074c40 	call	100074c4 <__mulsi3>
1001492c:	d9400017 	ldw	r5,0(sp)
10014930:	8009883a 	mov	r4,r16
10014934:	d8800315 	stw	r2,12(sp)
10014938:	00074c40 	call	100074c4 <__mulsi3>
1001493c:	dac00217 	ldw	r11,8(sp)
10014940:	d9400017 	ldw	r5,0(sp)
10014944:	d8800215 	stw	r2,8(sp)
10014948:	5809883a 	mov	r4,r11
1001494c:	00074c40 	call	100074c4 <__mulsi3>
10014950:	da400417 	ldw	r9,16(sp)
10014954:	da800317 	ldw	r10,12(sp)
10014958:	d9c00517 	ldw	r7,20(sp)
1001495c:	480ad43a 	srli	r5,r9,16
10014960:	5085883a 	add	r2,r10,r2
10014964:	db000217 	ldw	r12,8(sp)
10014968:	1151883a 	add	r8,r2,r5
1001496c:	4280022e 	bgeu	r8,r10,10014978 <__divdf3+0x4c4>
10014970:	00800074 	movhi	r2,1
10014974:	6099883a 	add	r12,r12,r2
10014978:	400ad43a 	srli	r5,r8,16
1001497c:	4010943a 	slli	r8,r8,16
10014980:	4c3fffcc 	andi	r16,r9,65535
10014984:	6149883a 	add	r4,r12,r5
10014988:	4411883a 	add	r8,r8,r16
1001498c:	3900a736 	bltu	r7,r4,10014c2c <__divdf3+0x778>
10014990:	3900c426 	beq	r7,r4,10014ca4 <__divdf3+0x7f0>
10014994:	3909c83a 	sub	r4,r7,r4
10014998:	b221c83a 	sub	r16,r22,r8
1001499c:	b42d803a 	cmpltu	r22,r22,r16
100149a0:	25adc83a 	sub	r22,r4,r22
100149a4:	b5c0c626 	beq	r22,r23,10014cc0 <__divdf3+0x80c>
100149a8:	b009883a 	mov	r4,r22
100149ac:	a80b883a 	mov	r5,r21
100149b0:	00074b40 	call	100074b4 <__udivsi3>
100149b4:	1009883a 	mov	r4,r2
100149b8:	980b883a 	mov	r5,r19
100149bc:	d8800315 	stw	r2,12(sp)
100149c0:	00074c40 	call	100074c4 <__mulsi3>
100149c4:	a80b883a 	mov	r5,r21
100149c8:	b009883a 	mov	r4,r22
100149cc:	d8800415 	stw	r2,16(sp)
100149d0:	00074bc0 	call	100074bc <__umodsi3>
100149d4:	1004943a 	slli	r2,r2,16
100149d8:	800ed43a 	srli	r7,r16,16
100149dc:	da400417 	ldw	r9,16(sp)
100149e0:	da000317 	ldw	r8,12(sp)
100149e4:	11cab03a 	or	r5,r2,r7
100149e8:	2a40062e 	bgeu	r5,r9,10014a04 <__divdf3+0x550>
100149ec:	2dcb883a 	add	r5,r5,r23
100149f0:	40bfffc4 	addi	r2,r8,-1
100149f4:	2dc0b436 	bltu	r5,r23,10014cc8 <__divdf3+0x814>
100149f8:	2a40b32e 	bgeu	r5,r9,10014cc8 <__divdf3+0x814>
100149fc:	423fff84 	addi	r8,r8,-2
10014a00:	2dcb883a 	add	r5,r5,r23
10014a04:	2a6dc83a 	sub	r22,r5,r9
10014a08:	b009883a 	mov	r4,r22
10014a0c:	a80b883a 	mov	r5,r21
10014a10:	da000315 	stw	r8,12(sp)
10014a14:	00074b40 	call	100074b4 <__udivsi3>
10014a18:	980b883a 	mov	r5,r19
10014a1c:	1009883a 	mov	r4,r2
10014a20:	d8800415 	stw	r2,16(sp)
10014a24:	00074c40 	call	100074c4 <__mulsi3>
10014a28:	b009883a 	mov	r4,r22
10014a2c:	a80b883a 	mov	r5,r21
10014a30:	1027883a 	mov	r19,r2
10014a34:	00074bc0 	call	100074bc <__umodsi3>
10014a38:	1004943a 	slli	r2,r2,16
10014a3c:	843fffcc 	andi	r16,r16,65535
10014a40:	da000317 	ldw	r8,12(sp)
10014a44:	140eb03a 	or	r7,r2,r16
10014a48:	da400417 	ldw	r9,16(sp)
10014a4c:	3cc0062e 	bgeu	r7,r19,10014a68 <__divdf3+0x5b4>
10014a50:	3dcf883a 	add	r7,r7,r23
10014a54:	48bfffc4 	addi	r2,r9,-1
10014a58:	3dc09d36 	bltu	r7,r23,10014cd0 <__divdf3+0x81c>
10014a5c:	3cc09c2e 	bgeu	r7,r19,10014cd0 <__divdf3+0x81c>
10014a60:	4a7fff84 	addi	r9,r9,-2
10014a64:	3dcf883a 	add	r7,r7,r23
10014a68:	4010943a 	slli	r8,r8,16
10014a6c:	3cebc83a 	sub	r21,r7,r19
10014a70:	e00b883a 	mov	r5,fp
10014a74:	4a26b03a 	or	r19,r9,r8
10014a78:	99ffffcc 	andi	r7,r19,65535
10014a7c:	9820d43a 	srli	r16,r19,16
10014a80:	3809883a 	mov	r4,r7
10014a84:	d9c00515 	stw	r7,20(sp)
10014a88:	00074c40 	call	100074c4 <__mulsi3>
10014a8c:	8009883a 	mov	r4,r16
10014a90:	e00b883a 	mov	r5,fp
10014a94:	102d883a 	mov	r22,r2
10014a98:	00074c40 	call	100074c4 <__mulsi3>
10014a9c:	d9400017 	ldw	r5,0(sp)
10014aa0:	8009883a 	mov	r4,r16
10014aa4:	1039883a 	mov	fp,r2
10014aa8:	00074c40 	call	100074c4 <__mulsi3>
10014aac:	d9c00517 	ldw	r7,20(sp)
10014ab0:	d9400017 	ldw	r5,0(sp)
10014ab4:	1021883a 	mov	r16,r2
10014ab8:	3809883a 	mov	r4,r7
10014abc:	00074c40 	call	100074c4 <__mulsi3>
10014ac0:	b008d43a 	srli	r4,r22,16
10014ac4:	e085883a 	add	r2,fp,r2
10014ac8:	1109883a 	add	r4,r2,r4
10014acc:	2700022e 	bgeu	r4,fp,10014ad8 <__divdf3+0x624>
10014ad0:	00800074 	movhi	r2,1
10014ad4:	80a1883a 	add	r16,r16,r2
10014ad8:	200ad43a 	srli	r5,r4,16
10014adc:	2008943a 	slli	r4,r4,16
10014ae0:	b5bfffcc 	andi	r22,r22,65535
10014ae4:	8145883a 	add	r2,r16,r5
10014ae8:	2589883a 	add	r4,r4,r22
10014aec:	a8802c36 	bltu	r21,r2,10014ba0 <__divdf3+0x6ec>
10014af0:	a880a426 	beq	r21,r2,10014d84 <__divdf3+0x8d0>
10014af4:	9cc00054 	ori	r19,r19,1
10014af8:	9200ffc4 	addi	r8,r18,1023
10014afc:	023f270e 	bge	zero,r8,1001479c <__alt_data_end+0xf801479c>
10014b00:	988001cc 	andi	r2,r19,7
10014b04:	10000726 	beq	r2,zero,10014b24 <__divdf3+0x670>
10014b08:	990003cc 	andi	r4,r19,15
10014b0c:	00800104 	movi	r2,4
10014b10:	20800426 	beq	r4,r2,10014b24 <__divdf3+0x670>
10014b14:	9885883a 	add	r2,r19,r2
10014b18:	14e7803a 	cmpltu	r19,r2,r19
10014b1c:	8ce3883a 	add	r17,r17,r19
10014b20:	1027883a 	mov	r19,r2
10014b24:	8880402c 	andhi	r2,r17,256
10014b28:	10000426 	beq	r2,zero,10014b3c <__divdf3+0x688>
10014b2c:	00bfc034 	movhi	r2,65280
10014b30:	10bfffc4 	addi	r2,r2,-1
10014b34:	92010004 	addi	r8,r18,1024
10014b38:	88a2703a 	and	r17,r17,r2
10014b3c:	0081ff84 	movi	r2,2046
10014b40:	123eb616 	blt	r2,r8,1001461c <__alt_data_end+0xf801461c>
10014b44:	9826d0fa 	srli	r19,r19,3
10014b48:	8804977a 	slli	r2,r17,29
10014b4c:	8820927a 	slli	r16,r17,9
10014b50:	4201ffcc 	andi	r8,r8,2047
10014b54:	14e6b03a 	or	r19,r2,r19
10014b58:	800ad33a 	srli	r5,r16,12
10014b5c:	a180004c 	andi	r6,r20,1
10014b60:	003eb206 	br	1001462c <__alt_data_end+0xf801462c>
10014b64:	008000c4 	movi	r2,3
10014b68:	4080ac26 	beq	r8,r2,10014e1c <__divdf3+0x968>
10014b6c:	00800044 	movi	r2,1
10014b70:	4080591e 	bne	r8,r2,10014cd8 <__divdf3+0x824>
10014b74:	e00d883a 	mov	r6,fp
10014b78:	0011883a 	mov	r8,zero
10014b7c:	000b883a 	mov	r5,zero
10014b80:	0027883a 	mov	r19,zero
10014b84:	003ea906 	br	1001462c <__alt_data_end+0xf801462c>
10014b88:	00800434 	movhi	r2,16
10014b8c:	89400234 	orhi	r5,r17,8
10014b90:	10bfffc4 	addi	r2,r2,-1
10014b94:	b00d883a 	mov	r6,r22
10014b98:	288a703a 	and	r5,r5,r2
10014b9c:	003efd06 	br	10014794 <__alt_data_end+0xf8014794>
10014ba0:	adcf883a 	add	r7,r21,r23
10014ba4:	997fffc4 	addi	r5,r19,-1
10014ba8:	3dc0412e 	bgeu	r7,r23,10014cb0 <__divdf3+0x7fc>
10014bac:	2827883a 	mov	r19,r5
10014bb0:	38bfd01e 	bne	r7,r2,10014af4 <__alt_data_end+0xf8014af4>
10014bb4:	d8c00117 	ldw	r3,4(sp)
10014bb8:	193fce1e 	bne	r3,r4,10014af4 <__alt_data_end+0xf8014af4>
10014bbc:	003fce06 	br	10014af8 <__alt_data_end+0xf8014af8>
10014bc0:	d9800215 	stw	r6,8(sp)
10014bc4:	d9c00515 	stw	r7,20(sp)
10014bc8:	0009a180 	call	10009a18 <__clzsi2>
10014bcc:	10c00804 	addi	r3,r2,32
10014bd0:	010009c4 	movi	r4,39
10014bd4:	d9800217 	ldw	r6,8(sp)
10014bd8:	d9c00517 	ldw	r7,20(sp)
10014bdc:	20feb20e 	bge	r4,r3,100146a8 <__alt_data_end+0xf80146a8>
10014be0:	117ffe04 	addi	r5,r2,-8
10014be4:	a162983a 	sll	r17,r20,r5
10014be8:	0027883a 	mov	r19,zero
10014bec:	003eb506 	br	100146c4 <__alt_data_end+0xf80146c4>
10014bf0:	3009883a 	mov	r4,r6
10014bf4:	d9800215 	stw	r6,8(sp)
10014bf8:	da000315 	stw	r8,12(sp)
10014bfc:	da400415 	stw	r9,16(sp)
10014c00:	0009a180 	call	10009a18 <__clzsi2>
10014c04:	10c00804 	addi	r3,r2,32
10014c08:	010009c4 	movi	r4,39
10014c0c:	d9800217 	ldw	r6,8(sp)
10014c10:	da000317 	ldw	r8,12(sp)
10014c14:	da400417 	ldw	r9,16(sp)
10014c18:	20fec10e 	bge	r4,r3,10014720 <__alt_data_end+0xf8014720>
10014c1c:	10bffe04 	addi	r2,r2,-8
10014c20:	a8a0983a 	sll	r16,r21,r2
10014c24:	002b883a 	mov	r21,zero
10014c28:	003ec406 	br	1001473c <__alt_data_end+0xf801473c>
10014c2c:	d8c00117 	ldw	r3,4(sp)
10014c30:	b0ed883a 	add	r22,r22,r3
10014c34:	b0c5803a 	cmpltu	r2,r22,r3
10014c38:	15c5883a 	add	r2,r2,r23
10014c3c:	11cf883a 	add	r7,r2,r7
10014c40:	88bfffc4 	addi	r2,r17,-1
10014c44:	b9c00d2e 	bgeu	r23,r7,10014c7c <__divdf3+0x7c8>
10014c48:	39003f36 	bltu	r7,r4,10014d48 <__divdf3+0x894>
10014c4c:	21c06a26 	beq	r4,r7,10014df8 <__divdf3+0x944>
10014c50:	3909c83a 	sub	r4,r7,r4
10014c54:	1023883a 	mov	r17,r2
10014c58:	003f4f06 	br	10014998 <__alt_data_end+0xf8014998>
10014c5c:	9d7ee536 	bltu	r19,r21,100147f4 <__alt_data_end+0xf80147f4>
10014c60:	982ed07a 	srli	r23,r19,1
10014c64:	880497fa 	slli	r2,r17,31
10014c68:	8810d07a 	srli	r8,r17,1
10014c6c:	982c97fa 	slli	r22,r19,31
10014c70:	b884b03a 	or	r2,r23,r2
10014c74:	d8800015 	stw	r2,0(sp)
10014c78:	003ee206 	br	10014804 <__alt_data_end+0xf8014804>
10014c7c:	3dfff41e 	bne	r7,r23,10014c50 <__alt_data_end+0xf8014c50>
10014c80:	d8c00117 	ldw	r3,4(sp)
10014c84:	b0fff02e 	bgeu	r22,r3,10014c48 <__alt_data_end+0xf8014c48>
10014c88:	b909c83a 	sub	r4,r23,r4
10014c8c:	1023883a 	mov	r17,r2
10014c90:	003f4106 	br	10014998 <__alt_data_end+0xf8014998>
10014c94:	1021883a 	mov	r16,r2
10014c98:	003f1106 	br	100148e0 <__alt_data_end+0xf80148e0>
10014c9c:	1023883a 	mov	r17,r2
10014ca0:	003ef706 	br	10014880 <__alt_data_end+0xf8014880>
10014ca4:	b23fe136 	bltu	r22,r8,10014c2c <__alt_data_end+0xf8014c2c>
10014ca8:	0009883a 	mov	r4,zero
10014cac:	003f3a06 	br	10014998 <__alt_data_end+0xf8014998>
10014cb0:	38802c36 	bltu	r7,r2,10014d64 <__divdf3+0x8b0>
10014cb4:	11c05326 	beq	r2,r7,10014e04 <__divdf3+0x950>
10014cb8:	2827883a 	mov	r19,r5
10014cbc:	003f8d06 	br	10014af4 <__alt_data_end+0xf8014af4>
10014cc0:	04ffffc4 	movi	r19,-1
10014cc4:	003f8c06 	br	10014af8 <__alt_data_end+0xf8014af8>
10014cc8:	1011883a 	mov	r8,r2
10014ccc:	003f4d06 	br	10014a04 <__alt_data_end+0xf8014a04>
10014cd0:	1013883a 	mov	r9,r2
10014cd4:	003f6406 	br	10014a68 <__alt_data_end+0xf8014a68>
10014cd8:	e029883a 	mov	r20,fp
10014cdc:	003f8606 	br	10014af8 <__alt_data_end+0xf8014af8>
10014ce0:	008007c4 	movi	r2,31
10014ce4:	14002a16 	blt	r2,r16,10014d90 <__divdf3+0x8dc>
10014ce8:	91410784 	addi	r5,r18,1054
10014cec:	9c0cd83a 	srl	r6,r19,r16
10014cf0:	8948983a 	sll	r4,r17,r5
10014cf4:	9944983a 	sll	r2,r19,r5
10014cf8:	8c20d83a 	srl	r16,r17,r16
10014cfc:	3108b03a 	or	r4,r6,r4
10014d00:	1004c03a 	cmpne	r2,r2,zero
10014d04:	2084b03a 	or	r2,r4,r2
10014d08:	110001cc 	andi	r4,r2,7
10014d0c:	20000726 	beq	r4,zero,10014d2c <__divdf3+0x878>
10014d10:	114003cc 	andi	r5,r2,15
10014d14:	01000104 	movi	r4,4
10014d18:	29000426 	beq	r5,r4,10014d2c <__divdf3+0x878>
10014d1c:	11000104 	addi	r4,r2,4
10014d20:	2085803a 	cmpltu	r2,r4,r2
10014d24:	80a1883a 	add	r16,r16,r2
10014d28:	2005883a 	mov	r2,r4
10014d2c:	8100202c 	andhi	r4,r16,128
10014d30:	20002d26 	beq	r4,zero,10014de8 <__divdf3+0x934>
10014d34:	a180004c 	andi	r6,r20,1
10014d38:	02000044 	movi	r8,1
10014d3c:	000b883a 	mov	r5,zero
10014d40:	0027883a 	mov	r19,zero
10014d44:	003e3906 	br	1001462c <__alt_data_end+0xf801462c>
10014d48:	d8c00117 	ldw	r3,4(sp)
10014d4c:	8c7fff84 	addi	r17,r17,-2
10014d50:	b0ed883a 	add	r22,r22,r3
10014d54:	b0c5803a 	cmpltu	r2,r22,r3
10014d58:	15c5883a 	add	r2,r2,r23
10014d5c:	11cf883a 	add	r7,r2,r7
10014d60:	003f0c06 	br	10014994 <__alt_data_end+0xf8014994>
10014d64:	d8c00117 	ldw	r3,4(sp)
10014d68:	997fff84 	addi	r5,r19,-2
10014d6c:	18d1883a 	add	r8,r3,r3
10014d70:	40c7803a 	cmpltu	r3,r8,r3
10014d74:	1dcd883a 	add	r6,r3,r23
10014d78:	398f883a 	add	r7,r7,r6
10014d7c:	da000115 	stw	r8,4(sp)
10014d80:	003f8a06 	br	10014bac <__alt_data_end+0xf8014bac>
10014d84:	203f861e 	bne	r4,zero,10014ba0 <__alt_data_end+0xf8014ba0>
10014d88:	d8000115 	stw	zero,4(sp)
10014d8c:	003f8906 	br	10014bb4 <__alt_data_end+0xf8014bb4>
10014d90:	00bef884 	movi	r2,-1054
10014d94:	1485c83a 	sub	r2,r2,r18
10014d98:	01000804 	movi	r4,32
10014d9c:	8884d83a 	srl	r2,r17,r2
10014da0:	81001c26 	beq	r16,r4,10014e14 <__divdf3+0x960>
10014da4:	91010f84 	addi	r4,r18,1086
10014da8:	8908983a 	sll	r4,r17,r4
10014dac:	24c8b03a 	or	r4,r4,r19
10014db0:	2008c03a 	cmpne	r4,r4,zero
10014db4:	2084b03a 	or	r2,r4,r2
10014db8:	140001cc 	andi	r16,r2,7
10014dbc:	8000061e 	bne	r16,zero,10014dd8 <__divdf3+0x924>
10014dc0:	000b883a 	mov	r5,zero
10014dc4:	1004d0fa 	srli	r2,r2,3
10014dc8:	a180004c 	andi	r6,r20,1
10014dcc:	0011883a 	mov	r8,zero
10014dd0:	1426b03a 	or	r19,r2,r16
10014dd4:	003e1506 	br	1001462c <__alt_data_end+0xf801462c>
10014dd8:	114003cc 	andi	r5,r2,15
10014ddc:	01000104 	movi	r4,4
10014de0:	0021883a 	mov	r16,zero
10014de4:	293fcd1e 	bne	r5,r4,10014d1c <__alt_data_end+0xf8014d1c>
10014de8:	800a927a 	slli	r5,r16,9
10014dec:	8020977a 	slli	r16,r16,29
10014df0:	280ad33a 	srli	r5,r5,12
10014df4:	003ff306 	br	10014dc4 <__alt_data_end+0xf8014dc4>
10014df8:	b23fd336 	bltu	r22,r8,10014d48 <__alt_data_end+0xf8014d48>
10014dfc:	1023883a 	mov	r17,r2
10014e00:	003fa906 	br	10014ca8 <__alt_data_end+0xf8014ca8>
10014e04:	d8c00117 	ldw	r3,4(sp)
10014e08:	193fd636 	bltu	r3,r4,10014d64 <__alt_data_end+0xf8014d64>
10014e0c:	2827883a 	mov	r19,r5
10014e10:	003f6806 	br	10014bb4 <__alt_data_end+0xf8014bb4>
10014e14:	0009883a 	mov	r4,zero
10014e18:	003fe406 	br	10014dac <__alt_data_end+0xf8014dac>
10014e1c:	00800434 	movhi	r2,16
10014e20:	89400234 	orhi	r5,r17,8
10014e24:	10bfffc4 	addi	r2,r2,-1
10014e28:	e00d883a 	mov	r6,fp
10014e2c:	288a703a 	and	r5,r5,r2
10014e30:	003e5806 	br	10014794 <__alt_data_end+0xf8014794>

10014e34 <__eqdf2>:
10014e34:	2804d53a 	srli	r2,r5,20
10014e38:	3806d53a 	srli	r3,r7,20
10014e3c:	02000434 	movhi	r8,16
10014e40:	423fffc4 	addi	r8,r8,-1
10014e44:	1081ffcc 	andi	r2,r2,2047
10014e48:	0241ffc4 	movi	r9,2047
10014e4c:	2a14703a 	and	r10,r5,r8
10014e50:	18c1ffcc 	andi	r3,r3,2047
10014e54:	3a10703a 	and	r8,r7,r8
10014e58:	280ad7fa 	srli	r5,r5,31
10014e5c:	380ed7fa 	srli	r7,r7,31
10014e60:	12400f26 	beq	r2,r9,10014ea0 <__eqdf2+0x6c>
10014e64:	0241ffc4 	movi	r9,2047
10014e68:	1a400326 	beq	r3,r9,10014e78 <__eqdf2+0x44>
10014e6c:	10c00526 	beq	r2,r3,10014e84 <__eqdf2+0x50>
10014e70:	00800044 	movi	r2,1
10014e74:	f800283a 	ret
10014e78:	4192b03a 	or	r9,r8,r6
10014e7c:	483ffc1e 	bne	r9,zero,10014e70 <__alt_data_end+0xf8014e70>
10014e80:	10fffb1e 	bne	r2,r3,10014e70 <__alt_data_end+0xf8014e70>
10014e84:	523ffa1e 	bne	r10,r8,10014e70 <__alt_data_end+0xf8014e70>
10014e88:	21bff91e 	bne	r4,r6,10014e70 <__alt_data_end+0xf8014e70>
10014e8c:	29c00826 	beq	r5,r7,10014eb0 <__eqdf2+0x7c>
10014e90:	103ff71e 	bne	r2,zero,10014e70 <__alt_data_end+0xf8014e70>
10014e94:	5104b03a 	or	r2,r10,r4
10014e98:	1004c03a 	cmpne	r2,r2,zero
10014e9c:	f800283a 	ret
10014ea0:	5112b03a 	or	r9,r10,r4
10014ea4:	483fef26 	beq	r9,zero,10014e64 <__alt_data_end+0xf8014e64>
10014ea8:	00800044 	movi	r2,1
10014eac:	f800283a 	ret
10014eb0:	0005883a 	mov	r2,zero
10014eb4:	f800283a 	ret

10014eb8 <__gedf2>:
10014eb8:	2804d53a 	srli	r2,r5,20
10014ebc:	3806d53a 	srli	r3,r7,20
10014ec0:	02000434 	movhi	r8,16
10014ec4:	423fffc4 	addi	r8,r8,-1
10014ec8:	0241ffc4 	movi	r9,2047
10014ecc:	1081ffcc 	andi	r2,r2,2047
10014ed0:	2a14703a 	and	r10,r5,r8
10014ed4:	1a46703a 	and	r3,r3,r9
10014ed8:	3a10703a 	and	r8,r7,r8
10014edc:	280ad7fa 	srli	r5,r5,31
10014ee0:	380ed7fa 	srli	r7,r7,31
10014ee4:	12400b26 	beq	r2,r9,10014f14 <__gedf2+0x5c>
10014ee8:	1a401626 	beq	r3,r9,10014f44 <__gedf2+0x8c>
10014eec:	10000c1e 	bne	r2,zero,10014f20 <__gedf2+0x68>
10014ef0:	5112b03a 	or	r9,r10,r4
10014ef4:	4813003a 	cmpeq	r9,r9,zero
10014ef8:	4817883a 	mov	r11,r9
10014efc:	18000c1e 	bne	r3,zero,10014f30 <__gedf2+0x78>
10014f00:	4198b03a 	or	r12,r8,r6
10014f04:	60000a1e 	bne	r12,zero,10014f30 <__gedf2+0x78>
10014f08:	48001326 	beq	r9,zero,10014f58 <__gedf2+0xa0>
10014f0c:	0005883a 	mov	r2,zero
10014f10:	f800283a 	ret
10014f14:	5112b03a 	or	r9,r10,r4
10014f18:	4800191e 	bne	r9,zero,10014f80 <__gedf2+0xc8>
10014f1c:	18800926 	beq	r3,r2,10014f44 <__gedf2+0x8c>
10014f20:	18000b1e 	bne	r3,zero,10014f50 <__gedf2+0x98>
10014f24:	4192b03a 	or	r9,r8,r6
10014f28:	0017883a 	mov	r11,zero
10014f2c:	48000a26 	beq	r9,zero,10014f58 <__gedf2+0xa0>
10014f30:	39c03fcc 	andi	r7,r7,255
10014f34:	58000726 	beq	r11,zero,10014f54 <__gedf2+0x9c>
10014f38:	3800081e 	bne	r7,zero,10014f5c <__gedf2+0xa4>
10014f3c:	00bfffc4 	movi	r2,-1
10014f40:	f800283a 	ret
10014f44:	4192b03a 	or	r9,r8,r6
10014f48:	48000d1e 	bne	r9,zero,10014f80 <__gedf2+0xc8>
10014f4c:	103fe826 	beq	r2,zero,10014ef0 <__alt_data_end+0xf8014ef0>
10014f50:	39c03fcc 	andi	r7,r7,255
10014f54:	29c00326 	beq	r5,r7,10014f64 <__gedf2+0xac>
10014f58:	283ff81e 	bne	r5,zero,10014f3c <__alt_data_end+0xf8014f3c>
10014f5c:	00800044 	movi	r2,1
10014f60:	f800283a 	ret
10014f64:	18bffc16 	blt	r3,r2,10014f58 <__alt_data_end+0xf8014f58>
10014f68:	10c00316 	blt	r2,r3,10014f78 <__gedf2+0xc0>
10014f6c:	42bffa36 	bltu	r8,r10,10014f58 <__alt_data_end+0xf8014f58>
10014f70:	52000526 	beq	r10,r8,10014f88 <__gedf2+0xd0>
10014f74:	523fe52e 	bgeu	r10,r8,10014f0c <__alt_data_end+0xf8014f0c>
10014f78:	283ff026 	beq	r5,zero,10014f3c <__alt_data_end+0xf8014f3c>
10014f7c:	003ff706 	br	10014f5c <__alt_data_end+0xf8014f5c>
10014f80:	00bfff84 	movi	r2,-2
10014f84:	f800283a 	ret
10014f88:	313ff336 	bltu	r6,r4,10014f58 <__alt_data_end+0xf8014f58>
10014f8c:	21bfdf2e 	bgeu	r4,r6,10014f0c <__alt_data_end+0xf8014f0c>
10014f90:	283fea26 	beq	r5,zero,10014f3c <__alt_data_end+0xf8014f3c>
10014f94:	003ff106 	br	10014f5c <__alt_data_end+0xf8014f5c>

10014f98 <__ledf2>:
10014f98:	2804d53a 	srli	r2,r5,20
10014f9c:	3810d53a 	srli	r8,r7,20
10014fa0:	00c00434 	movhi	r3,16
10014fa4:	18ffffc4 	addi	r3,r3,-1
10014fa8:	0241ffc4 	movi	r9,2047
10014fac:	1081ffcc 	andi	r2,r2,2047
10014fb0:	28d4703a 	and	r10,r5,r3
10014fb4:	4250703a 	and	r8,r8,r9
10014fb8:	38c6703a 	and	r3,r7,r3
10014fbc:	280ad7fa 	srli	r5,r5,31
10014fc0:	380ed7fa 	srli	r7,r7,31
10014fc4:	12400b26 	beq	r2,r9,10014ff4 <__ledf2+0x5c>
10014fc8:	42401926 	beq	r8,r9,10015030 <__ledf2+0x98>
10014fcc:	10000c1e 	bne	r2,zero,10015000 <__ledf2+0x68>
10014fd0:	5112b03a 	or	r9,r10,r4
10014fd4:	4813003a 	cmpeq	r9,r9,zero
10014fd8:	4817883a 	mov	r11,r9
10014fdc:	40000f26 	beq	r8,zero,1001501c <__ledf2+0x84>
10014fe0:	39c03fcc 	andi	r7,r7,255
10014fe4:	58001826 	beq	r11,zero,10015048 <__ledf2+0xb0>
10014fe8:	38000a1e 	bne	r7,zero,10015014 <__ledf2+0x7c>
10014fec:	00bfffc4 	movi	r2,-1
10014ff0:	f800283a 	ret
10014ff4:	5112b03a 	or	r9,r10,r4
10014ff8:	48000f1e 	bne	r9,zero,10015038 <__ledf2+0xa0>
10014ffc:	40800c26 	beq	r8,r2,10015030 <__ledf2+0x98>
10015000:	4000101e 	bne	r8,zero,10015044 <__ledf2+0xac>
10015004:	1992b03a 	or	r9,r3,r6
10015008:	0017883a 	mov	r11,zero
1001500c:	483ff41e 	bne	r9,zero,10014fe0 <__alt_data_end+0xf8014fe0>
10015010:	283ff61e 	bne	r5,zero,10014fec <__alt_data_end+0xf8014fec>
10015014:	00800044 	movi	r2,1
10015018:	f800283a 	ret
1001501c:	1998b03a 	or	r12,r3,r6
10015020:	603fef1e 	bne	r12,zero,10014fe0 <__alt_data_end+0xf8014fe0>
10015024:	483ffa26 	beq	r9,zero,10015010 <__alt_data_end+0xf8015010>
10015028:	0005883a 	mov	r2,zero
1001502c:	f800283a 	ret
10015030:	1992b03a 	or	r9,r3,r6
10015034:	48000226 	beq	r9,zero,10015040 <__ledf2+0xa8>
10015038:	00800084 	movi	r2,2
1001503c:	f800283a 	ret
10015040:	103fe326 	beq	r2,zero,10014fd0 <__alt_data_end+0xf8014fd0>
10015044:	39c03fcc 	andi	r7,r7,255
10015048:	29fff11e 	bne	r5,r7,10015010 <__alt_data_end+0xf8015010>
1001504c:	40bff016 	blt	r8,r2,10015010 <__alt_data_end+0xf8015010>
10015050:	12000316 	blt	r2,r8,10015060 <__ledf2+0xc8>
10015054:	1abfee36 	bltu	r3,r10,10015010 <__alt_data_end+0xf8015010>
10015058:	50c00326 	beq	r10,r3,10015068 <__ledf2+0xd0>
1001505c:	50fff22e 	bgeu	r10,r3,10015028 <__alt_data_end+0xf8015028>
10015060:	283fe226 	beq	r5,zero,10014fec <__alt_data_end+0xf8014fec>
10015064:	003feb06 	br	10015014 <__alt_data_end+0xf8015014>
10015068:	313fe936 	bltu	r6,r4,10015010 <__alt_data_end+0xf8015010>
1001506c:	21bfee2e 	bgeu	r4,r6,10015028 <__alt_data_end+0xf8015028>
10015070:	283fde26 	beq	r5,zero,10014fec <__alt_data_end+0xf8014fec>
10015074:	003fe706 	br	10015014 <__alt_data_end+0xf8015014>

10015078 <__fixdfsi>:
10015078:	2806d53a 	srli	r3,r5,20
1001507c:	00800434 	movhi	r2,16
10015080:	10bfffc4 	addi	r2,r2,-1
10015084:	18c1ffcc 	andi	r3,r3,2047
10015088:	0180ff84 	movi	r6,1022
1001508c:	2884703a 	and	r2,r5,r2
10015090:	280ad7fa 	srli	r5,r5,31
10015094:	30c0130e 	bge	r6,r3,100150e4 <__fixdfsi+0x6c>
10015098:	01810744 	movi	r6,1053
1001509c:	30c00d16 	blt	r6,r3,100150d4 <__fixdfsi+0x5c>
100150a0:	01810cc4 	movi	r6,1075
100150a4:	30cdc83a 	sub	r6,r6,r3
100150a8:	01c007c4 	movi	r7,31
100150ac:	10800434 	orhi	r2,r2,16
100150b0:	39800e0e 	bge	r7,r6,100150ec <__fixdfsi+0x74>
100150b4:	010104c4 	movi	r4,1043
100150b8:	20c7c83a 	sub	r3,r4,r3
100150bc:	10c6d83a 	srl	r3,r2,r3
100150c0:	29403fcc 	andi	r5,r5,255
100150c4:	0145c83a 	sub	r2,zero,r5
100150c8:	1884f03a 	xor	r2,r3,r2
100150cc:	1145883a 	add	r2,r2,r5
100150d0:	f800283a 	ret
100150d4:	00a00034 	movhi	r2,32768
100150d8:	10bfffc4 	addi	r2,r2,-1
100150dc:	2885883a 	add	r2,r5,r2
100150e0:	f800283a 	ret
100150e4:	0005883a 	mov	r2,zero
100150e8:	f800283a 	ret
100150ec:	18fefb44 	addi	r3,r3,-1043
100150f0:	2188d83a 	srl	r4,r4,r6
100150f4:	10c6983a 	sll	r3,r2,r3
100150f8:	20c6b03a 	or	r3,r4,r3
100150fc:	003ff006 	br	100150c0 <__alt_data_end+0xf80150c0>

10015100 <__floatsidf>:
10015100:	defffd04 	addi	sp,sp,-12
10015104:	dc400115 	stw	r17,4(sp)
10015108:	dfc00215 	stw	ra,8(sp)
1001510c:	dc000015 	stw	r16,0(sp)
10015110:	2023883a 	mov	r17,r4
10015114:	20001426 	beq	r4,zero,10015168 <__floatsidf+0x68>
10015118:	2020d7fa 	srli	r16,r4,31
1001511c:	80000126 	beq	r16,zero,10015124 <__floatsidf+0x24>
10015120:	0123c83a 	sub	r17,zero,r4
10015124:	8809883a 	mov	r4,r17
10015128:	0009a180 	call	10009a18 <__clzsi2>
1001512c:	01410784 	movi	r5,1054
10015130:	00c00284 	movi	r3,10
10015134:	288bc83a 	sub	r5,r5,r2
10015138:	18801c16 	blt	r3,r2,100151ac <__floatsidf+0xac>
1001513c:	00c002c4 	movi	r3,11
10015140:	1887c83a 	sub	r3,r3,r2
10015144:	88c8d83a 	srl	r4,r17,r3
10015148:	00c00434 	movhi	r3,16
1001514c:	18ffffc4 	addi	r3,r3,-1
10015150:	10800544 	addi	r2,r2,21
10015154:	20c8703a 	and	r4,r4,r3
10015158:	8884983a 	sll	r2,r17,r2
1001515c:	28c1ffcc 	andi	r3,r5,2047
10015160:	800d883a 	mov	r6,r16
10015164:	00000406 	br	10015178 <__floatsidf+0x78>
10015168:	000d883a 	mov	r6,zero
1001516c:	0007883a 	mov	r3,zero
10015170:	0009883a 	mov	r4,zero
10015174:	0005883a 	mov	r2,zero
10015178:	180a953a 	slli	r5,r3,20
1001517c:	31803fcc 	andi	r6,r6,255
10015180:	00c00434 	movhi	r3,16
10015184:	300c97fa 	slli	r6,r6,31
10015188:	18ffffc4 	addi	r3,r3,-1
1001518c:	20c6703a 	and	r3,r4,r3
10015190:	1946b03a 	or	r3,r3,r5
10015194:	1986b03a 	or	r3,r3,r6
10015198:	dfc00217 	ldw	ra,8(sp)
1001519c:	dc400117 	ldw	r17,4(sp)
100151a0:	dc000017 	ldw	r16,0(sp)
100151a4:	dec00304 	addi	sp,sp,12
100151a8:	f800283a 	ret
100151ac:	10fffd44 	addi	r3,r2,-11
100151b0:	88c8983a 	sll	r4,r17,r3
100151b4:	00800434 	movhi	r2,16
100151b8:	10bfffc4 	addi	r2,r2,-1
100151bc:	2088703a 	and	r4,r4,r2
100151c0:	28c1ffcc 	andi	r3,r5,2047
100151c4:	800d883a 	mov	r6,r16
100151c8:	0005883a 	mov	r2,zero
100151cc:	003fea06 	br	10015178 <__alt_data_end+0xf8015178>

100151d0 <__floatunsidf>:
100151d0:	defffe04 	addi	sp,sp,-8
100151d4:	dc000015 	stw	r16,0(sp)
100151d8:	dfc00115 	stw	ra,4(sp)
100151dc:	2021883a 	mov	r16,r4
100151e0:	20001026 	beq	r4,zero,10015224 <__floatunsidf+0x54>
100151e4:	0009a180 	call	10009a18 <__clzsi2>
100151e8:	01410784 	movi	r5,1054
100151ec:	100d883a 	mov	r6,r2
100151f0:	288bc83a 	sub	r5,r5,r2
100151f4:	00800284 	movi	r2,10
100151f8:	11801616 	blt	r2,r6,10015254 <__floatunsidf+0x84>
100151fc:	008002c4 	movi	r2,11
10015200:	1185c83a 	sub	r2,r2,r6
10015204:	8084d83a 	srl	r2,r16,r2
10015208:	00c00434 	movhi	r3,16
1001520c:	31c00544 	addi	r7,r6,21
10015210:	18ffffc4 	addi	r3,r3,-1
10015214:	81e0983a 	sll	r16,r16,r7
10015218:	10cc703a 	and	r6,r2,r3
1001521c:	2941ffcc 	andi	r5,r5,2047
10015220:	00000206 	br	1001522c <__floatunsidf+0x5c>
10015224:	000b883a 	mov	r5,zero
10015228:	000d883a 	mov	r6,zero
1001522c:	280a953a 	slli	r5,r5,20
10015230:	00c00434 	movhi	r3,16
10015234:	18ffffc4 	addi	r3,r3,-1
10015238:	30c6703a 	and	r3,r6,r3
1001523c:	8005883a 	mov	r2,r16
10015240:	1946b03a 	or	r3,r3,r5
10015244:	dfc00117 	ldw	ra,4(sp)
10015248:	dc000017 	ldw	r16,0(sp)
1001524c:	dec00204 	addi	sp,sp,8
10015250:	f800283a 	ret
10015254:	31bffd44 	addi	r6,r6,-11
10015258:	818c983a 	sll	r6,r16,r6
1001525c:	00800434 	movhi	r2,16
10015260:	10bfffc4 	addi	r2,r2,-1
10015264:	2941ffcc 	andi	r5,r5,2047
10015268:	0021883a 	mov	r16,zero
1001526c:	308c703a 	and	r6,r6,r2
10015270:	003fee06 	br	1001522c <__alt_data_end+0xf801522c>

10015274 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10015274:	defffe04 	addi	sp,sp,-8
10015278:	dfc00115 	stw	ra,4(sp)
1001527c:	df000015 	stw	fp,0(sp)
10015280:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10015284:	008400b4 	movhi	r2,4098
10015288:	10ae9404 	addi	r2,r2,-17840
1001528c:	10800017 	ldw	r2,0(r2)
10015290:	10000526 	beq	r2,zero,100152a8 <alt_get_errno+0x34>
10015294:	008400b4 	movhi	r2,4098
10015298:	10ae9404 	addi	r2,r2,-17840
1001529c:	10800017 	ldw	r2,0(r2)
100152a0:	103ee83a 	callr	r2
100152a4:	00000206 	br	100152b0 <alt_get_errno+0x3c>
100152a8:	008400b4 	movhi	r2,4098
100152ac:	10b55b04 	addi	r2,r2,-10900
}
100152b0:	e037883a 	mov	sp,fp
100152b4:	dfc00117 	ldw	ra,4(sp)
100152b8:	df000017 	ldw	fp,0(sp)
100152bc:	dec00204 	addi	sp,sp,8
100152c0:	f800283a 	ret

100152c4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
100152c4:	defffb04 	addi	sp,sp,-20
100152c8:	dfc00415 	stw	ra,16(sp)
100152cc:	df000315 	stw	fp,12(sp)
100152d0:	df000304 	addi	fp,sp,12
100152d4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
100152d8:	e0bfff17 	ldw	r2,-4(fp)
100152dc:	10000816 	blt	r2,zero,10015300 <close+0x3c>
100152e0:	e13fff17 	ldw	r4,-4(fp)
100152e4:	01400304 	movi	r5,12
100152e8:	00074c40 	call	100074c4 <__mulsi3>
100152ec:	1007883a 	mov	r3,r2
100152f0:	008400b4 	movhi	r2,4098
100152f4:	10aa1104 	addi	r2,r2,-22460
100152f8:	1885883a 	add	r2,r3,r2
100152fc:	00000106 	br	10015304 <close+0x40>
10015300:	0005883a 	mov	r2,zero
10015304:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10015308:	e0bffd17 	ldw	r2,-12(fp)
1001530c:	10001926 	beq	r2,zero,10015374 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10015310:	e0bffd17 	ldw	r2,-12(fp)
10015314:	10800017 	ldw	r2,0(r2)
10015318:	10800417 	ldw	r2,16(r2)
1001531c:	10000626 	beq	r2,zero,10015338 <close+0x74>
10015320:	e0bffd17 	ldw	r2,-12(fp)
10015324:	10800017 	ldw	r2,0(r2)
10015328:	10800417 	ldw	r2,16(r2)
1001532c:	e13ffd17 	ldw	r4,-12(fp)
10015330:	103ee83a 	callr	r2
10015334:	00000106 	br	1001533c <close+0x78>
10015338:	0005883a 	mov	r2,zero
1001533c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10015340:	e13fff17 	ldw	r4,-4(fp)
10015344:	00159f80 	call	100159f8 <alt_release_fd>
    if (rval < 0)
10015348:	e0bffe17 	ldw	r2,-8(fp)
1001534c:	1000070e 	bge	r2,zero,1001536c <close+0xa8>
    {
      ALT_ERRNO = -rval;
10015350:	00152740 	call	10015274 <alt_get_errno>
10015354:	1007883a 	mov	r3,r2
10015358:	e0bffe17 	ldw	r2,-8(fp)
1001535c:	0085c83a 	sub	r2,zero,r2
10015360:	18800015 	stw	r2,0(r3)
      return -1;
10015364:	00bfffc4 	movi	r2,-1
10015368:	00000706 	br	10015388 <close+0xc4>
    }
    return 0;
1001536c:	0005883a 	mov	r2,zero
10015370:	00000506 	br	10015388 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10015374:	00152740 	call	10015274 <alt_get_errno>
10015378:	1007883a 	mov	r3,r2
1001537c:	00801444 	movi	r2,81
10015380:	18800015 	stw	r2,0(r3)
    return -1;
10015384:	00bfffc4 	movi	r2,-1
  }
}
10015388:	e037883a 	mov	sp,fp
1001538c:	dfc00117 	ldw	ra,4(sp)
10015390:	df000017 	ldw	fp,0(sp)
10015394:	dec00204 	addi	sp,sp,8
10015398:	f800283a 	ret

1001539c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1001539c:	defffc04 	addi	sp,sp,-16
100153a0:	df000315 	stw	fp,12(sp)
100153a4:	df000304 	addi	fp,sp,12
100153a8:	e13ffd15 	stw	r4,-12(fp)
100153ac:	e17ffe15 	stw	r5,-8(fp)
100153b0:	e1bfff15 	stw	r6,-4(fp)
  return len;
100153b4:	e0bfff17 	ldw	r2,-4(fp)
}
100153b8:	e037883a 	mov	sp,fp
100153bc:	df000017 	ldw	fp,0(sp)
100153c0:	dec00104 	addi	sp,sp,4
100153c4:	f800283a 	ret

100153c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100153c8:	defffe04 	addi	sp,sp,-8
100153cc:	dfc00115 	stw	ra,4(sp)
100153d0:	df000015 	stw	fp,0(sp)
100153d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100153d8:	008400b4 	movhi	r2,4098
100153dc:	10ae9404 	addi	r2,r2,-17840
100153e0:	10800017 	ldw	r2,0(r2)
100153e4:	10000526 	beq	r2,zero,100153fc <alt_get_errno+0x34>
100153e8:	008400b4 	movhi	r2,4098
100153ec:	10ae9404 	addi	r2,r2,-17840
100153f0:	10800017 	ldw	r2,0(r2)
100153f4:	103ee83a 	callr	r2
100153f8:	00000206 	br	10015404 <alt_get_errno+0x3c>
100153fc:	008400b4 	movhi	r2,4098
10015400:	10b55b04 	addi	r2,r2,-10900
}
10015404:	e037883a 	mov	sp,fp
10015408:	dfc00117 	ldw	ra,4(sp)
1001540c:	df000017 	ldw	fp,0(sp)
10015410:	dec00204 	addi	sp,sp,8
10015414:	f800283a 	ret

10015418 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10015418:	defffb04 	addi	sp,sp,-20
1001541c:	dfc00415 	stw	ra,16(sp)
10015420:	df000315 	stw	fp,12(sp)
10015424:	df000304 	addi	fp,sp,12
10015428:	e13ffe15 	stw	r4,-8(fp)
1001542c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10015430:	e0bffe17 	ldw	r2,-8(fp)
10015434:	10000816 	blt	r2,zero,10015458 <fstat+0x40>
10015438:	e13ffe17 	ldw	r4,-8(fp)
1001543c:	01400304 	movi	r5,12
10015440:	00074c40 	call	100074c4 <__mulsi3>
10015444:	1007883a 	mov	r3,r2
10015448:	008400b4 	movhi	r2,4098
1001544c:	10aa1104 	addi	r2,r2,-22460
10015450:	1885883a 	add	r2,r3,r2
10015454:	00000106 	br	1001545c <fstat+0x44>
10015458:	0005883a 	mov	r2,zero
1001545c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10015460:	e0bffd17 	ldw	r2,-12(fp)
10015464:	10001026 	beq	r2,zero,100154a8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10015468:	e0bffd17 	ldw	r2,-12(fp)
1001546c:	10800017 	ldw	r2,0(r2)
10015470:	10800817 	ldw	r2,32(r2)
10015474:	10000726 	beq	r2,zero,10015494 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10015478:	e0bffd17 	ldw	r2,-12(fp)
1001547c:	10800017 	ldw	r2,0(r2)
10015480:	10800817 	ldw	r2,32(r2)
10015484:	e13ffd17 	ldw	r4,-12(fp)
10015488:	e17fff17 	ldw	r5,-4(fp)
1001548c:	103ee83a 	callr	r2
10015490:	00000a06 	br	100154bc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10015494:	e0bfff17 	ldw	r2,-4(fp)
10015498:	00c80004 	movi	r3,8192
1001549c:	10c00115 	stw	r3,4(r2)
      return 0;
100154a0:	0005883a 	mov	r2,zero
100154a4:	00000506 	br	100154bc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100154a8:	00153c80 	call	100153c8 <alt_get_errno>
100154ac:	1007883a 	mov	r3,r2
100154b0:	00801444 	movi	r2,81
100154b4:	18800015 	stw	r2,0(r3)
    return -1;
100154b8:	00bfffc4 	movi	r2,-1
  }
}
100154bc:	e037883a 	mov	sp,fp
100154c0:	dfc00117 	ldw	ra,4(sp)
100154c4:	df000017 	ldw	fp,0(sp)
100154c8:	dec00204 	addi	sp,sp,8
100154cc:	f800283a 	ret

100154d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100154d0:	defffe04 	addi	sp,sp,-8
100154d4:	dfc00115 	stw	ra,4(sp)
100154d8:	df000015 	stw	fp,0(sp)
100154dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100154e0:	008400b4 	movhi	r2,4098
100154e4:	10ae9404 	addi	r2,r2,-17840
100154e8:	10800017 	ldw	r2,0(r2)
100154ec:	10000526 	beq	r2,zero,10015504 <alt_get_errno+0x34>
100154f0:	008400b4 	movhi	r2,4098
100154f4:	10ae9404 	addi	r2,r2,-17840
100154f8:	10800017 	ldw	r2,0(r2)
100154fc:	103ee83a 	callr	r2
10015500:	00000206 	br	1001550c <alt_get_errno+0x3c>
10015504:	008400b4 	movhi	r2,4098
10015508:	10b55b04 	addi	r2,r2,-10900
}
1001550c:	e037883a 	mov	sp,fp
10015510:	dfc00117 	ldw	ra,4(sp)
10015514:	df000017 	ldw	fp,0(sp)
10015518:	dec00204 	addi	sp,sp,8
1001551c:	f800283a 	ret

10015520 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10015520:	deffed04 	addi	sp,sp,-76
10015524:	dfc01215 	stw	ra,72(sp)
10015528:	df001115 	stw	fp,68(sp)
1001552c:	df001104 	addi	fp,sp,68
10015530:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10015534:	e0bfff17 	ldw	r2,-4(fp)
10015538:	10000816 	blt	r2,zero,1001555c <isatty+0x3c>
1001553c:	e13fff17 	ldw	r4,-4(fp)
10015540:	01400304 	movi	r5,12
10015544:	00074c40 	call	100074c4 <__mulsi3>
10015548:	1007883a 	mov	r3,r2
1001554c:	008400b4 	movhi	r2,4098
10015550:	10aa1104 	addi	r2,r2,-22460
10015554:	1885883a 	add	r2,r3,r2
10015558:	00000106 	br	10015560 <isatty+0x40>
1001555c:	0005883a 	mov	r2,zero
10015560:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10015564:	e0bfef17 	ldw	r2,-68(fp)
10015568:	10000e26 	beq	r2,zero,100155a4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1001556c:	e0bfef17 	ldw	r2,-68(fp)
10015570:	10800017 	ldw	r2,0(r2)
10015574:	10800817 	ldw	r2,32(r2)
10015578:	1000021e 	bne	r2,zero,10015584 <isatty+0x64>
    {
      return 1;
1001557c:	00800044 	movi	r2,1
10015580:	00000d06 	br	100155b8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10015584:	e0bff004 	addi	r2,fp,-64
10015588:	e13fff17 	ldw	r4,-4(fp)
1001558c:	100b883a 	mov	r5,r2
10015590:	00154180 	call	10015418 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10015594:	e0bff117 	ldw	r2,-60(fp)
10015598:	10880020 	cmpeqi	r2,r2,8192
1001559c:	10803fcc 	andi	r2,r2,255
100155a0:	00000506 	br	100155b8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100155a4:	00154d00 	call	100154d0 <alt_get_errno>
100155a8:	1007883a 	mov	r3,r2
100155ac:	00801444 	movi	r2,81
100155b0:	18800015 	stw	r2,0(r3)
    return 0;
100155b4:	0005883a 	mov	r2,zero
  }
}
100155b8:	e037883a 	mov	sp,fp
100155bc:	dfc00117 	ldw	ra,4(sp)
100155c0:	df000017 	ldw	fp,0(sp)
100155c4:	dec00204 	addi	sp,sp,8
100155c8:	f800283a 	ret

100155cc <alt_load_section>:
100155cc:	defffc04 	addi	sp,sp,-16
100155d0:	df000315 	stw	fp,12(sp)
100155d4:	df000304 	addi	fp,sp,12
100155d8:	e13ffd15 	stw	r4,-12(fp)
100155dc:	e17ffe15 	stw	r5,-8(fp)
100155e0:	e1bfff15 	stw	r6,-4(fp)
100155e4:	e0fffe17 	ldw	r3,-8(fp)
100155e8:	e0bffd17 	ldw	r2,-12(fp)
100155ec:	18800c26 	beq	r3,r2,10015620 <alt_load_section+0x54>
100155f0:	00000806 	br	10015614 <alt_load_section+0x48>
100155f4:	e0bffe17 	ldw	r2,-8(fp)
100155f8:	10c00104 	addi	r3,r2,4
100155fc:	e0fffe15 	stw	r3,-8(fp)
10015600:	e0fffd17 	ldw	r3,-12(fp)
10015604:	19000104 	addi	r4,r3,4
10015608:	e13ffd15 	stw	r4,-12(fp)
1001560c:	18c00017 	ldw	r3,0(r3)
10015610:	10c00015 	stw	r3,0(r2)
10015614:	e0fffe17 	ldw	r3,-8(fp)
10015618:	e0bfff17 	ldw	r2,-4(fp)
1001561c:	18bff51e 	bne	r3,r2,100155f4 <__alt_data_end+0xf80155f4>
10015620:	0001883a 	nop
10015624:	e037883a 	mov	sp,fp
10015628:	df000017 	ldw	fp,0(sp)
1001562c:	dec00104 	addi	sp,sp,4
10015630:	f800283a 	ret

10015634 <alt_load>:
10015634:	defffe04 	addi	sp,sp,-8
10015638:	dfc00115 	stw	ra,4(sp)
1001563c:	df000015 	stw	fp,0(sp)
10015640:	d839883a 	mov	fp,sp
10015644:	018400b4 	movhi	r6,4098
10015648:	31ae9904 	addi	r6,r6,-17820
1001564c:	014400b4 	movhi	r5,4098
10015650:	2967de04 	addi	r5,r5,-24712
10015654:	010400b4 	movhi	r4,4098
10015658:	212e9904 	addi	r4,r4,-17820
1001565c:	00155cc0 	call	100155cc <alt_load_section>
10015660:	01840034 	movhi	r6,4096
10015664:	31806f04 	addi	r6,r6,444
10015668:	01440034 	movhi	r5,4096
1001566c:	29400804 	addi	r5,r5,32
10015670:	01040034 	movhi	r4,4096
10015674:	21000804 	addi	r4,r4,32
10015678:	00155cc0 	call	100155cc <alt_load_section>
1001567c:	018400b4 	movhi	r6,4098
10015680:	31a7de04 	addi	r6,r6,-24712
10015684:	01440074 	movhi	r5,4097
10015688:	295eb404 	addi	r5,r5,31440
1001568c:	01040074 	movhi	r4,4097
10015690:	211eb404 	addi	r4,r4,31440
10015694:	00155cc0 	call	100155cc <alt_load_section>
10015698:	0016a400 	call	10016a40 <alt_dcache_flush_all>
1001569c:	0016c100 	call	10016c10 <alt_icache_flush_all>
100156a0:	0001883a 	nop
100156a4:	e037883a 	mov	sp,fp
100156a8:	dfc00117 	ldw	ra,4(sp)
100156ac:	df000017 	ldw	fp,0(sp)
100156b0:	dec00204 	addi	sp,sp,8
100156b4:	f800283a 	ret

100156b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100156b8:	defffe04 	addi	sp,sp,-8
100156bc:	dfc00115 	stw	ra,4(sp)
100156c0:	df000015 	stw	fp,0(sp)
100156c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100156c8:	008400b4 	movhi	r2,4098
100156cc:	10ae9404 	addi	r2,r2,-17840
100156d0:	10800017 	ldw	r2,0(r2)
100156d4:	10000526 	beq	r2,zero,100156ec <alt_get_errno+0x34>
100156d8:	008400b4 	movhi	r2,4098
100156dc:	10ae9404 	addi	r2,r2,-17840
100156e0:	10800017 	ldw	r2,0(r2)
100156e4:	103ee83a 	callr	r2
100156e8:	00000206 	br	100156f4 <alt_get_errno+0x3c>
100156ec:	008400b4 	movhi	r2,4098
100156f0:	10b55b04 	addi	r2,r2,-10900
}
100156f4:	e037883a 	mov	sp,fp
100156f8:	dfc00117 	ldw	ra,4(sp)
100156fc:	df000017 	ldw	fp,0(sp)
10015700:	dec00204 	addi	sp,sp,8
10015704:	f800283a 	ret

10015708 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10015708:	defff904 	addi	sp,sp,-28
1001570c:	dfc00615 	stw	ra,24(sp)
10015710:	df000515 	stw	fp,20(sp)
10015714:	df000504 	addi	fp,sp,20
10015718:	e13ffd15 	stw	r4,-12(fp)
1001571c:	e17ffe15 	stw	r5,-8(fp)
10015720:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10015724:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10015728:	e0bffd17 	ldw	r2,-12(fp)
1001572c:	10000816 	blt	r2,zero,10015750 <lseek+0x48>
10015730:	e13ffd17 	ldw	r4,-12(fp)
10015734:	01400304 	movi	r5,12
10015738:	00074c40 	call	100074c4 <__mulsi3>
1001573c:	1007883a 	mov	r3,r2
10015740:	008400b4 	movhi	r2,4098
10015744:	10aa1104 	addi	r2,r2,-22460
10015748:	1885883a 	add	r2,r3,r2
1001574c:	00000106 	br	10015754 <lseek+0x4c>
10015750:	0005883a 	mov	r2,zero
10015754:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10015758:	e0bffc17 	ldw	r2,-16(fp)
1001575c:	10001026 	beq	r2,zero,100157a0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10015760:	e0bffc17 	ldw	r2,-16(fp)
10015764:	10800017 	ldw	r2,0(r2)
10015768:	10800717 	ldw	r2,28(r2)
1001576c:	10000926 	beq	r2,zero,10015794 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10015770:	e0bffc17 	ldw	r2,-16(fp)
10015774:	10800017 	ldw	r2,0(r2)
10015778:	10800717 	ldw	r2,28(r2)
1001577c:	e13ffc17 	ldw	r4,-16(fp)
10015780:	e17ffe17 	ldw	r5,-8(fp)
10015784:	e1bfff17 	ldw	r6,-4(fp)
10015788:	103ee83a 	callr	r2
1001578c:	e0bffb15 	stw	r2,-20(fp)
10015790:	00000506 	br	100157a8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10015794:	00bfde84 	movi	r2,-134
10015798:	e0bffb15 	stw	r2,-20(fp)
1001579c:	00000206 	br	100157a8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
100157a0:	00bfebc4 	movi	r2,-81
100157a4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
100157a8:	e0bffb17 	ldw	r2,-20(fp)
100157ac:	1000070e 	bge	r2,zero,100157cc <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
100157b0:	00156b80 	call	100156b8 <alt_get_errno>
100157b4:	1007883a 	mov	r3,r2
100157b8:	e0bffb17 	ldw	r2,-20(fp)
100157bc:	0085c83a 	sub	r2,zero,r2
100157c0:	18800015 	stw	r2,0(r3)
    rc = -1;
100157c4:	00bfffc4 	movi	r2,-1
100157c8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
100157cc:	e0bffb17 	ldw	r2,-20(fp)
}
100157d0:	e037883a 	mov	sp,fp
100157d4:	dfc00117 	ldw	ra,4(sp)
100157d8:	df000017 	ldw	fp,0(sp)
100157dc:	dec00204 	addi	sp,sp,8
100157e0:	f800283a 	ret

100157e4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
100157e4:	defffd04 	addi	sp,sp,-12
100157e8:	dfc00215 	stw	ra,8(sp)
100157ec:	df000115 	stw	fp,4(sp)
100157f0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
100157f4:	0009883a 	mov	r4,zero
100157f8:	0015ce00 	call	10015ce0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
100157fc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10015800:	0015d140 	call	10015d14 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10015804:	010400b4 	movhi	r4,4098
10015808:	2127d404 	addi	r4,r4,-24752
1001580c:	014400b4 	movhi	r5,4098
10015810:	2967d404 	addi	r5,r5,-24752
10015814:	018400b4 	movhi	r6,4098
10015818:	31a7d404 	addi	r6,r6,-24752
1001581c:	0016fdc0 	call	10016fdc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10015820:	0016b500 	call	10016b50 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10015824:	01040074 	movhi	r4,4097
10015828:	211aec04 	addi	r4,r4,27568
1001582c:	001772c0 	call	1001772c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10015830:	d126d317 	ldw	r4,-25780(gp)
10015834:	d0e6d417 	ldw	r3,-25776(gp)
10015838:	d0a6d517 	ldw	r2,-25772(gp)
1001583c:	180b883a 	mov	r5,r3
10015840:	100d883a 	mov	r6,r2
10015844:	00003340 	call	10000334 <main>
10015848:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1001584c:	01000044 	movi	r4,1
10015850:	00152c40 	call	100152c4 <close>
  exit (result);
10015854:	e13fff17 	ldw	r4,-4(fp)
10015858:	00177400 	call	10017740 <exit>

1001585c <__malloc_lock>:
1001585c:	defffe04 	addi	sp,sp,-8
10015860:	df000115 	stw	fp,4(sp)
10015864:	df000104 	addi	fp,sp,4
10015868:	e13fff15 	stw	r4,-4(fp)
1001586c:	0001883a 	nop
10015870:	e037883a 	mov	sp,fp
10015874:	df000017 	ldw	fp,0(sp)
10015878:	dec00104 	addi	sp,sp,4
1001587c:	f800283a 	ret

10015880 <__malloc_unlock>:
10015880:	defffe04 	addi	sp,sp,-8
10015884:	df000115 	stw	fp,4(sp)
10015888:	df000104 	addi	fp,sp,4
1001588c:	e13fff15 	stw	r4,-4(fp)
10015890:	0001883a 	nop
10015894:	e037883a 	mov	sp,fp
10015898:	df000017 	ldw	fp,0(sp)
1001589c:	dec00104 	addi	sp,sp,4
100158a0:	f800283a 	ret

100158a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100158a4:	defffe04 	addi	sp,sp,-8
100158a8:	dfc00115 	stw	ra,4(sp)
100158ac:	df000015 	stw	fp,0(sp)
100158b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100158b4:	008400b4 	movhi	r2,4098
100158b8:	10ae9404 	addi	r2,r2,-17840
100158bc:	10800017 	ldw	r2,0(r2)
100158c0:	10000526 	beq	r2,zero,100158d8 <alt_get_errno+0x34>
100158c4:	008400b4 	movhi	r2,4098
100158c8:	10ae9404 	addi	r2,r2,-17840
100158cc:	10800017 	ldw	r2,0(r2)
100158d0:	103ee83a 	callr	r2
100158d4:	00000206 	br	100158e0 <alt_get_errno+0x3c>
100158d8:	008400b4 	movhi	r2,4098
100158dc:	10b55b04 	addi	r2,r2,-10900
}
100158e0:	e037883a 	mov	sp,fp
100158e4:	dfc00117 	ldw	ra,4(sp)
100158e8:	df000017 	ldw	fp,0(sp)
100158ec:	dec00204 	addi	sp,sp,8
100158f0:	f800283a 	ret

100158f4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
100158f4:	defff904 	addi	sp,sp,-28
100158f8:	dfc00615 	stw	ra,24(sp)
100158fc:	df000515 	stw	fp,20(sp)
10015900:	df000504 	addi	fp,sp,20
10015904:	e13ffd15 	stw	r4,-12(fp)
10015908:	e17ffe15 	stw	r5,-8(fp)
1001590c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10015910:	e0bffd17 	ldw	r2,-12(fp)
10015914:	10000816 	blt	r2,zero,10015938 <read+0x44>
10015918:	e13ffd17 	ldw	r4,-12(fp)
1001591c:	01400304 	movi	r5,12
10015920:	00074c40 	call	100074c4 <__mulsi3>
10015924:	1007883a 	mov	r3,r2
10015928:	008400b4 	movhi	r2,4098
1001592c:	10aa1104 	addi	r2,r2,-22460
10015930:	1885883a 	add	r2,r3,r2
10015934:	00000106 	br	1001593c <read+0x48>
10015938:	0005883a 	mov	r2,zero
1001593c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10015940:	e0bffb17 	ldw	r2,-20(fp)
10015944:	10002226 	beq	r2,zero,100159d0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10015948:	e0bffb17 	ldw	r2,-20(fp)
1001594c:	10800217 	ldw	r2,8(r2)
10015950:	108000cc 	andi	r2,r2,3
10015954:	10800060 	cmpeqi	r2,r2,1
10015958:	1000181e 	bne	r2,zero,100159bc <read+0xc8>
        (fd->dev->read))
1001595c:	e0bffb17 	ldw	r2,-20(fp)
10015960:	10800017 	ldw	r2,0(r2)
10015964:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10015968:	10001426 	beq	r2,zero,100159bc <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1001596c:	e0bffb17 	ldw	r2,-20(fp)
10015970:	10800017 	ldw	r2,0(r2)
10015974:	10800517 	ldw	r2,20(r2)
10015978:	e0ffff17 	ldw	r3,-4(fp)
1001597c:	e13ffb17 	ldw	r4,-20(fp)
10015980:	e17ffe17 	ldw	r5,-8(fp)
10015984:	180d883a 	mov	r6,r3
10015988:	103ee83a 	callr	r2
1001598c:	e0bffc15 	stw	r2,-16(fp)
10015990:	e0bffc17 	ldw	r2,-16(fp)
10015994:	1000070e 	bge	r2,zero,100159b4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
10015998:	00158a40 	call	100158a4 <alt_get_errno>
1001599c:	1007883a 	mov	r3,r2
100159a0:	e0bffc17 	ldw	r2,-16(fp)
100159a4:	0085c83a 	sub	r2,zero,r2
100159a8:	18800015 	stw	r2,0(r3)
          return -1;
100159ac:	00bfffc4 	movi	r2,-1
100159b0:	00000c06 	br	100159e4 <read+0xf0>
        }
        return rval;
100159b4:	e0bffc17 	ldw	r2,-16(fp)
100159b8:	00000a06 	br	100159e4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
100159bc:	00158a40 	call	100158a4 <alt_get_errno>
100159c0:	1007883a 	mov	r3,r2
100159c4:	00800344 	movi	r2,13
100159c8:	18800015 	stw	r2,0(r3)
100159cc:	00000406 	br	100159e0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
100159d0:	00158a40 	call	100158a4 <alt_get_errno>
100159d4:	1007883a 	mov	r3,r2
100159d8:	00801444 	movi	r2,81
100159dc:	18800015 	stw	r2,0(r3)
  }
  return -1;
100159e0:	00bfffc4 	movi	r2,-1
}
100159e4:	e037883a 	mov	sp,fp
100159e8:	dfc00117 	ldw	ra,4(sp)
100159ec:	df000017 	ldw	fp,0(sp)
100159f0:	dec00204 	addi	sp,sp,8
100159f4:	f800283a 	ret

100159f8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
100159f8:	defffc04 	addi	sp,sp,-16
100159fc:	dfc00315 	stw	ra,12(sp)
10015a00:	df000215 	stw	fp,8(sp)
10015a04:	dc000115 	stw	r16,4(sp)
10015a08:	df000204 	addi	fp,sp,8
10015a0c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10015a10:	e0bffe17 	ldw	r2,-8(fp)
10015a14:	108000d0 	cmplti	r2,r2,3
10015a18:	1000111e 	bne	r2,zero,10015a60 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10015a1c:	040400b4 	movhi	r16,4098
10015a20:	842a1104 	addi	r16,r16,-22460
10015a24:	e0bffe17 	ldw	r2,-8(fp)
10015a28:	1009883a 	mov	r4,r2
10015a2c:	01400304 	movi	r5,12
10015a30:	00074c40 	call	100074c4 <__mulsi3>
10015a34:	8085883a 	add	r2,r16,r2
10015a38:	10800204 	addi	r2,r2,8
10015a3c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10015a40:	040400b4 	movhi	r16,4098
10015a44:	842a1104 	addi	r16,r16,-22460
10015a48:	e0bffe17 	ldw	r2,-8(fp)
10015a4c:	1009883a 	mov	r4,r2
10015a50:	01400304 	movi	r5,12
10015a54:	00074c40 	call	100074c4 <__mulsi3>
10015a58:	8085883a 	add	r2,r16,r2
10015a5c:	10000015 	stw	zero,0(r2)
  }
}
10015a60:	e6ffff04 	addi	sp,fp,-4
10015a64:	dfc00217 	ldw	ra,8(sp)
10015a68:	df000117 	ldw	fp,4(sp)
10015a6c:	dc000017 	ldw	r16,0(sp)
10015a70:	dec00304 	addi	sp,sp,12
10015a74:	f800283a 	ret

10015a78 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10015a78:	defff904 	addi	sp,sp,-28
10015a7c:	df000615 	stw	fp,24(sp)
10015a80:	df000604 	addi	fp,sp,24
10015a84:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10015a88:	0005303a 	rdctl	r2,status
10015a8c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10015a90:	e0fffc17 	ldw	r3,-16(fp)
10015a94:	00bfff84 	movi	r2,-2
10015a98:	1884703a 	and	r2,r3,r2
10015a9c:	1001703a 	wrctl	status,r2
  
  return context;
10015aa0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10015aa4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10015aa8:	d0a00c17 	ldw	r2,-32720(gp)
10015aac:	10c000c4 	addi	r3,r2,3
10015ab0:	00bfff04 	movi	r2,-4
10015ab4:	1884703a 	and	r2,r3,r2
10015ab8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10015abc:	d0e00c17 	ldw	r3,-32720(gp)
10015ac0:	e0bfff17 	ldw	r2,-4(fp)
10015ac4:	1887883a 	add	r3,r3,r2
10015ac8:	00860034 	movhi	r2,6144
10015acc:	10800004 	addi	r2,r2,0
10015ad0:	10c0062e 	bgeu	r2,r3,10015aec <sbrk+0x74>
10015ad4:	e0bffa17 	ldw	r2,-24(fp)
10015ad8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10015adc:	e0bffd17 	ldw	r2,-12(fp)
10015ae0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10015ae4:	00bfffc4 	movi	r2,-1
10015ae8:	00000b06 	br	10015b18 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10015aec:	d0a00c17 	ldw	r2,-32720(gp)
10015af0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
10015af4:	d0e00c17 	ldw	r3,-32720(gp)
10015af8:	e0bfff17 	ldw	r2,-4(fp)
10015afc:	1885883a 	add	r2,r3,r2
10015b00:	d0a00c15 	stw	r2,-32720(gp)
10015b04:	e0bffa17 	ldw	r2,-24(fp)
10015b08:	e0bffe15 	stw	r2,-8(fp)
10015b0c:	e0bffe17 	ldw	r2,-8(fp)
10015b10:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10015b14:	e0bffb17 	ldw	r2,-20(fp)
} 
10015b18:	e037883a 	mov	sp,fp
10015b1c:	df000017 	ldw	fp,0(sp)
10015b20:	dec00104 	addi	sp,sp,4
10015b24:	f800283a 	ret

10015b28 <usleep>:
10015b28:	defffd04 	addi	sp,sp,-12
10015b2c:	dfc00215 	stw	ra,8(sp)
10015b30:	df000115 	stw	fp,4(sp)
10015b34:	df000104 	addi	fp,sp,4
10015b38:	e13fff15 	stw	r4,-4(fp)
10015b3c:	e13fff17 	ldw	r4,-4(fp)
10015b40:	00168e80 	call	100168e8 <alt_busy_sleep>
10015b44:	e037883a 	mov	sp,fp
10015b48:	dfc00117 	ldw	ra,4(sp)
10015b4c:	df000017 	ldw	fp,0(sp)
10015b50:	dec00204 	addi	sp,sp,8
10015b54:	f800283a 	ret

10015b58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10015b58:	defffe04 	addi	sp,sp,-8
10015b5c:	dfc00115 	stw	ra,4(sp)
10015b60:	df000015 	stw	fp,0(sp)
10015b64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10015b68:	008400b4 	movhi	r2,4098
10015b6c:	10ae9404 	addi	r2,r2,-17840
10015b70:	10800017 	ldw	r2,0(r2)
10015b74:	10000526 	beq	r2,zero,10015b8c <alt_get_errno+0x34>
10015b78:	008400b4 	movhi	r2,4098
10015b7c:	10ae9404 	addi	r2,r2,-17840
10015b80:	10800017 	ldw	r2,0(r2)
10015b84:	103ee83a 	callr	r2
10015b88:	00000206 	br	10015b94 <alt_get_errno+0x3c>
10015b8c:	008400b4 	movhi	r2,4098
10015b90:	10b55b04 	addi	r2,r2,-10900
}
10015b94:	e037883a 	mov	sp,fp
10015b98:	dfc00117 	ldw	ra,4(sp)
10015b9c:	df000017 	ldw	fp,0(sp)
10015ba0:	dec00204 	addi	sp,sp,8
10015ba4:	f800283a 	ret

10015ba8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10015ba8:	defff904 	addi	sp,sp,-28
10015bac:	dfc00615 	stw	ra,24(sp)
10015bb0:	df000515 	stw	fp,20(sp)
10015bb4:	df000504 	addi	fp,sp,20
10015bb8:	e13ffd15 	stw	r4,-12(fp)
10015bbc:	e17ffe15 	stw	r5,-8(fp)
10015bc0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10015bc4:	e0bffd17 	ldw	r2,-12(fp)
10015bc8:	10000816 	blt	r2,zero,10015bec <write+0x44>
10015bcc:	e13ffd17 	ldw	r4,-12(fp)
10015bd0:	01400304 	movi	r5,12
10015bd4:	00074c40 	call	100074c4 <__mulsi3>
10015bd8:	1007883a 	mov	r3,r2
10015bdc:	008400b4 	movhi	r2,4098
10015be0:	10aa1104 	addi	r2,r2,-22460
10015be4:	1885883a 	add	r2,r3,r2
10015be8:	00000106 	br	10015bf0 <write+0x48>
10015bec:	0005883a 	mov	r2,zero
10015bf0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10015bf4:	e0bffb17 	ldw	r2,-20(fp)
10015bf8:	10002126 	beq	r2,zero,10015c80 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10015bfc:	e0bffb17 	ldw	r2,-20(fp)
10015c00:	10800217 	ldw	r2,8(r2)
10015c04:	108000cc 	andi	r2,r2,3
10015c08:	10001826 	beq	r2,zero,10015c6c <write+0xc4>
10015c0c:	e0bffb17 	ldw	r2,-20(fp)
10015c10:	10800017 	ldw	r2,0(r2)
10015c14:	10800617 	ldw	r2,24(r2)
10015c18:	10001426 	beq	r2,zero,10015c6c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10015c1c:	e0bffb17 	ldw	r2,-20(fp)
10015c20:	10800017 	ldw	r2,0(r2)
10015c24:	10800617 	ldw	r2,24(r2)
10015c28:	e0ffff17 	ldw	r3,-4(fp)
10015c2c:	e13ffb17 	ldw	r4,-20(fp)
10015c30:	e17ffe17 	ldw	r5,-8(fp)
10015c34:	180d883a 	mov	r6,r3
10015c38:	103ee83a 	callr	r2
10015c3c:	e0bffc15 	stw	r2,-16(fp)
10015c40:	e0bffc17 	ldw	r2,-16(fp)
10015c44:	1000070e 	bge	r2,zero,10015c64 <write+0xbc>
      {
        ALT_ERRNO = -rval;
10015c48:	0015b580 	call	10015b58 <alt_get_errno>
10015c4c:	1007883a 	mov	r3,r2
10015c50:	e0bffc17 	ldw	r2,-16(fp)
10015c54:	0085c83a 	sub	r2,zero,r2
10015c58:	18800015 	stw	r2,0(r3)
        return -1;
10015c5c:	00bfffc4 	movi	r2,-1
10015c60:	00000c06 	br	10015c94 <write+0xec>
      }
      return rval;
10015c64:	e0bffc17 	ldw	r2,-16(fp)
10015c68:	00000a06 	br	10015c94 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10015c6c:	0015b580 	call	10015b58 <alt_get_errno>
10015c70:	1007883a 	mov	r3,r2
10015c74:	00800344 	movi	r2,13
10015c78:	18800015 	stw	r2,0(r3)
10015c7c:	00000406 	br	10015c90 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10015c80:	0015b580 	call	10015b58 <alt_get_errno>
10015c84:	1007883a 	mov	r3,r2
10015c88:	00801444 	movi	r2,81
10015c8c:	18800015 	stw	r2,0(r3)
  }
  return -1;
10015c90:	00bfffc4 	movi	r2,-1
}
10015c94:	e037883a 	mov	sp,fp
10015c98:	dfc00117 	ldw	ra,4(sp)
10015c9c:	df000017 	ldw	fp,0(sp)
10015ca0:	dec00204 	addi	sp,sp,8
10015ca4:	f800283a 	ret

10015ca8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10015ca8:	defffd04 	addi	sp,sp,-12
10015cac:	dfc00215 	stw	ra,8(sp)
10015cb0:	df000115 	stw	fp,4(sp)
10015cb4:	df000104 	addi	fp,sp,4
10015cb8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10015cbc:	e13fff17 	ldw	r4,-4(fp)
10015cc0:	014400b4 	movhi	r5,4098
10015cc4:	296e9104 	addi	r5,r5,-17852
10015cc8:	0016aac0 	call	10016aac <alt_dev_llist_insert>
}
10015ccc:	e037883a 	mov	sp,fp
10015cd0:	dfc00117 	ldw	ra,4(sp)
10015cd4:	df000017 	ldw	fp,0(sp)
10015cd8:	dec00204 	addi	sp,sp,8
10015cdc:	f800283a 	ret

10015ce0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10015ce0:	defffd04 	addi	sp,sp,-12
10015ce4:	dfc00215 	stw	ra,8(sp)
10015ce8:	df000115 	stw	fp,4(sp)
10015cec:	df000104 	addi	fp,sp,4
10015cf0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
10015cf4:	00174940 	call	10017494 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10015cf8:	00800044 	movi	r2,1
10015cfc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10015d00:	e037883a 	mov	sp,fp
10015d04:	dfc00117 	ldw	ra,4(sp)
10015d08:	df000017 	ldw	fp,0(sp)
10015d0c:	dec00204 	addi	sp,sp,8
10015d10:	f800283a 	ret

10015d14 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10015d14:	defffe04 	addi	sp,sp,-8
10015d18:	dfc00115 	stw	ra,4(sp)
10015d1c:	df000015 	stw	fp,0(sp)
10015d20:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10015d24:	010400b4 	movhi	r4,4098
10015d28:	212a7b04 	addi	r4,r4,-22036
10015d2c:	000b883a 	mov	r5,zero
10015d30:	01800144 	movi	r6,5
10015d34:	0015ec00 	call	10015ec0 <altera_avalon_jtag_uart_init>
10015d38:	010400b4 	movhi	r4,4098
10015d3c:	212a7104 	addi	r4,r4,-22076
10015d40:	0015ca80 	call	10015ca8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10015d44:	0001883a 	nop
}
10015d48:	e037883a 	mov	sp,fp
10015d4c:	dfc00117 	ldw	ra,4(sp)
10015d50:	df000017 	ldw	fp,0(sp)
10015d54:	dec00204 	addi	sp,sp,8
10015d58:	f800283a 	ret

10015d5c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10015d5c:	defffa04 	addi	sp,sp,-24
10015d60:	dfc00515 	stw	ra,20(sp)
10015d64:	df000415 	stw	fp,16(sp)
10015d68:	df000404 	addi	fp,sp,16
10015d6c:	e13ffd15 	stw	r4,-12(fp)
10015d70:	e17ffe15 	stw	r5,-8(fp)
10015d74:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10015d78:	e0bffd17 	ldw	r2,-12(fp)
10015d7c:	10800017 	ldw	r2,0(r2)
10015d80:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10015d84:	e0bffc17 	ldw	r2,-16(fp)
10015d88:	10c00a04 	addi	r3,r2,40
10015d8c:	e0bffd17 	ldw	r2,-12(fp)
10015d90:	10800217 	ldw	r2,8(r2)
10015d94:	1809883a 	mov	r4,r3
10015d98:	e17ffe17 	ldw	r5,-8(fp)
10015d9c:	e1bfff17 	ldw	r6,-4(fp)
10015da0:	100f883a 	mov	r7,r2
10015da4:	00163840 	call	10016384 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10015da8:	e037883a 	mov	sp,fp
10015dac:	dfc00117 	ldw	ra,4(sp)
10015db0:	df000017 	ldw	fp,0(sp)
10015db4:	dec00204 	addi	sp,sp,8
10015db8:	f800283a 	ret

10015dbc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10015dbc:	defffa04 	addi	sp,sp,-24
10015dc0:	dfc00515 	stw	ra,20(sp)
10015dc4:	df000415 	stw	fp,16(sp)
10015dc8:	df000404 	addi	fp,sp,16
10015dcc:	e13ffd15 	stw	r4,-12(fp)
10015dd0:	e17ffe15 	stw	r5,-8(fp)
10015dd4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10015dd8:	e0bffd17 	ldw	r2,-12(fp)
10015ddc:	10800017 	ldw	r2,0(r2)
10015de0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10015de4:	e0bffc17 	ldw	r2,-16(fp)
10015de8:	10c00a04 	addi	r3,r2,40
10015dec:	e0bffd17 	ldw	r2,-12(fp)
10015df0:	10800217 	ldw	r2,8(r2)
10015df4:	1809883a 	mov	r4,r3
10015df8:	e17ffe17 	ldw	r5,-8(fp)
10015dfc:	e1bfff17 	ldw	r6,-4(fp)
10015e00:	100f883a 	mov	r7,r2
10015e04:	00165900 	call	10016590 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10015e08:	e037883a 	mov	sp,fp
10015e0c:	dfc00117 	ldw	ra,4(sp)
10015e10:	df000017 	ldw	fp,0(sp)
10015e14:	dec00204 	addi	sp,sp,8
10015e18:	f800283a 	ret

10015e1c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10015e1c:	defffc04 	addi	sp,sp,-16
10015e20:	dfc00315 	stw	ra,12(sp)
10015e24:	df000215 	stw	fp,8(sp)
10015e28:	df000204 	addi	fp,sp,8
10015e2c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10015e30:	e0bfff17 	ldw	r2,-4(fp)
10015e34:	10800017 	ldw	r2,0(r2)
10015e38:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10015e3c:	e0bffe17 	ldw	r2,-8(fp)
10015e40:	10c00a04 	addi	r3,r2,40
10015e44:	e0bfff17 	ldw	r2,-4(fp)
10015e48:	10800217 	ldw	r2,8(r2)
10015e4c:	1809883a 	mov	r4,r3
10015e50:	100b883a 	mov	r5,r2
10015e54:	00162300 	call	10016230 <altera_avalon_jtag_uart_close>
}
10015e58:	e037883a 	mov	sp,fp
10015e5c:	dfc00117 	ldw	ra,4(sp)
10015e60:	df000017 	ldw	fp,0(sp)
10015e64:	dec00204 	addi	sp,sp,8
10015e68:	f800283a 	ret

10015e6c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10015e6c:	defffa04 	addi	sp,sp,-24
10015e70:	dfc00515 	stw	ra,20(sp)
10015e74:	df000415 	stw	fp,16(sp)
10015e78:	df000404 	addi	fp,sp,16
10015e7c:	e13ffd15 	stw	r4,-12(fp)
10015e80:	e17ffe15 	stw	r5,-8(fp)
10015e84:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10015e88:	e0bffd17 	ldw	r2,-12(fp)
10015e8c:	10800017 	ldw	r2,0(r2)
10015e90:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10015e94:	e0bffc17 	ldw	r2,-16(fp)
10015e98:	10800a04 	addi	r2,r2,40
10015e9c:	1009883a 	mov	r4,r2
10015ea0:	e17ffe17 	ldw	r5,-8(fp)
10015ea4:	e1bfff17 	ldw	r6,-4(fp)
10015ea8:	00162980 	call	10016298 <altera_avalon_jtag_uart_ioctl>
}
10015eac:	e037883a 	mov	sp,fp
10015eb0:	dfc00117 	ldw	ra,4(sp)
10015eb4:	df000017 	ldw	fp,0(sp)
10015eb8:	dec00204 	addi	sp,sp,8
10015ebc:	f800283a 	ret

10015ec0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10015ec0:	defffa04 	addi	sp,sp,-24
10015ec4:	dfc00515 	stw	ra,20(sp)
10015ec8:	df000415 	stw	fp,16(sp)
10015ecc:	df000404 	addi	fp,sp,16
10015ed0:	e13ffd15 	stw	r4,-12(fp)
10015ed4:	e17ffe15 	stw	r5,-8(fp)
10015ed8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10015edc:	e0bffd17 	ldw	r2,-12(fp)
10015ee0:	00c00044 	movi	r3,1
10015ee4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10015ee8:	e0bffd17 	ldw	r2,-12(fp)
10015eec:	10800017 	ldw	r2,0(r2)
10015ef0:	10800104 	addi	r2,r2,4
10015ef4:	1007883a 	mov	r3,r2
10015ef8:	e0bffd17 	ldw	r2,-12(fp)
10015efc:	10800817 	ldw	r2,32(r2)
10015f00:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10015f04:	e0fffe17 	ldw	r3,-8(fp)
10015f08:	e0bfff17 	ldw	r2,-4(fp)
10015f0c:	d8000015 	stw	zero,0(sp)
10015f10:	1809883a 	mov	r4,r3
10015f14:	100b883a 	mov	r5,r2
10015f18:	01840074 	movhi	r6,4097
10015f1c:	3197e104 	addi	r6,r6,24452
10015f20:	e1fffd17 	ldw	r7,-12(fp)
10015f24:	0016c2c0 	call	10016c2c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10015f28:	e0bffd17 	ldw	r2,-12(fp)
10015f2c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10015f30:	e0bffd17 	ldw	r2,-12(fp)
10015f34:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10015f38:	008400b4 	movhi	r2,4098
10015f3c:	10b56004 	addi	r2,r2,-10880
10015f40:	10800017 	ldw	r2,0(r2)
10015f44:	1809883a 	mov	r4,r3
10015f48:	100b883a 	mov	r5,r2
10015f4c:	01840074 	movhi	r6,4097
10015f50:	31986204 	addi	r6,r6,24968
10015f54:	e1fffd17 	ldw	r7,-12(fp)
10015f58:	00167a80 	call	100167a8 <alt_alarm_start>
10015f5c:	1000040e 	bge	r2,zero,10015f70 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10015f60:	e0fffd17 	ldw	r3,-12(fp)
10015f64:	00a00034 	movhi	r2,32768
10015f68:	10bfffc4 	addi	r2,r2,-1
10015f6c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10015f70:	e037883a 	mov	sp,fp
10015f74:	dfc00117 	ldw	ra,4(sp)
10015f78:	df000017 	ldw	fp,0(sp)
10015f7c:	dec00204 	addi	sp,sp,8
10015f80:	f800283a 	ret

10015f84 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10015f84:	defff804 	addi	sp,sp,-32
10015f88:	df000715 	stw	fp,28(sp)
10015f8c:	df000704 	addi	fp,sp,28
10015f90:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10015f94:	e0bfff17 	ldw	r2,-4(fp)
10015f98:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10015f9c:	e0bffb17 	ldw	r2,-20(fp)
10015fa0:	10800017 	ldw	r2,0(r2)
10015fa4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10015fa8:	e0bffc17 	ldw	r2,-16(fp)
10015fac:	10800104 	addi	r2,r2,4
10015fb0:	10800037 	ldwio	r2,0(r2)
10015fb4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10015fb8:	e0bffd17 	ldw	r2,-12(fp)
10015fbc:	1080c00c 	andi	r2,r2,768
10015fc0:	1000011e 	bne	r2,zero,10015fc8 <altera_avalon_jtag_uart_irq+0x44>
      break;
10015fc4:	00006c06 	br	10016178 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10015fc8:	e0bffd17 	ldw	r2,-12(fp)
10015fcc:	1080400c 	andi	r2,r2,256
10015fd0:	10003426 	beq	r2,zero,100160a4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10015fd4:	00800074 	movhi	r2,1
10015fd8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10015fdc:	e0bffb17 	ldw	r2,-20(fp)
10015fe0:	10800a17 	ldw	r2,40(r2)
10015fe4:	10800044 	addi	r2,r2,1
10015fe8:	1081ffcc 	andi	r2,r2,2047
10015fec:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10015ff0:	e0bffb17 	ldw	r2,-20(fp)
10015ff4:	10c00b17 	ldw	r3,44(r2)
10015ff8:	e0bffe17 	ldw	r2,-8(fp)
10015ffc:	1880011e 	bne	r3,r2,10016004 <altera_avalon_jtag_uart_irq+0x80>
          break;
10016000:	00001606 	br	1001605c <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10016004:	e0bffc17 	ldw	r2,-16(fp)
10016008:	10800037 	ldwio	r2,0(r2)
1001600c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10016010:	e0bff917 	ldw	r2,-28(fp)
10016014:	10a0000c 	andi	r2,r2,32768
10016018:	1000011e 	bne	r2,zero,10016020 <altera_avalon_jtag_uart_irq+0x9c>
          break;
1001601c:	00000f06 	br	1001605c <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10016020:	e0bffb17 	ldw	r2,-20(fp)
10016024:	10800a17 	ldw	r2,40(r2)
10016028:	e0fff917 	ldw	r3,-28(fp)
1001602c:	1809883a 	mov	r4,r3
10016030:	e0fffb17 	ldw	r3,-20(fp)
10016034:	1885883a 	add	r2,r3,r2
10016038:	10800e04 	addi	r2,r2,56
1001603c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10016040:	e0bffb17 	ldw	r2,-20(fp)
10016044:	10800a17 	ldw	r2,40(r2)
10016048:	10800044 	addi	r2,r2,1
1001604c:	10c1ffcc 	andi	r3,r2,2047
10016050:	e0bffb17 	ldw	r2,-20(fp)
10016054:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10016058:	003fe006 	br	10015fdc <__alt_data_end+0xf8015fdc>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1001605c:	e0bff917 	ldw	r2,-28(fp)
10016060:	10bfffec 	andhi	r2,r2,65535
10016064:	10000f26 	beq	r2,zero,100160a4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10016068:	e0bffb17 	ldw	r2,-20(fp)
1001606c:	10c00817 	ldw	r3,32(r2)
10016070:	00bfff84 	movi	r2,-2
10016074:	1886703a 	and	r3,r3,r2
10016078:	e0bffb17 	ldw	r2,-20(fp)
1001607c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10016080:	e0bffc17 	ldw	r2,-16(fp)
10016084:	10800104 	addi	r2,r2,4
10016088:	1007883a 	mov	r3,r2
1001608c:	e0bffb17 	ldw	r2,-20(fp)
10016090:	10800817 	ldw	r2,32(r2)
10016094:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10016098:	e0bffc17 	ldw	r2,-16(fp)
1001609c:	10800104 	addi	r2,r2,4
100160a0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
100160a4:	e0bffd17 	ldw	r2,-12(fp)
100160a8:	1080800c 	andi	r2,r2,512
100160ac:	10003126 	beq	r2,zero,10016174 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
100160b0:	e0bffd17 	ldw	r2,-12(fp)
100160b4:	1004d43a 	srli	r2,r2,16
100160b8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
100160bc:	00001406 	br	10016110 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
100160c0:	e0bffc17 	ldw	r2,-16(fp)
100160c4:	e0fffb17 	ldw	r3,-20(fp)
100160c8:	18c00d17 	ldw	r3,52(r3)
100160cc:	e13ffb17 	ldw	r4,-20(fp)
100160d0:	20c7883a 	add	r3,r4,r3
100160d4:	18c20e04 	addi	r3,r3,2104
100160d8:	18c00003 	ldbu	r3,0(r3)
100160dc:	18c03fcc 	andi	r3,r3,255
100160e0:	18c0201c 	xori	r3,r3,128
100160e4:	18ffe004 	addi	r3,r3,-128
100160e8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100160ec:	e0bffb17 	ldw	r2,-20(fp)
100160f0:	10800d17 	ldw	r2,52(r2)
100160f4:	10800044 	addi	r2,r2,1
100160f8:	10c1ffcc 	andi	r3,r2,2047
100160fc:	e0bffb17 	ldw	r2,-20(fp)
10016100:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10016104:	e0bffa17 	ldw	r2,-24(fp)
10016108:	10bfffc4 	addi	r2,r2,-1
1001610c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10016110:	e0bffa17 	ldw	r2,-24(fp)
10016114:	10000526 	beq	r2,zero,1001612c <altera_avalon_jtag_uart_irq+0x1a8>
10016118:	e0bffb17 	ldw	r2,-20(fp)
1001611c:	10c00d17 	ldw	r3,52(r2)
10016120:	e0bffb17 	ldw	r2,-20(fp)
10016124:	10800c17 	ldw	r2,48(r2)
10016128:	18bfe51e 	bne	r3,r2,100160c0 <__alt_data_end+0xf80160c0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1001612c:	e0bffa17 	ldw	r2,-24(fp)
10016130:	10001026 	beq	r2,zero,10016174 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10016134:	e0bffb17 	ldw	r2,-20(fp)
10016138:	10c00817 	ldw	r3,32(r2)
1001613c:	00bfff44 	movi	r2,-3
10016140:	1886703a 	and	r3,r3,r2
10016144:	e0bffb17 	ldw	r2,-20(fp)
10016148:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1001614c:	e0bffb17 	ldw	r2,-20(fp)
10016150:	10800017 	ldw	r2,0(r2)
10016154:	10800104 	addi	r2,r2,4
10016158:	1007883a 	mov	r3,r2
1001615c:	e0bffb17 	ldw	r2,-20(fp)
10016160:	10800817 	ldw	r2,32(r2)
10016164:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10016168:	e0bffc17 	ldw	r2,-16(fp)
1001616c:	10800104 	addi	r2,r2,4
10016170:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10016174:	003f8c06 	br	10015fa8 <__alt_data_end+0xf8015fa8>
}
10016178:	e037883a 	mov	sp,fp
1001617c:	df000017 	ldw	fp,0(sp)
10016180:	dec00104 	addi	sp,sp,4
10016184:	f800283a 	ret

10016188 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10016188:	defff804 	addi	sp,sp,-32
1001618c:	df000715 	stw	fp,28(sp)
10016190:	df000704 	addi	fp,sp,28
10016194:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10016198:	e0bffb17 	ldw	r2,-20(fp)
1001619c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
100161a0:	e0bff917 	ldw	r2,-28(fp)
100161a4:	10800017 	ldw	r2,0(r2)
100161a8:	10800104 	addi	r2,r2,4
100161ac:	10800037 	ldwio	r2,0(r2)
100161b0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
100161b4:	e0bffa17 	ldw	r2,-24(fp)
100161b8:	1081000c 	andi	r2,r2,1024
100161bc:	10000b26 	beq	r2,zero,100161ec <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
100161c0:	e0bff917 	ldw	r2,-28(fp)
100161c4:	10800017 	ldw	r2,0(r2)
100161c8:	10800104 	addi	r2,r2,4
100161cc:	1007883a 	mov	r3,r2
100161d0:	e0bff917 	ldw	r2,-28(fp)
100161d4:	10800817 	ldw	r2,32(r2)
100161d8:	10810014 	ori	r2,r2,1024
100161dc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
100161e0:	e0bff917 	ldw	r2,-28(fp)
100161e4:	10000915 	stw	zero,36(r2)
100161e8:	00000a06 	br	10016214 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
100161ec:	e0bff917 	ldw	r2,-28(fp)
100161f0:	10c00917 	ldw	r3,36(r2)
100161f4:	00a00034 	movhi	r2,32768
100161f8:	10bfff04 	addi	r2,r2,-4
100161fc:	10c00536 	bltu	r2,r3,10016214 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10016200:	e0bff917 	ldw	r2,-28(fp)
10016204:	10800917 	ldw	r2,36(r2)
10016208:	10c00044 	addi	r3,r2,1
1001620c:	e0bff917 	ldw	r2,-28(fp)
10016210:	10c00915 	stw	r3,36(r2)
10016214:	008400b4 	movhi	r2,4098
10016218:	10b56004 	addi	r2,r2,-10880
1001621c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10016220:	e037883a 	mov	sp,fp
10016224:	df000017 	ldw	fp,0(sp)
10016228:	dec00104 	addi	sp,sp,4
1001622c:	f800283a 	ret

10016230 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10016230:	defffd04 	addi	sp,sp,-12
10016234:	df000215 	stw	fp,8(sp)
10016238:	df000204 	addi	fp,sp,8
1001623c:	e13ffe15 	stw	r4,-8(fp)
10016240:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10016244:	00000506 	br	1001625c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10016248:	e0bfff17 	ldw	r2,-4(fp)
1001624c:	1090000c 	andi	r2,r2,16384
10016250:	10000226 	beq	r2,zero,1001625c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10016254:	00bffd44 	movi	r2,-11
10016258:	00000b06 	br	10016288 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1001625c:	e0bffe17 	ldw	r2,-8(fp)
10016260:	10c00d17 	ldw	r3,52(r2)
10016264:	e0bffe17 	ldw	r2,-8(fp)
10016268:	10800c17 	ldw	r2,48(r2)
1001626c:	18800526 	beq	r3,r2,10016284 <altera_avalon_jtag_uart_close+0x54>
10016270:	e0bffe17 	ldw	r2,-8(fp)
10016274:	10c00917 	ldw	r3,36(r2)
10016278:	e0bffe17 	ldw	r2,-8(fp)
1001627c:	10800117 	ldw	r2,4(r2)
10016280:	18bff136 	bltu	r3,r2,10016248 <__alt_data_end+0xf8016248>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10016284:	0005883a 	mov	r2,zero
}
10016288:	e037883a 	mov	sp,fp
1001628c:	df000017 	ldw	fp,0(sp)
10016290:	dec00104 	addi	sp,sp,4
10016294:	f800283a 	ret

10016298 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10016298:	defffa04 	addi	sp,sp,-24
1001629c:	df000515 	stw	fp,20(sp)
100162a0:	df000504 	addi	fp,sp,20
100162a4:	e13ffd15 	stw	r4,-12(fp)
100162a8:	e17ffe15 	stw	r5,-8(fp)
100162ac:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
100162b0:	00bff9c4 	movi	r2,-25
100162b4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
100162b8:	e0bffe17 	ldw	r2,-8(fp)
100162bc:	10da8060 	cmpeqi	r3,r2,27137
100162c0:	1800031e 	bne	r3,zero,100162d0 <altera_avalon_jtag_uart_ioctl+0x38>
100162c4:	109a80a0 	cmpeqi	r2,r2,27138
100162c8:	1000191e 	bne	r2,zero,10016330 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
100162cc:	00002806 	br	10016370 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
100162d0:	e0bffd17 	ldw	r2,-12(fp)
100162d4:	10c00117 	ldw	r3,4(r2)
100162d8:	00a00034 	movhi	r2,32768
100162dc:	10bfffc4 	addi	r2,r2,-1
100162e0:	18801226 	beq	r3,r2,1001632c <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
100162e4:	e0bfff17 	ldw	r2,-4(fp)
100162e8:	10800017 	ldw	r2,0(r2)
100162ec:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
100162f0:	e0bffc17 	ldw	r2,-16(fp)
100162f4:	10800090 	cmplti	r2,r2,2
100162f8:	1000061e 	bne	r2,zero,10016314 <altera_avalon_jtag_uart_ioctl+0x7c>
100162fc:	e0fffc17 	ldw	r3,-16(fp)
10016300:	00a00034 	movhi	r2,32768
10016304:	10bfffc4 	addi	r2,r2,-1
10016308:	18800226 	beq	r3,r2,10016314 <altera_avalon_jtag_uart_ioctl+0x7c>
1001630c:	e0bffc17 	ldw	r2,-16(fp)
10016310:	00000206 	br	1001631c <altera_avalon_jtag_uart_ioctl+0x84>
10016314:	00a00034 	movhi	r2,32768
10016318:	10bfff84 	addi	r2,r2,-2
1001631c:	e0fffd17 	ldw	r3,-12(fp)
10016320:	18800115 	stw	r2,4(r3)
      rc = 0;
10016324:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10016328:	00001106 	br	10016370 <altera_avalon_jtag_uart_ioctl+0xd8>
1001632c:	00001006 	br	10016370 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10016330:	e0bffd17 	ldw	r2,-12(fp)
10016334:	10c00117 	ldw	r3,4(r2)
10016338:	00a00034 	movhi	r2,32768
1001633c:	10bfffc4 	addi	r2,r2,-1
10016340:	18800a26 	beq	r3,r2,1001636c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10016344:	e0bffd17 	ldw	r2,-12(fp)
10016348:	10c00917 	ldw	r3,36(r2)
1001634c:	e0bffd17 	ldw	r2,-12(fp)
10016350:	10800117 	ldw	r2,4(r2)
10016354:	1885803a 	cmpltu	r2,r3,r2
10016358:	10c03fcc 	andi	r3,r2,255
1001635c:	e0bfff17 	ldw	r2,-4(fp)
10016360:	10c00015 	stw	r3,0(r2)
      rc = 0;
10016364:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10016368:	00000006 	br	1001636c <altera_avalon_jtag_uart_ioctl+0xd4>
1001636c:	0001883a 	nop

  default:
    break;
  }

  return rc;
10016370:	e0bffb17 	ldw	r2,-20(fp)
}
10016374:	e037883a 	mov	sp,fp
10016378:	df000017 	ldw	fp,0(sp)
1001637c:	dec00104 	addi	sp,sp,4
10016380:	f800283a 	ret

10016384 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10016384:	defff304 	addi	sp,sp,-52
10016388:	dfc00c15 	stw	ra,48(sp)
1001638c:	df000b15 	stw	fp,44(sp)
10016390:	df000b04 	addi	fp,sp,44
10016394:	e13ffc15 	stw	r4,-16(fp)
10016398:	e17ffd15 	stw	r5,-12(fp)
1001639c:	e1bffe15 	stw	r6,-8(fp)
100163a0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
100163a4:	e0bffd17 	ldw	r2,-12(fp)
100163a8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100163ac:	00004906 	br	100164d4 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
100163b0:	e0bffc17 	ldw	r2,-16(fp)
100163b4:	10800a17 	ldw	r2,40(r2)
100163b8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
100163bc:	e0bffc17 	ldw	r2,-16(fp)
100163c0:	10800b17 	ldw	r2,44(r2)
100163c4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
100163c8:	e0fff717 	ldw	r3,-36(fp)
100163cc:	e0bff817 	ldw	r2,-32(fp)
100163d0:	18800536 	bltu	r3,r2,100163e8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
100163d4:	e0fff717 	ldw	r3,-36(fp)
100163d8:	e0bff817 	ldw	r2,-32(fp)
100163dc:	1885c83a 	sub	r2,r3,r2
100163e0:	e0bff615 	stw	r2,-40(fp)
100163e4:	00000406 	br	100163f8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
100163e8:	00c20004 	movi	r3,2048
100163ec:	e0bff817 	ldw	r2,-32(fp)
100163f0:	1885c83a 	sub	r2,r3,r2
100163f4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100163f8:	e0bff617 	ldw	r2,-40(fp)
100163fc:	1000011e 	bne	r2,zero,10016404 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
10016400:	00001d06 	br	10016478 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
10016404:	e0fffe17 	ldw	r3,-8(fp)
10016408:	e0bff617 	ldw	r2,-40(fp)
1001640c:	1880022e 	bgeu	r3,r2,10016418 <altera_avalon_jtag_uart_read+0x94>
        n = space;
10016410:	e0bffe17 	ldw	r2,-8(fp)
10016414:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10016418:	e0bff817 	ldw	r2,-32(fp)
1001641c:	10800e04 	addi	r2,r2,56
10016420:	e0fffc17 	ldw	r3,-16(fp)
10016424:	1885883a 	add	r2,r3,r2
10016428:	e13ff517 	ldw	r4,-44(fp)
1001642c:	100b883a 	mov	r5,r2
10016430:	e1bff617 	ldw	r6,-40(fp)
10016434:	0009a7c0 	call	10009a7c <memcpy>
      ptr   += n;
10016438:	e0fff517 	ldw	r3,-44(fp)
1001643c:	e0bff617 	ldw	r2,-40(fp)
10016440:	1885883a 	add	r2,r3,r2
10016444:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10016448:	e0fffe17 	ldw	r3,-8(fp)
1001644c:	e0bff617 	ldw	r2,-40(fp)
10016450:	1885c83a 	sub	r2,r3,r2
10016454:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10016458:	e0fff817 	ldw	r3,-32(fp)
1001645c:	e0bff617 	ldw	r2,-40(fp)
10016460:	1885883a 	add	r2,r3,r2
10016464:	10c1ffcc 	andi	r3,r2,2047
10016468:	e0bffc17 	ldw	r2,-16(fp)
1001646c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10016470:	e0bffe17 	ldw	r2,-8(fp)
10016474:	00bfce16 	blt	zero,r2,100163b0 <__alt_data_end+0xf80163b0>

    /* If we read any data then return it */
    if (ptr != buffer)
10016478:	e0fff517 	ldw	r3,-44(fp)
1001647c:	e0bffd17 	ldw	r2,-12(fp)
10016480:	18800126 	beq	r3,r2,10016488 <altera_avalon_jtag_uart_read+0x104>
      break;
10016484:	00001506 	br	100164dc <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10016488:	e0bfff17 	ldw	r2,-4(fp)
1001648c:	1090000c 	andi	r2,r2,16384
10016490:	10000126 	beq	r2,zero,10016498 <altera_avalon_jtag_uart_read+0x114>
      break;
10016494:	00001106 	br	100164dc <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10016498:	0001883a 	nop
1001649c:	e0bffc17 	ldw	r2,-16(fp)
100164a0:	10c00a17 	ldw	r3,40(r2)
100164a4:	e0bff717 	ldw	r2,-36(fp)
100164a8:	1880051e 	bne	r3,r2,100164c0 <altera_avalon_jtag_uart_read+0x13c>
100164ac:	e0bffc17 	ldw	r2,-16(fp)
100164b0:	10c00917 	ldw	r3,36(r2)
100164b4:	e0bffc17 	ldw	r2,-16(fp)
100164b8:	10800117 	ldw	r2,4(r2)
100164bc:	18bff736 	bltu	r3,r2,1001649c <__alt_data_end+0xf801649c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
100164c0:	e0bffc17 	ldw	r2,-16(fp)
100164c4:	10c00a17 	ldw	r3,40(r2)
100164c8:	e0bff717 	ldw	r2,-36(fp)
100164cc:	1880011e 	bne	r3,r2,100164d4 <altera_avalon_jtag_uart_read+0x150>
      break;
100164d0:	00000206 	br	100164dc <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100164d4:	e0bffe17 	ldw	r2,-8(fp)
100164d8:	00bfb516 	blt	zero,r2,100163b0 <__alt_data_end+0xf80163b0>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
100164dc:	e0fff517 	ldw	r3,-44(fp)
100164e0:	e0bffd17 	ldw	r2,-12(fp)
100164e4:	18801826 	beq	r3,r2,10016548 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100164e8:	0005303a 	rdctl	r2,status
100164ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100164f0:	e0fffa17 	ldw	r3,-24(fp)
100164f4:	00bfff84 	movi	r2,-2
100164f8:	1884703a 	and	r2,r3,r2
100164fc:	1001703a 	wrctl	status,r2
  
  return context;
10016500:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10016504:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10016508:	e0bffc17 	ldw	r2,-16(fp)
1001650c:	10800817 	ldw	r2,32(r2)
10016510:	10c00054 	ori	r3,r2,1
10016514:	e0bffc17 	ldw	r2,-16(fp)
10016518:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1001651c:	e0bffc17 	ldw	r2,-16(fp)
10016520:	10800017 	ldw	r2,0(r2)
10016524:	10800104 	addi	r2,r2,4
10016528:	1007883a 	mov	r3,r2
1001652c:	e0bffc17 	ldw	r2,-16(fp)
10016530:	10800817 	ldw	r2,32(r2)
10016534:	18800035 	stwio	r2,0(r3)
10016538:	e0bff917 	ldw	r2,-28(fp)
1001653c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10016540:	e0bffb17 	ldw	r2,-20(fp)
10016544:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10016548:	e0fff517 	ldw	r3,-44(fp)
1001654c:	e0bffd17 	ldw	r2,-12(fp)
10016550:	18800426 	beq	r3,r2,10016564 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
10016554:	e0fff517 	ldw	r3,-44(fp)
10016558:	e0bffd17 	ldw	r2,-12(fp)
1001655c:	1885c83a 	sub	r2,r3,r2
10016560:	00000606 	br	1001657c <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
10016564:	e0bfff17 	ldw	r2,-4(fp)
10016568:	1090000c 	andi	r2,r2,16384
1001656c:	10000226 	beq	r2,zero,10016578 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
10016570:	00bffd44 	movi	r2,-11
10016574:	00000106 	br	1001657c <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
10016578:	00bffec4 	movi	r2,-5
}
1001657c:	e037883a 	mov	sp,fp
10016580:	dfc00117 	ldw	ra,4(sp)
10016584:	df000017 	ldw	fp,0(sp)
10016588:	dec00204 	addi	sp,sp,8
1001658c:	f800283a 	ret

10016590 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10016590:	defff304 	addi	sp,sp,-52
10016594:	dfc00c15 	stw	ra,48(sp)
10016598:	df000b15 	stw	fp,44(sp)
1001659c:	df000b04 	addi	fp,sp,44
100165a0:	e13ffc15 	stw	r4,-16(fp)
100165a4:	e17ffd15 	stw	r5,-12(fp)
100165a8:	e1bffe15 	stw	r6,-8(fp)
100165ac:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
100165b0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
100165b4:	e0bffd17 	ldw	r2,-12(fp)
100165b8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100165bc:	00003806 	br	100166a0 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
100165c0:	e0bffc17 	ldw	r2,-16(fp)
100165c4:	10800c17 	ldw	r2,48(r2)
100165c8:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
100165cc:	e0bffc17 	ldw	r2,-16(fp)
100165d0:	10800d17 	ldw	r2,52(r2)
100165d4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
100165d8:	e0fff817 	ldw	r3,-32(fp)
100165dc:	e0bff517 	ldw	r2,-44(fp)
100165e0:	1880062e 	bgeu	r3,r2,100165fc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
100165e4:	e0fff517 	ldw	r3,-44(fp)
100165e8:	e0bff817 	ldw	r2,-32(fp)
100165ec:	1885c83a 	sub	r2,r3,r2
100165f0:	10bfffc4 	addi	r2,r2,-1
100165f4:	e0bff615 	stw	r2,-40(fp)
100165f8:	00000b06 	br	10016628 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
100165fc:	e0bff517 	ldw	r2,-44(fp)
10016600:	10000526 	beq	r2,zero,10016618 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10016604:	00c20004 	movi	r3,2048
10016608:	e0bff817 	ldw	r2,-32(fp)
1001660c:	1885c83a 	sub	r2,r3,r2
10016610:	e0bff615 	stw	r2,-40(fp)
10016614:	00000406 	br	10016628 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10016618:	00c1ffc4 	movi	r3,2047
1001661c:	e0bff817 	ldw	r2,-32(fp)
10016620:	1885c83a 	sub	r2,r3,r2
10016624:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10016628:	e0bff617 	ldw	r2,-40(fp)
1001662c:	1000011e 	bne	r2,zero,10016634 <altera_avalon_jtag_uart_write+0xa4>
        break;
10016630:	00001d06 	br	100166a8 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
10016634:	e0fffe17 	ldw	r3,-8(fp)
10016638:	e0bff617 	ldw	r2,-40(fp)
1001663c:	1880022e 	bgeu	r3,r2,10016648 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
10016640:	e0bffe17 	ldw	r2,-8(fp)
10016644:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10016648:	e0bff817 	ldw	r2,-32(fp)
1001664c:	10820e04 	addi	r2,r2,2104
10016650:	e0fffc17 	ldw	r3,-16(fp)
10016654:	1885883a 	add	r2,r3,r2
10016658:	1009883a 	mov	r4,r2
1001665c:	e17ffd17 	ldw	r5,-12(fp)
10016660:	e1bff617 	ldw	r6,-40(fp)
10016664:	0009a7c0 	call	10009a7c <memcpy>
      ptr   += n;
10016668:	e0fffd17 	ldw	r3,-12(fp)
1001666c:	e0bff617 	ldw	r2,-40(fp)
10016670:	1885883a 	add	r2,r3,r2
10016674:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10016678:	e0fffe17 	ldw	r3,-8(fp)
1001667c:	e0bff617 	ldw	r2,-40(fp)
10016680:	1885c83a 	sub	r2,r3,r2
10016684:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10016688:	e0fff817 	ldw	r3,-32(fp)
1001668c:	e0bff617 	ldw	r2,-40(fp)
10016690:	1885883a 	add	r2,r3,r2
10016694:	10c1ffcc 	andi	r3,r2,2047
10016698:	e0bffc17 	ldw	r2,-16(fp)
1001669c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100166a0:	e0bffe17 	ldw	r2,-8(fp)
100166a4:	00bfc616 	blt	zero,r2,100165c0 <__alt_data_end+0xf80165c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100166a8:	0005303a 	rdctl	r2,status
100166ac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100166b0:	e0fffa17 	ldw	r3,-24(fp)
100166b4:	00bfff84 	movi	r2,-2
100166b8:	1884703a 	and	r2,r3,r2
100166bc:	1001703a 	wrctl	status,r2
  
  return context;
100166c0:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
100166c4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100166c8:	e0bffc17 	ldw	r2,-16(fp)
100166cc:	10800817 	ldw	r2,32(r2)
100166d0:	10c00094 	ori	r3,r2,2
100166d4:	e0bffc17 	ldw	r2,-16(fp)
100166d8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100166dc:	e0bffc17 	ldw	r2,-16(fp)
100166e0:	10800017 	ldw	r2,0(r2)
100166e4:	10800104 	addi	r2,r2,4
100166e8:	1007883a 	mov	r3,r2
100166ec:	e0bffc17 	ldw	r2,-16(fp)
100166f0:	10800817 	ldw	r2,32(r2)
100166f4:	18800035 	stwio	r2,0(r3)
100166f8:	e0bff917 	ldw	r2,-28(fp)
100166fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10016700:	e0bffb17 	ldw	r2,-20(fp)
10016704:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10016708:	e0bffe17 	ldw	r2,-8(fp)
1001670c:	0080120e 	bge	zero,r2,10016758 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
10016710:	e0bfff17 	ldw	r2,-4(fp)
10016714:	1090000c 	andi	r2,r2,16384
10016718:	10000126 	beq	r2,zero,10016720 <altera_avalon_jtag_uart_write+0x190>
        break;
1001671c:	00001006 	br	10016760 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10016720:	0001883a 	nop
10016724:	e0bffc17 	ldw	r2,-16(fp)
10016728:	10c00d17 	ldw	r3,52(r2)
1001672c:	e0bff517 	ldw	r2,-44(fp)
10016730:	1880051e 	bne	r3,r2,10016748 <altera_avalon_jtag_uart_write+0x1b8>
10016734:	e0bffc17 	ldw	r2,-16(fp)
10016738:	10c00917 	ldw	r3,36(r2)
1001673c:	e0bffc17 	ldw	r2,-16(fp)
10016740:	10800117 	ldw	r2,4(r2)
10016744:	18bff736 	bltu	r3,r2,10016724 <__alt_data_end+0xf8016724>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10016748:	e0bffc17 	ldw	r2,-16(fp)
1001674c:	10800917 	ldw	r2,36(r2)
10016750:	10000126 	beq	r2,zero,10016758 <altera_avalon_jtag_uart_write+0x1c8>
         break;
10016754:	00000206 	br	10016760 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
10016758:	e0bffe17 	ldw	r2,-8(fp)
1001675c:	00bf9716 	blt	zero,r2,100165bc <__alt_data_end+0xf80165bc>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10016760:	e0fffd17 	ldw	r3,-12(fp)
10016764:	e0bff717 	ldw	r2,-36(fp)
10016768:	18800426 	beq	r3,r2,1001677c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
1001676c:	e0fffd17 	ldw	r3,-12(fp)
10016770:	e0bff717 	ldw	r2,-36(fp)
10016774:	1885c83a 	sub	r2,r3,r2
10016778:	00000606 	br	10016794 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
1001677c:	e0bfff17 	ldw	r2,-4(fp)
10016780:	1090000c 	andi	r2,r2,16384
10016784:	10000226 	beq	r2,zero,10016790 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
10016788:	00bffd44 	movi	r2,-11
1001678c:	00000106 	br	10016794 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10016790:	00bffec4 	movi	r2,-5
}
10016794:	e037883a 	mov	sp,fp
10016798:	dfc00117 	ldw	ra,4(sp)
1001679c:	df000017 	ldw	fp,0(sp)
100167a0:	dec00204 	addi	sp,sp,8
100167a4:	f800283a 	ret

100167a8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
100167a8:	defff504 	addi	sp,sp,-44
100167ac:	df000a15 	stw	fp,40(sp)
100167b0:	df000a04 	addi	fp,sp,40
100167b4:	e13ffc15 	stw	r4,-16(fp)
100167b8:	e17ffd15 	stw	r5,-12(fp)
100167bc:	e1bffe15 	stw	r6,-8(fp)
100167c0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
100167c4:	e03ff615 	stw	zero,-40(fp)
100167c8:	008400b4 	movhi	r2,4098
100167cc:	10b56004 	addi	r2,r2,-10880
100167d0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
100167d4:	10003f26 	beq	r2,zero,100168d4 <alt_alarm_start+0x12c>
  {
    if (alarm)
100167d8:	e0bffc17 	ldw	r2,-16(fp)
100167dc:	10003b26 	beq	r2,zero,100168cc <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
100167e0:	e0bffc17 	ldw	r2,-16(fp)
100167e4:	e0fffe17 	ldw	r3,-8(fp)
100167e8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
100167ec:	e0bffc17 	ldw	r2,-16(fp)
100167f0:	e0ffff17 	ldw	r3,-4(fp)
100167f4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100167f8:	0005303a 	rdctl	r2,status
100167fc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10016800:	e0fff817 	ldw	r3,-32(fp)
10016804:	00bfff84 	movi	r2,-2
10016808:	1884703a 	and	r2,r3,r2
1001680c:	1001703a 	wrctl	status,r2
  
  return context;
10016810:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
10016814:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10016818:	008400b4 	movhi	r2,4098
1001681c:	10b56104 	addi	r2,r2,-10876
10016820:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
10016824:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10016828:	e0fffd17 	ldw	r3,-12(fp)
1001682c:	e0bff617 	ldw	r2,-40(fp)
10016830:	1885883a 	add	r2,r3,r2
10016834:	10c00044 	addi	r3,r2,1
10016838:	e0bffc17 	ldw	r2,-16(fp)
1001683c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10016840:	e0bffc17 	ldw	r2,-16(fp)
10016844:	10c00217 	ldw	r3,8(r2)
10016848:	e0bff617 	ldw	r2,-40(fp)
1001684c:	1880042e 	bgeu	r3,r2,10016860 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
10016850:	e0bffc17 	ldw	r2,-16(fp)
10016854:	00c00044 	movi	r3,1
10016858:	10c00405 	stb	r3,16(r2)
1001685c:	00000206 	br	10016868 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10016860:	e0bffc17 	ldw	r2,-16(fp)
10016864:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10016868:	e0fffc17 	ldw	r3,-16(fp)
1001686c:	008400b4 	movhi	r2,4098
10016870:	10ae9704 	addi	r2,r2,-17828
10016874:	e0bff915 	stw	r2,-28(fp)
10016878:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1001687c:	e0bffa17 	ldw	r2,-24(fp)
10016880:	e0fff917 	ldw	r3,-28(fp)
10016884:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10016888:	e0bff917 	ldw	r2,-28(fp)
1001688c:	10c00017 	ldw	r3,0(r2)
10016890:	e0bffa17 	ldw	r2,-24(fp)
10016894:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10016898:	e0bff917 	ldw	r2,-28(fp)
1001689c:	10800017 	ldw	r2,0(r2)
100168a0:	e0fffa17 	ldw	r3,-24(fp)
100168a4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100168a8:	e0bff917 	ldw	r2,-28(fp)
100168ac:	e0fffa17 	ldw	r3,-24(fp)
100168b0:	10c00015 	stw	r3,0(r2)
100168b4:	e0bff717 	ldw	r2,-36(fp)
100168b8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100168bc:	e0bffb17 	ldw	r2,-20(fp)
100168c0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
100168c4:	0005883a 	mov	r2,zero
100168c8:	00000306 	br	100168d8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
100168cc:	00bffa84 	movi	r2,-22
100168d0:	00000106 	br	100168d8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
100168d4:	00bfde84 	movi	r2,-134
  }
}
100168d8:	e037883a 	mov	sp,fp
100168dc:	df000017 	ldw	fp,0(sp)
100168e0:	dec00104 	addi	sp,sp,4
100168e4:	f800283a 	ret

100168e8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
100168e8:	defffa04 	addi	sp,sp,-24
100168ec:	dfc00515 	stw	ra,20(sp)
100168f0:	df000415 	stw	fp,16(sp)
100168f4:	df000404 	addi	fp,sp,16
100168f8:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
100168fc:	00800244 	movi	r2,9
10016900:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10016904:	e13ffd17 	ldw	r4,-12(fp)
10016908:	014003f4 	movhi	r5,15
1001690c:	29509004 	addi	r5,r5,16960
10016910:	00074c40 	call	100074c4 <__mulsi3>
10016914:	0100bef4 	movhi	r4,763
10016918:	213c2004 	addi	r4,r4,-3968
1001691c:	100b883a 	mov	r5,r2
10016920:	00074b40 	call	100074b4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10016924:	01200034 	movhi	r4,32768
10016928:	213fffc4 	addi	r4,r4,-1
1001692c:	100b883a 	mov	r5,r2
10016930:	00074b40 	call	100074b4 <__udivsi3>
10016934:	e13fff17 	ldw	r4,-4(fp)
10016938:	100b883a 	mov	r5,r2
1001693c:	00074b40 	call	100074b4 <__udivsi3>
10016940:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10016944:	e0bffe17 	ldw	r2,-8(fp)
10016948:	10002a26 	beq	r2,zero,100169f4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
1001694c:	e03ffc15 	stw	zero,-16(fp)
10016950:	00001706 	br	100169b0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10016954:	00a00034 	movhi	r2,32768
10016958:	10bfffc4 	addi	r2,r2,-1
1001695c:	10bfffc4 	addi	r2,r2,-1
10016960:	103ffe1e 	bne	r2,zero,1001695c <__alt_data_end+0xf801695c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10016964:	e13ffd17 	ldw	r4,-12(fp)
10016968:	014003f4 	movhi	r5,15
1001696c:	29509004 	addi	r5,r5,16960
10016970:	00074c40 	call	100074c4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10016974:	0100bef4 	movhi	r4,763
10016978:	213c2004 	addi	r4,r4,-3968
1001697c:	100b883a 	mov	r5,r2
10016980:	00074b40 	call	100074b4 <__udivsi3>
10016984:	01200034 	movhi	r4,32768
10016988:	213fffc4 	addi	r4,r4,-1
1001698c:	100b883a 	mov	r5,r2
10016990:	00074b40 	call	100074b4 <__udivsi3>
10016994:	1007883a 	mov	r3,r2
10016998:	e0bfff17 	ldw	r2,-4(fp)
1001699c:	10c5c83a 	sub	r2,r2,r3
100169a0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
100169a4:	e0bffc17 	ldw	r2,-16(fp)
100169a8:	10800044 	addi	r2,r2,1
100169ac:	e0bffc15 	stw	r2,-16(fp)
100169b0:	e0fffc17 	ldw	r3,-16(fp)
100169b4:	e0bffe17 	ldw	r2,-8(fp)
100169b8:	18bfe616 	blt	r3,r2,10016954 <__alt_data_end+0xf8016954>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
100169bc:	e13ffd17 	ldw	r4,-12(fp)
100169c0:	014003f4 	movhi	r5,15
100169c4:	29509004 	addi	r5,r5,16960
100169c8:	00074c40 	call	100074c4 <__mulsi3>
100169cc:	0100bef4 	movhi	r4,763
100169d0:	213c2004 	addi	r4,r4,-3968
100169d4:	100b883a 	mov	r5,r2
100169d8:	00074b40 	call	100074b4 <__udivsi3>
100169dc:	1009883a 	mov	r4,r2
100169e0:	e17fff17 	ldw	r5,-4(fp)
100169e4:	00074c40 	call	100074c4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
100169e8:	10bfffc4 	addi	r2,r2,-1
100169ec:	103ffe1e 	bne	r2,zero,100169e8 <__alt_data_end+0xf80169e8>
100169f0:	00000d06 	br	10016a28 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
100169f4:	e13ffd17 	ldw	r4,-12(fp)
100169f8:	014003f4 	movhi	r5,15
100169fc:	29509004 	addi	r5,r5,16960
10016a00:	00074c40 	call	100074c4 <__mulsi3>
10016a04:	0100bef4 	movhi	r4,763
10016a08:	213c2004 	addi	r4,r4,-3968
10016a0c:	100b883a 	mov	r5,r2
10016a10:	00074b40 	call	100074b4 <__udivsi3>
10016a14:	1009883a 	mov	r4,r2
10016a18:	e17fff17 	ldw	r5,-4(fp)
10016a1c:	00074c40 	call	100074c4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10016a20:	10bfffc4 	addi	r2,r2,-1
10016a24:	00bffe16 	blt	zero,r2,10016a20 <__alt_data_end+0xf8016a20>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10016a28:	0005883a 	mov	r2,zero
}
10016a2c:	e037883a 	mov	sp,fp
10016a30:	dfc00117 	ldw	ra,4(sp)
10016a34:	df000017 	ldw	fp,0(sp)
10016a38:	dec00204 	addi	sp,sp,8
10016a3c:	f800283a 	ret

10016a40 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10016a40:	deffff04 	addi	sp,sp,-4
10016a44:	df000015 	stw	fp,0(sp)
10016a48:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10016a4c:	e037883a 	mov	sp,fp
10016a50:	df000017 	ldw	fp,0(sp)
10016a54:	dec00104 	addi	sp,sp,4
10016a58:	f800283a 	ret

10016a5c <alt_get_errno>:
10016a5c:	defffe04 	addi	sp,sp,-8
10016a60:	dfc00115 	stw	ra,4(sp)
10016a64:	df000015 	stw	fp,0(sp)
10016a68:	d839883a 	mov	fp,sp
10016a6c:	008400b4 	movhi	r2,4098
10016a70:	10ae9404 	addi	r2,r2,-17840
10016a74:	10800017 	ldw	r2,0(r2)
10016a78:	10000526 	beq	r2,zero,10016a90 <alt_get_errno+0x34>
10016a7c:	008400b4 	movhi	r2,4098
10016a80:	10ae9404 	addi	r2,r2,-17840
10016a84:	10800017 	ldw	r2,0(r2)
10016a88:	103ee83a 	callr	r2
10016a8c:	00000206 	br	10016a98 <alt_get_errno+0x3c>
10016a90:	008400b4 	movhi	r2,4098
10016a94:	10b55b04 	addi	r2,r2,-10900
10016a98:	e037883a 	mov	sp,fp
10016a9c:	dfc00117 	ldw	ra,4(sp)
10016aa0:	df000017 	ldw	fp,0(sp)
10016aa4:	dec00204 	addi	sp,sp,8
10016aa8:	f800283a 	ret

10016aac <alt_dev_llist_insert>:
10016aac:	defffa04 	addi	sp,sp,-24
10016ab0:	dfc00515 	stw	ra,20(sp)
10016ab4:	df000415 	stw	fp,16(sp)
10016ab8:	df000404 	addi	fp,sp,16
10016abc:	e13ffe15 	stw	r4,-8(fp)
10016ac0:	e17fff15 	stw	r5,-4(fp)
10016ac4:	e0bffe17 	ldw	r2,-8(fp)
10016ac8:	10000326 	beq	r2,zero,10016ad8 <alt_dev_llist_insert+0x2c>
10016acc:	e0bffe17 	ldw	r2,-8(fp)
10016ad0:	10800217 	ldw	r2,8(r2)
10016ad4:	1000061e 	bne	r2,zero,10016af0 <alt_dev_llist_insert+0x44>
10016ad8:	0016a5c0 	call	10016a5c <alt_get_errno>
10016adc:	1007883a 	mov	r3,r2
10016ae0:	00800584 	movi	r2,22
10016ae4:	18800015 	stw	r2,0(r3)
10016ae8:	00bffa84 	movi	r2,-22
10016aec:	00001306 	br	10016b3c <alt_dev_llist_insert+0x90>
10016af0:	e0bffe17 	ldw	r2,-8(fp)
10016af4:	e0ffff17 	ldw	r3,-4(fp)
10016af8:	e0fffc15 	stw	r3,-16(fp)
10016afc:	e0bffd15 	stw	r2,-12(fp)
10016b00:	e0bffd17 	ldw	r2,-12(fp)
10016b04:	e0fffc17 	ldw	r3,-16(fp)
10016b08:	10c00115 	stw	r3,4(r2)
10016b0c:	e0bffc17 	ldw	r2,-16(fp)
10016b10:	10c00017 	ldw	r3,0(r2)
10016b14:	e0bffd17 	ldw	r2,-12(fp)
10016b18:	10c00015 	stw	r3,0(r2)
10016b1c:	e0bffc17 	ldw	r2,-16(fp)
10016b20:	10800017 	ldw	r2,0(r2)
10016b24:	e0fffd17 	ldw	r3,-12(fp)
10016b28:	10c00115 	stw	r3,4(r2)
10016b2c:	e0bffc17 	ldw	r2,-16(fp)
10016b30:	e0fffd17 	ldw	r3,-12(fp)
10016b34:	10c00015 	stw	r3,0(r2)
10016b38:	0005883a 	mov	r2,zero
10016b3c:	e037883a 	mov	sp,fp
10016b40:	dfc00117 	ldw	ra,4(sp)
10016b44:	df000017 	ldw	fp,0(sp)
10016b48:	dec00204 	addi	sp,sp,8
10016b4c:	f800283a 	ret

10016b50 <_do_ctors>:
10016b50:	defffd04 	addi	sp,sp,-12
10016b54:	dfc00215 	stw	ra,8(sp)
10016b58:	df000115 	stw	fp,4(sp)
10016b5c:	df000104 	addi	fp,sp,4
10016b60:	00840074 	movhi	r2,4097
10016b64:	109eb304 	addi	r2,r2,31436
10016b68:	e0bfff15 	stw	r2,-4(fp)
10016b6c:	00000606 	br	10016b88 <_do_ctors+0x38>
10016b70:	e0bfff17 	ldw	r2,-4(fp)
10016b74:	10800017 	ldw	r2,0(r2)
10016b78:	103ee83a 	callr	r2
10016b7c:	e0bfff17 	ldw	r2,-4(fp)
10016b80:	10bfff04 	addi	r2,r2,-4
10016b84:	e0bfff15 	stw	r2,-4(fp)
10016b88:	e0ffff17 	ldw	r3,-4(fp)
10016b8c:	00840074 	movhi	r2,4097
10016b90:	109eb404 	addi	r2,r2,31440
10016b94:	18bff62e 	bgeu	r3,r2,10016b70 <__alt_data_end+0xf8016b70>
10016b98:	0001883a 	nop
10016b9c:	e037883a 	mov	sp,fp
10016ba0:	dfc00117 	ldw	ra,4(sp)
10016ba4:	df000017 	ldw	fp,0(sp)
10016ba8:	dec00204 	addi	sp,sp,8
10016bac:	f800283a 	ret

10016bb0 <_do_dtors>:
10016bb0:	defffd04 	addi	sp,sp,-12
10016bb4:	dfc00215 	stw	ra,8(sp)
10016bb8:	df000115 	stw	fp,4(sp)
10016bbc:	df000104 	addi	fp,sp,4
10016bc0:	00840074 	movhi	r2,4097
10016bc4:	109eb304 	addi	r2,r2,31436
10016bc8:	e0bfff15 	stw	r2,-4(fp)
10016bcc:	00000606 	br	10016be8 <_do_dtors+0x38>
10016bd0:	e0bfff17 	ldw	r2,-4(fp)
10016bd4:	10800017 	ldw	r2,0(r2)
10016bd8:	103ee83a 	callr	r2
10016bdc:	e0bfff17 	ldw	r2,-4(fp)
10016be0:	10bfff04 	addi	r2,r2,-4
10016be4:	e0bfff15 	stw	r2,-4(fp)
10016be8:	e0ffff17 	ldw	r3,-4(fp)
10016bec:	00840074 	movhi	r2,4097
10016bf0:	109eb404 	addi	r2,r2,31440
10016bf4:	18bff62e 	bgeu	r3,r2,10016bd0 <__alt_data_end+0xf8016bd0>
10016bf8:	0001883a 	nop
10016bfc:	e037883a 	mov	sp,fp
10016c00:	dfc00117 	ldw	ra,4(sp)
10016c04:	df000017 	ldw	fp,0(sp)
10016c08:	dec00204 	addi	sp,sp,8
10016c0c:	f800283a 	ret

10016c10 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10016c10:	deffff04 	addi	sp,sp,-4
10016c14:	df000015 	stw	fp,0(sp)
10016c18:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10016c1c:	e037883a 	mov	sp,fp
10016c20:	df000017 	ldw	fp,0(sp)
10016c24:	dec00104 	addi	sp,sp,4
10016c28:	f800283a 	ret

10016c2c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10016c2c:	defff904 	addi	sp,sp,-28
10016c30:	dfc00615 	stw	ra,24(sp)
10016c34:	df000515 	stw	fp,20(sp)
10016c38:	df000504 	addi	fp,sp,20
10016c3c:	e13ffc15 	stw	r4,-16(fp)
10016c40:	e17ffd15 	stw	r5,-12(fp)
10016c44:	e1bffe15 	stw	r6,-8(fp)
10016c48:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10016c4c:	e0800217 	ldw	r2,8(fp)
10016c50:	d8800015 	stw	r2,0(sp)
10016c54:	e13ffc17 	ldw	r4,-16(fp)
10016c58:	e17ffd17 	ldw	r5,-12(fp)
10016c5c:	e1bffe17 	ldw	r6,-8(fp)
10016c60:	e1ffff17 	ldw	r7,-4(fp)
10016c64:	0016e0c0 	call	10016e0c <alt_iic_isr_register>
}  
10016c68:	e037883a 	mov	sp,fp
10016c6c:	dfc00117 	ldw	ra,4(sp)
10016c70:	df000017 	ldw	fp,0(sp)
10016c74:	dec00204 	addi	sp,sp,8
10016c78:	f800283a 	ret

10016c7c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10016c7c:	defff904 	addi	sp,sp,-28
10016c80:	df000615 	stw	fp,24(sp)
10016c84:	df000604 	addi	fp,sp,24
10016c88:	e13ffe15 	stw	r4,-8(fp)
10016c8c:	e17fff15 	stw	r5,-4(fp)
10016c90:	e0bfff17 	ldw	r2,-4(fp)
10016c94:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10016c98:	0005303a 	rdctl	r2,status
10016c9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10016ca0:	e0fffb17 	ldw	r3,-20(fp)
10016ca4:	00bfff84 	movi	r2,-2
10016ca8:	1884703a 	and	r2,r3,r2
10016cac:	1001703a 	wrctl	status,r2
  
  return context;
10016cb0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10016cb4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10016cb8:	e0bffa17 	ldw	r2,-24(fp)
10016cbc:	00c00044 	movi	r3,1
10016cc0:	1884983a 	sll	r2,r3,r2
10016cc4:	1007883a 	mov	r3,r2
10016cc8:	008400b4 	movhi	r2,4098
10016ccc:	10b55f04 	addi	r2,r2,-10884
10016cd0:	10800017 	ldw	r2,0(r2)
10016cd4:	1886b03a 	or	r3,r3,r2
10016cd8:	008400b4 	movhi	r2,4098
10016cdc:	10b55f04 	addi	r2,r2,-10884
10016ce0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10016ce4:	008400b4 	movhi	r2,4098
10016ce8:	10b55f04 	addi	r2,r2,-10884
10016cec:	10800017 	ldw	r2,0(r2)
10016cf0:	100170fa 	wrctl	ienable,r2
10016cf4:	e0bffc17 	ldw	r2,-16(fp)
10016cf8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10016cfc:	e0bffd17 	ldw	r2,-12(fp)
10016d00:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10016d04:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10016d08:	0001883a 	nop
}
10016d0c:	e037883a 	mov	sp,fp
10016d10:	df000017 	ldw	fp,0(sp)
10016d14:	dec00104 	addi	sp,sp,4
10016d18:	f800283a 	ret

10016d1c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10016d1c:	defff904 	addi	sp,sp,-28
10016d20:	df000615 	stw	fp,24(sp)
10016d24:	df000604 	addi	fp,sp,24
10016d28:	e13ffe15 	stw	r4,-8(fp)
10016d2c:	e17fff15 	stw	r5,-4(fp)
10016d30:	e0bfff17 	ldw	r2,-4(fp)
10016d34:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10016d38:	0005303a 	rdctl	r2,status
10016d3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10016d40:	e0fffb17 	ldw	r3,-20(fp)
10016d44:	00bfff84 	movi	r2,-2
10016d48:	1884703a 	and	r2,r3,r2
10016d4c:	1001703a 	wrctl	status,r2
  
  return context;
10016d50:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10016d54:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10016d58:	e0bffa17 	ldw	r2,-24(fp)
10016d5c:	00c00044 	movi	r3,1
10016d60:	1884983a 	sll	r2,r3,r2
10016d64:	0084303a 	nor	r2,zero,r2
10016d68:	1007883a 	mov	r3,r2
10016d6c:	008400b4 	movhi	r2,4098
10016d70:	10b55f04 	addi	r2,r2,-10884
10016d74:	10800017 	ldw	r2,0(r2)
10016d78:	1886703a 	and	r3,r3,r2
10016d7c:	008400b4 	movhi	r2,4098
10016d80:	10b55f04 	addi	r2,r2,-10884
10016d84:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10016d88:	008400b4 	movhi	r2,4098
10016d8c:	10b55f04 	addi	r2,r2,-10884
10016d90:	10800017 	ldw	r2,0(r2)
10016d94:	100170fa 	wrctl	ienable,r2
10016d98:	e0bffc17 	ldw	r2,-16(fp)
10016d9c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10016da0:	e0bffd17 	ldw	r2,-12(fp)
10016da4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10016da8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10016dac:	0001883a 	nop
}
10016db0:	e037883a 	mov	sp,fp
10016db4:	df000017 	ldw	fp,0(sp)
10016db8:	dec00104 	addi	sp,sp,4
10016dbc:	f800283a 	ret

10016dc0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10016dc0:	defffc04 	addi	sp,sp,-16
10016dc4:	df000315 	stw	fp,12(sp)
10016dc8:	df000304 	addi	fp,sp,12
10016dcc:	e13ffe15 	stw	r4,-8(fp)
10016dd0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10016dd4:	000530fa 	rdctl	r2,ienable
10016dd8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10016ddc:	e0bfff17 	ldw	r2,-4(fp)
10016de0:	00c00044 	movi	r3,1
10016de4:	1884983a 	sll	r2,r3,r2
10016de8:	1007883a 	mov	r3,r2
10016dec:	e0bffd17 	ldw	r2,-12(fp)
10016df0:	1884703a 	and	r2,r3,r2
10016df4:	1004c03a 	cmpne	r2,r2,zero
10016df8:	10803fcc 	andi	r2,r2,255
}
10016dfc:	e037883a 	mov	sp,fp
10016e00:	df000017 	ldw	fp,0(sp)
10016e04:	dec00104 	addi	sp,sp,4
10016e08:	f800283a 	ret

10016e0c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10016e0c:	defff504 	addi	sp,sp,-44
10016e10:	dfc00a15 	stw	ra,40(sp)
10016e14:	df000915 	stw	fp,36(sp)
10016e18:	df000904 	addi	fp,sp,36
10016e1c:	e13ffc15 	stw	r4,-16(fp)
10016e20:	e17ffd15 	stw	r5,-12(fp)
10016e24:	e1bffe15 	stw	r6,-8(fp)
10016e28:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10016e2c:	00bffa84 	movi	r2,-22
10016e30:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10016e34:	e0bffd17 	ldw	r2,-12(fp)
10016e38:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10016e3c:	e0bff817 	ldw	r2,-32(fp)
10016e40:	10800808 	cmpgei	r2,r2,32
10016e44:	1000271e 	bne	r2,zero,10016ee4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10016e48:	0005303a 	rdctl	r2,status
10016e4c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10016e50:	e0fffa17 	ldw	r3,-24(fp)
10016e54:	00bfff84 	movi	r2,-2
10016e58:	1884703a 	and	r2,r3,r2
10016e5c:	1001703a 	wrctl	status,r2
  
  return context;
10016e60:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10016e64:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
10016e68:	008400b4 	movhi	r2,4098
10016e6c:	10b56c04 	addi	r2,r2,-10832
10016e70:	e0fff817 	ldw	r3,-32(fp)
10016e74:	180690fa 	slli	r3,r3,3
10016e78:	10c5883a 	add	r2,r2,r3
10016e7c:	e0fffe17 	ldw	r3,-8(fp)
10016e80:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10016e84:	008400b4 	movhi	r2,4098
10016e88:	10b56c04 	addi	r2,r2,-10832
10016e8c:	e0fff817 	ldw	r3,-32(fp)
10016e90:	180690fa 	slli	r3,r3,3
10016e94:	10c5883a 	add	r2,r2,r3
10016e98:	10800104 	addi	r2,r2,4
10016e9c:	e0ffff17 	ldw	r3,-4(fp)
10016ea0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10016ea4:	e0bffe17 	ldw	r2,-8(fp)
10016ea8:	10000526 	beq	r2,zero,10016ec0 <alt_iic_isr_register+0xb4>
10016eac:	e0bff817 	ldw	r2,-32(fp)
10016eb0:	e13ffc17 	ldw	r4,-16(fp)
10016eb4:	100b883a 	mov	r5,r2
10016eb8:	0016c7c0 	call	10016c7c <alt_ic_irq_enable>
10016ebc:	00000406 	br	10016ed0 <alt_iic_isr_register+0xc4>
10016ec0:	e0bff817 	ldw	r2,-32(fp)
10016ec4:	e13ffc17 	ldw	r4,-16(fp)
10016ec8:	100b883a 	mov	r5,r2
10016ecc:	0016d1c0 	call	10016d1c <alt_ic_irq_disable>
10016ed0:	e0bff715 	stw	r2,-36(fp)
10016ed4:	e0bff917 	ldw	r2,-28(fp)
10016ed8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10016edc:	e0bffb17 	ldw	r2,-20(fp)
10016ee0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10016ee4:	e0bff717 	ldw	r2,-36(fp)
}
10016ee8:	e037883a 	mov	sp,fp
10016eec:	dfc00117 	ldw	ra,4(sp)
10016ef0:	df000017 	ldw	fp,0(sp)
10016ef4:	dec00204 	addi	sp,sp,8
10016ef8:	f800283a 	ret

10016efc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10016efc:	defff804 	addi	sp,sp,-32
10016f00:	dfc00715 	stw	ra,28(sp)
10016f04:	df000615 	stw	fp,24(sp)
10016f08:	dc000515 	stw	r16,20(sp)
10016f0c:	df000604 	addi	fp,sp,24
10016f10:	e13ffb15 	stw	r4,-20(fp)
10016f14:	e17ffc15 	stw	r5,-16(fp)
10016f18:	e1bffd15 	stw	r6,-12(fp)
10016f1c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10016f20:	e13ffc17 	ldw	r4,-16(fp)
10016f24:	e17ffd17 	ldw	r5,-12(fp)
10016f28:	e1bffe17 	ldw	r6,-8(fp)
10016f2c:	00171980 	call	10017198 <open>
10016f30:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10016f34:	e0bffa17 	ldw	r2,-24(fp)
10016f38:	10002216 	blt	r2,zero,10016fc4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10016f3c:	040400b4 	movhi	r16,4098
10016f40:	842a1104 	addi	r16,r16,-22460
10016f44:	e0bffa17 	ldw	r2,-24(fp)
10016f48:	1009883a 	mov	r4,r2
10016f4c:	01400304 	movi	r5,12
10016f50:	00074c40 	call	100074c4 <__mulsi3>
10016f54:	8085883a 	add	r2,r16,r2
10016f58:	10c00017 	ldw	r3,0(r2)
10016f5c:	e0bffb17 	ldw	r2,-20(fp)
10016f60:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10016f64:	040400b4 	movhi	r16,4098
10016f68:	842a1104 	addi	r16,r16,-22460
10016f6c:	e0bffa17 	ldw	r2,-24(fp)
10016f70:	1009883a 	mov	r4,r2
10016f74:	01400304 	movi	r5,12
10016f78:	00074c40 	call	100074c4 <__mulsi3>
10016f7c:	8085883a 	add	r2,r16,r2
10016f80:	10800104 	addi	r2,r2,4
10016f84:	10c00017 	ldw	r3,0(r2)
10016f88:	e0bffb17 	ldw	r2,-20(fp)
10016f8c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10016f90:	040400b4 	movhi	r16,4098
10016f94:	842a1104 	addi	r16,r16,-22460
10016f98:	e0bffa17 	ldw	r2,-24(fp)
10016f9c:	1009883a 	mov	r4,r2
10016fa0:	01400304 	movi	r5,12
10016fa4:	00074c40 	call	100074c4 <__mulsi3>
10016fa8:	8085883a 	add	r2,r16,r2
10016fac:	10800204 	addi	r2,r2,8
10016fb0:	10c00017 	ldw	r3,0(r2)
10016fb4:	e0bffb17 	ldw	r2,-20(fp)
10016fb8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10016fbc:	e13ffa17 	ldw	r4,-24(fp)
10016fc0:	00159f80 	call	100159f8 <alt_release_fd>
  }
} 
10016fc4:	e6ffff04 	addi	sp,fp,-4
10016fc8:	dfc00217 	ldw	ra,8(sp)
10016fcc:	df000117 	ldw	fp,4(sp)
10016fd0:	dc000017 	ldw	r16,0(sp)
10016fd4:	dec00304 	addi	sp,sp,12
10016fd8:	f800283a 	ret

10016fdc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10016fdc:	defffb04 	addi	sp,sp,-20
10016fe0:	dfc00415 	stw	ra,16(sp)
10016fe4:	df000315 	stw	fp,12(sp)
10016fe8:	df000304 	addi	fp,sp,12
10016fec:	e13ffd15 	stw	r4,-12(fp)
10016ff0:	e17ffe15 	stw	r5,-8(fp)
10016ff4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10016ff8:	010400b4 	movhi	r4,4098
10016ffc:	212a1404 	addi	r4,r4,-22448
10017000:	e17ffd17 	ldw	r5,-12(fp)
10017004:	01800044 	movi	r6,1
10017008:	01c07fc4 	movi	r7,511
1001700c:	0016efc0 	call	10016efc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10017010:	010400b4 	movhi	r4,4098
10017014:	212a1104 	addi	r4,r4,-22460
10017018:	e17ffe17 	ldw	r5,-8(fp)
1001701c:	000d883a 	mov	r6,zero
10017020:	01c07fc4 	movi	r7,511
10017024:	0016efc0 	call	10016efc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10017028:	010400b4 	movhi	r4,4098
1001702c:	212a1704 	addi	r4,r4,-22436
10017030:	e17fff17 	ldw	r5,-4(fp)
10017034:	01800044 	movi	r6,1
10017038:	01c07fc4 	movi	r7,511
1001703c:	0016efc0 	call	10016efc <alt_open_fd>
}  
10017040:	e037883a 	mov	sp,fp
10017044:	dfc00117 	ldw	ra,4(sp)
10017048:	df000017 	ldw	fp,0(sp)
1001704c:	dec00204 	addi	sp,sp,8
10017050:	f800283a 	ret

10017054 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10017054:	defffe04 	addi	sp,sp,-8
10017058:	dfc00115 	stw	ra,4(sp)
1001705c:	df000015 	stw	fp,0(sp)
10017060:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10017064:	008400b4 	movhi	r2,4098
10017068:	10ae9404 	addi	r2,r2,-17840
1001706c:	10800017 	ldw	r2,0(r2)
10017070:	10000526 	beq	r2,zero,10017088 <alt_get_errno+0x34>
10017074:	008400b4 	movhi	r2,4098
10017078:	10ae9404 	addi	r2,r2,-17840
1001707c:	10800017 	ldw	r2,0(r2)
10017080:	103ee83a 	callr	r2
10017084:	00000206 	br	10017090 <alt_get_errno+0x3c>
10017088:	008400b4 	movhi	r2,4098
1001708c:	10b55b04 	addi	r2,r2,-10900
}
10017090:	e037883a 	mov	sp,fp
10017094:	dfc00117 	ldw	ra,4(sp)
10017098:	df000017 	ldw	fp,0(sp)
1001709c:	dec00204 	addi	sp,sp,8
100170a0:	f800283a 	ret

100170a4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
100170a4:	defffb04 	addi	sp,sp,-20
100170a8:	dfc00415 	stw	ra,16(sp)
100170ac:	df000315 	stw	fp,12(sp)
100170b0:	dc000215 	stw	r16,8(sp)
100170b4:	df000304 	addi	fp,sp,12
100170b8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
100170bc:	e0bffe17 	ldw	r2,-8(fp)
100170c0:	10800217 	ldw	r2,8(r2)
100170c4:	10d00034 	orhi	r3,r2,16384
100170c8:	e0bffe17 	ldw	r2,-8(fp)
100170cc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100170d0:	e03ffd15 	stw	zero,-12(fp)
100170d4:	00002306 	br	10017164 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100170d8:	040400b4 	movhi	r16,4098
100170dc:	842a1104 	addi	r16,r16,-22460
100170e0:	e0bffd17 	ldw	r2,-12(fp)
100170e4:	1009883a 	mov	r4,r2
100170e8:	01400304 	movi	r5,12
100170ec:	00074c40 	call	100074c4 <__mulsi3>
100170f0:	8085883a 	add	r2,r16,r2
100170f4:	10c00017 	ldw	r3,0(r2)
100170f8:	e0bffe17 	ldw	r2,-8(fp)
100170fc:	10800017 	ldw	r2,0(r2)
10017100:	1880151e 	bne	r3,r2,10017158 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10017104:	040400b4 	movhi	r16,4098
10017108:	842a1104 	addi	r16,r16,-22460
1001710c:	e0bffd17 	ldw	r2,-12(fp)
10017110:	1009883a 	mov	r4,r2
10017114:	01400304 	movi	r5,12
10017118:	00074c40 	call	100074c4 <__mulsi3>
1001711c:	8085883a 	add	r2,r16,r2
10017120:	10800204 	addi	r2,r2,8
10017124:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10017128:	10000b0e 	bge	r2,zero,10017158 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1001712c:	e13ffd17 	ldw	r4,-12(fp)
10017130:	01400304 	movi	r5,12
10017134:	00074c40 	call	100074c4 <__mulsi3>
10017138:	1007883a 	mov	r3,r2
1001713c:	008400b4 	movhi	r2,4098
10017140:	10aa1104 	addi	r2,r2,-22460
10017144:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10017148:	e0bffe17 	ldw	r2,-8(fp)
1001714c:	18800226 	beq	r3,r2,10017158 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10017150:	00bffcc4 	movi	r2,-13
10017154:	00000a06 	br	10017180 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10017158:	e0bffd17 	ldw	r2,-12(fp)
1001715c:	10800044 	addi	r2,r2,1
10017160:	e0bffd15 	stw	r2,-12(fp)
10017164:	008400b4 	movhi	r2,4098
10017168:	10ae9304 	addi	r2,r2,-17844
1001716c:	10800017 	ldw	r2,0(r2)
10017170:	1007883a 	mov	r3,r2
10017174:	e0bffd17 	ldw	r2,-12(fp)
10017178:	18bfd72e 	bgeu	r3,r2,100170d8 <__alt_data_end+0xf80170d8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1001717c:	0005883a 	mov	r2,zero
}
10017180:	e6ffff04 	addi	sp,fp,-4
10017184:	dfc00217 	ldw	ra,8(sp)
10017188:	df000117 	ldw	fp,4(sp)
1001718c:	dc000017 	ldw	r16,0(sp)
10017190:	dec00304 	addi	sp,sp,12
10017194:	f800283a 	ret

10017198 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10017198:	defff604 	addi	sp,sp,-40
1001719c:	dfc00915 	stw	ra,36(sp)
100171a0:	df000815 	stw	fp,32(sp)
100171a4:	df000804 	addi	fp,sp,32
100171a8:	e13ffd15 	stw	r4,-12(fp)
100171ac:	e17ffe15 	stw	r5,-8(fp)
100171b0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
100171b4:	00bfffc4 	movi	r2,-1
100171b8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
100171bc:	00bffb44 	movi	r2,-19
100171c0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
100171c4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
100171c8:	e13ffd17 	ldw	r4,-12(fp)
100171cc:	014400b4 	movhi	r5,4098
100171d0:	296e9104 	addi	r5,r5,-17852
100171d4:	00174b40 	call	100174b4 <alt_find_dev>
100171d8:	e0bff815 	stw	r2,-32(fp)
100171dc:	e0bff817 	ldw	r2,-32(fp)
100171e0:	1000051e 	bne	r2,zero,100171f8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
100171e4:	e13ffd17 	ldw	r4,-12(fp)
100171e8:	00175440 	call	10017544 <alt_find_file>
100171ec:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
100171f0:	00800044 	movi	r2,1
100171f4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
100171f8:	e0bff817 	ldw	r2,-32(fp)
100171fc:	10002b26 	beq	r2,zero,100172ac <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10017200:	e13ff817 	ldw	r4,-32(fp)
10017204:	00176580 	call	10017658 <alt_get_fd>
10017208:	e0bff915 	stw	r2,-28(fp)
1001720c:	e0bff917 	ldw	r2,-28(fp)
10017210:	1000030e 	bge	r2,zero,10017220 <open+0x88>
    {
      status = index;
10017214:	e0bff917 	ldw	r2,-28(fp)
10017218:	e0bffa15 	stw	r2,-24(fp)
1001721c:	00002506 	br	100172b4 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10017220:	e13ff917 	ldw	r4,-28(fp)
10017224:	01400304 	movi	r5,12
10017228:	00074c40 	call	100074c4 <__mulsi3>
1001722c:	1007883a 	mov	r3,r2
10017230:	008400b4 	movhi	r2,4098
10017234:	10aa1104 	addi	r2,r2,-22460
10017238:	1885883a 	add	r2,r3,r2
1001723c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10017240:	e0fffe17 	ldw	r3,-8(fp)
10017244:	00900034 	movhi	r2,16384
10017248:	10bfffc4 	addi	r2,r2,-1
1001724c:	1886703a 	and	r3,r3,r2
10017250:	e0bffc17 	ldw	r2,-16(fp)
10017254:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10017258:	e0bffb17 	ldw	r2,-20(fp)
1001725c:	1000051e 	bne	r2,zero,10017274 <open+0xdc>
10017260:	e13ffc17 	ldw	r4,-16(fp)
10017264:	00170a40 	call	100170a4 <alt_file_locked>
10017268:	e0bffa15 	stw	r2,-24(fp)
1001726c:	e0bffa17 	ldw	r2,-24(fp)
10017270:	10001016 	blt	r2,zero,100172b4 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10017274:	e0bff817 	ldw	r2,-32(fp)
10017278:	10800317 	ldw	r2,12(r2)
1001727c:	10000826 	beq	r2,zero,100172a0 <open+0x108>
10017280:	e0bff817 	ldw	r2,-32(fp)
10017284:	10800317 	ldw	r2,12(r2)
10017288:	e13ffc17 	ldw	r4,-16(fp)
1001728c:	e17ffd17 	ldw	r5,-12(fp)
10017290:	e1bffe17 	ldw	r6,-8(fp)
10017294:	e1ffff17 	ldw	r7,-4(fp)
10017298:	103ee83a 	callr	r2
1001729c:	00000106 	br	100172a4 <open+0x10c>
100172a0:	0005883a 	mov	r2,zero
100172a4:	e0bffa15 	stw	r2,-24(fp)
100172a8:	00000206 	br	100172b4 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
100172ac:	00bffb44 	movi	r2,-19
100172b0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
100172b4:	e0bffa17 	ldw	r2,-24(fp)
100172b8:	1000090e 	bge	r2,zero,100172e0 <open+0x148>
  {
    alt_release_fd (index);  
100172bc:	e13ff917 	ldw	r4,-28(fp)
100172c0:	00159f80 	call	100159f8 <alt_release_fd>
    ALT_ERRNO = -status;
100172c4:	00170540 	call	10017054 <alt_get_errno>
100172c8:	1007883a 	mov	r3,r2
100172cc:	e0bffa17 	ldw	r2,-24(fp)
100172d0:	0085c83a 	sub	r2,zero,r2
100172d4:	18800015 	stw	r2,0(r3)
    return -1;
100172d8:	00bfffc4 	movi	r2,-1
100172dc:	00000106 	br	100172e4 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
100172e0:	e0bff917 	ldw	r2,-28(fp)
}
100172e4:	e037883a 	mov	sp,fp
100172e8:	dfc00117 	ldw	ra,4(sp)
100172ec:	df000017 	ldw	fp,0(sp)
100172f0:	dec00204 	addi	sp,sp,8
100172f4:	f800283a 	ret

100172f8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
100172f8:	defffa04 	addi	sp,sp,-24
100172fc:	df000515 	stw	fp,20(sp)
10017300:	df000504 	addi	fp,sp,20
10017304:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10017308:	0005303a 	rdctl	r2,status
1001730c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10017310:	e0fffc17 	ldw	r3,-16(fp)
10017314:	00bfff84 	movi	r2,-2
10017318:	1884703a 	and	r2,r3,r2
1001731c:	1001703a 	wrctl	status,r2
  
  return context;
10017320:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10017324:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10017328:	e0bfff17 	ldw	r2,-4(fp)
1001732c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10017330:	e0bffd17 	ldw	r2,-12(fp)
10017334:	10800017 	ldw	r2,0(r2)
10017338:	e0fffd17 	ldw	r3,-12(fp)
1001733c:	18c00117 	ldw	r3,4(r3)
10017340:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10017344:	e0bffd17 	ldw	r2,-12(fp)
10017348:	10800117 	ldw	r2,4(r2)
1001734c:	e0fffd17 	ldw	r3,-12(fp)
10017350:	18c00017 	ldw	r3,0(r3)
10017354:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10017358:	e0bffd17 	ldw	r2,-12(fp)
1001735c:	e0fffd17 	ldw	r3,-12(fp)
10017360:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10017364:	e0bffd17 	ldw	r2,-12(fp)
10017368:	e0fffd17 	ldw	r3,-12(fp)
1001736c:	10c00015 	stw	r3,0(r2)
10017370:	e0bffb17 	ldw	r2,-20(fp)
10017374:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10017378:	e0bffe17 	ldw	r2,-8(fp)
1001737c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10017380:	e037883a 	mov	sp,fp
10017384:	df000017 	ldw	fp,0(sp)
10017388:	dec00104 	addi	sp,sp,4
1001738c:	f800283a 	ret

10017390 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10017390:	defffb04 	addi	sp,sp,-20
10017394:	dfc00415 	stw	ra,16(sp)
10017398:	df000315 	stw	fp,12(sp)
1001739c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
100173a0:	d0a00e17 	ldw	r2,-32712(gp)
100173a4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
100173a8:	d0a6d817 	ldw	r2,-25760(gp)
100173ac:	10800044 	addi	r2,r2,1
100173b0:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100173b4:	00002e06 	br	10017470 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
100173b8:	e0bffd17 	ldw	r2,-12(fp)
100173bc:	10800017 	ldw	r2,0(r2)
100173c0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
100173c4:	e0bffd17 	ldw	r2,-12(fp)
100173c8:	10800403 	ldbu	r2,16(r2)
100173cc:	10803fcc 	andi	r2,r2,255
100173d0:	10000426 	beq	r2,zero,100173e4 <alt_tick+0x54>
100173d4:	d0a6d817 	ldw	r2,-25760(gp)
100173d8:	1000021e 	bne	r2,zero,100173e4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
100173dc:	e0bffd17 	ldw	r2,-12(fp)
100173e0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
100173e4:	e0bffd17 	ldw	r2,-12(fp)
100173e8:	10800217 	ldw	r2,8(r2)
100173ec:	d0e6d817 	ldw	r3,-25760(gp)
100173f0:	18801d36 	bltu	r3,r2,10017468 <alt_tick+0xd8>
100173f4:	e0bffd17 	ldw	r2,-12(fp)
100173f8:	10800403 	ldbu	r2,16(r2)
100173fc:	10803fcc 	andi	r2,r2,255
10017400:	1000191e 	bne	r2,zero,10017468 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10017404:	e0bffd17 	ldw	r2,-12(fp)
10017408:	10800317 	ldw	r2,12(r2)
1001740c:	e0fffd17 	ldw	r3,-12(fp)
10017410:	18c00517 	ldw	r3,20(r3)
10017414:	1809883a 	mov	r4,r3
10017418:	103ee83a 	callr	r2
1001741c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10017420:	e0bfff17 	ldw	r2,-4(fp)
10017424:	1000031e 	bne	r2,zero,10017434 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10017428:	e13ffd17 	ldw	r4,-12(fp)
1001742c:	00172f80 	call	100172f8 <alt_alarm_stop>
10017430:	00000d06 	br	10017468 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10017434:	e0bffd17 	ldw	r2,-12(fp)
10017438:	10c00217 	ldw	r3,8(r2)
1001743c:	e0bfff17 	ldw	r2,-4(fp)
10017440:	1887883a 	add	r3,r3,r2
10017444:	e0bffd17 	ldw	r2,-12(fp)
10017448:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1001744c:	e0bffd17 	ldw	r2,-12(fp)
10017450:	10c00217 	ldw	r3,8(r2)
10017454:	d0a6d817 	ldw	r2,-25760(gp)
10017458:	1880032e 	bgeu	r3,r2,10017468 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1001745c:	e0bffd17 	ldw	r2,-12(fp)
10017460:	00c00044 	movi	r3,1
10017464:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10017468:	e0bffe17 	ldw	r2,-8(fp)
1001746c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10017470:	e0fffd17 	ldw	r3,-12(fp)
10017474:	d0a00e04 	addi	r2,gp,-32712
10017478:	18bfcf1e 	bne	r3,r2,100173b8 <__alt_data_end+0xf80173b8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1001747c:	0001883a 	nop
}
10017480:	e037883a 	mov	sp,fp
10017484:	dfc00117 	ldw	ra,4(sp)
10017488:	df000017 	ldw	fp,0(sp)
1001748c:	dec00204 	addi	sp,sp,8
10017490:	f800283a 	ret

10017494 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10017494:	deffff04 	addi	sp,sp,-4
10017498:	df000015 	stw	fp,0(sp)
1001749c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
100174a0:	000170fa 	wrctl	ienable,zero
}
100174a4:	e037883a 	mov	sp,fp
100174a8:	df000017 	ldw	fp,0(sp)
100174ac:	dec00104 	addi	sp,sp,4
100174b0:	f800283a 	ret

100174b4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
100174b4:	defffa04 	addi	sp,sp,-24
100174b8:	dfc00515 	stw	ra,20(sp)
100174bc:	df000415 	stw	fp,16(sp)
100174c0:	df000404 	addi	fp,sp,16
100174c4:	e13ffe15 	stw	r4,-8(fp)
100174c8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
100174cc:	e0bfff17 	ldw	r2,-4(fp)
100174d0:	10800017 	ldw	r2,0(r2)
100174d4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
100174d8:	e13ffe17 	ldw	r4,-8(fp)
100174dc:	0009d640 	call	10009d64 <strlen>
100174e0:	10800044 	addi	r2,r2,1
100174e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100174e8:	00000d06 	br	10017520 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
100174ec:	e0bffc17 	ldw	r2,-16(fp)
100174f0:	10c00217 	ldw	r3,8(r2)
100174f4:	e0bffd17 	ldw	r2,-12(fp)
100174f8:	1809883a 	mov	r4,r3
100174fc:	e17ffe17 	ldw	r5,-8(fp)
10017500:	100d883a 	mov	r6,r2
10017504:	00177780 	call	10017778 <memcmp>
10017508:	1000021e 	bne	r2,zero,10017514 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1001750c:	e0bffc17 	ldw	r2,-16(fp)
10017510:	00000706 	br	10017530 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10017514:	e0bffc17 	ldw	r2,-16(fp)
10017518:	10800017 	ldw	r2,0(r2)
1001751c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10017520:	e0fffc17 	ldw	r3,-16(fp)
10017524:	e0bfff17 	ldw	r2,-4(fp)
10017528:	18bff01e 	bne	r3,r2,100174ec <__alt_data_end+0xf80174ec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1001752c:	0005883a 	mov	r2,zero
}
10017530:	e037883a 	mov	sp,fp
10017534:	dfc00117 	ldw	ra,4(sp)
10017538:	df000017 	ldw	fp,0(sp)
1001753c:	dec00204 	addi	sp,sp,8
10017540:	f800283a 	ret

10017544 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10017544:	defffb04 	addi	sp,sp,-20
10017548:	dfc00415 	stw	ra,16(sp)
1001754c:	df000315 	stw	fp,12(sp)
10017550:	df000304 	addi	fp,sp,12
10017554:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10017558:	008400b4 	movhi	r2,4098
1001755c:	10ae8f04 	addi	r2,r2,-17860
10017560:	10800017 	ldw	r2,0(r2)
10017564:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10017568:	00003106 	br	10017630 <alt_find_file+0xec>
  {
    len = strlen(next->name);
1001756c:	e0bffd17 	ldw	r2,-12(fp)
10017570:	10800217 	ldw	r2,8(r2)
10017574:	1009883a 	mov	r4,r2
10017578:	0009d640 	call	10009d64 <strlen>
1001757c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10017580:	e0bffd17 	ldw	r2,-12(fp)
10017584:	10c00217 	ldw	r3,8(r2)
10017588:	e0bffe17 	ldw	r2,-8(fp)
1001758c:	10bfffc4 	addi	r2,r2,-1
10017590:	1885883a 	add	r2,r3,r2
10017594:	10800003 	ldbu	r2,0(r2)
10017598:	10803fcc 	andi	r2,r2,255
1001759c:	1080201c 	xori	r2,r2,128
100175a0:	10bfe004 	addi	r2,r2,-128
100175a4:	10800bd8 	cmpnei	r2,r2,47
100175a8:	1000031e 	bne	r2,zero,100175b8 <alt_find_file+0x74>
    {
      len -= 1;
100175ac:	e0bffe17 	ldw	r2,-8(fp)
100175b0:	10bfffc4 	addi	r2,r2,-1
100175b4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100175b8:	e0bffe17 	ldw	r2,-8(fp)
100175bc:	e0ffff17 	ldw	r3,-4(fp)
100175c0:	1885883a 	add	r2,r3,r2
100175c4:	10800003 	ldbu	r2,0(r2)
100175c8:	10803fcc 	andi	r2,r2,255
100175cc:	1080201c 	xori	r2,r2,128
100175d0:	10bfe004 	addi	r2,r2,-128
100175d4:	10800be0 	cmpeqi	r2,r2,47
100175d8:	1000081e 	bne	r2,zero,100175fc <alt_find_file+0xb8>
100175dc:	e0bffe17 	ldw	r2,-8(fp)
100175e0:	e0ffff17 	ldw	r3,-4(fp)
100175e4:	1885883a 	add	r2,r3,r2
100175e8:	10800003 	ldbu	r2,0(r2)
100175ec:	10803fcc 	andi	r2,r2,255
100175f0:	1080201c 	xori	r2,r2,128
100175f4:	10bfe004 	addi	r2,r2,-128
100175f8:	10000a1e 	bne	r2,zero,10017624 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
100175fc:	e0bffd17 	ldw	r2,-12(fp)
10017600:	10c00217 	ldw	r3,8(r2)
10017604:	e0bffe17 	ldw	r2,-8(fp)
10017608:	1809883a 	mov	r4,r3
1001760c:	e17fff17 	ldw	r5,-4(fp)
10017610:	100d883a 	mov	r6,r2
10017614:	00177780 	call	10017778 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10017618:	1000021e 	bne	r2,zero,10017624 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1001761c:	e0bffd17 	ldw	r2,-12(fp)
10017620:	00000806 	br	10017644 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10017624:	e0bffd17 	ldw	r2,-12(fp)
10017628:	10800017 	ldw	r2,0(r2)
1001762c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10017630:	e0fffd17 	ldw	r3,-12(fp)
10017634:	008400b4 	movhi	r2,4098
10017638:	10ae8f04 	addi	r2,r2,-17860
1001763c:	18bfcb1e 	bne	r3,r2,1001756c <__alt_data_end+0xf801756c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10017640:	0005883a 	mov	r2,zero
}
10017644:	e037883a 	mov	sp,fp
10017648:	dfc00117 	ldw	ra,4(sp)
1001764c:	df000017 	ldw	fp,0(sp)
10017650:	dec00204 	addi	sp,sp,8
10017654:	f800283a 	ret

10017658 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10017658:	defffa04 	addi	sp,sp,-24
1001765c:	dfc00515 	stw	ra,20(sp)
10017660:	df000415 	stw	fp,16(sp)
10017664:	dc000315 	stw	r16,12(sp)
10017668:	df000404 	addi	fp,sp,16
1001766c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10017670:	00bffa04 	movi	r2,-24
10017674:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10017678:	e03ffc15 	stw	zero,-16(fp)
1001767c:	00002106 	br	10017704 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10017680:	040400b4 	movhi	r16,4098
10017684:	842a1104 	addi	r16,r16,-22460
10017688:	e0bffc17 	ldw	r2,-16(fp)
1001768c:	1009883a 	mov	r4,r2
10017690:	01400304 	movi	r5,12
10017694:	00074c40 	call	100074c4 <__mulsi3>
10017698:	8085883a 	add	r2,r16,r2
1001769c:	10800017 	ldw	r2,0(r2)
100176a0:	1000151e 	bne	r2,zero,100176f8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
100176a4:	040400b4 	movhi	r16,4098
100176a8:	842a1104 	addi	r16,r16,-22460
100176ac:	e0bffc17 	ldw	r2,-16(fp)
100176b0:	1009883a 	mov	r4,r2
100176b4:	01400304 	movi	r5,12
100176b8:	00074c40 	call	100074c4 <__mulsi3>
100176bc:	8085883a 	add	r2,r16,r2
100176c0:	e0fffe17 	ldw	r3,-8(fp)
100176c4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
100176c8:	008400b4 	movhi	r2,4098
100176cc:	10ae9304 	addi	r2,r2,-17844
100176d0:	10c00017 	ldw	r3,0(r2)
100176d4:	e0bffc17 	ldw	r2,-16(fp)
100176d8:	1880040e 	bge	r3,r2,100176ec <alt_get_fd+0x94>
      {
        alt_max_fd = i;
100176dc:	008400b4 	movhi	r2,4098
100176e0:	10ae9304 	addi	r2,r2,-17844
100176e4:	e0fffc17 	ldw	r3,-16(fp)
100176e8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
100176ec:	e0bffc17 	ldw	r2,-16(fp)
100176f0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
100176f4:	00000606 	br	10017710 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100176f8:	e0bffc17 	ldw	r2,-16(fp)
100176fc:	10800044 	addi	r2,r2,1
10017700:	e0bffc15 	stw	r2,-16(fp)
10017704:	e0bffc17 	ldw	r2,-16(fp)
10017708:	10800810 	cmplti	r2,r2,32
1001770c:	103fdc1e 	bne	r2,zero,10017680 <__alt_data_end+0xf8017680>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10017710:	e0bffd17 	ldw	r2,-12(fp)
}
10017714:	e6ffff04 	addi	sp,fp,-4
10017718:	dfc00217 	ldw	ra,8(sp)
1001771c:	df000117 	ldw	fp,4(sp)
10017720:	dc000017 	ldw	r16,0(sp)
10017724:	dec00304 	addi	sp,sp,12
10017728:	f800283a 	ret

1001772c <atexit>:
1001772c:	200b883a 	mov	r5,r4
10017730:	000d883a 	mov	r6,zero
10017734:	0009883a 	mov	r4,zero
10017738:	000f883a 	mov	r7,zero
1001773c:	00177f41 	jmpi	100177f4 <__register_exitproc>

10017740 <exit>:
10017740:	defffe04 	addi	sp,sp,-8
10017744:	000b883a 	mov	r5,zero
10017748:	dc000015 	stw	r16,0(sp)
1001774c:	dfc00115 	stw	ra,4(sp)
10017750:	2021883a 	mov	r16,r4
10017754:	00179080 	call	10017908 <__call_exitprocs>
10017758:	008400b4 	movhi	r2,4098
1001775c:	10ae8904 	addi	r2,r2,-17884
10017760:	11000017 	ldw	r4,0(r2)
10017764:	20800f17 	ldw	r2,60(r4)
10017768:	10000126 	beq	r2,zero,10017770 <exit+0x30>
1001776c:	103ee83a 	callr	r2
10017770:	8009883a 	mov	r4,r16
10017774:	0017a9c0 	call	10017a9c <_exit>

10017778 <memcmp>:
10017778:	01c000c4 	movi	r7,3
1001777c:	3980192e 	bgeu	r7,r6,100177e4 <memcmp+0x6c>
10017780:	2144b03a 	or	r2,r4,r5
10017784:	11c4703a 	and	r2,r2,r7
10017788:	10000f26 	beq	r2,zero,100177c8 <memcmp+0x50>
1001778c:	20800003 	ldbu	r2,0(r4)
10017790:	28c00003 	ldbu	r3,0(r5)
10017794:	10c0151e 	bne	r2,r3,100177ec <memcmp+0x74>
10017798:	31bfff84 	addi	r6,r6,-2
1001779c:	01ffffc4 	movi	r7,-1
100177a0:	00000406 	br	100177b4 <memcmp+0x3c>
100177a4:	20800003 	ldbu	r2,0(r4)
100177a8:	28c00003 	ldbu	r3,0(r5)
100177ac:	31bfffc4 	addi	r6,r6,-1
100177b0:	10c00e1e 	bne	r2,r3,100177ec <memcmp+0x74>
100177b4:	21000044 	addi	r4,r4,1
100177b8:	29400044 	addi	r5,r5,1
100177bc:	31fff91e 	bne	r6,r7,100177a4 <__alt_data_end+0xf80177a4>
100177c0:	0005883a 	mov	r2,zero
100177c4:	f800283a 	ret
100177c8:	20c00017 	ldw	r3,0(r4)
100177cc:	28800017 	ldw	r2,0(r5)
100177d0:	1880041e 	bne	r3,r2,100177e4 <memcmp+0x6c>
100177d4:	31bfff04 	addi	r6,r6,-4
100177d8:	21000104 	addi	r4,r4,4
100177dc:	29400104 	addi	r5,r5,4
100177e0:	39bff936 	bltu	r7,r6,100177c8 <__alt_data_end+0xf80177c8>
100177e4:	303fe91e 	bne	r6,zero,1001778c <__alt_data_end+0xf801778c>
100177e8:	003ff506 	br	100177c0 <__alt_data_end+0xf80177c0>
100177ec:	10c5c83a 	sub	r2,r2,r3
100177f0:	f800283a 	ret

100177f4 <__register_exitproc>:
100177f4:	008400b4 	movhi	r2,4098
100177f8:	defffa04 	addi	sp,sp,-24
100177fc:	10ae8904 	addi	r2,r2,-17884
10017800:	dc000315 	stw	r16,12(sp)
10017804:	14000017 	ldw	r16,0(r2)
10017808:	dc400415 	stw	r17,16(sp)
1001780c:	dfc00515 	stw	ra,20(sp)
10017810:	80805217 	ldw	r2,328(r16)
10017814:	2023883a 	mov	r17,r4
10017818:	10003626 	beq	r2,zero,100178f4 <__register_exitproc+0x100>
1001781c:	10c00117 	ldw	r3,4(r2)
10017820:	010007c4 	movi	r4,31
10017824:	20c00e16 	blt	r4,r3,10017860 <__register_exitproc+0x6c>
10017828:	1a400044 	addi	r9,r3,1
1001782c:	8800211e 	bne	r17,zero,100178b4 <__register_exitproc+0xc0>
10017830:	18c00084 	addi	r3,r3,2
10017834:	18c7883a 	add	r3,r3,r3
10017838:	18c7883a 	add	r3,r3,r3
1001783c:	12400115 	stw	r9,4(r2)
10017840:	10c7883a 	add	r3,r2,r3
10017844:	19400015 	stw	r5,0(r3)
10017848:	0005883a 	mov	r2,zero
1001784c:	dfc00517 	ldw	ra,20(sp)
10017850:	dc400417 	ldw	r17,16(sp)
10017854:	dc000317 	ldw	r16,12(sp)
10017858:	dec00604 	addi	sp,sp,24
1001785c:	f800283a 	ret
10017860:	00800034 	movhi	r2,0
10017864:	10800004 	addi	r2,r2,0
10017868:	10002526 	beq	r2,zero,10017900 <__register_exitproc+0x10c>
1001786c:	01006404 	movi	r4,400
10017870:	d9400015 	stw	r5,0(sp)
10017874:	d9800115 	stw	r6,4(sp)
10017878:	d9c00215 	stw	r7,8(sp)
1001787c:	00000000 	call	10000000 <__reset>
10017880:	d9400017 	ldw	r5,0(sp)
10017884:	d9800117 	ldw	r6,4(sp)
10017888:	d9c00217 	ldw	r7,8(sp)
1001788c:	10001c26 	beq	r2,zero,10017900 <__register_exitproc+0x10c>
10017890:	80c05217 	ldw	r3,328(r16)
10017894:	10000115 	stw	zero,4(r2)
10017898:	02400044 	movi	r9,1
1001789c:	10c00015 	stw	r3,0(r2)
100178a0:	80805215 	stw	r2,328(r16)
100178a4:	10006215 	stw	zero,392(r2)
100178a8:	10006315 	stw	zero,396(r2)
100178ac:	0007883a 	mov	r3,zero
100178b0:	883fdf26 	beq	r17,zero,10017830 <__alt_data_end+0xf8017830>
100178b4:	18d1883a 	add	r8,r3,r3
100178b8:	4211883a 	add	r8,r8,r8
100178bc:	1211883a 	add	r8,r2,r8
100178c0:	41802215 	stw	r6,136(r8)
100178c4:	01000044 	movi	r4,1
100178c8:	11806217 	ldw	r6,392(r2)
100178cc:	20c8983a 	sll	r4,r4,r3
100178d0:	310cb03a 	or	r6,r6,r4
100178d4:	11806215 	stw	r6,392(r2)
100178d8:	41c04215 	stw	r7,264(r8)
100178dc:	01800084 	movi	r6,2
100178e0:	89bfd31e 	bne	r17,r6,10017830 <__alt_data_end+0xf8017830>
100178e4:	11806317 	ldw	r6,396(r2)
100178e8:	3108b03a 	or	r4,r6,r4
100178ec:	11006315 	stw	r4,396(r2)
100178f0:	003fcf06 	br	10017830 <__alt_data_end+0xf8017830>
100178f4:	80805304 	addi	r2,r16,332
100178f8:	80805215 	stw	r2,328(r16)
100178fc:	003fc706 	br	1001781c <__alt_data_end+0xf801781c>
10017900:	00bfffc4 	movi	r2,-1
10017904:	003fd106 	br	1001784c <__alt_data_end+0xf801784c>

10017908 <__call_exitprocs>:
10017908:	008400b4 	movhi	r2,4098
1001790c:	10ae8904 	addi	r2,r2,-17884
10017910:	10800017 	ldw	r2,0(r2)
10017914:	defff404 	addi	sp,sp,-48
10017918:	dd800815 	stw	r22,32(sp)
1001791c:	d8800015 	stw	r2,0(sp)
10017920:	10805204 	addi	r2,r2,328
10017924:	dd000615 	stw	r20,24(sp)
10017928:	dc800415 	stw	r18,16(sp)
1001792c:	dfc00b15 	stw	ra,44(sp)
10017930:	df000a15 	stw	fp,40(sp)
10017934:	ddc00915 	stw	r23,36(sp)
10017938:	dd400715 	stw	r21,28(sp)
1001793c:	dcc00515 	stw	r19,20(sp)
10017940:	dc400315 	stw	r17,12(sp)
10017944:	dc000215 	stw	r16,8(sp)
10017948:	2025883a 	mov	r18,r4
1001794c:	2829883a 	mov	r20,r5
10017950:	d8800115 	stw	r2,4(sp)
10017954:	05bfffc4 	movi	r22,-1
10017958:	d8800017 	ldw	r2,0(sp)
1001795c:	14c05217 	ldw	r19,328(r2)
10017960:	98001d26 	beq	r19,zero,100179d8 <__call_exitprocs+0xd0>
10017964:	dd400117 	ldw	r21,4(sp)
10017968:	98800117 	ldw	r2,4(r19)
1001796c:	173fffc4 	addi	fp,r2,-1
10017970:	e0000d16 	blt	fp,zero,100179a8 <__call_exitprocs+0xa0>
10017974:	14000044 	addi	r16,r2,1
10017978:	8421883a 	add	r16,r16,r16
1001797c:	8421883a 	add	r16,r16,r16
10017980:	84402004 	addi	r17,r16,128
10017984:	9c63883a 	add	r17,r19,r17
10017988:	9c21883a 	add	r16,r19,r16
1001798c:	a0001e26 	beq	r20,zero,10017a08 <__call_exitprocs+0x100>
10017990:	80804017 	ldw	r2,256(r16)
10017994:	15001c26 	beq	r2,r20,10017a08 <__call_exitprocs+0x100>
10017998:	e73fffc4 	addi	fp,fp,-1
1001799c:	843fff04 	addi	r16,r16,-4
100179a0:	8c7fff04 	addi	r17,r17,-4
100179a4:	e5bff91e 	bne	fp,r22,1001798c <__alt_data_end+0xf801798c>
100179a8:	00800034 	movhi	r2,0
100179ac:	10800004 	addi	r2,r2,0
100179b0:	10000926 	beq	r2,zero,100179d8 <__call_exitprocs+0xd0>
100179b4:	98800117 	ldw	r2,4(r19)
100179b8:	1000311e 	bne	r2,zero,10017a80 <__call_exitprocs+0x178>
100179bc:	98800017 	ldw	r2,0(r19)
100179c0:	10003426 	beq	r2,zero,10017a94 <__call_exitprocs+0x18c>
100179c4:	9809883a 	mov	r4,r19
100179c8:	a8800015 	stw	r2,0(r21)
100179cc:	00000000 	call	10000000 <__reset>
100179d0:	acc00017 	ldw	r19,0(r21)
100179d4:	983fe41e 	bne	r19,zero,10017968 <__alt_data_end+0xf8017968>
100179d8:	dfc00b17 	ldw	ra,44(sp)
100179dc:	df000a17 	ldw	fp,40(sp)
100179e0:	ddc00917 	ldw	r23,36(sp)
100179e4:	dd800817 	ldw	r22,32(sp)
100179e8:	dd400717 	ldw	r21,28(sp)
100179ec:	dd000617 	ldw	r20,24(sp)
100179f0:	dcc00517 	ldw	r19,20(sp)
100179f4:	dc800417 	ldw	r18,16(sp)
100179f8:	dc400317 	ldw	r17,12(sp)
100179fc:	dc000217 	ldw	r16,8(sp)
10017a00:	dec00c04 	addi	sp,sp,48
10017a04:	f800283a 	ret
10017a08:	98800117 	ldw	r2,4(r19)
10017a0c:	80c00017 	ldw	r3,0(r16)
10017a10:	10bfffc4 	addi	r2,r2,-1
10017a14:	17001526 	beq	r2,fp,10017a6c <__call_exitprocs+0x164>
10017a18:	80000015 	stw	zero,0(r16)
10017a1c:	183fde26 	beq	r3,zero,10017998 <__alt_data_end+0xf8017998>
10017a20:	00800044 	movi	r2,1
10017a24:	1708983a 	sll	r4,r2,fp
10017a28:	98806217 	ldw	r2,392(r19)
10017a2c:	9dc00117 	ldw	r23,4(r19)
10017a30:	2084703a 	and	r2,r4,r2
10017a34:	1000061e 	bne	r2,zero,10017a50 <__call_exitprocs+0x148>
10017a38:	183ee83a 	callr	r3
10017a3c:	98800117 	ldw	r2,4(r19)
10017a40:	15ffc51e 	bne	r2,r23,10017958 <__alt_data_end+0xf8017958>
10017a44:	a8800017 	ldw	r2,0(r21)
10017a48:	14ffd326 	beq	r2,r19,10017998 <__alt_data_end+0xf8017998>
10017a4c:	003fc206 	br	10017958 <__alt_data_end+0xf8017958>
10017a50:	98806317 	ldw	r2,396(r19)
10017a54:	2084703a 	and	r2,r4,r2
10017a58:	1000061e 	bne	r2,zero,10017a74 <__call_exitprocs+0x16c>
10017a5c:	89400017 	ldw	r5,0(r17)
10017a60:	9009883a 	mov	r4,r18
10017a64:	183ee83a 	callr	r3
10017a68:	003ff406 	br	10017a3c <__alt_data_end+0xf8017a3c>
10017a6c:	9f000115 	stw	fp,4(r19)
10017a70:	003fea06 	br	10017a1c <__alt_data_end+0xf8017a1c>
10017a74:	89000017 	ldw	r4,0(r17)
10017a78:	183ee83a 	callr	r3
10017a7c:	003fef06 	br	10017a3c <__alt_data_end+0xf8017a3c>
10017a80:	98800017 	ldw	r2,0(r19)
10017a84:	982b883a 	mov	r21,r19
10017a88:	1027883a 	mov	r19,r2
10017a8c:	983fb61e 	bne	r19,zero,10017968 <__alt_data_end+0xf8017968>
10017a90:	003fd106 	br	100179d8 <__alt_data_end+0xf80179d8>
10017a94:	0005883a 	mov	r2,zero
10017a98:	003ffa06 	br	10017a84 <__alt_data_end+0xf8017a84>

10017a9c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10017a9c:	defffd04 	addi	sp,sp,-12
10017aa0:	df000215 	stw	fp,8(sp)
10017aa4:	df000204 	addi	fp,sp,8
10017aa8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10017aac:	0001883a 	nop
10017ab0:	e0bfff17 	ldw	r2,-4(fp)
10017ab4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10017ab8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10017abc:	10000226 	beq	r2,zero,10017ac8 <_exit+0x2c>
    ALT_SIM_FAIL();
10017ac0:	002af070 	cmpltui	zero,zero,43969
10017ac4:	00000106 	br	10017acc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10017ac8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10017acc:	003fff06 	br	10017acc <__alt_data_end+0xf8017acc>
